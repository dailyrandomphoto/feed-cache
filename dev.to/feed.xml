<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Configure HTTP Security headers with CloudFront Functions
</title>
      <author>Serhii Vasylenko</author>
      <pubDate>Sat, 22 May 2021 01:57:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/configure-http-security-headers-with-cloudfront-functions-1iid</link>
      <guid>https://dev.to/aws-builders/configure-http-security-headers-with-cloudfront-functions-1iid</guid>
      <description>&lt;p&gt;A couple of weeks ago, AWS released CloudFront Functions — a “true edge” compute capability for the CloudFront.&lt;/p&gt;

&lt;p&gt;It is “true edge” because Functions work on 200+ edge locations (&lt;a href="https://aws.amazon.com/cloudfront/features/?whats-new-cloudfront.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cloudfront.sort-order=desc#Edge_Computing"&gt;link to doc&lt;/a&gt;) while its predecessor, the Lambda@Edge, runs on a small number of regional edge caches.&lt;/p&gt;

&lt;p&gt;One of the use cases for Lambda@Edge was adding security HTTP headers (it’s even listed on the &lt;a href="https://aws.amazon.com/lambda/edge/"&gt;product page&lt;/a&gt;), and now there is one more way to make it using CloudFront Functions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-security-headers-and-why-it-matters"&gt;
  &lt;/a&gt;
  What are security headers, and why it matters
&lt;/h2&gt;

&lt;p&gt;Security Headers are one of the web security pillars.&lt;/p&gt;

&lt;p&gt;They specify security-related information of communication between a web application (i.e., website) and a client (i.e., browser) and protect the web app from different types of attacks. Also, HIPAA and PCI, and other security standard certifications generally include these headers in their rankings. &lt;/p&gt;

&lt;p&gt;We will use CloudFront Functions to set the following headers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#content-security-policy"&gt;Content Security Policy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security"&gt;Strict Transport Security&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#x-content-type-options"&gt;X-Content-Type-Options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#x-xss-protection"&gt;X-XSS-Protection&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#x-frame-options"&gt;X-Frame-Options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://infosec.mozilla.org/guidelines/web_security#referrer-policy"&gt;Referrer Policy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a short and detailed explanation for each security header on &lt;a href="https://infosec.mozilla.org/guidelines/web_security"&gt;Web Security cheatsheet made by Mozilla&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudfront-functions-overview"&gt;
  &lt;/a&gt;
  CloudFront Functions overview
&lt;/h2&gt;

&lt;p&gt;In a nutshell, CloudFront Functions allow performing simple actions against HTTP(s) request (from the client) and response (from the CloudFront cache at the edge). Functions take less than one millisecond to execute, support JavaScript (ECMAScript 5.1 compliant), and cost $0.10 per 1 million invocations.&lt;/p&gt;

&lt;p&gt;Every CloudFront distribution has one (default) or more Cache behaviors, and Functions can be associated with these behaviors to execute upon a specific event.&lt;/p&gt;

&lt;p&gt;That is how the request flow looks like in general, and here is where CloudFront Functions execution happens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lWKaLCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq4tww9uugndo1xlm2p0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lWKaLCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq4tww9uugndo1xlm2p0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudFront Functions support Viewer Request (after CloudFront receives a request from a client) and Viewer Response (before CloudFront forwards the response to the client) events.&lt;/p&gt;

&lt;p&gt;You can read more about the events types and their properties here — &lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudfront-trigger-events.html"&gt;CloudFront Events That Can Trigger a Lambda Function - Amazon CloudFront&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Also, the CloudFront Functions allow you to manage and operate the code and lifecycle of the functions directly from the CloudFront web interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution overview
&lt;/h2&gt;

&lt;p&gt;CloudFront distribution should exist before Function creation so you could associate the Function with the distribution.&lt;/p&gt;

&lt;p&gt;Creation and configuration of the CloudFront Function consist of the following steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-function"&gt;
  &lt;/a&gt;
  Create Function
&lt;/h3&gt;

&lt;p&gt;In the AWS Console, open CloudFront service and lick on the Functions on the left navigation bar, then click Create function button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGi1LxrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpouyjgs73bg2i04keaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGi1LxrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpouyjgs73bg2i04keaj.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the name of your Function (e.g., “security-headers”) and click Continue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-function"&gt;
  &lt;/a&gt;
  Build Function
&lt;/h3&gt;

&lt;p&gt;On the function settings page, you will see four tabs with the four lifecycle steps: Build, Test, Publish, Associate.&lt;/p&gt;

&lt;p&gt;Paste the function code into the editor and click “Save.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W7cRlbKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/984a3sokw5ndsl8j51r5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7cRlbKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/984a3sokw5ndsl8j51r5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code of the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strict-transport-security&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;max-age=63072000; includeSubdomains; preload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content-security-policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; frame-ancestors 'none'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-content-type-options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nosniff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-xss-protection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1; mode=block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;referrer-policy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x-frame-options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DENY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#test-function"&gt;
  &lt;/a&gt;
  Test Function
&lt;/h4&gt;

&lt;p&gt;Open the “Test” tab — let’s try our function first before it becomes live!&lt;/p&gt;

&lt;p&gt;Select Viewer Response event type and Development Stage, then select “Viewer response with headers” as a Sample test event (you will get a simple set of headers automatically).&lt;/p&gt;

&lt;p&gt;Now click the blue “Test” button and observe the output results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compute utilization represents the relative amount of time (on a scale between 0 and 100) your function took to run&lt;/li&gt;
&lt;li&gt;Check the Response headers tab and take a look at how the function added custom headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clLnbTfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohftop75g5jg4sth18tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clLnbTfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohftop75g5jg4sth18tj.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-function"&gt;
  &lt;/a&gt;
  Publish Function
&lt;/h3&gt;

&lt;p&gt;Let’s publish our function. To do that, open the Publish tab and click on the blue button “Publish and update.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dgOO_0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtg9v3uz8udlelb44ic0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dgOO_0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtg9v3uz8udlelb44ic0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#associate-your-function-with-cloudfront-distribution"&gt;
  &lt;/a&gt;
  Associate your Function with CloudFront distribution
&lt;/h3&gt;

&lt;p&gt;Now, you can associate the function with the CloudFront distribution.&lt;/p&gt;

&lt;p&gt;To do so, open the Associate tab, select the distribution and event type (Viewer Response), and select the Cache behavior of your distribution which you want to use for the association.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dev1-AWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy4o019r7ujn9384ue1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dev1-AWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy4o019r7ujn9384ue1h.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you associate the function with the CloudFront distribution, you can test it in live mode.&lt;/p&gt;

&lt;p&gt;I will use curl here to demonstrate it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; curl &lt;span class="nt"&gt;-i&lt;/span&gt; https://d30i87a4ss9ifz.cloudfront.net
HTTP/2 200
content-type: text/html
content-length: 140
&lt;span class="nb"&gt;date&lt;/span&gt;: Sat, 22 May 2021 00:22:18 GMT
last-modified: Tue, 27 Apr 2021 23:07:14 GMT
etag: &lt;span class="s2"&gt;"a855a3189f8223db53df8a0ca362dd62"&lt;/span&gt;
accept-ranges: bytes
server: AmazonS3
via: 1.1 50f21cb925e6471490e080147e252d7d.cloudfront.net &lt;span class="o"&gt;(&lt;/span&gt;CloudFront&lt;span class="o"&gt;)&lt;/span&gt;
content-security-policy: default-src &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; img-src &lt;span class="s1"&gt;'self'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; script-src &lt;span class="s1"&gt;'self'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; style-src &lt;span class="s1"&gt;'self'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; object-src &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; frame-ancestors &lt;span class="s1"&gt;'none'&lt;/span&gt;
strict-transport-security: max-age&lt;span class="o"&gt;=&lt;/span&gt;63072000&lt;span class="p"&gt;;&lt;/span&gt; includeSubdomains&lt;span class="p"&gt;;&lt;/span&gt; preload
x-xss-protection: 1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;block
x-frame-options: DENY
referrer-policy: same-origin
x-content-type-options: nosniff
x-cache: Miss from cloudfront
x-amz-cf-pop: WAW50-C1
x-amz-cf-id: ud3qH8rLs7QmbhUZ-DeupGwFhWLpKDSD59vr7uWC65Hui5m2U8o2mw&lt;span class="o"&gt;==&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also test your results here — &lt;a href="https://observatory.mozilla.org/"&gt;Mozilla Observatory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpShx-Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8wif4x6xc12jyfjjn5m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpShx-Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8wif4x6xc12jyfjjn5m.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIHYl7pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mwl8axanrjmt3cnp7q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIHYl7pX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mwl8axanrjmt3cnp7q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;p&gt;That was a simplified overview of the CloudFront Functions capabilities.&lt;/p&gt;

&lt;p&gt;But if you want to get deeper, here is a couple of useful links to start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another overview from AWS — &lt;a href="https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale"&gt;CloudFront Functions Launch Blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More about creating, testing, updating and publishing of CloudFront Functions — &lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html"&gt;Managing functions in CloudFront Functions - Amazon CloudFront&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-to-choose"&gt;
  &lt;/a&gt;
  So what to choose?
&lt;/h2&gt;

&lt;p&gt;CloudFront Functions are simpler than Lambda@Edge and run faster with minimal latency and minimal time penalty for your web clients.&lt;/p&gt;

&lt;p&gt;Lambda@Edge takes more time to invoke, but it can run upon Origin Response event so that CloudFront can cache the processed response (including headers) and return it faster afterward.&lt;/p&gt;

&lt;p&gt;But again, the CloudFront Functions invocations are much cheaper (6x times) than Lambda@Edge, and you do not pay for the function execution duration.&lt;/p&gt;

&lt;p&gt;The final decision would also depend on the dynamic/static nature of the content you have at your origin.&lt;/p&gt;

&lt;p&gt;To make a wise and deliberate decision, try to analyze your use case using these two documentation articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html"&gt;Choosing between CloudFront Functions and Lambda@Edge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-how-to-choose-event.html"&gt;How to Decide Which CloudFront Event to Use to Trigger a Lambda Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>cloudfront</category>
      <category>security</category>
      <category>serverless</category>
    </item>
    <item>
      <title>RDP Cracking Method</title>
      <author>Hafiz Muhammad Attaullah</author>
      <pubDate>Sat, 22 May 2021 01:10:34 +0000</pubDate>
      <link>https://dev.to/attaullahshafiq10/rdp-cracking-method-17dn</link>
      <guid>https://dev.to/attaullahshafiq10/rdp-cracking-method-17dn</guid>
      <description>&lt;p&gt;This guide will teach you how to crack VPS/RDP’s (Remote Desktop Connection). RDP cracking Is not a thing to Waste your time on. Even if you change the RDP Password, The owner Can recover the RDP from the Panel. This is Just Because Many Asked how to Crack RDP. If Few sites that I mentioned didn't open. Use US VPN&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tools You Need :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅ KPORT SCANNER&lt;/p&gt;

&lt;p&gt;Link :&lt;br&gt;
https:/ ***** /anonfile. ***** com/d709E4vabe/KPortScan_3.0_rar&lt;/p&gt;

&lt;p&gt;Password : 123456]&lt;/p&gt;

&lt;p&gt;✅ NLBrute&lt;/p&gt;

&lt;p&gt;LINK :&lt;/p&gt;

&lt;p&gt;https:// **** anonfiles **** .com/R6Y7y2B6o8/NLBrute_1.2_zip&lt;/p&gt;

&lt;p&gt;✅ IP adress list&lt;/p&gt;

&lt;p&gt;LINK :&lt;br&gt;
https:// *** www **** .countryipblocks *** .net/country_selection.php&lt;/p&gt;

&lt;p&gt;Steps :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download NLBrute and KPORT SCANNER from above links and install them&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go here ?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;https: **** //&lt;a href="http://www.countryipblocks"&gt;www.countryipblocks&lt;/a&gt;. *** net/country_selection.php&lt;/p&gt;

&lt;p&gt;And copy all ip address and paste in KPORT scanner. After clicking start button dont change anything&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AFTER u find some IPS in count of goods..good ips automaticaly saved in results section..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now open NLBRUTE&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⭕️ Go to Work Files&lt;/p&gt;

&lt;p&gt;⭕️ Load the Good IP's that we got from KPort Scanner.&lt;/p&gt;

&lt;p&gt;⭕️ And Load the User and Pass that is in userpass Folder. Now click generate&lt;/p&gt;

&lt;p&gt;⭕️ Go to settings and Set Max Attempts to 1 and Threads to 800 or 900 .&lt;/p&gt;

&lt;p&gt;⭕️ Now go to brute and click start and Wait until you get some good countrs&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When you get some “Good” Ip’s, it’s time to connect to the VPS/RDP.The working IP’s are stored in a .txt file.
They are in the format “111.*222.*333.*444@username;password&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;.&lt;br&gt;
Enjoy!!!&lt;/p&gt;

&lt;p&gt;HM Attaullah&lt;/p&gt;

</description>
      <category>rdp</category>
      <category>cybersecurity</category>
      <category>cracking</category>
    </item>
    <item>
      <title>Any Netsuite or Suitecommerce Developer?</title>
      <author>Broken Rubik</author>
      <pubDate>Sat, 22 May 2021 00:02:29 +0000</pubDate>
      <link>https://dev.to/brokenrubik/any-netsuite-or-suitecommerce-developer-45li</link>
      <guid>https://dev.to/brokenrubik/any-netsuite-or-suitecommerce-developer-45li</guid>
      <description>&lt;p&gt;Hi guys! Glad to be here we’re a team of consultants, developers, and web designers specialized in delivering tailor-made solutions for NetSuite SuiteCommerce Advanced.&lt;/p&gt;

&lt;p&gt;Any NetSuite developer out here?&lt;/p&gt;

&lt;p&gt;Check more about us here: &lt;a href="https://brokenrubik.co/"&gt;https://brokenrubik.co/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>netsuite</category>
      <category>suitecommerce</category>
      <category>developer</category>
      <category>oracle</category>
    </item>
    <item>
      <title>Restaurant Menu using javascript </title>
      <author>Abdur Rehman Khalid</author>
      <pubDate>Sat, 22 May 2021 00:00:27 +0000</pubDate>
      <link>https://dev.to/abdurrehmaan/restaurant-menu-using-javascript-33ln</link>
      <guid>https://dev.to/abdurrehmaan/restaurant-menu-using-javascript-33ln</guid>
      <description>&lt;p&gt;Hello DEV community! 👋&lt;/p&gt;

&lt;p&gt;I've recently attempted to make a Restaurant Menu using HTML CSS and java script.&lt;/p&gt;

&lt;p&gt;Live Demo: &lt;a href="https://res-menu.netlify.app/"&gt;https://res-menu.netlify.app/&lt;/a&gt;&lt;br&gt;
You can check the github repository here for the source code: &lt;a href="https://github.com/abdurrehmaan/Restaurants-Menu"&gt;https://github.com/abdurrehmaan/Restaurants-Menu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kHrY5aJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vhm8m47bvgtqbc3e4cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kHrY5aJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vhm8m47bvgtqbc3e4cq.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that some features are yet to be implemented and i would love to hear your feedback!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How the Pomodoro Technique Made Me a Better Developer and Writer (and you too)</title>
      <author>Kingsley Ubah</author>
      <pubDate>Fri, 21 May 2021 22:56:05 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-the-pomodoro-technique-made-me-a-better-developer-and-writer-and-you-too-3o92</link>
      <guid>https://dev.to/ubahthebuilder/how-the-pomodoro-technique-made-me-a-better-developer-and-writer-and-you-too-3o92</guid>
      <description>&lt;p&gt;As I have stated a number of times, one of the biggest factors that holds people back from their goal is lack of focus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus is the life-blood of progress&lt;/strong&gt;. Without focus, you're just wasting your time. Focus is your ability to leave aside other secondary activities to instead channel your unwavering attention towards your main task or agenda.&lt;/p&gt;

&lt;p&gt;In one of my  &lt;a href="https://ubahthebuilder.tech/self-motivation-tips-for-web-developers"&gt;previous articles&lt;/a&gt; , I mentioned how poor time management proved to be my undoing as a web developer at the onset.&lt;/p&gt;

&lt;p&gt;The things is when you mismanage your time, your &lt;strong&gt;focus&lt;/strong&gt; is also affected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-pomodoro-technique"&gt;
  &lt;/a&gt;
  What is the Pomodoro Technique
&lt;/h3&gt;

&lt;p&gt;The pomodoro technique is a highly effective pro-productivity strategy discovered by an Italian student, Francesco Cirrillo, in the 1980s. &lt;/p&gt;

&lt;p&gt;Cirillo was a student struggling to focus on his studies. He challenged himself to commit just 10 minutes of his time to focused studying without any distractions. Encouraged by the challenge, he found a tomato (which is 'pomodoro' in Italian) shaped kitchen timer, and thus the Pomodoro technique was born.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-core-tenets-of-this-technique"&gt;
  &lt;/a&gt;
  Here are the core tenets of this technique:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get a to-do list and a timer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set your timer for 25 minutes, and focus on a single task until the timer rings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When your session ends, mark off one pomodoro and record what you completed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then enjoy a five-minute break.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After four pomodoros, take a longer 15-30 minute break.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-i-discovered-this-technique"&gt;
  &lt;/a&gt;
  How I discovered this technique
&lt;/h3&gt;

&lt;p&gt;I first learnt about this technique from the radio on my way to a lecture. &lt;/p&gt;

&lt;p&gt;After that I did some further research and came across an amazing  &lt;a href="https://www.youtube.com/watch?v=z7e7gtU3PHY"&gt;Tedtalk&lt;/a&gt;  on it's effectiveness. After getting blown away by it's novelty, I decided to incorporate it into my lifestyle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-challenge"&gt;
  &lt;/a&gt;
  Writing Challenge
&lt;/h3&gt;

&lt;p&gt;Everyday, I would commit at least &lt;strong&gt;30-50 minutes&lt;/strong&gt; to writing. It didn't matter if my work was structured or meaningful, I just wrote. I made sure to get rid of all distractions. My phone was always switched off.&lt;/p&gt;

&lt;p&gt;I tried to pen down my thoughts without thinking much about anything else.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h4&gt;

&lt;p&gt;Even with my limited time, I was able to achieve some incredible feats. I published at least four articles on my blogs every week.&lt;/p&gt;

&lt;p&gt;This wouldn't have been possible without focused work and dedication which results from implementing the technique.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-challenge"&gt;
  &lt;/a&gt;
  Coding Challenge
&lt;/h3&gt;

&lt;p&gt;Daily coding routines was something else I got serious about. I dedicated at least 1 hour of my time to programming websites and designing pages. &lt;/p&gt;

&lt;p&gt;I also listed out &lt;strong&gt;7 web technologies&lt;/strong&gt; which I dedicated at least 30 minutes per day to learn.&lt;/p&gt;

&lt;p&gt;They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue&lt;/li&gt;
&lt;li&gt;Node js&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h4&gt;

&lt;p&gt;After every session, I got more and more self-assured of my abilities. My React skills started getting better and better. I have also extensively used other libraries like GraphQL and Redux.&lt;/p&gt;

&lt;p&gt;And perhaps the most important, my CSS skills got significantly better.&lt;/p&gt;

&lt;p&gt;Honestly, this technique can do &lt;strong&gt;wonders to your programming skills&lt;/strong&gt; if properly utilized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-creation-on-twitter"&gt;
  &lt;/a&gt;
  Content creation on Twitter
&lt;/h3&gt;

&lt;p&gt;This technique also made me much more productive on Twitter. Under it's auspices, I went from around 8,000 to currently 11,100+ followers within 5 weeks!&lt;/p&gt;

&lt;p&gt;I also compiled over 10 threads though some of them were just a repurpose.&lt;/p&gt;

&lt;p&gt;With the pomodoro technique, I was able to &lt;strong&gt;dramatically scale up&lt;/strong&gt; my productivity despite having the &lt;strong&gt;same limited amount of time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Not only have I made myself more productive, I have &lt;strong&gt;trained myself to be disciplined&lt;/strong&gt;, &lt;strong&gt;habitually focused&lt;/strong&gt; and also more aware of how &lt;strong&gt;valuable my time is&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The pomodoro technique opens your eyes to your true capabilities and shows you just how much you can achieve if you manage your time well and eliminate all forms of distractions.&lt;/p&gt;

&lt;p&gt;Also, thanks to this technique, I am able to set a time limit to everything I do. That way, I don't get carried away or preoccupied by a particular task.&lt;/p&gt;

&lt;p&gt;For some endless tasks  like reading or scrolling through my Twitter feed, I am able to recognize when I have "overdone" it thanks to the time awareness and set boundaries accordingly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concentrate all your thoughts upon the work at hand. The sun’s rays do not burn until brought to a focus. - &lt;strong&gt;Alexander Graham Bell&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will advice anyone looking to become more productive to try out this technique from today. I am very positive your life will change, or improve!&lt;/p&gt;

&lt;p&gt;If you benefitted from this article and would like to support:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you and see you soon.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you are in need of a detailed resource on Web Development, check out  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>programming</category>
      <category>writing</category>
    </item>
    <item>
      <title>Basic auth with NGINX Ingress Controller on Kubernetes</title>
      <author>Jordan Gregory</author>
      <pubDate>Fri, 21 May 2021 21:52:40 +0000</pubDate>
      <link>https://dev.to/sixgill/basic-auth-with-nginx-ingress-controller-on-kubernetes-4cof</link>
      <guid>https://dev.to/sixgill/basic-auth-with-nginx-ingress-controller-on-kubernetes-4cof</guid>
      <description>&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; This particular post will not try to explain the basics of Kubernetes Ingress controllers.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;NGINX Ingress Controller&lt;/em&gt;, provided by F5 (the company that owns NGINX) is not the same thing as the &lt;em&gt;ingress-nginx&lt;/em&gt; controller (the ingress provided and maintained by the Kubernetes community).&lt;/p&gt;

&lt;p&gt;We at Sixgill don't have anything against the &lt;em&gt;ingress-nginx&lt;/em&gt; controller, but there are a number of things that the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; does that &lt;em&gt;ingress-nginx&lt;/em&gt; does not, and we needed those particular features; if you would like a breakdown of the differences, feel free to request it in the comments, but we feel like F5 did a decent job with this post:&lt;br&gt;
&lt;a href="https://www.nginx.com/blog/wait-which-nginx-ingress-controller-kubernetes-am-i-using/"&gt;Which NGINX Ingress Controller am I using?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both options are open source (but the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; has a paid support option).&lt;br&gt;
It's worth noting that the following steps can probably be performed with the &lt;em&gt;ingress-nginx&lt;/em&gt; controller as well, but we have not tested it.&lt;/p&gt;

&lt;p&gt;With that out of the way, here is what we did to enable &lt;strong&gt;BASIC AUTH&lt;/strong&gt; using the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; by F5.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assumptions-and-necessary-prework"&gt;
  &lt;/a&gt;
  Assumptions and Necessary Pre-Work
&lt;/h2&gt;

&lt;p&gt;So, the basic assumptions are these:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a running Kubernetes cluster that you can access ... somewhere (KinD, minikube, GKE, AKS, EKS, etc...).&lt;/li&gt;
&lt;li&gt;You have the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; installed (NGINX Plus is not necessary, but enabling snippets is necessary).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you do not have the &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; installed, just follow the steps in the guides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/"&gt;Installation With Raw Kubernetes Manifests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-helm/"&gt;Installation with Helm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-operator/"&gt;Installation with the NGINX Ingress Controller Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only real pre-work step is that you have to have a valid &lt;code&gt;.htpasswd&lt;/code&gt; file to provide to the controller pods.&lt;/p&gt;

&lt;p&gt;In our case, we did the following in an Ubuntu container and wrote the output to a Secret which is kind of outside of the scope of this post, but the slightly more manual method is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apt-get update
apt-get &lt;span class="nb"&gt;install &lt;/span&gt;apache2-utils
htpasswd &lt;span class="nt"&gt;-c&lt;/span&gt; .htpasswd &amp;lt;my_first_user&amp;gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;The&lt;/span&gt;&lt;span class="sh"&gt; utility will ask you to input the password for the user &amp;gt;&amp;gt;

cat .htpasswd
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need more than a single user, feel free to rinse//repeat the &lt;code&gt;htpasswd -c ...&lt;/code&gt; step for as many users as you need.&lt;/p&gt;

&lt;p&gt;Then, just copy the contents of that file via &lt;code&gt;cat&lt;/code&gt; for later use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-htpasswd-file-to-the-existingfuture-nginx-ingress-controller-pods"&gt;
  &lt;/a&gt;
  Adding the .htpasswd file to the existing/future &lt;em&gt;NGINX Ingress Controller&lt;/em&gt; pods
&lt;/h2&gt;

&lt;p&gt;First, we have to add the contents of the .htpasswd file to either a ConfigMap or a Secret, and given the contents, we chose a Secret, so to do this, we created this resource:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of htpasswd.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Secret&lt;/span&gt;
&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Opaque&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
&lt;span class="na"&gt;stringData&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;.htpasswd&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;&amp;lt;&amp;lt; CONTENTS OF .HTPASSWD THAT YOU COPIED FROM PRE-WORK &amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, simply apply it using &lt;code&gt;kubectl apply -f htpasswd.yaml&lt;/code&gt;, but feel free to call the file whatever you want.&lt;/p&gt;

&lt;p&gt;If you happened to save the contents of the .htpasswd to a file before hand, you could have simply run &lt;code&gt;kubectl create secret generic htpasswd -n nginx --from-file=&amp;lt;your_file&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we have to add this file the NGINX pods. To do this step, we need to get the deployment name that we have to edit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get deployments -n nginx

NAME           READY  UP-TO-DATE  AVAILABLE  AGE
nginx-ingress  1/1    1           1          15d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this, we can simple edit the resource using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl edit deployment nginx-ingress -n nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The modifications we have to make are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx-ingress&lt;/span&gt;
        &lt;span class="s"&gt;...&lt;/span&gt;
        &lt;span class="c1"&gt;# THIS IS WHAT WE NEED TO ADD TO THE CONTAINER&lt;/span&gt;
        &lt;span class="na"&gt;volumeMounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;mountPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/etc/apache2&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
        &lt;span class="s"&gt;...&lt;/span&gt;
      &lt;span class="c1"&gt;# AND THIS IS WHAT WE NEED TO ADD TO THE OVERALL SPEC&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;secret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;defaultMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420&lt;/span&gt;
          &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.htpasswd&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.htpasswd&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;htpasswd&lt;/span&gt;
      &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you are comfortable with patching Kubernetes resources, that would be a viable alternative to just editing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modifying-your-ingress-to-use-the-work"&gt;
  &lt;/a&gt;
  Modifying your ingress to use the work
&lt;/h2&gt;

&lt;p&gt;So now, the last step is you modify your ingress to actually use everything we have done up to this point. So again, we need to get the name of your ingress and edit it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get ingresses

NAME        CLASS  HOSTS                      ADDRESS  PORTS AGE
my-ingress  nginx  my-service.whatever.myTld  1.2.3.4  80,443  15d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and edit your ingress like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl edit ingress my-ingress&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The only changes we need to make are to the annotations of the ingress, and the annotations we need to add are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;...&lt;/span&gt;
  &lt;span class="s"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;# THIS IS THE ADDITION&lt;/span&gt;
    &lt;span class="s"&gt;nginx.org/server-snippets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
      &lt;span class="s"&gt;auth_basic "my-ingress";&lt;/span&gt;
      &lt;span class="s"&gt;auth_basic_user_file /etc/apache2/.htpasswd;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you save the resource, go ahead and try to access you ingress ... and voila! you are presented with a login popup that we are all so familiar with.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>k8s</category>
      <category>nginx</category>
      <category>auth</category>
    </item>
    <item>
      <title>Developing an api architecture</title>
      <author>Jack</author>
      <pubDate>Fri, 21 May 2021 21:46:43 +0000</pubDate>
      <link>https://dev.to/jackmellis/developing-an-api-architecture-4g2j</link>
      <guid>https://dev.to/jackmellis/developing-an-api-architecture-4g2j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I love a bit of architecture. How you structure your application is so important and if you get it wrong you'll really pay for it down the line. The problem is you often don't know you've got it wrong until it's too late. I've made this mistake so many times and iterated on solutions so much that now when I start a project I know exactly how I want it to be structured. I've developed what I consider to be a pretty robust pattern for application development.&lt;/p&gt;

&lt;p&gt;Essentially I follow a loose Hexagonal Architecture pattern. I won't go into too much detail on what hexagonal architecture is as there are tonnes of articles on the concepts and ideas already. What I will do is show how I interpret it into my own applications. Although there are lots of articles about this pattern, they are very rarely discussed in terms of a node or front end application (usually they are Java-based).&lt;/p&gt;

&lt;p&gt;For this article I'll focus on my node app. I'll cover the front end separately as although it's similar at the core, there are some necessary differences.&lt;/p&gt;

&lt;p&gt;This is roughly how my codebase is structured:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;src
│
└───api
|   └───route
|       |   get.ts
|       |   post.ts
|       |   delete.ts
|
└───application
|   └───feature
|       |   usecase.ts
|
└───core
|   |   feature.ts
|
└───infrastructure
|   └───feature
|       |   method.ts
|
└───domain
|   |   feature.ts
|
└───bootstrap
    |   setup.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also termed Ports and Adapters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;application = usecases&lt;/li&gt;
&lt;li&gt;core = ports&lt;/li&gt;
&lt;li&gt;infrastructure = adapters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-do-all-of-these-layers-mean"&gt;
  &lt;/a&gt;
  So what do all of these layers mean?
&lt;/h2&gt;

&lt;p&gt;I've drawn a diagram of how this application fits into hexagonal architecture. Unfortunately diagram creating is not my strong point so I apologise in advance:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJigWyO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrdzk42f86efrwfufwey.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJigWyO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrdzk42f86efrwfufwey.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks like every other HA diagram I've ever seen and until you "get it" I don't think it really helps that much. I often find it easier to convey the flow of data like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRcUGFX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjeu09ejy7kzgo6qg4ca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRcUGFX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjeu09ejy7kzgo6qg4ca.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point you might be thinking: "why are there so many steps for this one request?" and you're right. In a "basic" express app your flow would probably look more like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGYHzpq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rha3kpbnhkgrr43w5wfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGYHzpq9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rha3kpbnhkgrr43w5wfl.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;But the problem with this is you're tightly coupling your application in every sense. You make it hard to test the individual parts, you tie your application logic into your server, you tie your database into your application logic, which in turn ties your database into your server. One of the fundamental principles of good software design is to separate your concerns.&lt;/p&gt;

&lt;p&gt;So yes this is more files and more layers of abstraction, but that's a good thing I promise!&lt;/p&gt;

&lt;p&gt;Let's dive a little deeper into each of these folders:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  api
&lt;/h2&gt;

&lt;p&gt;My api layer contains my express routes and nothing else. You can think of this layer as being controllers in an MVC framework. The routes don't contain any logic, they purely pass the request data on to the application layer and then respond with the result. Not only does this keep the routes lean, it keeps all of my application logic agnostic of the delivery method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getBasketUsecase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The structure of this folder mirrors the express paths, for example: &lt;code&gt;/src/api/basket/get.ts&lt;/code&gt; equates to a GET request to &lt;code&gt;/api/basket&lt;/code&gt;. When setting up the application, I automatically find all of the files in this folder and calculate the express routes dynamically. This means I never have to manually write &lt;code&gt;app.get('/api/basket')&lt;/code&gt; as it's just inferred. This kind of auto-routing is quite common with big frameworks and things like next.js. Personally I like it and it feels like "magic" without being too "behind the scenes".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application"&gt;
  &lt;/a&gt;
  application
&lt;/h2&gt;

&lt;p&gt;These are my use cases. What I mean by this is that each method is an end-to-end feature. For example "get the basket", "add something to the basket", "remove something from the basket". Each use case will handle things like validating inputs, calling the necessary methods to carry out the action, validating the response, transforming data into the output type, and so on. Essentially this is the "orchestration" layer of the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;usecase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;validateArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;normalizeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;validateOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is almost always a 1:1 relationship between the api layer and the application layer. An api endpoint will only call one usecase, and a usecase will most likely only be used by one api endpoint. Why not just combine them into a single function? Loose coupling.&lt;/p&gt;

&lt;p&gt;For example, although I am using express for my server, I may want certain use cases to be accessed via a CLI instead/as well. The application layer does not care if a request comes via the web api, or the cli, or some other method. It just cares about the arguments it receives.&lt;/p&gt;

&lt;p&gt;The application, core, and infrastructure layers are hard to talk about in isolation (which is ironic) so the next few sections will be a bit intertwined...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core"&gt;
  &lt;/a&gt;
  core
&lt;/h2&gt;

&lt;p&gt;How does the application layer actually "do stuff" though? If we want to get the basket, for example, how does it do this? We wouldn't want the application layer to import the database and query it directly, this would couple our low level implementation too tightly to the high level use case.&lt;/p&gt;

&lt;p&gt;The core layer holds interfaces for all of the things the application can do. When I say &lt;em&gt;interfaces&lt;/em&gt;, I mean &lt;em&gt;typescript interfaces&lt;/em&gt;, there is no actual javascript here, purely types and interfaces.&lt;/p&gt;

&lt;p&gt;So for example, if we want to get the basket, there will be a &lt;code&gt;FetchBasket&lt;/code&gt; type that might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FetchBasket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IBasket&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our application layer operates purely on these interfaces, at no point do we import a &lt;code&gt;fetchBasket&lt;/code&gt; function. Instead, we import the interface from the core layer and use dependency injection to say "please fetch the implementation of this type". Dependency injection is really the glue that connects these layers together.&lt;/p&gt;

&lt;p&gt;For example, our get basket use case might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getBasketUsecase&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchBasket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jpex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FetchBasket&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;basket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchBasket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means there is a "bridge" between the application layer and the underlying implementation detail, which is really important. The above function is really easy to test because the &lt;code&gt;fetchBasket&lt;/code&gt; implementation does not exist, you can provide any implementation you want. It also means that your usecases are really clean, because all of the leg work is abstracted away and all you have to do is say "I'd like the implementation of this type please" and off you go.&lt;/p&gt;

&lt;p&gt;One awesome benefit of this is that you can write your core layer, then your usecase layer, and not even bother with the infrastructure layer until later. This is fantastic for working on new features where you know what the use case is ("the user wants to see their basket"), and you know roughly what the interface will look like ("pass the user id to the database, get the basket back"), but you're not quite sure on the implementation detail yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure"&gt;
  &lt;/a&gt;
  infrastructure
&lt;/h2&gt;

&lt;p&gt;Now that we have our &lt;code&gt;core&lt;/code&gt; interfaces, the infrastructure layer contains all of the implementations for them. Essentially anything that causes a side effect, or &lt;em&gt;reaches&lt;/em&gt; outside of your code (like accessing the database) is infrastructure.&lt;/p&gt;

&lt;p&gt;Interestingly, infrastructure methods can rely on other core interfaces which means you can have several levels of abstraction. For example, the &lt;code&gt;fetchBasket&lt;/code&gt; implementation will probably depend on an &lt;code&gt;IDatabase&lt;/code&gt; interface, which in turn would be a wrapper around your actual database.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, I use dependency injection (specifically the service locator pattern) to register these infrastructure methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;jpex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FetchBasket&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IDatabase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;basket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  bootstrap
&lt;/h2&gt;

&lt;p&gt;The bootstrap folder isn't even a layer, and it does what you think it does. We call a setup function at app start. This creates the express server, finds and registers all of our api routes, finds and registers all of our infrastructure methods, connects the database, and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#misc"&gt;
  &lt;/a&gt;
  Misc
&lt;/h2&gt;

&lt;p&gt;There are a couple of notes I wanted to add/clarify as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I should mention that I follow a &lt;em&gt;loose&lt;/em&gt; function programming paradigm. You won't see any service/repository classes or anything like that. Everything is a function that depends on other functions. I've found that repository classes often become unwieldy, hard to maintain, cluttered with dependencies, and difficult to mock. (Plus all data is treated as immutable, but that affects the frontend much more than the backend)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I should also point out that although the top level folders aren't "domains", this &lt;em&gt;is&lt;/em&gt; still domain driven design. We've just grouped the high level concerns of our domains first. You &lt;em&gt;could&lt;/em&gt; flip this over and have &lt;code&gt;domain/infrastructure/method.ts&lt;/code&gt;, and I have tried it this way around, but you will almost definitely hit cross-domain issues that don't exist in this format.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So that is an extremely long (but honestly brief) tour of my backend architecture. It's quite a lot to wrap your head around but I have confidence (and experience) that it is an extremely clean, testable, scalable application structure.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>react</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Create your own octocat</title>
      <author>𝙼𝚊𝚗𝚞𝚃𝚑𝚎𝙲𝚘𝚍𝚎𝚛</author>
      <pubDate>Fri, 21 May 2021 21:42:16 +0000</pubDate>
      <link>https://dev.to/manuthecoder/create-your-own-octocat-10de</link>
      <guid>https://dev.to/manuthecoder/create-your-own-octocat-10de</guid>
      <description>&lt;p&gt;If you don't know the Octocat is GitHub's mascot and logo.&lt;br&gt;
Want to make your own?&lt;br&gt;
Visit: &lt;a href="https://myoctocat.com"&gt;https://myoctocat.com&lt;/a&gt; (Official)&lt;br&gt;
Octocat library: &lt;a href="https://octodex.github.com/"&gt;https://octodex.github.com/&lt;/a&gt; (Unofficial)&lt;/p&gt;

&lt;p&gt;Share your octocat in the comments below!&lt;/p&gt;

</description>
      <category>octocat</category>
      <category>github</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Stamp Detection using Computer Vision and Python</title>
      <author>Aravind Ramalingam</author>
      <pubDate>Fri, 21 May 2021 20:38:34 +0000</pubDate>
      <link>https://dev.to/6aravind/stamp-detection-using-computer-vision-and-python-1ghg</link>
      <guid>https://dev.to/6aravind/stamp-detection-using-computer-vision-and-python-1ghg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h1&gt;

&lt;p&gt;A friend of mine reach out and asked me whether I could write a program to detect the number of Rubber stamps in an image. Apparently, these invoice receipts will be categorized based on the number of stamps on them. Initially, I thought of building a Deep Learning Segmentation model, but soon I realized that it is not worth the effort. &lt;/p&gt;

&lt;p&gt;The images are generated in a controlled environment so few computer vision algorithms should do the trick. To illustrate the computer vision algorithms used in detecting the stamps, I will be using a sample image downloaded from Google as the original image is company property. The goal is to identify two stamps in the sample image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUvOo6Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836aqc88lj5kycf5wn5r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUvOo6Uh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/836aqc88lj5kycf5wn5r.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;High level solution steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the image.&lt;/li&gt;
&lt;li&gt;Blur &amp;amp; detect the edges.&lt;/li&gt;
&lt;li&gt;Find all contours and remove the smaller contours.&lt;/li&gt;
&lt;li&gt;Fill the area inside contours &amp;amp; Close the blobs.&lt;/li&gt;
&lt;li&gt;Filter the stamps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we start let us import the necessary packages.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#1-read-the%C2%A0image"&gt;
  &lt;/a&gt;
  1. Read the image
&lt;/h2&gt;

&lt;p&gt;Read the color image using imread function. To display the image we will use Matplotlib. Matplotlib expects the color image channels to be of the order RGB, but OpenCV reads the image as BGR, so we will write a helper function for the conversion.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmqDuCJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4alaedmpj9w673ei80cl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmqDuCJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4alaedmpj9w673ei80cl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blur-amp-detect-the-edges"&gt;
  &lt;/a&gt;
  2. Blur &amp;amp; detect the edges
&lt;/h2&gt;

&lt;p&gt;First, we need to convert the image to grayscale using &lt;a href="https://docs.opencv.org/3.4/d8/d01/group__imgproc__color__conversions.html#ga397ae87e1288a81d2363b61574eb8cab"&gt;cvtColor&lt;/a&gt; function. Then, we will use &lt;a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga9d7064d478c95d60003cf839430737ed"&gt;bilateralFilter&lt;/a&gt; to reduce noise in the image. Bilateral filter is preferred over Gaussian because it preserves the edges much better. Finally, we will use &lt;a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html"&gt;canny&lt;/a&gt; edge detector to threshold the image and detect edges. The normal canny edge detector requires two threshold parameters which is hard to tune so we will use the one from &lt;a href="https://www.pyimagesearch.com/2015/04/06/zero-parameter-automatic-canny-edge-detection-with-python-and-opencv"&gt;Zero-parameter, automatic Canny edge detection with Python and OpenCV&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Owfx6Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgfhyfclqmuvchufwrc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Owfx6Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgfhyfclqmuvchufwrc7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-find-all-contours-and-remove-the-smaller-contours"&gt;
  &lt;/a&gt;
  3. Find all contours and remove the smaller contours
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.opencv.org/3.4/d3/dc0/group__imgproc__shape.html#ga17ed9f5d79ae97bd4c7cf18403e1689a"&gt;findContours&lt;/a&gt; function can find all contours in the image. The outer most contours are good enough for our use case so we will use the retrieval mode &lt;strong&gt;RETR_EXTERNAL&lt;/strong&gt;. &lt;strong&gt;CHAIN_APPROX_NONE&lt;/strong&gt; mode is preferred as we don't want to lose any point on the contour due to approximation. To remove the unwanted smaller contours, we can filter the contours by area.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Total nr of contours found: 408&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-fill-the-area-inside-contours-amp-close-the-blobs"&gt;
  &lt;/a&gt;
  4. Fill the area inside contours &amp;amp; Close the blobs
&lt;/h2&gt;

&lt;p&gt;Instead of working on the original binary image, we will draw the top contours on a image with black background and use this as base. Any disconnect in the contours are easier to identify when fill the area inside the contours using &lt;a href="https://docs.opencv.org/3.4/d6/d6e/group__imgproc__draw.html#ga746c0625f1781f1ffc9056259103edbc"&gt;drawContours&lt;/a&gt; function.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6s0BGLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cru5i8c1acge9zqb4epd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6s0BGLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cru5i8c1acge9zqb4epd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As suspected, the top stamp has a thin black line passing through it. We need to close this blob so that the top stamp is considered as one contour instead of two different ones. &lt;a href="https://docs.opencv.org/master/d4/d86/group__imgproc__filter.html#ga67493776e3ad1a3df63883829375201f"&gt;Morphological Closing&lt;/a&gt; operation is perfect for achieving this.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXJj51nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajy46hg5tkbocck3h6jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXJj51nM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajy46hg5tkbocck3h6jo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-filter-the-stamps"&gt;
  &lt;/a&gt;
  5. Filter the stamps
&lt;/h2&gt;

&lt;p&gt;To isolate the stamp contours, we can identify all the contours from the latest binary image and filter for contours with more than 5 points as the stamp is an ellipse. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MeIEcxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p14r126berlqccbsro2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MeIEcxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p14r126berlqccbsro2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-highlight-the-identified-stamps"&gt;
  &lt;/a&gt;
  Bonus - Highlight the identified stamps
&lt;/h1&gt;

&lt;p&gt;For demo of this program, wouldn't it be cool if we can highlight only the stamped area of the image? Since we agree that it is indeed cool, let us see how we can achieve that. The steps involved are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Duplicate the original image and blur the entire image.&lt;/li&gt;
&lt;li&gt;Loop through the blurred image and for the points on or inside the image (using &lt;a href="https://docs.opencv.org/3.4/d3/dc0/group__imgproc__shape.html#ga1a539e8db2135af2566103705d7a5722"&gt;pointPolygonTest&lt;/a&gt; to check) we replace it with pixel values from the output image. We are using pixel values from the output image because we need the blue lines drawn over the stamps.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrEFlAFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdbontp5yipn7rebdc51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrEFlAFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdbontp5yipn7rebdc51.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Yep, that's it for this post. You can access this notebook from &lt;a href="https://github.com/6aravind/tidbits/blob/main/cv/Stamp%20detection%20using%20computer%20vision%20and%20python.ipynb"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>computervision</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Laravel One of Many Eloquent Relationship Example</title>
      <author>Suresh Ramani</author>
      <pubDate>Fri, 21 May 2021 20:11:39 +0000</pubDate>
      <link>https://dev.to/sureshramani/laravel-one-of-many-eloquent-relationship-example-469o</link>
      <guid>https://dev.to/sureshramani/laravel-one-of-many-eloquent-relationship-example-469o</guid>
      <description>&lt;p&gt;A new one of many Eloquent relationships is coming to Laravel 8.42 thanks to a PR contribution by Lennart Carstens-Behrens along with collaboration from Taylor Otwell is released some days ago. This one of many relationships is very useful.&lt;/p&gt;

&lt;p&gt;So what is one of many relationships is? The one-of-many relationship creates a one-to-one association from a one-to-many relationship. This quote is not enough to define this relationship. So let's see an example to understand.&lt;/p&gt;

&lt;p&gt;Many times you will see that a model may have many related models, yet you want to easily retrieve the "latest" or "oldest" related model of the relationship. For example, a User model may be related to many BrowserHistory models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techvblogs.com/blog/one-of-many-eloquent-relationship-laravel"&gt;https://techvblogs.com/blog/one-of-many-eloquent-relationship-laravel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>How to properly create an Express server (with Typescript)</title>
      <author>Jon Webb</author>
      <pubDate>Fri, 21 May 2021 19:58:50 +0000</pubDate>
      <link>https://dev.to/joncodes/how-to-properly-create-an-express-server-with-typescript-j68</link>
      <guid>https://dev.to/joncodes/how-to-properly-create-an-express-server-with-typescript-j68</guid>
      <description>&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Previous post: &lt;a href="https://jonwebb.dev/2021/05/18/start-node-project-with-typescript.html"&gt;How to start a Node project from scratch (with Typescript)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Source code: &lt;a href="https://github.com/jon-codes/baseline/tree/create-express-server-typescript"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-baseline-endraw-project"&gt;
  &lt;/a&gt;
  The &lt;code&gt;baseline&lt;/code&gt; project
&lt;/h2&gt;

&lt;p&gt;This post assumes you are following along with the &lt;code&gt;baseline&lt;/code&gt; project tutorial, but the concepts apply to any Typescript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#node-best-practices"&gt;
  &lt;/a&gt;
  Node best practices
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;p&gt;We are going to use a logging library called &lt;code&gt;pino&lt;/code&gt; for our application. Using a mature logging library is recommended because it allows us to access structured log data as JSON objects. Later, we can configure it to persist log data by outputting logs to a file or an external server.&lt;/p&gt;

&lt;p&gt;Install &lt;code&gt;pino&lt;/code&gt;, along with its type definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add pino pino-pretty &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/pino
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;util&lt;/code&gt; folder in your project source directory and create the &lt;code&gt;logger.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src/util &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;src/util/logger.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create and export a &lt;code&gt;pino&lt;/code&gt; logger instance. For now, we will use the default transport, which logs to the console. We will also enable &lt;code&gt;prettyPrint&lt;/code&gt; when we are not in a production environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/util/logger.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;prettyPrint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h3&gt;

&lt;p&gt;When your application encounters an unknown error, it should terminate. From the official &lt;a href="https://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors"&gt;Node.js documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By the very nature of how &lt;code&gt;throw&lt;/code&gt; works in JavaScript, there is almost never any way to safely "pick up where it left off", without leaking references, or creating some other sort of undefined brittle state.&lt;/p&gt;

&lt;p&gt;The safest way to respond to a thrown error is to shut down the process. Of course, in a normal web server, there may be many open connections, and it is not reasonable to abruptly shut those down because an error was triggered by someone else.&lt;/p&gt;

&lt;p&gt;The better approach is to send an error response to the request that triggered the error, while letting the others finish in their normal time, and stop listening for new requests in that worker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's ensure that our application catches any unsafe errors by passing them to a centralized error handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;src/util/error.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To ensure that our application issues a final log message when we crash it,&lt;br&gt;
&lt;code&gt;pino&lt;/code&gt; provides a &lt;code&gt;final&lt;/code&gt; function that we will use to issue a fatal log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/util/error.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;final&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;finalLogger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;finalLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in our main file &lt;code&gt;src/index.ts&lt;/code&gt;, let's ensure that any unhandled errors are passed to our &lt;code&gt;handle&lt;/code&gt; function. To do that, we will add listeners to the &lt;code&gt;unhandledRejection&lt;/code&gt; and &lt;code&gt;uncaughtException&lt;/code&gt; events in the Node process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unhandledRejection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uncaughtException&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our application will now issue a final log before terminating on any unhandled errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-express-endraw-app-setup"&gt;
  &lt;/a&gt;
  &lt;code&gt;express&lt;/code&gt; app setup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://expressjs.com"&gt;&lt;code&gt;express&lt;/code&gt;&lt;/a&gt; is an extremely popular web framework for &lt;code&gt;node.js&lt;/code&gt;, and it's what we will use for the &lt;code&gt;baseline&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;In your project folder, install &lt;code&gt;express&lt;/code&gt;, along with its type definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add express &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also going to use &lt;code&gt;pino-http&lt;/code&gt;, which is a middleware that logs https requests to your server using the &lt;code&gt;pino&lt;/code&gt; logger:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add pino-http &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @types/pino-http
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer to store the definition of my &lt;code&gt;express&lt;/code&gt; &lt;a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/projectstructre/separateexpress.md"&gt;application separately from the code that starts the HTTP server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;app.ts&lt;/code&gt; in your source folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;src/app.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;app.ts&lt;/code&gt;, we will set up a basic &lt;code&gt;express&lt;/code&gt; application, register built-in middlewares for parsing JSON request bodies and encoded URLs, register the &lt;code&gt;pino-http&lt;/code&gt; middleware, and create a single healthcheck route that we can use to check the status of our server. Finally, we will export the &lt;code&gt;express&lt;/code&gt; app so that we can use it elsewhere:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pinoHttp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino-http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pinoHttp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/health&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#server-config"&gt;
  &lt;/a&gt;
  Server config
&lt;/h2&gt;

&lt;p&gt;Our server configuration may change depending on the environment we are running it in. We may also need to use sensitive values (like database authentication credentials) that should not be exposed in our source code. For these reasons, we will store our &lt;a href="https://12factor.net/config"&gt;application configuration in the environment&lt;/a&gt; using environmental variables managed by the operating system.&lt;/p&gt;

&lt;p&gt;For development, it's convenient to use a file named &lt;code&gt;.env&lt;/code&gt;, which is not checked in to version control, to manage those variables on the fly. We will use a library called &lt;code&gt;dotenv&lt;/code&gt; to parse &lt;code&gt;.env&lt;/code&gt; files and set the corresponding environmental variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is important that our &lt;code&gt;.env&lt;/code&gt; files do not get checked into source control, since they may contain sensitive information. Let's update our &lt;code&gt;.gitignore&lt;/code&gt; file to ensure they are excluded:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#.gitignore

node_modules
dist
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a &lt;code&gt;.env&lt;/code&gt; file in the project root, and populate it with a single &lt;code&gt;PORT&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .env

PORT=5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's load any &lt;code&gt;.env&lt;/code&gt; variables as the first thing we do when we run &lt;code&gt;src/index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// error listeners ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;config&lt;/code&gt; function exported by &lt;code&gt;dotenv&lt;/code&gt; parses our &lt;code&gt;.env&lt;/code&gt; file and sets the environmental variables accordingly so that we can use them throughout our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-and-stopping-the-server"&gt;
  &lt;/a&gt;
  Starting and stopping the server
&lt;/h2&gt;

&lt;p&gt;When our application terminates, due to external input or an internal error, there may be a number of ongoing client connections that are in the process of being resolved. Rather than abruptly terminating those connections, we want to allow any existing connections to resolve before shutting down the server gracefully.&lt;/p&gt;

&lt;p&gt;To do this, we need to store a list of ongoing connections and implement logic to ensure connections are closed before the process is allowed to end. Rather than implement that logic ourselves, we are going to use a library called &lt;code&gt;http-terminator&lt;/code&gt; that does it for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn &lt;span class="nb"&gt;install &lt;/span&gt;http-terminator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in &lt;code&gt;src/index.ts&lt;/code&gt;, we will start the server and use &lt;code&gt;http-terminator&lt;/code&gt; to gracefully close the server if a shutdown signal is received:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// existing code ...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`started server on :&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shutdownSignals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;shutdownSignals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; received, closing gracefully ...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we are using &lt;code&gt;process.env.PORT&lt;/code&gt; to set the port that &lt;code&gt;express&lt;/code&gt; binds to, which should be loaded from our &lt;code&gt;.env&lt;/code&gt; file. Otherwise, we use port &lt;code&gt;3000&lt;/code&gt; as a fallback.&lt;/p&gt;

&lt;p&gt;We are also registering listeners on the &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; events, which are issued when &lt;code&gt;node&lt;/code&gt; receives a signal from the environment to terminate the process. Earlier, when we implemented our error handler function, we told &lt;code&gt;node&lt;/code&gt; to issue a &lt;code&gt;SIGTERM&lt;/code&gt; event when terminating the process. This means our graceful shutdown listener will be called when closing the process from our error handling code, or when the process terminates from an external signal.&lt;/p&gt;

&lt;p&gt;Your final &lt;code&gt;src/index.ts&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unhandledRejection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uncaughtException&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`started server on :&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; mode`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shutdownSignals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SIGINT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;shutdownSignals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; received, closing gracefully ...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-the-server"&gt;
  &lt;/a&gt;
  Testing the server
&lt;/h2&gt;

&lt;p&gt;Let's start the server using the &lt;code&gt;yarn&lt;/code&gt; scripts we set up in the &lt;a href="https://jonwebb.dev/2021/05/18/start-node-project-with-typescript.html"&gt;last post&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a log message that includes the port we set in our &lt;code&gt;.env&lt;/code&gt; file earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;1621625365575] INFO &lt;span class="o"&gt;(&lt;/span&gt;90294 on Jons-MacBook-Pro.local&lt;span class="o"&gt;)&lt;/span&gt;: started server on :5000 &lt;span class="k"&gt;in &lt;/span&gt;development mode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, using your browser, or an API testing tool like &lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt;, make a &lt;code&gt;GET&lt;/code&gt; request to the healthcheck route we implemented earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://localhost:5000/api/health
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response should be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"OK"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now try terminating your application from the terminal by pressing &lt;code&gt;ctrl-C&lt;/code&gt;, which sends a &lt;code&gt;SIGINT&lt;/code&gt; signal to the &lt;code&gt;node&lt;/code&gt; process. You should see a log message showing that our graceful termination code is being executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;1621626736712] INFO &lt;span class="o"&gt;(&lt;/span&gt;93255 on Jons-MacBook-Pro.local&lt;span class="o"&gt;)&lt;/span&gt;: SIGINT received, closing gracefully ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit"&gt;
  &lt;/a&gt;
  Commit
&lt;/h2&gt;

&lt;p&gt;Go ahead and stage your changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And commit them to source control:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>node</category>
      <category>express</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>I made this GitHub theme Dev Portfolio</title>
      <author>Himanshu</author>
      <pubDate>Fri, 21 May 2021 19:31:38 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-made-this-github-theme-dev-portfolio-100m</link>
      <guid>https://dev.to/hima_khaitan/i-made-this-github-theme-dev-portfolio-100m</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-design-idea"&gt;
  &lt;/a&gt;
  The Design Idea
&lt;/h3&gt;

&lt;p&gt;Spitting the truth, I really came across 1000s of dev portfolio 💻 websites among which some inspired 🤓 too but that inspiration and design faded until I saw this amazing  💯 &lt;a href="http://vscode-portfolio.vercel.app/"&gt;VS-Code Themed Portfolio Website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The designs I came across before this, only confused me and made me hop on one to another but this react app gave me the idea for &lt;a href="https://github-portfolio.vercel.app/"&gt;My Dev Portfolio&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I really was excited to built this when I first got this idea. And on the future part I am yet excited to flood it with cool features and functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-themed-dev-portfolio"&gt;
  &lt;/a&gt;
  GitHub Themed Dev Portfolio
&lt;/h3&gt;

&lt;p&gt;If you're interested in exploring the project yourself, there's the link to it 👉🏻 &lt;a href="https://github-portfolio.vercel.app/"&gt;github-portfolio.vercel.app/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/github-portfolio"&gt;
        github-portfolio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GitHub Themed Dev Portfolio&lt;/h3&gt;
&lt;p&gt;A GitHub themed developer portfolio website built with React.js and deployed on Vercel.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/github-portfolio/blob/main/public/a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz2kdbmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/github-portfolio/raw/main/public/a.png" alt="Dev Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Feature Roadmap&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Themes and customizations
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Default Light&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Dark Dimmed&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Default Dark (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Interactive custom pages and tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other features and themes suggestions, please open an issue.&lt;/p&gt;

&lt;h3&gt;
Running the Project&lt;/h3&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;

&lt;h3&gt;
Editing the Code&lt;/h3&gt;
&lt;p&gt;All Github related components can be found in the &lt;code&gt;Components&lt;/code&gt; folder. To change the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/github-portfolio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is a React Application which will of course have a backend in future and will lately be converted into a MERN Stack Project. 👩‍💻&lt;/p&gt;

&lt;p&gt;From Layout to Experience I have been working on to make this look and feel like the GitHub. I will be adding cool stuffs to it like themes, timeline and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-need-a-help"&gt;
  &lt;/a&gt;
  I Need A Help
&lt;/h3&gt;

&lt;p&gt;As you can see that some of the pages have dummy content in it and also the application is not at all responsive at the stage when it comes to Mobile viewing.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hima_khaitan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pp9-sSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HqJ6F18c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629989/94e5c19e-ce31-4a7d-a20b-603def943e7d.jpeg" alt="hima_khaitan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hima_khaitan/i-built-this-dark-ui-25ej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Built this Dark UI&lt;/h2&gt;
      &lt;h3&gt;Himanshu ・ May 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;What other features would you like to see in this project? I would highly appreciate if you leave a feedback, criticism or suggestion of any kind. 🙌🏻&lt;/p&gt;

&lt;p&gt;You can always fork this repo and the project is yet not complete. You can give a new accent to the project by applying your ideas onto it. 🤝🏻&lt;/p&gt;

&lt;p&gt;I hope you find it interesting to contribute as the project is truly Open-Source. You may star this repo for future references. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily turning coffee into code ✅&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>githunt</category>
      <category>react</category>
    </item>
  </channel>
</rss>
