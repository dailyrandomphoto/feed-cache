<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Build API to deliver slack messages with no code</title>
      <author>Kartik Grewal</author>
      <pubDate>Thu, 17 Jun 2021 10:23:41 +0000</pubDate>
      <link>https://dev.to/kartik0709/build-api-to-deliver-slack-messages-with-no-code-54hb</link>
      <guid>https://dev.to/kartik0709/build-api-to-deliver-slack-messages-with-no-code-54hb</guid>
      <description>&lt;p&gt;Every day so many people depend on slack to stay updated in their daily life. Hence, we may need to deliver some message or an alert to slack programmatically via an API in our product or webapp. This is a simple guide to show how you can achieve the same with no coding, to quickly hook up slack with your webapp.&lt;/p&gt;

&lt;p&gt;Our goal is to create an endpoint that we can trigger to send our message on the slack. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We head over to &lt;a href="https://app.canonic.dev"&gt;Canonic&lt;/a&gt; and sign in using our social accounts. Next, we click on &lt;strong&gt;Create New&lt;/strong&gt; to create a project for our application. Click on next, then click on create to complete the process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xUspkPvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xUspkPvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-1.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create new project screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A popup asking your first table name will appear. If not, you can click on the &lt;strong&gt;+&lt;/strong&gt; icon in the header to create a new table. Let's name our first &amp;amp; only table for this project as &lt;strong&gt;Messages.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fo--lgU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fo--lgU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-2.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We create a text field named "Message" as we'll need it in the API &amp;amp; also to store the messages we send out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z-c-irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Z-c-irX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-3.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We hit deploy on the top right, and we'll be provided with a hosted backend. a database &amp;amp; basic CRUD endpoints per table to help us create an API for our slack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;strong&gt;API&lt;/strong&gt; tab on the left to start adding the slack webhook. We select the &lt;strong&gt;createMessage&lt;/strong&gt; block in mutations. Click on the &lt;strong&gt;+&lt;/strong&gt; button. It'll open up a new webhook settings on the right hand side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqmhdrjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqmhdrjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-4.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;Message&lt;/strong&gt; type → Choose &lt;strong&gt;Slack&lt;/strong&gt; from the list of providers &amp;amp; you'll be provided with 2 fields for settings. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trigger URL → This is the url which will be generated by slack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message Body → Message to send to slack channels. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtB5SD4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtB5SD4b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-5.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For &lt;strong&gt;Trigger URL →&lt;/strong&gt; You'll need to create a webhook endpoint on Slack. Follow the slack documentation to help you through - &lt;a href="https://api.slack.com/messaging/webhooks"&gt;https://api.slack.com/messaging/webhooks&lt;/a&gt;. After you complete this guide, you should have a slack webhook endpoint, something like this - &lt;a href="https://hooks.slack.com/services/T012R73FZ4N/xxxxxx/4AVxuBwqSNVRZMsZ1tihdLln"&gt;https://hooks.slack.com/services/x&lt;/a&gt;xx/xxxx/xxxxx&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For Message Body →&lt;/strong&gt; We want to send the text found in the message field of the API to slack. So we can make use of Handlebars templates &amp;amp; simply write &lt;code&gt;{{message}}&lt;/code&gt; in that field. This will extract the message field from the API payload and forward it to slack.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above concludes the setup for the API that was required. Now let's start using this API to start sending messages to our slack channels.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triggering Slack API:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will require a combination of things that we need for securely connecting our application with this API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access token for our API&lt;/li&gt;
&lt;li&gt;Documentation for the API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Access Tokens&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Settings&lt;/strong&gt; using left side menu. Go to &lt;strong&gt;Access&lt;/strong&gt; tokens tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnmPIPk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnmPIPk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-6.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-6.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Create a new token,&lt;/strong&gt; and provide it a suitable name and permissions. Click on &lt;strong&gt;Create.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgtlrCzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgtlrCzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-7.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-7.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You've successfully generated an access token for your API. Copy it &amp;amp; save it some place safe as &lt;strong&gt;you won't be able to see it again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMEU4Djd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMEU4Djd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-8.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-8.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Head over to the docs tab using the left-hand side, and you'll find documentation for &lt;strong&gt;createMessage&lt;/strong&gt; API (the API block where we added our webhook).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbhdMAw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbhdMAw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-9.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After completing all the necessary steps, we're finally ready to deliver our first message to the slack using API. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let's copy the &lt;strong&gt;CURL&lt;/strong&gt; command that was mentioned in the documentation. Fill in your access token and paste it into the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our curl command will look something like this.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜  ~ curl 'https://xxxx.hem.canonic.dev/api/messages' \
  --request POST \
  --header "Content-type: application/json" \
  --header "Authorization: xxxxxx-xxxxx-xxxx" \
  --data '{
    "input": {
      "message": "Hello Slack! How are you?",
    }
  }'
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;A successful response will look like this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"data":{"message":"Hello Slack! How are you?","_id":"60bf30ee2529700009fd2a4a","createdAt":"2021-06-08T08:57:18.316Z","updatedAt":"2021-06-08T08:57:18.316Z","__v":0,"id":"60bf30ee2529700009fd2a4a"},"error":null,"success":true}%
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And show up on your slack like this!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25Dl7roe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25Dl7roe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://canonic.s3.amazonaws.com/public/devto/SW-10.png" alt="https://canonic.s3.amazonaws.com/public/devto/SW-10.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And just like that, we can setup an alerting or notification system for slack. You can also add more fields apart from message like name. This will allow you to formulate a much better structured in message body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hi {{ name }},

My message - {{ message }}

Thanks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find detailed documentation for this feature here - &lt;a href="https://docs.canonic.dev/concepts/webhook-providers/slack"&gt;https://docs.canonic.dev/concepts/webhook-providers/slack&lt;/a&gt;&lt;/p&gt;

</description>
      <category>frontend</category>
      <category>javascript</category>
      <category>api</category>
      <category>nocode</category>
    </item>
    <item>
      <title>Apply rules and automations to your npm registries</title>
      <author>Daniel Parmenvik</author>
      <pubDate>Thu, 17 Jun 2021 10:03:49 +0000</pubDate>
      <link>https://dev.to/danielp/apply-rules-and-automations-to-your-npm-registries-41bl</link>
      <guid>https://dev.to/danielp/apply-rules-and-automations-to-your-npm-registries-41bl</guid>
      <description>&lt;p&gt;Most developers would rather be coding than spend time managing dependencies. To keep up with the fast releases proper tooling is a necessity.&lt;/p&gt;

&lt;p&gt;Manually monitoring dependencies for known vulnerabilities is both a time sink and a liability. Performing point-in-time checks will eventually mean you regret why you didn't do it automatically.&lt;/p&gt;

&lt;p&gt;Spending time making sure that all teams and systems only use the same approved dependencies, across different environments, is also neither productive or fun.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/danielp/how-to-use-secure-private-npm-registries-36m9"&gt;Managing dependencies securely and efficiently&lt;/a&gt; involves the need of a tool that offloads some of the work for you. So you can focus on other things - and avoid human error. &lt;/p&gt;

&lt;p&gt;Watch this video to learn how &lt;a href="https://docs.bytesafe.dev/plugins/"&gt;Plugins&lt;/a&gt; and &lt;a href="https://docs.bytesafe.dev/policies/"&gt;Policies&lt;/a&gt; in Bytesafe let you apply business rules and automations for your secure private npm registries - so you don't have to.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6fqkKu51O94"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🧑‍💻 Sit back, relax and let Byteasafe's plugins &amp;amp; policies do the work for you.&lt;/p&gt;

&lt;p&gt;🔍 &lt;strong&gt;Here are just a few use cases:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✅ Lock versions for a registry with &lt;a href="https://bytesafe.dev/posts/freeze-registry-states/"&gt;Freeze&lt;/a&gt; - making sure every user gets the exact same versions from the registry that you used for development - A powerful way to lock dependencies after development is completed, before passing it to QA/Testing or build systems.&lt;/p&gt;

&lt;p&gt;✅ &lt;a href="https://docs.bytesafe.dev/policies/block/"&gt;Block&lt;/a&gt; specific packages or packages with known vulnerabilities&lt;/p&gt;

&lt;p&gt;✅ &lt;a href="https://docs.bytesafe.dev/plugins/version-auto-increment/"&gt;Auto increment&lt;/a&gt; package versions on publish to the registry - so you don’t have to manually step the version before every publish&lt;/p&gt;

&lt;p&gt;✅ &lt;a href="https://docs.bytesafe.dev/plugins/forward/"&gt;Auto forward&lt;/a&gt; package versions to linked upstream registries. Storing maintainer tokens securely in Bytesafe + using &lt;a href="https://docs.bytesafe.dev/plugins/forward/"&gt;Forward&lt;/a&gt; plugins removes the need to share maintainer tokens (and avoid security risks).&lt;/p&gt;

&lt;p&gt;There is more to discover! &lt;a href="https://login.bytesafe.dev/signup"&gt;Give Bytesafe a try&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/bytesafedev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xa6AP1T3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3uehdo8j7i2g40bk382.png" alt="Follow Bytesafe on Twitter"&gt;&lt;/a&gt; &lt;a href="https://www.producthunt.com/posts/bytesafe?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-bytesafe"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhhoEKYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D300547%26theme%3Dlight" alt="Bytesafe - A better way to control your software supply chain | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>timetrace: New features of the time tracking CLI</title>
      <author>Dominik Braun</author>
      <pubDate>Thu, 17 Jun 2021 09:45:52 +0000</pubDate>
      <link>https://dev.to/dominikbraun/timetrace-new-features-of-the-time-tracking-cli-2d62</link>
      <guid>https://dev.to/dominikbraun/timetrace-new-features-of-the-time-tracking-cli-2d62</guid>
      <description>&lt;p&gt;Since its initial release in May, a lot of powerful features have been added to &lt;a href="https://github.com/dominikbraun/timetrace"&gt;timetrace&lt;/a&gt;, a simple time tracking CLI. I'm going to introduce some of the features present in timetrace v0.10.0 in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-timetrace"&gt;
  &lt;/a&gt;
  Installing timetrace
&lt;/h2&gt;

&lt;p&gt;If you're on macOS, you can simply use Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew tap dominikbraun/timetrace
brew install timetrace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;timetrace is available for all major platforms. Check out the &lt;a href="https://github.com/dominikbraun/timetrace#installation"&gt;installation instructions&lt;/a&gt; and pick yours.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Basic usage:&lt;/strong&gt; If you're new to timetrace, &lt;a href="https://dev.to/dominikbraun/tracking-my-working-time-using-timetrace-4hj4"&gt;Tracking my working time using timetrace&lt;/a&gt; might be a good read. There also are &lt;a href="https://github.com/dominikbraun/timetrace#readme"&gt;detailed examples and the CLI reference&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#fire-project-modules"&gt;
  &lt;/a&gt;
  🔥 Project modules
&lt;/h2&gt;

&lt;p&gt;With version 0.7.0, support for &lt;em&gt;project modules&lt;/em&gt; has been added to timetrace. Project modules are sub-projects of an existing project.&lt;/p&gt;

&lt;p&gt;For example, we could create a project called &lt;code&gt;make-coffee&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace create project make-coffee
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Project modules are the exact same thing as projects, expect that they can be associated with a parent project. This association is marked by an &lt;code&gt;@&lt;/code&gt;. For example, &lt;code&gt;grind-beans@make-coffee&lt;/code&gt; is a module of the project &lt;code&gt;make-coffee&lt;/code&gt;. Therefore, creating this project is fairly simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace create project grind-beans@make-coffee
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;timetrace recognizes those modules. For example, when listing all records for a given project, its modules will be included:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace list records today -p make-coffee
+-----+-------------------------+---------+-------+------------+
|  #  |   PROJECT               |  START  |  END  |  BILLABLE  |
+-----+-------------------------+---------+-------+------------+
|   1 | make-coffee             | 08:28   | 08:35 | no         |
|   2 | grind-beans@make-coffee | 08:25   | 08:27 | no         |
+-----+-------------------------+---------+-------+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To view all projects along with their modules, just run &lt;code&gt;timetrace list projects&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fire-revert-changes-to-projects-and-records"&gt;
  &lt;/a&gt;
  🔥 Revert changes to projects and records
&lt;/h2&gt;

&lt;p&gt;timetrace v0.8.0 introduced the &lt;code&gt;--revert&lt;/code&gt; flag for the &lt;code&gt;edit project&lt;/code&gt;, &lt;code&gt;delete project&lt;/code&gt;, &lt;code&gt;edit record&lt;/code&gt; and &lt;code&gt;delete record&lt;/code&gt; commands. It allows to restore the resource prior to its modification.&lt;/p&gt;

&lt;p&gt;For example, let's delete the &lt;code&gt;make-coffee&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace delete project make-coffee
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oops! That shouldn't have happened. Let's restore the state of the project prior to the &lt;code&gt;delete&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace delete project make-coffee --revert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;--revert&lt;/code&gt; flag reverts the change introduced by the previous command, thus our project exists again.&lt;/p&gt;

&lt;p&gt;Edited or deleted records can be restored the exact same way. The following command will edit the newest record and lengthen it by 1 hour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace edit record latest --plus 1h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will increase the end time of the records by 1 hour.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; To get a list of the available records of today and the record key for editing them, use &lt;code&gt;timetrace list records today&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this was a mistake, reverting the previous command is very simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace edit record latest --revert
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end time of the record will now be the same as before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fire-an-enhanced-tracking-status"&gt;
  &lt;/a&gt;
  🔥 An enhanced tracking status
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;timetrace status&lt;/code&gt; command got some love with timetrace v0.9.0 and v0.10.0, addressing some requested features.&lt;/p&gt;

&lt;p&gt;First of all, &lt;code&gt;status&lt;/code&gt; now not only calculates the overall work time of the current day but also the overall &lt;em&gt;break time&lt;/em&gt;. How long have you been taking breaks today? Take a look at the right column!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKRWAomu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07r5abkba1scqk64jjif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKRWAomu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07r5abkba1scqk64jjif.png" alt="The current tracking status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#print-your-custom-status"&gt;
  &lt;/a&gt;
  Print your custom status
&lt;/h3&gt;

&lt;p&gt;It is also possible to print the tracking status in your custom format using the &lt;code&gt;--format&lt;/code&gt; flag. There is a &lt;a href="https://github.com/dominikbraun/timetrace#print-the-tracking-status"&gt;pre-defined set of variables&lt;/a&gt;. For example, &lt;code&gt;{project}&lt;/code&gt; will be replaced with the name of the current project.&lt;/p&gt;

&lt;p&gt;To print an output like &lt;code&gt;Currently working on make-coffee - Worked today: 2h&lt;/code&gt;, issue the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace status --format "Currently working on {project} - Worked today: {trackedTimeToday}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another new option is &lt;code&gt;--output&lt;/code&gt;. It allows the users to specify an output format. The default is the table shown above, but it is also possible to output the same data as JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;timetrace status --output json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will produce the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"web-store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"trackedTimeCurrent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1h 45min"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"trackedTimeToday"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"7h 30min"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"breakTimeToday"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0h 30min"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the JSON keys are the same as the formatting variables used by &lt;code&gt;--format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also enables a simple &lt;a href="https://github.com/dominikbraun/timetrace#starship-integration"&gt;Starship integration&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Now you're good to give those features a try, bookmark the project or provide some feedback!&lt;/p&gt;

&lt;p&gt;⭐ &lt;strong&gt;&lt;a href="https://github.com/dominikbraun/timetrace"&gt;dominikbraun/timetrace&lt;/a&gt;&lt;/strong&gt; ⭐&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>productivity</category>
      <category>go</category>
      <category>cli</category>
    </item>
    <item>
      <title>Learn How to Run Appwrite With Your Own Custom Proxy or Load Balancer</title>
      <author>Damodar Lohani</author>
      <pubDate>Thu, 17 Jun 2021 09:39:31 +0000</pubDate>
      <link>https://dev.to/appwrite/learn-how-to-run-appwrite-with-your-own-custom-proxy-or-load-balancer-28k</link>
      <guid>https://dev.to/appwrite/learn-how-to-run-appwrite-with-your-own-custom-proxy-or-load-balancer-28k</guid>
      <description>&lt;p&gt;Appwrite was designed to be flexible and customizable, and that was one of the main reasons we designed it using the Microservices architecture. Thanks to this design, it's very easy to adjust and deploy Appwrite on any existing architecture, especially container-based architectures. &lt;/p&gt;

&lt;p&gt;When deploying Appwrite in your own architecture, you might already have your own load balancer or proxy server for handling routing between different services. If this is your case, you might not need to use the Appwrite built-in Traefik load balancer. This post will demonstrate how you can easily replace the Appwrite load balancer with an Nginx proxy. Although we use Nginx for this example, the same can be applied to any proxy or load balancer that your heart desires.&lt;/p&gt;

&lt;p&gt;First, in the &lt;code&gt;docker-compose.yml&lt;/code&gt;, comment out the &lt;code&gt;traefik&lt;/code&gt; service. Now we will add &lt;code&gt;nginx&lt;/code&gt; service to replace &lt;code&gt;traefik&lt;/code&gt; and act as the entry point for Appwrite stack.&lt;/p&gt;

&lt;p&gt;Below the &lt;code&gt;traefik&lt;/code&gt; service, add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;80:80&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;443:443&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./config:/etc/nginx&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite-certificates:/etc/ssl/private&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;gateway&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;appwrite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have added &lt;code&gt;./config&lt;/code&gt; volume. It contains the &lt;code&gt;nginx&lt;/code&gt; config. Create &lt;code&gt;config/nginx.conf&lt;/code&gt; file and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="n"&gt;events&lt;/span&gt; {
    &lt;span class="n"&gt;worker_connections&lt;/span&gt; &lt;span class="m"&gt;1024&lt;/span&gt;;
}

&lt;span class="n"&gt;http&lt;/span&gt; {
    &lt;span class="n"&gt;server&lt;/span&gt; {
        &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;;
        &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;;

        &lt;span class="c"&gt;# config for setting up and handling Appwrite SSL
&lt;/span&gt;
        &lt;span class="c"&gt;# ssl_certificate           /etc/ssl/private/YOUR_DOMAIN/cert.crt;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl_certificate_key       /etc/ssl/private/YOUR_DOMAIN/cert.key;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl on;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl_session_cache  builtin:1000  shared:SSL:10m;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
&lt;/span&gt;        &lt;span class="c"&gt;# ssl_prefer_server_ciphers on;
&lt;/span&gt;
        &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;appwrite&lt;/span&gt;;

        &lt;span class="n"&gt;location&lt;/span&gt; / {
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Real&lt;/span&gt;-&lt;span class="n"&gt;IP&lt;/span&gt; $&lt;span class="n"&gt;remote_addr&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;For&lt;/span&gt; $&lt;span class="n"&gt;proxy_add_x_forwarded_for&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;Proto&lt;/span&gt; $&lt;span class="n"&gt;scheme&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;Host&lt;/span&gt; $&lt;span class="n"&gt;host&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;Host&lt;/span&gt; $&lt;span class="n"&gt;host&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_set_header&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;-&lt;span class="n"&gt;Forwarded&lt;/span&gt;-&lt;span class="n"&gt;Port&lt;/span&gt; $&lt;span class="n"&gt;server_port&lt;/span&gt;;
            &lt;span class="n"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;://&lt;span class="n"&gt;appwrite&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike the default Traefik instance that comes with Appwrite, the Nginx container doesn't handle SSL certificates automatically. For having valid SSL connections, you'll need to configure your own certificates or integrate with tools like Letsencrypt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>appwrite</category>
      <category>proxy</category>
      <category>nginx</category>
      <category>traefik</category>
    </item>
    <item>
      <title>Solution: Number of Subarrays with Bounded Maximum</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 17 Jun 2021 09:20:40 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-number-of-subarrays-with-bounded-maximum-3mmh</link>
      <guid>https://dev.to/seanpgallivan/solution-number-of-subarrays-with-bounded-maximum-3mmh</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/discuss/1278426"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-795-medium-number-of-subarrays-with-bounded-maximum"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/"&gt;Leetcode Problem #795 (&lt;em&gt;Medium&lt;/em&gt;): Number of Subarrays with Bounded Maximum&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are given an array &lt;code&gt;nums&lt;/code&gt; of positive integers, and two positive integers &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; (&lt;code&gt;left &amp;lt;= right&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least &lt;code&gt;left&lt;/code&gt; and at most &lt;code&gt;right&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [2, 1, 4, 3]&lt;br&gt;left = 2&lt;br&gt;right = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;There are three subarrays that meet the requirements: [2], [2, 1], [3].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;nums[i]&lt;/code&gt; will be an integer in the range &lt;code&gt;[0, 10^9]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The length of &lt;code&gt;nums&lt;/code&gt; will be in the range of &lt;code&gt;[1, 50000]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The key to this problem is realizing that we're dealing with overlapping &lt;strong&gt;triangular number&lt;/strong&gt; issues. Importantly, the total number of possible subarrays that are contained within any larger subarray is the &lt;strong&gt;N&lt;/strong&gt;th triangular number, where &lt;strong&gt;N&lt;/strong&gt; is the length of that larger subarray. &lt;/p&gt;

&lt;p&gt;So the &lt;strong&gt;nums&lt;/strong&gt; array starts with the (&lt;strong&gt;nums.length&lt;/strong&gt;)th triangular number total subarrays. We want to exclude any subarray that includes a number larger than &lt;strong&gt;right&lt;/strong&gt;, however. The easiest way to do this is to consider numbers larger than &lt;strong&gt;right&lt;/strong&gt; to be dividers, splitting &lt;strong&gt;nums&lt;/strong&gt; into many subarrays. We can add the triangular number for each of these resulting subarrays together to be the total number of subarrays that exclude numbers higher than &lt;strong&gt;right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To do this, we can iterate through &lt;strong&gt;nums&lt;/strong&gt; and keep track of how many contiguous numbers are less than &lt;strong&gt;right&lt;/strong&gt; (&lt;strong&gt;mid&lt;/strong&gt;) and each point that &lt;strong&gt;mid&lt;/strong&gt; increments, we can add &lt;strong&gt;mid&lt;/strong&gt; to &lt;strong&gt;ans&lt;/strong&gt;, representing the increase to the next triangular number. The value for &lt;strong&gt;mid&lt;/strong&gt; will then reset whenever we see a number higher than &lt;strong&gt;right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But this only does half of the problem, because we still have to also exclude any subarray that does not have any number at least &lt;strong&gt;left&lt;/strong&gt; high. To do this, we can use a similar method as for &lt;strong&gt;mid&lt;/strong&gt;. We can keep track of how many contiguous numbers are lower than &lt;strong&gt;left&lt;/strong&gt; (&lt;strong&gt;low&lt;/strong&gt;) and &lt;em&gt;decrease&lt;/em&gt; &lt;strong&gt;ans&lt;/strong&gt; by that amount every time it increments, representing the next triangular number. Similar to &lt;strong&gt;mid&lt;/strong&gt;, &lt;strong&gt;low&lt;/strong&gt; will reset whenever we see a number at least &lt;strong&gt;left&lt;/strong&gt; high.&lt;/p&gt;

&lt;p&gt;Once we're done iterating, we can &lt;strong&gt;return ans&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Visual example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55uX-1_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zr940xS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55uX-1_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zr940xS.png" alt="Visual 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;nums&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;numSubarrayBoundedMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ans&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;numSubarrayBoundedMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;numSubarrayBoundedMax&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numSubarrayBoundedMax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>SDK vs API - What's the Difference?</title>
      <author>Akash</author>
      <pubDate>Thu, 17 Jun 2021 09:18:29 +0000</pubDate>
      <link>https://dev.to/applozic/sdk-vs-api-what-s-the-difference-12ec</link>
      <guid>https://dev.to/applozic/sdk-vs-api-what-s-the-difference-12ec</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PbSt-qJwU68"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hello everyone! I'm Akash from &lt;a href="https://www.applozic.com/"&gt;Applozic&lt;/a&gt;, and today we'll take a look at what SDKs and APIs are, and how they differ from each other.&lt;/p&gt;

&lt;p&gt;So, what is an SDK?&lt;/p&gt;

&lt;p&gt;SDK stands for Software Development Kit. It is a collection of software development tools in one installable package. They facilitate the app development process.&lt;/p&gt;

&lt;p&gt;So an SDK contains: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documents&lt;/li&gt;
&lt;li&gt;Code samples&lt;/li&gt;
&lt;li&gt;APIs &lt;/li&gt;
&lt;li&gt;Code libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now summarize how SDK works.&lt;/p&gt;

&lt;p&gt;SDKs work with specific programming languages. They are easy to use because the goal is to make the jobs of developers easier, and save developers from writing code for already existing functionalities&lt;/p&gt;

&lt;p&gt;Let’s have a look at some examples of SDK:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A good example is Android SDK - they have all the elements needed to create the app such as sample source code, debugger, required libraries, amongst other things.&lt;/li&gt;
&lt;li&gt;Another example is Cloud SDK for Google Cloud Platforms - these contain tools that you need to manage applications and software in a Google Cloud Platform. Cloud SDK is a set of tools, including gcloud, gsutil, and bq command-line tools, client libraries &amp;amp; local emulators for developing with Google Cloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we now know what an SDK is, let's move on to APIs. What exactly is an API?&lt;/p&gt;

&lt;p&gt;APIs, which stand for Application Programming Interfaces, make the software development process easy by permitting a seamless and secure data transfer between two apps. It also helps to improve the exchange of functionality between two applications. So in essence, APIs allow two applications to talk to each other, relaying data from one end to another.&lt;/p&gt;

&lt;p&gt;Let’s review some examples of APIs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login with Facebook
When using websites, you can often find the option to log in using your Facebook account. It means that the website uses Facebook Login API to integrate their service and help users skip the sign-up process.&lt;/li&gt;
&lt;li&gt;Third-Party Payments 
You can often see the payment options of PayPal, Apple Pay, or Google Pay. It means that the payment system integrates these services through API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what are the key differences between SDKs and APIs?&lt;/p&gt;

&lt;p&gt;Even though both concepts are indeed overlapped and interrelated, let's differentiate their purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An SDK is the toolbox you need to build applications while and API establishes communication between two applications; &lt;/li&gt;
&lt;li&gt;An SDK may contain APIs, but APIs cannot contain SDKs;&lt;/li&gt;
&lt;li&gt;SDKs are easy to use and faster to integrate while APIs don’t have code libraries and are easy to modify;&lt;/li&gt;
&lt;li&gt;SDKs contain all you need to communicate with another software and all you need to build software while APIs deliver a request from one app to another software and deliver a response back to the requesting app;&lt;/li&gt;
&lt;li&gt;Developers always use an SDK to build apps, but APIs only come in when there is a need to have external communication with other platforms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, APIs and SDKs are both solution-bringers to developers, but each one is special in its way.&lt;/p&gt;

&lt;p&gt;So, is the difference clear now? If you have any doubts or queries about APIs or SDKs, feel free to drop a comment in the comment section below!&lt;/p&gt;

</description>
      <category>sdk</category>
      <category>api</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>IHP v0.11.0 brings Server-Side Components and Joins!</title>
      <author>digitallyinduced</author>
      <pubDate>Thu, 17 Jun 2021 09:00:21 +0000</pubDate>
      <link>https://dev.to/digitallyinduced/ihp-v0-11-0-brings-server-side-components-and-joins-4pp2</link>
      <guid>https://dev.to/digitallyinduced/ihp-v0-11-0-brings-server-side-components-and-joins-4pp2</guid>
      <description>&lt;p&gt;We've just released IHP v0.11.0, which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server-Side-Components, similar to React or elm&lt;/li&gt;
&lt;li&gt;Joins, for more complex queries&lt;/li&gt;
&lt;li&gt;IHP.FileStorage, which makes it easy to store files on AWS S3 or any other compatible service&lt;/li&gt;
&lt;li&gt;...and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#serversidecomponents-aka-you-dont-need-react"&gt;
  &lt;/a&gt;
  Server-Side-Components aka. you don't need React
&lt;/h2&gt;

&lt;p&gt;IHP's new Server-Side-Components allow you to build React-like components on the server (as the name implies). This allows you to build highly interactive pages without having to worry about server vs. client state, and no change of environment - as everything is still in Haskell.&lt;/p&gt;

&lt;p&gt;Let's look at an example component, a basic counter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- everything starts with the normal module definition and imports&lt;/span&gt;
&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Web.Component.Counter&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IHP.ViewPrelude&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IHP.ServerSideComponent.Types&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IHP.ServerSideComponent.ControllerFunctions&lt;/span&gt;

&lt;span class="c1"&gt;-- Followed by a type definition for the state.&lt;/span&gt;
&lt;span class="c1"&gt;-- This means there will never be any surprise what the state contains.&lt;/span&gt;
&lt;span class="c1"&gt;-- In this case it's simply an Int, so a number.&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- Then comes a list of possible actions that can be used to update the state.&lt;/span&gt;
&lt;span class="c1"&gt;-- If you've used redux or the elm architecture, this should be familiar.&lt;/span&gt;
&lt;span class="c1"&gt;-- Defining what actions are available means it's there won't be any surprises here either, and future developers can immediately see what behavior this component supports.&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;CounterController&lt;/span&gt;
    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;IncrementCounterAction&lt;/span&gt;
    &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- just one line of boilerplate to generate some code that we really don't want to write ourselves...&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deriveSSC&lt;/span&gt; &lt;span class="n"&gt;''CounterController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- The heart of any component are&lt;/span&gt;
&lt;span class="c1"&gt;-- 1. the render function, taking care of turning the state into html&lt;/span&gt;
&lt;span class="c1"&gt;-- 2. action handlers, which update the state based on selected actions&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Component&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="kt"&gt;CounterController&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
    &lt;span class="c1"&gt;-- but first, we need to define the default state&lt;/span&gt;
    &lt;span class="n"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;-- the render function takes the state and return HTML&lt;/span&gt;
    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hsx&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        Current: {value} &amp;lt;br /&amp;gt;
        &amp;lt;button onclick="callServerAction('IncrementCounterAction')"&amp;gt;Plus One&amp;lt;/button&amp;gt;
    &lt;span class="o"&gt;|]&lt;/span&gt;

    &lt;span class="c1"&gt;-- this is the handler for the IncrementCounterAction&lt;/span&gt;
    &lt;span class="c1"&gt;-- the function takes a state and the action, modifies the state (in this case incrementing the counter's value) and returns the new value&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="kt"&gt;IncrementCounterAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;state&lt;/span&gt;
            &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;incrementField&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pure&lt;/span&gt;

&lt;span class="c1"&gt;-- this allows us to use 'incrementField' to increment the counter&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;SetField&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt; &lt;span class="kt"&gt;Counter&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt; &lt;span class="n"&gt;setField&lt;/span&gt; &lt;span class="n"&gt;value'&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the result is a beautiful counter, all controlled server-side:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnyjXSDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2072185/121806628-ee284a80-cc50-11eb-9602-061046783c7b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnyjXSDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2072185/121806628-ee284a80-cc50-11eb-9602-061046783c7b.gif" alt='A short video showing part of a webpage with the headline "Counter demo", some text that says "Current: 0" and a button that says "Plus One", which is being clicked a couple of times. Every click increases the number after "Current" by one.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a little gif showcasing a more complex use-case of a filterable and sortable table:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sh-yKLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2072185/121806754-7a3a7200-cc51-11eb-9d31-ec8254b2824a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sh-yKLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2072185/121806754-7a3a7200-cc51-11eb-9d31-ec8254b2824a.gif" alt="A short video showing a webpage with a table with titles and &amp;quot;published at&amp;quot; dates. Underneath there's an input element. When something is typed in the input, the rows are filtered based on the input's value. Clicking on the &amp;quot;published at&amp;quot; column title sorts the rows by that column."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ihp.digitallyinduced.com/Guide/server-side-components.html"&gt;To learn more check out the documentation.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#joins"&gt;
  &lt;/a&gt;
  Joins
&lt;/h2&gt;

&lt;p&gt;If you've tried to do complex queries involving joins of multiple tables in IHP, this was previously a little bit of a hassle. With first-class support for joins, there's now a completely type-safe way to do anything you can imagine.&lt;/p&gt;

&lt;p&gt;Here's an example of how you can select all posts that were written by a user with the name "Tom":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;tomPosts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;innerJoin&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filterWhereJoinedTable&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;User&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Tom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's a more complex example that selects all posts that were tagged by a tag named "haskell" in the case of a many-to-many relationship:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Posts&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;innerJoin&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Tagging&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;innerJoinThirdTable&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Tag&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Tagging&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;tagId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filterWhereJoinedTable&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="kt"&gt;Tag&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;tagText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"haskell"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ihpfilestorage-to-store-files-in-aws-s3compatible-services"&gt;
  &lt;/a&gt;
  IHP.FileStorage to store files in AWS S3-compatible services
&lt;/h2&gt;

&lt;p&gt;Instead of having to manually use the APIs of AWS S3, you can now use our special support for these services to upload anything you'd like.&lt;/p&gt;

&lt;p&gt;Check out this example for an action used to upload a logo of a company to S3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="kt"&gt;UpdateCompanyAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;companyId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt; &lt;span class="n"&gt;companyId&lt;/span&gt;
    &lt;span class="n"&gt;company&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;uploadToStorage&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;logoUrl&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;ifValid&lt;/span&gt; &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="kr"&gt;case&lt;/span&gt;
            &lt;span class="kt"&gt;Left&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="kt"&gt;EditView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kt"&gt;Right&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;updateRecord&lt;/span&gt;
                &lt;span class="n"&gt;redirectTo&lt;/span&gt; &lt;span class="kt"&gt;EditCompanyAction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it's not much different from any other action used to update the company data. All the magic happens due to one line: &lt;code&gt;|&amp;gt; uploadToStorage #logoUrl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can do much more though, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use ImageMagick to do pre-processing of the uploaded image file (resizing, conversion,...)&lt;/li&gt;
&lt;li&gt;generate secure, signed download URLs for private files&lt;/li&gt;
&lt;li&gt;in development, files are stored on-disk in the &lt;code&gt;static/&lt;/code&gt; folder for ease of debugging and offline-only development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find out how to use it and configure it for your project &lt;a href="http://ihp.digitallyinduced.com/Guide/file-storage.html"&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-insensitivity"&gt;
  &lt;/a&gt;
  Case Insensitivity
&lt;/h2&gt;

&lt;p&gt;We've added &lt;code&gt;filterWhereCaseInsensitive&lt;/code&gt; and &lt;code&gt;validateIsUniqueCaseInsensitive&lt;/code&gt;, which do exactly what you expect them to do.&lt;/p&gt;

&lt;p&gt;If you're using IHP's login, be aware that these functions are now used for checking the emails. This increases UX for your users, but in case someone messed up and created two accounts - one with some letters of their email uppercase, one not - you will have to migrate that account.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you haven't tried out IHP yet, now's a great time to do so. We'll be at ZuriHack (huge Haskell Hackathon), so &lt;a href="https://zfoh.ch/zurihac2021/"&gt;sign up for free&lt;/a&gt; there if you haven't already and get an introduction to IHP from us directly!&lt;/p&gt;

</description>
      <category>functional</category>
      <category>haskell</category>
      <category>showdev</category>
    </item>
    <item>
      <title>How to create a simple Floating Button with Xamarin.Forms/MAUI</title>
      <author>Federico Navarrete</author>
      <pubDate>Thu, 17 Jun 2021 08:57:46 +0000</pubDate>
      <link>https://dev.to/fanmixco/how-to-create-a-simple-floating-button-with-xamarin-forms-maui-4k7i</link>
      <guid>https://dev.to/fanmixco/how-to-create-a-simple-floating-button-with-xamarin-forms-maui-4k7i</guid>
      <description>&lt;p&gt;For a while, I have been trying to search how to create a simple Floating Button and this is my final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;AbsoluteLayout&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!--Other components--&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;ImageButton&lt;/span&gt; &lt;span class="na"&gt;Source=&lt;/span&gt;&lt;span class="s"&gt;"plus.png"&lt;/span&gt; 
            &lt;span class="na"&gt;BackgroundColor=&lt;/span&gt;&lt;span class="s"&gt;"Green"&lt;/span&gt;
        &lt;span class="na"&gt;CornerRadius=&lt;/span&gt;&lt;span class="s"&gt;"80"&lt;/span&gt;
            &lt;span class="na"&gt;AbsoluteLayout.LayoutFlags=&lt;/span&gt;&lt;span class="s"&gt;"PositionProportional"&lt;/span&gt;  
            &lt;span class="na"&gt;AbsoluteLayout.LayoutBounds=&lt;/span&gt;&lt;span class="s"&gt;".95,.95,80,80"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/AbsoluteLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Source&lt;/code&gt; is the picture you want to use.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;BackgroundColor&lt;/code&gt; is the color you want to use in HEX.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CornerRadius&lt;/code&gt; is to create the form.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AbsoluteLayout.LayoutBounds&lt;/code&gt; is the location.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.stack.imgur.com/FMDkR.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hMwEt90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/FMDkR.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can get the icon from:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://materialdesignicons.com"&gt;https://materialdesignicons.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I got some inspiration from here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/a/54519048/1928691"&gt;https://stackoverflow.com/a/54519048/1928691&lt;/a&gt;&lt;/p&gt;

</description>
      <category>xamarinforms</category>
      <category>xamarin</category>
      <category>maui</category>
    </item>
    <item>
      <title>How's your experience with Xcode? (I want to cry 😭)</title>
      <author>Keff</author>
      <pubDate>Thu, 17 Jun 2021 08:34:14 +0000</pubDate>
      <link>https://dev.to/nombrekeff/how-s-your-experience-with-xcode-i-want-to-cry-2lc6</link>
      <guid>https://dev.to/nombrekeff/how-s-your-experience-with-xcode-i-want-to-cry-2lc6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#have-you-used-xcode-if-so-what-has-your-experience-been-so-far"&gt;
  &lt;/a&gt;
  Have you used Xcode? If so, what has your experience been so far?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScwhYGeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zintposrzjc2s4k7tqpk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScwhYGeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zintposrzjc2s4k7tqpk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Not to shit on them but,&lt;/strong&gt; in my case it's been one of the worst developer experiences I've had in all my career...&lt;/p&gt;

&lt;p&gt;I could ramble about it for hours, but I prefer to hear what other people have to say. But I might publish another post, ranting about my experience.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>dev</category>
      <category>ios</category>
    </item>
    <item>
      <title>You need to build a collaborative text editor RIGHT NOW!!</title>
      <author>Abhishek Raj</author>
      <pubDate>Thu, 17 Jun 2021 08:27:48 +0000</pubDate>
      <link>https://dev.to/abhishekraj272/you-need-to-build-a-collaborative-text-editor-right-now-5fcj</link>
      <guid>https://dev.to/abhishekraj272/you-need-to-build-a-collaborative-text-editor-right-now-5fcj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xAPGEIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s89r4l772hf6jzw1ftf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xAPGEIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3s89r4l772hf6jzw1ftf.png" alt="Code Editor Light Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;By building a collaborative text editor you will get to learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Send data from server to client - Polling/Sockets&lt;/li&gt;
&lt;li&gt;Algo/DS to use for efficient data transfer - Text Compare&lt;/li&gt;
&lt;li&gt;Update editor in such way, user's cursor doesn't move.
There are way too many things it will teach you, read the below post to learn more or Try out the live project here -&amp;gt; &lt;a href="https://sotly.co/bro-ide"&gt;Live URL&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Recently, I started working on this cool project, a Web Based Code Editor. So, in this post I will talk about how I implemented this project and what will be the further features I will be adding. 😃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;As we all know there are thousands of AWESOMEEE code editors out there like repl.it, codepen, codesandbox, etc. So most you must be wondering why I decided to write my own code editors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTq7si14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y1hsf5883j433uj0hkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTq7si14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y1hsf5883j433uj0hkb.png" alt="Am I Stupid?"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;What I think is, if you build a system then you will get to know how that thing really works, so my curiosity made me do it. 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;Lets talk about the features this web app currently has,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separate tabs for HTML/CSS/JS for better coding style.&lt;/li&gt;
&lt;li&gt;Code Output Display, shows the output by merging all codes and creating a Virtual DOM.&lt;/li&gt;
&lt;li&gt;Fully Mobile Responsive.&lt;/li&gt;
&lt;li&gt;Download merged code as text file.&lt;/li&gt;
&lt;li&gt;Night Mode&lt;/li&gt;
&lt;li&gt;Code auto save in browser&lt;/li&gt;
&lt;li&gt;Code Sharing Link (Planned)&lt;/li&gt;
&lt;li&gt;Code Collaboration (Planned)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-used"&gt;
  &lt;/a&gt;
  Tech Used
&lt;/h2&gt;

&lt;p&gt;In this project, I have used,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React - For UI&lt;/li&gt;
&lt;li&gt;Material UI - Design/Animation&lt;/li&gt;
&lt;li&gt;Redux - For State Management&lt;/li&gt;
&lt;li&gt;Redux Saga - For Side Effects&lt;/li&gt;
&lt;li&gt;Redux Persist - For Auto Save&lt;/li&gt;
&lt;li&gt;Socket IO (Planned) - For socket connection&lt;/li&gt;
&lt;li&gt;JsDiff - For Calculating Difference&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptjaRQ4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.drupal.org/files/contribute.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptjaRQ4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.drupal.org/files/contribute.png" alt="Contribute"&gt;&lt;/a&gt;&lt;br&gt;
This project is open for contributions, even contribution to docs, readme, managing people will help others learn and we can grow together.&lt;br&gt;
This is the repo url -&amp;gt; &lt;a href="https://github.com/abhishekraj272/Bro-Code-Web-IDE"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try out the live project here -&amp;gt; &lt;a href="https://sotly.co/bro-ide"&gt;Live URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect Me @ &lt;a href="https://www.linkedin.com/in/abhishekraj272/"&gt;Linkedin&lt;/a&gt; &lt;a href="https://github.com/abhishekraj272"&gt;Github&lt;/a&gt; &lt;a href="https://twitter.com/abhishekraj272"&gt;Twitter&lt;/a&gt; &lt;a href="https://www.youtube.com/channel/UCvHn2T8DSJzEWzYDdK3Dt8A"&gt;Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/abhishek.r.a.j"&gt;Instagram&lt;/a&gt; 😇&lt;/p&gt;

&lt;p&gt;Ping Me Anytime with doubts related to Full Stack / Pen Testing&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Complete Guide To Lazy Load Images For Better Website Performance</title>
      <author>Harish Rajora</author>
      <pubDate>Thu, 17 Jun 2021 07:30:04 +0000</pubDate>
      <link>https://dev.to/harishrajora12/complete-guide-to-lazy-load-images-for-better-website-performance-6ck</link>
      <guid>https://dev.to/harishrajora12/complete-guide-to-lazy-load-images-for-better-website-performance-6ck</guid>
      <description>&lt;p&gt;The pandemic of 2019-2020 made us all lazy. With no option but to sit at home, &lt;a href="https://runrepeat.com/quarantine-15-weight-gain-study"&gt;35.82% of us gained weight in that phase&lt;/a&gt;, thanks to our laziness. Fortunately, that phase gives us an excellent chance to understand a somewhat similar concept in &lt;a href="https://www.lambdatest.com/blog/top-21-web-development-trends-in-2021/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-17062021&amp;amp;utm_term=Harish"&gt;web development&lt;/a&gt;. So, how do you define the term “lazy”? While Google says, “Unwilling to work”, I can rephrase it to “not willing to work until necessary”. Until it is extremely necessary for a lazy person to move to another place than that lousy couch, they will stick to it.&lt;/p&gt;

&lt;p&gt;Similarly, in CSS we call lazy images those images that are not willing to be fetched from the server to the client (from couch to the place X in our analogy) until it’s extremely necessary. Lazy images will serve as the center point of this blog. The post will revolve around encouraging the developers to make more and more images lazy in contrast to real life. The main attractions that will throw a bit of light on what these lazy load images are, how to lazy load images as well as the ways in which a developer can convert an image to lazy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-lazy-load-images"&gt;
  &lt;/a&gt;
  What Are Lazy Load Images?
&lt;/h2&gt;

&lt;p&gt;Lazy loading in “images” or Computer Science as a general concept avoids the fetch request of that element until extremely necessary. For example, in Scala, we use lazy variables to avoid their initialization and calculation until necessary. This executes the program faster and consumes lesser memory.&lt;/p&gt;

&lt;p&gt;In CSS, the same concept is used to load the images only when it is necessary. Images are something that loads the page heavily with their size. On average, Google analyzes that the images account &lt;a href="https://developers.google.com/web/fundamentals/design-and-ux/responsive/images#:~:text=Did%20you%20know%20that%20images,load%20quickly%20on%20any%20device."&gt;for more than 60% of bytes of the web page&lt;/a&gt;. If you own a website, you can also check your &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;page speed insights&lt;/a&gt; and know-how images overload your web page.&lt;/p&gt;

&lt;p&gt;Apart from lazy loading, there are a lot of ways that the developers can try to optimize the web page performance. These may include understanding the images’ responsiveness, making their size smaller and using the correct file format. But still, whatever we do, images contribute to the majority of a web page, and the web page is incomplete today without appropriate images. Therefore, something is needed that can help us improve performance without omitting any images.&lt;/p&gt;

&lt;p&gt;Images contribute so much to the web page today because they are important!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A study shows how &lt;a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=587201"&gt;65% of people learn through visual imagery&lt;/a&gt;, and another one by Brandwatch highlights that &lt;a href="https://www.brandwatch.com/blog/what-visual-listening/"&gt;3.2 billion image shares are executed every day&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We cannot skip the images on our web page, which raises a new technique to load them and still save on the bandwidth. This is where lazy load images come to the rescue. The concept behind lazy load images is that not all the users arriving at a webpage read it entirely till the end. Some people come wandering off the internet to find out that the page is irrelevant to them. Some close the page at a point where they no longer need it.&lt;/p&gt;

&lt;p&gt;Loading the page altogether for every user is wasting bandwidth and a potential user when we know that most &lt;a href="https://www.hobo-web.co.uk/your-website-design-should-load-in-4-seconds/"&gt;users do not wait more than 2 seconds&lt;/a&gt; to load. So, why not skip the image loading and wait for our user to reach the point where the image is placed? This way, we are sure that if we are making a heavy request to the user, it would be worth it! For the people abandoning the page before the image is placed, the web page becomes faster, and the server requests become fewer. It is a win-win.&lt;/p&gt;

&lt;p&gt;From the next section onwards, we shall discuss three methods for ‘how to lazy load images?’- the hard one, the mediocre one, and the easy one!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-javascript-the-hard-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with JavaScript – The Hard Way
&lt;/h2&gt;

&lt;p&gt;The first method to focus on is the conventional way which has been used for a long time to make an image lazy. Implementing lazy load images- JavaScript is more complicated than the other ways discussed in this post, but I am sure it will brush up your JS skills along the way and will bring its own set of benefits.&lt;/p&gt;

&lt;p&gt;To load an image on a webpage, we use the “img” tag with the “src” attribute defining the URL of the image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src = “URL” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To apply lazy loading to the “img” tag, we need to remove the “src” tag first. The reason being that the browser quickly loads all the URLs when it sees a “src” tag. So when we are waiting for the event to be triggered through JavaScript, our browser would already have loaded the image as soon as the document object model loads.&lt;/p&gt;

&lt;p&gt;To prevent the automatic loading of the image, we make use of the data-src attribute instead of src.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img data-src = “URL” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the current demonstration, we will use the “scroll” event to trigger the JavaScript function, but since it’s your website, you can take any event you like to let the browser know the time to load the images.&lt;/p&gt;

&lt;p&gt;To let the browser know that we want to call a function after an event, we need to add the event listener as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.addEventListener(“scroll”, function_name);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we need to replace the function_name with the actual function name. Let’s say our function will be named “Wake_Up_Image” to check if the image is in the viewport or not. If it is, wake it up, i.e. load it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;document.addEventListener(“scroll”, Wake_Up_Image);&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we need to implement our function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Wake_Up_Image() {
    if(lazyloadTimeout) {
      clearTimeout(lazyloadTimeout);
    }

    lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function iterates over the images and calculates the offset of the image with respect to the window to get the viewport. If the image is found to be inside the viewport, the &lt;strong&gt;data-src&lt;/strong&gt; tag we used above will be converted to the &lt;code&gt;src&lt;/code&gt; tag through &lt;code&gt;img.src = img.dataset.src&lt;/code&gt;. Seeing the src tag, the browser will load the image on the webpage.&lt;/p&gt;

&lt;p&gt;The timeout function is used for optimizations and improved performance. This code will work fine in the browser but would need slight performance improvements.&lt;/p&gt;

&lt;p&gt;First, we need to capture images in lazyImages that we want to be lazy. For this, we can implement “ &lt;strong&gt;lazy&lt;/strong&gt; ” as a class in the image tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img class = “lazy” data-src = “URL” /&amp;gt;&amp;lt;pre&amp;gt;

Now we can capture these images using querySelector as follows:

&amp;lt;strong&amp;gt;var lazyImages = document.querySelectorAll("img.lazy");&amp;lt;/strong&amp;gt;

As a next step, we should remove the eventListener as soon as the timeout becomes 0. This can be achieved through the removeEventListener:

&amp;lt;strong&amp;gt;document.removeEventListener("scroll", Wake_Up_Image);&amp;lt;/strong&amp;gt;

Combining all of the above changes and optimizations, the overall code becomes:

&amp;lt;pre&amp;gt;
var lazyImages = document.querySelectorAll("img.lazy");
  var lazyloadTimeout;

  function Wake_Up_Image() {
    if(lazyloadTimeout) {
      clearTimeout(lazyloadTimeout);
    }

    lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) {
          document.removeEventListener("scroll", lazyload);
        }
    }, 15);
  }

  document.addEventListener("scroll", lazyload);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add other event listeners if you feel- like orientation change or window resizing.&lt;/p&gt;

&lt;p&gt;The above code results in the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GPMMW67g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_javascript.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GPMMW67g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_javascript.gif" alt="lazy_loading_javascript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright! With this implementation, we are done with the hard method to implement the lazy load images. As a web developer, I might not use lazy load images JavaScript to implement lazy loading while developing a web page. If the final motive is to load the images based on their viewport visibility only, JavaScript is a bit longer and harder than other methods. It is prone to more errors than other methods, and code reading also becomes complex. Although if you intend to play according to the event listeners, nothing gives better control than the JavaScript.&lt;/p&gt;

&lt;p&gt;In the above demonstration, you might feel that there is a bit of delay in the image loading, and in that time, a grey canvas is visible. As a developer, you can colour that canvas with some dominant colours to not let the user notice the lag. This is just a slight UI adjustment that would not affect the lazy load images’ performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-intersection-observer-api-the-mediocre-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with Intersection Observer API – The Mediocre Way
&lt;/h2&gt;

&lt;p&gt;Observing the high demand for viewport based functions, JavaScript introduced a new API called &lt;strong&gt;Intersection Observer&lt;/strong&gt;. The Intersection Observer API observes the intersection between the target element with the ancestor element or with the top-level document’s viewport. The intersection observer API skips the usual JavaScript conditions, loops and event handlers that created complex code in the first method.&lt;/p&gt;

&lt;p&gt;We will modify the above given code to adjust it according to the Intersection Observer API as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener("DOMContentLoaded", function() {
  var lazyImages;
  if ("IntersectionObserver" in window) {
    lazyImages = document.querySelectorAll(".lazy");
    var imageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          var image = entry.target;
          image.src = image.dataset.src;
          image.classList.remove("lazy");
          imageObserver.unobserve(image);
        }
      });
    });

    lazyImages.forEach(function(image) {
      imageObserver.observe(image);
    });
  } else {
    var lazyloadTimeout;
    lazyImages = document.querySelectorAll(".lazy");

    function lazyload () {
      if(lazyloadTimeout) {
        clearTimeout(lazyloadTimeout);
      }

      lazyloadTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyImages.forEach(function(img) {
            if(img.offsetTop &amp;lt; (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) {
          document.removeEventListener("scroll", lazyload);
        }
      }, 15);
    }

    document.addEventListener("scroll", lazyload);
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The “unobserve” method tells the Intersection Observer to stop observing the target element while the observed method is the opposite. Notice how we removed the event handlers and the offset calculation while using the API.&lt;/p&gt;

&lt;p&gt;The above code generates the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhCWM2CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_intersection_observer.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhCWM2CG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/lazy_loading_intersection_observer.gif" alt="lazy_loading_intersection_observer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the above interaction video performed on &lt;a href="http://www.lambdatest.com?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-17062021&amp;amp;utm_term=Harish"&gt;LambdaTest&lt;/a&gt;, the Intersection Observer API is faster and performs much better on the scroll event. The lag that was generated while writing the code in JavaScript was also not visible in the API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support-for-intersection-observer-api"&gt;
  &lt;/a&gt;
  Browser Support for Intersection Observer API
&lt;/h3&gt;

&lt;p&gt;The browser support for the intersection observer API is also great, giving us the freedom to use it without worrying about a crash:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXY0_ZSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Browser-Support-for-Intersection-Observer-API-1024x408.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXY0_ZSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Browser-Support-for-Intersection-Observer-API-1024x408.png" alt="Browser Support for Intersection Observer API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Intersection Observer API is a much better option for loading the images lazily on the web page. A more straightforward method for lazy load images is also available in the browsers called the “loading” attribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-with-the-loading-attribute-the-easy-way"&gt;
  &lt;/a&gt;
  Lazy Load Images with the Loading Attribute- The Easy Way
&lt;/h2&gt;

&lt;p&gt;The web pages are growing over time. Developers now know that images have a significant effect on the user and how they perceive the website. As a result, it has become a rare phenomenon to see a web page that does not have a single image. Some web pages are just filled with images raising their count to more than ten or sometimes 15. As good as that is for everyone, Google Chrome developers did start to take the lazy loading seriously.&lt;/p&gt;

&lt;p&gt;As our web page’s size has increased so significantly, developers have started to use lazy loading on their website to save from the embarrassment of loading their webpage in a lifetime. Google Chrome developers hence thought out to implement this feature into the native browser library so that developers can skip the complex JS code and directly implement lazy loading and the existence of the src attribute. This attribute is called the “loading” attribute.&lt;/p&gt;

&lt;p&gt;The “loading” attribute consists of three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;auto&lt;/strong&gt; : The “auto” value depends on the browser’s in-built capabilities. For example, Google Chrome automatically loads the images located deep down the viewport to save the bandwidth. If any other browser does not have that capability, the image will load immediately with the page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lazy&lt;/strong&gt; : The “lazy” value tellS the browser that this image needs to be loaded lazily in the browser.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;eager&lt;/strong&gt; : The “eager” value is used to tell the browser to load the image immediately as the content is loaded. The “eager” value is opposite to the “lazy” value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we need to load the image lazily, we will use the “ &lt;strong&gt;lazy&lt;/strong&gt; ” value here. This is a Chromium-based update and, therefore, will be available to all Chromium-based browsers.&lt;/p&gt;

&lt;p&gt;There is no need to implement JavaScript, and a small addition to the image tag would work as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src = “URL” loading = “lazy”&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will bring out the same output as the Intersection Observer API without any extra code. So, why don’t we skip everything and use just the native lazy loading feature?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support-for-the-loading-attribute"&gt;
  &lt;/a&gt;
  Browser Support for the Loading Attribute
&lt;/h3&gt;

&lt;p&gt;The browser support for the loading attribute is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxrbvT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Loading-Attribute.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxrbvT8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Loading-Attribute.png" alt="Source: Can I use"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Chrome browser and other Chromium-based browsers show full support. In contrast, Mozilla’s Firefox is currently providing partial support to the attribute. The “loading” attribute is more accessible, but as I mentioned above, if you want to play with the events and want more control over your elements, JavaScript is the best choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lazy-load-images-javascript-libraries"&gt;
  &lt;/a&gt;
  Lazy Load Images JavaScript Libraries
&lt;/h2&gt;

&lt;p&gt;The above methods will invite you to complex code every condition and loop without any support. However, similar to any other operation, JavaScript comes here to our rescue, too, with multiple libraries that can encourage lazy loading not in only images but other elements as well. The following libraries will help you in loading elements lazily in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/malchata/yall.js"&gt;Yet Another Lazy Loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jquery.eisbehr.de/lazy/"&gt;Lazy JQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aFarkas/lazysizes"&gt;Lazysizes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from this, for WordPress fans, you can use the &lt;a href="https://wordpress.org/plugins/a3-lazy-load/"&gt;A3 Lazy Load plugin&lt;/a&gt; for implementing lazy loading very efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-option-is-your-favorite"&gt;
  &lt;/a&gt;
  Which Option is your Favorite?
&lt;/h2&gt;

&lt;p&gt;Lazy load images is an excellent concept for improving website performance. If you have a web page that contains a few images in different areas of the web page, lazy loading will save the network calls and precious time in loading the website. Not only this, &lt;strong&gt;lazy loading provides substantial performance gains and reduces your overall cost&lt;/strong&gt;. For someone who hosts all their images to the AWS cloud, minimizing the server calls can bring down the costs in your monthly bills.&lt;/p&gt;

&lt;p&gt;This does not mean we start to lazy load everything on our web page. Lazy loading everything might sound like a huge performance bonus but is not necessary. The servers today are not that slow, and the networks are faster too. Lazy loading will increase the server calls if the developer starts dividing the sections that could have been fetched through a single request. Hence, it is advisable to use lazy loading but not everywhere.&lt;/p&gt;

&lt;p&gt;The methods explained in this post precisely aim towards lazy load images on a web page. With the three methods available today, all of them have their importance and their demerits. JavaScript might give you a hard time but will provide you with more control. The loading attribute is a work of seconds but might not render on all the browsers. With three options in our hand, we would love to know your thoughts around these methods and which one would you prefer as a development and &lt;a href="https://community.lambdatest.com/"&gt;testing community&lt;/a&gt; ourselves. Mention your method and reason to use in the comment section and help the community to get more personal insights from all the developers.&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Building an RSS Scully Plugin - Angular</title>
      <author>Maina Wycliffe</author>
      <pubDate>Thu, 17 Jun 2021 07:06:05 +0000</pubDate>
      <link>https://dev.to/this-is-angular/building-an-rss-scully-plugin-angular-1lg</link>
      <guid>https://dev.to/this-is-angular/building-an-rss-scully-plugin-angular-1lg</guid>
      <description>&lt;p&gt;In this article, we will learn how to extend Scully functionality through plugins. We will do this by building an RSS Plugin. This plugin will generate an RSS feed for our blog web app build using Angular and Scully.&lt;/p&gt;

&lt;p&gt;For an RSS plugin, we will build a &lt;strong&gt;routeDiscoveryDone&lt;/strong&gt; plugin, which is usually called when all routes have been discovered. This is going to use data discovered during the route discovery process to create an RSS feed. The route discovery process is done by a &lt;strong&gt;router&lt;/strong&gt; plugin, which you can learn more about &lt;a href="https://scully.io/docs/Reference/plugins/types/router/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scully provides 9 types of plugins which are called at during different stages of Scully build. For more information about different types of plugins, please visit the official documentation &lt;a href="https://scully.io/docs/Reference/plugins/overview/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup Scully for Your Angular Project - &lt;a href="https://scully.io/docs/learn/getting-started/overview/"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-plugin"&gt;
  &lt;/a&gt;
  Building the Plugin
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;If you used schematics to setup your Scully for your Angular project, you should be able to spot a Scully directory at the root of the workspace. This directory contains a &lt;code&gt;tsconfig&lt;/code&gt; file for Scully plugins and a plugins directory, which is where our plugin will live.&lt;/p&gt;

&lt;p&gt;Inside the plugins directory - &lt;code&gt;scully/plugins&lt;/code&gt; - we will create a new file named &lt;code&gt;rss.ts&lt;/code&gt;, which is going to contain the source code for our plugin. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#plugin-code"&gt;
  &lt;/a&gt;
  Plugin Code
&lt;/h3&gt;

&lt;p&gt;To create our RSS feed, we will use the NPM package &lt;a href="https://github.com/jpmonette/feed"&gt;Feed&lt;/a&gt;, which make it easy to generate syndicated feed using Typescript.&lt;/p&gt;

&lt;p&gt;Our RSS plugin will be called when Scully discovers all routes and it will receive a list of routes and route data associated with each route discovered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createRSSFeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HandledRoute&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will start by creating a new instance of &lt;code&gt;Feed&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, we need to import &lt;code&gt;Feed&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Feed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then instantiate &lt;code&gt;Feed&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe Blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;about you website or blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/favicon.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;copyright&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe Copyright&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NB: Update the content above according to your own specification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, we will loop over the routes, and add an RSS Feed item for each.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// add each item to an RSS Feed Article  &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, for each route, we want to add an RSS item, and use the route data - &lt;code&gt;route.data.*&lt;/code&gt; to fill in the different properties like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// loop through the names of the authors if list&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// uses tags as categories&lt;/span&gt;
    &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})),&lt;/span&gt;
    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featured_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; update the different properties of each item according to the structure of your data. For markdown content, this are the keys in the &lt;a href="https://jekyllrb.com/docs/front-matter/"&gt;Front Matter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we will save our RSS feed as an XML file inside the output directory of Scully. We can use &lt;code&gt;fs-extra&lt;/code&gt; to do that, so we will start by installing the package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yarn:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; fs-extra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NPM:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; fs-extra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we will import &lt;code&gt;outputFileSync&lt;/code&gt; from &lt;code&gt;fs-extra&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;outputFileSync&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs-extra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we will save the RSS feed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the output directory of your scully builds artefacts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.xml`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rss2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On top of that, we can also generate both JSON and Atom files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.atom`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;atom1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.json`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for the plugin, here is what the plugin function looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createRSSFeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HandledRoute&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Generating RSS Feed for Blog`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe Blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-us&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;johndoe@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;about you website or blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;favicon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/favicon.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;copyright&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe Copyright&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// loop through the names of the authors if list&lt;/span&gt;
      &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="c1"&gt;// uses tags as categories&lt;/span&gt;
      &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})),&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featured_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedAt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.xml`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rss2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ Created &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/blog/feed.xml`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.atom`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;atom1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ Created &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/blog/feed.atom`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;outputFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`feed.json`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ Created &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/blog/feed.json`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;❌ Failed to create RSS feed. Error:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NB: &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;logError&lt;/code&gt; are helper functions from Scully, imported from &lt;code&gt;@scullyio/scully&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#registering-the-plugin"&gt;
  &lt;/a&gt;
  Registering the Plugin
&lt;/h3&gt;

&lt;p&gt;Next, we will give our plugin a name. First, we will declare and export a variable for the name of the plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogRSSFeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BlogRSSFeed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This variable can be imported in to the Scully config file to use the plugin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, we will register our Scully plugin as a &lt;code&gt;routeDiscoveryDone&lt;/code&gt; plugin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routeDiscoveryDone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BlogRSSFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createRSSFeed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-the-plugin"&gt;
  &lt;/a&gt;
  Using the Plugin
&lt;/h3&gt;

&lt;p&gt;Finally, we can use the RSS plugin by adding to the array of &lt;code&gt;postRederrers&lt;/code&gt;. This can be achieved using two approaches. The first one will be for all routes within our our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ScullyConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;projectRoot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;projectName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;project-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist/website&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;defaultPostRenderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;BlogRSSFeed&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// for all routes&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/blog/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the second one can be specified for a specific route i.e. blog. This is useful when you only want to generate an RSS feed for a single section of your site like the blog section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ScullyConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/blog/:slug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;postRenderers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;BlogRSSFeed&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learnt how to create a Scully plugin to generate RSS feeds for our Angular app. We have created a &lt;code&gt;routeDiscoveryDone&lt;/code&gt; plugin that's called after routes for our application have been discovered and uses the route data to generate RSS feed for each of our route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Speeding Up Angular Scully Builds in GitHub Actions - &lt;a href="https://mainawycliffe.dev/blog/speeding-angular-scully-builds-github-actions"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Angular CDK - Platform Module - &lt;a href="https://mainawycliffe.dev/blog/angular-cdk-platform-module"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Scully Documents - &lt;a href="https://scully.io/docs/learn/getting-started/overview/"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
