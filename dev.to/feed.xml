<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a custom error component in Next.js (SSR &amp; CSR)</title>
      <author>Elisabeth Leonhardt</author>
      <pubDate>Mon, 22 Nov 2021 15:34:39 +0000</pubDate>
      <link>https://dev.to/elisabethleonhardt/create-a-custom-error-component-in-nextjs-ssr-csr-4kk9</link>
      <guid>https://dev.to/elisabethleonhardt/create-a-custom-error-component-in-nextjs-ssr-csr-4kk9</guid>
      <description>&lt;p&gt;Next.js comes with great support for error handling. In the following article, I am going to show you how to implement a personalized error component by building a tiny application that fetches data from the Rick and Morty API and can handle errors both on the server-side and the client-side.&lt;/p&gt;

&lt;p&gt;If you want to go straight to the code, here is the repo: &lt;a href="https://github.com/elisabeth-leonhardt/nextjs-custom-error"&gt;Next.js Error Component&lt;/a&gt;&lt;br&gt;
Let's dive right in: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-set-up-a-tiny-project-and-simulate-some-errors"&gt;
  &lt;/a&gt;
  1. Set up a tiny project and simulate some errors!
&lt;/h2&gt;

&lt;p&gt;Feel free to skip this part if you already have an application up and running that throws some errors 😉&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, create a fresh Next.js project by running &lt;code&gt;npx create-next-app@latest custom-error-component&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Verify that everything worked out by running &lt;code&gt;npm run dev&lt;/code&gt; inside that newly created directory and inspecting the Next.js default page on &lt;code&gt;localhost:3000&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We now will create the three pages our app consists of. First, replace the code in index.js with the following:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;amazing&lt;/span&gt; &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/character/avatar/2.jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/img&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/character/avatar/1.jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/img&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Characters&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the CSS, just grab this and copy it into the globals.css file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Segoe&lt;/span&gt; &lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fira&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Droid&lt;/span&gt; &lt;span class="n"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt; &lt;span class="n"&gt;Neue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* styles for index.js */&lt;/span&gt;

&lt;span class="nc"&gt;.home-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.home-container&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.img-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.6rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* styles for locations.js */&lt;/span&gt;

&lt;span class="nc"&gt;.locations-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;margin-block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.locations-container&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.locations-container&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:nth-of-type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;justify-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.locations-container&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* styles for characters.js */&lt;/span&gt;

&lt;span class="nc"&gt;.character-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* styles for the error page */&lt;/span&gt;

&lt;span class="nc"&gt;.error-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this shows 2 pictures and renders Links to the two remaining pages. Very simple. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBqGGsBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi2owibffs6uo3uynohy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBqGGsBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi2owibffs6uo3uynohy.png" alt="A picture of index.js" width="698" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now, create a file called locations.js - we want to fetch data on the client-side and display a list of Rick and Morty locations on this page. Our code looks like this:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Locations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rops&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocations&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLocations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Locations&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Characters&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Dimension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dimension&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;            
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Locations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are just fetching the data inside the useEffect hook and reading it into state. Then, we map over the data and display some decent looking cards on our page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ns8olCOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25rdjxlurjjf5oz260an.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ns8olCOC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25rdjxlurjjf5oz260an.png" alt="Capture of Locations page" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please go ahead and improve this visually if your design skills are better than mine, but I didn't want to write too much CSS and distract from the actual topic.&lt;/p&gt;

&lt;p&gt;Note the ? in locations.results?.map - This is called optional chaining. If the data takes a while to be fetched, React will try to map over locations.results but there will be no locations.results yet and our application will break. With conditional chaining, React will not try to iterate if there is no data yet, and just display the title and the buttons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the characters page, we are going to implement server-side rendering with getServerSideProps:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Characters&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/locations&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="nx"&gt;Locations&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;character-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;200px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Characters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/character&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The function getServerSideProps will get called before the component is mounted. Then, it will pass the data via props to the component and render it out. We won't be able to see the request in the network tab of our development tools, because the development server is doing the fetching before sending the page to our browser. We also don't need any conditional chaining here since there won't be a moment where the component is waiting for data.&lt;/p&gt;

&lt;p&gt;Our characters page will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LA-TNtfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0jbj4o3xhm8riq2fhd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LA-TNtfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0jbj4o3xhm8riq2fhd2.png" alt="Capture of characters page" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful! We can now navigate around and everything works just fine. But what happens if the Rick and Morty API changes or breaks? Let's try:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-producing-some-errors"&gt;
  &lt;/a&gt;
  2. Producing some errors
&lt;/h2&gt;

&lt;p&gt;You might think, we have a little problem here: The Rick and Morty API is not under our control, so we can't break it or force it to return errors to us. That's true and I chose the API on purpose because of that. We will have to get creative to simulate some errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go locations.js and change &lt;code&gt;location&lt;/code&gt; in the API call for something else, like for example &lt;code&gt;locaon&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;in characters.js, do the same. Replace &lt;code&gt;character&lt;/code&gt; with &lt;code&gt;charter&lt;/code&gt; or something else that does not exist.&lt;/li&gt;
&lt;li&gt;stop your dev build with hot reloading and let's take a look at how these errors would look like in production.&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run build&lt;/code&gt; to create a production build&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm run start&lt;/code&gt; to start that production build locally.&lt;/li&gt;
&lt;li&gt;open the build on localhost:3000&lt;/li&gt;
&lt;li&gt;navigate around and see what the pages look like:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wdb2lT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dba9udgk7k09su6n0zll.png" alt="Error behavior in locations" width="880" height="182"&gt;
In locations, we will just see the title and the buttons, since our conditional chaining is protecting us from errors. However, this is quite confusing for the user. There is no data and also no feedback on why there is no data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1npMbMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g42jcycfzx8n9xxoekuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1npMbMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g42jcycfzx8n9xxoekuj.png" alt="Error behavor in characters" width="804" height="146"&gt;&lt;/a&gt;&lt;br&gt;
In Characters, we can see this error message, which is better than nothing but doesn't go with the look and feel of our app.&lt;/p&gt;

&lt;p&gt;Let's fix this:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-create-our-custom-error-component"&gt;
  &lt;/a&gt;
  3. Create our custom error component
&lt;/h2&gt;

&lt;p&gt;First of all, stop the production build and return to your hot-reloaded dev build.&lt;br&gt;
To create a custom error component, we have to create a file called &lt;code&gt;_error.js&lt;/code&gt; in the pages folder. You can find the documentation about this page in the Next.js docs: &lt;a href="https://nextjs.org/docs/advanced-features/custom-error-page#more-advanced-error-page-customizing"&gt;Customized Error Component&lt;/a&gt;. Copy and paste the code from the docs and adapt it to go with the look and feel of your application. Mine looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/character/avatar/234.jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a dead morty...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;We&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;sorry&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;There&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now how do we show it?&lt;br&gt;
Let's look at &lt;code&gt;locations.js&lt;/code&gt; first. Leave the typo we introduced earlier and call &lt;code&gt;https://rickandmortyapi.com/api/locaon&lt;/code&gt; instead of location, we will get back an object looking like this: &lt;code&gt;{ error: 'There is nothing here'}&lt;/code&gt;.&lt;br&gt;
With this, I can conditionally render the Error component I just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocations&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://rickandmortyapi.com/api/locaon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLocations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;locations-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, you will see the following on your locations-page:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3T-R-1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/097frxc8uf317ingedgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3T-R-1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/097frxc8uf317ingedgc.png" alt="Caption of error page" width="357" height="449"&gt;&lt;/a&gt;&lt;br&gt;
You might have noticed that when you reload the page, there is a slight flicker, where you first see the title of the page and then the error. The following is happening:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next.js renders the buttons and the title. Since there is not yet a locations.results, it doesn't render those.&lt;/li&gt;
&lt;li&gt;Concurrently, it is trying to fetch the data inside the useEffect hook.&lt;/li&gt;
&lt;li&gt;Once the data is fetched, the state is updated, which triggers a rerender.&lt;/li&gt;
&lt;li&gt;Since there is an error, the Error component gets rendered instead of the title and buttons.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now fix the URL and see how the original page reappears. 🙂&lt;/p&gt;

&lt;p&gt;How can we tackle the server-side rendered page? We need to take into account that the Next.js documentation explains that this error component is only shown in production, and we will see a stack trace in our dev environment. To test our error component is working for SSR, leave the typo in the API call and create a new production build as we did before.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stop npm in your terminal and run &lt;code&gt;npm run build&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;once that is finished, run &lt;code&gt;npm run start&lt;/code&gt;. Now you can visit your production build on &lt;code&gt;localhost:3000&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;when you navigate to &lt;code&gt;localhost:3000/characters&lt;/code&gt;, you will see our error component, with additional information we didn't see in our client-side rendered component:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJDrOotx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx7udg5175gwytdiwwup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJDrOotx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nx7udg5175gwytdiwwup.png" alt="Server Side rendered Error" width="367" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is happening?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we make the petition to the server, it tries to fetch the data, but encounters an error.&lt;/li&gt;
&lt;li&gt;Therefore, it directly returns the error page instead of the characters page and you won't see the flicker you saw with client-side rendering.&lt;/li&gt;
&lt;li&gt;Also note that we didn't modify the code in characters.js itself, besides obviously introducing the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it! You now have personalized error components that show when your app encounters errors on both server-side and client-side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sidenote"&gt;
  &lt;/a&gt;
  Sidenote
&lt;/h2&gt;

&lt;p&gt;Most APIs return status codes and descriptive error messages you can display inside your Error component if you want to. Play around with that - this code is just a template to get you started.&lt;/p&gt;

&lt;p&gt;I hope that this was helpful! Have a great week everybody. 🤓&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Easy Way to Copy Text in Tmux</title>
      <author>Igor Irianto</author>
      <pubDate>Mon, 22 Nov 2021 15:34:08 +0000</pubDate>
      <link>https://dev.to/iggredible/the-easy-way-to-copy-text-in-tmux-319g</link>
      <guid>https://dev.to/iggredible/the-easy-way-to-copy-text-in-tmux-319g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-easily-copy-texts-in-tmux"&gt;
  &lt;/a&gt;
  How to Easily Copy Texts in Tmux
&lt;/h2&gt;

&lt;p&gt;If you've used tmux for a while, you will realize that highlighting a text with a mouse in tmux to copy them is a painful experience. That's because it's now how tmux is designed. Having used text editing softwares like Microsoft Word / Google Docs and to some extent, Atom / VSCode / IntelliJ, it may feel natural to grab your mouse, highlight the body of texts, and press Ctrl + C. &lt;/p&gt;

&lt;p&gt;Not so with tmux. Copying with tmux is more like copying in Vim, where it's best done with a keyboard rather than a mouse. This is done in tmux &lt;em&gt;copy mode&lt;/em&gt;.  In this article, I will show you how to utilize tmux copy mode to easily copy text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vi-copy-mode"&gt;
  &lt;/a&gt;
  Vi Copy Mode
&lt;/h3&gt;

&lt;p&gt;Tmux is similar to vim in many ways. One of them is that they are modal programs. What that means is that to accomplish a specific task, you need to switch to a mode that's optimized for that task. In Vim, we have a normal mode where you can move around with your keyboard. Vim's normal mode is designed for moving (and to a certain extent, modifying) within your file. If you need to insert texts, you need to switch to vim insert mode.&lt;/p&gt;

&lt;p&gt;To navigate your terminal history and to copy text, you need to switch to tmux copy mode (technically it is vi-copy-mode, but to keep it simple, let's call it copy mode).&lt;/p&gt;

&lt;p&gt;So what exactly is a copy mode? &lt;/p&gt;

&lt;p&gt;If you try to copy a text from a tmux window with your mouse, you may have seen a warning saying that you can't simply copy the text. The correct way to copy a text from tmux is to first switch to copy mode, then copy it, then paste it.&lt;/p&gt;

&lt;p&gt;To enable this copy mode, in you tmux config file, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setw -g mode-keys vi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then save and source the tmux config. This will enable vi &lt;code&gt;mode-keys&lt;/code&gt;. If you are unsure about tmux config, check out my previous article on tmux config.&lt;/p&gt;

&lt;p&gt;To enter the copy mode, use &lt;code&gt;Ctrl + [&lt;/code&gt;. You should be able to see a yellow visual indicator on the top right of your tmux window. With this, you can now move around using vim navigation keys.&lt;/p&gt;

&lt;p&gt;Although tmux copy mode doesn't translate to 100% vim navigation keys - overall they are good enough to feel natural. Some navigation keys that you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;h / j / k / l&lt;/code&gt; to move left/down/up/right&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w / W / e / E / b / B&lt;/code&gt; to move forward to the start / to the end / backward a word or WORD&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{ / }&lt;/code&gt; to move backward / forward a paragraph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + e / d / f&lt;/code&gt; to scroll down a line / half screen / whole screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + y / u / b&lt;/code&gt; to scroll up a line / half screen / whole screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/ / ?&lt;/code&gt; to search forward / backward&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;n / N&lt;/code&gt; to repeat the previous search forward / backward&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a lot more navigation keys. Check out inside &lt;code&gt;man tmux&lt;/code&gt; and search for the &lt;code&gt;mode-keys&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;In this mode, you can move around the terminal like you move around vim. To exit this mode, press &lt;code&gt;q&lt;/code&gt; or &lt;code&gt;Enter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin highlighting, press &lt;code&gt;Space&lt;/code&gt;. Note that your cursor will highlight the letter under it. It will expand the highlight as you move around your cursor. &lt;/p&gt;

&lt;p&gt;Once you highlight all the text you want to copy, press &lt;code&gt;Enter&lt;/code&gt;. You should automatically exit the copy mode. The text that you copied are stored inside a tmux buffer. It is an allocated space in the memory where tmux temporarily stores data.&lt;/p&gt;

&lt;p&gt;To paste from the tmux buffer, press &lt;code&gt;Ctrl + ]&lt;/code&gt;. Woot! Congratulations, you've copied a text with tmux - stress-free!&lt;/p&gt;

&lt;p&gt;To  recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;setw -g mode-keys vi&lt;/code&gt; in your tmux config&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + [&lt;/code&gt; to enter tmux vi copy mode&lt;/li&gt;
&lt;li&gt;Move around with vim navigation keys&lt;/li&gt;
&lt;li&gt;Begin highlight with &lt;code&gt;Space&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy with &lt;code&gt;Enter&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste with &lt;code&gt;Ctrl + ]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#making-copypaste-more-intuitive"&gt;
  &lt;/a&gt;
  Making Copy-Paste More Intuitive
&lt;/h3&gt;

&lt;p&gt;I find a number of the copy-pasting keys unintuitive. Let's modify them to mimic vim keybindings.&lt;/p&gt;

&lt;p&gt;Recall that vim has a visual mode (&lt;code&gt;v&lt;/code&gt;) that allows you to highlight a body of text. You can also "yank" text with &lt;code&gt;y&lt;/code&gt;. Finally, you can paste the yanked text with &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's use similar keymaps. Add these lines in the tmux config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind P paste-buffer
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line, &lt;code&gt;bind -T copy-mode-vi v send -X begin-selection&lt;/code&gt;, lets you begin selection (highlight) by pressing &lt;code&gt;v&lt;/code&gt; while in copy mode (&lt;code&gt;copy-mode-vi&lt;/code&gt;). The second line allows you to yank the text with &lt;code&gt;y&lt;/code&gt;. The third line allows us to paste from the tmux buffer (where our text is saved) with &lt;code&gt;Ctrl + P&lt;/code&gt;. The last line is a bonus. It lets you copy the text that you highlight with the mouse (note that it has the same effect as the second line).&lt;/p&gt;

&lt;p&gt;Notice that on the second and fourth line, I use &lt;code&gt;pbcopy&lt;/code&gt;. I need to use it to pipe the copied text into the clipboard on my Mac. If you're on linux, omit &lt;code&gt;pbcopy&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As always, don't forget to save and source the config file. With this new setting, the workflow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter the copy-mode with &lt;code&gt;Ctrl + [&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Position yourself to the start of the text you want to copy with vim navigation &lt;/li&gt;
&lt;li&gt;Start highlight with &lt;code&gt;v&lt;/code&gt; (similar to vim visual mode)&lt;/li&gt;
&lt;li&gt;Yank the highlighted text with &lt;code&gt;y&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste with &lt;code&gt;Prefix + P&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use an uppercase P instead of lowercase p because &lt;code&gt;Prefix + p&lt;/code&gt; is how tmux goes to the previous window (recall: &lt;code&gt;Prefix + p&lt;/code&gt; to go to the previous window and &lt;code&gt;Prefix + n&lt;/code&gt; to go to the next window. If you are not familiar with this, I'd highly recommend you to read my first tmux article).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-advantage-of-the-vi-mode"&gt;
  &lt;/a&gt;
  Taking Advantage of the Vi Mode
&lt;/h2&gt;

&lt;p&gt;The vi-copy-mode is not only useful for copying texts. You can use it to quickly search through your terminal.&lt;/p&gt;

&lt;p&gt;For example, in the terminal, if you are looking for a text, you would press &lt;code&gt;Cmd + f&lt;/code&gt; (or &lt;code&gt;Ctrl + f&lt;/code&gt;) and type in the string that you want to search. This method has limitations. First, you can only search for that exact string (what if instead of searching for the string "mux", you want to search for "mux", "mix", and "max" simultaneously?). Second, if you have multiple panes in a window, this method will search for the text in &lt;em&gt;all&lt;/em&gt; panes (what if you need to constrain your search only to the current pane?). Third, it is limited to what is currently displayed on tmux at the moment. Due to the nature of tmux's scrolling, it can't search for texts that are above the displayed window.&lt;/p&gt;

&lt;p&gt;A better way to search is to leverage the vi-copy-mode. Recall that in Vim, you can search forward with &lt;code&gt;/&lt;/code&gt; and backward with &lt;code&gt;?&lt;/code&gt;. With vi mode, you can do that too. &lt;/p&gt;

&lt;p&gt;Suppose that I need to search for "redis_1" in my terminal. Here's how I would do it.&lt;/p&gt;

&lt;p&gt;From inside a tmux session, enter the vi mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + [
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then search backward with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? + KEYWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, KEYWORD is "redis_1". I find myself using &lt;code&gt;?&lt;/code&gt; much more than &lt;code&gt;/&lt;/code&gt;, because 80% of the time I would be searching backwards. Tmux should highlight all "redis_1" texts. To keep jumping to the subsequent or preceding matches, use either &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;N&lt;/code&gt;. Sweet!&lt;/p&gt;

&lt;p&gt;But wait, there's more! Just like you can use regular expressions in Vim while searching, you can with tmux too!&lt;/p&gt;

&lt;p&gt;Suppose that I want to search for words like "redis_1" OR "node_1", OR "rails_1", I can search for all of them with &lt;code&gt;[a-z]+_1&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? + [a-z]+_1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regex breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[a-z]&lt;/code&gt; is the lowercase a-z&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; means one or more subsequent characters (which was a-z). &lt;code&gt;[a-z]+&lt;/code&gt; means one or more any lowercase alphabet character&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_1&lt;/code&gt; is a literal underscore followed by a literal one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will match "redis_1", "node_1", and "rails_1" (it will also match strings like "java_1", "sidekiq_1", etc.&lt;/p&gt;

&lt;p&gt;If you want to match ONLY "redis_1", "node_1", or "rails_1", you can use a group match:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;? + (redis|node|rails)_1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool! I won't go through regex here because it's outside the scope of this article. The point is, searching in tmux using vi mode is a powerful tool especially if you're proficient with regex (even if you don't, you can get pretty far with just a little regex knowledge).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#emacs-copy-mode"&gt;
  &lt;/a&gt;
  Emacs Copy Mode
&lt;/h2&gt;

&lt;p&gt;If you look at the &lt;code&gt;man tmux&lt;/code&gt; page, in addition to the vi-copy-mode, tmux also has an emacs-copy mode. It is similar to vi-copy-mode, but instead of using vi key bindings, it uses emacs key bindings.&lt;/p&gt;

&lt;p&gt;If you're more of an emacs guy (don't worry, we can still be friends) and want to set it up to use emacs keybindings instead, check out inside the &lt;code&gt;man tmux&lt;/code&gt; page under &lt;code&gt;mode-keys&lt;/code&gt; section. There you will find instructions on how to set it up, including a list of keymaps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we learned how to leverage the copy mode to make it easier to copy-paste from your tmux terminal. We also learned how to configure it to mimic vim copy-pasting behavior. This copy mode can be leveraged to be an effective search tool.&lt;/p&gt;

&lt;p&gt;Tmux is a powerful tool. It complements with vim well. To make it even more powerful, you can configure it to behave like vim behaves.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>tmux</category>
      <category>vim</category>
      <category>vi</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advanced Authentication and Authorization</title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 22 Nov 2021 15:21:22 +0000</pubDate>
      <link>https://dev.to/thenerdydev/advanced-authentication-and-authorization-4eeg</link>
      <guid>https://dev.to/thenerdydev/advanced-authentication-and-authorization-4eeg</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about one of the most important concepts that you as a developer must have a solid knowledge of and that is &lt;strong&gt;Advanced Authentication and Authorization&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9BM354y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zie42fruku6vee6enh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9BM354y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zie42fruku6vee6enh2.png" alt="Image description" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-authentication-and-authorization"&gt;
  &lt;/a&gt;
  Advanced Authentication and Authorization
&lt;/h2&gt;

&lt;p&gt;Let us consider the case of resetting of the user password. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#password-resetting"&gt;
  &lt;/a&gt;
  Password Resetting
&lt;/h2&gt;

&lt;p&gt;You have to implement authentication in a way that prevents users from resetting random user accounts. Reset tokens have to be random, unguessable atleast in a reasonable amount of time and unique. Therefore reset token is a great mechanism to identify the user for which we need to reset the password. &lt;/p&gt;

&lt;p&gt;Whenever a user wants to reset his password, he can click on the &lt;strong&gt;reset password&lt;/strong&gt; link and provide the email to which the reset link will be sent from there they can reset the password. &lt;br&gt;
For that we have to create a unique token which also has some &lt;br&gt;
expiration date which we will store in our &lt;strong&gt;database&lt;/strong&gt; so that the link which the user clicks includes that token and we can verify that the user did get that link from us. This is an additional security mechanism for changing of password thereby ensuring that the user password can only be changed only the identity of the user has been verified and it is also ensured that the user who is trying to change the password is in fact the owner of the account and is authorized to do so.&lt;/p&gt;

&lt;p&gt;Node.js has a core module which helps us in creating secure &lt;br&gt;
unique random values. That core module is known as the crypto module. &lt;/p&gt;

&lt;p&gt;Here is the link for same if you want to learn more about &lt;strong&gt;Crypto&lt;/strong&gt; module : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/api/crypto.html"&gt;https://nodejs.org/api/crypto.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-authorization"&gt;
  &lt;/a&gt;
  Working with Authorization
&lt;/h2&gt;

&lt;p&gt;Not every authenticated user is allowed to do everything. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authorization means that we restrict the permissions of the logged-in user. For example, to restrict that no one else is able to add items to our cart, no one can visit a certain protected route if they don't have the required privileged levels&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So to sum it up, &lt;br&gt;
Authorization is an important part of pretty much every application. Locking down access for authenticated users. &lt;br&gt;
Not every authenticated user should be able to do everything. Instead you want to lock down access by restricting the permissions of your users. &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Web Scraping with CSS Selectors using Python </title>
      <author>Dimitry Zub ☀️</author>
      <pubDate>Mon, 22 Nov 2021 14:47:30 +0000</pubDate>
      <link>https://dev.to/serpapi/web-scraping-with-css-selectors-using-python-4gdp</link>
      <guid>https://dev.to/serpapi/web-scraping-with-css-selectors-using-python-4gdp</guid>
      <description>&lt;p&gt;When web-scraping, &lt;code&gt;CSS&lt;/code&gt; selectors are one of the best friends. This tutorial will tell you what they're, their pros and cons, and why they matter from a web scraping perspective with Python examples to get you going.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog is suited for users with little (scraped a few websites or saw how someone is doing it) web scraping experience.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="#intro"&gt;Intro&lt;/a&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#explanation"&gt;Explanation&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#css_gadget"&gt;SelectorGadget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#css_by_hand"&gt;Pick CSS Selectors by Hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test_css"&gt;Test CSS Selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#css_cons"&gt;Cons of CSS Selector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#code"&gt;Code Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#outro"&gt;Outro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="intro"&gt;Intro&lt;/h3&gt;

&lt;p&gt;This blog post is about understanding &lt;code&gt;CSS&lt;/code&gt; selectors when doing web page web scraping, and what tools might be handy to use in addition to Python &lt;code&gt;beautifulsoup&lt;/code&gt;, &lt;code&gt;lxml&lt;/code&gt; libraries. &lt;/p&gt;

&lt;p&gt;Usage of &lt;code&gt;CSS&lt;/code&gt; selectors in different languages, frameworks, packages are not much different.&lt;/p&gt;

&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;\&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt; 
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;beautifulsoup4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A basic familiarity with &lt;code&gt;bs4&lt;/code&gt; library or whatever HTML parser package/framework you're using.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is needed if you want to train extract data from  &lt;code&gt;CSS&lt;/code&gt; selectors on your own. If you don't want to do that, installing these libraries is not required.&lt;/em&gt;&lt;/p&gt;




&lt;h3 id="explanation"&gt;Explanation&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt; selectors are patterns used to select (match) the element(s) you want to &lt;del&gt;style&lt;/del&gt; extract.&lt;/p&gt;

&lt;h4 id="css_gadget"&gt;SelectorGadget&lt;/h4&gt;

&lt;p&gt;Let's start with easy one, &lt;a href="https://selectorgadget.com/"&gt;SelectorGadget&lt;/a&gt; extension. This extension allows to quickly grab &lt;code&gt;CSS&lt;/code&gt; selector(s) by clicking on desired element in your browser, and returns a &lt;code&gt;CSS&lt;/code&gt; selector(s).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SelectorGadget is an &lt;a href="https://github.com/cantino/selectorgadget"&gt;open-source&lt;/a&gt; tool that makes &lt;code&gt;CSS&lt;/code&gt; selector generation and discovery on complicated sites a breeze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#uses-cases"&gt;
  &lt;/a&gt;
  Uses cases:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;for web page scraping with tools such as &lt;code&gt;Nokogiri&lt;/code&gt; and &lt;code&gt;BeautifulSoup&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;to generate &lt;code&gt;jQuery&lt;/code&gt; selectors for dynamic sites.&lt;/li&gt;
&lt;li&gt;as a tool to examine JavaScript-generated DOM structures.&lt;/li&gt;
&lt;li&gt;as a tool to help you style only particular elements on the page with your stylesheets.&lt;/li&gt;
&lt;li&gt;for &lt;code&gt;selenium&lt;/code&gt; or &lt;code&gt;phantomjs&lt;/code&gt; testing.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;When using SelectorGadget it highlights element(s) in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;yellow&lt;/strong&gt; which is mean that it's guessing what the user is looking for, and needs &lt;em&gt;possible&lt;/em&gt; additional clarification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3iSbyVVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpib0te8qbettetgmphh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3iSbyVVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpib0te8qbettetgmphh.png" alt="Image description" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;red&lt;/strong&gt; excludes from match selection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RA3yhrQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owkjtmgolmj3tf9aga0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RA3yhrQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owkjtmgolmj3tf9aga0n.png" alt="Image description" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;green&lt;/strong&gt; includes to match selection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---WRhRkhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9h5yqlm0h9tlfndtsxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---WRhRkhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9h5yqlm0h9tlfndtsxv.png" alt="Image description" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4 id="css_by_hand"&gt;Pick CSS Selectors by Hand&lt;/h4&gt;

&lt;p&gt;Now is the time to think a little, just a little. Since SelectorGadget isn't a magical all around tool, sometimes it can't get the desired element. This happens when website HTML tree is not well structured, or if the site is rendered via JavaScript.&lt;/p&gt;

&lt;p&gt;When it happens, I use Elements tab via Dev Tools (&lt;em&gt;F12 on a keyboard&lt;/em&gt;) to locate and grab &lt;code&gt;CSS&lt;/code&gt; selector(s) or HTML elements by their:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;type selector: &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;class selector: &lt;code&gt;.class&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;id selector: &lt;code&gt;#id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;attribute selector: &lt;code&gt;[attribute]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"&gt;Type Selectors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;element_name&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Type selectors matches elements by node name. In other words, it selects all elements of the given type within a HTML document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# returns all &amp;lt;a&amp;gt; elements
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'span'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# returns all &amp;lt;span&amp;gt; elements
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'input'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns all &amp;lt;input&amp;gt; elements
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'script'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns all &amp;lt;script&amp;gt; elements
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors"&gt;Class Selectors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;.class_name&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Class selectors matches elements based on the contents of their class attribute. It's like calling a class function  &lt;code&gt;PressF().when_playing_cod()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.mt-5'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                   &lt;span class="c1"&gt;# returns all elements with current .selector
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.crayons-avatar__image'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns all elements with current .selector
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.w3-btn'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                 &lt;span class="c1"&gt;# returns all elements with current .selector
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors"&gt;ID Selectors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;#id_value&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ID selectors matches an element based on the value of the elements &lt;code&gt;id&lt;/code&gt; attribute. In order for the element to be selected, its &lt;code&gt;id&lt;/code&gt; attribute must match exactly the value given in the selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#eob_16'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;              &lt;span class="c1"&gt;# returns all elements with current #selector
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#notifications-link'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns all elements with current #selector
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#value_hover'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# returns all elements with current #selector
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;Attribute Selectors&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;[attribute=attribute_value]&lt;/code&gt; or &lt;code&gt;[attribute]&lt;/code&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors#syntax"&gt;more examples&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Attribute selectors matches elements based on the presence or value of a given attribute.&lt;/p&gt;

&lt;p&gt;The only difference is that this selectors uses curly braces &lt;code&gt;[]&lt;/code&gt; instead of a dot (&lt;code&gt;.&lt;/code&gt;) as class, or a hash (&lt;em&gt;or octothorpe&lt;/em&gt;) symbol (&lt;code&gt;#&lt;/code&gt;) as ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[jscontroller="K6HGfd"]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# returns all elements with current [selector]
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[data-ved="2ascASqwfaspoi_SA8"]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns all elements with current [selector]
&lt;/span&gt;
&lt;span class="c1"&gt;# elements with an attribute name of data-id
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[data-id]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                       &lt;span class="c1"&gt;# returns all elements with current [selector]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list"&gt;Selector List&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;element, element, element, ...&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Selector list selects all the matching nodes (&lt;em&gt;elements&lt;/em&gt;). In web scraping perspective this &lt;code&gt;CSS&lt;/code&gt; selectors is great (&lt;em&gt;in my opinion&lt;/em&gt;) to handle different HTML layouts because if one of the selectors is present it will grab all elements from a existing selector.&lt;/p&gt;

&lt;p&gt;As an example from Google Search (&lt;em&gt;carousel results&lt;/em&gt;), the HTML layout will be different depending on country where the search is coming from.&lt;/p&gt;

&lt;p&gt;When country of the search is &lt;em&gt;not&lt;/em&gt; United States:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBJtLsMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61flzxalh9jclzv0ggif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBJtLsMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61flzxalh9jclzv0ggif.png" alt="Image description" width="880" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When country of the search is &lt;em&gt;set to&lt;/em&gt; United States:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgZU9bJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1knk4m45aijfln84rer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgZU9bJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1knk4m45aijfln84rer.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following examples translates to this code snippet (&lt;em&gt;handles both HTML layouts&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# will return all elements either by one of these selectors
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'#kp-wp-tab-Albums .PZPZlf, .keP9hb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator"&gt;Descendant combinator&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Syntax: &lt;code&gt;selector1 selector2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Descendant combinator represented by a single space (&lt;code&gt;&lt;/code&gt;) character and selects two selectors such that elements matched by the &lt;em&gt;second&lt;/em&gt; selector are selected if they have an ancestor (parent, parent's parent, parent, etc) element matching the &lt;em&gt;first&lt;/em&gt; selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.NQyKp .REySof'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# dives insie .selector -&amp;gt; dives again to other .selector and grabs it
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'div cite.iUh30'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# dives inside div -&amp;gt; dives inside cite.selector and grabs it
&lt;/span&gt;&lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'span#21Xy a.XZx2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# dives inside span#id -&amp;gt; dives insize a.selector and grabs it
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Other Useful &lt;code&gt;CSS&lt;/code&gt; Selectors&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:nth-child(n)&lt;/code&gt;: Selects every &lt;code&gt;n&lt;/code&gt; element that is the second child of its parent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:nth-of-type(n)&lt;/code&gt;: Selects every &lt;code&gt;n&lt;/code&gt; element that is the second &lt;code&gt;n&lt;/code&gt; element of its parent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a:has(img)&lt;/code&gt;: Selects every element &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element that &lt;em&gt;has&lt;/em&gt; an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional useful &lt;code&gt;CSS&lt;/code&gt; selectors you can find on &lt;a href="https://drafts.csswg.org/selectors/"&gt;W3C Level 4 Selectors&lt;/a&gt;,  &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;W3Schools &lt;code&gt;CSS&lt;/code&gt; Selectors Reference&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;MDN documentation&lt;/a&gt;.&lt;/p&gt;




&lt;h3 id="test_css"&gt;Test CSS Selectors&lt;/h3&gt;

&lt;p&gt;To test if the selector extracts correct data you can:&lt;/p&gt;

&lt;p&gt;Place those &lt;code&gt;CSS&lt;/code&gt; selector(s) in the SelectorGadget window and see what elements being selected:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEn5htjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0op758uowsmquay4prl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEn5htjo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0op758uowsmquay4prl.png" alt="Image description" width="880" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use Dev Tools Console tab via &lt;a href="https://developer.chrome.com/docs/devtools/console/utilities/#querySelectorAll-function"&gt;&lt;code&gt;$$(".selector")&lt;/code&gt;&lt;/a&gt; method (&lt;em&gt;creates an &lt;code&gt;array&lt;/code&gt; (&lt;code&gt;list()&lt;/code&gt;) of elements&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.DKV0Md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is equivalent to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;&lt;code&gt;document.querySelectorAll(".selector")&lt;/code&gt;&lt;/a&gt; method (&lt;a href="https://developer.chrome.com/docs/devtools/console/utilities/#querySelector-function"&gt;according to Chrome Developers website&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.DKV0Md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output from the DevTools Console for both methods are the same:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wLOMjC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwlwf7fi6etviy8iifgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wLOMjC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwlwf7fi6etviy8iifgx.png" alt="Image description" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3 id="css_cons"&gt;Cons of CSS Selector&lt;/h3&gt;

&lt;p&gt;Betting only classes might be not a good idea since they could probably change. &lt;/p&gt;

&lt;p&gt;A "better" way (&lt;em&gt;in terms of &lt;code&gt;CSS&lt;/code&gt; selectors&lt;/em&gt;) would be to use selectors such as &lt;em&gt;attribute selectors&lt;/em&gt; (&lt;em&gt;mentioned above&lt;/em&gt;), they are likely to change less frequently. See &lt;em&gt;attribute selectors&lt;/em&gt; examples on the screenshot below (HTML from Google Organic results):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wJosFjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98jb3hb0lohak6v7cr75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wJosFjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98jb3hb0lohak6v7cr75.png" alt="Image description" width="880" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many modern websites use autogenerated  &lt;code&gt;CSS&lt;/code&gt; selectors for every change that is being made to certain style component, which means that rely exclusively on them is not a good idea. But again, it will depend on how often do they really change.&lt;/p&gt;

&lt;p&gt;The biggest problem that might appear is that when code will be executing it will blow up with an error, and maintainer of the code should manually change &lt;code&gt;CSS&lt;/code&gt; selector(s) to make the code running properly. Seems like not a big deal, which is true, but it might be annoying if selectors are changing frequently.&lt;/p&gt;




&lt;h3 id="code"&gt;Code Examples&lt;/h3&gt;

&lt;p&gt;This section will show a couple of actual examples from different websites to get you familiarize a bit more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extract-title-snippet-link-displayed-link-from-google-search-results"&gt;
  &lt;/a&gt;
  Extract title, snippet, link, displayed link from Google Search results.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw0dXwzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p4cvb5y06cqbvyq3bva.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cw0dXwzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p4cvb5y06cqbvyq3bva.png" alt="Image description" width="880" height="187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test &lt;code&gt;CSS&lt;/code&gt; container selector:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGu9Ur4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3o1breedmhsz3fk7ke2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGu9Ur4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3o1breedmhsz3fk7ke2.png" alt="Image description" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.google.com/search?q=minecraft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".tF2Cxc"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".DKV0Md"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".yuRUbf a"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;displayed_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".lEBKkf span"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="n"&gt;snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".lEBKkf span"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;displayed_link&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;snippet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# part of the output 
&lt;/span&gt;&lt;span class="s"&gt;'''
Log in | Minecraft
https://minecraft.net/login
https://minecraft.net › login
Still have a Mojang account? Log in here: Email. Password. Forgot your password? Login. Mojang © 2009-2021. "Minecraft" is a trademark of Mojang AB.

What is Minecraft? | Minecraft
https://www.minecraft.net/en-us/about-minecraft
https://www.minecraft.net › en-us › about-minecraft
Prepare for an adventure of limitless possibilities as you build, mine, battle mobs, and explore the ever-changing Minecraft landscape.
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#extract-titles-from-serpapi-blog"&gt;
  &lt;/a&gt;
  Extract titles from SerpApi Blog.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yBNzx0VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sc0y2i9vrrxhefl48fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBNzx0VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sc0y2i9vrrxhefl48fz.png" alt="Image description" width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testing &lt;code&gt;.post-card-title&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt; selector in Devtools Console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$$(".post-card-title")

(7) [h2.post-card-title, h2.post-card-title, h2.post-card-title, h2.post-card-title, h2.post-card-title, h2.post-card-title, h2.post-card-title]
0: h2.post-card-title
1: h2.post-card-title
2: h2.post-card-title
3: h2.post-card-title
4: h2.post-card-title
5: h2.post-card-title
6: h2.post-card-title
length: 7
[[Prototype]]: Array(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://serpapi.com/blog/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".post-card-title"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="s"&gt;'''
Scrape Google Carousel Results with Python
SerpApi’s YouTube Search API
DuckDuckGo Search API for SerpApi
Extract all search engines ad results at once using Python
Scrape Multiple Google Answer Box Layouts with Python
SerpApi’s Baidu Search API
How to reduce the chance of being blocked while web scraping search engines
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#extract-title-link-from-devto-feed"&gt;
  &lt;/a&gt;
  Extract title, link from dev.to feed.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQ_oDFAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0w6k10ac0hmdighfsn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQ_oDFAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0w6k10ac0hmdighfsn8.png" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test &lt;code&gt;CSS&lt;/code&gt; selector with either SelectorGadget or DevTools Console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYktFlWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0corgea3vsx1yjsbj241.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYktFlWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0corgea3vsx1yjsbj241.png" alt="Image description" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lxml"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".crayons-story__title"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://dev.to&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"href"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# part of the output:
&lt;/span&gt;&lt;span class="s"&gt;'''
How to Create and Publish a React Component Library
https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe
A One Piece of CSS Art!
https://dev.to/afif/a-one-piece-of-css-art-225l
Windster - Tailwind CSS admin dashboard interface [MIT License]
https://dev.to/themesberg/windster-tailwind-css-admin-dashboard-interface-mit-license-3lb6
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drafts.csswg.org/selectors/"&gt;W3C Level 4 &lt;code&gt;CSS&lt;/code&gt; Selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;MDN &lt;code&gt;CSS&lt;/code&gt; Selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/cssref/css_selectors.asp"&gt;W3Schools &lt;code&gt;CSS&lt;/code&gt; Selectors Reference&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://selectorgadget.com/"&gt;SelectorGadget&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flukeout.github.io/"&gt;&lt;code&gt;CSS&lt;/code&gt; Dinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#specifications"&gt;W3C &lt;code&gt;CSS&lt;/code&gt; Specifications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors"&gt;&lt;code&gt;BeautifulSoup&lt;/code&gt; &lt;code&gt;CSS&lt;/code&gt; selectors docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3 id="outro"&gt;Outro&lt;/h3&gt;

&lt;p&gt;In the further blog post, I'll cover &lt;a href="https://developer.mozilla.org/en-US/docs/Web/XPath"&gt;XPath&lt;/a&gt; thing. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;CSS&lt;/code&gt; selectors are pretty easy and straightforward to understand, just a matter of practice and trial and error (programming in a nutshell 💻)&lt;/p&gt;

&lt;p&gt;If you have anything to share, any questions, suggestions, or something that isn't working correctly, feel free to drop a comment in the comment section or reach out via Twitter at &lt;a href="https://twitter.com/DimitryZub"&gt;@dimitryzub&lt;/a&gt;, or &lt;a href="https://twitter.com/serp_api"&gt;@serp_api&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yours,&lt;br&gt;
Dimitry, and the rest of SerpApi Team.&lt;/p&gt;




&lt;p&gt;Join us on &lt;a href="https://www.reddit.com/r/SerpApi/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/serp_api"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCUgIHlYBOD3yA3yDIRhg_mg"&gt;YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>css</category>
    </item>
    <item>
      <title>First Week learning rust</title>
      <author>Enyel Sequeira</author>
      <pubDate>Mon, 22 Nov 2021 14:31:25 +0000</pubDate>
      <link>https://dev.to/enyelsequeira/first-week-learning-rust-4j7i</link>
      <guid>https://dev.to/enyelsequeira/first-week-learning-rust-4j7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-first-week-learning-rust-using-the-rust-programming-language-the-book"&gt;
  &lt;/a&gt;
  My First week learning Rust using (The Rust Programming Language) &lt;em&gt;"The Book"&lt;/em&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#why-rust"&gt;
  &lt;/a&gt;
  Why Rust?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As a Front-End developer, there is a lot you need to learn and keep up to date. One of the biggest changes coming to &lt;em&gt;web development&lt;/em&gt; is  &lt;strong&gt;web3.0&lt;/strong&gt;, if you are not living under a rock you have probably heard about it,  at least a little. With these changes coming to the web I decided to learn &lt;strong&gt;rust&lt;/strong&gt; to make myself more valuable, this decision also comes after researching the kind of projects you could do. One of them is a compiler, which funny enough my favorite &lt;strong&gt;React&lt;/strong&gt; framework &lt;strong&gt;Next&lt;/strong&gt; uses. I am a big fan of &lt;strong&gt;Next&lt;/strong&gt; and my goal is to understand how &lt;strong&gt;rust&lt;/strong&gt;  made a framework that was already fast even faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-plan"&gt;
  &lt;/a&gt;
  My Plan
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read &lt;a href="https://doc.rust-lang.org/book/"&gt;The Rust Programming Language&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Try and read at least 1-2 hours each week&lt;/li&gt;
&lt;li&gt;Practice solving coding challenges with &lt;strong&gt;rust&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-firstweek-impressions"&gt;
  &lt;/a&gt;
  My First-week Impressions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Coming from a &lt;strong&gt;JavaScript&lt;/strong&gt; background, I had quite a few impressions. Most of them were good. &lt;/li&gt;
&lt;li&gt;To begin,  the first thing I noticed like most people, is that it is a static language, but what does that mean?. To put it simply, if you have been doing &lt;strong&gt;JavaScript&lt;/strong&gt; for a while most likely you have started working with &lt;strong&gt;TypeScript&lt;/strong&gt; and you noticed that you have to &lt;em&gt;type&lt;/em&gt; most of your code. &lt;strong&gt;rust&lt;/strong&gt; is the same way.  You can either love this or hate it, for me I loved this, while I was trying some code it made me realize that you can code and deploy a lot faster if the language is &lt;em&gt;typed&lt;/em&gt; this also cause fewer mistakes when tracking errors and deploying code. &lt;/li&gt;
&lt;li&gt;My first week of learning &lt;strong&gt;rust&lt;/strong&gt; I noticed how fast it is, I mean really fast. Creating a project was extremely fast taking less than 5s to get a project set up, granted it doesn't install any &lt;code&gt;dependencies&lt;/code&gt; which I learned are called &lt;code&gt;crates&lt;/code&gt; in &lt;strong&gt;rust&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#things-i-have-learned-this-week"&gt;
  &lt;/a&gt;
  Things I have learned this week.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;By default when declaring a variable that becomes immutable, however, it is possible to make it mutable by adding the &lt;code&gt;mut&lt;/code&gt; keyword like so &lt;code&gt;let mut number&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can also declare a variable using the &lt;code&gt;const&lt;/code&gt; keyword, gotcha with this is that constants can not be assigned to a return value of a function.&lt;/li&gt;
&lt;li&gt;Declaring a function is similar to other languages you declare it using &lt;code&gt;fn&lt;/code&gt; keyword and the entry point of any application is the &lt;code&gt;fn main(){...code}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;The way printing to the terminal works is also different in &lt;strong&gt;rust&lt;/strong&gt;. In  &lt;strong&gt;JavaScript&lt;/strong&gt; we can interpolate, but in rust not yet, although it was mentioned that this is a feature that they want to add in the next release.

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let mut number: i32 = 50&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;println!("number is {}", number);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;This will print the number &lt;code&gt;50&lt;/code&gt; to the terminal, it reads the variable after the comma. &lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Semicolons are really important in &lt;strong&gt;rust&lt;/strong&gt; it can be the difference between a statement and expression and yes they are different &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Statement is an action that does not return a value&lt;/li&gt;
&lt;li&gt;Expression evaluates something and returns a value&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Types, in &lt;strong&gt;rust&lt;/strong&gt; there are 2 data types subsets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scalar&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integers

&lt;ul&gt;
&lt;li&gt;just like numbers and we can use them signed and unsigned. If it needs a sign before the number, it should be typed using the signed &lt;em&gt;type&lt;/em&gt;. This is used for negative numbers.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us8LtVS6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t70awn3jhj9102ij37h5.png" alt="Intergers chart" width="283" height="205"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;floating-points

&lt;ul&gt;
&lt;li&gt;it has two types and the default is f64

&lt;ul&gt;
&lt;li&gt;f32 ==32bits==&lt;/li&gt;
&lt;li&gt;f64 ==64bits==&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Booleans

&lt;ul&gt;
&lt;li&gt;True/False&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Compound&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tupples 

&lt;ul&gt;
&lt;li&gt;If you have done any &lt;strong&gt;TypeScript&lt;/strong&gt; this works in a similar way&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let tup: (i32, f64, u8) = (500, 6,4, 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We can destructure like &lt;code&gt;let (x, y, z) = tup;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and get the values using indexes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Arrays

&lt;ul&gt;
&lt;li&gt;Arrays are a bit tricky at least to my understanding all of the &lt;em&gt;array&lt;/em&gt; items must be of the same type. They also have a fixed length and cannot add or remove. Instead, it was mentioned if I need to add or remove to use something like a &lt;strong&gt;Vector&lt;/strong&gt; (still not sure what this is)&lt;/li&gt;
&lt;li&gt;Accessing the element is the same way as it is in &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maybe more, but still haven't learned about them. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Control flow works the same way as it does in any other language using &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else if&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;You have 3 ways to loop (that I have read),&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loop&lt;/li&gt;
&lt;li&gt;while&lt;/li&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions can have an explicit return and with this, it does not matter where the function is declared, you can declare it at the end of the file and call it, in the beginning, this will still work. Being that is a &lt;em&gt;static typed&lt;/em&gt; language you need to type the parameters of a function. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZlcX1IC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iprkupw65vb2414g5no7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZlcX1IC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iprkupw65vb2414g5no7.png" alt="functions explicit" width="438" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explicit return of the function &lt;code&gt;five&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d30g2JW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygyh41gwnya4cxatjdyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d30g2JW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygyh41gwnya4cxatjdyu.png" alt="function semicolons" width="446" height="196"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;strong&gt;rust&lt;/strong&gt; like mentioned above it is important the use of semicolons
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C94pKAwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvkmavx4cfrnwt4ti3wx.png" alt="explicit" width="438" height="298"&gt;

&lt;ul&gt;
&lt;li&gt;this would not work because if we add a semicolon at the end of &lt;code&gt;x+1;&lt;/code&gt; &lt;code&gt;fn plus_one&lt;/code&gt; function this makes it into a statement and if you remember a statement does not have a return value.
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While I have learned a bit more than just these topics, I believe these are the key concepts of what I have learned this week.  I will continue to write what I have learned from the book each week and share it, if you want to follow you can follow my socials. &lt;/p&gt;

&lt;p&gt;I am a beginner in the &lt;strong&gt;rust&lt;/strong&gt; language so please keep in mind that the information given here is just my understanding and might not be the correct way. If you do see a typo or misinformation please do leave a comment. 😃&lt;/p&gt;

&lt;p&gt;PS:  If you are interested in doing a Bootcamp,  I have partnered with Practicum By Yandex to offer a discount. This is one of the boot camps I did, and I really enjoyed the process. It offers a 30% discount which is pretty sweet considering most boot camps are expensive. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>webdev</category>
      <category>programming</category>
      <category>typescript</category>
    </item>
    <item>
      <title>AWS Lambda pricing explained with examples</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Mon, 22 Nov 2021 14:17:36 +0000</pubDate>
      <link>https://dev.to/dashbird/aws-lambda-pricing-explained-with-examples-35m0</link>
      <guid>https://dev.to/dashbird/aws-lambda-pricing-explained-with-examples-35m0</guid>
      <description>&lt;p&gt;&lt;em&gt;In this article we'll go through the ins and outs of AWS Lambda pricing model, how it works, what additional charges you might be looking at and what's in the fine print.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Money makes the wold go round. Unfortunately, it is a necessity in almost all spheres of life. You can live without it or with lesser amounts of it, but it makes it all harder. If you wish to have it, first, you need to give it, as always. Even AWS Lambda is not free.&lt;/p&gt;

&lt;p&gt;Simply put, you have an idea and are on a breakthrough to make it happen. You need to use AWS Lambda to make it easier, prettier, or for whatever reason, easier to maintain. You need to pay for AWS Lambda. In that way, your product will see the light of the day, which will eventually bring the money back to you. To be able to earn, you need to invest first.&lt;/p&gt;

&lt;p&gt;A good thing with AWS Lambda prices is that you will &lt;strong&gt;only pay for what you use&lt;/strong&gt;. There are no pre-set packages of their service where you will end up paying for something that you might not use at all. That's why AWS Lambda decided to make it as simple as possible, which is a fantastic feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-aws-lambda-charge-for-their-services"&gt;
  &lt;/a&gt;
  How does AWS Lambda charge for their services?
&lt;/h2&gt;

&lt;p&gt;AWS Lambda is charging its users by the &lt;strong&gt;number of requests for their functions&lt;/strong&gt; and by the &lt;strong&gt;duration&lt;/strong&gt;, which is the time the code needs to execute. When your code starts running in response to an event, &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; counts a request. It will charge the &lt;strong&gt;total number of requests&lt;/strong&gt; across all of the functions used. &lt;strong&gt;Duration is calculated&lt;/strong&gt; by when your code started executing until it returns or is terminated, rounded up to the closest &lt;strong&gt;1 millisecond&lt;/strong&gt;. The AWS &lt;strong&gt;Lambda pricing&lt;/strong&gt; depends on the &lt;a href="https://dashbird.io/blog/lower-aws-lambda-bill-increasing-memory/"&gt;amount of memory the user used to allocate&lt;/a&gt; to the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda-pricing-model-explained"&gt;
  &lt;/a&gt;
  AWS Lambda pricing model explained
&lt;/h2&gt;

&lt;p&gt;Usually, a Lambda invocation isn't a stand-alone. A Lambda function gets &lt;strong&gt;triggered by events&lt;/strong&gt; coming from an &lt;a href="https://dashbird.io/knowledge-base/api-gateway/what-is-aws-api-gateway/"&gt;API Gateway&lt;/a&gt;, S3 bucket, or almost any other AWS service. These services have their &lt;strong&gt;costs additional to Lambda&lt;/strong&gt;, and some of them come with &lt;strong&gt;free tiers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda-free-tier"&gt;
  &lt;/a&gt;
  AWS Lambda free tier
&lt;/h2&gt;

&lt;p&gt;The Lambda Free Tier includes &lt;strong&gt;400,000 GB-seconds of compute time every month&lt;/strong&gt;. It doesn't expire automatically at the end of the annual AWS Free Tier term. It is available indefinitely to both existing and new AWS customers.&lt;/p&gt;

&lt;p&gt;400,000 seconds are over 110 hours of Lambda compute time per month, and that is only if you configure them with exactly 1 GB of memory.&lt;/p&gt;

&lt;p&gt;With the default configuration of 128 MB, you would get 880 hours, with 256 MB still 440 hours per month.&lt;/p&gt;

&lt;p&gt;But keep in mind that this also goes the other way around. If you configure 10 GB of memory, you only get one-tenth of time in the free tier, so 11 hours per month.&lt;/p&gt;

&lt;p&gt;Let's look at some example calculations:&lt;/p&gt;

&lt;p&gt;If we ignore the free tier savings and run a function for &lt;strong&gt;one second (1000 milliseconds) and 128 MB of memory one million times&lt;/strong&gt;, it will cost you $2.10. One millisecond at 128 MB memory costs $0.0000000021, times thousand gives us the second price of $0.0000021, and that times one million gives us $2.10.&lt;/p&gt;

&lt;p&gt;Now, let's see how much we would pay with the free tier. First, we have to convert the (1) GB-seconds into 128 MB-seconds because we don't use 1 GB of memory in this example. 128 MB is one-eight of 1 GB, so we can simply multiply the value with 8.&lt;/p&gt;

&lt;p&gt;400,000 GB-secconds = 3,200,000 128MB-seconds&lt;/p&gt;

&lt;p&gt;Our function runs 1,000,000 128MB-seconds a month, so it's within the 3,200,000 we're allowed to run in the free tier, and we don't pay a cent for it.&lt;/p&gt;

&lt;p&gt;If your function would use the maximum memory configuration of 10.240 MB, the same &lt;strong&gt;one-second * one million invocations&lt;/strong&gt; example would cost $166.70 because now you would pay more per millisecond, instead of $0.0000000021, one millisecond costs $0.0000001667. &lt;/p&gt;

&lt;p&gt;We can also check how much the free tier would save us by dividing the (1) GB-seconds to 10GB-seconds by 10.&lt;/p&gt;

&lt;p&gt;400,000 GB-seconds = 40,000 10GB-seconds&lt;/p&gt;

&lt;p&gt;1,000,000 10GB-seconds -- 40,000 10GB-seconds = 960,000 10GB-Seconds&lt;/p&gt;

&lt;p&gt;The free tier saves us 40,000 10GB-seconds here, which is about $6.5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway-free-tier"&gt;
  &lt;/a&gt;
  API Gateway free tier
&lt;/h2&gt;

&lt;p&gt;The API Gateway Free Tier, for Lambda functions triggered by API Gateway requests, includes &lt;strong&gt;1 million free requests per month&lt;/strong&gt;. After they've been spent, this tier will cost $0.20 per 1 million requests or $0.0000002 per a single request. The API Gateway free tier expires after 12 months.&lt;/p&gt;

&lt;p&gt;For our examples from before, if we assume the event source was API Gateway, we don't need to change the calculation in the first 12 months because we only make 1 million free requests. After that, we need to add $0.20 to the end price.&lt;/p&gt;

&lt;p&gt;In the 10 GB memory example, this doesn't change the bill much, but the first example with 128 MB would still cost us money, even if we don't leave the Lambda free tier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dashbirds-lambda-cost-calculator"&gt;
  &lt;/a&gt;
  Dashbird's Lambda cost calculator
&lt;/h2&gt;

&lt;p&gt;If this information was helpful, but it still gives you a hard time calculating the price you'd need to pay, &lt;a href="https://dashbird.io/lambda-cost-calculator/"&gt;use our AWS Lambda cost calculator&lt;/a&gt;. It might help &lt;strong&gt;determine the costs you need to pay for AWS Lambda services&lt;/strong&gt; based on personal usage. Follow this link and calculate your own AWS Lambda prices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-charges-within-aws-lambda-pricing"&gt;
  &lt;/a&gt;
  Additional charges within AWS Lambda pricing
&lt;/h2&gt;

&lt;p&gt;People mostly do not like the &lt;strong&gt;fine print&lt;/strong&gt;, and usually, they do not read it through. That is why we at &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; have read it all, and we wish to deliver it to you. That way, you will avoid any unnecessary and unpleasant experiences.&lt;/p&gt;

&lt;p&gt;To avoid unnecessary situations, you need to know everything there is to know about pricing models, additional charges, etc. &lt;strong&gt;Are there any additional charges in AWS Lambda pricing models?&lt;/strong&gt; Yes, there are. Read this carefully, and there will be no unpleasant surprises.&lt;/p&gt;

&lt;p&gt;The possibility of additional costs to incur is significantly higher if you have used any other AWS services or data transfers. You will be charged regardless of the chosen tier. In the example, if your function is reading and writing data to or from &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt;, you will be charged for the read/write requests and all of the data stored within Amazon S3.&lt;/p&gt;

&lt;p&gt;We will list some of the cases that will be &lt;strong&gt;charged additionally&lt;/strong&gt;, and that way, you can follow up with all the changes made. If your Lambda function starts the external data transfers, you will be billed at the &lt;a href="https://aws.amazon.com/ec2/"&gt;EC2&lt;/a&gt; data transfer rate.&lt;/p&gt;

&lt;p&gt;Also worth mentioning is that &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt;&lt;strong&gt; charges for data storage&lt;/strong&gt;, &lt;strong&gt;throughput capacity&lt;/strong&gt;, and &lt;strong&gt;data transfer&lt;/strong&gt;. On the other hand, Amazon S3 is charging for &lt;strong&gt;storage&lt;/strong&gt;, &lt;strong&gt;requests&lt;/strong&gt;, and data &lt;strong&gt;transfers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-lambda-pricing-examples"&gt;
  &lt;/a&gt;
  AWS Lambda pricing examples
&lt;/h2&gt;

&lt;p&gt;The AWS Lambda pricing example will be presented in this section made by the AWS Lambda prices already mentioned.&lt;/p&gt;

&lt;p&gt;You allocated &lt;strong&gt;512 MB of memory&lt;/strong&gt; to your function and executed it &lt;strong&gt;3 million times&lt;/strong&gt; during one month. Considering that it ran for 1 second each time, you'd be billed upon monthly compute time (in this case = $18.34) and by monthly requests (in this case = $0.40). Therefore, the &lt;strong&gt;total billed sum would be $18.74 per month&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That being said, &lt;a href="https://dashbird.io/blog/serverless-survey-results-benefits/"&gt;AWS Lambda is amazing for cutting costs&lt;/a&gt;, and we've had plenty of examples where companies have managed to save big bucks by &lt;a href="https://dashbird.io/blog/migrating-to-serverless-making-it-work/"&gt;switching to Serverless&lt;/a&gt;. &lt;a href="https://dashbird.io/blog/serverless-case-study-coca-cola/"&gt;Coca-Cola North America&lt;/a&gt; has seen a lot of benefit from going serverless on their vending machines division, so much so that they've made serverless a requirement for their development division.&lt;/p&gt;

&lt;p&gt;Knowing what you need and how much it might cost are the first steps to fulfilling your ideas and bring them to life.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/aws-lambda-cost-optimization-strategies/"&gt;6 tried and tested Lambda cost optimization strategies that work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;How to test JavaScript Lambda functions?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/task-timed-out-after-x-seconds/"&gt;Debugging with Dashbird: Lambda task timed out after X seconds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/observability/serverless-observability-real-time-debugging/"&gt;Serverless observability and real-time debugging&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>microservices</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Como transformar seu React APP em um PWA em poucos minutos</title>
      <author>Deric Parra</author>
      <pubDate>Mon, 22 Nov 2021 14:05:54 +0000</pubDate>
      <link>https://dev.to/deko/como-transformar-seu-react-app-em-um-pwa-em-poucos-minutos-59o7</link>
      <guid>https://dev.to/deko/como-transformar-seu-react-app-em-um-pwa-em-poucos-minutos-59o7</guid>
      <description>&lt;p&gt;Progressive Web Apps ou somente PWAs, nos dão novos recursos com características nativas para os sites, consumindo menos dados e sem a necessidade de instalação.&lt;/p&gt;

&lt;p&gt;Os React Apps precisam de apenas 2 características para serem PWAs, um servicerWorker, que é um script que o navegador executa em segundo plano, separado da WebPage o que possibilita alguns recursos, como uso offline. &lt;br&gt;
E também um arquivo na pasta publica, como nome do aplicativo, pagina inicial e ícones, sendo esse arquivo o &lt;code&gt;manifest.json.&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-raw-manifestjson-endraw-"&gt;
  &lt;/a&gt;
  1 &lt;code&gt;manifest.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;o &lt;code&gt;manifest.json&lt;/code&gt; vai na pasta public.&lt;/p&gt;

&lt;p&gt;A maioria das informações são auto explicativas, e voce pode gerar automaticamente em alguns sites como o &lt;a href="https://app-manifest.firebaseapp.com/"&gt;App Manifest Generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Segue um exemplo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "short_name": "WebPage",
    "name": "Minha WebPage",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "imagem/icone-x"
        },
        {
            "src": "logoPequeno.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "logoGrande.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-raw-servicerworkerjs-endraw-"&gt;
  &lt;/a&gt;
  2 &lt;code&gt;servicerWorker.js&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Para ter uma base vá para &lt;a href="https://github.com/cra-template/pwa/tree/master/packages/cra-template-pwa."&gt;Modelo de Service Worker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copie os arquivos &lt;code&gt;service-worker.js&lt;/code&gt; e o &lt;code&gt;serviceWorkerRegistration.js&lt;/code&gt; e cole na pasta &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então no topo seu index.js, importe o service worker resgistration, assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as serviceWorkerRegistration from './serviceWorkerRegistration';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após o import, adicione no final do seu &lt;code&gt;index.js&lt;/code&gt; o seguinte código para optar por um aplicativo "offline-first"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serviceWorkerRegistration.register();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, seu CRA agora é uma PWA.&lt;/p&gt;

&lt;p&gt;Caso voce esteja começando um projeto novo, voce pode cria-lo ja com o template usando o comando &lt;code&gt;npx create-react-app app-name --template cra-template-pwa&lt;/code&gt;, ou se voce for usar o typescript &lt;code&gt;npx create-react-app app-name --template cra-template-pwa-typescript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/making-a-progressive-web-app/"&gt;Para se aprofundar mais em PWAs&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploying Elixir eBook</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 22 Nov 2021 14:03:19 +0000</pubDate>
      <link>https://dev.to/miguelcoba/deploying-elixir-ebook-36n</link>
      <guid>https://dev.to/miguelcoba/deploying-elixir-ebook-36n</guid>
      <description>&lt;p&gt;I have compiled all the articles in the "Deploying Elixir" series in a handy eBook:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All together in a single place&lt;/li&gt;
&lt;li&gt;Nicely formatted&lt;/li&gt;
&lt;li&gt;Searchable&lt;/li&gt;
&lt;li&gt;With improved wording&lt;/li&gt;
&lt;li&gt;With better source code highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I have also added a &lt;em&gt;NEW, NEVER PUBLISHED BEFORE, BONUS&lt;/em&gt; chapter about deploying to heroku.&lt;/p&gt;

&lt;p&gt;And the best part:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IT IS FREE TO DOWNLOAD!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcXdeSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo2j1poioem37btdg9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcXdeSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo2j1poioem37btdg9v.png" alt="Deploying Elixir book cover" width="880" height="811"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#download-it-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://store.miguelcoba.com/l/deployingelixir"&gt;Download it now&lt;/a&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;I'm &lt;a href="https://miguelcoba.com"&gt;Miguel Cobá&lt;/a&gt;. Follow me on &lt;a href="https://twitter.com/MiguelCoba_"&gt;Twitter&lt;/a&gt;, subscribe to my &lt;a href="https://newsletter.miguelcoba.com"&gt;newsletter&lt;/a&gt;, or read all my &lt;a href="https://blog.miguelcoba.com"&gt;articles&lt;/a&gt; to learn more info about Elixir, Elm, Web Development, or writing eBooks.&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>book</category>
      <category>deploying</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Go Basics: Variables</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 22 Nov 2021 13:42:36 +0000</pubDate>
      <link>https://dev.to/abh1navv/go-basics-variables-14o0</link>
      <guid>https://dev.to/abh1navv/go-basics-variables-14o0</guid>
      <description>&lt;p&gt;In the last article, I gave a small introduction to programming with Go, where we saw the tiniest possible programs and the general syntax. &lt;/p&gt;

&lt;p&gt;Continuing on the syntax, let's take a look at some more syntax and understand how variables are declared in Go.&lt;/p&gt;

&lt;p&gt;If you're completely new to Go, please check out the previous article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abh1navv" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KGrqn2zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DoVdWWG3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/440730/f0fc3149-bd2f-4450-99bb-39bdc8c95824.jpg" alt="abh1navv"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abh1navv/getting-started-with-go-54pm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Go&lt;/h2&gt;
      &lt;h3&gt;Abhinav Pandey ・ Nov 20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variables are declared using the &lt;code&gt;var&lt;/code&gt; keyword and are used to store values.&lt;/p&gt;

&lt;p&gt;The following is an example of a variable declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;name&lt;/code&gt; is of type &lt;code&gt;string&lt;/code&gt; and is assigned the value &lt;code&gt;John&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also declare multiple variables at once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also declare variables with a type but without an initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also declare multiple variables with a type but without an initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or multiple variables of the same type in a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;occupation&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;occupation&lt;/code&gt; are of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;** Shorthand declaration of variables **&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;:=&lt;/code&gt; operator to declare and assign a variable at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;:=&lt;/code&gt; operator is only valid in short variable declarations. You cannot use it outside function bodies.&lt;br&gt;
When using the &lt;code&gt;:=&lt;/code&gt; operator, the variable is declared with the type of the right-hand side expression. The &lt;code&gt;var&lt;/code&gt; keyword is also not required.&lt;/p&gt;

&lt;p&gt;** Implicit type declaration **&lt;br&gt;
You can also declare a variable without specifying its type. In this case, the type is inferred from the initial value or a function call.&lt;br&gt;
For example, the following code declares a variable &lt;code&gt;age&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt; and assigns the value &lt;code&gt;30&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or using a function call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works for shorthand declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;Constants are declared using the &lt;code&gt;const&lt;/code&gt; keyword. They are used to store values that cannot be changed.&lt;br&gt;
For example, the following code declares a constant &lt;code&gt;PI&lt;/code&gt; and assigns the value &lt;code&gt;3.14&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Constants can also have implicit type declarations as in the above example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They cannot be declared using the &lt;code&gt;:=&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;They cannot be declared without an initial value.&lt;/li&gt;
&lt;li&gt;They cannot accept a function call as an initial value.&lt;/li&gt;
&lt;li&gt;The type of a constant may not be explicitly declared.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading.&lt;br&gt;
This should give you an idea of how variables are declared in Go and how the syntax compares to other programming languages. &lt;/p&gt;

&lt;p&gt;Stay tuned for more on Go.&lt;/p&gt;

&lt;p&gt;If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build an escrow contract on the Ethereum blockchain with Solidity and Replit</title>
      <author>RitzaCo</author>
      <pubDate>Mon, 22 Nov 2021 13:39:57 +0000</pubDate>
      <link>https://dev.to/ritza/build-an-escrow-contract-on-the-ethereum-blockchain-with-solidity-and-replit-5175</link>
      <guid>https://dev.to/ritza/build-an-escrow-contract-on-the-ethereum-blockchain-with-solidity-and-replit-5175</guid>
      <description>&lt;p&gt;Since Satoshi Nakamoto released the first version of Bitcoin in early 2009, digital currencies and blockchain technology have been the site of frenzied innovation, excitement and speculation. In addition to Bitcoin itself, hundreds of competing and complementary blockchains and currencies have come and gone. In this tutorial, we will be looking at Ethereum, the second most popular and widely used cryptocurrency after Bitcoin.&lt;/p&gt;

&lt;p&gt;Ethereum's main innovation is to provide a Turing complete environment for on-chain computation, which means we can run code on the blockchain. This opens up an immense field of possibilities for creating decentralized finance (DeFi) platforms, which can act as open alternatives to traditional financial services such as loans, investment, insurance and the sale of artworks.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be building a simple escrow smart contract, which will include deploying our own &lt;a href="https://en.wikipedia.org/wiki/Non-fungible_token"&gt;non-fungible token&lt;/a&gt; (NFT). By the end of this tutorial, you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have experience with developing Ethereum smart contracts using the Solidity programming language.&lt;/li&gt;
&lt;li&gt;Know the basics of deploying contracts to a blockchain and interacting with them.&lt;/li&gt;
&lt;li&gt;Have an understanding of some of the key considerations for secure blockchain development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;We need two things to get started with this project: a Solidity repl and a browser wallet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solidity-repl"&gt;
  &lt;/a&gt;
  Solidity repl
&lt;/h3&gt;

&lt;p&gt;Sign in to &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; or &lt;a href="https://replit.com/signup"&gt;create an account&lt;/a&gt; if you haven't already. Once logged in, create a Solidity starter repl.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gxHLo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gxHLo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png" alt="Create a solidity repl" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Solidity starter repl works a little differently from other repls you may have used in the past. Rather than running our repl every time we want to test out a new piece of code, we can run our repl once, to start it up, and it will automatically reload when changes are made to our Solidity code in &lt;code&gt;contract.sol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Solidity starter repl comes with a friendly web interface, built using the &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3 Ethereum JavaScript API&lt;/a&gt;, which we will use to deploy and interact with our contracts. We will deploy to Replit's testnet, a custom version of the Ethereum blockchain managed by Replit and optimised for testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-wallet"&gt;
  &lt;/a&gt;
  Browser wallet
&lt;/h3&gt;

&lt;p&gt;We will need a browser-based web3 wallet to interact with the Replit testnet and our deployed contracts. MetaMask is a popular and feature-rich wallet implemented as a WebExtension. You can install it from &lt;a href="https://metamask.io/download.html"&gt;MetaMask's download page&lt;/a&gt;. Make sure you're using a supported browser -- either Chrome, Firefox, Brave or Edge.&lt;/p&gt;

&lt;p&gt;Once you've installed MetaMask, follow the prompts to create a wallet and sign in. MetaMask will give you a 12-word &lt;em&gt;secret recovery phrase&lt;/em&gt; -- this is your wallet's private key, and must be kept safe and secret. If you lose this phrase, you will not be able to access your wallet, and if someone else finds it, they will.&lt;/p&gt;

&lt;p&gt;If you're already using MetaMask, we recommend creating a new account for testing with Replit. You can do this from the account menu, which appears when you click on the account avatar in the top right corner of MetaMask interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-smart-contract-development"&gt;
  &lt;/a&gt;
  Introduction to smart contract development
&lt;/h2&gt;

&lt;p&gt;Now that we've got our repl and wallet set up, we can start developing. We will be writing contracts, which are the basic building blocks of Ethereum programs. An individual contract can have state variables and functions, and can inherit from multiple other contracts. Contracts in Solidity are equivalent to classes in a language like Python or Java.&lt;/p&gt;

&lt;p&gt;Contracts on Ethereum and Ethereum-based networks (such as the Replit testnet and Binance Chain) are compiled to bytecode which runs on the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine&lt;/a&gt; (EVM). This is similar to how Java code compiles to bytecode for the JVM.&lt;/p&gt;

&lt;p&gt;A list of opcodes for EVM is provided &lt;a href="https://ethervm.io/"&gt;here&lt;/a&gt;. Many of the opcodes dealing with arithmetic and logical operations should be familiar if you've worked with any kind of assembly before. The EVM also has opcodes for blockchain-specific operations, such as getting information about the current block or chain.&lt;/p&gt;

&lt;p&gt;An additional consideration, unique to blockchain development, is that each opcode has an associated price (&lt;a href="https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0"&gt;listed here&lt;/a&gt;). Users of smart contracts pay a fee (known as &lt;a href="https://www.investopedia.com/terms/g/gas-ethereum.asp"&gt;gas&lt;/a&gt;) to invoke state-changing functions. This fee is determined by the opcodes used, and so it is in the interest of developers to keep their code as simple as possible.&lt;/p&gt;

&lt;p&gt;Solidity, which we will be using below, is the most popular language for developing smart contracts on Ethereum. Alternatives such as &lt;a href="https://vyper.readthedocs.io/en/stable/"&gt;Vyper&lt;/a&gt; exist, but are not as widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-protocol-design"&gt;
  &lt;/a&gt;
  Escrow protocol design
&lt;/h2&gt;

&lt;p&gt;Before we jump into the code, let's make sure we have a plan for what we're going to build.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://www.investopedia.com/terms/e/escrow.asp"&gt;escrow&lt;/a&gt; is a contractual agreement in which a third party receives money from one party and pays it to another party after a certain condition has been met. In traditional finance, this third party needs to be a trusted individual or organization, such as a bank, but in DeFi, it can be a smart contract.&lt;/p&gt;

&lt;p&gt;We will build a simple escrow protocol that holds funds until a specified duration has passed. This could be used to give a friend some Ethereum for their birthday, or to save money for a specific occasion.&lt;/p&gt;

&lt;p&gt;Our escrow protocol will consist of two contracts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Escrow&lt;/code&gt;, which will provide the end-user interface for escrowing and redeeming funds. This contract will also store all of the escrowed funds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EscrowNFT&lt;/code&gt;, which will store the details of individual escrows as NFTs. This will allow users to transfer immature escrows between one another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the most famous use of NFTs involves buying and selling artworks and other collectibles on marketplaces like &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt;, we can use them for all kinds of other purposes, such as to represent escrows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-nft"&gt;
  &lt;/a&gt;
  Escrow NFT
&lt;/h2&gt;

&lt;p&gt;Let's start coding with the EscrowNFT contract. Open &lt;code&gt;contract.sol&lt;/code&gt;, delete the file's contents, and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/access/Ownable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;EscrowNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721Burnable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ownable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// NFT data
&lt;/span&gt;    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"EscrowNFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ESCRW"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of our contract is the &lt;a href="https://docs.soliditylang.org/en/v0.6.8/layout-of-source-files.html#spdx-license-identifier"&gt;license identifier&lt;/a&gt;. Smart contracts are usually open source, and reuse of other projects' code is common in DeFi, so it's a good idea to include a license that indicates how you would like others to use (or not use) your code. Supported licenses are listed &lt;a href="https://spdx.org/licenses/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next line, we define the version of Solidity we're using (in this case, any version newer than &lt;a href="https://docs.soliditylang.org/en/v0.8.2/"&gt;0.8.2&lt;/a&gt; up to 0.9.0). Solidity is an evolving language and often introduces breaking changes, so our code may not compile under older or newer versions of the language.&lt;/p&gt;

&lt;p&gt;Following the &lt;code&gt;pragma&lt;/code&gt; statement, we import some contracts from the &lt;a href="https://openzeppelin.com/contracts/"&gt;OpenZeppelin contract library&lt;/a&gt;. This library includes inheritable base contracts for a wide variety of common smart contract development needs, including base implementations of Ethereum token standards.&lt;/p&gt;

&lt;p&gt;The Ethereum token standard for NFTs is &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721&lt;/a&gt;. Rather than implementing it ourselves, we can import and use OpenZeppelin's version. Note that while OpenZeppelin has a &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol"&gt;base &lt;code&gt;ERC721&lt;/code&gt; contract&lt;/a&gt;, we will use a couple of extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol"&gt;&lt;code&gt;ERC721Burnable&lt;/code&gt;&lt;/a&gt;, which will allow us to destroy NFTs that have been redeemed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol"&gt;&lt;code&gt;ERC721Enumerable&lt;/code&gt;&lt;/a&gt;, which will allow us to list which NFTs belong to which owners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these extension contracts inherit from &lt;code&gt;ERC721&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also use OpenZeppelin's &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol"&gt;&lt;code&gt;Ownable&lt;/code&gt;&lt;/a&gt; contract, which will allow us to enforce access control on sensitive functionality.&lt;/p&gt;

&lt;p&gt;As Solidity supports &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#inheritance"&gt;multiple inheritance&lt;/a&gt;, the contract definition line uses all of our imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;contract EscrowNFT is ERC721Burnable, ERC721Enumerable, Ownable {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the contract body, we define a few state variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tokenCounter&lt;/code&gt;: this will provide us with unique, incrementing IDs for tokens as they are minted.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt;: these &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#mapping-types"&gt;mappings&lt;/a&gt; will store data for each token we mint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the use of &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#integers"&gt;&lt;code&gt;uint256&lt;/code&gt;&lt;/a&gt; as the type for these values: because most of the values we deal with in Solidity programs are monetary, we use unsigned integers to avoid storing negative numbers. In versions of Solidity prior to 0.8.0, this sometimes led to dangerous &lt;a href="https://dasp.co/#item-3"&gt;overflows&lt;/a&gt;, but &lt;a href="https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html"&gt;overflow protection is now built into the language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We do not need to initialize any of these variables, as Solidity will automatically set uninitialized variables to 0.&lt;/p&gt;

&lt;p&gt;The final part of the code we added above is the &lt;code&gt;constructor()&lt;/code&gt; method, which calls &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L44"&gt;a parent constructor&lt;/a&gt; to define our NFT's name and symbol/stock ticker.&lt;/p&gt;

&lt;p&gt;Now we need to define a mint function, so that we can create NFTs. We'll start with the function definition, which we will add just below the body of &lt;code&gt;constructor()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're defining a function named &lt;code&gt;mint&lt;/code&gt; which takes three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;address _recipient&lt;/code&gt;: The &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#address"&gt;address&lt;/a&gt; we will send the NFT to. This can be a user's wallet or another contract.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uint256 _amount&lt;/code&gt;: The amount of Ether escrowed by this NFT.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uint256 _matureTime&lt;/code&gt;: The time (represented as a &lt;a href="https://www.unixtimestamp.com/"&gt;Unix Timestamp&lt;/a&gt;) at which the NFT's funds will be redeemable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function will return a single &lt;code&gt;uint256&lt;/code&gt; -- the numeric ID of the minted NFT.&lt;/p&gt;

&lt;p&gt;This is a &lt;code&gt;public&lt;/code&gt; function, which means it can be called by both external users and by other functions in this contract, or any contracts that inherit from it. Solidity provides granular function and variable visibility options, which are &lt;a href="https://bitsofco.de/solidity-function-visibility-explained/"&gt;explained here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;onlyOwner&lt;/code&gt; refers to a &lt;a href="https://docs.soliditylang.org/en/v0.8.9/contracts.html#function-modifiers"&gt;modifier&lt;/a&gt; defined in &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol#L42"&gt;&lt;code&gt;Ownable&lt;/code&gt;&lt;/a&gt;. Modifiers are generally used to restrict functions for purposes of access control or state logic. This modifier will ensure that only the owner of the NFT contract is allowed to mint NFTs.&lt;/p&gt;

&lt;p&gt;Now that we've read and understood the function definition, let's add the function body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// set values
&lt;/span&gt;        &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// increment counter
&lt;/span&gt;        &lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// return ID
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L280"&gt;&lt;code&gt;ERC721&lt;/code&gt;'s internal &lt;code&gt;_mint()&lt;/code&gt; function&lt;/a&gt; to mint a new token to the recipient with the current value of &lt;code&gt;tokenCounter&lt;/code&gt; as its ID. We then set the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; mappings for our new token. Finally, we increment &lt;code&gt;tokenCounter&lt;/code&gt; and return the ID of our token.&lt;/p&gt;

&lt;p&gt;Next, we need to make a function that will return the details of a given token. Add the following code below the body of the &lt;code&gt;mint()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"EscrowNFT: Query for nonexistent token"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declare this as a &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions"&gt;&lt;code&gt;view&lt;/code&gt; function&lt;/a&gt;. This declaration asserts that the function does not modify state, and thus its invocation does not need to be recorded on-chain. This means it will be callable for free.&lt;/p&gt;

&lt;p&gt;Our function body starts with a &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions"&gt;&lt;code&gt;require&lt;/code&gt; statement&lt;/a&gt;. This is an error-handling function in Solidity: if the condition in the first argument is not met, the current transaction will revert (undoing all previous actions) and the error message in the second argument will be displayed.&lt;/p&gt;

&lt;p&gt;If invoked with an existing token ID, this function will return two &lt;code&gt;uint256&lt;/code&gt; values, the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for that ID. Note the syntax for &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#returning-multiple-values"&gt;multiple return&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We're almost done with our NFT contract! Before we move on, we need to add a few boilerplate functions. Add the following code below the body of your &lt;code&gt;tokenDetails()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_beforeTokenTransfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;supportsInterface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bytes4&lt;/span&gt; &lt;span class="n"&gt;_interfaceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first function will return the contract's address. This will make it easier to work with in the Replit web interface.&lt;/p&gt;

&lt;p&gt;The last two functions resolve ambiguities introduced by Solidity's multiple inheritance. Because we're using two different ERC-721 extensions, the base &lt;code&gt;ERC721&lt;/code&gt; contract is inherited twice with different functions added and overridden. To resolve the compiler's confusion, we specify that the versions of &lt;code&gt;_beforeTokenTransfer()&lt;/code&gt; and &lt;code&gt;supportsInterface()&lt;/code&gt; provided by &lt;code&gt;ERC721Enumerable&lt;/code&gt; should be preferred.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-contract"&gt;
  &lt;/a&gt;
  Escrow contract
&lt;/h2&gt;

&lt;p&gt;Now we need to create our Escrow contract, which will act as an interface for creating and redeeming escrows. Add the following &lt;code&gt;contract&lt;/code&gt; block to the bottom of &lt;code&gt;contract.sol&lt;/code&gt;, below the &lt;code&gt;EscrowNFT&lt;/code&gt; contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Escrow&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Ownable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;EscrowNFT&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Escrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_escrowNft&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This contract inherits from &lt;code&gt;Ownable&lt;/code&gt;. We define two state variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;escrowNFT&lt;/code&gt;: This is the instance of the &lt;code&gt;EscrowNFT&lt;/code&gt; contract that our &lt;code&gt;Escrow&lt;/code&gt; contract will use.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initialized&lt;/code&gt;: This variable will help us to implement the &lt;a href="https://soliditydeveloper.com/design-pattern-solidity-initialize-contract-after-deployment"&gt;initializable design pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also define a number of &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#events"&gt;events&lt;/a&gt;. Events provide a user-friendly form of logging on the blockchain and are commonly used by dApps (decentralized apps -- i.e. web frontends for smart contracts). It's considered best practice to emit events whenever a state change is made, so we've defined events for our contract's three state-changing actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creation of escrow NFTs.&lt;/li&gt;
&lt;li&gt;Redeeming of escrowed funds.&lt;/li&gt;
&lt;li&gt;Initialization of the contract.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's implement initialization now. Add the following code below your event definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Contract is not yet initialized"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Contract already initialized."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;escrowNFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EscrowNFT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define a custom modifier, &lt;code&gt;isInitialized&lt;/code&gt;, which will revert if &lt;code&gt;initialized&lt;/code&gt; is false. If &lt;code&gt;initialized&lt;/code&gt; is true, the function we apply this modifier to will execute at &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we define our &lt;code&gt;initialize()&lt;/code&gt; function, which takes a single argument: the address of the &lt;code&gt;EscrowNFT&lt;/code&gt; contract to use. We've given this function &lt;code&gt;external&lt;/code&gt; visibility, so it can only be called by an external user, and applied the &lt;code&gt;onlyOwner&lt;/code&gt; modifier, so only the contract's owner can initialize it.&lt;/p&gt;

&lt;p&gt;In the function body, we ensure that the contract is not already initialized, and then we initialize our &lt;code&gt;escrowNFT&lt;/code&gt; state variable, set  &lt;code&gt;initialized&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and emit an event.&lt;/p&gt;

&lt;p&gt;Now we need a function that allows us to create escrow NFTs. Add the following code below the &lt;code&gt;initialize&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;escrowEth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Cannot escrow to zero address."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cannot escrow 0 ETH."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Escrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;escrowEth&lt;/code&gt; function is &lt;code&gt;payable&lt;/code&gt;, which means it can receive Ether, and it uses the &lt;code&gt;isInitialized&lt;/code&gt; modifier. It takes a recipient address and an escrow duration, specified in seconds.&lt;/p&gt;

&lt;p&gt;In the function body, we ensure that the recipient is not the zero address, to prevent users from accidentally minting NFTs without specifying the receiver, and that the amount of Ether to be escrowed (accessible from &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;msg.value&lt;/code&gt;&lt;/a&gt;) is greater than zero.&lt;/p&gt;

&lt;p&gt;We then set the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; values for our NFT, using &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;block.timestamp&lt;/code&gt;&lt;/a&gt; to get the current time (approximately). These values are provided to &lt;code&gt;escrowNFT.mint&lt;/code&gt;, which will mint our NFT to the specified recipient.&lt;/p&gt;

&lt;p&gt;Finally, we emit an event, using &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;msg.sender&lt;/code&gt;&lt;/a&gt; to retrieve the address of the user who called the function.&lt;/p&gt;

&lt;p&gt;Now that we can create escrow NFTs, we need a way for the recipient to redeem the funds in a matured NFT. Let's create a function for that now, below the definition of our &lt;code&gt;escrowEth&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;redeemEthFromEscrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ownerOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Must own token to claim underlying Eth"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Escrow period not expired."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Transfer failed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our redemption function first checks whether &lt;code&gt;msg.sender&lt;/code&gt; is the owner of the token, to prevent users from attempting to redeem tokens they don't own. It then retrieves the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for the specified token ID, and checks whether the &lt;code&gt;matureTime&lt;/code&gt; has passed.&lt;/p&gt;

&lt;p&gt;If the token is owned by &lt;code&gt;msg.sender&lt;/code&gt; and its &lt;code&gt;matureTime&lt;/code&gt; has passed, it is burned using the &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol#L21"&gt;&lt;code&gt;burn()&lt;/code&gt; function from ERC721Burnable&lt;/a&gt;. This destroys the token, ensuring that it cannot be redeemed again.&lt;/p&gt;

&lt;p&gt;Once the token is destroyed, we transfer its underlying Ether to &lt;code&gt;msg.sender&lt;/code&gt;. As the creator of the escrow NFT originally paid this amount of Ether into the contract, it should still be available. There are a few different ways of sending Ether in Solidity -- &lt;a href="https://solidity-by-example.org/sending-ether/"&gt;using &lt;code&gt;call&lt;/code&gt; is the best one&lt;/a&gt;. &lt;code&gt;call&lt;/code&gt; returns two values, but we only want the first one, so we leave out the second variable declaration in our multiple return syntax.&lt;/p&gt;

&lt;p&gt;If the Ether transfer fails, we revert, undoing the destruction of the token. Otherwise we emit an event to record the escrow redemption.&lt;/p&gt;

&lt;p&gt;Our contract now does the main things it needs to, but we can make some improvements. For example, rather than requiring users to specify the ID of the token they want to redeem, we can create a function that redeems all matured tokens in their possession. Let's do this now, by adding a new function beneath the definition of &lt;code&gt;redeemEthFromEscrow&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;redeemAllAvailableEth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;nftBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nftBalance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No escrow NFTs to redeem."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nftBalance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenOfOwnerByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No Ether to redeem."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Transfer failed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start by querying &lt;code&gt;escrowNFT.balanceOf()&lt;/code&gt; to find out the number of escrow NFT tokens &lt;code&gt;msg.sender&lt;/code&gt; owns. If they own none, we revert.&lt;/p&gt;

&lt;p&gt;We then create a variable named &lt;code&gt;totalAmount&lt;/code&gt; and loop through the user's NFTs. We can get the ID for each one using &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol#L37"&gt;&lt;code&gt;tokenOfOwnerByIndex&lt;/code&gt;&lt;/a&gt;, a function defined in &lt;code&gt;ERC721Enumerable&lt;/code&gt;. We then retrieve the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for the token using &lt;code&gt;escrowNFT.tokenDetails()&lt;/code&gt;. If a given token's &lt;code&gt;matureTime&lt;/code&gt; has passed, we burn it and add its value to &lt;code&gt;totalAmount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the for loop has completed, we check whether &lt;code&gt;totalAmount&lt;/code&gt; is greater than zero, and revert if it isn't. We then send the &lt;code&gt;totalAmount&lt;/code&gt; in Ether to &lt;code&gt;msg.sender&lt;/code&gt;. At this point, you may wonder why we didn't just loop through the user's NFTs and called &lt;code&gt;redeem&lt;/code&gt; on each one, to avoid repeating code. While this would make our code simpler to read, it would lead to a lot of extra checks and transfers, which would make this function more expensive for users to call. When developing smart contracts, keeping the cost of each function invocation to a minimum is paramount.&lt;/p&gt;

&lt;p&gt;Let's add one more function before we deploy our contracts. You should recognize &lt;code&gt;contractAddress()&lt;/code&gt; from &lt;code&gt;EscrowNFT&lt;/code&gt; above. Add it below the definition of &lt;code&gt;redeemAllAvailableEth()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, our code is complete!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-our-protocol"&gt;
  &lt;/a&gt;
  Testing our protocol
&lt;/h2&gt;

&lt;p&gt;Now that we've written our contracts, it's time to deploy them to the Replit testnet and test them out. We'll use our repl's web interface to do this. &lt;/p&gt;

&lt;p&gt;First, run your repl. Once all of the dependencies are installed, you should see the Replit Ethereum web interface in your repl's browser. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZo2sRYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/replit-eth-web.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZo2sRYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/replit-eth-web.png" alt="Replit Ethereum web interface" width="880" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect your MetaMask wallet to the web interface and switch to the Replit testnet. Then click the link to get 1 ETH for testing. Wait until 1 ETH shows up in your wallet balance on the top right of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvi76zbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/switch-to-test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvi76zbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/switch-to-test.png" alt="Switch to test" width="880" height="200"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--miQ8RQa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/get-one.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miQ8RQa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/get-one.png" alt="Get one Ether" width="880" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can deploy your contracts. Select "Escrow" from the drop-down box and click &lt;strong&gt;Deploy&lt;/strong&gt;. Approve the MetaMask pop-up that appears. Then do the same with "EscrowNFT".&lt;/p&gt;

&lt;p&gt;Once both of these contracts have been deployed, they will show up as expandable boxes below the drop-down box. Expand both and take a look at all the different functions available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzpcrBEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/deployed-contracts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzpcrBEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/deployed-contracts.png" alt="Deployed contracts" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we can use either of these contracts, we need to do some setup. First, let's initialize &lt;code&gt;Escrow&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, run the view function &lt;code&gt;contractAddress&lt;/code&gt;. Click on the output to copy it to your clipboard.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Escrow&lt;/code&gt;, find the &lt;code&gt;initialize&lt;/code&gt; function. Paste the contents of your clipboard into the value for &lt;code&gt;_escrowNftAddress&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;initialize&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our &lt;code&gt;Escrow&lt;/code&gt; contract is now initialized and linked to &lt;code&gt;EscrowNFT&lt;/code&gt;. But before we can use it, there's an additional complication. You'll recall that we added the &lt;code&gt;onlyOwner&lt;/code&gt; modifier to the &lt;code&gt;mint()&lt;/code&gt; function in &lt;code&gt;EscrowNFT&lt;/code&gt;. When a contract that inherits from &lt;code&gt;Ownable&lt;/code&gt; is deployed, its owner is set to the address that deployed it, which will be your wallet address. But we need it to be owned by &lt;code&gt;Escrow&lt;/code&gt; so that &lt;code&gt;escrowEth()&lt;/code&gt; can call &lt;code&gt;mint()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;code&gt;Ownable&lt;/code&gt; provides functionality for transferring ownership, so we can transfer &lt;code&gt;EscrowNFT&lt;/code&gt; to &lt;code&gt;Escrow&lt;/code&gt; in the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;Escrow&lt;/code&gt;, run the view function &lt;code&gt;contractAddress&lt;/code&gt;. Click on the output to copy it to your clipboard.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, find the &lt;code&gt;transferOwnership&lt;/code&gt; function. Paste the contents of your clipboard into the value for &lt;code&gt;newOwner&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;transferOwnership&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now &lt;code&gt;Escrow&lt;/code&gt; owns &lt;code&gt;EscrowNFT&lt;/code&gt; and our system will work. Let's test it out by doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the &lt;code&gt;escrowEth&lt;/code&gt; function in &lt;code&gt;Escrow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Specify your own address, a short duration and a small amount of Ether.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;escrowEth&lt;/code&gt; function and approve the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you attempt to claim your escrowed Ether using either of the redemption functions in &lt;code&gt;Escrow&lt;/code&gt; before the duration has passed, the transaction should fail with the expected error message. However, if you wait for the duration to pass and then call either of the redemption functions, the transaction will fail for a different reason.&lt;/p&gt;

&lt;p&gt;Both redemption functions call &lt;code&gt;EscrowNFT&lt;/code&gt;'s &lt;code&gt;burn()&lt;/code&gt; function to burn tokens. This is an access-controlled function, available only to the token owner and addresses approved by the token owner. If this weren't the case, anyone could burn any token just by calling the function.&lt;/p&gt;

&lt;p&gt;To allow &lt;code&gt;Escrow&lt;/code&gt; to burn our NFT, we need to give it approval. We can do this in the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, find the &lt;code&gt;setApprovalForAll&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Copy the address from &lt;code&gt;Escrow&lt;/code&gt;'s &lt;code&gt;contractAddress&lt;/code&gt; function output.&lt;/li&gt;
&lt;li&gt;Paste in the address as the value for &lt;code&gt;operator&lt;/code&gt; and specify &lt;code&gt;true&lt;/code&gt; as the value for &lt;code&gt;approved&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;setApprovalForAll&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once approval is set, you should be able to successfully redeem the escrowed Ether from your mature tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-and-trust-considerations-for-smart-contract-development"&gt;
  &lt;/a&gt;
  Security and trust considerations for smart contract development
&lt;/h2&gt;

&lt;p&gt;We've written our escrow system as a way to learn about Solidity development and interacting with smart contracts on the blockchain. To facilitate these outcomes, our contracts make use of a design that is partially insecure and would not be recommended in practice.&lt;/p&gt;

&lt;p&gt;A key part of earning user trust as a smart contract developer is to ensure that you have minimal control over the contracts you deploy. That's why, for example, we designed the &lt;code&gt;initialize()&lt;/code&gt; function in &lt;code&gt;Escrow&lt;/code&gt; to only be callable once. If a contract has a large number of privileged functions that make significant changes to its state and behavior, there is a risk that the owner -- or a hacker who manages to compromise the owner's wallet -- will use these functions to steal user funds.&lt;/p&gt;

&lt;p&gt;An unscrupulous developer could create a malicious version of our escrow protocol by doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After deploying &lt;code&gt;EscrowNFT&lt;/code&gt; but before transferring its ownership, they could call &lt;code&gt;mint()&lt;/code&gt; to create an Escrow token with an amount of 100.&lt;/li&gt;
&lt;li&gt;They could then transfer &lt;code&gt;EscrowNFT&lt;/code&gt;'s ownership to &lt;code&gt;Escrow&lt;/code&gt;, and wait for users to start paying Ether to &lt;code&gt;Escrow&lt;/code&gt; in order to create tokens.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;Escrow&lt;/code&gt; had a balance of 100 Ether or more, the developer could redeem their token, successfully stealing all user funds.&lt;/li&gt;
&lt;li&gt;Redemption of any subsequent escrow tokens would fail, as the &lt;code&gt;Escrow&lt;/code&gt; contract would contain insufficient funds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the evidence of all of this happening would be visible on the blockchain, through events, users may not want or easily be able to look at that information before using the protocol.&lt;/p&gt;

&lt;p&gt;Another, less serious, consideration is that &lt;code&gt;block.timestamp&lt;/code&gt; is not always accurate. As this value is derived from when Ethereum miners report it, &lt;a href="https://dasp.co/#item-8"&gt;it can be manipulated slightly&lt;/a&gt;. This will have a negligible effect on escrow periods of multiple days, weeks or months, but could affect very short escrow periods quite significantly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;Now that you've got your feet wet with Solidity development, here are some ideas for further development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the architecture of the protocol to make it impossible to create a malicious version in the manner described above.&lt;/li&gt;
&lt;li&gt;Create a view function in &lt;code&gt;Escrow&lt;/code&gt; that tells the user how much Ether is available for redemption.&lt;/li&gt;
&lt;li&gt;Determine whether the user has approved &lt;code&gt;Escrow&lt;/code&gt; before attempting to burn tokens. Add a nice error message if they haven't.&lt;/li&gt;
&lt;li&gt;Create an &lt;a href="https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/"&gt;ERC-20&lt;/a&gt; token and allow users to escrow it instead of Ether.&lt;/li&gt;
&lt;li&gt;See if you can rewrite any of the contract functions to use less gas.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>SvelteKit Tooling:  7 Tools to Streamline you CI Workflow</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 22 Nov 2021 13:37:38 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-tooling-7-tools-to-streamline-you-ci-workflow-305h</link>
      <guid>https://dev.to/askrodney/sveltekit-tooling-7-tools-to-streamline-you-ci-workflow-305h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-putting-your-continuous-integration-process-on-skates"&gt;
  &lt;/a&gt;
  🚀 SvelteKit Tooling: Putting your Continuous Integration Process on Skates
&lt;/h2&gt;

&lt;p&gt;Adding SvelteKit tooling to your continuous integration (CI) process can help you work more efficiently as well as keep your code base more consistent. This is useful when you need to hand your project over to a client, or even get assistance from colleagues or external sources. We look at some tools you might consider adding to your CI process in this article.  We cover checking your code follows best practices, that it has consistent styling as well as how you can create consistent commit messages. I hope you are able to apply at least a couple of the aspects covered to your regular SvelteKit development process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-vs-code-extensions"&gt;
  &lt;/a&gt;
  🖥 VS Code Extensions
&lt;/h2&gt;

&lt;p&gt;Since &lt;a href="https://insights.stackoverflow.com/survey/2021/#most-popular-technologies-new-collab-tools-prof"&gt;70% of professional developers use Visual Studio Code&lt;/a&gt;, let's take a quick look at some extensions you might want to add to your SvelteKit workflow before we get on to the main tooling items. Although the tools we look at later are mostly standalone tools, you will get additional benefits when working with VSCode if you add the corresponding extension. We will look at the dot files as we go along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/a&gt; — working in conjunction with the main ESList package (see below), this will highlight errors in your code, often helping you realise early that you mistyped a variable name or forgot to import or install a package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/a&gt; — prettier is probably the best known code formatter. Rather than argue over&lt;br&gt;
whether or not to use it, I think the argument has shifted to whether it should be used to enforce&lt;br&gt;
tab or space indenting — I'm not getting into that one!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;&lt;strong&gt;stylelint&lt;/strong&gt;&lt;/a&gt; — this will flag up accessibility as well as CSS code style issues in VSCode.  I run stylelint before committing code, but it's nice to have errors highlighted in the editor so you can fix them individually as they crop up. That is rather than having to tackle a stack of them just before you commit at the end of a long session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;&lt;strong&gt;SvelteCode&lt;/strong&gt;&lt;/a&gt; — official Svelte VSCode extension adds syntax highlighting for your Svelte code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#base-vscode-configuration"&gt;
  &lt;/a&gt;
  Base VSCode Configuration
&lt;/h3&gt;

&lt;p&gt;Everyone has their own favourite VSCode settings. Personally I prefer a light-touch approach, so hopefully this might be used as a starting point for anyone. You can set these globally, though typically I add a config file to each project (at &lt;code&gt;.vscode/settings&lt;/code&gt; in the project folder) so I can tweak settings based on what the project uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;    
  &lt;/span&gt;&lt;span class="nl"&gt;"[markdown]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bounded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrapColumn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"[svelte]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte.svelte-vscode"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;formatOnSave&lt;/code&gt; is my most loved setting! I have mixed feelings about &lt;code&gt;organizeImports&lt;/code&gt; and omit it on most projects — it can get a touch annoying when it removes imports which you still need. You can run organise imports manually using the Shift + Alt + O key combination. The markdown options make your content a little easier to read in the editor (you might prefer 100 or 120 character lines instead of 80). I have had a couple of Svelte projects where formatting stopped working and found adding the last setting fixes this. As I say this is just a base and you will probably have your own favourites. I'm keen to hear what I am missing (remember I prefer a minimalist approach though)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-1-pnpm"&gt;
  &lt;/a&gt;
  🔥 SvelteKit Tooling: 1. pnpm
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pnpm&lt;/code&gt; is a packet management tool like &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;. I like to look at it as a more modern imagination of a package manager. The main selling points are speed and efficiency. When you install packages in your project, &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; will download the package and save it to a &lt;code&gt;node_modules&lt;/code&gt; folder in your project. These folders can get huge and you have to scan though old projects deleting them whenever your machine starts running low on free disk space. In contrast &lt;code&gt;pnpm&lt;/code&gt; creates a central repository for packages on your machine and just adds a link from the &lt;code&gt;node_modules&lt;/code&gt; folder of your project to the particular package in the the central repo.&lt;/p&gt;

&lt;p&gt;The two main advantages of the central local repo approach (which &lt;code&gt;pnpm&lt;/code&gt; follows) are that it is quicker to start up new projects as many of the packages you need to install will already be on your machine. Then, on top, you save on disk space. In the screenshot below, you see in the last long line 142 packages were reused in this particular case. That's 142 packages that did not need to be freshly downloaded. You will also see the output is a little more terse and cleanly formatted than with other tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2PJAnvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxd530gqcwo283cuahe3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2PJAnvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxd530gqcwo283cuahe3.png" alt="SvelteKit Tooling:  p n p m install command screenshot.  Result shows an ouput line recording 142 reused packages and only 2 downloaded" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need a one-off install to get &lt;code&gt;pnpm&lt;/code&gt; running on your machine. After that, it accepts commands similar to the ones you will be using to with &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;. If you already have &lt;code&gt;npm&lt;/code&gt; on your machine just run this command to install &lt;code&gt;pnpm&lt;/code&gt; globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; pnpm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check for updates for &lt;code&gt;pnpm&lt;/code&gt; and other global packages, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm outdated &lt;span class="nt"&gt;-g&lt;/span&gt;
pnpm add &lt;span class="nt"&gt;-g&lt;/span&gt; outdated-package-one outdated-package-two
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-2-prettier"&gt;
  &lt;/a&gt;
  🧑🏽 SvelteKit Tooling: 2. Prettier
&lt;/h2&gt;

&lt;p&gt;You can automatically add prettier to a new skeleton Svelte project form the init tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm init svelte@next sveltekit-tooling &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VTtRNiNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o58y8efarwqspn3a7w1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTtRNiNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o58y8efarwqspn3a7w1z.png" alt="SvelteKit Tooling:  Prettier screenshot shows output from pnpm init svelte command with Skeleton project, Yes to E S Lint and yes to Prettier answers" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default prettier script installed into &lt;code&gt;package.json&lt;/code&gt; uses the &lt;code&gt;.gitignore&lt;/code&gt; file to decide which files to ignore for formatting. I like to commit the &lt;code&gt;pnpm-lock.yaml&lt;/code&gt; file but am not too bothered about how it is formatted so go update the script and add a &lt;code&gt;.prettierignore&lt;/code&gt; file to my project root folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.svelte-kit/**
static/**
build/**
functions/**
node_modules/**
pnpm-lock.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice I add a &lt;code&gt;prettier:check&lt;/code&gt; script too! I use this for a final check before committing, even though I set &lt;code&gt;formatOnSave&lt;/code&gt; in VSCode.&lt;/p&gt;

&lt;p&gt;If you prefer tabs to spaces, ignore the rest of this paragraph! By the way I'm not saying spaces are better than tabs, just letting you know how to switch if you don't want to go with the default, just saying! Here's my &lt;code&gt;.prettierrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use default filenames here for the the ignore and config file so we don't need to specify them explicitly in the scripts.&lt;/p&gt;

&lt;p&gt;For completeness, here is a typical &lt;code&gt;.gitignore&lt;/code&gt; file for one of my SvelteKit projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# SvelteKit Files
build/
functions/
/.svelte-kit

# Dependency directories
node_modules/
/package

# Optional eslint cache
.eslintcache

# dotenv environment variable files
.env*
!.env.EXAMPLE

# Mac files
.DS_Store

# Local Netlify folder
.netlify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While we're slightly off topic and since this does not fit neatly anywhere else, it is worth adding a &lt;code&gt;.nvmrc&lt;/code&gt; file to new SvelteKit projects. This sets the node version when your host builds the project. Not setting it can result it builds failing as some hosts use an older node version by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-3-eslint"&gt;
  &lt;/a&gt;
  👀 SvelteKit Tooling: 3. ESLint
&lt;/h2&gt;

&lt;p&gt;ESLint is a well-know JavaScript linting tool. There are various rules you can set though the defaults set by the Svelte init tool do work quite well. If you have set up your project using another method you can run the ESLint setup tool to get you going:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; eslint
./node_modules/.bin/eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the &lt;code&gt;.eslint.cjs&lt;/code&gt; file that I go with (default for JavaScript skeleton project from init tool):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte3/svelte3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;es2017&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;code&gt;lint&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; script I typically use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-4-sveltecheck"&gt;
  &lt;/a&gt;
  😇 SvelteKit Tooling: 4. svelte-check
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/sveltejs/language-tools/tree/master/packages/svelte-check"&gt;svelte-check&lt;/a&gt; is a handy tool for finding TypeScript errors in your code, though I also like to use it on JavaScript projects. You might find it spits out a lot of errors. If you are just starting out, you will not understand all of them or know which ones are safe to ignore. In this case, if your code works, just fix the accessibility errors and tackle the others one by one as you gain more experience.&lt;/p&gt;

&lt;p&gt;Anyway to set it up run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; svelte-check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a script to &lt;code&gt;package.json&lt;/code&gt; to run it when you need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --ignore-path .gitignore --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"svelte:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-check --fail-on-warnings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can set a stricter &lt;code&gt;--fail-on-hints&lt;/code&gt; flag as an alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-5-stylelint"&gt;
  &lt;/a&gt;
  💄 SvelteKit Tooling: 5. stylelint
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;stylelint&lt;/code&gt; is great for checking accessibility issues in your CSS code.  You can also use it to prevent colour drift and to keep your code more maintainable.  As an example, setting a rule for no named colours will flag up an error if add something like &lt;code&gt;border-color: red&lt;/code&gt; for debugging and forget to remove it. More likely though, you might set a hex or HSL value while fixing or setting something up instead of using a named variable like &lt;code&gt;--theme-colour&lt;/code&gt;.  When you later need to tweak the theme colour, the manually added hex value will persist creating inconsistencies in the site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stylelint&lt;/code&gt; is one way to fix this problem.  Another, if you're a TypeScript fan is to be super strict and use vanilla-extract with contracts.  For stylelint there's a whole video on vanilla CSS linting in SvelteKit.  Also follow that link for another video which looks at SCSS linting in SvelteKit.&lt;/p&gt;

&lt;p&gt;I add this script to &lt;code&gt;package.json&lt;/code&gt; for vanilla CSS projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"lint:css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stylelint &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;src/**/*.{css,svelte}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is the SCSS alternative:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"lint:scss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stylelint &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;src/**/*.{css,scss,svelte}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-sveltekit-tooling-6-precommit"&gt;
  &lt;/a&gt;
  ⛔️ SvelteKit Tooling: 6. precommit
&lt;/h2&gt;

&lt;p&gt;When working in a team, your colleagues will probably appreciate consistent and concise commit messages.  There is a whole &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;system for commit message etiquette named conventional commits&lt;/a&gt;.  That is just one option and you might prefer one of the other various options.  With conventional commits, your commit messages take a particular format.   In this example our commit type is &lt;code&gt;refactor&lt;/code&gt; (we could also choose fix, style or feature among others).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;refactor(services/narcissus-api): 🏄🏽‍♂️ add Supabase client 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following the type of commit in brackets we have a description for the part of the project affected. Then the commit message itself.  The emoji is not required!  If you want to try out conventional commits, &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;you might like the commitizen command line tool&lt;/a&gt;. As well as holding your hand as you write commit messages, it can handle version bumping and generate changelogs for you.  We won't go into details here, but definitely try it on a new side project to see if it suits you.&lt;/p&gt;

&lt;p&gt;I like to include the &lt;code&gt;commitlint&lt;/code&gt; tool in all my SvelteKit projects to enforce the conventional commit syntax.  If you want to try it, install a couple of packages and then add the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-g&lt;/span&gt; commitlint
pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; @commitlint/config-conventional
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;commitlint.config.cjs&lt;/code&gt; file in your project's root folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@commitlint/config-conventional&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because SvelteKit uses ES modules by default, it is important that the file extension is &lt;code&gt;.cjs&lt;/code&gt; rather than &lt;code&gt;.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test it out run a command form the terminal like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'nonsense non-valid commit message'&lt;/span&gt; | pnpx commitlint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is asking &lt;code&gt;commitlint&lt;/code&gt; to consider &lt;code&gt;nonsense non-valid commit message&lt;/code&gt; to be a commit message and to check it for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZY9zr7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu2p65f5o4766vd9r7ve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZY9zr7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu2p65f5o4766vd9r7ve.png" alt="SvelteKit Tooling:  Commitlint screenshot show output from commitlint lint with non-valid commit message. Response says subject mustnot be empty and type must not be empty" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will see how to integrate &lt;code&gt;commitlint&lt;/code&gt; into the continuous integration process next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-7-husky"&gt;
  &lt;/a&gt;
  🏋🏽 SvelteKit Tooling: 7. Husky
&lt;/h2&gt;

&lt;p&gt;Husky pulls together a few of the other tools we have already seen.  Essentially it runs git hooks locally, before committing your code.  If you have ever pushed code to an upstream repo only to realise you forgot to format it or didn't save a file with an error in it before committing Husky will get your back.  So, as an example, you can make sure you pass &lt;code&gt;svelte-check&lt;/code&gt; and a host of other things before pushing to your remote repo.  Here's my setup but you can go to town and add a whole lot more.&lt;/p&gt;

&lt;p&gt;To get going install Husky as a dev dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; husky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you can add config files to run at different stages in the continuous integration process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpx &lt;span class="nt"&gt;--no-install&lt;/span&gt; commitlint &lt;span class="nt"&gt;--edit&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm run prettier:check &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pnpm run lint:css
&lt;span class="c"&gt;#pnpm run prettier:check &amp;amp;&amp;amp; pnpm run lint:scss # scss alternative&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm run svelte:check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally install your Husky configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpx husky &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-what-we-learned"&gt;
  &lt;/a&gt;
  🙌🏽 SvelteKit Tooling: What we Learned
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In this post we looked at&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how tooling can be used to streamline the continuous integration process,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;configuration of seven continuous integration tools to work with SvelteKit,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;how Husky can be used ultimately to enforce all of the coding conventions and rules created by other tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do hope there is at least one thing in this article which you can use in your work or a side project. I'm keen to hear what tools you use in your own process and any further recommendations you might have. Drop a comment below with your thoughts.&lt;/p&gt;

&lt;p&gt;You can see an &lt;a href="https://github.com/rodneylab/sveltekit-tooling"&gt;example project with all of this set up on the Rodney Lab Git Hub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 SvelteKit Tooling: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Would you prefer to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>ci</category>
    </item>
    <item>
      <title>Building the perfect automated workflows for  Blockchain's development</title>
      <author>Martin Pham</author>
      <pubDate>Mon, 22 Nov 2021 13:36:10 +0000</pubDate>
      <link>https://dev.to/martinpham/building-the-perfect-automated-workflows-blockchains-development-4p61</link>
      <guid>https://dev.to/martinpham/building-the-perfect-automated-workflows-blockchains-development-4p61</guid>
      <description>&lt;h3&gt;
  &lt;a href="#build-workflow-for-blockchains-development"&gt;
  &lt;/a&gt;
  Build workflow for Blockchain's development
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;TLDR: We were having a bad time with Blockchain smartcontract's development, and fortunately we had found solutions to save our asses. We'd like to share it with you, so maybe it could be useful to you also.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#blockchain-is-fun"&gt;Welcome to the Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problems-with-our-developmentdeployment"&gt;Problems with our development/deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-upgradable-smartcontracts-with-openzeppelin"&gt;Writing Upgradable smartcontracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatic-deployment-with-github-actions-and-workflows"&gt;Automatic deployment to the blockchains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memorize-truffles-migration-process"&gt;Problem with the Truffle's migration process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yaml-file-or-link-to-code"&gt;Our completed workflows&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#blockchain-is-fun"&gt;
  &lt;/a&gt;
  Blockchain is fun!
&lt;/h3&gt;

&lt;p&gt;It's a huge public database (chain of data blocks), which is being shared across many computers. Everyone can query data inside it, or add a new record by sending transactions. Everything is stored historically, so you can trace the changes easily.&lt;br&gt;
With ethereum chains, it's even funnier with SmartContract - a program that runs on chains. Developers can write and compile a program, and upload it into the chain. Then everyone can run it to read its data, update its data with transactions, or even use it to run another program. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: You can use this tool &lt;a href="https://contract.mph.am/"&gt;Smartcontract UI&lt;/a&gt; to interact with smartcontracts easily.&lt;/p&gt;

&lt;p&gt;We were working on many projects based on blockchains, mainly in decentralized finance. Many of them are programs (written with Solidity) that involve managing users' account balance, allowing users to trade their assets, or to stake their assets to the liquidity pools and gain interests. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problems-with-our-developmentdeployment"&gt;
  &lt;/a&gt;
  Problems with our development/deployment
&lt;/h3&gt;

&lt;p&gt;However, we were usually facing a big problem: Smartcontracts in ethereum chains are immutable. It means once you deployed it on the chain, there is no way to change it. It works just like a contract we have in real life: you surely won't change the contract's contents once you signed it, if you want to, you'd need to have another contract. Same in ethereum chains, if we make changes in the contract code, we'd need to deploy it again to a new smartcontract.&lt;/p&gt;

&lt;p&gt;And since a smartcontract has its data, when we deployed to a new smartcontract, we'd need to migrate all data from the old contract to the new one, while keeping support on both contracts until all users moved to the new contract.&lt;/p&gt;

&lt;p&gt;Another problem we were having is the contract's deployment. After finishing the code and passing all tests on the local environment, we rely on someone to deploy it to the test chains so we can test its communication with other contracts. And since the contract's address will be changed each deployment, it's a really big pain for us to update all the addresses on each deployment. &lt;/p&gt;

&lt;p&gt;After the contract's deployment, we have another problem with the interaction with our contracts. We provide ABIs (Application Binary Interface) to other people, so they can use them to interact with our contracts. It's also needed for our team to write applications that interact with contracts, so we'll need to keep them always updated with our deployed contracts.&lt;/p&gt;

&lt;p&gt;SmartContract's development is fun, but its deployment was a pain for us for a long time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#writing-upgradable-smartcontracts-with-openzeppelin"&gt;
  &lt;/a&gt;
  Writing Upgradable smartcontracts with OpenZeppelin
&lt;/h3&gt;

&lt;p&gt;We've decided to improve our deployment process. Thanks to &lt;a href="https://openzeppelin.com/"&gt;OpenZeppelin&lt;/a&gt;, we're now able to upgrade our contracts smoothly. &lt;br&gt;
When we deploy the contract on the first time, OpenZeppelin will create a Proxy Contract, points it to our actual contract, and finally, it deploys all contracts. Later, every time we make changes to the contract's code, OpenZeppelin will deploy it, and points the Proxy Contract to the newly deployed contract, keeping the old contract's state. Now we don't have to worry about the migration between contract's deployments. Our users and devs always connect with the Proxy Contract address, which points to the latest deployed contract.&lt;br&gt;
It was a good change, that helped us during the release process. However, we were still having other problems with the deployment: We'd still need someone to build the contracts and deploy them to the chains. It requires access to our deployer's wallet, and we cannot give the wallet access to everyone in the team.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#automatic-deployment-with-github-actions-and-workflows"&gt;
  &lt;/a&gt;
  Automatic deployment with Github Actions and Workflows
&lt;/h3&gt;

&lt;p&gt;After many tries, we finally integrate our build &amp;amp; deployment process with Github workflows. We also added some tweaks (like caching dependencies for faster build in future, configuring Truffle environment correctly, having wallet's private key in Github's secret,..)&lt;br&gt;
Our deployment is automatic now! Every time we merge features into a development branch, a workflow will be triggered to build the contracts and upload them into the test blockchain. And when they are ready for production, we just need to tag the version. Github will deploy the contracts into the production blockchain.&lt;br&gt;
We also release the contract's built artifact to Github release page every time we release the contracts to production, along with the prerelease of the contract's ABI on each push to the development branches. In this way, our users and devs can always update the contract's ABI quickly and easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" alt="Screenshot" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#memorize-truffles-migration-process"&gt;
  &lt;/a&gt;
  Memorize Truffle's migration process
&lt;/h3&gt;

&lt;p&gt;Everything seems OK, but actually, we're still missing a piece: We use &lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; to cache the Truffle's build. So in the next deployment, we can continue the migration without doing it from the beginning.&lt;br&gt;
However, the cache will be removed after some inactivity time, and when it's removed, or if there is some problem in the cache (cause of a wrongly configured deployment), our migration process will be restarted from the beginning. Therefore, all the proxy contracts will be changed. We will need to notice our users and devs, and migrate all contract's state.&lt;br&gt;
Again, we had to try other approaches, and finally, we found a solution: Saving the Truffle's build on a deployed branch. So for each deployment, instead of taking the previous build from the cache, we will pull it from the deployed branch, and continue with it. It has some more advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Truffle's build will be there always&lt;/li&gt;
&lt;li&gt;We can inspect the Truffle's build if there was any problem with the deployment&lt;/li&gt;
&lt;li&gt;We can also customize the deployed branch to give more informations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" alt="Screenshot" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category-diy-deployments"&gt;
  &lt;/a&gt;
  Submission Category: DIY Deployments
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ActionsHackathon21"&gt;
        ActionsHackathon21
      &lt;/a&gt; / &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain"&gt;
        deploy-upgradable-smartcontract-to-blockchain
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Deploy upgradable smartcontracts to blockchain
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Build documentations&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This project follows the DEV.to &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4" rel="nofollow"&gt;#ActionsHackathon21&lt;/a&gt; hackathon.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Use GitHub Actions and Workflows to build and deploy upgradable smartcontracts into the ethereum blockchains. After its deployment, the contract's ABI will be released, and the artifacts will be saved into a deployed branch.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/testnet.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AauglCxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/testnet.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check the complete workflow here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy contracts to testnet on each push on development branches (&lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain.github/workflows/migrate-to-testnet.yml"&gt;migrate-to-testnet.yml&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deploy contracts to mainnet on each push on tag (&lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain.github/workflows/migrate-to-mainnet.yml"&gt;migrate-to-mainnet.yml&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Actions used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout@v2&lt;/a&gt;&lt;/strong&gt; To checkout the source code from the repository&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; To cache the dependencies, allow us to re use them for future builds&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/marvinpinto/action-automatic-releases"&gt;marvinpinto/action-automatic-releases@latest&lt;/a&gt;&lt;/strong&gt; To release your build to Github Release page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/release.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVVTqy-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/release.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Configurations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can config the branch postfix which holds the development's artifacts with the &lt;code&gt;DEPLOY_BRANCH_POSTFIX&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;You can also configure the development branches which you want to deploy to testnet, with &lt;code&gt;branches&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;To config the blockchain you want to deploy to, use…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;README: &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/README.md"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/README.md&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Workflow file (development): &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-testnet.yml"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-testnet.yml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Workflow file (release): &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-mainnet.yml"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-mainnet.yml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;License: &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/COPYING"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/COPYING&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can config the branch postfix which holds the development's artifacts with the &lt;code&gt;DEPLOY_BRANCH_POSTFIX&lt;/code&gt; variable. &lt;/li&gt;
&lt;li&gt;You can also configure the development branches which you want to deploy to testnet, with &lt;code&gt;branches&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;To config the blockchain you want to deploy to, use the &lt;code&gt;WALLET_SECRET&lt;/code&gt; , &lt;code&gt;RPC&lt;/code&gt;, &lt;code&gt;NETWORK_ID&lt;/code&gt; and &lt;code&gt;CONFIRMATIONS&lt;/code&gt; variables
&lt;strong&gt;Important!&lt;/strong&gt; You should store the wallet secret in GitHub's secret (&lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Secrets&lt;/strong&gt;). On this project, I stored as &lt;code&gt;DEV_WALLET_SECRET&lt;/code&gt; and &lt;code&gt;PROD_WALLET_SECRET&lt;/code&gt; secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpadO24e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/secret.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpadO24e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/secret.png" alt="Screenshot" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flows"&gt;
  &lt;/a&gt;
  Flows
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout@v2&lt;/a&gt;&lt;/strong&gt; to checkout source code from the repository&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/setup-node"&gt;actions/setup-node@v2&lt;/a&gt;&lt;/strong&gt; to setup nodejs&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; to cache dependencies&lt;/li&gt;
&lt;li&gt;Install build dependencies (&lt;code&gt;yarn&lt;/code&gt;, &lt;code&gt;node-gyp&lt;/code&gt;, &lt;code&gt;node-gyp-build&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install dependencies from &lt;code&gt;yarn.lock&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Synchronize previous built artifacts from the deployment branch&lt;/li&gt;
&lt;li&gt;Build and Migrate smartcontracts&lt;/li&gt;
&lt;li&gt;Push new built artifacts into the deployment branch&lt;/li&gt;
&lt;li&gt;Release smartcontracts' JSON (including ABI)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>blockchain</category>
      <category>ethereum</category>
      <category>smartcontract</category>
    </item>
  </channel>
</rss>
