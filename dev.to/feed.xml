<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>New APPS WISE - Games!</title>
      <author>APPS WISE - Games</author>
      <pubDate>Sun, 02 May 2021 02:42:13 +0000</pubDate>
      <link>https://dev.to/appswisegames/new-apps-wise-games-373g</link>
      <guid>https://dev.to/appswisegames/new-apps-wise-games-373g</guid>
      <description>&lt;p&gt;I'm new here and soon I'll be very active :)&lt;br&gt;
&lt;a href="https://store.appswisegames.com/ssl/"&gt;https://store.appswisegames.com/ssl/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>appswise</category>
      <category>games</category>
      <category>c2</category>
      <category>c3</category>
    </item>
    <item>
      <title>npm package `visual-ts`</title>
      <author>Nikola</author>
      <pubDate>Sun, 02 May 2021 00:24:43 +0000</pubDate>
      <link>https://dev.to/zlatnaspirala/npm-package-visual-ts-1hk7</link>
      <guid>https://dev.to/zlatnaspirala/npm-package-visual-ts-1hk7</guid>
      <description>&lt;p&gt;Visual-Ts-Game-Engine Package Link&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/visual-ts"&gt;https://www.npmjs.com/package/visual-ts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live:&lt;br&gt;
&lt;a href="https://codepen.io/zlatnaspirala/pen/NWdZJQJ"&gt;https://codepen.io/zlatnaspirala/pen/NWdZJQJ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;New example repo : &lt;/p&gt;

&lt;p&gt;It is the strarter for &lt;code&gt;visual-ts&lt;/code&gt;&lt;br&gt;
   &lt;a href="https://github.com/zlatnaspirala/visual-ts-examples"&gt;https://github.com/zlatnaspirala/visual-ts-examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class AppConfig extends V.ClientConfig {

  constructor(gameList: any) {
    super(gameList);
    console.info("Make changes on Application Config.");
  }

  /**
     * @description
     * You can use prop from exstended ClientConfig class
     * @name getDrawRefference
     * @returns string
     */
  public getDrawRefference(): string {
    // Do something...
    console.log("Setup draw type")
    // return "diametric-fullscreen"
    // return this.drawReference;
    return "frame"
  }
}

class Demo1 implements V.Interface.IGamePlayModelNoPlayer {

  public gameName: string = "Demo 1 - Add new element";
  public version: number = 1.0;
  public playerCategory = 0x0002;
  public staticCategory = 0x0004;

  public starter: V.Starter;
  public myFirstGamePlayObject: V.Matter.Body | any = undefined;

  constructor(starter: V.Starter) {
    this.starter = starter;
  }

  public attachAppEvents() {
    const root = this;
    root.createMyElements(true);
    root.addGround();
    console.info("App event test");
  }

  public addGround() {
    const newStaticElement: V.Type.worldElement = V.Matter.Bodies.rectangle(
      400,
      550,
      1000,
      90,
      {
        isStatic: true,
        isSleeping: false,
        label: "ground",
        collisionFilter: {
          group: this.staticCategory,
        } as any,
        render: {
          // visualComponent: new TextureComponent("imgGround",[require("./imgs/backgrounds/wall3.png")]),
          sprite: {
            olala: true,
          },
        } as any | Matter.IBodyRenderOptions,
      }
    );

    //  (newStaticElement.render as any).visualComponent.setVerticalTiles(2).
    //    setHorizontalTiles(1);
    this.starter.AddNewBodies([newStaticElement] as V.Type.worldElement);
  }

  public createMyElements(addToScene: boolean) {
    const playerRadius = 50;
    this.myFirstGamePlayObject = V.Matter.Bodies.circle(
      400,
      100,
      playerRadius,
      {
        label: "MYFIRSTOBJECT",
        density: 0.0005,
        friction: 0.01,
        frictionAir: 0.06,
        restitution: 0.3,
        ground: true,
        jumpCD: 0,
        portal: -1,
        collisionFilter: {
          category: this.playerCategory,
        } as any,
        render: {
          fillStyle: "blue",
          sprite: {
            xScale: 1,
            yScale: 1,
          },
        } as any,
      } as Matter.IBodyDefinition
    );
    this.myFirstGamePlayObject.collisionFilter.group = -1;

    // hardcode for now
    this.myFirstGamePlayObject.render.sprite.xScale = 0.2;
    this.myFirstGamePlayObject.render.sprite.yScale = 0.2;

    if (addToScene) {
      this.myFirstGamePlayObject.id = 2;
      this.starter.AddNewBodies(
        this.myFirstGamePlayObject as V.Type.worldElement
      );
      console.info('myFirstGamePlayObject body created from "https://cdn.skypack.dev/dead".');
    }
  }

  protected destroyGamePlayPlatformer() {
    this.starter.destroyGamePlay();
    this.starter.deattachMatterEvents();
  }
}

// Make instance - Run app

const gameInfo = {
  name: "Demo 1h",
  title: "Create game with module visual-ts. ",
};

const gamesList: any[] = [
  gameInfo,
];

let injectedConfig: V.Interface.IClientConfig = new AppConfig(gamesList);
const master = new V.IocSinglePlayerMode(null, injectedConfig);

master.singlton(Demo1, master.get.Starter);
master.get.Demo1.attachAppEvents();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title>8 C#.NET Projects</title>
      <author>Douglas Minnaar</author>
      <pubDate>Sun, 02 May 2021 00:09:26 +0000</pubDate>
      <link>https://dev.to/drminnaar/8-c-net-projects-38li</link>
      <guid>https://dev.to/drminnaar/8-c-net-projects-38li</guid>
      <description>&lt;p&gt;I've recently been busy upgrading and creating a number of projects written in &lt;strong&gt;C#&lt;/strong&gt; using &lt;strong&gt;.NET5 Framework&lt;/strong&gt;. The projects range in difficulty from intermediate to advanced and cover a broad range of topics including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using C# with database tech like &lt;strong&gt;Postgres&lt;/strong&gt; and &lt;strong&gt;MongoDB&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;API examples for &lt;strong&gt;REST&lt;/strong&gt;, &lt;strong&gt;GraphQL&lt;/strong&gt;, and &lt;strong&gt;gRPC&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS&lt;/strong&gt; examples covering services like &lt;strong&gt;DynamoDb&lt;/strong&gt;, &lt;strong&gt;Cognito&lt;/strong&gt;, &lt;strong&gt;S3&lt;/strong&gt;, &lt;strong&gt;SNS&lt;/strong&gt;, and &lt;strong&gt;SQS&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;working with message brokers like &lt;strong&gt;Rabbit MQ&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;setting up your development stack using &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Docker-Compose&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ASP.NET&lt;/strong&gt; and &lt;strong&gt;ASP.NET Identity&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;.NET Entity Framework Core&lt;/li&gt;
&lt;li&gt;working with &lt;a href="https://flywaydb.org/"&gt;Redgate Flyway&lt;/a&gt; to manage database versioning and migrations&lt;/li&gt;
&lt;li&gt;architecture examples like modular monolith, onion architecture, clean architecture etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 8 projects in total and can be summarised as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#noteworx-aspnet"&gt;NoteWorx ASP.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identity-example"&gt;Identity Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#algorithms-and-data-structures"&gt;Algorithms and Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rabbitmq-for-net-developers"&gt;RabbitMQ for .NET Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws-for-net-developers"&gt;AWS for .NET Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mflix-net"&gt;MFlix .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chinook-net"&gt;Chinook .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ranker-net-rest-api-guide"&gt;Ranker .NET (REST API Guide)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#noteworx-aspnet"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/noteworx-aspnetcore"&gt;NoteWorx ASP.NET&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rteb1b5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/116779409-6e905300-aaca-11eb-8071-0fe013a7ac21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rteb1b5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/116779409-6e905300-aaca-11eb-8071-0fe013a7ac21.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/noteworx-aspnetcore"&gt;NoteWorx ASP.NET&lt;/a&gt; is a basic note management web application that has been built using ASP.NET Core, ASP.NET Core Identity, Entity Framework Core, and Postgresql.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;ASP.NET application using Identity&lt;/li&gt;
&lt;li&gt;Shows how to use &lt;em&gt;Gulp&lt;/em&gt; as an asset manager for javascript, css, and fonts etc&lt;/li&gt;
&lt;li&gt;Uses docker, docker-compose to manage stack (Postgres etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/noteworx-aspnetcore"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#identity-example"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/dotnet-identity-example"&gt;Identity Example&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCJS2aCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/116623157-eb6fdf80-a999-11eb-8c1a-32e602da6cd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCJS2aCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/116623157-eb6fdf80-a999-11eb-8c1a-32e602da6cd2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/dotnet-identity-example"&gt;Identity Example&lt;/a&gt; is a project that shows how to use, customise, and configure Identity on Asp.Net Core with different backend stores (postgresql, mssql, sqlite). If you've ever wondered about how to take complete control over the way the Identity database is generated, then this is a good project to use as a guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;Focus on ASP.NET Identity customization&lt;/li&gt;
&lt;li&gt;Includes sample API project that demonstrates how to use &lt;strong&gt;ASP.NET Identity and Jwt Bearer Authentication&lt;/strong&gt;. The API project also demonstrates how to implement refresh tokens.&lt;/li&gt;
&lt;li&gt;Uses docker, docker-compose to manage stack for Postgres, MSSQL&lt;/li&gt;
&lt;li&gt;Uses powershel and bash scripts to automate spinning up and down of various stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-identity-example"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/algorithms-and-data-structures"&gt;Algorithms and Data Structures&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFPsY4-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/134303710/eb049280-a362-11eb-86d1-bb0c08ef19e4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFPsY4-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/134303710/eb049280-a362-11eb-86d1-bb0c08ef19e4" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/algorithms-and-data-structures"&gt;Algorithms and Data Structures&lt;/a&gt; is a compilation of various algorithms and data structures that have been implemented using C# and Javascript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5 and Javascript&lt;/li&gt;
&lt;li&gt;Covers &lt;strong&gt;Bubble Sort&lt;/strong&gt;, &lt;strong&gt;Shell Sort&lt;/strong&gt;, &lt;strong&gt;Selection Sort&lt;/strong&gt;, &lt;strong&gt;Insertion Sort&lt;/strong&gt;, &lt;strong&gt;Merge Sort&lt;/strong&gt;, &lt;strong&gt;Quick Sort&lt;/strong&gt;, &lt;strong&gt;Singly Linked List&lt;/strong&gt;, &lt;strong&gt;Doubly Linked List&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README explaining various algorithms and data structures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/algorithms-and-data-structures"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#rabbitmq-for-net-developers"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/dotnet-rabbitmq"&gt;RabbitMQ for .NET Developers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iCJZ0Xc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114295409-344e1a00-9af9-11eb-87ef-96131e46fdcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iCJZ0Xc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114295409-344e1a00-9af9-11eb-87ef-96131e46fdcf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq"&gt;RabbitMQ for .NET Developers&lt;/a&gt; is a composition of RabbitMQ examples for C# .NET developers. This project has a specific focus on demonstrating how to use &lt;em&gt;RabbitMQ&lt;/em&gt; with &lt;em&gt;C#.NET 5&lt;/em&gt;. This is achieved by providing a collection of practical examples (written in C#.NET 5) that highlight a number of &lt;em&gt;messaging patterns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;Demonstrates the following message patterns:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example1"&gt;One-Way Messaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example2"&gt;Competing Consumers (Worker Queues)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example3"&gt;Publish/Subscribe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example4"&gt;Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example5"&gt;Topics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq/tree/master/Example6"&gt;Headers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README files for each example demonstrating message pattern.&lt;/li&gt;
&lt;li&gt;Accompanied by a "getting started" guide that will help you learn a little more about RabbitMQ&lt;/li&gt;
&lt;li&gt;Manage entire &lt;strong&gt;RabbitMQ&lt;/strong&gt; stack using &lt;strong&gt;Docker&lt;/strong&gt; and &lt;strong&gt;Docker-Compose&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/dotnet-rabbitmq"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#aws-for-net-developers"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/aws-dotnet-examples"&gt;AWS for .NET Developers&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9mPpwVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114672166-f0595000-9d58-11eb-8240-65c0b06493b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9mPpwVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114672166-f0595000-9d58-11eb-8240-65c0b06493b5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples"&gt;AWS for .NET Developers&lt;/a&gt; is a collection of independent .NET projects written in &lt;strong&gt;C# .NET 5&lt;/strong&gt; that demonstrate how to integrate with various &lt;strong&gt;AWS&lt;/strong&gt; services using the &lt;strong&gt;AWS SDK for dotnet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;Demonstrates the following AWS services:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/cognito-mvc-api"&gt;Cognito with ASP.NET API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/cognito-mvc-web"&gt;Cognito with ASP.NET MVC Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/dynamodb-console"&gt;DynamoDb with Console App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/sqs-console"&gt;SQS with Console App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/sns-console"&gt;SNS with Console App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples/tree/master/s3-console"&gt;S3 with Console App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README files for each AWS service example demonstrating how to use the &lt;strong&gt;.NET AWS SDK&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Demonstrates how to use &lt;strong&gt;.NET Secret Manager&lt;/strong&gt; by storing AWS config as "secrets"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/aws-dotnet-examples"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#mflix-net"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/mflix"&gt;MFlix .NET&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXxA8Ik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114293752-d9aec100-9aec-11eb-8b5b-e04477d9dda0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXxA8Ik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/114293752-d9aec100-9aec-11eb-8b5b-e04477d9dda0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/mflix"&gt;MFlix .NET&lt;/a&gt; is a showcase of how to build API's (&lt;strong&gt;REST&lt;/strong&gt;, &lt;strong&gt;gRPC&lt;/strong&gt;, &lt;strong&gt;GraphQL&lt;/strong&gt;) using &lt;strong&gt;C# .NET&lt;/strong&gt;.  I have created a contrived use-case that allows me to demonstrate how to build different API's for different needs. The high-level requirements cater to 3 types of developers as illustrated below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvE7-4Li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/111857121-550ccf00-8994-11eb-99a1-49e052e6c355.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvE7-4Li--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/111857121-550ccf00-8994-11eb-99a1-49e052e6c355.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, the project is based on the following high-level architectural diagram that highlights&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the type of API's being built&lt;/li&gt;
&lt;li&gt;the way in which different API's will be accessed by different types of applications&lt;/li&gt;
&lt;li&gt;the scope of API's (public or private)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4hzi7Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/111857444-58a15580-8996-11eb-8d3f-c3adea46a661.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4hzi7Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/111857444-58a15580-8996-11eb-8d3f-c3adea46a661.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;How to do paging, filtering, and sorting via the API&lt;/li&gt;
&lt;li&gt;Developing with MongoDB and C#&lt;/li&gt;
&lt;li&gt;Demonstrates how to seed a MongoDB database as part of docker-compose stack&lt;/li&gt;
&lt;li&gt;Preparing a local development environment using Docker and Docker-Compose&lt;/li&gt;
&lt;li&gt;Working with MongoDB database&lt;/li&gt;
&lt;li&gt;Working with SEQ as a log server&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README that explains the project in more detail and also how to get started.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/mflix"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#chinook-net"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/chinook"&gt;Chinook .NET&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e36Qhhq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/234649268/c108b300-99e7-11eb-8803-fe1e226e57c3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e36Qhhq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/234649268/c108b300-99e7-11eb-8803-fe1e226e57c3" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/chinook"&gt;Chinook .NET&lt;/a&gt; is project designed to illustrate how to build a &lt;strong&gt;&lt;em&gt;&lt;a href="https://youtu.be/5OjqD-ow8GE"&gt;Modular Monolith&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; using the &lt;strong&gt;&lt;em&gt;&lt;a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/"&gt;Onion Architecture&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; as a guide. The motivation behind this project is to demonstrate an alternative to starting off with Microservices straight away.&lt;/p&gt;

&lt;p&gt;The high-level architecture for this &lt;strong&gt;&lt;em&gt;&lt;a href="https://youtu.be/5OjqD-ow8GE"&gt;Modular Monolith&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; is illustrated as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSjB7czJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/72651214-98ae2680-39e7-11ea-9117-f9a95477aa1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSjB7czJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/72651214-98ae2680-39e7-11ea-9117-f9a95477aa1f.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;3 primary modules&lt;/strong&gt;, where each module has it's own API. Each module should be constrained (though not a hard constraint for practical reasons) to a single schema within a shared database. Each module is based on the &lt;strong&gt;&lt;em&gt;&lt;a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/"&gt;Onion Architecture&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; with influences from &lt;strong&gt;&lt;em&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;. Therefore, each module can be viewed in terms of the following illustration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYEBMMel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/72653239-d2cef680-39ee-11ea-8215-e98386d32637.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYEBMMel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/33935506/72653239-d2cef680-39ee-11ea-8215-e98386d32637.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET5&lt;/li&gt;
&lt;li&gt;Working example of &lt;strong&gt;&lt;em&gt;&lt;a href="https://youtu.be/5OjqD-ow8GE"&gt;Modular Monolith&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Working example of &lt;strong&gt;&lt;em&gt;&lt;a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/"&gt;Onion Architecture&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Demonstrates how to use &lt;strong&gt;&lt;em&gt;&lt;a href="https://github.com/jbogard/MediatR"&gt;MediatR&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Demonstrates how to use &lt;strong&gt;&lt;em&gt;&lt;a href="https://flywaydb.org/"&gt;Redgate Flyway&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; to manage database versioning and migrations&lt;/li&gt;
&lt;li&gt;Demonstrates how to setup a local development stack using Docker and Docker-Compose&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README that goes into more detail about the project and how to get started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/chinook"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#ranker-net-rest-api-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/drminnaar/ranker"&gt;Ranker .NET (REST API Guide)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/1aad52e50ae3e20061f3807c58d168131ad7712e445eacfce9ca5aea37d38577/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f692f68756d317670796b78343074336869323477346b2e706e67" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/1aad52e50ae3e20061f3807c58d168131ad7712e445eacfce9ca5aea37d38577/68747470733a2f2f6465762d746f2d75706c6f6164732e73332e616d617a6f6e6177732e636f6d2f692f68756d317670796b78343074336869323477346b2e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/drminnaar/ranker"&gt;Ranker .NET (REST API Guide)&lt;/a&gt; is a guide with the goal of laying down foundational knowledge that is required when speaking about building REST API's. I decided to backup the theory with a practical example written in &lt;strong&gt;C#.NET5&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST Constraints&lt;/li&gt;
&lt;li&gt;HATEOAS (Hypermedia As The Engine Of Application State)&lt;/li&gt;
&lt;li&gt;Richardson Maturity Model&lt;/li&gt;
&lt;li&gt;REST in Practice (Some practical guidelines)&lt;/li&gt;
&lt;li&gt;Example project (Written in &lt;strong&gt;C# .NET 5&lt;/strong&gt;) called &lt;strong&gt;Ranker&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Demonstrates how to setup a local development stack using Docker and Docker-Compose&lt;/li&gt;
&lt;li&gt;Accompanied by detailed README that goes into more detail about the project and how to get started. The README also forms the basis for the REST API Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Project Page:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drminnaar/ranker"&gt;Find the project with detailed README here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These projects are very much a labour of love. I create these projects so that I have something to point people to when I am explaining topics. I will continue to build on these projects and improve as I find more time to commit. But I would also like to share knowlege about my other love, namely, javascript/typescript. Therefore, I will most likely be building some React frontends for some of these API projects in the future. I'm also keen on demonstrating how to build a Microservices project by implementing services in both Typescript and C#. Also, people have been asking me if I'd consider producing some online videos about content relating to the aforementioned projects. I'm considering the idea, although my biggest concern is being able to make the time 🤷‍♂️&lt;/p&gt;




</description>
    </item>
    <item>
      <title>How To Build An Effective Developer Portfolio</title>
      <author>Ayu Adiati</author>
      <pubDate>Sat, 01 May 2021 23:36:59 +0000</pubDate>
      <link>https://dev.to/adiatiayu/how-to-build-an-effective-developer-portfolio-1ndb</link>
      <guid>https://dev.to/adiatiayu/how-to-build-an-effective-developer-portfolio-1ndb</guid>
      <description>&lt;p&gt;Hello Fellow Codenewbies 👋,&lt;/p&gt;

&lt;p&gt;What is a portfolio? &lt;br&gt;
Do we need to have a portfolio as a developer?&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;don't have&lt;/em&gt; to have a portfolio. But having a portfolio can make us &lt;em&gt;stand out&lt;/em&gt; from those who don't have one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-portfolio"&gt;
  &lt;/a&gt;
  What is a portfolio?
&lt;/h2&gt;

&lt;p&gt;One definition of portfolio:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;: a selection of a student's work (such as papers and tests) compiled over a period of time and used for assessing performance or progress&lt;br&gt;
  &lt;a href="https://www.merriam-webster.com/dictionary/portfolio"&gt;Merriam-Webster&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A developer portfolio is a place to show projects, and to introduce ourselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-developers-want-to-have-a-portfolio"&gt;
  &lt;/a&gt;
  Why do developers want to have a portfolio?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get a job&lt;/strong&gt;&lt;br&gt;
We need to understand that portfolios &lt;em&gt;are not&lt;/em&gt; resumes. They are a supplement to resumes. We use portfolios for recruiters to take a look at our projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build personal branding/online presence&lt;/strong&gt;&lt;br&gt;
A portfolio can show who we really are and what we care about. And by doing that, we are building our own &lt;a href="https://dev.to/adiatiayu/why-developers-need-to-build-personal-brand-3dad"&gt;personal brand&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fun!&lt;/strong&gt;&lt;br&gt;
We use our creativity and try out things to build a portfolio. What would be more fun than building something that lets us be who we are and in the end, we can present it to the world and say, "I built this, and this is me!"&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-to-include-in-the-developer-portfolio"&gt;
  &lt;/a&gt;
  What to include in the developer portfolio?
&lt;/h2&gt;

&lt;p&gt;We need to bear in mind that non-technical people such as recruiters and hiring managers will also see our portfolio. Thus, &lt;strong&gt;first impressions&lt;/strong&gt; count.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-about"&gt;
  &lt;/a&gt;
  1. About
&lt;/h3&gt;

&lt;p&gt;It is the most important section, but sometimes we don't take it seriously. About section is &lt;em&gt;not the same&lt;/em&gt; as our bio.&lt;br&gt;
  The things to include here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WHO are we? WHAT matters to us? WHAT do we do? HOW do we do it?&lt;/li&gt;
&lt;li&gt;Our picture (or avatar) for people to recognize us.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven't done my portfolio. So this would be my homework 😅&lt;br&gt;
But let me share here the rough draft of what I would do in this section.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgouTMtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134268333/0NBMY66P1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgouTMtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134268333/0NBMY66P1.png" alt="About Ayu Adiati.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-projectswork"&gt;
  &lt;/a&gt;
  2. Projects/Work
&lt;/h3&gt;

&lt;p&gt;Be selective of which project(s) that we want to include here and think about &lt;em&gt;quality over quantity&lt;/em&gt;. Don't forget to revisit and clean up our old projects to achieve good quality.&lt;br&gt;
  We'll want to show a range of skills, technologies, and variety. For example a CRUD app, or a Javascript game. Then link the live preview and the codebase.&lt;/p&gt;

&lt;p&gt;Another homework for me to revisit my old projects and clean the code! 😆&lt;br&gt;
  Two projects that I've built with vanilla Javascript that I am proud of are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Guess The Number&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEGMLOWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134446101/FhI8kbTlu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEGMLOWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134446101/FhI8kbTlu.jpeg" alt="guess-hint.jpg"&gt;&lt;/a&gt;&lt;br&gt;
It is a game where users should guess a mystery number between 1 - 30 with some hints. This project is heavy with DOM manipulation.&lt;br&gt;
&lt;a href="https://adiati98.github.io/guess-the-number/"&gt;Click here&lt;/a&gt; for the live preview and &lt;a href="https://github.com/adiati98/guess-the-number"&gt;here&lt;/a&gt; for the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Form With Animated SVG&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCH3z3S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134597070/J_z98WhjP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oCH3z3S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619134597070/J_z98WhjP.jpeg" alt="form with animated svg.jpg"&gt;&lt;/a&gt;&lt;br&gt;
When users click on an input field, it would trigger and animate the SVG. In this project, I played around with DOM Manipulation and animated CSS.&lt;br&gt;
&lt;a href="https://adiati98.github.io/form-with-animated-svg/"&gt;Click here&lt;/a&gt; for the live preview and &lt;a href="https://github.com/adiati98/form-with-animated-svg"&gt;here&lt;/a&gt; for the code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-contact"&gt;
  &lt;/a&gt;
  3. Contact
&lt;/h3&gt;

&lt;p&gt;The contact section could make it easier for people to contact us. We can add our social media links here as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-additional"&gt;
  &lt;/a&gt;
  4. Additional
&lt;/h3&gt;

&lt;p&gt;We can include our skills and tools that we use, also if we have any:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog and technical writing&lt;/li&gt;
&lt;li&gt;Talks and/or awards&lt;/li&gt;
&lt;li&gt;Clients testimonials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We would also want to showcase our other projects by linking our GitHub and/or Codepen. &lt;/p&gt;

&lt;p&gt;So now we know what we need to create an effective portfolio, we can start to build one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start-building-the-portfolio"&gt;
  &lt;/a&gt;
  How to start building the portfolio?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build it with whatever tech works for us&lt;/strong&gt;.&lt;br&gt;
We can use WordPress, or static sites such as Gatsby, Jekyll, or Eleventy. Or we can even build it with only HTML and CSS because, why not? 😄&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't be afraid to use templates&lt;/strong&gt;.&lt;br&gt;
Backend developers usually don't work with UI. Or, as a frontend developer, maybe designing is not our strength. In that case, don't spend so much time thinking about how to design the portfolio. Use a template and tweak it to make it our own.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;After knowing what it takes to create an efficient portfolio for developers, let's build it! &lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! 😊&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;
This post is written based on &lt;a href="https://twitter.com/anniebombanie_"&gt;Annie 🦄⚡&lt;/a&gt;'s talk, &lt;a href="https://www.youtube.com/watch?v=F09TCltMhes&amp;amp;t=816s"&gt;Building an effective developer portfolio&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>What is really the difference between Cookie, Session and Tokens that nobody is talking about ?.</title>
      <author>nshimiye_emmy</author>
      <pubDate>Sat, 01 May 2021 23:32:07 +0000</pubDate>
      <link>https://dev.to/dev_emmy/what-is-really-the-difference-between-cookie-session-and-tokens-when-it-comes-to-authentication-4164</link>
      <guid>https://dev.to/dev_emmy/what-is-really-the-difference-between-cookie-session-and-tokens-when-it-comes-to-authentication-4164</guid>
      <description>&lt;p&gt;To understand the differnece between cookies,sessions and tokens we need to get back on the basis, let's say you want to login to your bank account and you are provided with login screen where you can input your username and password and when you hit the submit button your username and password goes to the bank server.&lt;/p&gt;

&lt;p&gt;Then the server need to verify that you are really who you claim to be, so the bank will check against the database to see if your credentials match and if everything looks good the server will return your account overview page but will also create a session in the database with your login event and gives back to you the session_id inform of a cookie, in other words you have exchanged your username and password for this cookie containing the seesion_id, You send your username and password and then you recieve a cookie with a session_id. So the server will store the session information in the database while you will only have the session_id in the cookie which is stored in the file system of your computer, the session_id is randomly generated so it would be hard to guess, and when you logout, the session will be deleted on the server side but also the server will instruct your browser to delete the cookie containing the session_id as well.&lt;/p&gt;

&lt;p&gt;Next time when you login and you tend to request a page, your browser will automatically send a cookie containing a session_id which the server will check to see if it is still valid.It is essential to know that the next time your username and password are nolonger required in order to identify you.&lt;/p&gt;

&lt;p&gt;Think of a cookie like your Gym_membership_card, it stores your membershipID, additional with other details and when you scan it at the entry, it checks if your membership is still valid and let's you in. So as like with your gym card, a cookie with your session_id only works with a specific website, like you can not use your gym card to enter office building forexample hte same goes to your cookie, you can not use it log into another different website.&lt;/p&gt;

&lt;p&gt;So bank server will keep the session active as long as you keep interacting with the server, if for sometimes you are inactive and after that you visit a new page, the server will notice this period of inactivity and prompt you to provide your username and password again as a security measure.&lt;br&gt;
So the approach mentioned above is called a cookie-based authentication.&lt;/p&gt;

&lt;p&gt;Accordingly this approach used a session on the server to handle the authentication.The cookie is only a medium used to transport the sessionID and it is used because it is convinient, the browser will always send a cookie with every request. The same goes with membership_card, It is just convinient to have a card instead of showing you ID everytime but you can probably load the card on your phone and use your phone to get in, so the storage has changed but the concept remains the same, I mean in this case the bank stores the session information on the server side and you cannot see the contents of it but at the same time it can store othe information on the client side on your browser using another cookie forexample: which was the lastpage you visited or what is your preffered font-size or color or anyother less sensitive information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-servers-does-not-store-alot-of-information-in-the-cookies-"&gt;
  &lt;/a&gt;
  WHY SERVERS DOES NOT STORE ALOT OF INFORMATION IN THE COOKIES ?
&lt;/h2&gt;

&lt;p&gt;But let's talk about why server doesn't store alot of information in the cookies, this is because the cookies cannot be trusted as they are coming from the client, this is why servers prefer to work with their databases where ideally only valid infromation exists.&lt;/p&gt;

&lt;p&gt;An alternative to this is to store information on the client and to sign it, in this scenario anyone holding the signature can quickly check if the data was manipulated or not and one way to do this is to use JSON WEB TOKENS, so basically cookie-based authentication has worked really well for many years but it is slowly becoming outdated atleast in some cases.&lt;/p&gt;

&lt;p&gt;Let's say now that you want to install an app on your phone which can help you with your financies and help keep track of your spendings using your bank account information, and what you don't want to do is to give your username and password to this app which is not associated with your bank, in this case your bank will redirect you to your bank account you will give in your username and password and your bank will ask you "hey John would you like to give this app access to your transactions?" and if you click yes the app will receive a token granting access to your transactions but the app will only view transactions, it will not be able to wire transfers or to see other details which you would normally be able to see when you login in your bank account. This token is like a randomly generated password if you would wish to say, it like when you we're at the hotel and you get a 1 day wifi password. Am sure you might have seen a similar procedure to this approach anytime you have used Facebook, Google or MicroSoft to grant information for your user profile to a third-party website.&lt;br&gt;
So in this exchange you never exchange you username and password,  if you later want you can easily revoke access to your bank account by  invalidating the token that was generated. So one of the most commonly used protocols for such scenario's are both openID Connect but also JON WEB TOKENS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-you-are-probably-wondering-what-is-the-difference-between-a-token-and-a-session-stored-in-a-cookie"&gt;
  &lt;/a&gt;
  SO YOU ARE PROBABLY WONDERING WHAT IS THE DIFFERENCE BETWEEN A TOKEN AND A SESSION STORED IN A COOKIE:
&lt;/h2&gt;

&lt;p&gt;The difference is that tokens are typically following a standard while sessions are implemented as needed by the server.&lt;br&gt;
Additionally, tokens tend not to need a session on the server but they may have one.&lt;/p&gt;

&lt;p&gt;In the case of JWT tokens, the token contain the session information as well, it contains actual data about you as a user.&lt;br&gt;
When using tokens it is essential to notice that now the interaction typically involves multiple parties that may or may not trust one another. So you trust your bank with your bank login{username and password} but you may not trust this third-party app that you found in the AppStore&lt;/p&gt;

&lt;p&gt;Another difference is that a token has a limited lifetime and a new token needs to be generated once it expires, the technical term is "refreshed"&lt;/p&gt;

&lt;p&gt;A token can also grant access to a subset of data a particular user or entity has, eg: you have only granted access to your transactions but not to other information.&lt;/p&gt;

&lt;p&gt;Most of the time tokens are being sent using HTTP headers and not cookies, the reason for that is nowadays many interactions happen out of browsers for-example from apps on your phone and it simply does not make sense to use cookies for that.&lt;/p&gt;

&lt;p&gt;"Cookies are sent as HTTP headers but the browsers handles them differently than the other headers"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;So both session-based/cookie-based and token-based approaches are widespread and typically they are used in parallel for-example a session/cookie based approach is deployed when using the website but token-based approach is preferred when using the app from the same service. So it is essential to understand how both work.&lt;/p&gt;

&lt;p&gt;I hope that was useful and now are able to differentiate between cookies, sessions and tokens.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I Set Up a GitHub Workflow to Automatically Lint and Test My Vue Project on Push</title>
      <author>Jason F </author>
      <pubDate>Sat, 01 May 2021 22:58:49 +0000</pubDate>
      <link>https://dev.to/jasonf/how-i-automatically-lint-and-test-my-vue-project-on-push-in-github-4nnh</link>
      <guid>https://dev.to/jasonf/how-i-automatically-lint-and-test-my-vue-project-on-push-in-github-4nnh</guid>
      <description>&lt;p&gt;I've been learning Vue.js in my spare time. I've been using this &lt;a href="https://github.com/JasonFritsche/weather-vue"&gt;weather forecast app&lt;/a&gt; that I created as a sandbox for learning Vue. As you can see in the repo, I documented some goals that I have for this project. One of those goals is to write unit tests using Jest. Today I created a simple GitHub Workflow that will automatically run my unit tests as well as lint anytime I push to my repo. Today I'll share this workflow with you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-workflow"&gt;
  &lt;/a&gt;
  The Workflow
&lt;/h1&gt;

&lt;p&gt;Below is the GitHub Workflow that I created that lints and tests my Vue.js CLI project on push:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Unit Tests and Lint Files&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;on"&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;push&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;unit_test-lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
              &lt;span class="s"&gt;npm ci&lt;/span&gt;
              &lt;span class="s"&gt;npm run build&lt;/span&gt;
              &lt;span class="s"&gt;npm run test:unit&lt;/span&gt;
              &lt;span class="s"&gt;npm run lint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These twelve lines of YAML serve as a gatekeeper of sorts. Of course I can build, run my unit tests, and lint locally before I push, but what if I forget. What if I have a contributor that forgets? &lt;/p&gt;

&lt;p&gt;There is nothing inherently 'Vue.js' about this workflow. You could plug it in to other JavaScript projects. You would just need to make sure the scripts that you run are defined in your projects &lt;code&gt;package.json&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;Let's break down the commands used in the &lt;code&gt;run&lt;/code&gt; key. &lt;/p&gt;

&lt;p&gt;First of all, I'm using a pipe (|) operator to specify multiple commands. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first command, &lt;code&gt;npm ci&lt;/code&gt;, per the &lt;a href="https://preview-docs.npmjs.com/cli-commands/npm-ci"&gt;docs&lt;/a&gt;, "is similar to &lt;code&gt;npm install&lt;/code&gt;, except it's meant to be used in automated environments such as test platforms, continuous integration, and deployment -- or any situation where you want to make sure you're doing a clean install of your dependencies."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm run build&lt;/code&gt; is a script that's defined in my project's &lt;code&gt;package.json&lt;/code&gt; that runs &lt;code&gt;vue-cli-service build&lt;/code&gt;. I run this command before I test and lint...just to make sure it will build. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm run test:unit&lt;/code&gt; runs &lt;code&gt;vue-cli-service test:unit&lt;/code&gt;. This is the command that runs my unit tests. If any of the unit tests fail, the workflow will fail, and that PR definitely ain't getting merged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;npm run lint&lt;/code&gt; runs &lt;code&gt;vue-cli-service lint&lt;/code&gt;. Similar to the build and unit tests commands, if linting fails, the workflow will fail.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement a Workflow in your GitHub project, you need to first click on the &lt;strong&gt;Actions&lt;/strong&gt; tab. Once in the &lt;strong&gt;Actions&lt;/strong&gt; tab, click the &lt;strong&gt;New Workflow&lt;/strong&gt; button. From there, click the &lt;strong&gt;set up a workflow yourself&lt;/strong&gt; link. You'll see an editor with some YAML inside of it. Once you get your workflow created, just click the &lt;strong&gt;Start Commit&lt;/strong&gt; button. You'll be given the option to commit to your main/master branch, or create a new branch. You can pick whichever works for you, I personally choose to create a new branch.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I've used GitHub Actions/Workflows here and there, but am still pretty much a noob. I found the &lt;a href="https://resources.github.com/whitepapers/GitHub-Actions-Cheat-sheet/"&gt;GitHub Actions Cheat Sheet&lt;/a&gt; and the &lt;a href="https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions"&gt;Intro to GitHub Actions&lt;/a&gt; to be very helpful in gaining a better understanding of GitHub Actions/Workflows.&lt;/p&gt;

&lt;p&gt;I'm still a bit confused on when to call it an Action vs a Workflow. If you can ELI5 in the discussion below, that would be helpful.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>CSS roadmap - CSS Concepts you will use everyday.</title>
      <author>Benjamin Thorpe</author>
      <pubDate>Sat, 01 May 2021 22:55:34 +0000</pubDate>
      <link>https://dev.to/benjithorpe/css-roadmap-css-concepts-you-will-use-everyday-7m6</link>
      <guid>https://dev.to/benjithorpe/css-roadmap-css-concepts-you-will-use-everyday-7m6</guid>
      <description>&lt;p&gt;Hello Everyone!!&lt;br&gt;
These are the CSS concepts I think everyone should know to be comfortable using and designing anything with CSS.&lt;/p&gt;

&lt;p&gt;I will also leave links to some resources below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-the-basics-imho"&gt;
  &lt;/a&gt;
  Let's start with the basics (IMHO)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#formatting-text"&gt;
  &lt;/a&gt;
  Formatting text
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;changing text colors&lt;/li&gt;
&lt;li&gt;changing text size&lt;/li&gt;
&lt;li&gt;style a text (italic, bold, ...etc)&lt;/li&gt;
&lt;li&gt;spacing letters or words &lt;em&gt;(&lt;code&gt;letter-spacing&lt;/code&gt; &amp;amp; &lt;code&gt;word-spacing&lt;/code&gt;)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;changing capitalization (uppercase, lowercase, small-caps...etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#changing-lists"&gt;
  &lt;/a&gt;
  Changing lists
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;removing bullet points&lt;/li&gt;
&lt;li&gt;changing the default bullet points&lt;/li&gt;
&lt;li&gt;using roman numbers in lists&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;color specificity &lt;em&gt;(very important to know)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;background and foreground color&lt;/li&gt;
&lt;li&gt;opacity&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backgrounds"&gt;
  &lt;/a&gt;
  Backgrounds
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;background images&lt;/li&gt;
&lt;li&gt;gradients&lt;/li&gt;
&lt;li&gt;clipping the background&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also learn about &lt;strong&gt;Pseudo-Element/Class&lt;/strong&gt; after background, or you can wait after the box model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#now-to-the-advance-basics"&gt;
  &lt;/a&gt;
  Now to the Advance Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#box-model"&gt;
  &lt;/a&gt;
  Box Model
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;padding, margin and border&lt;/li&gt;
&lt;li&gt;box shadows&lt;/li&gt;
&lt;li&gt;display types &lt;em&gt;(&lt;code&gt;inline&lt;/code&gt;, &lt;code&gt;inline-block&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;,...etc)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;block-level and inline elements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#positioning"&gt;
  &lt;/a&gt;
  Positioning
&lt;/h3&gt;

&lt;p&gt;Styles with only colors and good fonts, are great. But without positioning, they are terrible to the eyes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;positions (&lt;code&gt;absolute&lt;/code&gt;, &lt;code&gt;relative&lt;/code&gt;, &lt;code&gt;sticky&lt;/code&gt;, &amp;amp; &lt;code&gt;fixed&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;floats&lt;/li&gt;
&lt;li&gt;normal flow of elements&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Always try to use position no matter how small. &lt;code&gt;floats&lt;/code&gt; are hardly used these days, they are dying if not already.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#now-to-intermediate"&gt;
  &lt;/a&gt;
  Now to Intermediate
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#flexbox"&gt;
  &lt;/a&gt;
  Flexbox
&lt;/h3&gt;

&lt;p&gt;Learn how flex affects the container and children, when and how to use them efficiently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display: flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;center text/elements with &lt;code&gt;justify-content&lt;/code&gt; or &lt;code&gt;align-items&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-grid-or-grid"&gt;
  &lt;/a&gt;
  CSS Grid or Grid
&lt;/h3&gt;

&lt;p&gt;They are much harder to learn than Flexbox, but they can do what Flexbox does and more. Use both for their correct use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display: grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;grid-gap&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repeat()&lt;/code&gt;, &lt;code&gt;minmax()&lt;/code&gt; and grid units - fractions &lt;em&gt;(fr)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#responsive-web-design-rwd"&gt;
  &lt;/a&gt;
  Responsive Web Design (RWD)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;media queries&lt;/li&gt;
&lt;li&gt;choose good break points&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#transitions-and-animations-the-fun-css"&gt;
  &lt;/a&gt;
  Transitions and Animations &lt;em&gt;(the fun CSS)&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;transform&lt;/li&gt;
&lt;li&gt;transitions&lt;/li&gt;
&lt;li&gt;translate&lt;/li&gt;
&lt;li&gt;skew&lt;/li&gt;
&lt;li&gt;keyframe animation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Everything else that comes after these are features to boost productivity and adds more cool features to your skills and designs. Like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;imports, replacing images, feature detection,...etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to add anything I might have missed, and please leave your comments below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/"&gt;CSS Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/learn/responsive-web-design/basic-css/"&gt;FreeCodeCamp CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/Css/"&gt;W3School&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learntocodewith.me/getting-started/topics/css/"&gt;Learn to code with me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Software Engineer Vs Data Engineer - Which Position Is Right For You?</title>
      <author>SeattleDataGuy</author>
      <pubDate>Sat, 01 May 2021 22:13:42 +0000</pubDate>
      <link>https://dev.to/seattledataguy/software-engineer-vs-data-engineer-which-position-is-right-for-you-2hah</link>
      <guid>https://dev.to/seattledataguy/software-engineer-vs-data-engineer-which-position-is-right-for-you-2hah</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ffstop?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fotis Fotopoulos&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/software?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#which-career-is-right-for%C2%A0you"&gt;
  &lt;/a&gt;
  Which Career Is Right For You?
&lt;/h4&gt;

&lt;p&gt;Software engineer vs. data engineer. People outside these professions are often confused about the differences between these experts. They may think these are two different names for the same thing: a programming expert. Of course, the duties of each engineer type are different, but their roles are similar enough to confuse people who are in the industry as well.&lt;/p&gt;

&lt;p&gt;If you are a new data engineer, you may be confused yourself. What exactly separates you from a software engineer? The answer is not a simple one. In fact, you can honestly say "It depends on the circumstances." While there are tangible differences, the two positions frequently perform some of the same duties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-it-so-challenging-to-compare-a-data-engineer-vs-a-software-engineer"&gt;
  &lt;/a&gt;
  Why Is It So Challenging to Compare a Data Engineer vs. a Software Engineer?
&lt;/h3&gt;

&lt;p&gt;Since people often ask about the differences between a data engineer and a software engineer, you should have an answer. These are two separate careers, so having a definition should not be difficult, you may think. In reality, discussing the differences is challenging because their duties often overlap. On any given day, you can find a software engineer working with data concepts and a data engineer writing code.&lt;/p&gt;

&lt;p&gt;However, this type of overlap is common in many industries, including education. Think about school administrators versus classroom teachers. You wouldn't be shocked to find a principal delivering a lesson or a teacher dealing with discipline issues. But you would understand that the focus of their jobs differs. The principal's focus is on administration issues and the teacher delivers lessons and manages the classroom. Software and data engineers have a different daily focus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#different-types-of-data-engineers"&gt;
  &lt;/a&gt;
  Different Types of Data Engineers
&lt;/h3&gt;

&lt;p&gt;Data engineers are not all the same. In fact, you will find at least two main types of data engineer: A data engineer who is really a software engineer with a data focus and a BI developer type of data engineer.&lt;/p&gt;

&lt;p&gt;The former data engineer does more than write code for data pipelines. If you fit this category, you may also develop &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=105s"&gt;logging and monitoring systems&lt;/a&gt; that manage the data pipelines, tasks that are more on the software engineering side.&lt;/p&gt;

&lt;p&gt;If you are the &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=529s"&gt;latter&lt;/a&gt; data engineer type, you will probably use more Dragon Drop and Airflow coding because others have already developed the infrastructure. Instead, you are often parameterizing data pipelines and completing the tasks they need to run.&lt;/p&gt;

&lt;p&gt;Of course, these data engineer categories can also overlap depending on your employer and changing circumstances. Data engineers need to be flexible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-data-engineers-solve-problems-vs-software-engineers-solve%C2%A0problems"&gt;
  &lt;/a&gt;
  How Data Engineers Solve Problems vs. Software Engineers Solve Problems
&lt;/h3&gt;

&lt;p&gt;Data engineers and software engineers may not approach their duties in the same way. If you are a data engineer, you probably take a different approach to &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=236s"&gt;problem-solving&lt;/a&gt; than a software engineer does. Often, you can see these differences in where the engineer places their logic.&lt;/p&gt;

&lt;p&gt;Software engineers like to have one place for all logic so they do not have to add extra logic layers downstream. They like things upfront to simplify the process.&lt;/p&gt;

&lt;p&gt;In contrast, if you are a data engineer, you probably like to put more logic on the SQL side. This preference has to do with your skill set. A data engineer needs to develop categories in order to map data from different suppliers. You must categorize so you can simplify naming conventions and mapping.&lt;/p&gt;

&lt;p&gt;A data engineer will also rely on tables and SQL, while a software engineer will lean on Python, etc. Despite these innate preferences, as a data engineer, you should put your logic upstream as far as possible in order to reduce errors. Adding layers of logic as you go can become needlessly complex and make it vulnerable to problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differences-in%C2%A0salary"&gt;
  &lt;/a&gt;
  Differences in Salary
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=361s"&gt;salary edge&lt;/a&gt; usually goes to the software engineer, something that is obviously not popular with you and others in the profession. This difference is most common in larger companies where software engineers may earn as much as 40% more than a data engineer. However, in smaller companies, the salary difference may be smaller since the job duties may overlap more. In reality, they may not care that much about the differences in engineer definitions. Your salary will depend on what you give the company more than what your title is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skill-sets-for-data-engineers-vs-software-engineers"&gt;
  &lt;/a&gt;
  Skill Sets for Data Engineers vs. Software Engineers
&lt;/h3&gt;

&lt;p&gt;Data engineers and software engineers are definitely not the same. The &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=405s"&gt;skill sets&lt;/a&gt; for data engineers do differ from those of software engineers although some skills are needed in both professions. Companies that rely on SQL may value the data engineer more since you are much stronger in this area. As a data engineer, you have honed your SQL skills since you are continually modeling, structuring, and manipulating data. Software engineers are weaker here since SQL generally doesn't affect their jobs as much. Their focus is usually on functions such as insert, delete, and update which do not require as much in-depth SQL knowledge. You have a definite career advantage in this area.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%80%8Bwhat-do-other-people-say-about-software-engineers-vs-data-engineers"&gt;
  &lt;/a&gt;
  ​What Do Other People Say About Software Engineers vs. Data Engineers
&lt;/h3&gt;

&lt;p&gt;Some experts try to put a stricter &lt;a href="https://www.youtube.com/watch?v=0wjngjhmtJA&amp;amp;t=488s"&gt;definition&lt;/a&gt; on software engineers and data engineers and see fewer overlapping skills. They may base their conclusions on what coding languages each engineer type uses and on other criteria that really do not hold up. For instance, while software engineers might use C# more often, data engineers certainly use it in their duties, too. There is no point in creating artificial boundaries between the two careers. The job definitions should be based on reality and not theory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The duties of data engineers and software engineers overlap, especially in smaller companies. But there are tangible differences between the two. For instance, data engineers generally work with Dragon Drop coding and data visualization. You will probably be coding but not nearly as much as a software engineer.&lt;/p&gt;

&lt;p&gt;But as a data engineer, you can lean more toward a software engineer's role and end up doing lots of data pipeline coding. You will not be dealing with many infrastructure and core data layers, however.&lt;/p&gt;

&lt;p&gt;You may be a data engineer who focuses on BI work and modeling and not software engineering. In that case, you will be the more traditional data engineer who moves data from point A to point B. You will be concerned with data warehousing, ETLs, ELTs, and data lakes. And with the many advanced software programs out now, you simply will not have to work with as much coding.&lt;/p&gt;

&lt;p&gt;In larger companies, data engineers focus on data pipelines, but in smaller businesses, data engineers do more software engineering in order to develop these pipelines. Also, you will often place your logic in code on the SQL side, while software engineers place it far upstream.&lt;/p&gt;

&lt;p&gt;In short, your duties as a data engineer vs. software engineer largely depend on your employer.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you want to read more about data consulting, big data, and data science, then click below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=6RiA_Qur2yo&amp;amp;t=1s"&gt;Realities Of Being A Data Engineer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/developing-a-data-analytics-strategy-for-small-businesses-and-start-ups/"&gt;Developing A Data Analytics Strategy For Small Businesses And Start-ups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=X6-VNKe3XVM&amp;amp;t=6s"&gt;5 SQL Concepts You Need To Know Before Your Next Data Science Or Data Engineering Interview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/17-questions-you-need-to-ask-about-your-data-strategy/"&gt;How To Improve Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VjlzuUzYJYM"&gt;What Is A Data Warehouse And Why Use It&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logitanalytics.com/5-mistakes-that-are-ruining-your-data-driven-strategy-and-costing-you/"&gt;Mistakes That Are Ruining Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/5-great-libraries-manage-big-data-with-python/"&gt;5 Great Libraries To Manage Big Data With Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=D1V6t--9tt8&amp;amp;t=7s"&gt;What Is A Data Engineer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>database</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Javascript Array Crash Course</title>
      <author>Terry Threatt</author>
      <pubDate>Sat, 01 May 2021 21:40:58 +0000</pubDate>
      <link>https://dev.to/terrythreatt/javascript-array-crash-course-5a34</link>
      <guid>https://dev.to/terrythreatt/javascript-array-crash-course-5a34</guid>
      <description>&lt;p&gt;When we develop programs for people to use in Javascript, We need to take advantage of data structures. These structures hold values of many types including strings, numbers, and objects. &lt;/p&gt;

&lt;p&gt;One of the most common data structures that you will come across is the Array data structure. Mastering Arrays will put you in great shape to build useful programs as they are also used to build complex and abstract data structures as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-array-data-type"&gt;
  &lt;/a&gt;
  The Array data type
&lt;/h3&gt;

&lt;p&gt;Arrays hold many values of any data type. The structure is identified by a sequential list of values that can be accessed through a numbered index. &lt;/p&gt;

&lt;p&gt;This helps to make it easy to traverse through this index very easily. Arrays are considered objects in Javascript which means they are called by reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// our first array&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tesla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="c1"&gt;// is this an array? &lt;/span&gt;

&lt;span class="c1"&gt;// isArray() is a helpful method to prove an Array&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: true &lt;/span&gt;

&lt;span class="c1"&gt;// How many elements are in the array? &lt;/span&gt;
&lt;span class="c1"&gt;// .length will return the element count&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#working-with-arrays"&gt;
  &lt;/a&gt;
  Working with Arrays
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Creating Arrays&lt;/span&gt;
&lt;span class="c1"&gt;// There are two ways to create arrays&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Array literal: This is the recommended way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Array constructor&lt;/span&gt;


&lt;span class="c1"&gt;// Creating Array Elements&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;primeNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// .push() - Adds new elements to the end of the array&lt;/span&gt;
&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [2, 3, 5, 7, 11, 13]&lt;/span&gt;

&lt;span class="c1"&gt;// Accessing Arrays &lt;/span&gt;

&lt;span class="c1"&gt;// You can find array values through bracket notation: &lt;/span&gt;
&lt;span class="c1"&gt;// Arrays a zero-based indexes &lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// return: 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// return: 11&lt;/span&gt;

&lt;span class="c1"&gt;// Changing Array Elements&lt;/span&gt;
&lt;span class="c1"&gt;// We can update an element with bracket notation&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [2, 3, 5, 7, 11, 13]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// return 2&lt;/span&gt;

&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// return 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [1, 3, 5, 7, 11, 13]&lt;/span&gt;


&lt;span class="c1"&gt;// Deleting Array Elements&lt;/span&gt;
&lt;span class="c1"&gt;// .pop() - removes the last element in array&lt;/span&gt;

&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// return: 13&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;primeNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [1, 3, 5, 7, 11]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h4&gt;

&lt;p&gt;Here is a list of common array methods &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#arrayprototypeshift"&gt;
  &lt;/a&gt;
  Array.prototype.shift()
&lt;/h6&gt;

&lt;p&gt;Removes the first element from the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// return: red&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: ["red"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#arrayprototypeunshift"&gt;
  &lt;/a&gt;
  Array.prototype.unshift()
&lt;/h6&gt;

&lt;p&gt;Adds an element to the end of the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apples&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oranges&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grapes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: ["bananas", "apples", "oranges", "grapes"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#arrayprototypesort"&gt;
  &lt;/a&gt;
  Array.prototype.sort()
&lt;/h6&gt;

&lt;p&gt;Sorts the elements for the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [22, 33, 44]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#arrayprototypefilter"&gt;
  &lt;/a&gt;
  Array.prototype.filter()
&lt;/h6&gt;

&lt;p&gt;Creates a new filtered array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;legalAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;legalAge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return: [22, 43]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#arrayprototypeforeach"&gt;
  &lt;/a&gt;
  Array.prototype.forEach()
&lt;/h6&gt;

&lt;p&gt;Allows you to perform an operation to each element in the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baseball&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;basketball&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;football&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;favSport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sport&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`My favorite sport is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;sport&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// return: My favorite sport is baseball.&lt;/span&gt;
&lt;span class="c1"&gt;// return: My favorite sport is basketball.&lt;/span&gt;
&lt;span class="c1"&gt;// return: My favorite sport is football.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loops-with-arrays"&gt;
  &lt;/a&gt;
  Loops with Arrays
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evenNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evenNums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;evenNums&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;findEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// return [24, 36, 66]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-chat-about-arrays"&gt;
  &lt;/a&gt;
  Let's Chat About Arrays
&lt;/h3&gt;

&lt;p&gt;Arrays are a key data structure to know and I hope this crash course was helpful in showing how to work Arrays. If you enjoyed this post feel free to leave a comment about your thoughts and experiences with Arrays. &lt;/p&gt;

&lt;p&gt;Happy Coding,&lt;br&gt;
Terry Threatt&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>ESM doesn't need to break the ecosystem</title>
      <author>Benjamin E. Coe</author>
      <pubDate>Sat, 01 May 2021 21:17:07 +0000</pubDate>
      <link>https://dev.to/bcoe/esm-doesn-t-need-to-break-the-ecosystem-4p8b</link>
      <guid>https://dev.to/bcoe/esm-doesn-t-need-to-break-the-ecosystem-4p8b</guid>
      <description>&lt;p&gt;&lt;em&gt;tldr; ECMAScript modules do not need to represent a hard break for the JavaScript ecosystem. This post outlines an approach that can be taken by library authors for supporting a gradual migration.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;For the last decade, folks writing JavaScript with npm dependencies have grown accustomed to &lt;a href="https://en.wikipedia.org/wiki/CommonJS"&gt;CommonJS syntax&lt;/a&gt;. Writing code that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yargs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ECMAScript modules introduce a &lt;a href="https://tc39.es/ecma262/#prod-Module"&gt;new syntax for importing dependencies&lt;/a&gt;, standardized by TC39 (&lt;em&gt;the Technical Committee that oversees the JavaScript standard&lt;/em&gt;). The new syntax looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;yargs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yargs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with the syntactic changes, there are other underlying differences between ESM and CommonJS which make the systems incompatible (see: &lt;a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1"&gt;"Node Modules at War: Why CommonJS and ES Modules Can’t Get Along"&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;A particularly important distinction is that,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ESM, the module loader runs in asynchronous phases. In the first phase, it parses the script to detect calls to import and export without running the imported script. &lt;br&gt;
&lt;strong&gt;- &lt;a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1"&gt;Dan Fabulich&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If library authors have written code like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cachedModule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cachedModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cachedModule&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;cachedModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;optional-dependency&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it will need need to be rewritten when migrating to ESM, because the module loader is no longer synchronous.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-in-migrating-to-esm"&gt;
  &lt;/a&gt;
  Challenges in migrating to ESM
&lt;/h2&gt;

&lt;p&gt;As alluded to in the &lt;em&gt;Background&lt;/em&gt; section, migrating a library to ESM can be a challenge:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You need to switch all of your &lt;code&gt;require&lt;/code&gt; statements to &lt;code&gt;import&lt;/code&gt; statements.&lt;/li&gt;
&lt;li&gt;You may need to restructure chunks of your codebase, if you're using lazy &lt;code&gt;require&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;Many of your dependents and dependencies may have not yet made the switch to ESM.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I see &lt;strong&gt;#3&lt;/strong&gt; as the biggest pain point that the JavaScript community will face during the awkward transitional phase from CommonJS to ESM.&lt;/p&gt;

&lt;p&gt;There are benefits to migrating to ECMAScript modules, e.g., the ability to deliver code that runs on multiple JavaScript runtimes without a build step (&lt;em&gt;Deno, modern web-browsers, Node.js&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;However, for foundational libraries in the ecosystem, there's a significant risk associated with being an ESM "first mover". Library authors face the danger of splitting their userbase, and receiving a constant barrage of pressure to backport to previous CommonJS releases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dual-cjsesm-modules-a-way-to-avoid-breaking-the-ecosystem"&gt;
  &lt;/a&gt;
  Dual CJS/ESM Modules (&lt;em&gt;a way to avoid breaking the ecosystem&lt;/em&gt;).
&lt;/h2&gt;

&lt;p&gt;In their article &lt;a href="https://blog.sindresorhus.com/get-ready-for-esm-aa53530b3f77"&gt;"Get Ready For ESM"&lt;/a&gt;, Sindre Sorhus mentions an alternate approach to the hard switch to pure ESM modules which they themselves advocate, &lt;em&gt;&lt;a href="https://nodejs.org/api/packages.html#packages_dual_commonjs_es_module_packages"&gt;"Dual CommonJS/ES module packages"&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I'm empathetic to Sindre's argument for &lt;em&gt;ripping off the bandaid&lt;/em&gt;, but myself advocate the more conservative alternative of Dual CommonJS/ESM modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It benefits library consumers, who may not be able to migrate their applications to ESM immediately.&lt;/li&gt;
&lt;li&gt;It benefits other library authors, who may not have the resources to immediately switch their libraries to ESM.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;In general, it helps smooth the ESM migration process for the JavaScript ecosystem.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-dual-cjsesm-modules"&gt;
  &lt;/a&gt;
  Creating dual CJS/ESM modules
&lt;/h2&gt;

&lt;p&gt;Yargs ships a dual CJS/ESM module using a combination of &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt;, and &lt;a href="https://nodejs.org/api/packages.html#packages_conditional_exports"&gt;modern Node.js features&lt;/a&gt;, here's how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We added the &lt;code&gt;type: module&lt;/code&gt; field to our &lt;a href="https://github.com/yargs/yargs/blob/master/package.json#L26"&gt;package.json&lt;/a&gt;, to indicate that by default files with a &lt;code&gt;.js&lt;/code&gt; extension should be considered to be ECMAScript modules (&lt;em&gt;this is a workaround for the fact that &lt;a href="https://github.com/microsoft/TypeScript/issues/18442"&gt;TypeScript does not currently support the &lt;code&gt;.mjs&lt;/code&gt; extension&lt;/a&gt;&lt;/em&gt;, and should be avoided if not using TypeScript, or once the issue is resolved).&lt;/li&gt;
&lt;li&gt;We updated all of our &lt;code&gt;import&lt;/code&gt; statements in TypeScript to include the absolute path to the source files, .e.g.,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;maybeAsyncResult&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/maybe-async-result.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This was for the benefit of Deno and web browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;We set the &lt;a href="https://www.typescriptlang.org/tsconfig/#module"&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; option in our TypeScript configuration to &lt;code&gt;es2015&lt;/code&gt;, indicating that ECMAScript modules should be generated during compilation.&lt;/li&gt;
&lt;li&gt;We added a &lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; build step to yargs, which generates a &lt;code&gt;.cjs&lt;/code&gt; bundle of our TypeScript code, here's what the configuration looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@wessberg/rollup-plugin-ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./build/index.cjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="nx"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
   &lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./lib/cjs.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note the &lt;a href="https://github.com/wessberg/rollup-plugin-ts"&gt;&lt;code&gt;@wessberg/rollup-plugin-ts&lt;/code&gt;&lt;/a&gt; dependency, this handles the translation between TypeScript and CommonJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;We added a &lt;a href="https://nodejs.org/api/packages.html#packages_conditional_exports"&gt;conditional exports&lt;/a&gt; to &lt;code&gt;package.json&lt;/code&gt;, providing hints about when to load our CommonJS, vs., ESM entry points.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"exports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./index.mjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./index.cjs"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"./helpers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"import"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./helpers/helpers.mjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"require"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./helpers/index.js"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: adding an exports map should be considered a breaking change, and you should ensure that you test the behavior of your the map on a variety of Node.js versions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Getting a module working for both CommonJS and ECMAScript modules took quite a bit of fiddling (&lt;em&gt;it was a pain in the neck honestly&lt;/em&gt;). But, I feel there's value in library authors considering this approach. We can help steward the JavaScript ecosystem into the future, without throwing out all of the wonderful work of the past.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://twitter.com/BenjaminCoe"&gt;Ben&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Ben was the third employee at npm, Inc, where he became involved with open-source and the Node.js community. Ben maintains the open source library yargs, is a collaborator on Node.js, and contributes to other projects, such as v8.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>npm</category>
      <category>esm</category>
    </item>
    <item>
      <title>How to fetch data from more than one API in one project. Covid Map project - day 3.</title>
      <author>Magda Rosłaniec</author>
      <pubDate>Sat, 01 May 2021 20:32:37 +0000</pubDate>
      <link>https://dev.to/makneta/how-to-fetch-data-from-more-than-one-api-in-one-project-covid-map-project-day-3-bpl</link>
      <guid>https://dev.to/makneta/how-to-fetch-data-from-more-than-one-api-in-one-project-covid-map-project-day-3-bpl</guid>
      <description>&lt;p&gt;Last time I was writing about fetching the data from one API using a custom useFetch hook.&lt;br&gt;
Part 2 &lt;a href="https://dev.to/makneta/covid-map-react-project-day-2-4ph2"&gt;Covid Map React project day 2&lt;/a&gt;&lt;br&gt;
It was a few days ago. In the meanwhile, I decided to add a few more APIs and was trying to find out the best way of doing it. I felt a bit helpless because my app was crashing over and over again. In fact, it was not a problem with fetching the data but with displaying it. But this problem postponed my writing here. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#things-ive-done"&gt;
  &lt;/a&gt;
  Things I've done:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;After all these trials and errors I decided to still be using useFetch hook but fetch data using Promise.all(). &lt;/li&gt;
&lt;li&gt;First, in App.js I created a list of URLs
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/countries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/historical?lastdays=30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and pass the &lt;code&gt;urls&lt;/code&gt; into the useFetch() function in useFetch.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then I created a bunch of variables and functions using useState.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCountries&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCountrJson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlobal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDataHistorical&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDataVaccine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next, I change a bit the &lt;code&gt;try&lt;/code&gt; part of my useEffect().
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Promise.all() is the JavaScript method that goes over iterable (list of links in my case) and returns a single Promise for each link or if something goes wrong we have a message about an error.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My next step was to transform data from countries API into geoJson to display data on a map. I also need the same data as a simple json, so I created one more variable for it. &lt;/li&gt;
&lt;li&gt;I set all the data as React states
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;setCountries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setCountrJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;setGlobal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;setDataHistorical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;setDataVaccine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;I returned all the data
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To make it work I also had to access those variables in App.js component.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usefetchjs"&gt;
  &lt;/a&gt;
  useFetch.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCountries&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCountrJson&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGlobal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDataHistorical&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDataVaccine&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;


              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geoJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FeatureCollection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;features&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;countryInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countryInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                       &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Feature&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                           &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="p"&gt;},&lt;/span&gt;
                       &lt;span class="na"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Point&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="na"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                       &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="nx"&gt;setCountries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;geoJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;setCountrJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;setGlobal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;setDataHistorical&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;setDataVaccine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Failed to fetch data: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;


        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},[])&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and-appjs"&gt;
  &lt;/a&gt;
  And App.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TableSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/TableSection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StyledMain&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/modules/Sections&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useFetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/countries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/historical?lastdays=30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=30&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataHistorical&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataVaccine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; :  &amp;lt;Map countries={countries} /&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StyledMain&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TableSection&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countrJson&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/StyledMain&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I don't use all the data from each API yet, but I wanted to have it solved somehow before going further. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I also refactored part of the code in Map.js to make the variables more readable.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;coordinates&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geometry&lt;/span&gt;    
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryInfo&lt;/span&gt;    
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;recovered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todayCases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todayDeaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todayRecovered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;redIcon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;30px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Cases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; {cases} | &amp;lt;strong&amp;gt;Cases Today:&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todayCases&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Deaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; {deaths} | &amp;lt;strong&amp;gt;Death Today:&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todayDeaths&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Recovered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; {recovered} | &amp;lt;strong&amp;gt;Recovered Today:&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todayRecovered&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Last&lt;/span&gt; &lt;span class="na"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; {date.toLocaleDateString&lt;/span&gt;&lt;span class="se"&gt;()&lt;/span&gt;&lt;span class="sr"&gt;}&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Popup&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Marker&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think I will redo this part again but for now, the popup looks like that: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qOjP_YeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msdfeyjynugxukjfizcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qOjP_YeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msdfeyjynugxukjfizcm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step"&gt;
  &lt;/a&gt;
  Next step:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a table to display data for each country.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>project</category>
      <category>leaflet</category>
    </item>
    <item>
      <title>GitHub Profile README Generator</title>
      <author>Rahul Banerjee</author>
      <pubDate>Sat, 01 May 2021 20:26:49 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/github-profile-readme-generator-l91</link>
      <guid>https://dev.to/rahulbanerjee99/github-profile-readme-generator-l91</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/rahulbanerjee26/githubProfileReadmeGenerator"&gt;https://github.com/rahulbanerjee26/githubProfileReadmeGenerator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few inputs + ~15 mins = Your Github Profile reaches a new level 🔥&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage 🔧
&lt;/h2&gt;

&lt;p&gt;Fill in the text boxes. Leave the ones you do not wish to fill blank.&lt;br&gt;
By default the generated ReadMe has GitHub stats and Wakatime stats, feel free to remove them.&lt;br&gt;
If you want to build on top of the Readme, refer to the article I mentioned above for resources and tips&lt;br&gt;
If you used this app to build your README, consider adding yourself to the "Users who used this app to generate a README" section. You can showcase your README and others will be able to view it and star it. You are guranteed a star from me ⭐&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features 💿
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Gifs&lt;/li&gt;
&lt;li&gt;Social Icons&lt;/li&gt;
&lt;li&gt;Skill Icons&lt;/li&gt;
&lt;li&gt;Visitors Badge&lt;/li&gt;
&lt;li&gt;Github Stats&lt;/li&gt;
&lt;li&gt;Chose GitHub Stats Card Type&lt;/li&gt;
&lt;li&gt;WakaTime Stats&lt;/li&gt;
&lt;li&gt;.yml file to display Blog Posts from your feed&lt;/li&gt;
&lt;li&gt;Ability to add image banners at beginning of README&lt;/li&gt;
&lt;li&gt;Random Jokes Card&lt;/li&gt;
&lt;li&gt;Clicking on Skills shows your GitHub Repos filtered on that skill&lt;/li&gt;
&lt;li&gt;Cool Image in the About Me section&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>portfolio</category>
      <category>python</category>
    </item>
  </channel>
</rss>
