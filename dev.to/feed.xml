<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Reverse Tech Interview: Questions to Stump an Interviewer
</title>
      <author>Devinterview-io</author>
      <pubDate>Wed, 10 Feb 2021 13:36:39 +0000</pubDate>
      <link>https://dev.to/devinterview/reverse-tech-interview-questions-to-stump-an-interviewer-4n6a</link>
      <guid>https://dev.to/devinterview/reverse-tech-interview-questions-to-stump-an-interviewer-4n6a</guid>
      <description>&lt;p&gt;Hi, everyone, I want to bring up the topic of &lt;strong&gt;hiring at tech companies&lt;/strong&gt; once again. This time I'm going to talk about it from the perspective of the candidate, not the employer. Because the interview, contrary to many stereotypes, is a two-way process - not only the interviewer can ask questions, but also the applicant himself. Last year I conducted a decent number of interviews, and the vast majority of candidates upset me by the absence of questions about the company, &lt;strong&gt;only 5 people began to ask me about the actual job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I believe that the candidate himself should ask questions at the interview since he is going to work at the company. The standard job description makes it impossible to understand what goes on in a company, and, it is a common practice for recruiters to sugarcoat things a bit. Few people want to get into an uncomfortable environment or an unprofitable company with no prospects. If you're wondering how to &lt;strong&gt;get a real feel for a company during an interview&lt;/strong&gt;, you're welcome. I'll give a list of questions that interviewers don't usually expect, maybe they'll help someone make the right decision when looking for a dev job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'll start with a block of general questions to help figure out what the company does.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How does the company make money? &lt;br&gt;
What kind of business model does it have? &lt;br&gt;
If they can't answer that, then there's a good chance they don't make any money at all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;If it is a startup, it is appropriate to ask who invests.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At what stage is the project?&lt;br&gt;
Can you show me the product?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It‚Äôs not a good sign if they can't answer these questions, especially referring to the NDA, it's probably not about that at all. These questions have nothing to do with revealing trade secrets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Questions about the attitude toward employees in the company.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you have a system of promotions?&lt;br&gt;
What was the last time you promoted a person or gave a bonus?&lt;br&gt;
What are your criteria for that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they can't answer, then they don't understand or don't appreciate the benefits that employees bring to the table. Everyone can say &lt;em&gt;"yes we do"&lt;/em&gt;, but the specific criteria are usually more important.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another block of questions about something equally important: Management.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are my first tasks if I work for you?&lt;br&gt;
Do you have an onboarding process?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are not given a clear plan, it is likely that you will be swamped with a bunch of random tasks and that's it, do not expect any onboarding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What do you fire people for?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There should be clear-cut, not vague criteria, so that you don't end up getting fired for some nonsense or because someone just doesn't like you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How are disputes resolved in the work process?&lt;br&gt;
What exactly do you do in such cases?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they look at the facts, collect feedback - that's good. If there is no objective response, there is a high probability that you will always lose these disputes by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More questions about the workflow and team environment.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How is the work process structured?&lt;br&gt;
How do I interact with the other teammates in the process?&lt;br&gt;
Ask to see the task manager.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they just say that they practice agile development, maybe &lt;strong&gt;there is no structured process, but a swamp.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pay attention to how the people are treated in the company, whether they show respect to the employees. For example, if an interviewer is distracted by a message or question during an interview and runs off without apologies, this is a red flag.&lt;/p&gt;

&lt;p&gt;And one more aspect: &lt;strong&gt;be sure to ask for feedback after the interview.&lt;/strong&gt; If they can't give it to you, maybe it's a good thing you didn't sign up to work there.&lt;/p&gt;

&lt;p&gt;Recruiters are usually unprepared for such a barrage of questions, so try to tell them in advance that you want to ask detailed questions about the company. Otherwise, there may not be enough time for that. I do not encourage you to &lt;em&gt;interrogate the recruiter&lt;/em&gt; and ask all the questions, act as appropriate, it may be enough to ask just a few questions.&lt;/p&gt;

&lt;p&gt;You have no idea how many people can't answer these questions. And remember that &lt;strong&gt;you are in no way going to a penal labor&lt;/strong&gt;, but you are choosing a place where you will spend almost a third of your time, &lt;strong&gt;you should be comfortable there.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you ask an employer questions during an interview? I would be glad if you share your questions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks üôå for reading and good luck on your next tech interview!&lt;br&gt;
&lt;strong&gt;You can explore 3800+ dev interview question here üëâ &lt;a href="https://devinterview.io/"&gt;Devinterview.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Is Redux Dead?</title>
      <author>Asayer Tech Blog</author>
      <pubDate>Wed, 10 Feb 2021 12:37:37 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/is-redux-dead-1d2a</link>
      <guid>https://dev.to/asayerio_techblog/is-redux-dead-1d2a</guid>
      <description>&lt;p&gt;&lt;em&gt;by &lt;a href="https://blog.asayer.io/kristofer-selbekk"&gt;Kristofer Selbekk&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;React revolutionized front end development as most people knew it when it was first released. This new approach to writing code triggered incredible innovation in how to handle state changes and UI updates.&lt;/p&gt;

&lt;p&gt;This revolution had its downsides, too. One of them was a culture of over-engineering solutions to challenges that could be solved in simpler ways. A typical example of this is how state has been managed in React applications.&lt;/p&gt;

&lt;p&gt;Redux has become a hallmark of many React applications created in the last couple of years. The allure of having a single state object, available everywhere in your application sure sounds nice. But has its time passed? Has React evolved to a point where these kinds of state management tools add more complexity than they solve?&lt;/p&gt;

&lt;p&gt;This article aims to give you a deeper understanding of which situations warrants state management tools like Redux. We‚Äôll discuss the reasons behind the rise of Redux, and what has changed in the last couple of years - both in React and in Redux. Finally, we‚Äôll look into what might be coming in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-and-why-people-started-using-it" class="anchor"&gt;
  &lt;/a&gt;
  Redux - and why people started using it
&lt;/h2&gt;

&lt;p&gt;When it was first released , React didn‚Äôt have an officially supported way to pass data far down the component tree. If you had some kind of shared state, configuration or other information you would like to use anywhere in you application, you had to pass it down from parent to child to sibling to another child. There &lt;em&gt;was&lt;/em&gt; a way to avoid it, but that way - the ‚Äúlegacy context API‚Äù was never officially supported, and was documented with a warning that it should not be used.&lt;/p&gt;

&lt;p&gt;About the same time React was released to the public, some other Facebook engineers &lt;a href="https://www.youtube.com/watch?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;amp;v=nYkdrAPrdcw&amp;amp;feature=emb_title"&gt;introduced a blueprint&lt;/a&gt; for how they created front end applications - the &lt;a href="https://facebook.github.io/flux/"&gt;Flux architecture&lt;/a&gt;. It complimented React‚Äôs component-centric design by having a unidirectional data flow, which made things both easy to follow and simple to understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpbbKGJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d97c68cc0c034806aa6ff882a5f51995.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpbbKGJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d97c68cc0c034806aa6ff882a5f51995.png" alt="Flux Architecture"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;(photo borrowed from &lt;a href="https://facebook.github.io/flux/docs/in-depth-overview"&gt;https://facebook.github.io/flux/docs/in-depth-overview&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While many famous open sorcerers were busy fighting over which slightly different implementation of this was the best, a young Russian developer named Dan Abramov introduced an implementation based on the &lt;a href="https://guide.elm-lang.org/architecture/"&gt;Elm architecture&lt;/a&gt;, called Redux.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/xsSnOQynTHs"&gt;https://youtu.be/xsSnOQynTHs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redux was a pretty simple system, with a single state object, encased in a ‚Äústore‚Äù, which could be updated by dispatching actions on it. The actions were sent to a ‚Äúreducer‚Äù function, which returned a brand new copy of the entire application state, which would then propagate across your application.&lt;/p&gt;

&lt;p&gt;Another great feature of Redux was how easy it was to use with React. Not only was it a great match with the programming model of React, it also solved the prop drilling issue! Just ‚Äúconnect‚Äù whatever component you want to a store, and you had access to any part of the application state you wanted. It was like magic!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#context-hooks-and-why-it-solved-much-of-what-redux-did" class="anchor"&gt;
  &lt;/a&gt;
  Context, hooks, and why it solved much of what Redux did
&lt;/h2&gt;

&lt;p&gt;With all its elegance and popularity though, Redux did have a few major downsides. For each new way of changing the state, you had to add a new action type and action creator, probably a dispatcher and a selector, and then you‚Äôd have to handle that new state change in an existing reducer, or create a new one. In other words - lots and lots of boilerplate.&lt;/p&gt;

&lt;p&gt;When the 16.3 version of React was released, it finally shipped with a fully redesigned context API. With this new feature, prop drilling was suddenly as easy as wrapping any subsection of your application in a context provider, and fetching it again with a context consumer component.  Here‚Äôs an example of how that could be done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SomeDeepHierarchy&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Consumer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;// look - no Redux required!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Consumer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At ReactConf in 2018, now React Core team member Dan Abramov and boss Sophie Alpert &lt;a href="https://www.youtube.com/watch?v=V-QO-KO90iQ&amp;amp;t=5s"&gt;introduced a new feature&lt;/a&gt; in React - hooks. Hooks made using state and side effects much easier, and made away with the need for class components altogether. In addition, the context API was suddenly much easier to consume, which made it much more user friendly. Here‚Äôs the revised code example with hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;myApi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SomeDeepHierarchy&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UserContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;customer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With these new features landing in React, the trade-offs for using Redux changed quite a bit. The elegance of reducers were suddenly built into React itself, and prop-drilling was a solved challenge. New projects were started without having Redux in the stack - a previous no-brainer - and more and more projects started to consider moving away from Redux altogether.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-toolkit-and-hooks-a-new-and-improved-user-experience" class="anchor"&gt;
  &lt;/a&gt;
  Redux Toolkit and hooks - a new and improved user experience?
&lt;/h2&gt;

&lt;p&gt;As a response, the team currently maintaining Redux (led by a gentleman named Mark Eriksson) started two different efforts. They introduced an opinionated toolkit named &lt;a href="https://redux-toolkit.js.org/"&gt;Redux Toolkit&lt;/a&gt; that did away with most boilerplate code through conventions, and they added a &lt;a href="https://react-redux.js.org/api/hooks"&gt;hooks-based API&lt;/a&gt; for reading state and dispatching actions.&lt;/p&gt;

&lt;p&gt;Together these two new updates simplified Redux codebases substantially. But is it really enough to defend introducing the added complexity of the concepts in Redux to a new project? Is the value Redux adds more than the added cost of teaching new employees about Yet Another Tool?&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at where React does a great job by itself, and in what cases the tradeoff of complexity vs power is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-react-is-enough" class="anchor"&gt;
  &lt;/a&gt;
  When React is enough
&lt;/h2&gt;

&lt;p&gt;Most React applications I‚Äôve worked with have been pretty small in scope. They‚Äôve had a few global pieces of state that was used across the application, and some data that was shared across a few different views.&lt;/p&gt;

&lt;p&gt;Besides from this though, many React applications don‚Äôt have a lot of shared state. Most state  like the content of input fields or whether a modal is open, is only interesting to the component that contains them! No need to make that state globally available. &lt;/p&gt;

&lt;p&gt;Other pieces of state might be shared, but only by a part of the application. Perhaps a particular page requires a piece of state to be shared across several of its components, or a sidebar needs to expose some remote status to all of its children. Either way, that‚Äôs not global state - it‚Äôs state scoped to a part of the application.&lt;/p&gt;

&lt;p&gt;By keeping state co-located, or as close to its dependents as possible, you ensure that it‚Äôs deleted whenever the feature requiring it is deleted, and that it‚Äôs discoverable without leafing through tens of different reducers.&lt;/p&gt;

&lt;p&gt;If you need to share app-wide settings that rarely change, React‚Äôs context API is a great tool to reach for. One example of this is what locale is currently active:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocaleContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LocaleProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocale&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LocaleContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocale&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LocaleContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Other use cases can be what color theme is active, or even what experiments are active for a given user.&lt;/p&gt;

&lt;p&gt;Another very useful approach is using a small data-fetching library like &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt; or &lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt; to handle fetching and caching your API responses for you. To me, cached data isn‚Äôt really global state - it‚Äôs just cached data. This is much simpler to handle with these small single-use libraries, than introducing async thunks or sagas to your Redux rig. Also, you don‚Äôt have to handle all the complex variations of isLoading, hasError and what not. With these libraries, it works out of the box.&lt;/p&gt;

&lt;p&gt;A thing these context use cases have in common is the fact that they represent data that rarely updates. Rarely in the context of computer science is a bit vague, but in my mind, less than a couple of times every second is pretty rare. And as it turns out, that‚Äôs the way the React Context API works best!&lt;/p&gt;

&lt;p&gt;The use cases summarized above covers most of the situations I‚Äôve met in real world applications. Actual global state is rare and far between, and is often better off being co-located with the code that actually uses it, or provided through the context API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#situations-where-redux-might-be-warranted" class="anchor"&gt;
  &lt;/a&gt;
  Situations where Redux might be warranted
&lt;/h2&gt;

&lt;p&gt;With all that said, Redux is still a great product. It‚Äôs well documented, adopted by many, and can be combined with the approaches posted above. But what use cases warrants the added complexity and learning curve of adding Redux to your stack in 2021?&lt;/p&gt;

&lt;p&gt;One of the use cases I see most in the projects I‚Äôm involved with is when you have advanced data fetching scenarios that requires a lot of cascading network communication. One might argue that this is best done on the server side, but there are definitely use cases where handing this on the client is warranted. Redux, particularly in combination with so-called thunks, is extremely versatile and flexible when it comes to such orchestration.&lt;/p&gt;

&lt;p&gt;Another use case is for very interdependent states, or states that are derived from several other states. This is possible to handle in React as well, but the end result is still much easier to both share, reuse and reason about in Redux.&lt;/p&gt;

&lt;p&gt;A third use case is for those where the state of your application can change very rapidly. The lead architect of React, Seb Markb√•ge, stated a few years ago that the current implementation of the context API was suboptimal for sharing data that updated quickly, since a change in the context-provided value would trigger a re-render of the entire subtree of components. Web socket driven trading or analytics dashboards might be good examples of such a situation. Redux gets around this by only sharing the store instance through context, and triggers re-renders more explicitly.&lt;/p&gt;

&lt;p&gt;A final use case is highly subjective, and is for teams that enjoy the top-down single-state-tree approach. That the entire state of the application can be serialized, de-serialized, sent over the wire and persisted in local storage. That you can time-travel across changes, and provide a full story of actions leading to a bug to a bug tracking tool. These are powerful arguments, and definitely a value-add for some.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measuring-redux-performance" class="anchor"&gt;
  &lt;/a&gt;
  Measuring Redux performance
&lt;/h2&gt;

&lt;p&gt;Monitoring the performance of  a web application in production may be challenging and time consuming. Asayer is a frontend monitoring tool that replays everything your users do and shows how your app behaves for every issue. It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;/p&gt;

&lt;p&gt;Asayer lets you reproduce issues, aggregate JS errors and monitor your app‚Äôs performance. Asayer offers plugins for capturing the state of your &lt;em&gt;Redux or VueX&lt;/em&gt; store and for inspecting &lt;em&gt;Fetch&lt;/em&gt; requests and &lt;em&gt;GraphQL&lt;/em&gt; queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgQkokAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/f717d68eb19b4f7fa522cd8d0f44c458.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgQkokAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/f717d68eb19b4f7fa522cd8d0f44c458.png" alt="Asayer Redux"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://asayer.io/register.html"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-other-options" class="anchor"&gt;
  &lt;/a&gt;
  The other options
&lt;/h2&gt;

&lt;p&gt;In my opinion, most applications can do without external state management libraries. Some disagree, and some have such advanced use cases that handling it without some kind of intermediary layer is very unpractical. In such cases, I suggest you look into Redux‚Äô competition, before landing on the tried and true alternative.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mobx.js.org/the-gist-of-mobx.html"&gt;MobX&lt;/a&gt; is a well-tested and popular state management tool that works through the magic of observables. It‚Äôs quick as heck, and most people that try it become fans within weeks. I haven‚Äôt tried it myself, so I won‚Äôt be advocating for it too strongly, but the design looks solid!&lt;br&gt;
Another contender is &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt;. This library also stems from the engineers at Facebook, and is based around the concept of atoms of state, and derived state called selectors. It‚Äôs very similar to React in its API design, and works flawlessly with it. It‚Äôs currently in an open beta, but it should still be useful in many projects.&lt;/p&gt;

&lt;p&gt;The final alternative I want to suggest is &lt;a href="https://overmindjs.org/"&gt;Overmind&lt;/a&gt;. Overmind is the state library that runs the main editor application over at &lt;a href="http://codesandbox.io"&gt;CodeSandbox&lt;/a&gt;, and is based around a single state tree and side effects. It‚Äôs also something I‚Äôve never tried before, but by looking at the complexity and lack of bugs in CodeSandbox, it must be pretty powerful!&lt;/p&gt;

&lt;p&gt;Even with all of these alternatives present, Redux is still holding its ground. With the recently added hooks and Redux Toolkit, the developer experience has really improved as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;React is an incredible framework for creating quick, responsive and optimized user interfaces. It provides a flexible API for handling both simple and complex states, and the latest versions have improved the developer experience in such ways that most state management libraries really aren‚Äôt needed anymore.&lt;/p&gt;

&lt;p&gt;There are definitely use cases where a separate state management layer is a net positive, and you should always consider introducing one when it‚Äôs needed. My argument is that you shouldn‚Äôt start out with one before you feel the pain of not having one. Only then can you be sure you‚Äôre not adding complexity to your stack without reaping any of the benefits.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Things You Can Do For Free: The Ultimate Guide</title>
      <author>Shahed Nasser</author>
      <pubDate>Wed, 10 Feb 2021 11:52:35 +0000</pubDate>
      <link>https://dev.to/shahednasser/the-things-you-can-do-for-free-the-ultimate-guide-1hd4</link>
      <guid>https://dev.to/shahednasser/the-things-you-can-do-for-free-the-ultimate-guide-1hd4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://blog.shahednasser.com/the-things-you-can-do-for-free-the-ultimate-guide/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating any kind of project, there will be costs that you have to handle. Whether big or small, at some point it can be hindering or cause a hassle.&lt;/p&gt;

&lt;p&gt;I will list for you different topics you might need in your projects and how you can get it for free.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hosting" class="anchor"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;Finding a hosting is one of the most troublesome parts when you are creating a project, especially when you need it for free. Here's a list of services or websites that offer free hosting, and what kind of projects you can use them for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;: Netlify is perfect for static websites like portfolios. It also supports &lt;a href="https://www.netlify.com/jamstack/"&gt;Jamstack&lt;/a&gt;, which basically decouples the backend from the frontend, allowing your website to be deployed directly to a CDN. This helps make your website faster and more secure. You can use this to create, for example, blogs (like this one). You can read it more about it in &lt;a href="https://www.netlifycms.org/"&gt;Netlify CMS&lt;/a&gt; as they have starter projects you can get started with.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebase.google.com/pricing"&gt;Firebase&lt;/a&gt;: In Firebase's free plan (or Spark Plan) they offer many features, including 10GB of hosting. Again, this is great for static websites.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;: Heroku allows you to host almost any kind of environment. The down side of Heroku's free hosting is that it can be slow, but it still can be very helpful in many cases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.alwaysdata.com/en/"&gt;alwaysdata&lt;/a&gt;: A good hosting solution for a variety of environments, with a lot of features.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://surge.sh/"&gt;Surge&lt;/a&gt;: Surge is another good hosting for static websites. Surge does not really have any limits when it comes to the size of the website, and it's probably the easiest to use. You can deploy any website through their CLI with just one command.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.000webhost.com/"&gt;000WebHost&lt;/a&gt;: Although I personally am not a big fan of this hosting, but 000WebHost offers an easy to use cPanel free hosting and helpful tools for WordPress hosting in particular.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;: Another good static website hosting. The pro of this option is that you can link it directly to your GitHub repository, and with any update to the repository it will update immediately.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;: Hashnode is specific to creating your own blog. You can customize it, track its analytics and much more. If you have your own domain then you can add it, too.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#domain-name" class="anchor"&gt;
  &lt;/a&gt;
  Domain Name
&lt;/h2&gt;

&lt;p&gt;Next come domain names. From my experience, the only service that provides a free domain name (without having to pay for hosting, that is) is &lt;a href="https://www.freenom.com/en/freeandpaiddomains.html"&gt;Freenom&lt;/a&gt;. Freenom provide free domain names that end with .tk, .cf, .ml, .ga or .gq.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mail-tools" class="anchor"&gt;
  &lt;/a&gt;
  Mail Tools
&lt;/h2&gt;

&lt;p&gt;Whether for a contact form, a newsletter form, or any marketing usage you might have that requires sending email, here's a list to help you achieve that for free:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.mailgun.com/"&gt;Mailgun&lt;/a&gt;: Mailgun provides an email you can use to send email. You can either use Mailgun on your server to send emails, or use the email provided by mailgun and the API keys you get to send emails serverless, but this will require other services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.emailjs.com/"&gt;EmailJS&lt;/a&gt;: EmailJS allows you to send emails from your Javascript without needing a server. You can link EmailJS with your Mailgun account. EmailJS also allows you to manage the email template, email response and other settings as well. It's a great option for a contact form.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mailerlite.com/"&gt;MailerLite&lt;/a&gt;: MailerLite puts all email marketing together basically. Using MailerLite's free plan you can create forms and popups that you can embed in your website and they take care of the rest. Whether it's a subscription or contact form, you can create the forms, link them with a subscription list, send newsletters and many more options.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#seo-and-other-tools" class="anchor"&gt;
  &lt;/a&gt;
  SEO and Other Tools
&lt;/h2&gt;

&lt;p&gt;Below are some SEO helpful tools to help make your website a little better:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://sharethis.com/"&gt;ShareThis&lt;/a&gt;: A good tool to let your website visitors share your website easily on almost every social media platform, with a variety of design choices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;: Disqus lets you add a comments or reaction section to your website, helping you build connections with your visitors.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://crowdin.com/"&gt;CrowdIn&lt;/a&gt;: CrowdIn is a tool you can use to manage translations for your projects. You upload a strings file like a .json file, add the languages you want, and then you and your team, or anyone you send the link to can translate your strings easily with their interface and their recommended translations as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://buffer.com/"&gt;Buffer&lt;/a&gt;: Buffer allows you to connect your social media accounts together so you can schedule posts, track analytics and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hotjar.com/"&gt;hotjar&lt;/a&gt;: hotjar takes analytics into the next level. Not only can you track the usual traffic of users, but you can also see heatmaps, add surveys, and much more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.algolia.com/"&gt;Agolia&lt;/a&gt;: Agolia allows you to add a search engine to your website without the hassle.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rebrandly.com/"&gt;Rebrandly&lt;/a&gt;: Provides free URL shortener with analytics, QR Codes and more.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;Here are some websites that you can get design elements, images, or other resources from:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://freebiesupply.com/"&gt;Freebie Supply&lt;/a&gt;: You can find vectors, illustrations, icons, and much more for free.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;: Easily use beautiful fonts in your website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://feathericons.com/"&gt;Feather Icons&lt;/a&gt;: An open source project with very beautiful icons you can use for free.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://iconscout.com/"&gt;Iconscout&lt;/a&gt;: Find free and beautiful icons you can use in your projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://undraw.co/"&gt;Undraw&lt;/a&gt;: Free illustrations for any project. You can download the illustrations in PNG or SVG formats and change their colors in website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;: Free images you can use in any of your projects. They also have an API you can use to search through images, get random images, and other usages as well.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hatchful.shopify.com/"&gt;hatchful&lt;/a&gt;: Create a logo and customize it for free.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a longer list of design resources, check out my &lt;a href="https://blog.shahednasser.com/best-websites-to-find-free-resources-for-frontend-web-developers-and-designers/"&gt;other post&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Do you know any other tools or services that are helpful and for free? Please let us know in the comments!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tips</category>
      <category>advice</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Make Your PWAs Look Handsome on iOS</title>
      <author>Karmasakshi Goyal</author>
      <pubDate>Wed, 10 Feb 2021 10:35:43 +0000</pubDate>
      <link>https://dev.to/karmasakshi/make-your-pwas-look-handsome-on-ios-1o08</link>
      <guid>https://dev.to/karmasakshi/make-your-pwas-look-handsome-on-ios-1o08</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;I talk about how to embrace the notch to make your PWAs cover the entire screen on iOS devices.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;To avoid content being hidden under notches, Apple limits the viewport of PWAs by default:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1rlDVt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3j5qwvwda0y2c9vmlqcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1rlDVt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3j5qwvwda0y2c9vmlqcf.png" alt="Cinepotato added to Home Screen on iPhone X" title="Cinepotato added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apple also limits the viewport on iPhones and iPads &lt;strong&gt;without a notch&lt;/strong&gt; to the area below the Status Bar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrVIU1Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2bvmuqa7yq5axgppjfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrVIU1Mr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2bvmuqa7yq5axgppjfl.png" alt="Cinepotato added to Home Screen on iPad 2020" title="Cinepotato added to Home Screen on iPad 2020"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want your PWA to embrace the notch and make it cover the entire screen, you will need a small hack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;Set your document to flow to the notch area:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// index.html

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"initial-scale=1, viewport-fit=cover, width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-status-bar-style"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"black-translucent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/meta&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that this will set the font color of the iOS Status Bar to white.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The hack&lt;/strong&gt;: Set the minimum height of the document to 100% plus the height of the safe area on top. This will prevent a white bar in the bottom which gets shown since you moved the document ‚Äúup‚Äù.&lt;/p&gt;

&lt;p&gt;Also, add safe area padding to all 4 sides to ensure content is never hidden under the notch regardless of the device orientation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* styles.css */&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-bottom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('/bg.svg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-result" class="anchor"&gt;
  &lt;/a&gt;
  The Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asenN8qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhazidii9m5my212fj1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asenN8qO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vhazidii9m5my212fj1u.png" alt="umagoyal.com added to Home Screen on iPhone X" title="umagoyal.com added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnYyE3Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ji6r20yogkd5vw3pa882.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnYyE3Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ji6r20yogkd5vw3pa882.png" alt="umagoyal.com added to Home Screen on iPad 2020" title="umagoyal.com added to Home Screen on iPad 2020"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip" class="anchor"&gt;
  &lt;/a&gt;
  Bonus Tip
&lt;/h3&gt;

&lt;p&gt;If you have elements with &lt;code&gt;position: fixed&lt;/code&gt; (e.g. toast, sidebar, bottom navigation, etc.) add the safe area padding to their containers or themselves, whichever is relevant. &lt;strong&gt;You only need to pad the sides where the notch can possibly be positioned.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* styles.css */&lt;/span&gt;

&lt;span class="nc"&gt;.left-sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yezis2c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gluuz11zkj5nng88khrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yezis2c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gluuz11zkj5nng88khrh.png" alt="Sidebar of Share By Cam added to Home Screen on iPhone X" title="Sidebar of Share By Cam added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLPMA2VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2tug96qxqult943asyxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLPMA2VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2tug96qxqult943asyxb.png" alt="Sidebar of Share By Cam added to Home Screen on iPhone X" title="Sidebar of Share By Cam added to Home Screen on iPhone X"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For fixed headers, you can either choose to display the header below the notch area (like &lt;a href="https://shareby.cam"&gt;Share By Cam&lt;/a&gt; does) or pad relevant sides of the header instead of html to fill the notch area.&lt;/p&gt;




&lt;p&gt;I developed this hack after several retries way back on iOS 12, but never shared hoping it would be fixed by Apple. Looks like this quirk is here to stay, so be it. Cheers!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shout-out to &lt;a href="https://mockuphone.com"&gt;MockUPhone&lt;/a&gt; for the brilliant phone mocking tool!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>react</category>
      <category>pwa</category>
    </item>
    <item>
      <title>CSS: How to make a cool border animation </title>
      <author>DevLorenz0</author>
      <pubDate>Wed, 10 Feb 2021 07:22:22 +0000</pubDate>
      <link>https://dev.to/devlorenzo/css-how-to-make-a-border-animation-part-2-46fm</link>
      <guid>https://dev.to/devlorenzo/css-how-to-make-a-border-animation-part-2-46fm</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; New episode of the series  - A CSS/JS trick in 5 minutes. &lt;br&gt;
I did &lt;a href="https://dev.to/devlorenzo/css-how-to-make-a-border-animation-1kn"&gt;an article about CSS slow border animations&lt;/a&gt; and I wanted to do a follow-up. I will now explain to you how to do a more engaging and advanced border animation &lt;/p&gt;



&lt;p&gt;We do not need to excessively style our container, we just give it padding, a border, and if you want (recommended) a border-radius. You can after insert everything you need in the div (or make it act as a button):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#container {
  border-radius: 10px;
  padding: 35px;
  width: 380px;
  overflow: hidden;
  padding: 2rem;
  animation: borderSpin 5s ease infinite;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Inside of container style, we add a :after and :before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;amp;::before {
    content: "";
    z-index: -2;
    left: -50%;
    top: -50%;
    width: 200%;
    height: 200%;
    background-color: #399953;
    background-repeat: no-repeat;
    background-size: 50% 50%, 50% 50%;
    background-position: 0 0, 100% 0, 100% 100%, 0 100%;
    background-image: linear-gradient(#399953, #399953),
      linear-gradient(#fbb300, #fbb300), linear-gradient(#d53e33, #d53e33),
      linear-gradient(#377af5, #377af5);
    animation: rotate 4s linear infinite;
  }

  &amp;amp;::after {
    content: "";
    position: absolute;
    z-index: -1;
    left: 6px;
    top: 6px;
    width: calc(100% - 12px);
    height: calc(100% - 12px);
    background: white;
    border-radius: 5px;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's a lot of things, just notice that we are giving a colorful background to the container and with the animation we will make the border moving. You can play around with background size, position, colors, calc, radius... &lt;/p&gt;




&lt;p&gt;In reality the animation part is very easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@keyframes rotate {
  100% {
    transform: rotate(1turn);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are just rotating the background. &lt;/p&gt;




&lt;p&gt;I have done 8 animation examples for you (&lt;strong&gt;open the link for a complete experience&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/DevLorenzo/pen/ExgpvJM"&gt;Live preview:&lt;/a&gt; - Check quick animation part &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/DevLorenzo/embed/ExgpvJM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to use WebP images</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 10 Feb 2021 07:07:52 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-to-use-webp-images-307g</link>
      <guid>https://dev.to/dailydevtips1/how-to-use-webp-images-307g</guid>
      <description>&lt;p&gt;Here's a use-case you build a fantastic web application, and it's amazing. Then your colleague asks you how the speed of this amazing application is?&lt;/p&gt;

&lt;p&gt;Oef, you didn't check that during development but decide to run a lighthouse test to get a general understanding.&lt;/p&gt;

&lt;p&gt;The results shock you a bit! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRgpalgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504243591/TPULQdm2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRgpalgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504243591/TPULQdm2x.png" alt="Bad lighthouse score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That sucks, your structure seems alright, but the website is just plain slow...&lt;/p&gt;

&lt;p&gt;Doing some more research, you might come across this section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjVkC58H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504383457/_-wCDGqI3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjVkC58H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504383457/_-wCDGqI3.png" alt="Chrome Lighthouse next-gen image formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it's a valid point. Next-gen image formats are amazing and should be used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-webp-image" class="anchor"&gt;
  &lt;/a&gt;
  What is a WebP image?
&lt;/h2&gt;

&lt;p&gt;In this article, we'll be talking about WebP images, but what exactly are WebP images?&lt;/p&gt;

&lt;p&gt;WebP is a new modern image format. It applies lossless and lossy compression for images on the web.&lt;br&gt;
Basically, it makes our files even smaller for the web!&lt;/p&gt;

&lt;p&gt;Compared to a PNG, it saves around 26% and between 25-34% on JPEG.&lt;/p&gt;

&lt;p&gt;The cool part is, it supports transparency as PNG's do. And at meager costs.&lt;br&gt;
Meaning a PNG converted to WebP is 3x smaller on average.&lt;/p&gt;

&lt;p&gt;I've converted the exact same image in PNG, WebP, and JPG without special compression to showcase this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h4d0_NXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504592342/lraBbd6xn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h4d0_NXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612504592342/lraBbd6xn.png" alt="Different image formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, that's one big jump in file size, and it's not even compressed.&lt;/p&gt;

&lt;p&gt;Awesome, let's use these WebP images everywhere!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-webp-images" class="anchor"&gt;
  &lt;/a&gt;
  Using WebP images
&lt;/h2&gt;

&lt;p&gt;So our main goal might be to replace every image on the site with a WebP variant.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- before --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a cute cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- after --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.webp"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"a cute cat"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We did it, run it in Chrome, and it works. Lighthouse also seems happy, so done, right?&lt;/p&gt;

&lt;p&gt;But about 15 minutes later, Linda from Marketing calls and complains all the images disappeared on her computer.&lt;br&gt;
You ask what browser she is using, and after a small battle finding out what a browser is, it turns out to be Internet Explorer.&lt;/p&gt;

&lt;p&gt;Darn, we didn't check that! &lt;br&gt;
Now what? You and your developer colleague want a fast website, but it shouldn't go to waste for all the other users on non-modern browsers.&lt;/p&gt;

&lt;p&gt;The browser support for WebP is not bad, but unfortunately, it's not fully supported yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wsLoBM9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/webp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wsLoBM9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/webp.png" alt="WebP browser support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is where the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element comes in handy.&lt;/p&gt;

&lt;p&gt;We can convert our &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags to be part of a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"cat.webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A super cute cat"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Pretty cool. Since the browsers will parse this top-down, if they support the WebP format, they'll choose that image, else they will fall back on the JPG in this case.&lt;/p&gt;

&lt;p&gt;It's important to know that the picture element needs the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, and it will use that &lt;code&gt;alt&lt;/code&gt; text to show on either of the sources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-our-the-support-fallback" class="anchor"&gt;
  &lt;/a&gt;
  Testing our the support fallback
&lt;/h2&gt;

&lt;p&gt;You might think, cool, we got it working now, but how can I test this?&lt;/p&gt;

&lt;p&gt;Luckily for us, Chrome 88 shipped an excellent modern image format rendering option.&lt;/p&gt;

&lt;p&gt;You can find this option in your Chrome dev tools under the Rendering tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmfdRVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505641244/4T0Sr6SR2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmfdRVZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505641244/4T0Sr6SR2.png" alt="Chrome test modern formats"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my example, I used two pictures of different cats so we can see the difference.&lt;/p&gt;

&lt;p&gt;When WebP is rendering, we should see this cute cat:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_J8W86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505757204/r0V3WdOhl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_J8W86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505757204/r0V3WdOhl.png" alt="WebP supported image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as a fallback, when we don't have WebP support, we should see this cat.jpg image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwaUy5jg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505817215/3BDD3FpCg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwaUy5jg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612505817215/3BDD3FpCg.png" alt="HTML Picture jpeg fallback"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try this out using the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/PobZJLL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;The HTML Picture element has almost full support, and don't worry, the browsers that are don't support the tag will just fall back to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; we placed inside the picture tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5h0yBsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/picture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5h0yBsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/picture.png" alt="HTML Picture element support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Avoiding race conditions and memory leaks in React useEffect</title>
      <author>saransh kataria</author>
      <pubDate>Wed, 10 Feb 2021 03:50:07 +0000</pubDate>
      <link>https://dev.to/saranshk/avoiding-race-conditions-and-memory-leaks-in-react-useeffect-3mme</link>
      <guid>https://dev.to/saranshk/avoiding-race-conditions-and-memory-leaks-in-react-useeffect-3mme</guid>
      <description>&lt;p&gt;Let us learn how to deal with the ‚ÄúCan‚Äôt perform a React state update on an unmounted component‚Äù warning&lt;/p&gt;

&lt;p&gt;Let us take a look at an implementation of getting data from an API request and see if there is any possibility of race conditions happening in this component:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect} from 'react';
export default function UseEffectWithRaceCondition() {
  const [todo, setTodo] = useState(null);
  useEffect(() =&amp;gt; {
    const fetchData = async () =&amp;gt; {
      const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
      const newData = await response.json();
      setTodo(newData);
    };
    fetchData();
  }, []);
  if (data) {
    return &amp;lt;div&amp;gt;{data.title}&amp;lt;/div&amp;gt;;
  } else {
    return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We have specified an empty array as a dependency to the &lt;a href="https://www.wisdomgeek.com/development/web-development/react/react-hooks-and-local-storage-lets-build-a-todo-app/"&gt;useEffect React hook&lt;/a&gt;. So we have ensured that the fetch request happens only once. But this component is still prone to race conditions and memory leaks. How?&lt;/p&gt;

&lt;p&gt;The memory leak will happen if the API server took some time to respond and the component was unmounted before the response was received. Though the component was unmounted, the response to the request will still be received on completion. The response will then be parsed and setTodo will be called. And React will throw the warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can‚Äôt perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the message is pretty straightforward.&lt;/p&gt;

&lt;p&gt;Another potential scenario of the same problem could have been that the todo list ID was being passed in as a prop.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useEffect} from 'react';
export default function UseEffectWithRaceCondition( {id} ) {
  const [todo, setTodo] = useState(null);
  useEffect(() =&amp;gt; {
    const fetchData = async () =&amp;gt; {
      const response = await fetch(`https://jsonplaceholder.typicode.com/todos/${id}`);
      const newData = await response.json();
      setTodo(newData);
    };
    fetchData();
  }, [id]);
  if (data) {
    return &amp;lt;div&amp;gt;{data.title}&amp;lt;/div&amp;gt;;
  } else {
    return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If the hook received a different ID before the request finished and the second request finishes before our first one, we would have been shown the data for the first request in the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#potential-solutions-to-the-race-condition-problem" class="anchor"&gt;
  &lt;/a&gt;
  Potential solutions to the race condition problem
&lt;/h2&gt;

&lt;p&gt;There are a couple of ways to fix this. Both the approaches take advantage of the cleanup function that useEffect provides.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can use a boolean flag to ensure that the component is mounted. This way we only update state if the flag is true. And if we were making multiple requests inside a component, we would always display the data for the last one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can use AbortController to cancel previous requests whenever the component is being unmounted. AbortController is not supported in IE though. So we need to think about that if we are to use this approach.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useeffect-cleanup-with-boolean-flag" class="anchor"&gt;
  &lt;/a&gt;
  useEffect cleanup with boolean flag
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
  let isComponentMounted = true;
    const fetchData = async () =&amp;gt; {
      const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
      const newData = await response.json();
      if(isComponentMounted) {
        setTodo(newData);
      }
    };
    fetchData();
    return () =&amp;gt; {
      isComponentMounted = false;
    }
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This fix relies on the way the cleanup function for useEffect works. If a component renders multiple times, the previous effect is cleaned up before executing the next effect.&lt;/p&gt;

&lt;p&gt;Because of the way this works, it will also work correctly for our other example of multiple requests because of the ID being changed. We somewhat still have a race condition in the sense that there would be multiple requests that would be in flight in the background. But only the results from the last request will be displayed on the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useeffect-cleanup-with-abortcontroller" class="anchor"&gt;
  &lt;/a&gt;
  useEffect cleanup with AbortController
&lt;/h2&gt;

&lt;p&gt;Though the previous approach works, it is not the best way to handle race conditions. The requests are in-flight in the background. Having stale requests in the background is unnecessary consumption of the user‚Äôs bandwidth. And the browser limits the maximum number of concurrent requests (maximum of 6‚Äì8) as well.&lt;/p&gt;

&lt;p&gt;From our previous post about &lt;a href="https://www.wisdomgeek.com/development/web-development/javascript/how-to-cancel-http-fetch-request/"&gt;how to cancel an HTTP fetch request&lt;/a&gt;, we know about the AbortController API that was added to the DOM standard. We can make use of that to abort our requests altogether itself.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;useEffect(() =&amp;gt; {
  let abortController = new AbortController();
    const fetchData = async () =&amp;gt; {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1', {
            signal: abortController.signal,
          });
      const newData = await response.json();
        setTodo(newData);
      }
      catch(error) {
         if (error.name === 'AbortError') {
          // Handling error thrown by aborting request
        }
      }
    };
    fetchData();
    return () =&amp;gt; {
      isComponentMounted = false;
    }
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Since aborting a request throws an error, we need to explicitly handle it.&lt;/p&gt;

&lt;p&gt;And this solution works like the previous one. The cleanup function is executed before executing the next effect in case of a re-render. The difference is that the browser cancels the request as well since we are using AbortController.&lt;/p&gt;

&lt;p&gt;And those are the two ways we can avoid race conditions while making API requests using React‚Äôs useEffect hook. If you want to use some third party libraries that allow cancelation of requests as a feature, you can use Axios or react query which provide a lot of other features as well.&lt;/p&gt;

&lt;p&gt;If you have any questions, drop a comment below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.wisdomgeek.com/development/web-development/react/avoiding-race-conditions-memory-leaks-react-useeffect/"&gt;https://www.wisdomgeek.com&lt;/a&gt; on February 8, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Display a GitHub repo in VSCode without cloning it üí™</title>
      <author>Raphael MANSUY</author>
      <pubDate>Wed, 10 Feb 2021 02:31:05 +0000</pubDate>
      <link>https://dev.to/raphaelmansuy/one-second-to-read-github-code-with-vs-code-n6b</link>
      <guid>https://dev.to/raphaelmansuy/one-second-to-read-github-code-with-vs-code-n6b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#github1s-one-second-to-read-github-code-with-vs-code" class="anchor"&gt;
  &lt;/a&gt;
  github1s One second to read GitHub code with VS Code
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Github1s&lt;/strong&gt; stands for &lt;strong&gt;One second to read GitHub code with VS Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today I discovered a small project on GitHub that allows you to easily read a git repository in VSCode without cloning it.&lt;/p&gt;

&lt;p&gt;üëâ &lt;a href="https://github.com/conwnet/github1s"&gt;&lt;strong&gt;Github1s&lt;/strong&gt;&lt;/a&gt; allows you to read a GitHub project with an online version of VSCode.&lt;/p&gt;

&lt;p&gt;üëâ You just need to add &lt;strong&gt;1s&lt;/strong&gt; after GitHub and press Enter in browser address bar for any repository you want to read.&lt;/p&gt;

&lt;p&gt;For example, for the repository &lt;a href="https://github.com/matchabot/matcha-bot"&gt;https://github.com/matchabot/matcha-bot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add 1s to GitHub and the address becomes &lt;a href="https://github1s.com/matchabot/matcha-bot"&gt;https://github1s.com/matchabot/matcha-bot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyKJhbus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/blob/main/github/screen1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyKJhbus--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/blob/main/github/screen1.png%3Fraw%3Dtrue" alt="Screen Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The project is available at &lt;a href="https://github.com/conwnet/github1s"&gt;https://github.com/conwnet/github1s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy üéâ &lt;/p&gt;

&lt;p&gt;Credits for the picture &lt;br&gt;
&lt;a href="https://unsplash.com/@yancymin"&gt;Yancy Min&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For github1s&lt;br&gt;
&lt;a href="https://github.com/conwnet"&gt;conwnet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to have a professional online appearance</title>
      <author>Jack Kelly</author>
      <pubDate>Wed, 10 Feb 2021 01:54:34 +0000</pubDate>
      <link>https://dev.to/jackrkelly/how-to-have-a-professional-online-appearance-39gk</link>
      <guid>https://dev.to/jackrkelly/how-to-have-a-professional-online-appearance-39gk</guid>
      <description>&lt;p&gt;If you're struggling to get a job as a developer/designer, this article may have a couple of things you should consider changing to improve your chances. As a developer/designer, and especially one that is looking for a job, presenting yourself online is very important when it comes to getting a job.&lt;/p&gt;

&lt;p&gt;A few things that I will be covering are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A online portfolio&lt;/li&gt;
&lt;li&gt;A professional resume&lt;/li&gt;
&lt;li&gt;A email signature&lt;/li&gt;
&lt;li&gt;Documenting your findings&lt;/li&gt;
&lt;li&gt;A GitHub with some interesting projects&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-online-portfolio" class="anchor"&gt;
  &lt;/a&gt;
  A online portfolio
&lt;/h2&gt;

&lt;p&gt;I think having an online portfolio to showcase what you do and what you've done is easily one of the most important aspects of presenting yourself. Even if you're primarily a back-end developer and don't think you have any strong design skills, I encourage you to create an online portfolio. A couple of aspects that I focus on when creating the portfolio are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep the portfolio clean and concise

&lt;ul&gt;
&lt;li&gt;Some visitors may leave after a few seconds if they're not finding what they need quickly.&lt;/li&gt;
&lt;li&gt;Make sure they know what you do, and what your desired role is.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Have a professional design

&lt;ul&gt;
&lt;li&gt;If you're not a designer/front-end developer that is ok. You may want to look into hiring a designer to make a design for you. You could also use a content management system to build your portfolio, or you could find a template online.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Have a professional domain

&lt;ul&gt;
&lt;li&gt;Having a custom domain that isn't a subdomain of others shows that you are serious and professional. If you are a student you can get a free domain and some other perks with the &lt;a href="https://education.github.com/pack"&gt;Github student developer pack&lt;/a&gt;. If you're not a student, you can find some cheap domains around a couple dollars.&lt;/li&gt;
&lt;li&gt;Along with having a professional domain, you should also have a professional email. My domain is "jrk.digital" so I set up email forwarding on "&lt;a href="mailto:me@jrk.digital"&gt;me@jrk.digital&lt;/a&gt;" using &lt;a href="https://improvmx.com/"&gt;ImproveMX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Include a simple contact form

&lt;ul&gt;
&lt;li&gt;Having a contact form allows for visitors to quickly send a message to you without leaving your page.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Make a captivating intro

&lt;ul&gt;
&lt;li&gt;Your portfolio has to be interesting, if it looks like every other developer's portfolio there is no reason for the hiring manager to be interested. You could look on some digital design sites such as &lt;a href="https://dribbble.com/"&gt;dribbble&lt;/a&gt; to get some design ideas for your portfolio.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Include some of your work/projects

&lt;ul&gt;
&lt;li&gt;Make sure that the viewer can easily understand your skillset and some work that you've done so they know what you're capable of.&lt;/li&gt;
&lt;li&gt;If you're able to, a live preview of the website would be preferable. People like to interact with what you've created to better decide whether or not they believe you have built a good project. A few sites you can host sites for free on are &lt;a href="https://www.netlify.com/"&gt;netlify&lt;/a&gt;, &lt;a href="https://www.heroku.com/"&gt;heroku&lt;/a&gt;, and &lt;a href="https://vercel.com/"&gt;vercel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you cannot get a live version of the site hosted, a video preview will work as a substitute.&lt;/li&gt;
&lt;li&gt;You should make sure to include the code for these projects as well, which will allow them to decide whether or not they think you write clean and efficient code.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a screenshot of my &lt;a href="https://jrk.digital"&gt;portfolio site&lt;/a&gt;. I made a mockup in Adobe XD and then built it with React.js and Typescript. The code for my portfolio can be viewed on my &lt;a href="https://github.com/JackRKelly/Portfolio"&gt;Github Portfolio Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4LfOaD-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vvrfgs6t42xxyahpkat8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4LfOaD-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vvrfgs6t42xxyahpkat8.png" alt="Jack Kelly's Portfolio Website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-professional-resume" class="anchor"&gt;
  &lt;/a&gt;
  A professional resume
&lt;/h2&gt;

&lt;p&gt;Having a professional yet creative resume may be very crucial for some front-end developers/designers. As for back-end developers, you will want to focus less on the design and try to be as informative and concise as possible, though being concise and informative is a quality of any good resume.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General information

&lt;ul&gt;
&lt;li&gt;Include a header of some sort to signify the job title that you are looking for, your name, and some quick links.&lt;/li&gt;
&lt;li&gt;I make sure to include my email, phone number, and website. I also include a couple of my social links such as Github, LinkedIn, and Devto.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Skills

&lt;ul&gt;
&lt;li&gt;Include a list of the technologies that you're proficient in/have used previously&lt;/li&gt;
&lt;li&gt;Make sure you don't rank yourself in each skill, I see this quite a lot but you could be shooting yourself in the foot by doing this. What you would rank yourself as a "5/10", the hiring manager may think is a "7/10", and now you just didn't get the job because of that.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Projects

&lt;ul&gt;
&lt;li&gt;Include a list of projects you have worked on previously that viewers will find impressive&lt;/li&gt;
&lt;li&gt;A good format for doing such may be the project title, a little description of the project, technologies used, and some links such as Code, Preview, and Live.&lt;/li&gt;
&lt;li&gt;Make sure that you built these projects from scratch. There are plenty of tutorials out there for building generic full-stack web applications and if you include a simple tic tac toe application, the hiring manager might not be too impressed.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Experience

&lt;ul&gt;
&lt;li&gt;Make sure to include all/most of your related professional experience in this section, this will help the viewer get an even better understanding of your background and what you can do.&lt;/li&gt;
&lt;li&gt;Make sure you include some of the tasks you completed at the job, and make sure to include some numbers and statistics. Everyone loves a quantifiable statistic that can help them understand the impact you've had.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Education

&lt;ul&gt;
&lt;li&gt;For developers who completed a formal degree program this will most definitely help you show that you have dedication and determination. For self-taught developers listing your high school may not be necessary, but that is up to you to decide on.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a screenshot of my &lt;a href="https://jrk.digital/pdf/jack-kelly-resume.pdf"&gt;resume&lt;/a&gt;, I designed this in Adobe Illustrator and added the links/metadata in Adobe Acrobat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5hKxp_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ljchy1uimokfvf0p9b0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5hKxp_y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ljchy1uimokfvf0p9b0.png" alt="Jack Kelly's Resume"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-professional-email-signature" class="anchor"&gt;
  &lt;/a&gt;
  A professional email signature
&lt;/h2&gt;

&lt;p&gt;A small point, but one that shows you are willing to take the extra step to present yourself as professionally as possible. Having a professional email signature will help others keep in touch with some of your other contacts/media such as your portfolio site, your phone number, or your email. This can even easily be done in Gmail.&lt;/p&gt;

&lt;p&gt;Below is my raw email signature with placeholder information, and a screenshot of my email signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Your Name
Job Title
123-123-1234 | email@email.com | https://website.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ilbUeLc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kaf9ma0pisqz9pz2jerk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilbUeLc2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kaf9ma0pisqz9pz2jerk.png" alt="Jack Kelly's Email Signature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documenting-your-findings" class="anchor"&gt;
  &lt;/a&gt;
  Documenting your findings
&lt;/h2&gt;

&lt;p&gt;Writing articles on topics you spent time learning is very valuable for the development community as a whole, and yourself. Writing an in-depth article on a topic you've learned requires you to take a deeper dive into the technology to provide the best possible explanation. This will also allow potential hiring managers/colleages to get a better idea of what you are interested and how you explain things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-github-with-some-interesting-projects" class="anchor"&gt;
  &lt;/a&gt;
  A GitHub with some interesting projects
&lt;/h2&gt;

&lt;p&gt;For developers specifically, you will want to have some public projects that you have worked on to showcase what you can do. If hiring managers are unable to see the code you write, it is that much harder for them to want to hire you. You should include a few projects that aren't just copied from a tutorial. These should be projects unique to you, and based on something that you find interesting. You may also want to spend some time creating a unique and valuable readme for your profile, this can be done by naming a repository the same as your GitHub username and creating a file named &lt;code&gt;README.md&lt;/code&gt;. Shown below is an image of &lt;a href="https://github.com/JackRKelly/JackRKelly"&gt;my readme&lt;/a&gt;, it is nothing too special but it does its job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWU2SbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s56c8m22cfwlaxjydtsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADWU2SbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s56c8m22cfwlaxjydtsp.png" alt="Jack Kelly's Github Readme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for taking the time to read this article, I hope you found this helpful! Feel free to contact me if you have any questions or would like me to take a look at your resume, portfolio, or anything of the likings. Also leave any comments if you have any suggestions or additions to this list.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build an API using Node.js step-by-step </title>
      <author>Michael Crump</author>
      <pubDate>Tue, 09 Feb 2021 23:31:47 +0000</pubDate>
      <link>https://dev.to/mbcrump/build-an-api-using-node-js-step-by-step-3alg</link>
      <guid>https://dev.to/mbcrump/build-an-api-using-node-js-step-by-step-3alg</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I've been streaming a mixture of security and programming related topics on my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch Stream&lt;/a&gt; and I've recently built an API using Node.js that receives data from a Firefox extension. I recorded part one and thought I'd share it in case you are interested in a easy to learn tutorial that you can go through at your own pace. With the mini-series, I've taken the approach of building the app over a set of videos that incorporate the skills to be a effective with Node.js, using external and internal libraries, and using JavaScript to create a Firefox extension.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1 - Build the server using Node.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video (22 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DTJ49J4geQg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Stay tuned for &lt;a href="https://twitch.tv/mbcrump"&gt;future streams&lt;/a&gt; as we build out additional functionality of this apps or you can watch the condensed version by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>node</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Pro Ruby Developers Customize VS Code</title>
      <author>AppMap Ruby</author>
      <pubDate>Tue, 09 Feb 2021 23:15:41 +0000</pubDate>
      <link>https://dev.to/appmapruby/how-pro-ruby-developers-customize-vs-code-2hee</link>
      <guid>https://dev.to/appmapruby/how-pro-ruby-developers-customize-vs-code-2hee</guid>
      <description>&lt;p&gt;I recently asked twenty-five professional, freelance Ruby developers about their favorite extensions for Visual Studio Code. &lt;/p&gt;

&lt;p&gt;This wasn't a formal survey, just a way to dig into what makes for a great VS Code extension and use that to inform the design of our own &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap&lt;/a&gt; extension.&lt;/p&gt;

&lt;p&gt;I tallied the results and a clear picture emerged about which extensions were top of mind for Ruby developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-most-popular-responses" class="anchor"&gt;
  &lt;/a&gt;
  The most popular responses
&lt;/h3&gt;

&lt;p&gt;These are the heavyweights. No big surprises, but it was interesting to see these names appear with such consistency. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=misogi.ruby-rubocop"&gt;&lt;strong&gt;Rubocop&lt;/strong&gt;&lt;/a&gt; - A VS Code interface for the Rubocop static code analyzer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/a&gt; - JavaScript Linter. With close to thirteen million downloads, we are all well aware of this one.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/a&gt; - Text formatter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby"&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/a&gt; - Provides enhanced Ruby support specific to VS Code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;&lt;strong&gt;GitLens&lt;/strong&gt;&lt;/a&gt; - Provides enhanced Git support specific to VS Code.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#there-was-a-dropoff-and-the-results-got-more-varied" class="anchor"&gt;
  &lt;/a&gt;
  There was a dropoff and the results got more varied
&lt;/h3&gt;

&lt;p&gt;These extensions are not necessarily less popular in terms of sheer download numbers. They were just not top of mind for these developers. Part of being a great extension is seamlessly blending into and improving an existing workflow. Consequently, some of the best extensions are nearly invisible and rarely thought about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=aliariff.vscode-erb-beautify"&gt;&lt;strong&gt;ERB Formatter&lt;/strong&gt;&lt;/a&gt; - Provides syntax formatting for ERB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode"&gt;&lt;strong&gt;Intellicode&lt;/strong&gt;&lt;/a&gt; - AI-assisted development for Java, C#, Python, and a handful of other languages, but not Ruby. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker"&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt; - A VS Code interface for managing containers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=castwide.solargraph"&gt;&lt;strong&gt;Ruby Solargraph&lt;/strong&gt;&lt;/a&gt; - Provides code completion and inline docs for Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;&lt;strong&gt;Live Share&lt;/strong&gt;&lt;/a&gt; - Enables real-time collaborative coding. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#incredibly-useful-extensions-that-are-not-new-but-were-new-to-me" class="anchor"&gt;
  &lt;/a&gt;
  Incredibly useful extensions that are not &lt;em&gt;new&lt;/em&gt; but were new to me
&lt;/h3&gt;

&lt;p&gt;These are two extensions that I discovered during this exercise and added to my own toolkit. I was definitely late to the party on these, but happy to have them now. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek"&gt;&lt;strong&gt;CSS Peek&lt;/strong&gt;&lt;/a&gt; - Jump directly to CSS definitions from an &lt;code&gt;id&lt;/code&gt; or &lt;code&gt;class name&lt;/code&gt; in HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight"&gt;&lt;strong&gt;Todo highlight&lt;/strong&gt;&lt;/a&gt; - Highlight &lt;code&gt;TODO&lt;/code&gt; in your code. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-obscure-indie" class="anchor"&gt;
  &lt;/a&gt;
  The obscure indie
&lt;/h3&gt;

&lt;p&gt;Simple but so useful. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=aki77.rails-routes"&gt;&lt;strong&gt;Rails Routes&lt;/strong&gt;&lt;/a&gt; - Jump to a route definition from wherever it is being called in the code&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;One well-known developer responded to my question by pasting his &lt;code&gt;plugins.json&lt;/code&gt; file into a DM. It actually ended up being interesting to pick through. Kind of like watching the credits of a movie. &lt;a href="https://gist.github.com/Daniel-Warner-X/108bde41d2768b54e0511a56bc09e748"&gt;Check it out&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;If you have any extensions that you really like and think would be useful to a Ruby developer, please comment.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-raw-data" class="anchor"&gt;
  &lt;/a&gt;
  The raw data
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Extension&lt;/th&gt;
&lt;th&gt;Developer&lt;/th&gt;
&lt;th&gt;Mentions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rubocop&lt;/td&gt;
&lt;td&gt;Misogi&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prettier&lt;/td&gt;
&lt;td&gt;Prettier&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESlint&lt;/td&gt;
&lt;td&gt;Dirk Baeumer&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VSCode Ruby&lt;/td&gt;
&lt;td&gt;Stafford Bunk&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;Peng Lv&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GitLens&lt;/td&gt;
&lt;td&gt;Eric Amodio&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ERB Formatter&lt;/td&gt;
&lt;td&gt;Ali Ariff&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intellicode&lt;/td&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Docker&lt;/td&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solargraph&lt;/td&gt;
&lt;td&gt;Castwide&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Live Share&lt;/td&gt;
&lt;td&gt;Microsoft&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ERB&lt;/td&gt;
&lt;td&gt;Craig Maslowski&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Live Server&lt;/td&gt;
&lt;td&gt;Ritwick Dey&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bracket Pair Colorizer&lt;/td&gt;
&lt;td&gt;CoenraadS&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto Close Tag&lt;/td&gt;
&lt;td&gt;Jun Han&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vetur&lt;/td&gt;
&lt;td&gt;Pine Wu&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JS Code Snippets&lt;/td&gt;
&lt;td&gt;charalampos karypidis&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Peacock&lt;/td&gt;
&lt;td&gt;John Papa&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stylelint&lt;/td&gt;
&lt;td&gt;Stylelint&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boostrap 4 snippets&lt;/td&gt;
&lt;td&gt;Zaczero&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bootstrap 4, Font Awesome&lt;/td&gt;
&lt;td&gt;Ashok Koyi&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pro Snippets&lt;/td&gt;
&lt;td&gt;uncprocore&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Redux DevTools 8&lt;/td&gt;
&lt;td&gt;Jingkai&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto Rename Tag&lt;/td&gt;
&lt;td&gt;Jun han&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Lens&lt;/td&gt;
&lt;td&gt;Alexander&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Live Server&lt;/td&gt;
&lt;td&gt;Street Side Software&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Go To Spec&lt;/td&gt;
&lt;td&gt;Sporto&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Better TOML&lt;/td&gt;
&lt;td&gt;Bung cip&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VS Code Elixir&lt;/td&gt;
&lt;td&gt;Matt McLoughlin&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Better HAML&lt;/td&gt;
&lt;td&gt;Karuna Murti&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VS Code PDF&lt;/td&gt;
&lt;td&gt;tomoki1207&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Add New Line To Files&lt;/td&gt;
&lt;td&gt;Jeremy Forsythe&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS Peek&lt;/td&gt;
&lt;td&gt;Pranay Prakash&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rest Client&lt;/td&gt;
&lt;td&gt;Huachao Mao&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby Linter&lt;/td&gt;
&lt;td&gt;Cody hoover&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Simple Ruby ERB&lt;/td&gt;
&lt;td&gt;Victor Ortiz Heredia&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trailing Spaces&lt;/td&gt;
&lt;td&gt;Shardul Mahadik&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VS Code Database&lt;/td&gt;
&lt;td&gt;Bajdzis&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Todo Highlight&lt;/td&gt;
&lt;td&gt;Wayou Liu&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Endwise&lt;/td&gt;
&lt;td&gt;Kai Wood&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gem Lense&lt;/td&gt;
&lt;td&gt;ninoseki&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Routes&lt;/td&gt;
&lt;td&gt;aki77&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>vscode</category>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developing a CRUD Node.js Application with PostgreSQL</title>
      <author>Glaucia Lemos</author>
      <pubDate>Tue, 09 Feb 2021 22:39:42 +0000</pubDate>
      <link>https://dev.to/glaucia86/developing-a-crud-node-js-application-with-postgresql-4c9o</link>
      <guid>https://dev.to/glaucia86/developing-a-crud-node-js-application-with-postgresql-4c9o</guid>
      <description>&lt;p&gt;Hey all Coders! How are you doing? Today we are going to start a series of articles where we will be developing a CRUD application with Node.js &amp;amp; PostgreSQL focusing on the Back-End. After that, we will be migrating the project to serverless architecture with &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/javascript/node-howto-write-serverless-code?WT.mc_id=javascript-11915-gllemos"&gt;Azure Functions&lt;/a&gt;&lt;/strong&gt;, migrating the local database to &lt;strong&gt;&lt;a href="https://azure.microsoft.com/services/postgresql/?WT.mc_id=javascript-11915-gllemos"&gt;Azure PostgreSQL&lt;/a&gt;&lt;/strong&gt;, and finally deploying this application using &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/app-service/deploy-github-actions?WT.mc_id=javascript-11915-gllemos"&gt;GitHub Actions&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I created a repository on GitHub &lt;strong&gt;&lt;a href="https://github.com/glaucia86/nodejs-postgresql-azure"&gt;HERE&lt;/a&gt;&lt;/strong&gt;, where all the source code of this project and the resources that I will be mentioned during the 5 articles are allocated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;updated repository &lt;strong&gt;&lt;a href="https://github.com/glaucia86/employee-crud-api"&gt;HERE&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important information: the focus of the project will be on the Back-End. If, when we reach the end of the project, we want to test the Back-End API created in some application in the Front-End, I can then be creating a generic Front-End just to test the created api!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I talked a lot, let's go ?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-used-during-the-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Resources Used during the Tutorial
&lt;/h2&gt;

&lt;p&gt;I will mention here some resources that we will use during the development of this application throughout this article. Here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://code.visualstudio.com/?WT.mc_id=javascript-11915-gllemos"&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://node-postgres.com/"&gt;Package‚Ää-‚Äänode-postgres&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things that attract many developers to use PostgreSQL is that it is completely free, available on any Operating Systems, and best of all: it is completely &lt;strong&gt;&lt;a href="https://github.com/postgres"&gt;Open Source&lt;/a&gt;&lt;/strong&gt;! Countless large companies like Uber, Netflix, Spotify, Instagram, Reddit, and many others make use of PostgreSQL. That's why PostgreSQL is so popular! &lt;/p&gt;

&lt;p&gt;PostgreSQL was the first database that I learned to work with and it was with it that I learned in Database I and II classes in 2012 at the University. I always liked PostgreSQL because it is very simple and easy to use!&lt;/p&gt;

&lt;p&gt;We'll need to install PostgreSQL on our machine. But also feel free to use some Docker image to continue this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-postgresql-database" class="anchor"&gt;
  &lt;/a&gt;
  Installing PostgreSQL Database
&lt;/h2&gt;

&lt;p&gt;Well, I'll teach you here how to install PostgreSQL for different OS users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: for Windows users, just download it &lt;strong&gt;&lt;a href="https://www.postgresql.org/download/windows/"&gt;HERE&lt;/a&gt;&lt;/strong&gt;. Common and simple installation, as if you were installing a program on Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;macOS&lt;/strong&gt;: for Mac users, just download the packages &lt;strong&gt;&lt;a href="https://www.postgresql.org/download/macosx/"&gt;HERE&lt;/a&gt;&lt;/strong&gt;. Also, you will need to have &lt;strong&gt;&lt;a href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;/strong&gt; installed. If you have some issues or difficulty installing, I recommend you to take a look at this video &lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=5AOkxqFaYEE"&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;: for Linux users, as there are countless different versions of Linux, I recommend you to take a look at this PostgreSQL guide &lt;strong&gt;&lt;a href="http://postgresguide.com/setup/install.html"&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my case, I will be using Windows, since it is my main development machine. I will be using PostgreSQL version 12. After installing, just search for pgAdmin. A browser page will open on &lt;strong&gt;&lt;a href="http://127.0.0.1:16450/browser/"&gt;http://127.0.0.1:16450/browser/&lt;/a&gt;&lt;/strong&gt; and now we can start to use it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/phg5X268"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6yrz5HK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/fybcCy7H/Screen-Shot-03-01-20-at-10-01-PM.png" alt="Screen-Shot-03-01-20-at-10-01-PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-table-in-postgresql" class="anchor"&gt;
  &lt;/a&gt;
  Creating Table in PostgreSQL
&lt;/h2&gt;

&lt;p&gt;We will now create the table with the properties that will be used to persist to be used in our Back-End.&lt;/p&gt;

&lt;p&gt;The class will be: &lt;code&gt;Product&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;Class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;integer&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;product_name_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now open PgAdmin. It is likely that you will need to include the password to perform some actions within PgAdmin. It is likely that you will need to create a Database. Just create with the name you want. After you've created your database, right-click on &lt;strong&gt;Create Script&lt;/strong&gt;, and run the script below on PostgreSQL (as shown in the gif below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;productId&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;productName&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;quantity&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="nb"&gt;NUMERIC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gifyu.com/image/IKZa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2uNG-ZX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-01.gif" alt="postgresql-01.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, all you have to do is access the newly created table!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IKZt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NgxFdAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-02.gif" alt="postgresql-02.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! We have already created our table!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-application-architecture-in-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Creating the Application Architecture in Node.js
&lt;/h2&gt;

&lt;p&gt;Now that our table is created, let's create the project in Node.js. In this project, I will follow the SOLID  &amp;amp; Clean Code principle. If you want to know more about these two topics, I highly recommend you to see these 2 links below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XzdhzyAukMM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üìÑ &lt;strong&gt;&lt;a href="https://medium.com/@nanofaroque/solid-code-in-nodejs-a87685b4cdfe"&gt;SOLID Code in Node.JS&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, let's start to architect our project. Create a folder called API and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command creates a standard package.json file. And now we will install the following packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; husky nodemon

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And also install the other packages as dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm i cors dotenv express express-promise-router pg

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally, the &lt;code&gt;package.json&lt;/code&gt; file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"crud-nodejs-psql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Aplica√ß√£o CRUD com Node.js &amp;amp; PostgreSQL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --ext .js,.html -f ./node_modules/eslint-friendly-formatter . --fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prepush"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"node.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"postgresel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"azure"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"serverless"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"azure-functions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"azure-devops"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"azure-storage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"github-actions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"app-service"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"express"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Glaucia Lemos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"bugs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/glaucia86/nodejs-postgresql-azure/issues"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://github.com/glaucia86/nodejs-postgresql-azure#readme"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^6.8.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-config-airbnb-base"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^14.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-import"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.20.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.2.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.8.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dotenv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-friendly-formatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-html"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^6.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express-promise-router"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.0.3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.18.2"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create the structure of the folders and files as shown in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/9D1qwhgb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IvJ5jue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Xv6KhNwR/Screen-Shot-03-05-20-at-10-50-PM.png" alt="Screen-Shot-03-05-20-at-10-50-PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-the-application" class="anchor"&gt;
  &lt;/a&gt;
  Developing the Application
&lt;/h2&gt;

&lt;p&gt;Here after, I will not explain what each file does. Because the main focus of the article is to create a RESTful API, which in the end must be persisted in PostgreSQL.&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;&lt;a href="https://code.visualstudio.com/?WT.mc_id=devto-blog-gllemos"&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt; and let's start developing the file: server.js and include the following code block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: server.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * File: server.js
 * Description: arquivo respons√°vel por toda a configura√ß√£o e execu√ß√£o da aplica√ß√£o.
 * Data: 02/03/2020
 * Author: Glaucia Lemos
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aplica√ß√£o executando na porta &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, open the &lt;code&gt;src -&amp;gt; app.js&lt;/code&gt; file and include the code block below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: app.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rotas da API:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// const productRoute = require('./routes/product.routes');&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/vnd.api+json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// app.use('/api/', productRoute);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that in this &lt;code&gt;app.js file&lt;/code&gt;, there are several lines of code commented on, just to be able to initially execute our API and see if we are developing correctly. But, later on we will make some significant changes to this file and then uncomment these lines.&lt;/p&gt;

&lt;p&gt;And finally, open the &lt;code&gt;src -&amp;gt; routes -&amp;gt; index.js&lt;/code&gt; file and include the code block below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: src -&amp;gt; routes -&amp;gt; index.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * File: src/routes/index.js
 * Description: arquivo respons√°vel pela chamada da Api da aplica√ß√£o.
 * Data: 02/03/2020
 * Author Glaucia Lemos
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Seja bem-vindo(a) a API Node.js + PostgreSQL + Azure!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, open the command prompt inside the apifolder and run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; nodemon

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then open the postman and include the following URL in (GET): &lt;code&gt;localhost:3000/api/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/jn4yZMKC"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAxu4KFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/L5rv4Wbk/Screen-Shot-03-02-20-at-12-47-AM.png" alt="Screen-Shot-03-02-20-at-12-47-AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the screen is shown just like the one you can see above, this means our API is working correctly! Now, let's go deeper into development. Here we go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-a-little-bit-more-about-the-package-nodepostgres" class="anchor"&gt;
  &lt;/a&gt;
  Understanding a little bit more about the package: 'node-postgres'
&lt;/h2&gt;

&lt;p&gt;You may have noticed that when we installed some packages, we included the &lt;strong&gt;&lt;a href="https://node-postgres.com/"&gt;node-postgres&lt;/a&gt;&lt;/strong&gt; package. This package will be essential for us to work with the PostgreSQL Client on Node.js.&lt;/p&gt;

&lt;p&gt;This package is an &lt;strong&gt;&lt;a href="https://github.com/brianc/node-postgres"&gt;open source&lt;/a&gt;&lt;/strong&gt; project. And it has simple and straightforward documentation‚Ää-‚Ääteaching how we can implement this package in Promises or using Async / Await. It helped me a lot to develop this tutorial!&lt;/p&gt;

&lt;p&gt;I recommend reading the package documentation, which can be found here &lt;strong&gt;&lt;a href="https://node-postgres.com/features/pooling"&gt;HERE&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this project, I decided to use node-postgres rather than Sequelize, which is a widely used ORM for those who use PostgreSQL, MySQL, MariaDB, SQLite, and Microsoft SQL Server. Just to make this &lt;code&gt;project-1&lt;/code&gt; easier.&lt;/p&gt;

&lt;p&gt;As we already installed the node-postgres package at the beginning, let's move on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-environment-variable-with-dotenv" class="anchor"&gt;
  &lt;/a&gt;
  Creating an environment variable with 'dotenv'
&lt;/h2&gt;

&lt;p&gt;Another point that you may have noticed is that we also installed the dotenv package. This server package is important so that we can store our environment variables that we don't want to make available to the public when you do a &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And as how we will use the database connection string and as how this connection string has sensitive data we don't want to make it available to everyone. We will address this now in our project. To do this, follow the steps below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="n"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_username&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_password&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="k"&gt;host&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db_name&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you don't know what your PostgreSQL db_usernameis, just right click on the PgAdmin Server and go to &lt;strong&gt;Properties -&amp;gt; Connections&lt;/strong&gt; and you will find the username. See the gif below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IuWY"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Wd5txKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-03.gif" alt="postgresql-03.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-the-connection-string-to-the-database-in-the-file-databasejs" class="anchor"&gt;
  &lt;/a&gt;
  Configuring the connection string to the database in the file: 'database.js'
&lt;/h2&gt;

&lt;p&gt;Now that we have included our &lt;code&gt;connectionstring&lt;/code&gt; in the &lt;strong&gt;.env&lt;/strong&gt; file, now is time to start developing and configuring our application's database connection to PostgreSQL.&lt;/p&gt;

&lt;p&gt;To do this, open the &lt;code&gt;database.js&lt;/code&gt; file and include the following code block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;config/database.js:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Arquivo: config/database.js
 * Descri√ß√£o: arquivo respons√°vel pelas 'connectionStrings da aplica√ß√£o: PostgreSQL.
 * Data: 04/03/2020
 * Author: Glaucia Lemos
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pool&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Conex√£o com a Base de Dados:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE_URL&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Base de Dados conectado com sucesso!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This block is connecting with our connection string so that we can finally begin to persist data in PostgreSQL using Node.js.&lt;/p&gt;

&lt;p&gt;Note that we are using &lt;strong&gt;node-postgres package&lt;/strong&gt;. If you want to understand a little more about &lt;strong&gt;pg.Pool&lt;/strong&gt;, I recommend reading &lt;strong&gt;&lt;a href="https://node-postgres.com/api/pool"&gt;HERE&lt;/a&gt;&lt;/strong&gt;, as from now on we will use it a lot, including the properties of this builder!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-post-create-product" class="anchor"&gt;
  &lt;/a&gt;
  Route: (POST) 'Create Product'
&lt;/h2&gt;

&lt;p&gt;We've done the configuration of our application and we are already making the connection to the database! Now the game will start! And for that, we will develop the first route. For this, we will use a lot from now on two files: &lt;strong&gt;product.controller.js&lt;/strong&gt; and &lt;strong&gt;product.routes.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;p&gt;Include the code block below in the &lt;strong&gt;product.routes.js&lt;/strong&gt; file&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.routes.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @ts-nocheck&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Arquivo: src/routes/product.routes.js
 * Descri√ß√£o: arquivo respons√°vel pelas rotas da api relacionado a classe 'Product'.
 * Data: 04/03/2020
 * Author Glaucia Lemos
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-promise-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/product.controller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Definindo as rotas do CRUD - 'Product':&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rota respons√°vel por criar um novo 'Product': (POST): localhost:3000/api/products&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProduct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we will develop the logic of the method createProductinside the file &lt;code&gt;product.controller.js&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;controllers/product.controller.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../config/database&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; M√©todo respons√°vel por criar um novo 'Product':&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INSERT INTO products (product_name, quantity, price) VALUES ($1, $2, $3)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Product added successfully!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that we simply use the insert query in the code, just as we would in an SQL script. Just like that. And of course, to return all the values entered we put a message to confirm the created product and returning all values for that product.&lt;/p&gt;

&lt;p&gt;Now we need to update the &lt;strong&gt;app.js&lt;/strong&gt; file before testing our application. To do this, uncomment the lines where the &lt;strong&gt;product.routes&lt;/strong&gt; were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: app.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Arquivo: app.js
 * Descri√ß√£o: arquivo respons√°vel por toda a configura√ß√£o da aplica√ß√£o.
 * Data: 02/03/2020
 * Author: Glaucia Lemos
 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rotas da API:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/product.routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/vnd.api+json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productRoute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open the command prompt and type the following command into the api folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; nodemon

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now we can test our first created route. So now, open Postman at the following endpoint: (POST) &lt;strong&gt;localhost: 3000/api/products&lt;/strong&gt;, as shown in the gif below:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IucG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEe4jhLh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-04.gif" alt="postgresql-04.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the following message appears as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product added successfully!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"product"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"product_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Logitech MK270 Wireless Keyboard and Mouse Combo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"quantity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"18.99"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is because it persisted perfectly. To be sure of that, open the PgAdmin of the created table and do as shown in the gif below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IugE"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8UFon_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-05.gif" alt="postgresql-05.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect! Once we manage to create the first route, the others will be easy!,&lt;/p&gt;

&lt;p&gt;Let's keep on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-get-list-all-products" class="anchor"&gt;
  &lt;/a&gt;
  Route: (GET) 'List All Products'
&lt;/h2&gt;

&lt;p&gt;Now we are going to create the route that will list all created and persisted products in PostgreSQL. As the POST route is already created, it would be good for you if you included more data to help with future routes!&lt;/p&gt;

&lt;p&gt;Return to the &lt;strong&gt;product.routes.js&lt;/strong&gt; file again and add the route to list all products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.routes.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// ==&amp;gt; Rota respons√°vel por listar todos os 'Products': (GET): localhost:3000/api/products&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listAllProducts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, go back to the file &lt;strong&gt;product.controller.js&lt;/strong&gt; and let's develop the logic of the &lt;strong&gt;listAllProducts&lt;/strong&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.controller.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// ==&amp;gt; M√©todo respons√°vel por listar todos os 'Products':&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listAllProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM products ORDER BY product_name ASC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that the query I made here was: &lt;strong&gt;SELECT * FROM products ORDER BY product_name ASC&lt;/strong&gt;. Here I am asking to return all products persisted in PostegreSQL in alphabetical order! I did it to make it a little different! ;)&lt;/p&gt;

&lt;p&gt;Let's test it. Open Postman and see the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/Iu4g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aCuBfFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-06.gif" alt="postgresql-06.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It worked perfectly! Note that if we need to do a more elaborate SELECT with subqueries, following the logic, it will work perfectly! :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-get-list-product-by-id" class="anchor"&gt;
  &lt;/a&gt;
  Route: (GET) 'List Product by Id'
&lt;/h2&gt;

&lt;p&gt;Now, it's very easy. Just combine our knowledge of SQL with the other CRUD's that we have already created in other Node.js applications.&lt;/p&gt;

&lt;p&gt;Now let's create the route to list a specific product by Id. Again, open the file product.routes.js and include one more route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.routes.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rota respons√°vel por selecionar 'Product' pelo 'Id': (GET): localhost:3000/api/products/:id&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findProductById&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now open the file &lt;strong&gt;product.controller.js&lt;/strong&gt; and we will develop the logic of this route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.controller.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; M√©todo respons√°vel por selecionar 'Product' pelo 'Id':&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findProductById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * FROM products WHERE productid = $1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's test this route on Postman now and see what happens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/Iu6x"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXy9pLeZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-07.gif" alt="postgresql-07.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-put-update-product-by-id" class="anchor"&gt;
  &lt;/a&gt;
  Route: (PUT) 'Update Product by Id'
&lt;/h2&gt;

&lt;p&gt;Now let's go back to the &lt;strong&gt;product.routes.js&lt;/strong&gt; file to create the &lt;strong&gt;updateProductById&lt;/strong&gt; route that will be responsible for updating the product by the Id:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.routes.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rota respons√°vel por atualizar 'Product' pelo 'Id': (PUT): localhost: 3000/api/products/:id&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProductById&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's return to the &lt;strong&gt;updateProductById&lt;/strong&gt; file to develop the logic of the &lt;strong&gt;product.controller.js&lt;/strong&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.controller.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; M√©todo respons√°vel por atualizar um 'Product' pelo 'Id':&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProductById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPDATE products SET product_name = $1, quantity = $2, price = $3 WHERE productId = $4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Product Updated Successfully!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's updating perfectly! See the gif below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IWMz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0J0mHVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-08.gif" alt="postgresql-08.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go to our last route!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-delete-delete-product-by-id" class="anchor"&gt;
  &lt;/a&gt;
  Route: (DELETE) 'Delete Product by Id'
&lt;/h2&gt;

&lt;p&gt;Finally, we got to the last route of our api! Let's go back to the &lt;strong&gt;product.routes.js&lt;/strong&gt; file and create the route for the &lt;strong&gt;deleteProductById&lt;/strong&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;file: product.routes.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; Rota respons√°vel por excluir 'Product' pelo 'Id': (DELETE): localhost:3000/api/products/:id&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteProductById&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally, developing the logic of this route in the file &lt;strong&gt;product.controller.js&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;file: product.controller.js&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="c1"&gt;// ==&amp;gt; M√©todo respons√°vel por excluir um 'Product' pelo 'Id':&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteProductById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE FROM products WHERE productId = $1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;productId&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product deleted successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Everything is working perfectly, if we open PostgreSQL we will see that now we only have 5 registered products!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/IWMx"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XN2Dd-jT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s5.gifyu.com/images/postgresql-10.gif" alt="postgresql-10.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today we have learned how to create a CRUD API RESTFul with Node.js persisting locally in PostgreSQL. In the next article, I'll teach you how to deploy this application in Azure App Service! After performing this deployment we will test on Postman and consequently on Swagger!&lt;/p&gt;

&lt;p&gt;Here I would like to let some good resources about Node.js, Azure Database PostgreSQL &amp;amp; GitHub Actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/build-javascript-applications-nodejs/?WT.mc_id=javascript-11915-gllemos"&gt;Build JavaScript applications with Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/postgresql/?WT.mc_id=javascript-11915-gllemos"&gt;Azure Database for PostgreSQL documentation&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/postgresql/quickstart-create-server-database-portal?WT.mc_id=javascript-11915-gllemos"&gt;Quickstart: Create an Azure Database for PostgreSQL server by using the Azure portal&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/postgresql/tutorial-design-database-hyperscale-realtime?WT.mc_id=javascript-11915-gllemos"&gt;Tutorial: Design a real-time analytics dashboard by using Azure Database for PostgreSQL ‚Äì Hyperscale (Citus)&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/developer/javascript/?WT.mc_id=javascript-11915-gllemos&amp;amp;view=azure-node-latest"&gt;Azure for JavaScript &amp;amp; Node.js developers&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/?WT.mc_id=javascript-11915-gllemos"&gt;Free E-Book - Azure Serverless Computing Cookbook&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;‚úÖ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/?WT.mc_id=javascript-11915-gllemos"&gt;Free Course - Create Serverless Applications&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to stay on top of several other news, be sure to follow me on Twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/glaucia_lemos86"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TRF6AJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code4coders.files.wordpress.com/2019/05/image-12.png" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And subscribe on my &lt;strong&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;Youtube Channel - Glaucia Lemos&lt;/a&gt;&lt;/strong&gt; to see weekly new videos about Web Development, Node.js &amp;amp; JavaScript!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTWdv_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/pr3TL4Pd/Screen-Shot-12-31-20-at-01-06-AM.png" alt="Screen-Shot-12-31-20-at-01-06-AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you! üòç&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>node</category>
      <category>postgres</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
