<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Sentiment Analysis With üêç. Making Your First Sentiment Analysis Script.</title>
      <author>Code_Jedi</author>
      <pubDate>Sun, 12 Dec 2021 20:22:14 +0000</pubDate>
      <link>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</link>
      <guid>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</guid>
      <description>&lt;p&gt;Do you want to perform sentiment analysis with Python but don't know how to get started? Not to worry. In this article, I'll demonstrate and explain how you can make your own sentiment analysis app, even if you are new to Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-sentiment-analysis"&gt;
  &lt;/a&gt;
  What Exactly Is Sentiment Analysis?
&lt;/h2&gt;

&lt;p&gt;If you've been following programming and data science, you'll probably be familiar with sentiment analysis. If you're not, here the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The process of computationally identifying and categorizing opinions expressed in a piece of text, especially in order to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sentiment analysis programs have become increasingly popular in the tech world. It's time you make one for yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  Educative
&lt;/h2&gt;

&lt;p&gt;Before I get on with the article, I'd like to recommend &lt;a href="https://bit.ly/3rVIDoN"&gt;Educative&lt;/a&gt; for learners like you.&lt;br&gt;
&lt;strong&gt;Why Educative?&lt;/strong&gt;&lt;br&gt;
It is home to hundreds of development courses, hands on tutorials, guides and demonstrations to help you stay ahead of the curve in your development journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get started with Educative &lt;a href="https://bit.ly/3EeDfAi"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#making-a-simple-sentiment-analysis-script"&gt;
  &lt;/a&gt;
  Making A Simple Sentiment Analysis Script
&lt;/h1&gt;

&lt;p&gt;Let's make a simple sentiment analysis script with Python. What will it do? &lt;br&gt;
It will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scrape news headlines from BBC news.&lt;/li&gt;
&lt;li&gt;Get rid of unwanted scraped elements and duplicates.&lt;/li&gt;
&lt;li&gt;Scan every headline for words that may indicate it's sentiment.&lt;/li&gt;
&lt;li&gt;Based on the found words, determine each headline's sentiment.&lt;/li&gt;
&lt;li&gt;Aggregate the headlines into different arrays based on their sentiment.&lt;/li&gt;
&lt;li&gt;Print the number of scraped headlines and number of headlines with a positive, negative and neutral sentiment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new Python file with your favorite text-editor. You can name it however you want, but I'll name the file &lt;em&gt;main.py&lt;/em&gt; for this tutorial.&lt;br&gt;
Before writing the main code, make sure to install(if not already installed) and import the following libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-dataset"&gt;
  &lt;/a&gt;
  The Dataset
&lt;/h2&gt;

&lt;p&gt;A sentiment analysis script needs a dataset to train on.&lt;br&gt;
Here's &lt;a href="https://github.com/matveynikon/Sentiment-Analysis-With-Python/blob/main/sentiment.csv"&gt;the dataset&lt;/a&gt; that I made for this script. I've tested it and found it to work well.&lt;br&gt;
To work with this tutorial, make sure to download this dataset, move it into your Python file's directory and add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you take a look at this dataset, you'll notice that it's just over 100 lines long. Each line contains a number, 1 or 0 and a word.&lt;br&gt;
The number just gives a way for the Python file to paddle through each word, the word is what is going to indicate a headline's sentiment, and the 1 or 0 indicates whether the word has negative(0) or positive(1) sentiment.&lt;br&gt;
This isn't a lot, but it is enough to perform accurate sentiment analysis on news headlines, which are typically only about 6-10 words long. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scraping-the-news-headlines"&gt;
  &lt;/a&gt;
  Scraping The News Headlines
&lt;/h2&gt;

&lt;p&gt;Here's the code that is going to scrape the news headlines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this is not a web scraping tutorial, you don't have to understand what's happening here. In case you are interested in how this works, here's a tutorial on how to &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;scrape news headlines with Python in &amp;lt;10 lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before performing sentiment analysis on the scraped headlines, add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;unwanted&lt;/em&gt; array contains elements that will be scraped from BBC news, that are not news headlines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performing-sentiment-analysis"&gt;
  &lt;/a&gt;
  Performing Sentiment Analysis
&lt;/h2&gt;

&lt;p&gt;It's time to write the code which will perform sentiment analysis on the scraped headlines.&lt;br&gt;
Add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, it defines the &lt;em&gt;neutral&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; and &lt;em&gt;good&lt;/em&gt; arrays.&lt;/li&gt;
&lt;li&gt;While paddling through every scraped headline element, it checks if it's not inside the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;li&gt;It appends the headline to the &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why it checks if the headline is in the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array is to exclude non-headline elements and prevent duplicate headlines to be analyzed more than once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's perform sentiment analysis on the news headlines by adding the following code to the &lt;code&gt;if x.text.strip() not in unwanted and x.text.strip() not in news:&lt;/code&gt; condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i in range(len(df['n'])):
        if sen[i] in x.text.strip().lower():
            if cat[i] == 0:
                bad.append(x.text.strip().lower())
            else:
                good.append(x.text.strip().lower())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, the &lt;code&gt;for i in range(len(df["n"])):&lt;/code&gt; loop makes sure to search the headlines for any of the words in the &lt;em&gt;sentiment.csv&lt;/em&gt; dataset.&lt;/li&gt;
&lt;li&gt;If a word from the dataset is found in the headline using the &lt;code&gt;if sen[i] in x.text.strip().lower():&lt;/code&gt; condition, the &lt;code&gt;if cat[i] == 0:&lt;/code&gt; condition then finds if the found word has a negative or positive sentiment and adds the headline to either the &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;good&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;lower()&lt;/code&gt; function converts all the letters inside the headlines to lowercase. This is done because the word search algorithm is case sensitive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theres-one-thing-left-to-do"&gt;
  &lt;/a&gt;
  There's one thing left to do.
&lt;/h3&gt;

&lt;p&gt;Add the following code to the end of your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the number of scraped headlines and the number of headlines with a bad, good and neutral sentiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;Here's the full sentiment analysis code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())

badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run your Python file containing the above code, you will see an output similar to the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" alt="Output" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial has successfully demonstrated how you can perform sentiment analysis with Python.&lt;/p&gt;

&lt;p&gt;Byeeeeüëã&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Stacks</title>
      <author>sndp</author>
      <pubDate>Sun, 12 Dec 2021 19:44:50 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/stacks-1ian</link>
      <guid>https://dev.to/lizardkinglk/stacks-1ian</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-stacks-"&gt;
  &lt;/a&gt;
  What are stacks ?
&lt;/h1&gt;

&lt;p&gt;A stack is a data structure that serves according to last-in first-out (LIFO) mechanism. To understand this, imagine a scenario where someone putting some objects sequentially in some container to retreive at a later time. But they will happen to take the last object first, and then second to last and so on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-we-imagine-something-similar"&gt;
  &lt;/a&gt;
  Can we imagine something similar?
&lt;/h3&gt;

&lt;p&gt;A pistol magazine (in a video game) is a correct scenario because last round will be fired first. We can see it works according to stacks. &lt;/p&gt;

&lt;p&gt;In programming scene, a stack has many uses, including,&lt;br&gt;
i. Memory management.&lt;br&gt;
ii. Reversing an array/reordering an array.&lt;br&gt;
iii. To check the validation of an expression.&lt;br&gt;
iv. Implementing rollback option as a function.&lt;/p&gt;

&lt;p&gt;In addition, web browser and windows in operating system also uses stacks to manage memory.&lt;/p&gt;

&lt;p&gt;A stack is an abstract data type which means the logic can be applied to user-defined scenarios by the user itself. &lt;br&gt;
This is similar to implementing an abstract method definition as a concrete function. Therefore imagine abstract data type is a logic and we implement that logic ourself in code for our scenario.&lt;/p&gt;

&lt;p&gt;A stack design has the following methods need to be implemented.&lt;br&gt;
i. push&lt;br&gt;
ii. pop&lt;br&gt;
iii. peek&lt;br&gt;
iv. isEmpty&lt;/p&gt;

&lt;p&gt;We use arrays to implement these methods. I'll refer the array as container and its values as objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the object inside the parameters will be added to the container. Push is like inserting an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item entered to the container will be removed and will be sent to user. Pop is like removing an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;seek
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item will be returned to the user. It will not get removed from the container. Seek is for displaying the last item in the container when user needed to check.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;isEmpty
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the user will know whether the container is empty or not.&lt;/p&gt;

&lt;p&gt;Know that a container's size can be user-defined or it can be a value of a predefined constant when implemented using arrays.&lt;/p&gt;

&lt;p&gt;Let's assume we have implemented a MyStack class with a container's object type of int to save numbers with a user-defined container size of five.&lt;/p&gt;

&lt;p&gt;So it will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyStack stack = new MyStack(5);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add some random five numbers and another number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stack.push(11);
stack.push(87);
stack.push(43);
stack.push(117);
stack.push(-96);

stack.push(68);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be possible to insert first five values and after that it will show a message that saying we cannot add further objects to our container. Therefore value 68 will not get pushed.&lt;/p&gt;

&lt;p&gt;Now let's try popping an item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int popped = stack.pop();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we print the variable defined as popped above, it will return the last number inserted which is -96.&lt;/p&gt;

&lt;p&gt;Now remove the next remaining items also and try popping one more time. &lt;br&gt;
Therefore if we called pop four and one more time it will show a message that says we cannot pop any further. At this time our stack is empty and isEmpty will return true.&lt;/p&gt;

&lt;p&gt;If printed the values returned at each time you will see it is the opposite of the inserted order which means we have our stack working correctly and last-in first-out rule is in effect. &lt;/p&gt;

&lt;p&gt;Learn more about stack implementation using following links&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/stack-data-structure-introduction-program/"&gt;https://www.geeksforgeeks.org/stack-data-structure-introduction-program/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>Setting-up Angular Routing From Scratch</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 12 Dec 2021 19:26:12 +0000</pubDate>
      <link>https://dev.to/anubhab5/setting-up-angular-routing-from-scratch-1i07</link>
      <guid>https://dev.to/anubhab5/setting-up-angular-routing-from-scratch-1i07</guid>
      <description>&lt;p&gt;According to Wikipedia Routing in layman's language is -&lt;br&gt;
"&lt;strong&gt;... the process of selecting a path for traffic ‚Ä¶&lt;/strong&gt;".&lt;br&gt;
If we talk in Angular context, in a large application there will be multiple components combined together to form a feature (e.g. login, dashboard, user profile etc.). But we cannot show all the feature to the user at the same time. Depending on a particular case we will be displaying a specific feature to the user. This process of selecting and displaying a specific feature for a specific path is known as routing. Angular implements routing using a separate module called RoutingModule. So lets quickly dive into how we can set up angular routing in our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; - Creating an angular project&lt;br&gt;
Create an angular project by typing in the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new learn-angular-routing-setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would be prompted with a question like below - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tv99hXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rnt59lj23i0iylz8hx6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tv99hXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rnt59lj23i0iylz8hx6.PNG" alt="Image description" width="569" height="90"&gt;&lt;/a&gt;&lt;br&gt;
You can opt for no by typing in &lt;strong&gt;N&lt;/strong&gt;, as we are learning how to setup Routing from scratch. :P and complete the installation process.&lt;br&gt;
Once the setup is done open the code folder in your favorite code editor. I have chosen VS Code. It would look something like below - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNjSmSSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2fv1axd0do4may9ysuj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNjSmSSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2fv1axd0do4may9ysuj.PNG" alt="Image description" width="600" height="745"&gt;&lt;/a&gt;&lt;br&gt;
Now under _src _&amp;gt; _app _folder we start our real work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; - Create components to be displayed on each route&lt;br&gt;
Now lets create two components by using the below command -&lt;br&gt;
First Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate component componentOne
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second Component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng generate component componentTwo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; - Creating the application routing module&lt;br&gt;
Inside the app folder create a file named - &lt;br&gt;
&lt;u&gt;app-routing.module.ts&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; - Setting up the routing module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from "@angular/core";
import { RouterModule, Routes } from '@angular/router';
import { ComponentOneComponent } 
        from "./component-one/component-one.component";
import { ComponentTwoComponent } 
        from "./component-two/component-two.component";

const routes: Routes = [
    {
        path: 'one',
        component: ComponentOneComponent
    },
    {
        path: 'two',
        component: ComponentTwoComponent
    }
];

@NgModule({
    declarations: [],
    imports: [
        RouterModule.forRoot(routes)
    ],
    providers: [],
    exports: [
        RouterModule
    ],
    bootstrap: []
})
export class AppRoutingModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, now lets understand the above code piece by piece.&lt;/p&gt;

&lt;p&gt;a. We are declaring and exporting a class AppRoutingModule.&lt;br&gt;
b. Decorating the class with NgModule decorator &lt;br&gt;
c. Declaring a constant &lt;code&gt;routes&lt;/code&gt; array. It contains all the various routes you need in your application. Every route object will contain primarily two items (I would say as of now)&lt;br&gt;
  i. path-to be displayed in the url of the browser&lt;br&gt;
  ii. component-the component to be displayed when the URL is hit&lt;br&gt;
d. In the import array of the NgModule decorator we pass the routes we declared in the step &lt;em&gt;c&lt;/em&gt; using &lt;br&gt;
               &lt;code&gt;RouterModule.forRoot(routes)&lt;/code&gt;&lt;br&gt;
e. In the exports array we pass the &lt;code&gt;RouterModule&lt;/code&gt; so that it can be consumed/ imported by the &lt;code&gt;appModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; - Add the router module in the application module&lt;br&gt;
Next we open the app.module.ts file and import the Routing Module we created just now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tBtcQGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvch5krqextla1rpp62l.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tBtcQGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvch5krqextla1rpp62l.PNG" alt="Image description" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; Create a placeholder to display the component&lt;br&gt;
So we have done the setup, but we need a placeholder where the component will sit when the particular URL is hit. For this we create a placeholder in our app.component.html by adding the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; that's it. We are done!!!&lt;br&gt;
Now let's start the application by using &lt;code&gt;npm start&lt;/code&gt;. By default the application will open in localhost port 4200. So open your favorite browser and type in &lt;code&gt;http://localhost:4200/one&lt;/code&gt;&lt;br&gt;
You will see the below output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39VKjnGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2ekqcmdmjejitnlrug.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39VKjnGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2ekqcmdmjejitnlrug.PNG" alt="Image description" width="364" height="179"&gt;&lt;/a&gt;&lt;br&gt;
and when you navigate to &lt;code&gt;http://localhost:4200/two&lt;/code&gt; the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeejDaEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0fpsupr8duvr8txrtr2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeejDaEo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0fpsupr8duvr8txrtr2.PNG" alt="Image description" width="303" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you have successfully setup your routing.&lt;/p&gt;

&lt;p&gt;Cheers...&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>typescript</category>
      <category>routing</category>
    </item>
    <item>
      <title>Spell check - Text analysis</title>
      <author>bhagvan kommadi</author>
      <pubDate>Sun, 12 Dec 2021 19:22:21 +0000</pubDate>
      <link>https://dev.to/bhaggu/spell-check-text-analysis-3mm2</link>
      <guid>https://dev.to/bhaggu/spell-check-text-analysis-3mm2</guid>
      <description>&lt;p&gt;Tried spell check for a specific domain data in health care and consumer.  Basic python spell check was not sufficient. The test which was given as an example did not work. Then i started looking at Spacy contextual check. (with large english dataset). &lt;/p&gt;

&lt;p&gt;This had problem with domain specific proper nouns.  Drug names, disease names, electronic brands were not getting corrected.&lt;/p&gt;

&lt;p&gt;please check out:&lt;br&gt;
&lt;a href="https://spacy.io/universe/project/contextualSpellCheck"&gt;https://spacy.io/universe/project/contextualSpellCheck&lt;/a&gt;&lt;/p&gt;

</description>
      <category>spacy</category>
      <category>textanalysis</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>LeetCode - Gas Station</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 12 Dec 2021 18:23:02 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-gas-station-iig</link>
      <guid>https://dev.to/_alkesh26/leetcode-gas-station-iig</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;There are &lt;em&gt;n&lt;/em&gt; gas stations along a circular route, where the amount of gas at the &lt;em&gt;ith&lt;/em&gt; station is &lt;em&gt;gas[i]&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You have a car with an unlimited gas tank and, it costs &lt;em&gt;cost[i]*of gas to travel from the *ith&lt;/em&gt; station to its next &lt;em&gt;(i + 1)th&lt;/em&gt; station. You begin the journey with an empty tank at one of the gas stations.&lt;/p&gt;

&lt;p&gt;Given two integer arrays &lt;em&gt;gas&lt;/em&gt; and &lt;em&gt;cost&lt;/em&gt;, return &lt;em&gt;the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise, return -1&lt;/em&gt;. If there exists a solution, it is &lt;strong&gt;guaranteed&lt;/strong&gt; to be &lt;strong&gt;unique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/gas-station"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/gas-station"&gt;https://leetcode.com/problems/gas-station&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [2, 3, 4], cost = [3, 4, 3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 units of gas, but you only have 3.
Therefore, you can't travel around the circuit once, no matter where you start.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- gas.length == n
- cost.length == n
- 1 &amp;lt;= n &amp;lt;= 10^5
- 0 &amp;lt;= gas[i], cost[i] &amp;lt;= 10^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#brute-force-approach"&gt;
  &lt;/a&gt;
  Brute force approach
&lt;/h4&gt;

&lt;p&gt;The brute force solution is to consider every gas station as a starting point&lt;br&gt;
and see if there is a possible complete circuit.&lt;/p&gt;

&lt;p&gt;To check every station, we would use two nested loops.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;current_petrol&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The time complexity of the above approach is &lt;strong&gt;O(N^2)&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#optimized-solution"&gt;
  &lt;/a&gt;
  Optimized solution
&lt;/h4&gt;

&lt;p&gt;If we look at the problem, our point of concern should be the total amount of gas should be greater than the total cost.&lt;br&gt;
The only factor we need to consider is setting the starting point.&lt;/p&gt;

&lt;p&gt;Let's jump to the algorithm directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- set current, total, start and diff to 0

- loop for i = 0; i &amp;lt; gas.size(); i++
  - diff = gas[i] -  cost[i]

  - total += diff
  - current += diff

  // current value refers to the total gas - total cost till ith station.
  // if that value is negative, this means gas is exhausted, and we cannot complete the circuit.
  // Hence we set the current index as the start.
  - if current &amp;lt; 0
    - start = i + 1
    - current = 0

- if total &amp;gt;= 0
  - return start

- return -1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;canCompleteCircuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;canCompleteCircuit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gas&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canCompleteCircuit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]

Step 1: current = 0
        total = 0
        diff = 0
        start = 0

Step 2: loop for i = 0; i &amp;lt; gas.size()
        i &amp;lt; gas.size()
        0 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[0] - cost[0]
             = 1 - 3
             = -2

        total = total + diff
              = 0 - 2
              = -2

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 0 + 1
                  = 1

            current = 0

        i++
        i = 1

Step 3: i &amp;lt; gas.size()
        1 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[1] - cost[1]
             = 2 - 4
             = -2

        total = total + diff
              = -2 + (-2)
              = -4

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 1 + 1
                  = 2

            current = 0

        i++
        i = 2

Step 4: i &amp;lt; gas.size()
        2 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[2] - cost[2]
             = 3 - 5
             = -2

        total = total + diff
              = -4 + (-2)
              = -6

        current = current + diff
                = 0 - 2
                = -2

        if current &amp;lt; 0
          - -2 &amp;lt; 0
          - true

            start = i + 1
                  = 2 + 1
                  = 3

            current = 0

        i++
        i = 3

Step 5: i &amp;lt; gas.size()
        3 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[3] - cost[3]
             = 4 - 1
             = 3

        total = total + diff
              = -6 + 3
              = -3

        current = current + diff
                = 0 + 3
                = 3

        if current &amp;lt; 0
          - 3 &amp;lt; 0
          - false

        i++
        i = 4

Step 6: i &amp;lt; gas.size()
        4 &amp;lt; 5
        true

        diff = gas[i] - cost[i]
             = gas[4] - cost[4]
             = 5 - 2
             = 3

        total = total + diff
              = -3 + 3
              = 0

        current = current + diff
                = 3 + 3
                = 6

        if current &amp;lt; 0
          - 6 &amp;lt; 0
          - false

        i++
        i = 5

Step 7: i &amp;lt; gas.size()
        5 &amp;lt; 5
        false

Step 8: if total &amp;gt;= 0
          - 0 &amp;gt;= 0
          - true

Step 9: return start

So the answer we return is 3.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Week 3 of 100DaysOfCode JavaScript Challenge</title>
      <author>Arif Iqbal</author>
      <pubDate>Sun, 12 Dec 2021 18:20:16 +0000</pubDate>
      <link>https://dev.to/arifiqbal/week-3-of-100daysofcode-javascript-challenge-56p2</link>
      <guid>https://dev.to/arifiqbal/week-3-of-100daysofcode-javascript-challenge-56p2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#day-13-dec-06-2021-monday"&gt;
  &lt;/a&gt;
  Day 13: Dec 06, 2021. Monday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ES6&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write Concise Object Literal Declarations Using Object Property Shorthand:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ES6 adds support for defining object literals more easily. If you have to write same &lt;code&gt;key:value&lt;/code&gt; pair like &lt;code&gt;name:name&lt;/code&gt;, you can just write &lt;code&gt;name&lt;/code&gt; once and it will be interpreted as &lt;code&gt;name:name&lt;/code&gt;. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is identical to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Write Concise Declarative Functions with ES6:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In ES5 you require to use the keyword &lt;code&gt;function&lt;/code&gt; when declaring functions inside objects, in ES6 not mandatory.&lt;/p&gt;

&lt;p&gt;ES5 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, my name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use class Syntax to Define a Constructor Function:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ES5 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carrot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;carrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carrot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vegetable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;carrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Use getters and setters to Control Access to an Object:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedAuthor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updatedAuthor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;novel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;anonymous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newAuthor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;novel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Create a Module Script:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some time ago, the role of JavaScript in web was not very prominent. Today, it is huge. ES5 introduced modules, files you can import and export.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type="module" src="path/filename.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use export to Share a Code Block:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or multiple functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export {add, subtract}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Reuse JavaScript Code Using import:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {add, subtract} from './some_functions.js';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#day-14-dec-08-2021-wednesday"&gt;
  &lt;/a&gt;
  Day 14: Dec 08, 2021. Wednesday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; ES6&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use * to Import Everything from a File:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import * as myMathModule from './math_functions.js'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myMathModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;myMathModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Create an Export Fallback with export default:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Import a Default Export:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;import subtract from './math_functions.js'&lt;/code&gt; notice we didn't surround the subtrackt  curly baraces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a JavaScript Promise:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Complete a Promise with resolve and reject:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A promise has three states: pending, fulfilled, and rejected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CONDITION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition not met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handle a Fulfilled Promise with then:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeServerRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CONDITION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;condition not met&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Handle a Rejected Promise with catch:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;makeServerRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#day-15-dec-09-2021-thursday"&gt;
  &lt;/a&gt;
  Day 15: Dec 09, 2021. Thursday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;Regular Expressions often referred to as Regex or Regexp are patterns in programming used for mapping, searching, and replacing text. Regular expressions are very powerful but could be hard to read and understand as they use special characters. In this module we special characters, capture groups, positive, negative lookahead, and other techniques to match any text you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using the Test Method:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;test()&lt;/code&gt; method is one of the many ways used in JavaScript for regular expressions. It takes a regular expression and applies it to a string. It returns true if the match is found, or otherwise returns false.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Literal Strings:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;console.log(/Hello/.test("Hello World"));&lt;/code&gt; will return true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.log(/Hello/.test("hello World"));&lt;/code&gt; will return false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Match a Literal String with Different Possibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The OR operator &lt;code&gt;|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(/dog|cat|hen|fish/.test("James has a fish pet."));&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ignore Case While Matching:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;i&lt;/code&gt; flag you can ignore case. &lt;code&gt;/ignorecase/i&lt;/code&gt; will match all &lt;code&gt;iGnoreCase&lt;/code&gt;, ignoreCase&lt;code&gt;, and&lt;/code&gt;ignorecase`.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extract Matches:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;match()&lt;/code&gt; is the opposite of the &lt;code&gt;test()&lt;/code&gt; method. &lt;code&gt;/Regex/.test('String');&lt;/code&gt; vs &lt;code&gt;'String'.match(/Regex/)&lt;/code&gt;. &lt;code&gt;match()&lt;/code&gt; returns the found string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find More Than the First Match:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;g&lt;/code&gt; flag in Regex &lt;code&gt;/Regex/g&lt;/code&gt; will match all patterns, not the first only. &lt;code&gt;'example string with example repeated'.match(/example/g)&lt;/code&gt; will return &lt;code&gt;[example, example]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Anything with Wildcard Period:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The wildcard character &lt;code&gt;.&lt;/code&gt;, also called &lt;code&gt;dot&lt;/code&gt; or &lt;code&gt;period&lt;/code&gt; matches any character. &lt;code&gt;/.un/.test('String')&lt;/code&gt; will return true for all strings &lt;code&gt;fun&lt;/code&gt;, &lt;code&gt;gun&lt;/code&gt; and &lt;code&gt;nun&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Single Character with Multiple Possibilities:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/litral/&lt;/code&gt; matches the literal string, &lt;code&gt;/./&lt;/code&gt; matches anything. These two are the extremes. There are some options in between. A group or class of characters could be placed inside the brackets &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; to match against a character.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/b[aiu]g/&lt;/code&gt; will match against &lt;code&gt;bag&lt;/code&gt;, &lt;code&gt;big&lt;/code&gt;, and &lt;code&gt;bug&lt;/code&gt; but not &lt;code&gt;bog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Letters of the Alphabet::&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/[a-e]/&lt;/code&gt; will match all letters from a to e.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Numbers and Letters of the Alphabet:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The range character hyphen &lt;code&gt;-&lt;/code&gt; is not limited to letters only. It can also be used to make a range of numbers like &lt;code&gt;[0-5]&lt;/code&gt; will match all numbers between 0 and 5 inclusive both ends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Single Characters Not Specified:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The caret character &lt;code&gt;^&lt;/code&gt; is used to negate characters. So for we have used regex to match characters or character sets. The symbol is used to not match characters. &lt;code&gt;/[^aeiou]/&lt;/code&gt; matches all characters but not the vowels. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-16-dec-10-2021-friday"&gt;
  &lt;/a&gt;
  Day 16: Dec 10, 2021. Friday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Characters that Occur One or More Times:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign tries to find one or more occurrences of a character or a group of characters that are repeated consecutively. &lt;code&gt;"use".match(/s+/)&lt;/code&gt; will return &lt;code&gt;["s"]&lt;/code&gt;  and &lt;code&gt;"Mississippi".match(/s+/)&lt;/code&gt; will return &lt;code&gt;["ss"]&lt;/code&gt;, while  &lt;code&gt;"Mississippi".match(/s+/g)&lt;/code&gt; will match &lt;code&gt;"ss"&lt;/code&gt; twice in &lt;code&gt;Mississippi&lt;/code&gt; and will return &lt;code&gt;["ss", "ss"]&lt;/code&gt;. &lt;code&gt;"London".match(/s+/g)&lt;/code&gt; will not match anything and will return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Characters that Occur Zero or More Times:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign is used to match one or more characters while the asterisk or star &lt;code&gt;*&lt;/code&gt; character is used to match zero or more characters. &lt;code&gt;"google".match(/go*/)&lt;/code&gt; will return &lt;code&gt;goo&lt;/code&gt;, &lt;code&gt;"gut.match(/go*/)"&lt;/code&gt; will return &lt;code&gt;g&lt;/code&gt; while &lt;code&gt;"ball".match(/go*/)&lt;/code&gt; will return null.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find Characters with Lazy Matching:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Regular expressions are &lt;em&gt;greedy&lt;/em&gt; by default. That means they will always match the longest possible pattern. However, you can change this behavior to &lt;em&gt;Lazy&lt;/em&gt; match by introducing the &lt;code&gt;?&lt;/code&gt; mark in the Regex. &lt;code&gt;"titanic".match(/t[a-z]*i/)&lt;/code&gt; will return &lt;code&gt;["titani"]&lt;/code&gt; while &lt;code&gt;"titanic".match(/t[a-z]*?i/)&lt;/code&gt; will return &lt;code&gt;["ti"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find One or More Criminals in a Hunt:&lt;/strong&gt; (exercise pre lessons)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"C".match(/C+/)&lt;/code&gt; will catch one criminal while &lt;code&gt;"adfadfaCCCkkkkk".match(/C+/)&lt;/code&gt; will catch three criminals in a row.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Beginning String Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Outside of character groups (&lt;code&gt;[]&lt;/code&gt;), the caret sign &lt;code&gt;^&lt;/code&gt; is used to find pattern at the beginning of a string. /^Cal/.test("Cal likes racing") returns &lt;code&gt;true&lt;/code&gt; while &lt;code&gt;/^Cal/.test("Now Cal is in the mid")&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-17-dec-11-2021-saturday"&gt;
  &lt;/a&gt;
  Day 17: Dec 11, 2021. Saturday
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Module:&lt;/strong&gt; Regular Expressions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match Ending String Patterns:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;$&lt;/code&gt; sign at the end of a regular expression will search for that pattern at end of the string. &lt;code&gt;/story$/.test("This is a never-ending story");&lt;/code&gt; will return true while &lt;code&gt;/story$/.test("Sometimes a story ends quickly.");&lt;/code&gt;  will return false.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Letters and Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/[a-z]/&lt;/code&gt; matches all lowercase letters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[A-Z]/&lt;/code&gt; matches all uppercase letters&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[0-9]/&lt;/code&gt; matches numbers zero to 9&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/[a-zA-Z0-9]/&lt;/code&gt; matches all the above three&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/\w/&lt;/code&gt; is a shorthand for &lt;code&gt;/[a-zA-Z0-9_]/&lt;/code&gt; that matches all lower/upper case letters, numbers zero to nine, and the underscore character.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Match Everything But Letters and Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\W/&lt;/code&gt; is the opposite of the alphanumeric pattern &lt;code&gt;/\w/&lt;/code&gt; that matches everything but not the alphabets, numbers, and the underscore character. This is identical to &lt;code&gt;/[^a-zA-Z0-9_]/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Numbers:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\d/&lt;/code&gt; is a shortcut for &lt;code&gt;/[0-9]/&lt;/code&gt; character class that matches a single digit from zero to nine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Match All Non-Numbers:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/\D/&lt;/code&gt; is equal to &lt;code&gt;/[^0-9]/&lt;/code&gt; character class that matches a single character that is not a digit between zero and nine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Restrict Possible Usernames:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apply your Regix skills to restrict usernames.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How To Swap 2 Unique Primary Keys In The Same Table With MySQL</title>
      <author>Devtonight</author>
      <pubDate>Sun, 12 Dec 2021 18:18:13 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql-2bmn</link>
      <guid>https://dev.to/devtonight/how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql-2bmn</guid>
      <description>&lt;p&gt;Sometimes, we need to swap two unique primary keys in MySQL database tables. We can use two separate &lt;code&gt;update&lt;/code&gt; queries like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name SET id = 1 WHERE id = 2;
UPDATE table_name SET id = 2 WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it does not work as we expected. The reason is, it tries to create duplicate primary keys. The 1st query tries to change the id value of the 2nd record to 1. But that id = 1 record already exists. So MySQL rejects the execution of the query as there cannot be any duplicate primary key.&lt;/p&gt;

&lt;p&gt;But we can slightly modify the above queries to avoid trying to create duplicate primary keys in 3 steps. First, we can change the id of the first row to a non-existing, temporary value something like 0. Then we can change the 2nd row id to 1. At this moment, it will not make any conflicts like before as the original first row id value is 0. Then, we can change the id of the original first row id to 2.&lt;/p&gt;

&lt;p&gt;Before running this, make sure to replace the &lt;code&gt;table_name&lt;/code&gt;, primary key ids &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; with your related primary key ids.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE table_name SET id = 0 WHERE id = 1;
UPDATE table_name SET id = 1 WHERE id = 2;
UPDATE table_name SET id = 2 WHERE id = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can see both 1st and 2nd row ids have successfully swapped.&lt;/p&gt;

&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com?utm_source=dev&amp;amp;utm_medium=questions&amp;amp;utm_campaign=how-to-swap-2-unique-primary-keys-in-the-same-table-with-mysql"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>sql</category>
      <category>swap</category>
      <category>howto</category>
    </item>
    <item>
      <title>Form Lib 1.9.0 released</title>
      <author>Volker Schukai</author>
      <pubDate>Sun, 12 Dec 2021 18:00:18 +0000</pubDate>
      <link>https://dev.to/schukai/form-lib-180-released-2d5f</link>
      <guid>https://dev.to/schukai/form-lib-180-released-2d5f</guid>
      <description>&lt;p&gt;Today we have released the latest edition of our Form Lib. Our library offers us the possibility to link forms with data. In addition, we have programmed here various controls that are not available in the standard. &lt;/p&gt;

&lt;p&gt;Only the highlights are described here. The full functionality can be found in the &lt;a href="https://monsterjs.org/en/doc/components/form/1.9.0/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This release builds on &lt;a href="https://monsterjs.org"&gt;Monster 1.28&lt;/a&gt; and contains minor improvements in the handling of data sources. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tree-select"&gt;
  &lt;/a&gt;
  Tree Select
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEWIANYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FGbYUSHXwAYkZ8g.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuJ1T6Sw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1442172077356818437/OkFrYQed_normal.png" alt="üéÑmonsterüêä ü¶ñ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        üéÑmonsterüêä ü¶ñ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @getthemonster
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ux"&gt;#ux&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ui"&gt;#ui&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:36 PM - 12 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1470100260601180162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monster-treeselect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;monster&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;treeselect&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;monster&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/monster-treeselect&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking Changes
&lt;/h2&gt;

&lt;p&gt;We try to minimize breaking changes, but some changes are needed to improve workflows, performance, scalability, and more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The new names for the templates of Select and Treeselect are now called &lt;code&gt;labelTemplate&lt;/code&gt; and &lt;code&gt;valueTemplate&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;hope you enjoy it!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//Monster%201.28%20released"&gt;https://dev.to/schukai/monster-128-released-e4b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/schukai/manage-forms-with-monster-4nf5"&gt;Forms, nothing but forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org/en/doc/components/form/1.9.0/"&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org"&gt;project home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://monsterjs.org/en/doc/1.25.0/tutorial-form-example.html"&gt;form example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.schukai.com/de/jobs/"&gt;we are hiring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>dom</category>
      <category>node</category>
      <category>form</category>
    </item>
    <item>
      <title>Python Switches to Match-Case</title>
      <author>Vicki (she/they)</author>
      <pubDate>Sun, 12 Dec 2021 17:52:43 +0000</pubDate>
      <link>https://dev.to/vickilanger/python-switches-to-match-case-4mmb</link>
      <guid>https://dev.to/vickilanger/python-switches-to-match-case-4mmb</guid>
      <description>&lt;p&gt;&lt;em&gt;If reading about code with math examples is the bane of your existence, keep reading. This post uses relatable examples with sweaters and dogs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jump to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#past"&gt;Past&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#present"&gt;Present&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#benefits"&gt;Benefits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compare1"&gt;Example 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#compare2"&gt;Example 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#future"&gt;Future&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#past"&gt;
  &lt;/a&gt;
  Past &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Once upon a time, in 2006, a Python Enhancement Proposal(PEP) was introduced. &lt;a href="https://www.python.org/dev/peps/pep-3103/"&gt;PEP 3103&lt;/a&gt; detailed many different ways a switch statement could be implemented and why Python should have them. That's a long time ago though. Let's jump into the here and now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#present"&gt;
  &lt;/a&gt;
  Present &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The possibility to use match-case statements in Python has not been around very long. The addition of match-case statements in based on &lt;a href="https://www.python.org/dev/peps/pep-0634/"&gt;PEP 634&lt;/a&gt;. They were introduced in October of 2021 with Python v3.10. If you are using Python v3.9 or older, you won‚Äôt be able to try these out. I don‚Äôt suspect you‚Äôll be missing out on much as these are relatively new. By the time you need them, I‚Äôm sure you‚Äôll pick them up quickly. Either way, keep reading just to get a quick introduction to the concept. If you skip reading this, you won‚Äôt miss anything other than some cute examples. I‚Äôd suggest at least checking those out.&lt;/p&gt;

&lt;p&gt;Worth noting, if you hear others talk about switch-case statements, match-case is pretty much the same thing.&lt;/p&gt;

&lt;p&gt;Match-case statements are incredibly similar to if-else statements. Seemingly, they can be used interchangeably. Match-case does have a few benefits &lt;a&gt;&lt;/a&gt; though. Your computer can read and understand match-case statements quicker than if-else statements. On that note, it tends to be easier for you and other programmers to read and manage match-case statements.&lt;/p&gt;

&lt;p&gt;I think it‚Äôs time for an example. Is it time to play with your dog?&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dog_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your dog's name?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dog_wants_to_play&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# they always want to play!
&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;dog_wants_to_play&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Go get it"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Okay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"maybe we'll play later"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, but how would that look as an if-else statement?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dog_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"What is your dog's name?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dog_wants_to_play&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# they still always want to play!
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dog_wants_to_play&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Go get it"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Okay"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"maybe we'll play later"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that doesn't seem very useful. When making a decision that only has two options, an if-else statement is actually shorter. That's okay because match-case statements really shine and show off their usefulness when we have more options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-raw-ifelse-endraw-vs-raw-matchcase-endraw-"&gt;
  &lt;/a&gt;
  Comparison &lt;code&gt;if-else&lt;/code&gt; vs &lt;code&gt;match-case&lt;/code&gt; &lt;a&gt;&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;Are you cold? I'm cold. Let‚Äôs take a trip to the Sleevonista sweater factory. Sleevonista makes one-size-fits-all sweaters with different amounts of sleeves. Here's a long kinda unwieldy if-else example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to spider, squid, or octopus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to butterfly, bumble bee, grasshopper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to 3 or 4 legged dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give sweater to human with 1 or 2 arms"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give sweater to to your snake friend"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sweater is broken, make another one"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's turn Sleevonista's into a match-case statment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sweater_sleeves&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"How many sleeves does the sweater have?"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;sweater_sleeves&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to spider, squid, or octopus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to butterfly, bumble bee, grasshopper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give to 3 or 4 legged dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give sweater to human with 1 or 2 arms"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"give sweater to to your snake friend"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# NOTE: unsure on the accuracy of this line's syntax
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sweater is broken, make another one"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You made a sweater"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the wildcard &lt;code&gt;_&lt;/code&gt;. This will always be True and it considered irrefutable. You may only have one irrefutable case and it has to be the at the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As time goes by, I imagine match-case statements in python will catch on. Eventually, the'll be as commonplace as switch-case statements in languages like Ruby, Java, and so many other languages. If you'd like more read more on the motivation and rationale behind Python now having match-case statements, checkout &lt;a href="https://www.python.org/dev/peps/pep-0635/"&gt;PEP 635&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What other examples can you think of? Can you come up with some real life examples? Comment below with what you come up with.&lt;/p&gt;

</description>
      <category>python</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Vite ËàáÁí∞Â¢ÉËÆäÊï∏</title>
      <author>Leon</author>
      <pubDate>Sun, 12 Dec 2021 17:50:01 +0000</pubDate>
      <link>https://dev.to/leon0824/vite-yu-huan-jing-bian-shu-1i64</link>
      <guid>https://dev.to/leon0824/vite-yu-huan-jing-bian-shu-1i64</guid>
      <description>&lt;p&gt;&lt;a href="https://cn.vitejs.dev/"&gt;Vite&lt;/a&gt; ÊòØ Vue.js ‰ΩúËÄÖÂ∞§Èõ®Ê∫™ÈñãÁôºÁöÑ„Äå‰∏ã‰∏Ä‰ª£ÂâçÁ´ØÈñãÁôºËàáÊßãÂª∫Â∑•ÂÖ∑„ÄçÔºåÂÆÉ‰πüÊòØÊñ∞ËààÁöÑÂâçÁ´ØÊ°ÜÊû∂ &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt; È†êË®≠ÁöÑÊßãÂª∫Â∑•ÂÖ∑„ÄÇ&lt;/p&gt;

&lt;p&gt;Âú®Á®ãÂºèÂ∞àÊ°à‰∏äÔºåÊàëÂÄëÂæÄÂæÄÊúÉÊääÊüê‰∫õÈáçË¶ÅÁöÑË≥áË®äÔºà‰æãÂ¶ÇÂæåÁ´ØÁöÑ URL„ÄÅÁ¨¨‰∏âÊñπÊúçÂãôÁöÑ API Á´ØÈªûÁ≠âÔºâÊîæÂú®Áç®Á´ãÁöÑÊ™îÊ°àÂÖßÂÅöÁÆ°ÁêÜÔºåÈÄôÂÄãÊ™îÊ°àÁøíÊÖ£‰∏äÊúÉÂëΩÂêçÁÇ∫ .envÔºåÂÜçÂà©Áî®Êüê‰∫õÊ©üÂà∂Êää .env ÂÖßÁöÑÂèÉÊï∏ËºâÂÖ•Âà∞Á®ãÂºè‰∏≠ÊàêÁÇ∫ÂèØË™øÁî®ÁöÑËÆäÊï∏ÔºåÈÄô‰∫õËÆäÊï∏ÊàëÂÄëÁ®±ÁÇ∫„ÄåÁí∞Â¢ÉËÆäÊï∏„Äç„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8"&gt;
  &lt;/a&gt;
  Áí∞Â¢ÉËÆäÊï∏
&lt;/h2&gt;

&lt;p&gt;ÈÄô‰∫õÁí∞Â¢ÉËÆäÊï∏ÂæÄÂæÄ‰º¥Èö®ËëóÂ∞àÊ°àÁöÑÈÅãË°åÁí∞Â¢ÉËÄåËÆäÔºåÂú® Vite ÁöÑË®≠Ë®à‰∏äÔºåÂ∑≤Á∂ìÁÇ∫ÊàëÂÄëÈ†êÁïô‰∫Ü development Áí∞Â¢ÉÔºàÈñãÁôºÁí∞Â¢ÉÔºâËàá production Áí∞Â¢ÉÔºàÁîüÁî¢Áí∞Â¢ÉÔºâÔºåÂÖ©ËÄÖ‰ª•Ê™îÂêçÂÅöÂçÄÂàÜÔºå‰æùÁÖß Vite ÁöÑË¶èÁØÑÔºåÈñãÁôºÁí∞Â¢ÉÁöÑÊ™îÂêçÊòØ .env.developmentÔºå‰∏ãÈù¢ÊòØ‰∏ÄÂÄãÊúÄÈôΩÊò•ÁöÑ‰æãÂ≠êÔºö&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env.development
&lt;/span&gt;
&lt;span class="py"&gt;VITE_BACKEND_HOST&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://localhost:5000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ËÄåÂú®ÁîüÁî¢Áí∞Â¢É‰πüÊúâÈÄôÂÄãËÆäÊï∏Ôºå‰ΩÜÊòØÂÄºÊòØ‰∏ç‰∏ÄÊ®£ÁöÑÔºå‰æùÁÖß Vite ÁöÑË¶èÁØÑÔºåÁîüÁî¢Áí∞Â¢ÉÁöÑÊ™îÂêçÊòØ .env.productionÔºåÂÖßÂÆπÂ¶Ç‰∏ãÔºö&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env.production
&lt;/span&gt;
&lt;span class="py"&gt;VITE_BACKEND_HOST&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://c.herokuapp.com/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Âè™Ë¶ÅÊääÈÄôÂÖ©ÂÄãÊ™îÊ°àÁΩÆÊñºÂ∞àÊ°àÁöÑÊ†πÁõÆÈåÑ‰∏ãÔºåVite Â∞±ÊúÉËá™ÂãïËºâÂÖ•ÔºåË¶ÅÊ≥®ÊÑèÁöÑÊòØÔºåÂøÖÈ†àÂÉè‰∏äÈù¢ÁöÑÁØÑ‰æã‰∏ÄÊ®£ÔºåÂú®ËÆäÊï∏ÂâçÊñπÊúâ &lt;code&gt;VITE_&lt;/code&gt; ÁöÑÂâçÁ∂¥ Vite ÊâçÊúÉËºâÂÖ•ÔºåÂê¶ÂâáÊúÉÁÑ°ÊÉÖÁöÑÂøΩÁï•„ÄÇ&lt;/p&gt;

&lt;p&gt;Áï∂Âü∑Ë°å &lt;code&gt;vite dev&lt;/code&gt; ÊôÇÔºåÊúÉËºâÂÖ• .evn.developmentÔºõÁï∂Âü∑Ë°å &lt;code&gt;vite build&lt;/code&gt; Êàñ &lt;code&gt;vite preview&lt;/code&gt; ÊôÇÔºåÂâáÊúÉËºâÂÖ• .env.production„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E8%AA%BF%E7%94%A8%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8"&gt;
  &lt;/a&gt;
  Ë™øÁî®Áí∞Â¢ÉËÆäÊï∏
&lt;/h2&gt;

&lt;p&gt;Âª∂Á∫å‰∏äÈù¢ÁöÑ‰æãÂ≠êÔºåÂú®Á®ãÂºè‰∏≠ÔºåÊàëÂÄëÁî® &lt;code&gt;import.meta.env.VITE_BACKEND_HOST&lt;/code&gt; Â∞±ÂèØË™øÁî®Ë©≤Áí∞Â¢ÉËÆäÊï∏ÔºåË∂ÖÁ¥öÁ∞°ÂñÆ„ÄÇ&lt;/p&gt;

&lt;p&gt;Èô§‰∫ÜÊàëÂÄëËá™Ë°åÂÆöÁæ©ÁöÑÁí∞Â¢ÉËÆäÊï∏ÔºåVite ÈÇÑÊúâÂÖßÂª∫ÂõõÂÄãÂÆÉË®≠ÂÆöÁöÑÁí∞Â¢ÉËÆäÊï∏ËÆìÊàëÂÄëÈÅãÁî®Ôºö&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import.meta.env.MODE&lt;/code&gt;ÔºöÂ∫îÁî®ËøêË°åÁöÑÊ®°Âºè„ÄÇ&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;import.meta.env.BASE_URL&lt;/code&gt;ÔºöÈÉ®ÁΩ≤Â∫îÁî®Êó∂ÁöÑÂü∫Êú¨ URL„ÄÇÂÆÉÁî± &lt;code&gt;base&lt;/code&gt; ÈÖçÁΩÆÈ°πÂÜ≥ÂÆö„ÄÇ&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;import.meta.env.PROD&lt;/code&gt;ÔºöÂ∫îÁî®ÊòØÂê¶ËøêË°åÂú®Áîü‰∫ßÁéØÂ¢É„ÄÇ&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;import.meta.env.DEV&lt;/code&gt;ÔºöÂ∫îÁî®ÊòØÂê¶ËøêË°åÂú®ÂºÄÂèëÁéØÂ¢ÉÔºàÊ∞∏Ëøú‰∏é &lt;code&gt;import.meta.env.PROD&lt;/code&gt; Áõ∏ÂèçÔºâ„ÄÇ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‰ª•‰∏äÊäÑÈåÑËá™„ÄäVite ÂÆòÊñπ‰∏≠ÊñáÊñáÊ°£„Äã„ÄÇ&lt;/p&gt;

&lt;p&gt;ÂØ¶ÈöõÁî®Ëµ∑‰æÜÁöÑÁØÑ‰æãÔºö&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_BACKEND_HOST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Â¶ÇÊûúÊòØÂú® SvelteKit ÂÖÉ‰ª∂ÂÖßÂâáÊòØÔºö&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{import.meta.env.VITE_BACKEND_HOST}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ÂÖ∂‰ªñÂâçÁ´ØÊ°ÜÊû∂ÊáâË©≤‰πüÊòØÈ°û‰ººÁöÑÁî®Ê≥ï„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E5%AE%89%E5%85%A8%E4%BA%8B%E9%A0%85"&gt;
  &lt;/a&gt;
  ÂÆâÂÖ®‰∫ãÈ†Ö
&lt;/h2&gt;

&lt;p&gt;ÂâçÁ´ØÂ∞àÊ°àÊÑèÂë≥ËëóÈÅãË°åÁöÑÁí∞Â¢ÉÊòØÂú®Áî®Êà∂ÁöÑÁÄèË¶ΩÂô®Ôºå‰πüÊÑèÂë≥ËëóÊâÄÊúâÁ®ãÂºèÂÖßÁöÑÂèÉÊï∏ÊòØÁî®Êà∂ÂèØË¶ãÁöÑÔºàÂç≥‰æøÊúâÊ∑∑Ê∑ÜÈÅéÔºâÔºåÊâÄ‰ª•‰∏çÈÅ©ÂêàÊîæ‰ªª‰ΩïÁöÑÈÄ£Á∑öÂ∏≥ÂØÜÁ≠âÁßÅÂØÜË≥áÊñôÔºåÈÄô‰∫õÁßÅÂØÜÁöÑ‰∏≤Êé•ÔºåÂª∫Ë≠∞ÊîæÂà∞ÂæåÁ´ØÂéªÂÅöÔºåÊñπÁÇ∫‰∏äÁ≠ñ„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99"&gt;
  &lt;/a&gt;
  ÂèÉËÄÉË≥áÊñô
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;„Ää&lt;a href="https://cn.vitejs.dev/"&gt;Vite ÂÆòÊñπ‰∏≠ÊñáÊñáÊ°£&lt;/a&gt;„Äã&lt;/li&gt;
&lt;li&gt;„Äà&lt;a href="https://dev.to/danawoodman/storing-environment-variables-in-sveltekit-2of3"&gt;Using environment variables in SvelteKit (and Vite)&lt;/a&gt;„Äâ&lt;/li&gt;
&lt;li&gt;„Äà&lt;a href="https://timdeschryver.dev/blog/environment-variables-with-sveltekit"&gt;Environment variables with SvelteKit&lt;/a&gt;„Äâ&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vite</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why I ditched ‚Äãchrome for Edge?</title>
      <author>Jatin Sharma</author>
      <pubDate>Sun, 12 Dec 2021 17:44:13 +0000</pubDate>
      <link>https://dev.to/j471n/why-i-ditched-chrome-for-edge-51ih</link>
      <guid>https://dev.to/j471n/why-i-ditched-chrome-for-edge-51ih</guid>
      <description>&lt;p&gt;I've been using google chrome for a long time I love the extensions and the look and feel of chrome but then I realized that all these extensions now work on the new Microsoft edge plus edge got a bunch of additional features. That I always wish chrome had let's take a look at why edge may be the better choice.&lt;/p&gt;

&lt;p&gt;When it comes to internet browsers google chrome dominates the market according to stack counter chrome currently has a share of about 64% while microsoft edge is just around 4%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eo59KAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dWbwG48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eo59KAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/dWbwG48.png" alt="stackcounter" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A major reason for this is the availability of extensions that you can add to chrome all these third-party add-ons that let you customize the browser's behavior and add all these extra features it's a great benefit and even a necessity now for most of us. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yWOddZ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F5obedQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yWOddZ5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F5obedQ.png" alt="chromewebstore" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Microsoft completely changed edge in 2020, edge is now based on the same open source chromium platform. Just like chrome which means that all of these features and extensions that you're used to from chrome are now available in&lt;br&gt;
edge too but that's not all let's take a look at some other important criteria that gives edge an edge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-privacy"&gt;
  &lt;/a&gt;
  1. Privacy
&lt;/h2&gt;

&lt;p&gt;let's face it google chrome is not exactly known for securing user privacy, I mean google's whole business model is to collect data and use the information to tailor ads that you see and even the results that you get on its services like google search and youtube microsoft has a different business model that's not mainly focused on advertising and with edge it's easier to configure the privacy level of your browser in your &lt;strong&gt;settings&lt;/strong&gt; under &lt;strong&gt;Privacy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQMVF0g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yMAICdH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQMVF0g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yMAICdH.png" alt="privacy" width="880" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Edge gives you three levels of tracking prevention in case you're wondering what trackers are they're used by websites to collect info about your browsing you can choose from three levels basic, balanced and strict with balance the default. You can read that in details &lt;a href="https://rb.gy/ffplnz"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To View your Privacy Setting of Edge &lt;a href="https://dev.toedge://settings/privacy"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can never really be sure what happens with your data but i like the user-friendly approach in edge which makes it easier for me to manage my settings and keep me better protected online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-features"&gt;
  &lt;/a&gt;
  2. Features
&lt;/h2&gt;

&lt;p&gt;Chrome and edge are now under the same framework there isn't that much difference and most of the features are similar but there are a few that i really like in edge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vertical-tabs"&gt;
  &lt;/a&gt;
  Vertical Tabs
&lt;/h3&gt;

&lt;p&gt;Edge supports vertical tabs which comes very handy when you have multiple tabs open and it really helps you in multitasking. It is a great tool to manage your tabs because  as you open more tabs cutting off the page titles which makes finding a specific tab a bit&lt;br&gt;
difficult but in edge you have the option to arrange them vertically this way the titles remain visible to make this switch you just tap the little square icon on the far left side of the tab row now you have a separate column with the tabs if you want to focus on a specific page content you just have to collapse the pane when you hover over it it's going to open back up i usually just pin the pane to keep it always open if you can't get&lt;br&gt;
used to the vertical tabs just click on the icon again to turn them off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.howtogeek.com/697986/how-to-enable-and-use-vertical-tabs-in-microsoft-edge/"&gt;How to Enable and Use Vertical Tabs in Microsoft Edge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VL2WzOjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/H9orNLW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VL2WzOjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/H9orNLW.png" alt="vertical" width="523" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sleeping-tabs"&gt;
  &lt;/a&gt;
  Sleeping Tabs
&lt;/h3&gt;

&lt;p&gt;Another nice feature that was introduced recently is sleeping tabs edge is going to put&lt;br&gt;
inactive tabs to sleep after a certain amount of time according to microsoft this can improve your memory and cpu usage by up to 30%.  You'll recognize the sleepers when they become faded to resume a sleeping tab just click on it the tab will unfade and your content will be there immediately you can customize the feature in the&lt;br&gt;
&lt;strong&gt;Settings &amp;gt;  System and Performance&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;You can turn it on with the save resources with sleeping tabs option are in the bottom &lt;br&gt;
with the drop down menu of time you can specify the amount of time after which the tabs you go to sleep and with the add button here you can add sites you never want to put to sleep.&lt;/p&gt;

&lt;p&gt;Your Settings should look like this-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5r0Z2Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TjBRzkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5r0Z2Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TjBRzkf.png" alt="sleeping tabs" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.howtogeek.com/712570/how-to-save-memory-with-sleeping-tabs-in-microsoft-edge/"&gt;How to Save Memory With ‚ÄúSleeping Tabs‚Äù in Microsoft Edge&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immersive-reader"&gt;
  &lt;/a&gt;
  Immersive Reader
&lt;/h3&gt;

&lt;p&gt;Immersive Reader is something i often use especially on pages that have a lot of&lt;br&gt;
advertising it strips out all the visual noise so you can concentrate on the text.&lt;/p&gt;

&lt;p&gt;Let me show you how it works and looks like, I am on this website which has lot's of ads and other extra content which I don't want to read I just want to read the article without any extra clutter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1C_-QI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/YcltFhv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1C_-QI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/YcltFhv.gif" alt="immersive" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enable the Immersive mode by pressing the button in the right on the searchbar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FlsQGtlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vGZ6vFd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FlsQGtlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vGZ6vFd.png" alt="button" width="48" height="36"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After enabling that now let's see how the site looks like-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEl2NsB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/iO9BIjv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEl2NsB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/iO9BIjv.gif" alt="after" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now as you can see it cleared all the ads and the extra clutter and you can now read or listen to the article. yeah, you read that right. It also provides the feature to read the text aloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-aloud"&gt;
  &lt;/a&gt;
  Read Aloud
&lt;/h3&gt;

&lt;p&gt;In addition to Immersive Reader you also have the option to use a voice engine to read the text aloud for you just click on the button. I tested it for pages in English and it works very well and sounds quite natural with voice options over here you can customize the experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XnEnFln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8DhyJAc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XnEnFln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8DhyJAc.png" alt="readaloud" width="151" height="49"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://support.microsoft.com/en-us/topic/use-immersive-reader-in-microsoft-edge-78a7a17d-52e1-47ee-b0ac-eff8539015e1"&gt;Use Immersive Reader in Microsoft Edge&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collections"&gt;
  &lt;/a&gt;
  Collections
&lt;/h3&gt;

&lt;p&gt;This allows you to add sites as the collection and it also supports syncing so that you can access your collections on mobile devices as well.  Clicking the [+] button near the top-right of the screen brings up the collections sidebar menu. From there, you can start a new collection and hit the ‚ÄúAdd current page‚Äù. You can also right-click any tab and select "Add all tabs to a new collection".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuMGSH11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rb.gy/hgniiw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuMGSH11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rb.gy/hgniiw" alt="collections" width="650" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.howtogeek.com/532656/how-to-enable-and-use-collections-in-microsoft-edge/"&gt;How to Use Collections in Microsoft Edge&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;p&gt;Performed a couple of tests to measure the loading speed of websites which were by&lt;br&gt;
no means scientific. I couldn't see any major performance differences between the two browsers some pages report a higher ram usage of chrome in some cases.&lt;/p&gt;

&lt;p&gt;To see the difference, I open 5 tabs in chrome and the same tabs in the edge. I opened Instagram, Facebook, Github, Youtube, LinkedIn. And you can see the results below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qn-rwDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/bLCPB0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qn-rwDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/bLCPB0s.png" alt="performance" width="787" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Majorly there are only RAM differences chrome uses 42% extra ram than the edge.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note- the RAM difference could be different according to the extensions you have installed so it can vary from device to device.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;In my opinion, Edge has an edge, yours could be different. I am using Edge for 2 years and I don't have any issue with that. Don't hesitate to share your opinions in the comment section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can extend your support by buying me a Coffee.üòäüëá&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/j471n"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUX4imFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/2QWo3cm.png" alt="buymecoffee" width="374" height="88"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#you-might-be-interested-in-"&gt;
  &lt;/a&gt;
  You might be interested in -
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-css-resources-that-you-should-bookmark-46l6"&gt;10 CSS Resources that you should bookmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/some-strange-concept-of-javascript-4icc"&gt;Some Strange Concept of JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/j471n/10-git-commands-everybody-should-know-3322"&gt;10 Git Commands everybody should know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>browser</category>
      <category>performance</category>
    </item>
    <item>
      <title>How to read a user's file with JavaScript in 35 seconds! </title>
      <author>Tom Smykowski</author>
      <pubDate>Sun, 12 Dec 2021 17:39:48 +0000</pubDate>
      <link>https://dev.to/tomaszs2/how-to-read-a-users-file-with-javascript-in-35-seconds-2ipb</link>
      <guid>https://dev.to/tomaszs2/how-to-read-a-users-file-with-javascript-in-35-seconds-2ipb</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yXB40CNnUNU"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
