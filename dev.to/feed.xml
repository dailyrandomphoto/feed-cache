<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best CSS Frameworks in 2021</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 02 Nov 2021 09:55:13 +0000</pubDate>
      <link>https://dev.to/thenerdydev/best-css-frameworks-in-2021-1f3p</link>
      <guid>https://dev.to/thenerdydev/best-css-frameworks-in-2021-1f3p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#best-css-frameworks-in-2021"&gt;
  &lt;/a&gt;
  Best CSS Frameworks in 2021
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Bootstrap &lt;/li&gt;
&lt;li&gt;Foundation &lt;/li&gt;
&lt;li&gt;Bulma &lt;/li&gt;
&lt;li&gt;Tailwind CSS &lt;/li&gt;
&lt;li&gt;UI Kit &lt;/li&gt;
&lt;li&gt;Milligram &lt;/li&gt;
&lt;li&gt;Materialize CSS &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  1️⃣ Bootstrap
&lt;/h2&gt;

&lt;p&gt;Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjSg1SfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gmcqb9tdwzgbiecx2se.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjSg1SfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gmcqb9tdwzgbiecx2se.png" alt="Image description" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#foundation"&gt;
  &lt;/a&gt;
  2️⃣ Foundation
&lt;/h2&gt;

&lt;p&gt;A Framework for any device, medium, and accessibility. Foundation is a family of responsive front-end frameworks that make it easy to design beautiful responsive websites, apps and emails that look amazing on any device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://get.foundation"&gt;https://get.foundation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ReSu37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcvbgh2qzs660gwro360.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ReSu37L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcvbgh2qzs660gwro360.png" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bulma"&gt;
  &lt;/a&gt;
  3️⃣ Bulma
&lt;/h2&gt;

&lt;p&gt;Bulma is the modern CSS framework that just works.&lt;br&gt;
Bulma is a free, open source framework that provides ready-to-use frontend components that you can easily combine to build responsive web interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bulma.io"&gt;https://bulma.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61aUMTNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1rj0dauhvclqng263ik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61aUMTNU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1rj0dauhvclqng263ik.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  4️⃣ Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Rapidly build modern websites without ever leaving your HTML.&lt;br&gt;
A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;https://tailwindcss.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vreYuC-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsht1lk7n33xifykw4qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vreYuC-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsht1lk7n33xifykw4qa.png" alt="Image description" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#uikit"&gt;
  &lt;/a&gt;
  5️⃣ UIkit
&lt;/h2&gt;

&lt;p&gt;A lightweight and modular front-end framework&lt;br&gt;
for developing fast and powerful web interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getuikit.com"&gt;https://getuikit.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4qSStZSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4pcmh9nk46ydhgq179.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4qSStZSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km4pcmh9nk46ydhgq179.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#milligram"&gt;
  &lt;/a&gt;
  6️⃣ Milligram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8PXWxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5yffo264w2y4tq2px7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8PXWxmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5yffo264w2y4tq2px7g.png" alt="Image description" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://milligram.io"&gt;https://milligram.io&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#materialize-css"&gt;
  &lt;/a&gt;
  7️⃣ Materialize CSS
&lt;/h2&gt;

&lt;p&gt;A modern responsive front-end framework based on Material Design. &lt;br&gt;
To get started, check this : &lt;a href="http://materializecss.com"&gt;http://materializecss.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-uUVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl473uqo0qgww3z9v73q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iK-uUVJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl473uqo0qgww3z9v73q.png" alt="Image description" width="880" height="351"&gt;&lt;/a&gt;&lt;br&gt;
If you found this list useful, consider:&lt;/p&gt;

&lt;p&gt;⭐Follow &lt;a class="mentioned-user" href="https://dev.to/thenerdydev"&gt;@thenerdydev&lt;/a&gt;
 for more content like this &lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Jun 10 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS CDK - Building Telegram bot with AWS Lambda and API Gateway Proxy Integration - Part 1</title>
      <author>Akhilesh Yadav</author>
      <pubDate>Tue, 02 Nov 2021 09:31:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-cdk-building-telegram-bot-with-aws-lambda-and-api-gateway-proxy-integration-part-1-59l6</link>
      <guid>https://dev.to/aws-builders/aws-cdk-building-telegram-bot-with-aws-lambda-and-api-gateway-proxy-integration-part-1-59l6</guid>
      <description>&lt;p&gt;This is the first part of the Building Telegram bot with AWS Lambda and API Gateway Proxy Integration Series and this article would feel easy incase you come from Cloudformation or Terraform background. For beginners, this would make more sense if you follow this article along with AWS CDK Official Guide.&lt;/p&gt;

&lt;p&gt;As per official documentation, The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages. &lt;/p&gt;

&lt;p&gt;It means that now you can use TypeScript, JavaScript, Python, Java, or C# to create Infrastructure instead of JSON/YAML used in Cloudformation template.&lt;/p&gt;

&lt;p&gt;Advantage of AWS CDK over Cloudformation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use logic (if statements, for-loops, etc) when defining your infrastructure&lt;/li&gt;
&lt;li&gt;Use object-oriented techniques to create a model of your system&lt;/li&gt;
&lt;li&gt;Define high level abstractions, share them, and publish them to your team, company, or community&lt;/li&gt;
&lt;li&gt;Organize your project into logical modules&lt;/li&gt;
&lt;li&gt;Share and reuse your infrastructure as a library&lt;/li&gt;
&lt;li&gt;Testing your infrastructure code using industry-standard protocols&lt;/li&gt;
&lt;li&gt;Use your existing code review workflow
Code completion within your IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With AWS CDK you can design your own reusable components that meet your organization’s security, compliance, and governance requirements. It also provides high-level components that preconfigure cloud resources with proven defaults, helping you build on AWS without needing to be an expert.&lt;/p&gt;

&lt;p&gt;Which means Construct props can have default values for some key as mentioned in document for API-Gateway Stage. Do check the Construct Props section and scroll down to see default values for some properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.Stage.html"&gt;https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-apigateway.Stage.html&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is part 1 of building Telegram bot using AWS SDK Series.&lt;/p&gt;

&lt;p&gt;The AWS CDK Toolkit provides the cdk command-line interface that can be used to work with AWS CDK applications.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-docs"&gt;cdk docs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Access the online documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-init"&gt;cdk init&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Start a new CDK project (app or library)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-list"&gt;cdk list&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;List stacks in an application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-synthesize"&gt;cdk synth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Synthesize a CDK app to CloudFormation template(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-diff"&gt;cdk diff&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Diff stacks against current state&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-deploy"&gt;cdk deploy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Deploy a stack into an AWS account&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-destroy"&gt;cdk destroy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Deletes a stack from an AWS account&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-bootstrap"&gt;cdk bootstrap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Deploy a toolkit stack to support deploying large stacks &amp;amp; artifacts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/aws-cdk#cdk-doctor"&gt;cdk doctor&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Inspect the environment and produce information useful for troubleshooting&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#how-to-setup-aws-cdk-project"&gt;
  &lt;/a&gt;
  How to setup AWS CDK Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html"&gt;https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install CDK using Nodejs Package Manager&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lets install :

&lt;code&gt;npm install -g aws-cdk&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Check version using :

&lt;code&gt;cdk --version&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure AWS Credential on your local Machine&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy and Paste Access Keys and Secret Keys :

&lt;code&gt;aws configure&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Confirm if you gained the AWS Identity.

&lt;code&gt;aws sts get-caller-identity&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many AWS CDK stacks that you write will include assets: external files that are deployed with the stack, such as AWS Lambda functions or Docker images. The AWS CDK uploads these to an Amazon S3 bucket or other container so they are available to AWS CloudFormation during deployment. Deployment requires that these containers already exist in the account and region you are deploying into. Creating them is called bootstrapping. &lt;/p&gt;

&lt;p&gt;To bootstrap, paste this :&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cdk bootstrap aws://$(aws sts get-caller-identity --output text --query Account)/$(aws configure get region)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir telegram-bot
cd telegram-bot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will create separate directory for managing aws-cdk file and lambda file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir cdk-tool
mkdir lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now go to cdk-tool empty directory and initialize the app using the cdk init command, specifying the desired template ("app") and programming language. That is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd cdk-tool
cdk init app --language javascript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0YxsbQmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf2oecd6j5c3x874jpe9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0YxsbQmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf2oecd6j5c3x874jpe9.JPG" alt="CDK Installation" width="768" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Default directory structure would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QrdyrXrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clylgoepf002bc8h5ret.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrdyrXrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clylgoepf002bc8h5ret.JPG" alt="CDK Directory Structure" width="396" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lib/cdk-tool-stack.js&lt;/code&gt; : is where your CDK application's main stack is defined. You will write the infrastructure configuration over here in this file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bin/cdk-tool.js&lt;/code&gt; : This is the entrypoint of the CDK application. It will load the stack defined in &lt;code&gt;lib/cdk-tool-stack.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;package.json&lt;/code&gt; : is your npm module manifest. It includes information like the name of your app, version, dependencies and build scripts.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cdk.json&lt;/code&gt;:  tells the toolkit how to run your app.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.gitignore and .npmignore&lt;/code&gt;`` tell git and npm which files to include/exclude from source control and when publishing this module to the package manager.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;node_modules&lt;/code&gt; is maintained by npm and includes all your project’s dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#creating-sample-lambda-function"&gt;
  &lt;/a&gt;
  Creating Sample Lambda Function
&lt;/h2&gt;

&lt;p&gt;Do you remember you created one more directory to store lambda function, ie. &lt;code&gt;lambda&lt;/code&gt; directory. Lets switch to that directory from parent directory and create index.js file into telegram-bot directory containing nodejs function sourcecode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;`javascript&lt;br&gt;
cd lambda&lt;br&gt;
mkdir telegram-bot&lt;br&gt;
touch index.js&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Paste this into &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
exports.handler = async function(event) {&lt;br&gt;
    console.log("request:", JSON.stringify(event, undefined, 2));&lt;br&gt;
    return {&lt;br&gt;
      statusCode: 200,&lt;br&gt;
      headers: { "Content-Type": "text/plain" },&lt;br&gt;
      body: `Hello, CDK! You've hit ${event.path}\n`&lt;br&gt;
    };&lt;br&gt;
  };&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, lets go back to &lt;code&gt;cdk-tool&lt;/code&gt; directory from parent directory and link the lambda function sourcecode with AWS Lambda Construct and later bind it with API Gateway route.&lt;/p&gt;

&lt;p&gt;Before that, you would need to install lambda and apigateway cdk constructs using&lt;/p&gt;

&lt;p&gt;&lt;code&gt;`&lt;br&gt;
npm install @aws-cdk/aws-lambda&lt;br&gt;
npm install @aws-cdk/aws-apigateway&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now move to cdk-tool directory :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd cdk-tool&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;lib/cdk-tool-stack.js&lt;/code&gt; and paste this imports at top:&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
const lambda = require("@aws-cdk/aws-lambda");&lt;br&gt;
const apigw = require("@aws-cdk/aws-apigateway");&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Lambda CDK construct would look lik below.&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
    const lambdaTelegram = new lambda.Function(this, "telegramBotHandler", {&lt;br&gt;
      runtime: lambda.Runtime.NODEJS_14_X,&lt;br&gt;
      handler: "index.handler",&lt;br&gt;
      code: lambda.Code.fromAsset("../lambda/telegram-bot"), // from parent directory containing package.json&lt;br&gt;
      architecture: lambda.Architecture.ARM_64,&lt;br&gt;
      environment: {&lt;br&gt;
        'CURRENT_ENV': 'dev',&lt;br&gt;
      }&lt;br&gt;
    });&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As seen above, we have mapped lamba sourcecode using &lt;code&gt;lambda.Code.fromAsset&lt;/code&gt; and have setup runtime environment, entry of the function, architecture and Lambda Environment variables. &lt;/p&gt;

&lt;p&gt;We would also require API Gateway Proxy integration to map it with this lambda function and get invokable API Link using &lt;code&gt;apigw.RestApi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;`javascript&lt;br&gt;
    const restApi = new apigw.RestApi(this, "telegrambot-api", { deploy: false });&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new resource path and setup GET method with it and attach it with lambda function construct.&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
    const method = restApi.root&lt;br&gt;
      .addResource("bot")&lt;br&gt;
      .addMethod("GET", new apigw.LambdaIntegration(lambdaTelegram, { proxy: true }));&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since, we have passed &lt;code&gt;{ deploy: false }&lt;/code&gt; inside api.RestApi construct props, we would need to create manual deployment and stage by ourselves. Incase, if you do not pass that option, it would create deployment and default &lt;code&gt;prod&lt;/code&gt; stage for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;`javascript&lt;br&gt;
    const devDeploy = new apigw.Deployment(this, "dev-deployment", { api: restApi });&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Creating our own Stage with customized properties using &lt;code&gt;apigw.Stage&lt;/code&gt;&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
    const devStage = new apigw.Stage(this, "devStage", {&lt;br&gt;
      deployment: devDeploy,&lt;br&gt;
      stageName: 'dev' // If not passed, by default it will be 'prod'&lt;br&gt;
    });&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Emitting the output values after deployment using  &lt;code&gt;cdk.CfnOutput&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;`javascript&lt;br&gt;
    new cdk.CfnOutput(this, "BotURL", {&lt;br&gt;
      value: `https://${restApi.restApiId}.execute-api.${this.region}.amazonaws.com/dev/bot`,&lt;br&gt;
    });&lt;br&gt;
`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Final code should look as below.&lt;/p&gt;

&lt;p&gt;{% gist &lt;a href="https://gist.github.com/arki7n/8a699db59c42c9e1aa11c88e18321807"&gt;https://gist.github.com/arki7n/8a699db59c42c9e1aa11c88e18321807&lt;/a&gt; %}&lt;/p&gt;

&lt;p&gt;Now, lets validate the written constructs and see if it generates valid cloudformation template.&lt;/p&gt;

&lt;p&gt;Enter command in root directory&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cdk synth &lt;/code&gt;&lt;br&gt;
 and then you will some new directories in your folder structure which contains cloudformation and metadata.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gla-n2Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ehuskfn8w7mhdmjeoj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gla-n2Sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1ehuskfn8w7mhdmjeoj.JPG" alt="CDK Synth" width="395" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets deploy this application using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cdk deploy&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ah9-dm1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcelarf5dv5ppov6sr1w.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ah9-dm1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcelarf5dv5ppov6sr1w.JPG" alt="CDK Deploy start" width="880" height="548"&gt;&lt;/a&gt;&lt;br&gt;
You can see in above screenshot with resources that would be created. Confirm by pressing &lt;code&gt;y&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9d71EOYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hm64i5qqux3w3b32pp3m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9d71EOYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hm64i5qqux3w3b32pp3m.JPG" alt="CDK Deploy done" width="687" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To destroy the application:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cdk destroy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qTjQc_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5lrpb5riu6pgf4gma05.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qTjQc_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5lrpb5riu6pgf4gma05.JPG" alt="CDK Destroy" width="413" height="33"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confirm deletion by pressing &lt;code&gt;y&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5gZFAmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x74dkefde1j2urr885qw.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5gZFAmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x74dkefde1j2urr885qw.JPG" alt="CDK Destroyed" width="390" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the sourcecode on Git repository at :&lt;br&gt;
&lt;a href="https://github.com/arki7n/aws-cdk-telegram-bot-example.git"&gt;https://github.com/arki7n/aws-cdk-telegram-bot-example.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Hope you have get to complete all of the above steps and achieved the desired output. You can customize the lambda function source code and experiment things on your own as well. I shall be back with part 2 of this series in next blog post.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__178424"&gt;
  
    .ltag__user__id__178424 .follow-action-button {
      background-color: #2E0338 !important;
      color: #FFFFFF !important;
      border-color: #2E0338 !important;
    }
  
    &lt;a href="/arki7n" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ1WT9PT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--FyHDdJdr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/178424/63d9d626-a629-4cc0-a9d8-29041b7152a4.jpeg" alt="arki7n image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/arki7n"&gt;Akhilesh Yadav&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/arki7n"&gt;- Software Engineer at Morningstar
- Blogger at ayzom.com
- Love Javascript and Cloud&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>aws</category>
      <category>javascript</category>
      <category>cloud</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build a Javascript Chat App</title>
      <author>Hiep Le</author>
      <pubDate>Tue, 02 Nov 2021 09:08:35 +0000</pubDate>
      <link>https://dev.to/cometchat/how-to-build-a-javascript-chat-app-493c</link>
      <guid>https://dev.to/cometchat/how-to-build-a-javascript-chat-app-493c</guid>
      <description>&lt;p&gt;What you’ll be building, Git Repo &lt;a href="https://github.com/cometchat-pro-tutorials/javascript-chat-app"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oBtTWh5us3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#popular-articles"&gt;
  &lt;/a&gt;
  Popular Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-an-uber-clone-app-with-react-1l73"&gt;Uber Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-social-networking-site-with-next-js-facebook-clone-3eke"&gt;Facebook Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more popular articles, you can check my profile 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;App and web development have come a long way over the last few years. We use a lot of chat applications every day, including Facebook Messenger, WhatsApp, Snapchat, and so on. One of the most widely used features is live chat. Using the &lt;a href="https://prodocs.cometchat.com/docs/web-chat-widget"&gt;CometChat Widget&lt;/a&gt;, &lt;a href="https://console.firebase.google.com/"&gt;Firebase&lt;/a&gt; backend services you will learn how to make a chat app with Javascript with minimal effort.&lt;/p&gt;

&lt;p&gt;Follow along the steps to build a Javascript chat app that will provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A way for end-users to signup (email &amp;amp; password is sufficient)&lt;/li&gt;
&lt;li&gt;A way for users to login in and have a short profile (Name, UID, Photo, About)&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://prodocs.cometchat.com/v2.1/docs/web-chat-widget"&gt;CometChat Chat Widget&lt;/a&gt; and configure it such that:

&lt;ul&gt;
&lt;li&gt;List of Users/Contacts is visible to all users with the search bar&lt;/li&gt;
&lt;li&gt;All users can text chat and share images, audio, video, document,&lt;/li&gt;
&lt;li&gt;All users can initiate voice &amp;amp; video call each other and groups&lt;/li&gt;
&lt;li&gt;Users can create/exit groups and add/remove other users&lt;/li&gt;
&lt;li&gt;Group chat via text, voice, and video must be enabled for all users&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Login the logged-in user to &lt;a href="https://www.cometchat.com/?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=cometchat"&gt;CometChat&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Add API call when a user registers so that the user is created in &lt;a href="https://www.cometchat.com/?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=cometchat"&gt;CometChat&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial will use Javascript, &lt;a href="https://console.firebase.google.com/"&gt;Firebase&lt;/a&gt;, and &lt;a href="https://www.cometchat.com/?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=cometchat"&gt;CometChat&lt;/a&gt; to build Javascript chat application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow this tutorial, you must have a degree of understanding of the general use of HTML, CSS, Javascript to build Javascript chat app. This will help you to improve your understanding of this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;To create a new project, you just need to create a folder which is called “javascript-chat-app”. The image below reveals the project structure of our Javascript chat application. Make sure you see the folder arrangement before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oN5sfyfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630220258970_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oN5sfyfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630220258970_image.png" alt="Figure 1. Project Structure" width="173" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each subfolder and file will be explained in detail in the following section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;css:&lt;/strong&gt; contains all styling for our javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img:&lt;/strong&gt; contains images for the application such as logo, background, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;js:&lt;/strong&gt; contains Javascript code and our business logic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;favicon.ico:&lt;/strong&gt; it is favicon.ico for the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index.html:&lt;/strong&gt; root HTML file. HTML file for the home page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;login.html:&lt;/strong&gt; HTML file for the login page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.gitignore:&lt;/strong&gt; this file contains files that will be ignored when committing the code. In this case, we do not want to commit the “config.js” file because it contains the secret keys of the Javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;screenshots:&lt;/strong&gt; this folder contains images that are used for README.md file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;README.md:&lt;/strong&gt; describes the application and provides steps by steps to run the application.
## Installing the Javascript Chat App Dependencies&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 1: you need to have &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2: The application is using HTML, CSS, Javascript. For this reason, you need to have a simple HTTP server to serve our application. In this case, you will use &lt;a href="https://github.com/http-party/http-server"&gt;http-server&lt;/a&gt;, you can install the http-server by running the following statement. After installing the http-server package, you just need to “cd” to your project’s directory and run “http-server .”&lt;/p&gt;

&lt;p&gt;npm install -g http-server&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configuring-cometchat"&gt;
  &lt;/a&gt;
  Configuring CometChat
&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Head to CometChat and &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=dashboard"&gt;create an account&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=dashboard"&gt;dashboard&lt;/a&gt;, add a new app called "chat-widget".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select this newly added app from the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From the Quick Start copy the APP_ID, REGION, and AUTH_KEY, which will be used later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, copy the REST_API_KEY from the API &amp;amp; Auth Keys tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to the Users tab, and delete all the default users and groups leaving it clean &lt;em&gt;(very important)&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a file called “config.js” in the ”js” folder of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Import and inject your secret keys in the “config.js” file containing your CometChat and Firebase in this manner.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;databaseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAppId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatRegion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAuthKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAPIKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatWidgetId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Make sure to include this file in your gitIgnore file from being exposed online.
## Setting Up Firebase Project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;According to the requirements of the Javascript chat application, you need to let users create a new account and login to the application, Firebase will be used to achieve that. Head to Firebase to create a new project and activate the email and password authentication service. This is how you do it:&lt;br&gt;
To begin using Firebase, you’ll need a Gmail account. Head over to &lt;a href="https://console.firebase.google.com/u/0/"&gt;Firebase&lt;/a&gt; and create a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1w9SlY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630159114235_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1w9SlY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630159114235_image.png" alt="Figure 2. Firebase" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firebase provides support for authentication using different providers. For example, Social Auth, phone numbers, as well as the standard email and password method. Since you will be using the email and password authentication method in this tutorial, you need to enable this method for the project you created in Firebase, as it is by default disabled.&lt;br&gt;
Under the authentication tab for your project, click the sign-in method and you should see a list of providers currently supported by Firebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySE3libB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630159920317_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySE3libB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630159920317_image.png" alt="Figure 3.  Firebase Authentication." width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click the edit icon on the email/password provider and enable it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMsXPLkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630160408419_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMsXPLkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630160408419_image.png" alt="Figure 4. Enable Firebase Authentication with Email and Password." width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you need to go and register your application under your Firebase project. On the project’s overview page, select the add app option and pick web as the platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--22jZGJEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630160677641_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--22jZGJEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630160677641_image.png" alt="Figure 5. Firebase Dashboard." width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’re done registering the application, you’ll be presented with a screen containing your application credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0OGyiyy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630656775626_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0OGyiyy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630656775626_image.png" alt="Figure 6. Firebase credentials." width="444" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please update your created “config.js” file with the above corresponding information. If you do not see the information for the “databaseUrl” field in the config.js file. Please do not worry we will discuss it in the “Configuring the Firebase” section.&lt;/p&gt;

&lt;p&gt;Congratulations, now that you're done with the installations, let's do some configurations.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configuring-styling-for-the-application"&gt;
  &lt;/a&gt;
  Configuring Styling for the Application
&lt;/h2&gt;

&lt;p&gt;Inside our Javascript chat app project structure, you need to create a styles.css file inside the “css” folder and paste the codes &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/css/styles.css"&gt;here&lt;/a&gt;. styles.css file will contain all CSS of the application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-images-for-the-application"&gt;
  &lt;/a&gt;
  Setting Up Images for the Application
&lt;/h2&gt;

&lt;p&gt;To store images for the application such as the logo and other images, you need to create the “img” folder inside your “javascript-chat-app” folder. Following that, if you can refer to this &lt;a href="https://github.com/hieptl/javascript-chat-app/tree/main/img"&gt;link&lt;/a&gt; to get the images that will be used in this tutorial.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configuring-the-firebase"&gt;
  &lt;/a&gt;
  Configuring the Firebase
&lt;/h2&gt;

&lt;p&gt;You need to create a “firebase.js” file inside the “js” folder and you need to enable Firebase realtime database by following the below steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOkl-Czs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657058438_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOkl-Czs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657058438_image.png" alt="Figure 7. Choose “Realtime Database” option." width="791" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWphsbk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657170655_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWphsbk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657170655_image.png" alt='Figure 8. Click on “Create Database".' width="740" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWl-JmQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658067148_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWl-JmQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658067148_image.png" alt="Figure 9. Select location where you realtime database will be stored." width="733" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5L9symq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658182709_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5L9symq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658182709_image.png" alt="Figure 10. Select “Start in test mode” for the learning purpose." width="820" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please follow the guidance from Firebase. After following all steps, you will see the database URL. If you just need to update the “databaseUrl” field in your “config.js” file with that value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyzoYVoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657383693_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyzoYVoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630657383693_image.png" alt="Figure 11. Database Url." width="880" height="188"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, your Firebase real-time database will be expired in the future. To update the rules you just need to select the “Rules” tab and update the date/time in milliseconds as you can see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iC7zRgkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658359315_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iC7zRgkF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630658359315_image.png" alt="Figure 12. Update Firebase Realtime Database Rules." width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While developing the application, you may see a warning message on the console.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;firebase&lt;/span&gt;&lt;span class="sr"&gt;/database: FIREBASE WARNING: Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding ".indexOn": "email" at /u&lt;/span&gt;&lt;span class="nx"&gt;sers&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;security&lt;/span&gt; &lt;span class="nx"&gt;rules&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="nx"&gt;performance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To resolve the issue, you need to update the rules for your real-time database as follow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOawY-WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630659161525_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOawY-WF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630659161525_image.png" alt="Figure 13. Update database rules for better performance." width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information about the warning message and how to fix, you can refer to this &lt;a href="https://firebase.google.com/docs/database/security/indexing-data"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This “firebase.js” file is responsible for interfacing with Firebase authentication and database services. Also, it makes ready our email/password authentication service provider enabling us to sign in with email/password. Secret keys will be retrieved from the config file. As mentioned above, please do not share your secret keys on GitHub.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The below images demonstrate the data structure of the application. A user should have an avatar, an email, an id.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j62jQSJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630162738655_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j62jQSJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630162738655_image.png" alt="Figure 14. Data Structure - User." width="637" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-login-page"&gt;
  &lt;/a&gt;
  The Login Page
&lt;/h2&gt;

&lt;p&gt;This page is responsible for authenticating users using the Firebase authentication service. It accepts the user credentials and either signs him up or in, depending on if he is new to our application. To create the login page for the Javascript chat application, you need to follow the below steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create login.html in the source folder. The source code can be found from &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/login.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You need to include some third-party libraries such as &lt;a href="https://prodocs.cometchat.com/v2.1/docs/web-chat-widget"&gt;CometChat Widget&lt;/a&gt;, &lt;a href="https://github.com/uuidjs/uuid"&gt;Uuid&lt;/a&gt;, &lt;a href="https://github.com/validatorjs/validator.js/"&gt;Validator&lt;/a&gt;, &lt;a href="https://console.firebase.google.com/"&gt;Firebase&lt;/a&gt; via CDN because you are building the Javascript chat app. Therefore, npm should not be used here. You need to add those libraries for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CometChat Widget: help us to integrate CometChat Widget to the Javascript chat app. On the other hand, you need to use some other functionalities from CometChat such as registering a new user, letting the user log in to CometChat, or letting the user log out from CometChat.&lt;/li&gt;
&lt;li&gt;UUID: each created user should have a unique id. Hence, the UUID library is used to generate a unique key for each account.&lt;/li&gt;
&lt;li&gt;Validator: it is used to validate the login/sign-up form. Because you need to ensure that the input information is valid before creating a new account or letting a user log in to the chat application.&lt;/li&gt;
&lt;li&gt;Firebase: it helps us to interact with Firebase and use Firebase services such as Firebase Authentication, Firebase Realtime Database, and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides using third-party libraries, you need to build some files to handle the logic for the Javascript chat app such as auth.js, config.js, firebase.js, util.js, login.js. Config.js and firebase.js were mentioned in the above sections. We will discuss auth.js, util.js, and login.js in the following parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-authjs-file"&gt;
  &lt;/a&gt;
  The Auth.js File
&lt;/h2&gt;

&lt;p&gt;According to the requirements of the Javascript chat application, the application needs to provide a way for users to login in and have a short profile. After the user has logged in to the application, the user cannot go back to the login page. On the other hand, if the user has not signed in to the application, the user cannot go to the home page. We need to define a solution to handle this case. Therefore, auth.js will be created to help us achieve that. The full source code can be found from &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/js/auth.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The CometChat Widget provides the “getLoggedinUser” function to get the logged-in user. Auth.js will be used on both the login page and the home page. It means that this file will be executed first before other actions. This file will take responsibility for checking the current user has logged in, or not. If the user has not logged in to the application, the user would be redirected to the login page. Otherwise, if the current user has logged in to the Javascript chat app, the user cannot go back to the login page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-utiljs-file"&gt;
  &lt;/a&gt;
  The Util.js File
&lt;/h2&gt;

&lt;p&gt;Some functionalities can be used across pages of the Javascript chat app such as showing or hiding the loading indicator or get the information of the authenticated user. To avoid duplicated code, you should store all common functionalities in a single file, and in this case, this file is called “util.js”. The full source code can found &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/js/util.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-loginjs-file"&gt;
  &lt;/a&gt;
  The Login.js File
&lt;/h2&gt;

&lt;p&gt;The file will take responsibility for handling the business logic for the login page. This file contains functions which can let the user register a new account or log in to the application. The full source code can be found from &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/js/login.js"&gt;here&lt;/a&gt;.&lt;br&gt;
After clicking the sign-up button, the “registerNewAccount” function will be triggered. It accepts a JSON object as a parameter and the JSON object contains the user’s information including the user’s email, user’s password, and user’s password confirmation. Before proceeding with further actions, the user’s information needs to be validated by using the “validateNewAccount” function. If the information is valid, the user’s avatar and user’s id will be generated. As mentioned before, each user should have a unique id. After that, the application will register a new account by using the Firebase Authentication service and then register an account on CometChat by using the “CometChatWidget”. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To log in to the Javascript chat application, the user needs to click on the “Login” button. The below code snippet describes how to handle the business logic for the sign-in feature. the user’s credentials will be taken from the input elements first and the application validates that information. If the input information is valid, the application will let the user sign in by using the Firebase Authentication Service and the “CometChatWidget”. Aside from that, the authenticated user will be redirected to the home page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-create-chat-widget-on-cometchat"&gt;
  &lt;/a&gt;
  How to Create Chat Widget on CometChat.
&lt;/h2&gt;

&lt;p&gt;As mentioned above, you will learn how to make a chat app with Javascript with minimal effort. You can achieve that because we have strong support from CometChat. Thanks to the CometChat team. They are providing great services. To create a chat widget on CometChat you need to follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Go to the &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=dashboard"&gt;CometChat dashboard&lt;/a&gt; by using your created account and then go to your created app. Hopefully, you had one after finishing the “Configuring CometChat” section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tykJW35V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630168456222_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tykJW35V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630168456222_image.png" alt="Figure 15. CometChat Dashboard - Chat Widget Application - Javascript Chat Application." width="858" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2: You need to choose the “Chat Widget” option on the left sidebar. You will be redirected to the page in which you can create a new chat widget.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8IDJGWjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630168696879_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8IDJGWjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630168696879_image.png" alt="Figure 16. CometChat Dashboard - Chat Widget Application - Javascript Chat Application - Choose the “Chat Widget” option." width="830" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3: On the current page, you need to choose the “New Chat Widget” option, CometChat system will create a new chat widget for you and redirect you to the created chat widget.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQW2IIIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630203501685_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQW2IIIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630203501685_image.png" alt="Figure 17. CometChat Dashboard - Chat Widget Application - Javascript Chat Application - Choose the “New Chat Widget” option." width="810" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 4: You need to update your config.js with the following keys.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pucersz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630206127319_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pucersz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630206127319_image.png" alt="Figure 18. CometChat Dashboard - Chat Widget Application - Javascript Chat Application - Chat Widget Credentials option." width="853" height="440"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAppId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatRegion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAuthKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAPIKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatWidgetId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=dashboard"&gt;CometChat dashboard&lt;/a&gt; provides a great way to help us configure all features for the Javascript chat application with minimum effort. You just need to select the section that you want to customize and toggle those features by clicking on the “toggle” button. Aside from that, you can customize by adding your Javascript code and your CSS. The following images help you understand clearly what we are talking about.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mk1UhIf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630211606088_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mk1UhIf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630211606088_image.png" alt="Figure 19. CometChat Dashboard - Chat Widget Application - Javascript Chat Application - Customize your Javascript code and your CSS." width="825" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jp80eIIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630212071325_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jp80eIIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97C12218C2C42467580F3CD3CC0FEA9DE0DCE7708763AA2477EAE3E80A560C0B_1630212071325_image.png" alt="Figure 20. CometChat Dashboard - Chat Widget Application - Javascript Chat Application - Customize sections" width="768" height="386"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-home-page"&gt;
  &lt;/a&gt;
  The Home Page
&lt;/h2&gt;

&lt;p&gt;After the user has logged in to the application, the user will be redirected to the home page and on this page, you will integrate CometChat Widget to build the Javascript chat application. We have set up, created a new chat widget, and update the secret keys in the “config.js” file. It is time to integrate the created chat widget into the home page. To create the home page, you need to follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create index.html file in your project folder. The full source code can be found &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/index.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;As you can see on the code snippet above, you need to include the  “CometChat Widget” from the CDN because we want to build the Javascript chat app by using Javascript and CometChat Widget. You also need to include some common files, which were mentioned in the above sections, such as auth.js, config.js, util.js. The index.js file will be discussed in the following part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexjs-file"&gt;
  &lt;/a&gt;
  The Index.js File
&lt;/h2&gt;

&lt;p&gt;This file will take responsibility for showing greeting to the authenticated user on the header, handling the logic when clicking on the “Logout” button, and launching the CometChat Widget.&lt;br&gt;
The full source code can be found from &lt;a href="https://github.com/hieptl/javascript-chat-app/blob/main/js/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The most important of the above code snippet is how to launch the CometChat Widget. Therefore, we can set up full features for the Javascript chat application. According to the &lt;a href="https://prodocs.cometchat.com/v2.1/docs/web-chat-widget"&gt;CometChat Widget documentation&lt;/a&gt;, you need to initialize the CometChat Widget first, if initialization is completed successfully, the code of launching the CometChat Widget will be executed. Aside from that, all configurations will be taken from the “config.js” file. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After clicking the “Logout” button, we should call the “logout” function which is provided by the CometChat team. If the function is executed successfully, we need to redirect the user to the login page. You can refer to the below code snippet.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, we have done an amazing job in developing a Javascript chat application by leveraging Javascript, Firebase, and CometChat. You’ve been introduced to the chemistry behind the Javascript chat application and how the &lt;a href="https://prodocs.cometchat.com/v2.1/docs/web-chat-widget"&gt;CometChat Widget&lt;/a&gt; makes chat applications buildable.&lt;br&gt;
You have seen how to integrate most of the CometChat functionalities such as texting and real-time messaging. I hope you enjoyed this tutorial and that you were able to successfully build the Javascript chat app. It's time to get busy and build other related applications with the skills you have gotten from this tutorial. You can start building your chat app for free by &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=js-chat-app&amp;amp;utm_term=dashboard"&gt;signing up to the cometchat dashboard&lt;/a&gt; here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the Author
&lt;/h2&gt;

&lt;p&gt;Hiep Le is a software engineer. He takes a huge interest in building software products and is a full-time software engineer. Most of his work is focused on one thing - to help people learn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cardano; Ada is a popular digital currency project</title>
      <author>sebastian tiger</author>
      <pubDate>Tue, 02 Nov 2021 08:51:23 +0000</pubDate>
      <link>https://dev.to/sebastiantiger6/cardano-ada-is-a-popular-digital-currency-project-3f6g</link>
      <guid>https://dev.to/sebastiantiger6/cardano-ada-is-a-popular-digital-currency-project-3f6g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Since 2015, the Cardano project and its digital currency ADA have made a lot of noise in pro-cryptocurrencies. ADA is also one of the most popular digital currency projects among Iranian traders and holders. What makes Cardano one of the best in the field is; Utilization of complex scientific and academic topics that have been seriously pursued in its development.&lt;/p&gt;

&lt;p&gt;Much of the project was developed by Input Output Hong Kong (IOHK) and was founded by Charles Hoskinson, a former member of the Ethereum team.&lt;/p&gt;

&lt;p&gt;But what is Cardano and what features does it have in its long roadmap?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cardano-ada"&gt;
  &lt;/a&gt;
  What is Cardano (ADA)?
&lt;/h2&gt;

&lt;p&gt;Cardano is a multi-purpose blockchain whose development stages originated from the academic research of a group of engineers, mathematicians, scientists, and business professionals. The development of the Cardano platform is continuously supported by scientific approaches. According to its creators, the key goal of Cardano design is security, scalability and interoperability.&lt;/p&gt;

&lt;p&gt;Ada is the native digital currency of the Cardano platform and is used to operate on the Cardano blockchain. The Cardano team believes that increasing the network scalability capacity, it has solved the problem of increasing the transaction fee cost during busy network times.&lt;/p&gt;

&lt;p&gt;Cardano Development is entrusted to several business sectors. IOHK is leading the development of the Cardano Protocol, while the Cardano Foundation is responsible for overseeing the project. In addition, EMURGO is responsible for business development and promoting project acceptance. IOHK has also been involved in the development of the Classic Ethereum(ETC) project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-cardano-ada-work"&gt;
  &lt;/a&gt;
  How does Cardano (Ada) work?
&lt;/h2&gt;

&lt;p&gt;Cardano is designed as a third-generation blockchain to solve the scalability problems of first-generation blockchains such as Bitcoin or second-generation blockchains such as Ethereum.&lt;/p&gt;

&lt;p&gt;According to this classification, the previous generation blockchains have problems that affect their power. This has made them an inefficient choice for widespread use around the world. To confirm this problem, the history of time fluctuations in the blockchain transactions of Bitcoin and Ethereum can be examined.&lt;/p&gt;

&lt;p&gt;For comparison in his documents, Cardano refers to the computing power of VISA:&lt;/p&gt;

&lt;p&gt;The network is said to have paid an average of 1,736; It has a transaction per second (TPS). This amount can reach a maximum of 24,000 transactions per second. ”&lt;/p&gt;

&lt;p&gt;Cardano always approaches the goal of improving its performance with the help of various methods. One of the most important pillars of this goal is Cardano's special stock-proof consensus (PoS) mechanism known as Ouroboros. Oroborus, while proven to ensure security; Reduces energy costs compared to using the Proof of Work (PoW) mechanism.&lt;/p&gt;

&lt;p&gt;Cardano's Layer 2 solution to increase network scalability is called Hydra. In Hydra, with each new node connected to the network, the power increases. Hard fork combinator is also one of the key features of Cardano, which makes it possible to implement a hard fork or hard fork without interrupting or restarting the blockchain. The success of the Shelley update is a testament to the effectiveness of this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-the-cardano-project"&gt;
  &lt;/a&gt;
  Key features of the Cardano project
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the most important strength of the Cardano project is the advancement of goals through academic and scientific means. Cardano's development team has published more than 90 proprietary whitepapers for this technology. The roadmap for this project is also well defined and its main goal is to achieve security, scalability and interoperability.&lt;/p&gt;

&lt;p&gt;Although the Cardano blockchain is not yet operational, scalable smart contract capability will pave the way for it in the future. Cardano seems to have all the necessary tools to become a fintech transformer.&lt;/p&gt;

&lt;p&gt;Just like Ethereum, Cardano has countless applications and uses, and Cardano's main goal is to act as a body or a core layer and build applications on it.&lt;/p&gt;

&lt;p&gt;This project promises great promises, yet it has not yet achieved the product it promised; Fully deliver. However, this is the case in almost all digital currency projects except Bitcoin. In this regard, although Cardano's ambition is clearly visible, its development is relatively slow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-of-the-cardano-project"&gt;
  &lt;/a&gt;
  Challenges of the Cardano Project
&lt;/h2&gt;

&lt;p&gt;The speed of practical fulfillment of Cardano's promises and ideas is much slower than previously thought. Many market participants are also worried or even nervous about this. Of course, it should not be forgotten that Cardano pursues great goals.&lt;/p&gt;

&lt;p&gt;Recently, some critics of this project have noticed strange technical problems by examining the mechanism of transaction management and especially the behavior of unspent transaction output (UTXO) in the Cardano blockchain. Of course, the criterion for studies in this particular case is the way the Atrium network works, and Cardano is a project that uses different technology. However, according to experts, if a solution to these problems is not found quickly, Cardano will be virtually eliminated from the competition in the development of decentralized applications (Dapps) on this platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cardano-roadmap-ada"&gt;
  &lt;/a&gt;
  What is the Cardano Roadmap (ADA)?
&lt;/h2&gt;

&lt;p&gt;Cardano's roadmap consists of five main phases: Byron, Shelley, Goguen, Basho and Voltaire (Byron, Shelley, Goguen, Basho, and Voltaire). Each of these phases transforms a major part of the network.&lt;/p&gt;

&lt;p&gt;Byron, for example, was the first phase of the network launch, in which basic functions such as ADA transfer were provided, or Shell Hard Fork occurred in 2020 and took further steps to decentralize the project.&lt;/p&gt;

&lt;p&gt;Nodes are currently managed by the Cardano community and stock pools are managed by ADA holders. The Gugoen upgrade will pave the way for smart contracts, followed by a focus on optimizing scalability and interoperability in the Basho phase, and a Treasury system for governance in the Voltaire phase.&lt;/p&gt;

&lt;p&gt;In general, the Ada project is constantly evolving, so that at the time of writing, the cryptocurrency community is waiting for the Alonzo hard fork to arrive in late September 1400, which will allow smart contracts to be implemented on the Cardano network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-ada-token"&gt;
  &lt;/a&gt;
  What is an ADA Token?
&lt;/h2&gt;

&lt;p&gt;Ada is named after the nineteenth-century mathematician Ada Lovelace. Cardano sold $ 62.2 million in its initial public offering (ADA), which is equivalent to 57.6% of its inventory.&lt;/p&gt;

&lt;p&gt;ADA is both a digital currency and a way to conduct transactions on the Cardano network (just like ether for transactions on the Atrium network). ADA holders also have a stake in Cardano Network and can use their pool pools to stake or donate their currency to the network and receive rewards through this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cardano-wallet-ada-what-can-we-do-to-maintain-cardano"&gt;
  &lt;/a&gt;
  Cardano Wallet (ADA); What can we do to maintain Cardano?
&lt;/h2&gt;

&lt;p&gt;There are several ways to maintain Cardano. The official way to maintain it is to use the Daedalus open-source wallet. To use this Cardano wallet, the user has to download the entire blockchain Cardano network because Daedalus is a Full node wallet.&lt;/p&gt;

&lt;p&gt;Of course, there are less troublesome ways to maintain ADA. For example, using wallets that are not full node and are called light wallets is another solution for keeping Cardano. You do not need to download the entire Cardano blockchain to use these wallets, and you can easily use them. Among the best Cardano wallets are Yoroi Wallet and AdaLite.&lt;/p&gt;

&lt;p&gt;Cardano can also be stored in hardware wallets such as Ledger and Trezor via Daedalus, Yoroi Wallet and AdaLite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-last-word"&gt;
  &lt;/a&gt;
  The last word
&lt;/h2&gt;

&lt;p&gt;Cardano is an ambitious project aimed at building blockchain infrastructure in the digital currency ecosystem.&lt;/p&gt;

&lt;p&gt;Due to the fact that the progress of Ada is not very fast, the challenges and problems on its way show themselves at a slower pace. It should not be forgotten that it does not take long for developers to grapple with the core features of the Cardano network, so it is natural for some problems and challenges to arise due to the use of newer technology on this platform.&lt;/p&gt;

&lt;p&gt;It remains to be seen, however, whether Ada, as the third generation of blockchain projects, can finally prove itself and become the dominant platform for smart contracts. Or will it hand over its position to another project? These are questions that will be answered as Cardano progresses on his roadmap.&lt;/p&gt;

</description>
      <category>ada</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Express</title>
      <author>Padmashree Jha</author>
      <pubDate>Tue, 02 Nov 2021 08:44:51 +0000</pubDate>
      <link>https://dev.to/codewithpom/express-52l0</link>
      <guid>https://dev.to/codewithpom/express-52l0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGsjOEh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gqmkeb90yyurgv8cavq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGsjOEh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gqmkeb90yyurgv8cavq.png" alt="Express Logo" width="408" height="123"&gt;&lt;/a&gt;&lt;br&gt;
So this is my first blog and today I will show how to use &lt;strong&gt;express&lt;/strong&gt; a javascript framework for making &lt;strong&gt;servers&lt;/strong&gt;, and maybe sometimes there would be some mistakes in this blog in my writing as I am new, so comment it out.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Express is a web framework for &lt;strong&gt;Node.js&lt;/strong&gt; here is there website link &lt;a href="http://expressjs.com/"&gt;http://expressjs.com/&lt;/a&gt;.You can know more about it by the link above.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;p&gt;There are some requirements to learn express &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have Some Knowledge About &lt;strong&gt;Node.js&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Have Node.js installed (if you do not have installed you can install by &lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A text-editor like &lt;strong&gt;vscode&lt;/strong&gt; (if you do not have a text-editor installed then install vscode search for it on &lt;strong&gt;google&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#good-to-go"&gt;
  &lt;/a&gt;
  Good To Go
&lt;/h2&gt;

&lt;p&gt;Once you have everything done we can go further.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h2&gt;

&lt;p&gt;Now open vscode and create a new project and do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and then do&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and then we are good to go&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#starter-code"&gt;
  &lt;/a&gt;
  Starter code
&lt;/h2&gt;

&lt;p&gt;Now create an &lt;strong&gt;index.js&lt;/strong&gt; file and in it put the following code&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;and save it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-the-server"&gt;
  &lt;/a&gt;
  Start the server
&lt;/h2&gt;

&lt;p&gt;Now as we have everything done we can start our server and to do that paste the following command in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then your server will start running and you can see your server response by going to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; and you will see a &lt;strong&gt;Hello World&lt;/strong&gt; you van change it by changing the response text on line &lt;strong&gt;8&lt;/strong&gt; and this link will work &lt;strong&gt;only&lt;/strong&gt; on your device. So this was all this was the most simple express app and in my next blog we will learn how to deploy it so that you can see it from anywhere and if you want part 2, try to give a comment.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>Migrating a static Hugo blog to AWS Amplify</title>
      <author>Aristide Bouix</author>
      <pubDate>Tue, 02 Nov 2021 08:43:17 +0000</pubDate>
      <link>https://dev.to/catawiki/migrating-a-static-hugo-blog-to-aws-amplify-2nnb</link>
      <guid>https://dev.to/catawiki/migrating-a-static-hugo-blog-to-aws-amplify-2nnb</guid>
      <description>&lt;p&gt;Fond of Cloud, Open Source and new technologies, Aristide leads the implementation of security controls on Catawiki’s Auction platform. In this publication he describes the historical technical considerations that applied to his personal website architecture built on AWS since its creation in 2016 to today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogs-origins"&gt;
  &lt;/a&gt;
  Blog’s Origins
&lt;/h2&gt;

&lt;p&gt;Back in 2016, I used to work as a Django developer, and as such, after starting working on AWS, I decided to host a personal website as a Django blog on AWS Elastic beanstalk.&lt;br&gt;
The blog was extremely minimalistic and configured to use two small AWS VMs, one for the application and another one for a Postgres database hosted in a private subnet. It also involved an S3 bucket to load some static content such as images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_FVWqe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8ktl6wengmxlto42bnq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_FVWqe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8ktl6wengmxlto42bnq.png" alt="Diagram 1: An Elastic Beanstalk 2-Tiers Architecture"&gt;&lt;/a&gt;&lt;/p&gt;
Diagram 1: An Elastic Beanstalk 2-Tiers Architecture



&lt;p&gt;While this approach was convenient to start getting familiar with AWS and leveraging several of their based infrastructure services (VPC, CloudWatch, S3, RDS, Route53 ...), it had many drawbacks, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django framework is heavy to maintain and update for a side-project&lt;/li&gt;
&lt;li&gt;Past the AWS free tiers, keeping two running VMs as small as they were wasn’t cheap &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;It simply couldn’t scale for more than 10 simultaneous users without autoscaling&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#going-static"&gt;
  &lt;/a&gt;
  Going static
&lt;/h2&gt;

&lt;p&gt;A bit later in 2017, I started hearing about these magic websites that could be built almost instantly using a static site generator and found that S3 could be configured to host them in one click. Therefore, I’ve benchmarked the two most popular solutions at that time, the Ruby engine Jekyll and the Go version called Hugo. As you can deduct it from this post’s title, I’ve gone for the second one as it was lighter and faster to build.&lt;/p&gt;

&lt;p&gt;With a static website, I wasn’t required any longer to keep a dedicated database to host my blog posts, users and their comments. Instead, I’ve chosen to rely on external SaaS services such as Disqus for comments and Algolia for searching. Both solutions allow generous free-tiers usage for non-commercial use.&lt;/p&gt;

&lt;p&gt;As serving content outside AWS is expensive, I’ve also added a Cloudfront distribution in front of the S3 bucket and was able to add a Lambda@Edge function in my website’s HTTP request responses&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Lambda@Edge allowed me to add additional security to my website, such as preventing serving content from a non-explicitly allowed domain with a Content-Security-Policy (CSP) HTTP header. I also actively monitor the messages returned by these security headers through the excellent monitoring platform Report-URI from &lt;a href="https://twitter.com/Scott_Helme?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor"&gt;Scott Helm&lt;/a&gt;. The website architecture, therefore, was simplified as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JxqwqABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb5afs6rm3cyza1g5cwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JxqwqABx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb5afs6rm3cyza1g5cwb.png" alt="Diagram 2: Static website hosted on S3"&gt;&lt;/a&gt;&lt;/p&gt;
Diagram 2: Static website hosted on S3



&lt;p&gt;This structure is much cheaper and more scalable and can serve thousands of users for less than €5 per month.&lt;/p&gt;

&lt;p&gt;A remaining caveat was that it was difficult to restrict access to the S3 website from the CloudFront&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt; service only. As described &lt;a href="https://abridge2devnull.com/posts/2018/01/restricting-access-to-a-cloudfront-s3-website-origin/"&gt;here&lt;/a&gt;, the usual AWS best practice of setting an Origin Access Identity (OAI) is incompatible with S3 website endpoints. The only workaround is to set a hardcoded “password” in an HTTP header supported as a condition in the S3 bucket policy. In addition, you need a few additional resources to get an automated CI/CD deployment from a Git repository (AWS CodePipeline) or some monitoring and alerting (Cloudwatch Alarms).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-to-amplify"&gt;
  &lt;/a&gt;
  Moving to Amplify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt; was initially a response from AWS to the popular simple web app hosting solution Firebase from Google&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt;. It designates a toolset integrating many AWS services (CI/CD, Authentication, CDN, hosting, monitoring ...) in a single place.&lt;/p&gt;

&lt;p&gt;Let’s see how it works. First you create a new hosting and choose the appropriate versioning service where the Hugo website skeleton is stored, in my case GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtGi1dyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8i9jzp6b1swx3zzysqr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtGi1dyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8i9jzp6b1swx3zzysqr.png" alt="Creating a new project on AWS Amplify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then Amplify will automatically detect what framework it should use to build the project and propose an appropriate build configuration. Furthermore, in the advanced setting, you can configure Amplify build to use a custom docker image stored in ECR (Elastic Container Registry) and environment variables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcHS4TfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxgvyh7v7qr9wpeptj78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcHS4TfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxgvyh7v7qr9wpeptj78.png" alt="AWS Amplify project configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And voila! The website is now live on an &lt;a href="https://sandbox.amplifyapp.com/getting-started"&gt;amplifyapp.com&lt;/a&gt; provided URL.&lt;/p&gt;

&lt;p&gt;Another powerful feature of Amplify is that you can easily host different versions of your project based on different Git branches; this enables you to run a testing version of a new feature before rolling it out to your main website. However, you may not want to expose this staging branch to the outside world. The good news is that AWS Amplify permits to effortlessly set a Basic Authentication in front of any website’s version. The less good news is that for an AWS managed service, I would also have expected the possibility to log in a user based on their AWS IAM identity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSTPijON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db76tvgawyjfs8pj88a3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSTPijON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db76tvgawyjfs8pj88a3.png" alt="AWS Amplify Access Control"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I already own a Route53 hosted zone, let’s change the default amplifyapp.com provided URL to my usual custom domain&lt;sup id="fnref5"&gt;&lt;a href="#fn5"&gt;5&lt;/a&gt;&lt;/sup&gt;. This will create a new CloudFront distribution with a free wildcard SSL certificate for your root domain and subdomains.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8C_wnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwzpoi0t7rt82m6ffaol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8C_wnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwzpoi0t7rt82m6ffaol.png" alt="AWS Amplify Custom Domains"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you follow this step, you may find that the console only redirects the root domain to the www subdomain during creation. For further redirection options, there is an additional 'Rewrites and redirects' menu that you can configure as follow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPtfzNgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zasejc4zdwmb2ckd2hb0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPtfzNgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zasejc4zdwmb2ckd2hb0.png" alt="AWS Amplify Rewrites and Redirects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rationale in this configuration is that by default AWS Amplify Redirect unknown URLs to the main page, so if you wish to show your own ‘404 not found page’ , it is better to advertise it as a ‘404 (Rewrite)’ instead of a ‘404 (Redirect)’. &lt;/p&gt;

&lt;p&gt;Also, for SEO, it is better to replace the default ‘302 (Redirect - Temporary)’ HTTP return code to ‘301 (Redirect - Permanent)’. A 302 return code may confuse Search Engines that will continue to reference the wrong URL, as the redirection is supposed to be temporary, ending up slowing the initial loading time of visitors coming from the wrong URL.&lt;br&gt;
Personally, I highly recommend choosing either your root or www subdomain and redirecting all other site references to it. Indeed, Search Engines tend to get confused when they’re getting the same page at different URLs. Do the same for the HTTP version of your site to HTTPS as you enjoy a free AWS managed SSL certificate, that will also decrease your domain spread.&lt;/p&gt;

&lt;p&gt;The last screenshot is for the custom header editor that I’ve particularly enjoyed, there you can define your site HTTP headers in a yaml format&lt;sup id="fnref6"&gt;&lt;a href="#fn6"&gt;6&lt;/a&gt;&lt;/sup&gt;. It is much more convenient than maintaining a lambda@Edge function. My only catch on this menu concerns  the editor that I find quite basic. So I copy paste the code and edit it in a separate editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QPxjg4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2yp05rjf2ovs9x8q5jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QPxjg4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2yp05rjf2ovs9x8q5jf.png" alt="Adding custom headers in AWS Amplify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a few additional power user functionalities that I don’t use for my relatively simple personal blog, so I won’t detail them here. These advanced functionalities include an Admin UI to configure team access to a serverless backend, direct CloudWatch monitoring and Alarm integration, and Pull Request system to merge changes between different branches and the master.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-analysis"&gt;
  &lt;/a&gt;
  Cost Analysis
&lt;/h2&gt;

&lt;p&gt;This study wouldn’t be exhaustive without a full pricing comparison between the AWS Amplify and a custom Cloudfront+S3+Lambda integration. I will simplify it a little, since I’ve configured CloudFront, my S3 costs were very low,  and Lambda@Edge costs have remained within the Lambda Free Tiers. Below is a breakdown of the different potential costs:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;CloudFront+S3+CodePipeline&lt;/th&gt;
&lt;th&gt;Amplify&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Build&lt;/td&gt;
&lt;td&gt;$1.00 per active pipeline per month&lt;br&gt;$0.005 per build minute (Frankfurt using general1.small)&lt;/td&gt;
&lt;td&gt;$0.01 per build minute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;$0.0043 per 10,000 GET and all other requests (Frankfurt)&lt;br&gt;$0.0245 per GB - first 50 TB / month of storage used (Frankfurt)&lt;/td&gt;
&lt;td&gt;$0.023 per GB stored per month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Egress&lt;/td&gt;
&lt;td&gt;$0.020 per GB - All data transfer out to Origin (Europe)&lt;br&gt;$0.085 per GB - first 10 TB / month data transfer out&lt;br&gt;$0.0120 per 10,000 HTTPS Requests&lt;/td&gt;
&lt;td&gt;$0.15 per GB served&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;One of the strengths of AWS Amplify is that costs are fixed for any region you operate in. This can prove more beneficial in certain geographic areas such as Asia Pacific, Australia or South America, where outbound traffic varies between $0.11 to $0.12.&lt;sup id="fnref7"&gt;&lt;a href="#fn7"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Here is a more literal comparison based on my website costs for July 2021:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Consumption&lt;/th&gt;
&lt;th&gt;CloudFront+S3 costs&lt;/th&gt;
&lt;th&gt;Amplify theoretical costs&lt;/th&gt;
&lt;th&gt;Theoretical savings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Build&lt;/td&gt;
&lt;td&gt;1 active pipeline&lt;br&gt; 3 build minutes&lt;/td&gt;
&lt;td&gt;$1 + $0.015&lt;/td&gt;
&lt;td&gt;$0.03&lt;/td&gt;
&lt;td&gt;$0.97&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;10,000 GET and other requests&lt;br&gt; 0.15 GB of storage&lt;/td&gt;
&lt;td&gt;$0.0043 + $0&lt;/td&gt;
&lt;td&gt;$0&lt;/td&gt;
&lt;td&gt;$0.0043&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Egress&lt;/td&gt;
&lt;td&gt;300k HTTPS requests Europe&lt;br&gt; 2.5 GB served&lt;br&gt; 130k HTTPS requests US&lt;br&gt; 1.3 GB served&lt;/td&gt;
&lt;td&gt;$0.4+$0.2+ $0.15 + $0.15 = $0.9&lt;/td&gt;
&lt;td&gt;$0.6&lt;/td&gt;
&lt;td&gt;$0.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;$1.91&lt;/td&gt;
&lt;td&gt;$0.63&lt;/td&gt;
&lt;td&gt;$1.28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;By using AWS Amplify, I got the same features for a third of the price while saving me from maintaining the underlying service components. This result is biased by the cost of keeping one running pipeline and relatively low traffic during summer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;AWS Amplify is a managed service shipped with CloudFront, S3, CloudWatch, CodePipeline, Cognito, API Gateway and even a serverless backend. Therefore, it perfectly fits smaller size projects based on static websites or frontend oriented frameworks such as React, Vue or Next.js. &lt;/p&gt;

&lt;p&gt;While using AWS Amplify is convenient, if you operate a high Annual Rate Return service with more than 500k users, I would consider it more profitable to spend the additional Engineering effort to finely configure the corresponding underlying services&lt;sup id="fnref8"&gt;&lt;a href="#fn8"&gt;8&lt;/a&gt;&lt;/sup&gt;. My conclusion to this blogpost is that, no matter how great a managed service such as Amplify, the Return On Investment decreases as consumption goes up. Therefore, the main target audience of AWS Amplify is individual developers to medium-sized applicative projects.&lt;/p&gt;




&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@smajor15"&gt;Scott Major&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;I even considered at the beginning to reserve 2 instances for 3 years to decrease the cost and discovered that the smallest instance sizes (t2.micro and t2.nano) were not eligible. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;For the curious reader, I’ve detailed in &lt;a href="https://aristidebouix.cloud/en/2018/04/secure-your-site-with-lambdaedge/index.html/"&gt;a previous post&lt;/a&gt; how I achieved this result. &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;AWS’ Content Delivery Network, used to locally cache static data and thus cut down egress costs. &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;From which the pricing model has been largely inspired. &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn5"&gt;
&lt;p&gt;&lt;em&gt;Beware&lt;/em&gt;: I got an error at this step because the main root domain (&lt;a href="https://aristidebouix.cloud/en/"&gt;aristidebouix.cloud&lt;/a&gt;) was still attached to the old CloudFront distribution. If you also migrate your website from a Cloudfront+S3 setup to Amplify you should first remember to remove the domain redirection in your old CloudFront distribution. &lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn6"&gt;
&lt;p&gt;See the &lt;a href="https://docs.aws.amazon.com/amplify/latest/userguide/custom-headers.html"&gt;service documentation&lt;/a&gt; for reference. &lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn7"&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: the cost to serve HTTP requests is actually lower on CloudFront than for HTTPS requests probably due to a slightly lower impact on server CPUs. If as me you block or redirect HTTP requests then all your traffic will be billed as HTTPS requests. &lt;a href="#fnref7"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn8"&gt;
&lt;p&gt;To the exception perhaps if your main market is located in expensive AWS regions such as South America, Australia or Asia Pacific. &lt;a href="#fnref8"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>hugo</category>
    </item>
    <item>
      <title>How to start to code</title>
      <author>SnowBit</author>
      <pubDate>Tue, 02 Nov 2021 08:27:11 +0000</pubDate>
      <link>https://dev.to/snowbit/how-to-start-to-code-5e04</link>
      <guid>https://dev.to/snowbit/how-to-start-to-code-5e04</guid>
      <description>&lt;p&gt;Welcome 👋,&lt;br&gt;
Today I am going to talk about &lt;strong&gt;How you can start to code&lt;/strong&gt; and this will be fun. So, make sure to read the whole article.&lt;/p&gt;

&lt;p&gt;What is coding? - In simple words, it is about problem-solving&lt;/p&gt;

&lt;p&gt;I have listed some important points, which may help you. So let's begin the journey 🔥&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-want-to-start"&gt;
  &lt;/a&gt;
  I want to start
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-2GmxJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygccp2hafscpfegg9qm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-2GmxJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygccp2hafscpfegg9qm4.png" alt="Start" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start, the first thing that you have to think is you have to start, then and only you will be able to code easily without frustration.&lt;/p&gt;

&lt;p&gt;Thinking positively helps you to love code which gets you new ideas for your news projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-the-best-teacher-for-yourself"&gt;
  &lt;/a&gt;
  You are the best teacher for yourself
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AazdD9lI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6ibg5295iqtd54b5ru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AazdD9lI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6ibg5295iqtd54b5ru.png" alt="Self Teacher" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Facing errors and issues and stuck. Don't worry you will teach yourself how to come out from the error. Search the internet, review your code multiple times and you will figure out where and why the error was coming.&lt;/p&gt;

&lt;p&gt;This is how you will be able to handle errors and bugs and your brain will be easily able to solve problems that arise in future&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;p&gt;Internet is amazing. Anything you want can be found on the internet.&lt;br&gt;
You can say the internet will be your best mentor. There are a bunch of stuff you can find on the internet to learn code.&lt;/p&gt;

&lt;p&gt;Check out some important sites to learn code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/"&gt;Scrimba.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sololearn.com/"&gt;Sololearn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will learn to code from these sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-simple-projects"&gt;
  &lt;/a&gt;
  Build simple projects
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjM9qSfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27n0lkt22jb1pycjknjk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjM9qSfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27n0lkt22jb1pycjknjk.png" alt="Build simple projects" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have learnt the basic things, &lt;strong&gt;congrats 🎉&lt;/strong&gt;!&lt;br&gt;
The best way to learn deep is to start building simple projects, this boosts up your confidence as well as experience.&lt;/p&gt;

&lt;p&gt;This motivates you to learn new things. To build new simple projects after learning a new topic and your base will get stronger doing this repetitive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-communities"&gt;
  &lt;/a&gt;
  Join Communities
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCHerfWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh6inwmyip0dbr69xr70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCHerfWt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hh6inwmyip0dbr69xr70.png" alt="Community" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Joining communities is the best way to discuss your code journey and helps you to get updated about the latest things running in the market.&lt;/p&gt;

&lt;p&gt;There are a bunch of coding communities you can find on the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-revising"&gt;
  &lt;/a&gt;
  Keep revising
&lt;/h3&gt;

&lt;p&gt;Keep revising the older topics that you had practised before. This helps you to keep memorizing older topics and you will never forget about them.&lt;/p&gt;

&lt;p&gt;I have covered all major topics which might help you as a beginner. I hope you have learnt something new from this article.&lt;/p&gt;

&lt;p&gt;Consider liking this post 💖 keeps me motivated to write new amazing posts.&lt;/p&gt;

&lt;p&gt;Thank you! for reading this article 🙂 &lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://github.com/snowbit-coderboi"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>CSS Selector’s priority</title>
      <author>Lucas jin</author>
      <pubDate>Tue, 02 Nov 2021 08:26:24 +0000</pubDate>
      <link>https://dev.to/dcsl-guidesmiths/css-selectors-priority-1cjh</link>
      <guid>https://dev.to/dcsl-guidesmiths/css-selectors-priority-1cjh</guid>
      <description>&lt;p&gt;Almost all the CSS style conflicts and style overrides have to do with the css selector's priority. In this article I will talk about how the css selector's priority works.&lt;/p&gt;

&lt;p&gt;CSS selectors have a strict hierarchy. I have divided them into 6 levels (from 0 to 5).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 0 :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors"&gt;Universal selector&lt;/a&gt; &lt;code&gt;*&lt;/code&gt;

 &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#combinators"&gt;CSS combinators&lt;/a&gt;, such as adjacent sibling selector &lt;code&gt;+&lt;/code&gt;, child selector &lt;code&gt;&amp;gt;&lt;/code&gt;, general sibling selector &lt;code&gt;~&lt;/code&gt;, descendant selector &lt;code&gt;space&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;Logic pseudo-class&lt;/a&gt;, such as &lt;code&gt;:not()&lt;/code&gt;, &lt;code&gt;:is()&lt;/code&gt;, &lt;code&gt;:where()&lt;/code&gt; , these logic pseudo classes won't affect the priority, what will affect the priority is the selectors that pass to the pseudo-class function. Pay attention that here I only list the logic pseudo class, not including the other non-logic pseudo class, such as &lt;code&gt;:hover&lt;/code&gt;, &lt;code&gt;:first-child&lt;/code&gt; etc.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;.text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:is&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nd"&gt;:where&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Level 1:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"&gt;Type selector&lt;/a&gt;, such as &lt;code&gt;p&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; &lt;code&gt;header&lt;/code&gt; &lt;code&gt;span&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Level 2:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors"&gt;Class selector&lt;/a&gt; &lt;code&gt;.className&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;attribute selector&lt;/a&gt; &lt;code&gt;[attribute]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;pseudo class&lt;/a&gt; such as &lt;code&gt;:hover&lt;/code&gt; &lt;code&gt;:link&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;pseudo-element&lt;/a&gt; such as &lt;code&gt;:first-child:&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors"&gt;ID selector&lt;/a&gt; &lt;code&gt;#id&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Level 4&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline style in html tag:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style= &lt;/span&gt;&lt;span class="s"&gt;"color:#000"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;some text&lt;span class="nt"&gt;&amp;lt;p/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Level 5&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The key word &lt;code&gt;!important&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key word &lt;code&gt;!important&lt;/code&gt; has the highest priority, usually it’s used to override the javascript style, otherwise I don’t recommend using it, it will be difficult to maintain the code if we abuse the !important key word.&lt;/p&gt;

&lt;p&gt;We can see that from 0 to 3 level is all about css selectors’ priority, it’s also the most important part. If we can fully understand it , it will be much easier for us to override the style using css selector.&lt;/p&gt;

&lt;p&gt;Although now we know all the css selectors’ priority, it’s still very abstract for us to compare them when there are multiple selectors together. You may ask, how can we compare &lt;code&gt;div .foo[bar] { color:#fff }&lt;/code&gt; with &lt;code&gt;body &amp;gt; div p.foo { color: #000 }&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;Don’t worry, I’ll also  explain how to calculate the css selectors’ priority with actual values. Let’s say if you encounter one &lt;strong&gt;level 0&lt;/strong&gt; priority selector, then you add &lt;strong&gt;0&lt;/strong&gt; value to the total priority , if you encounter one &lt;strong&gt;level 1&lt;/strong&gt; priority selector, then you add &lt;strong&gt;1&lt;/strong&gt; value to the total priority, if you encounter one &lt;strong&gt;level 2&lt;/strong&gt; priority selector, then you add &lt;strong&gt;10&lt;/strong&gt; value to the total priority, and finally if you encounter one &lt;strong&gt;level 3&lt;/strong&gt; priority selector, you add &lt;strong&gt;100&lt;/strong&gt; value to the total priority. In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Level 0: &lt;strong&gt;+0&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Level 1: &lt;strong&gt;+1&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Level 2: &lt;strong&gt;+10&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Level 3: &lt;strong&gt;+100&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see some examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;* &amp;gt; div {}&lt;/code&gt; : 1 general selector (&lt;strong&gt;level 0&lt;/strong&gt;), 1 css combinator (&lt;strong&gt;level 0&lt;/strong&gt;), 1 type selector (&lt;strong&gt;level 1&lt;/strong&gt;), so the total value is &lt;strong&gt;0 + 0 + 1 = 1&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;div &amp;gt; p .text:not(.content)&lt;/code&gt;: 2 type selector (&lt;strong&gt;level 1&lt;/strong&gt;), 1 &lt;em&gt;css combinator&lt;/em&gt; (&lt;strong&gt;level 0&lt;/strong&gt;), 2 &lt;em&gt;class selector&lt;/em&gt; (&lt;strong&gt;level 2&lt;/strong&gt;), 1 logic pseudo-class (&lt;strong&gt;level 0&lt;/strong&gt;), so the total value is &lt;strong&gt;2 * 1 + 0 + 2 * 10 + 0 = 22&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;p[content="story"]&lt;/code&gt;: 1 type selector (&lt;strong&gt;level 1&lt;/strong&gt;), 1 attribute selector (&lt;strong&gt;level 2&lt;/strong&gt;), so the total value is &lt;strong&gt;1+ 10 = 11&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;#list &amp;gt; ol&lt;/code&gt;: 1 id selector (&lt;strong&gt;level 3&lt;/strong&gt;), 1 css combinator (&lt;strong&gt;level 0&lt;/strong&gt;), 1 type selector (&lt;strong&gt;level 1&lt;/strong&gt;), so the total value is &lt;strong&gt;100 + 0 + 1 = 101&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s how you calculate the priority value in css. Now you may ask what if I add 11 type selector, then the value is 11, so can it override one class selector, which has a value 10 ? The truth is the value here is only symbolic, I use 1, 10 ,100 here because no one will really use 10 selectors in the code, and the real fact is that the lower priority level selector can’t ever override the higher priority level. So even if you have 100 type selectors, you can’t override even one class selector.&lt;/p&gt;

&lt;p&gt;If you happen to write 2 sets of selectors to target one element, and they have the same priority value, then the subsequent selectors will override the previous one. That’s how css is rendered in the web.&lt;/p&gt;

&lt;p&gt;And that’s all you have to know about the css selectors’ priority.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Opensource Newbie</title>
      <author>Lo-rraine</author>
      <pubDate>Tue, 02 Nov 2021 08:23:21 +0000</pubDate>
      <link>https://dev.to/lorraine/opensource-newbie-16g2</link>
      <guid>https://dev.to/lorraine/opensource-newbie-16g2</guid>
      <description>&lt;p&gt;I often ask myself when will I ever stop referring to myself as a code newbie when I have been in the world of coding for the past 4 years. There are so many aspects to explore in this coding universe of ours that I find myself constantly being a newbie at something. I have decided to embark on a personal journey with open source and it feels completely new - I know nothing - Even after watching 10 tutorials. 4 months into my job as a low-code front end developer and I still feel like a newbie. &lt;/p&gt;

&lt;p&gt;As I embark on this open source journey I hope you will enjoy the ride with me, and hopefully by the end of this year I will be blogging about how I successfully contributed to open source and put my name out there.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Join Olamilekan Arimoro and Aviyel in Getting Started with Typesense Dashboard</title>
      <author>Charu Veluthoor</author>
      <pubDate>Tue, 02 Nov 2021 08:22:40 +0000</pubDate>
      <link>https://dev.to/aviyel/join-olamilekan-arimoro-and-aviyel-in-getting-started-with-typesense-dashboard-2ffj</link>
      <guid>https://dev.to/aviyel/join-olamilekan-arimoro-and-aviyel-in-getting-started-with-typesense-dashboard-2ffj</guid>
      <description>&lt;p&gt;If you have been an open source developer, chances are you would have heard about Typesense, an emerging open source search engine and a tough alternative to ElasticSearch.&lt;/p&gt;

&lt;p&gt;With federated search features, Typesense has been successful in carving a niche for itself in the enterprise ecosystem. If you haven’t yet started using Typesense, then it’s your time!&lt;/p&gt;

&lt;p&gt;To help you get started with Typesense, Olamilekan Arimoro and Aviyel bring to you a live event on Getting Started with Typesense Dashboard. An electronics engineer by degree and technical developer by profession, Arimoro has extensively worked with CSS, Javascript, and Typesense creator communities. You can read his work here.&lt;/p&gt;

&lt;p&gt;Join us to get a hands-on experience with Typesense, open source, and conclude your evening with an exclusive QnA with the expert speaker.&lt;/p&gt;

&lt;p&gt;Mark your Calendar: 📆 November 3rd, 2021&lt;/p&gt;

&lt;p&gt;Time: 09:00 AM PST | 12:00 PM EST&lt;br&gt;
Where: To join, tap here 👇🏻&lt;br&gt;
&lt;a href="https://bit.ly/2Y7RJCl"&gt;https://bit.ly/2Y7RJCl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our events!&lt;/p&gt;

&lt;p&gt;Let’s build open source together!&lt;/p&gt;

&lt;p&gt;Team Aviyel&lt;/p&gt;

</description>
    </item>
    <item>
      <title>CHIT-CHAT with Alumni Season II: Episode 3-Progressive Advancement in Data and Analytics</title>
      <author>Anisha2001</author>
      <pubDate>Tue, 02 Nov 2021 08:15:11 +0000</pubDate>
      <link>https://dev.to/spectrumcetb/chit-chat-with-alumni-season-ii-episode-3-progressive-advancement-in-data-and-analytics-51co</link>
      <guid>https://dev.to/spectrumcetb/chit-chat-with-alumni-season-ii-episode-3-progressive-advancement-in-data-and-analytics-51co</guid>
      <description>&lt;p&gt;The &lt;strong&gt;SPECTRUM&lt;/strong&gt; club is one of the core technical societies of the College of Engineering and Technology, Bhubaneshwar founded in 2015 by &lt;strong&gt;Mr.Bikram Keshari Panda&lt;/strong&gt;(2015 graduate), scrutinizing on the sole motive of Instrumentation and Electronics Engineering branch having a club of its own.&lt;/p&gt;

&lt;p&gt;Apart from being involved in a plethora of competitions and technical events, the club decided to start its very own "&lt;strong&gt;Alumni Talk Series&lt;/strong&gt;" called "&lt;strong&gt;Chit-Chat with Alumni&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;The first season of the series served as a torch bearer for the students to connect with their seniors contributing in both their personal and professional development. And we have continued to strengthen the bond even further with the &lt;strong&gt;Second Series&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The third episode of Season 2 was hosted on the 24th of October, 2021 and the speaker for the evening was &lt;strong&gt;Mr. Siddhant Maharana&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mr. Siddhant Maharana pursued his Bachelors in Technology in Instrumentation and Electronics Engineering from the year 2009 to 2013 in CET. He is currently working as Data Scientist at Cardlytics with 7 years of professional experience in data analytics, statistical modelling, machine learning and A/B testing. He has formerly worked as a Product Analyst at TATA 1mg and Assistant Systems Engineer in TATA Consultancy Services. He specializes in Data Mining, Machine Learning &amp;amp; Deep Learning.&lt;/p&gt;

&lt;p&gt;He started off with talking about his memories in college. After college, he wanted to explore other options before joining a stable company and so was more interested to work in start-ups. He then switched to working as Assistant Systems Engineer and then Product Analyst gaining experience before pursuing his Masters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKLqyHz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3czlbifxi1c8rjv0x53t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKLqyHz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3czlbifxi1c8rjv0x53t.jpg" alt="Image1" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;His work kind of introduced him to the essence of data and analytics out in the world which further encouraged him in diving deeper into it. He stated that “&lt;strong&gt;One has to really understand the business and the economics of the business to really comprehend of whether it’s the right direction.&lt;/strong&gt;” Being involved in marketing analytics and discovering the challenges faced, he decided on understanding and learning more of the data and mathematics to improve his skill-set. This led him to shift to USA to pursue Masters in Data Analytics. After 2 years of rigorous studies, he is started working as a Data Scientist. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jrdV7KCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pmvch7none13hefufr2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrdV7KCS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pmvch7none13hefufr2.jpg" alt="Image2" width="880" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing, he further touched upon the topic of what actually is expected of Data Scientist in the current industry. He explained it as solving business problems in various sectors whether in marketing or finance or production saying that they are all interconnected. The data scientists understand and frame the problems and proceed to find a solution and remove assumption and biases. The need to have a proper hypothesis to backup your data and to understand your end-users serves as key to a data scientist. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jd1-objf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltof9wza2nojx5kol8h3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jd1-objf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltof9wza2nojx5kol8h3.jpg" alt="Venn diagram" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It be bucketed to 3 different aspects. The &lt;strong&gt;hacking skills&lt;/strong&gt;- to write a good logic to decipher the data which require programming skills. Secondly, &lt;strong&gt;the mathematical skills&lt;/strong&gt; where all the assumptions being removed makes the solution more robust and helps in figuring the solution. Thirdly, &lt;strong&gt;substantive experience&lt;/strong&gt; which elaborates about how to package the solution that it aligns with the business. The solution ought to have some relevancy and measurability which is very important. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eShc6y4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm6acb9qkxe36gqzo6eh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eShc6y4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm6acb9qkxe36gqzo6eh.jpg" alt="skillset" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He proceeded further with providing a list of different learning materials and skill sets for students to begin their journey to success in Data Science. &lt;/p&gt;

&lt;p&gt;He concluded with reminding students to use their life skills to come up whenever they bump into problems and challenges. He encouraged us to “&lt;strong&gt;Be realistic, always take risks and push ourselves further&lt;/strong&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXUL-pO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrtj3d25cmfton7wz5hu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXUL-pO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrtj3d25cmfton7wz5hu.jpg" alt="simple" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The conference was followed by an interactive Q n A with students asking questions ranging from his decision to pursue Masters to his current experience as a data scientist to which he cleared all the queries with ease. &lt;/p&gt;

&lt;p&gt;One of the attendees named Abraar Ahmad Khan asked about&lt;br&gt;
&lt;strong&gt;How the work in industry for data science is different from the ones we do in college level&lt;/strong&gt; to which he replied :&lt;br&gt;
The knowledge provided in college are theoretical tools and techniques to understand and manipulate the data but in industry, we are exposed to real life business problems where that knowledge is used.&lt;/p&gt;

&lt;p&gt;It soon changed into a chit-chat session with him conversing with the students about the college life and their future goals, on the whole, resulting in a good conversation.  &lt;/p&gt;

&lt;p&gt;It was an honor to have interacted with him. We wish him all the best for all his future endeavors!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Type systems and type inference</title>
      <author>Islam Vindizhev</author>
      <pubDate>Tue, 02 Nov 2021 08:14:56 +0000</pubDate>
      <link>https://dev.to/csssr/type-systems-and-type-inference-42f8</link>
      <guid>https://dev.to/csssr/type-systems-and-type-inference-42f8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;With the stable growth of web projects, developers found out that they need some tools that will lead to easier maintaining and writing new code. Different ways can help you to verify and validate code (tests, contracts, typing, etc.), but now we are going to talk about type systems in different static typing languages useful in web development. In this article, we will focus on comparison by a couple of parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are not going to look for winners or losers, because decisions taken on type systems in languages we are going to talk about didn't come from scratch. If we were going to rate any of these languages objectively, we would need to take into mind the whole ecosystem of language, history, advantages, and limitations that appeared in languages because their design.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parameters which we are going to compare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How easily/elegantly different conceptions can be expressed with the type system of chosen language (elegancy is the subjective case, so we can handle it this way - if something needs more movements it means that this case is less elegant in this language).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support of different features of static typing (for example Pattern matching, type algebra, type inference, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If there are any places in the language where the type system doesn't give us any guarantees (soundness/unsoundness). Soundness is an analyzer's ability to prove the absence of errors. If a program is accepted by an analyzer, then the program is guaranteed to be safe. Important note - type systems can not prove the correctness of programs generally (some of them are powerful enough to use automatic theorem proving and in a certain range can prove correctness). I'd appreciate the reader to be distrustful (not paranoic, but that depends on the kind of software you are working on) when someone pledge that &lt;code&gt;type system of language X is sound&lt;/code&gt;. Even if it is implementing a type system in which soundness is proven, there is always some space for missimplementations, bugs in type checker/compiler, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#type-system-and-type-inference"&gt;
  &lt;/a&gt;
  Type system and type inference
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Type inference is the ability of a language compiler to infer expression type with help of some rules.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's look at it from a historical perspective. We can begin with &lt;code&gt;lambda calculus&lt;/code&gt;&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; which is a formal system for expressing computations based on functions and it's equivalent to a Turing machine. It consists of a single transformation rule (variable substitution - β-conversion) and a single function definition scheme. The central concept of lambda calculus are expressions that can be defined recursively as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt; expression &amp;gt; := &amp;lt; name &amp;gt;|&amp;lt; function &amp;gt;|&amp;lt; application &amp;gt;
&amp;lt; function &amp;gt; := λ &amp;lt; name &amp;gt; . &amp;lt; expression &amp;gt;
&amp;lt; application &amp;gt; := &amp;lt; expression &amp;gt;&amp;lt; expression &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This really means that there is only operators (keywords) in it are - &lt;code&gt;λ&lt;/code&gt; and the dot&lt;/p&gt;

&lt;p&gt;As a deep dive into &lt;code&gt;lambda calculus&lt;/code&gt; is not part of this article, there is a lot of information about it you can find. The next step will be &lt;code&gt;simply typed lambda calculus&lt;/code&gt;&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt; which is the simplest typed interpretation of lambda calculus. In simply typed lambda calculus, we explicitly state what type of argument is. There is no space for polymorphism in simply typed lambda calculus, so more complex type systems that allow it appeared later. Two commonly known systems formalize the notion of parametric polymorphism - &lt;code&gt;System F&lt;/code&gt; and &lt;code&gt;Hindley-Milner type system&lt;/code&gt;. The most valuable difference between them in the context of this article is type inference, which is generally undecidable in System F and decidable in the Hindley-Milner type system. This difference comes from the next fact: in System F polymorphism is explicit, can occur anywhere&lt;sup id="fnref3"&gt;&lt;a href="#fn3"&gt;3&lt;/a&gt;&lt;/sup&gt;, and impredicative, but in HM type system it is implicit, can occur only on top level&lt;sup id="fnref4"&gt;&lt;a href="#fn4"&gt;4&lt;/a&gt;&lt;/sup&gt; and predicative. So you can consider the Hindley-Milner system as a kind of restriction for System F, which would allow you more flexibility with types, but also requires more type annotations.&lt;/p&gt;

&lt;p&gt;The actual difference between System F and Hindley-Milner is that polymorphism of higher ranks and impredicative instantiation makes polymorphism first-class in System F and only rank one polymorphism and predicative instantiation allows very restricted (but inferable) form in the Hindley-Milner system.&lt;/p&gt;

&lt;p&gt;If we look at parametrically polymorphic type like at function - it takes some type and returns another one. Which property functions in some languages should have to allow us to make higher-order functions? They should be first-class citizens - we need the ability to save them into variables, to pass them into another function, to return from functions, in general, we need the ability to manipulate them as other, 'data', values. The same goes for polymorphic types - when we need some forms of abstraction, we may need higher-rank types, something like the polymorphic type that takes another mono or polymorphic type and returns another polymorphic type. This feature is disabled in the Hindley-Milner types system.&lt;/p&gt;

&lt;p&gt;Let's look at some examples to get a closer touch with it (they includes parametric polymorphism, which we'll discuss in later parts of this article):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that TypeScript example, we'll get an error saying that we can't use generic (== polymorphic) type as is, and we have to pass type argument into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function from the previous example must include its polymorphic definition, as we can't use &lt;code&gt;Id&lt;/code&gt; in its type - we'll have to 'reduce' it to monotype first, so something like &lt;code&gt;const id: Id = val =&amp;gt; val&lt;/code&gt; is invalid, even there is no space to reintroduce type parameter to pass it further into &lt;code&gt;Id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Things like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyId&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;won't work too, you'll get &lt;a href="https://www.typescriptlang.org/play?jsx=0&amp;amp;ssl=5&amp;amp;ssc=2&amp;amp;pln=3&amp;amp;pc=1#code/C4TwDgpgBAkgJgHgIID4oF4oAoBuBDAGwC4okBKDNJAKGoDMBXAOwGNgBLAeyajzDAIh4CACoos7OCVyESIiujTyoAb2pQoAJwjAGmngG1JWAIwAGMgBooxgEQAJCAQKdbZALrUAvkA"&gt;error&lt;/a&gt; as you can instantiate &lt;code&gt;applyId&lt;/code&gt; with type other than &lt;code&gt;number&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;, at the same time it's signature compatible with &lt;code&gt;id&lt;/code&gt; function. For real, there is one cheat in TypeScript to pass function type as a generic one (usage of &lt;code&gt;typeof&lt;/code&gt;), but we'll take a look at it in later parts of this article.&lt;/p&gt;

&lt;p&gt;Same for ReasonML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;applyId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we'll get an error saying that incorrect type inferred for the second call of id (wanted int, but get string).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;applyId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could imagine syntax like that but it's not allowed to introduce new type variables in &lt;code&gt;let-bindings&lt;/code&gt; and we only can help the type system to deduce the desired type by annotating with concrete type like &lt;code&gt;let applyId = (id: string =&amp;gt; string) =&amp;gt; [id(13), id("Hello")]&lt;/code&gt;. Even if we separate applyId type definition and its realization, we would not be able to properly type it without providing argument type to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;applyId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;applyId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would tell you that &lt;code&gt;The type constructor applyId expects 1 argument(s)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Same goes for PureScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;identity id = id

useIdentity id = (id 10) (id "Hello")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd also mention that even&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;values = (id 10) (id "Hello")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does not allowed in ReasonML and PureScript, by TypeScript is ok with that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;// you can also&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;values2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with the second example, which shows us that explicit annotations for parametric polymorphism are possible in TypeScript.&lt;/p&gt;

&lt;p&gt;This example will also produce an error. Higher rank types are not allowed with implicit syntax.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Hindley-Milner&lt;/code&gt; (with extensions) type system is a basis for both PureScript and ReasonML type systems, so they can use its inference algorithm (also with extensions if needed), called &lt;code&gt;Damas-Milner algorithm W&lt;/code&gt;. A simple description of the algorithm is: it puts a limitation on a type being inferred until it has available information. The most common type will be inferred. This feature inherent in the languages of the ML family. For cases that are complicated enough algorithm won't be able to infer accurate type if we didn't explicitly put type on parts of an inspected expression.&lt;/p&gt;

&lt;p&gt;To achieve automatic type inference Hindley-Milner type system restricts polymorphism where function arguments and elements of structures can only be monomorphic.&lt;/p&gt;

&lt;p&gt;A hard description is long enough to take its article and involves the reader to at least have some knowledge of symbolic logic. You can check it for example &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.18.9348&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see simple inference example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iAmANumber =
  let square x = x * x
  in square 42.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can think about expressions like these as the simplest case of type inference&lt;/p&gt;

&lt;p&gt;Let's look at the simple example of inference in TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;infered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Infers literal type 'Hello world' for variable 'infered'.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;infered2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Infers 'infered2' type based of return type of someMethod.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Examples of so simple cases may look strange, but some time ago in old versions of popular languages we didn't have such abilities and it led to redundant verbosity, especially in the case of generics (in actual versions we can tell the compiler that it should infer the variable type based on the right part of an expression).&lt;/p&gt;

&lt;p&gt;Also inference for ReasonML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Hello"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"World"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PureScript is not strictly based on some theoretical type system, instead, it is inspired by some researches as its author mention&lt;sup id="fnref5"&gt;&lt;a href="#fn5"&gt;5&lt;/a&gt;&lt;/sup&gt;. As result, there is no proof of its soundness, and its type system is a mix of ideas from some researches. As one of them is &lt;code&gt;HMF&lt;/code&gt;&lt;sup id="fnref6"&gt;&lt;a href="#fn6"&gt;6&lt;/a&gt;&lt;/sup&gt; (here and throughout the article we'll use HMF as is because there is no expanded name in research) which is an extension of Hindley-Milner type inference with first-class polymorphism (so it allows explicit polymorphism, effectively taking features of System F). HMF uses &lt;code&gt;Damas-Milner algorithm W&lt;/code&gt; with small extensions.&lt;/p&gt;

&lt;p&gt;Valuable properties of HMF:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HMF is a conservative extension: every program that is well-typed in Hindley-Milner, is also a well-typed HMF program, and type annotations are never required for such programs&lt;/li&gt;
&lt;li&gt;In practice, few type annotations are needed for programs that go beyond Hindley-Milner. Only polymorphic parameters and ambiguous impredicative instantiations must be annotated.
Both cases can be specified and are relatively easy to apply in practice&lt;/li&gt;
&lt;li&gt;The type inference algorithm is very close to algorithm W. It does not require unfamiliar operations, which makes it relatively easy to understand and implement&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HMF extends Hindley-Milner with regular System F types where polymorphic values are first-class citizens. To support first-class polymorphism, two ingredients are needed: higher-rank types and impredicative instantiation.&lt;/p&gt;

&lt;p&gt;With higher-rank types, we've already got acquainted while talking about the difference between System F and Hindley-Milner system. To generalize: without support for higher-rank types only definitions can be polymorphic while parameters or elements of structures cannot (this is what you could see with &lt;code&gt;id&lt;/code&gt; function examples before)&lt;/p&gt;

&lt;p&gt;We can consider higher-rank types as 'where polymorphism can occur' when impredicative instantiation is about 'how it can occur'. It allows you to instantiate type variables with not only monomorphic types but with polymorphic types and even self-references.&lt;/p&gt;

&lt;p&gt;It's not a very complicated expression, but for TypeScript, in this case, it would be impossible to infer types of &lt;code&gt;iAmANumber&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;TypeScript is using the &lt;a href="https://en.wikipedia.org/wiki/Structural_type_system"&gt;structural type system&lt;/a&gt; and has its own set of rules to infer types. In structural type systems, equivalence and compatibility of types are defined by structure, compared to nominative systems, where those properties are defined by types names. Supertype/subtype relations in such systems are defined by structure too so in TypeScript some type &lt;code&gt;A&lt;/code&gt; is considered as a supertype of &lt;code&gt;B&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; has at least all fields defined in &lt;code&gt;A&lt;/code&gt; with the same types. There are some design decisions in TypeScript based on its structural nature. For example, if you define &lt;code&gt;id&lt;/code&gt; function like in ReasonML or PureScript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its type won't be inferred to a type with variable, instead, it infers &lt;code&gt;any&lt;/code&gt; for parameter &lt;code&gt;val&lt;/code&gt;. TypeScript parametric polymorphism starts to work only when it is explicitly stated somewhere, so in the example above parameter &lt;code&gt;val&lt;/code&gt; got &lt;code&gt;any&lt;/code&gt; type and all type information will be lost after you apply such &lt;code&gt;id&lt;/code&gt; function to any value, as return type will be &lt;code&gt;any&lt;/code&gt; too (inferred by the fact that you return &lt;code&gt;val&lt;/code&gt; and it has type &lt;code&gt;any&lt;/code&gt;). It is a superpowered type in TypeScript - it is assignable to any other type and vise versa. You can access any fields of &lt;code&gt;any&lt;/code&gt; and type checking will always pass. When you are using &lt;code&gt;any&lt;/code&gt; statically typed world is left behind and to get back to it you can apply type assertion (operator &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions"&gt;as&lt;/a&gt;) to get some new type. TypeScript won't check that you are doing fine with that, so it is good practice to check that value typed as &lt;code&gt;any&lt;/code&gt; can be properly used as the value of target type. There is a mechanism called &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;type narrowing&lt;/a&gt; to help you with that. There is a close, but safer one in TypeScript - &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type"&gt;unknown&lt;/a&gt;. So if &lt;code&gt;any&lt;/code&gt; is about 'everything available here', &lt;code&gt;unknown&lt;/code&gt; is about 'everything available here, but you can do nothing with that' because &lt;code&gt;unknown&lt;/code&gt; is too general.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatToDoWithUnknown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// You can do nothing with unknown here. Only type narrowing can help you to make something useful&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatToDoWithAny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// No rules zone&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field5&lt;/span&gt;
    &lt;span class="c1"&gt;// etc.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nx"&gt;whatToDoWithAny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;whatToDoWithUnknown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of type narrowing with type predicates&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// a has 'number' type in this context&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as with &lt;code&gt;any&lt;/code&gt;, you can pass anything where &lt;code&gt;unknown&lt;/code&gt; type is expected, but after there is nothing to do with that value, it can be converted to 'useful' type only by narrowing or assertion.&lt;br&gt;
In presence of subtyping, &lt;code&gt;unknown&lt;/code&gt; is the supertype for everything (as everything can be passed where &lt;code&gt;unknown&lt;/code&gt; is expected and &lt;code&gt;unknown&lt;/code&gt; itself can't be used anywhere), when with &lt;code&gt;any&lt;/code&gt; that rule works vise versa so &lt;code&gt;unknown&lt;/code&gt; is more type-safe feature.&lt;/p&gt;

&lt;p&gt;There is also opposite to &lt;code&gt;unknown&lt;/code&gt; - &lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#never"&gt;never&lt;/a&gt;. Never is a subtype for everything so no values of other types can be passed where &lt;code&gt;never&lt;/code&gt; expected, so practically you can't directly create values of &lt;code&gt;never&lt;/code&gt; type. There are no such special types in PureScript and ReasonML, so TypeScript feels to have some more presence of set theory on its types, including the set that contains all possible values and empty set into its type system (and some operations with them will work exactly like on sets in set theory, we'll look at them in the next chapter).&lt;br&gt;
This is intuitive for structural type systems to be more related to set theory than nominative ones (where PureScript and ReasonML both mostly nominative). For example, in set theory, some set &lt;code&gt;A&lt;/code&gt; will be a subset of some set &lt;code&gt;B&lt;/code&gt; if all values from &lt;code&gt;A&lt;/code&gt; also included in &lt;code&gt;B&lt;/code&gt;, with no respect to names of that sets or ways of creation for these set - only fact of containing same values generates subset-superset relations (or equivalency). And that is exactly close to what we said about structural type systems - subtype/supertype relations based only on structure, not names. If we consider structure as a set of possible values of that type, that relation to set theory becomes more clear.&lt;/p&gt;

&lt;p&gt;In the next examples, we can see that there are cases where TypeScript can't infer types in cases where ReasonML and PureScript can do it. On the other side type inference in TypeScript evolves and one of the fresher features - the ability to infer types of class fields based on types of constructor parameters&lt;sup id="fnref7"&gt;&lt;a href="#fn7"&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.TypeScriptlang.org/play?#code/GYVwdgxgLglg9mABMGAnAzlAFAQwFyJggC2ARgKaoA0ipBRZlAlIgN4BQiXiq5UIqJDkQBqWgG52AX3btQkWAkTpyEBABNcNUiw7cefAUhQZsObU0kz2KtWE0ByHA5oPSDpkA"&gt;Classic example of TypeScript type inference weakness&lt;/a&gt; compared to ReasonML/PureScript, where the correct type of function will be inferred based on its parameters used in the body&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight reasonml"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;someF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;someF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add a b = a + b

someF a b = add a b

x = someF 1 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, it would be amiss not to mention TypeScript's &lt;a href="https://www.TypeScriptlang.org/docs/handbook/literal-types.html"&gt;literal types&lt;/a&gt;. This feature does not exist in the other languages we are talking about. When you are using a union of literal types, it becomes pretty close to using enums/variants. You can use &lt;code&gt;switch&lt;/code&gt; like a very poor version of pattern matching to properly work with concrete values and it also opens you opportunities to interop with something typed as &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt;, but if you know that there is a pool of concrete values that should go in, you can type check it at a higher level and still pass your value into for example your literal type &lt;code&gt;type a = 'A'&lt;/code&gt; is a subtype of string.&lt;/p&gt;

&lt;p&gt;Also, returning to one of the previous examples with &lt;code&gt;id&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can apply &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions"&gt;as const&lt;/a&gt; assertion and much different type will be inferred for us. Without it we had &lt;code&gt;(string | number)[]&lt;/code&gt; and with it, we get &lt;code&gt;[10, 'Hello']&lt;/code&gt; tuple, and literals didn't get widened to their supertypes (number and string). So this is another example where literal types can do their job.&lt;/p&gt;

&lt;p&gt;ReqasonML uses an extension of Standart ML (which in its turn uses Hindley-Milner system) - &lt;code&gt;MLF&lt;/code&gt;&lt;sup id="fnref8"&gt;&lt;a href="#fn8"&gt;8&lt;/a&gt;&lt;/sup&gt; as a basis.&lt;/p&gt;

&lt;p&gt;Here are how ReasonML type inference differs from ML in general:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ML adds another condition (into Hindley-Milner system) for generalization (one of the typing rules in Hindley-Milner), so-called value restriction: the type of some variable is generalized only if it has no visible side-effect. ReasonML relaxes the value restriction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It avoids scan of the type environment by implementing a level-based generalization algorithm (which is inspired by region-based memory management)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, MLF is strictly more powerful than HMF and every well-typed program in HMF also well-typed in MLF.&lt;/p&gt;

&lt;p&gt;The drawback of MLF is that it goes beyond regular System F types which makes MLF considerably&lt;br&gt;
more complicated. This is the case for programmers that have to understand these types and meta-theory of MLF, the implementation of type inference algorithm, and the translation to System F (which is important for qualified types). So if compared to HMF, implementation in some languages should be less complex (in theory) and&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;HMF&lt;/code&gt; ideas are close to MLF's one - add support for first-class polymorphism. And they both have the same pitfall - a programmer is required to make type annotations for cases of such polymorphism (thus still leaving the program fully inferable when first-class polymorphism didn't used) because type inference still undecidable for it. Both are not silver bullets, they are just tools that could be helpful if you need that higher level of abstraction if you are ready for tradeoffs.&lt;/p&gt;

&lt;p&gt;There is no much sense (and it's very hard or impossible) to show examples for all cases of type inference, but it's important to understand that this instrument allows (with help of a type-checker) us to write more expressive and less verbose code but to stay within the framework of static typing.&lt;/p&gt;

&lt;p&gt;In conclusion, I can say that in TypeScript there are much more limitations on which things will be inferred for you, as being structurally typed and allowing explicit forms of polymorphism by design that leaves much more freedom on what different expressions can mean in terms of typing. ReasonML and PureScript have very close inferring capabilities, both have some features that ruin the ability to infer without additional annotations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#soundness"&gt;
  &lt;/a&gt;
  Soundness
&lt;/h3&gt;

&lt;p&gt;TypeScript allows some unsound behavior on purpose. You can check it out at &lt;a href="https://www.TypeScriptlang.org/docs/handbook/type-compatibility.html"&gt;TypeScript notes about it&lt;/a&gt;. Also, if you want to take a look at roots of type inference in TypeScript can check &lt;a href="https://github.com/microsoft/TypeScript/tree/master/doc"&gt;TypeScript spec&lt;/a&gt;, but beware, it's outdated, &lt;a href="https://github.com/microsoft/TypeScript/issues/15711"&gt;archieved and not supported anymore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being based on MLF which is &lt;a href="http://cambium.inria.fr/~remy/work/mlf/icfp.pdf"&gt;sound&lt;/a&gt;, doesn't makes ReasonML fully sound in practice.&lt;br&gt;
Here are some examples of unsound behavior in OCaml &lt;a href="https://github.com/ocaml/ocaml/issues/6744"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/ocaml/ocaml/issues/7241"&gt;here&lt;/a&gt;. According to this fact, we can consider that ReasonML as being the dialect of OCaml may have unsound behavior too.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://okmij.org/ftp/ML/generalization.html"&gt;Here&lt;/a&gt; you can read more about it.&lt;/p&gt;

&lt;p&gt;Example of almost the same code as we used in TypeScript's one. You can see that ReasonML can &lt;a href="https://ReasonML.github.io/en/try?rrjsx=true&amp;amp;reason=DYUwLgBAZglgTgZ0gXggCgB4BoIE8CUEyAfBBhANR4DcAUKJAiAMYD2AdgCZHoCGOAI0Ilo8JGn4QhtJmy5oA5LwU4FAhfmpA"&gt;properly infer types&lt;/a&gt;. Also, there is &lt;a href="https://ReasonML.github.io/en/try?rrjsx=true&amp;amp;reason=C4TwDgpgBJBODOB7AdlAvFA3gKCleAlgF4QBcUBywANLlAIYDmZFVtAvgNzbaiRSJgACwiwACqKSoMOPMnoBbFvGCxKjDjwA2EYAy0EAxtBl1CJcgEYADLTxMWAFgBMHbgHoAVFABCIAcjQAGYEEFoAJqxBklDC9HoARogJ+EKIAK4RUAnQcFKx4ND0yJEEelr0hgDW8FAA5A51UCFhkZ7u2DqJyehYZsQsNm7aulAgiFqIvbJQ8krkAEQAjgDuEAvD2F5QAJLI0QgF-EGIsDD0sIr1YE0J-sX0WiBE6lArQkZCzaERtWsMsCKhmM8EIyEYrEI4WC6WQhmABBQ2UQ4X87U6o3g6QUYl6YHQAD4+ngwAA6czQADUMFJDmw7BGenovSxOIAFI8jBAAJQYxIs7FiNnjSbcoA"&gt;more complex case on ReasonML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didn't found issues that mention unsoundness in PureScript, but there are no proofs that it is fully sound.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="http://www.inf.fu-berlin.de/inst/ag-ki/rojas_home/documents/tutorials/lambda.pdf"&gt;http://www.inf.fu-berlin.de/inst/ag-ki/rojas_home/documents/tutorials/lambda.pdf&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://www.cs.bham.ac.uk/%7Eudr/popl/04-19-TLC.pdf"&gt;https://www.cs.bham.ac.uk/~udr/popl/04-19-TLC.pdf&lt;/a&gt; &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn3"&gt;
&lt;p&gt;&lt;a href="https://babel.ls.fi.upm.es/%7Epablo/Papers/Notes/f-fw.pdf"&gt;https://babel.ls.fi.upm.es/~pablo/Papers/Notes/f-fw.pdf&lt;/a&gt; &lt;a href="#fnref3"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn4"&gt;
&lt;p&gt;&lt;a href="https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/milner-type-polymorphism.pdf"&gt;https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/milner-type-polymorphism.pdf&lt;/a&gt; &lt;a href="#fnref4"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn5"&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/a/29440717"&gt;https://stackoverflow.com/a/29440717&lt;/a&gt; &lt;a href="#fnref5"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn6"&gt;
&lt;p&gt;&lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/hmf.pdf"&gt;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/hmf.pdf&lt;/a&gt; &lt;a href="#fnref6"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn7"&gt;
&lt;p&gt;&lt;a href="https://www.TypeScriptlang.org/docs/handbook/release-notes/TypeScript-4-0.html#class-property-inference-from-constructors"&gt;https://www.TypeScriptlang.org/docs/handbook/release-notes/TypeScript-4-0.html#class-property-inference-from-constructors&lt;/a&gt; &lt;a href="#fnref7"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn8"&gt;
&lt;p&gt;&lt;a href="http://www.cs.nott.ac.uk/%7Epszgmh/appsem-papers/lebotlan.pdf"&gt;http://www.cs.nott.ac.uk/~pszgmh/appsem-papers/lebotlan.pdf&lt;/a&gt; &lt;a href="#fnref8"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>typescript</category>
      <category>types</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
