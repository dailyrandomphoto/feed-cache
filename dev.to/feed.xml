<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Set Up Chakra UI with Next JS by creating a Hero component</title>
      <author>Remi W.</author>
      <pubDate>Wed, 01 Dec 2021 15:46:24 +0000</pubDate>
      <link>https://dev.to/ixartz/how-to-set-up-chakra-ui-with-next-js-by-creating-a-hero-component-3610</link>
      <guid>https://dev.to/ixartz/how-to-set-up-chakra-ui-with-next-js-by-creating-a-hero-component-3610</guid>
      <description>&lt;p&gt;Creating a user interface is never a simple task, but &lt;a href="https://chakra-ui.com/" rel="noopener noreferrer"&gt;Chakra UI&lt;/a&gt; is a great UI library to get your Next.js application up and running fast, all while maintaining aesthetics. In this guide, you'll learn how to set up a simple Next.js app with Chakra UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presequisites"&gt;
  &lt;/a&gt;
  Presequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;✅  Standard knowledge of Next.js setup and usage 🧰&lt;/li&gt;
&lt;li&gt;✅  Some experience with UI/UX Design 🧑‍🎨&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-a-nextjs-project"&gt;
  &lt;/a&gt;
  Create a NextJS Project
&lt;/h2&gt;

&lt;p&gt;You can create a blank Next.js project by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app my-project
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create next-app my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-next-js-project-using-typescript"&gt;
  &lt;/a&gt;
  Create a Next JS Project Using Typescript
&lt;/h2&gt;

&lt;p&gt;Alternatively, Next.js provides integrated TypeScript support. You can create a TypeScript project with &lt;code&gt;create-next-app&lt;/code&gt; using the &lt;code&gt;--ts&lt;/code&gt;, &lt;code&gt;--typescript&lt;/code&gt; flag as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app@latest &lt;span class="nt"&gt;--ts&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create next-app &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚨 &lt;strong&gt;Please note that when adding Chakra UI to a TypeScript project, a minimum TypeScript version of 4.1.0 is required.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once all installations are successful and complete, you're ready to start coding in TypeScript!&lt;/p&gt;

&lt;p&gt;🚨 &lt;strong&gt;A file named &lt;code&gt;next-env.d.ts&lt;/code&gt; will be created in the root of your project. This file ensures Next.js types are picked up by the TypeScript compiler. You cannot remove it or edit it as it can change at any time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn more about using Typescript in their &lt;a href="https://nextjs.org/docs/basic-features/typescript"&gt;Next JS Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-chakra-ui-to-your-nextjs-application"&gt;
  &lt;/a&gt;
  Adding Chakra UI to your Next.js Application
&lt;/h2&gt;

&lt;p&gt;To get started using Chakra UI, install the core Chakra UI package by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation, you'll need to add Chakra providers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-in-chakra-providers"&gt;
  &lt;/a&gt;
  Adding in Chakra Providers
&lt;/h2&gt;

&lt;p&gt;Chakra uses the &lt;code&gt;ChakraProvider&lt;/code&gt; component, which then wraps your website with a context containing properties such as the Chakra theme, color mode functionality, CSS reset, global styles, and more.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;./pages/_app.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using Typescript, use the &lt;code&gt;ChakraProvider&lt;/code&gt; component in &lt;code&gt;./pages/_app.tsx&lt;/code&gt; and replace by the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your &lt;code&gt;./pages/index.jsx&lt;/code&gt; or &lt;code&gt;./pages/index.tsx&lt;/code&gt;, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to Chakra + Next.js&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything was imported successfully, once the component rerenders you should be greeted with your newly written heading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G4cRW-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-chakra-ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G4cRW-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-chakra-ui.png" alt="Next JS Chakra UI components" width="825" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hero-component"&gt;
  &lt;/a&gt;
  Hero component
&lt;/h3&gt;

&lt;p&gt;Now that you're getting the hang of it, let's create a simple hero component! First, create a &lt;code&gt;./components/Hero.js&lt;/code&gt; or &lt;code&gt;./components/Hero.tsx&lt;/code&gt; file. And inside try out the following example code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColorModeValue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Blob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;maxW&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt;
        &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;py&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt; &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;
            &lt;span class="na"&gt;lineHeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
              &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;relative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;_after&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;20%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan.400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Example Application
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan.400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Next.js + Chakra UI
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;
          &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;relative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Blob&lt;/span&gt;
            &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;150%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;150%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;absolute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-20%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;zIndex&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useColorModeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan.50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cyan.400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;
            &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;relative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;boxShadow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2xl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
              &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hero Image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;align&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.pixabay.com/photo/2016/04/15/04/02/water-1330252_960_720.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may be wondering when the heck did we make a blob? Well, we're going to do it right now! Create a &lt;code&gt;./components/Blob.jsx&lt;/code&gt; (find the TypeScript below) file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IconProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Icon&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 578 440"&lt;/span&gt;
      &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
      &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
        &lt;span class="na"&gt;fillRule&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;
        &lt;span class="na"&gt;clipRule&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;
        &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M239.184 439.443c-55.13-5.419-110.241-21.365-151.074-58.767C42.307 338.722-7.478 282.729.938 221.217c8.433-61.644 78.896-91.048 126.871-130.712 34.337-28.388 70.198-51.348 112.004-66.78C282.34 8.024 325.382-3.369 370.518.904c54.019 5.115 112.774 10.886 150.881 49.482 39.916 40.427 49.421 100.753 53.385 157.402 4.13 59.015 11.255 128.44-30.444 170.44-41.383 41.683-111.6 19.106-169.213 30.663-46.68 9.364-88.56 35.21-135.943 30.551z"&lt;/span&gt;
        &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Icon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For TypeScript version, create a &lt;code&gt;./components/Blob.tsx&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Icon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Icon&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 578 440"&lt;/span&gt;
      &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
      &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
        &lt;span class="na"&gt;fillRule&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;
        &lt;span class="na"&gt;clipRule&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;
        &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"M239.184 439.443c-55.13-5.419-110.241-21.365-151.074-58.767C42.307 338.722-7.478 282.729.938 221.217c8.433-61.644 78.896-91.048 126.871-130.712 34.337-28.388 70.198-51.348 112.004-66.78C282.34 8.024 325.382-3.369 370.518.904c54.019 5.115 112.774 10.886 150.881 49.482 39.916 40.427 49.421 100.753 53.385 157.402 4.13 59.015 11.255 128.44-30.444 170.44-41.383 41.683-111.6 19.106-169.213 30.663-46.68 9.364-88.56 35.21-135.943 30.551z"&lt;/span&gt;
        &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Icon&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've created your hero and blob component, import &lt;code&gt;Hero.tsx&lt;/code&gt; into your &lt;code&gt;./pages/index.js&lt;/code&gt; or &lt;code&gt;./pages/index.tsx&lt;/code&gt; file like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Hero&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Hero&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once your application re-renders, your landing page should resemble the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4dCuQ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/chakra-ui-hero-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4dCuQ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/chakra-ui-hero-component.png" alt="Hero Chakra UI components" width="880" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!🎉 You can now create awesome user interfaces, time to get your Chakra on! 🕉️&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-saas-boilerplate"&gt;
  &lt;/a&gt;
  React SaaS Boilerplate
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;React SaaS Boilerplate&lt;/a&gt; is the perfect starter kit to launch your SaaS faster and better. Focus on your business, products and customers instead of losing your time to implement basic functionalities like authentication, recurring payment, landing page, user dashboard, form handling, error handling, CRUD operation, database, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>20 ICP（About $800） Bounty for Developer web3</title>
      <author>UtadaMaaya&lt;Astrox.network&gt;</author>
      <pubDate>Wed, 01 Dec 2021 15:39:00 +0000</pubDate>
      <link>https://dev.to/utadamaaya/20-icpabout-800-bounty-for-developer-web3-40cf</link>
      <guid>https://dev.to/utadamaaya/20-icpabout-800-bounty-for-developer-web3-40cf</guid>
      <description>&lt;p&gt;&lt;strong&gt;20 ICPs, with 10 ICPs bonus for docs site&lt;/strong&gt;&lt;br&gt;
task: @Astrox_Network's "agent_dart" api doc&lt;br&gt;
link:&lt;a href="https://github.com/AstroxNetwork/agent_dart/issues/13"&gt;https://github.com/AstroxNetwork/agent_dart/issues/13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acceptance Criteria:&lt;/strong&gt;&lt;br&gt;
 [comment on code to cover all apis]&lt;br&gt;
 [generate dart docs]&lt;br&gt;
 [optional generate gitbook or github pages]&lt;br&gt;
 [optional tutorial/docs site for developers]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Context:&lt;/strong&gt;&lt;br&gt;
To have better understanding of internet computer, for client developers, it is the best way to understand how the sdk works.&lt;/p&gt;

&lt;p&gt;Though we have ported most agent-js features to agent_dart, we don't have enough resources to complete the api docs. Which is really important work for community developers.&lt;/p&gt;

&lt;p&gt;Thus, we need to cover as many apis as possible, we need someone to comment on code like we do for dart code.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>blockchain</category>
      <category>rust</category>
    </item>
    <item>
      <title>ES6 - A beginners guide - Generators</title>
      <author>Stefan Wright</author>
      <pubDate>Wed, 01 Dec 2021 15:37:21 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-generators-48hj</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-generators-48hj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey"&gt;
  &lt;/a&gt;
  Hey
&lt;/h2&gt;

&lt;p&gt;Forewarning: this topic is hard! It's taken me a week to even start to get my head around it. You may have to read this a few times also, I have spent countless hours watching YouTube videos on this. I'll link one of my favourites at the end&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-you-talking-about"&gt;
  &lt;/a&gt;
  What are you talking about?
&lt;/h3&gt;

&lt;p&gt;Generators! An ES6 feature that is ultimately just a function to iterate over a series of values. However it has a bonus feature! What is it? I hear you ask. Well let me try to explain, When using a generator you can ultimately pause the execution of your code to do something and then return to it later in another clode block. They are very intimidating to start with but ultimately easy to understand after a while. The hardest bit for me was finding an example, or a few examples, that would just give me that glimmer as to why they are useful and why they are better than other possible ways of working (if I could find the examples showing both ways of working then awesome!). Normally I would look at the ES5 way's of working first, this time I am going to switch it up a bit, and we're going to look at the ES6 way to begine with!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-does-a-generator-look-like"&gt;
  &lt;/a&gt;
  So what does a generator look like
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;*&lt;/code&gt; after the function keyword, that tells us this is a generator function. Then we have a new keyword &lt;code&gt;yield&lt;/code&gt;, this keyword is treated as though it's a mini version of &lt;code&gt;return&lt;/code&gt; inside the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call a generator, as above, it will not start to do anything, it will be in a suspended state and it will return a generator object. Within the generator object there are 3 prototypes that can be called &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;return()&lt;/code&gt;, and &lt;code&gt;throw()&lt;/code&gt;. We'll start off by looking at the &lt;code&gt;next()&lt;/code&gt; prototype.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-please"&gt;
  &lt;/a&gt;
  next() please!
&lt;/h3&gt;

&lt;p&gt;When we call the next prototype, essentially what we are doing is telling the generator function to start and run until it hits a yield keyword, let's take a look at the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 1, done: false } in a console log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see that our code has started and run to the first yield of 1. The output of this give us an object with a value property and a done property, the done property will be false until after the last yield statement is seen&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 1, done: false } in a console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 3, done: false } in a console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 3, done: false } in a console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: undefined, done: true } in a console log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we now see that after we get through all the yields we see a value of undefined, with a done value of true. To make the code execution a bit clearer, we can add some log messages into out generator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Before 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Before 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Before 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numberGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// We will see a console log stating "Before 1"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 1, done: false } in a console log&lt;/span&gt;
&lt;span class="c1"&gt;// We will see a console log stating "Before 2"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 3, done: false } in a console log&lt;/span&gt;
&lt;span class="c1"&gt;// We will see a console log stating "Before 3"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: 3, done: false } in a console log&lt;/span&gt;
&lt;span class="c1"&gt;// We will see a console log stating "After 3"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This will return { value: undefined, done: true } in a console log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above makes it a bit clearer to understand that when we first call &lt;code&gt;.next()&lt;/code&gt; we will enter our function, and execute up until the first yield, so we will output &lt;code&gt;Before 1&lt;/code&gt; and then &lt;code&gt;{ value: 1, done: false}&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-about-some-use-cases"&gt;
  &lt;/a&gt;
  So what about some use cases?
&lt;/h3&gt;

&lt;p&gt;Before writing this article I wanted to try and find some example that would concrete my understanding of this topic, honestly I can't say that I fully understand it but here we are, trying things out, and perhaps you can help me understand more use cases?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#generate-user-ids"&gt;
  &lt;/a&gt;
  Generate user ID's
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;generateId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// We could take this number from a database lookup&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This would return 1 in a console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This would return 2 in a console log&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This would return 3 in a console log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we use a while loop to make our generator an infinite loop always generating us the next number. The advantage here? Well, if you try to run a &lt;code&gt;while(true)&lt;/code&gt; loop in your own code, you will crash the browser in a few mere seconds and the only way to stop it will be to kill the browser processes on your PC (DO NOT TRY THIS!), doing this in a generator mean we only execute it one step at a time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-i-pass-parameters"&gt;
  &lt;/a&gt;
  Can I pass parameters?
&lt;/h3&gt;

&lt;p&gt;Yes, you can pass parameters into a generators next() function, and I must admit this bit stumped me for a while. To put it most simply, you can pass a parameter in, however if it is the first time calling &lt;code&gt;.next()&lt;/code&gt; it will not have any effect because you are yet to yield anything. The parameter sent to the &lt;code&gt;.next()&lt;/code&gt; essentially replaces the previous yielded. I'll try to explain with a code example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;keepScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToScore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="c1"&gt;// the first call to .next() will only run to here therefore returning 0&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToScore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// addToScore is populated by the parameter you pass in after the first run&lt;/span&gt;
      &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;addToScore&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playerOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keepScore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;score after first move: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This would output 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;score after second move: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// This would output 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;score after third move: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// This would output 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;score after fourth move: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// This would output 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;score after fifth move: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// This would output 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-an-early-exit"&gt;
  &lt;/a&gt;
  Making an early exit
&lt;/h3&gt;

&lt;p&gt;With generators it is possible to exit from the function, this can be done in one of two ways. Firstly, you can call &lt;code&gt;.return()&lt;/code&gt; instead of next to make the generator exit, or you can use a &lt;code&gt;return&lt;/code&gt; statement inside the generator function itself. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hitMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;addToCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxCount&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;hitMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`maxCount has been hit or exceeded`&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hitMax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we will keep counting until &lt;code&gt;hitMax&lt;/code&gt; is true, after which we will stop and exit our &lt;code&gt;for&lt;/code&gt; loop, in that example we return inside the generator. Let's look at an alternative:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hitMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;addToCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxCount&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;hitMax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hitMax&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maxCount has been hit or exceeded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we have to work slightly differently, we will keep incrementing until the &lt;code&gt;done&lt;/code&gt; value of &lt;code&gt;.next()&lt;/code&gt; is true, inside that loop we check our boolean of &lt;code&gt;hitMax&lt;/code&gt; and if we have hit that instead of counting again we will call &lt;code&gt;.return('maxCount has been hit or exceeded')&lt;/code&gt; which sets the &lt;code&gt;.next().done&lt;/code&gt; value to true and allows us to output a "completion" message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;WOW! This was by far the hardest topic I have looked at, and I think I have understood it to a basic level at least. The biggest challenge I found was finding and understand real-world use cases. I still don't think i have 100% cracked it with the example, perhaps you have something better? Feel free to share examples in the comments if you do :) The bigget point I learnt from this was:&lt;/p&gt;

&lt;p&gt;A generator allows you to exit and re-enter the function multiple times until the done value is true, meaning you don't need to have multiple functions that you call at various stages through the lifecycle. Again, if you have a better explanation, hit me up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IJ6EgdiI_wU"&gt;Learn JavaScript Generators In 12 Minutes - Web Dev Simplified&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IJ6EgdiI_wU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>AzureFunBytes Reminder -  Getting Started with @Azure and WebAssembly with @StevenMurawski - 12/2/2021</title>
      <author>Jay Gordon</author>
      <pubDate>Wed, 01 Dec 2021 15:33:34 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-reminder-getting-started-with-azure-and-webassembly-with-stevenmurawski-1222021-3mhf</link>
      <guid>https://dev.to/azure/azurefunbytes-reminder-getting-started-with-azure-and-webassembly-with-stevenmurawski-1222021-3mhf</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;When: December 2, 2021 11 AM Pacific / 2 PM Eastern&lt;br&gt;
Where: &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebAssembly (or WASM) was introduced as a runtime for more highly performant in-browser applications. WASM workloads offer another exciting use case outside of the browser. WebAssembly's sandbox, the ability to target multiple languages to a common runtime, and a very low overhead execution runtime provide an interesting option for true cloud native workloads. We'll look at an experimental PaaS platform for running WebAssembly workloads - with a fully automated environment setup in Azure, use the yo wasm tool to get started quickly, and look at an existing preview feature in Azure Kubernetes Service where WASM workloads can be run today!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/3kz"&gt;From the Microsoft docs website&lt;/a&gt;, WASM is described as: &lt;em&gt;"...a binary format that is optimized for fast download and maximum execution speed in a WASM runtime. A WASM runtime is designed to run on a target architecture and execute WebAssemblies in a sandbox, isolated from the host computer, at near-native performance. By default, WebAssemblies can't access resources on the host outside of the sandbox unless it is explicitly allowed, and they can't communicate over sockets to access things environment variables or HTTP traffic."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goals of WebAssembly include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speed and portability&lt;/li&gt;
&lt;li&gt;Human readable and debuggable&lt;/li&gt;
&lt;li&gt;Secured by using sanboxed environements&lt;/li&gt;
&lt;li&gt;Plays well with other web technologies and provides backwards compatibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To talk more about WebAssembly, I've asked &lt;a href="https://twitter.com/stevenmurawski"&gt;Steven Murawski&lt;/a&gt;, a Principal Cloud Advocate Microsoft to come back on the show.  We'll learn about what changes to web applications are provided by WebAssembly, look at how we can integrate it with your Azure environment, and show how to get started.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/diMtd_I12qA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is WebAssembly?&lt;/li&gt;
&lt;li&gt;Why would I use WebAssembly?&lt;/li&gt;
&lt;li&gt;Where can I use WebAssembly outside the browser? &lt;/li&gt;
&lt;li&gt;- Wasmtime

&lt;ul&gt;
&lt;li&gt;Hippo&lt;/li&gt;
&lt;li&gt;WASM Node Pools in AKS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Getting started with yo wasm&lt;/li&gt;
&lt;li&gt;Publishing an app into Hippo&lt;/li&gt;
&lt;li&gt;Publishing an app via Azure Container Registry into AKS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Steven Murawski:&lt;/p&gt;

&lt;p&gt;Steven Murawski is a Principal Cloud Advocate focusing on Cloud Native technologies - most specifically, the use of WebAssembly as a cloud native runtime. Steven comes to this role with a background in DevOps, Site Reliability Engineering, and software development.&lt;/p&gt;

&lt;p&gt;So be part on Thursday, December 2nd at 11 AM PT / 2 PM ET on &lt;a href="https://cda.ms/226"&gt;LearnTV&lt;/a&gt; with your questions!&lt;/p&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is normally found on Twitch, YouTube, and &lt;a href="https://cda.ms/226"&gt;LearnTV&lt;/a&gt; at 11 AM PT / 2 PM ET Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/azurefunbytes"&gt;AzureFunBytes on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/jaygordononyoutube"&gt;AzureFunBytes on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC-ikyViYMM69joIAv7dlMsA"&gt;Azure DevOps YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azurefunbytes"&gt;Follow AzureFunBytes on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;br&gt;
&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt;&lt;br&gt;
&lt;a href="https://webassembly.org/"&gt;WebAssembly overvie&lt;/a&gt;&lt;br&gt;
&lt;a href="https://webassembly.org/docs/use-cases/"&gt;WebAssembly Use Cases&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/WebAssembly"&gt;WebAssembly MDN Web Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3kw"&gt;Public preview: AKS support for WebAssembly System Interface (WASI) workloads&lt;/a&gt;&lt;br&gt;
&lt;a href="https://krustlet.dev/"&gt;Krustlet Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/smurawski/series/15635"&gt;Steven's three part series, Getting Started with Hippo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3kx"&gt;Host and deploy ASP.NET Core Blazor WebAssembly&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3ky"&gt;Microsoft Learn: Publish a Blazor WebAssembly app and .NET API with Azure Static Web Apps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/3kz"&gt;Create WebAssembly System Interface (WASI) node pools in Azure Kubernetes Service (AKS) to run your WebAssembly (WASM) workload (preview)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webassembly</category>
      <category>azure</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Simplifying a JavaScript Function With 12 Automated Refactorings</title>
      <author>Lars Grammel</author>
      <pubDate>Wed, 01 Dec 2021 15:33:30 +0000</pubDate>
      <link>https://dev.to/p42/simplifying-a-javascript-function-with-12-automated-refactorings-4hk8</link>
      <guid>https://dev.to/p42/simplifying-a-javascript-function-with-12-automated-refactorings-4hk8</guid>
      <description>&lt;p&gt;&lt;strong&gt;Executing many automated refactorings in a row is a powerful way to improve your code quickly&lt;/strong&gt;. The advantage of this approach over manual refactoring is that it is less likely to introduce bugs and that it can often be faster with the right keyboard shortcuts. However, it is a bit of an art to chain refactorings, as it can involve unintuitive actions to enable further steps.&lt;/p&gt;

&lt;p&gt;This blog post shows an example of how to &lt;strong&gt;simplify a small JavaScript function in a series of 12 automated refactorings&lt;/strong&gt; without changing its behavior. I'll be using &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;P42 JavaScript Assistant refactoring extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Initially, the function (from this &lt;a href="https://dev.to/luigizaccagnini/refactoring-code-in-octo-3397"&gt;blog post&lt;/a&gt;) looks at follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br /&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After refactoring, the function is much shorter and easier to comprehend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;br /&amp;gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the steps that I took to refactor the function:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-control-flow-and-remove-variable"&gt;
  &lt;/a&gt;
  Simplify Control Flow and Remove Variable
&lt;/h2&gt;

&lt;p&gt;The first refactorings eliminate the document variable and simplify the control flow. This change makes it easier to reason about the function because there is less state (i.e., no document variable) and several execution paths return early.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Pull out the &lt;code&gt;+&lt;/code&gt; from the &lt;code&gt;+=&lt;/code&gt; assignments into regular string concatenation&lt;/strong&gt;. 
This step enables the introduction of early return statements in the next step.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Replace re-assigning the &lt;code&gt;document&lt;/code&gt; variable with early return statements.&lt;/strong&gt;
This step simplifies the control flow and enables inlining the &lt;code&gt;document&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inline the &lt;code&gt;document&lt;/code&gt; variable&lt;/strong&gt;. 
This step removes an unnecessary variable and enables the removal of the empty string literals in the next step. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove empty string literals by merging them into the templates.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After applying these steps, the function looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;br /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euTJxoAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3j18ahr2e453p70gn70.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euTJxoAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3j18ahr2e453p70gn70.gif" alt="Simplify Control Flow and Remove Variable" width="635" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-conditions-and-remove-code"&gt;
  &lt;/a&gt;
  Simplify Conditions and Remove Code
&lt;/h2&gt;

&lt;p&gt;The next goals are to simplify the conditions in the if statements and to remove dead or unnecessary code. This change further reduces the complexity of the function and makes it easier to comprehend because there is less code and the conditions are simpler.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Separate &lt;code&gt;isFirstLine&lt;/code&gt; condition into nested if statement.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pull up negation from &lt;code&gt;!==&lt;/code&gt;.&lt;/strong&gt; These two steps prepare the removal of the redundant else-if condition.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remove redundant condition on else-if&lt;/strong&gt; because it is always true. After removing the redundant else-if condition, it becomes clear that the final &lt;code&gt;return&lt;/code&gt; statement is unreachable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Remove unreachable code.&lt;/strong&gt; Unreachable code is useless and consumes some of our attention without benefit. It is almost always better to remove it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Push negation back into &lt;code&gt;===&lt;/code&gt;.&lt;/strong&gt; This refactoring reverts a previous step that was temporarily necessary to enable further refactorings.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Invert &lt;code&gt;!==&lt;/code&gt; condition and merge nested if.&lt;/strong&gt; The resulting &lt;code&gt;line === ""&lt;/code&gt; condition is easier to understand because there is no negation. Even better, it enables lifting the inner if statement into an else-if sequence and indicates that the empty line handling might be a special case.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After applying these steps, the function looks as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;br /&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWKG_f6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2y693ze3z69z71a10nx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWKG_f6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2y693ze3z69z71a10nx.gif" alt="Simplify Conditions and Remove Code" width="635" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improve-readability"&gt;
  &lt;/a&gt;
  Improve Readability
&lt;/h2&gt;

&lt;p&gt;The last set of refactorings aims to improve the readability by moving the special case &lt;code&gt;line === ''&lt;/code&gt; into a guard clause and using a conditional return expression.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Convert &lt;code&gt;line === ''&lt;/code&gt; condition into guard clause.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplify return with conditional expression.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Format&lt;/strong&gt;, e.g., with &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; on save.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the final result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineChecker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;br /&amp;gt;`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isFirstLine&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VenLrYFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vssqxeonqaztk7ag2wi4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VenLrYFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vssqxeonqaztk7ag2wi4.gif" alt="Improve Readability" width="635" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-considerations"&gt;
  &lt;/a&gt;
  Additional Considerations
&lt;/h3&gt;

&lt;p&gt;This blog post shows how to use automated refactorings to simplify a JavaScript function without changing its behavior. In practice, there are many additional considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automated Test Coverage&lt;/strong&gt; &lt;br&gt;
Automated testing is essential to have confidence that the refactoring did not inadvertently change the code's behavior. It is particularly crucial when there are error-prone manual refactoring steps. When there is insufficient test coverage, it is critical to add tests before refactoring code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Uncovering Potential Bugs&lt;/strong&gt;&lt;br&gt;
Simpler code can uncover potential bugs that you can investigate after the refactoring is completed. In the example here, a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; is being returned from the function even when &lt;code&gt;isFirstLine&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, which might not be the intended behavior.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Other Refactorings&lt;/strong&gt;&lt;br&gt;
There are many ways to refactor the function from this blog post. I've focussed on simplifying the function, but renaming or even decomposing it are other possibilities. Check out the post "&lt;a href="https://dev.to/p42/how-would-you-refactor-this-js-function-4n71"&gt;How would you refactor this JS function?&lt;/a&gt;" for more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this post gave you an idea of how to sequence automated refactoring steps to achieve a more significant refactoring change.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>codequality</category>
      <category>refactorit</category>
    </item>
    <item>
      <title>Responsive Footer Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 01 Dec 2021 15:32:19 +0000</pubDate>
      <link>https://dev.to/nikhil27b/responsive-footer-using-html-css-3gg</link>
      <guid>https://dev.to/nikhil27b/responsive-footer-using-html-css-3gg</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;How are you guys today I writing this post after to much request from you. In this post I created simple responsive  footer using HTML &amp;amp; CSS.&lt;/p&gt;

&lt;p&gt;You can also create a good and responsive footer after using this I use flex and grid so its responsive for all the media query you can be use any of this to create a footer but I code this footer for beginners. if you are good in frontend then you don't need to write this much of code. I use 2 media query for this post. &lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts. &lt;strong&gt;Please Follow on Instagram For More Content&lt;/strong&gt;.  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you 🙂!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/YzrPvrP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Skill and Knowledge Sharing – Creating Community with Arisa Fukuzaki</title>
      <author>Mandy Moore</author>
      <pubDate>Wed, 01 Dec 2021 15:25:32 +0000</pubDate>
      <link>https://dev.to/newrelic/skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki-ed6</link>
      <guid>https://dev.to/newrelic/skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki-ed6</guid>
      <description>&lt;p&gt;&lt;a href="https://therelicans.com"&gt;Relicans&lt;/a&gt; host &lt;a href="https://twitter.com/pachicodes"&gt;Pachi Parra&lt;/a&gt; talks with DevRel Engineer at &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;, &lt;a href="https://twitter.com/arisa_dev"&gt;Arisa Fukuzaki&lt;/a&gt;, about opportunities and resources to learn programming for Japanese folx, starting and keeping a coding school alive, and to find a mentor who you aim to be because if you have someone who is like a role model, you really can motivate yourself effectively.&lt;/p&gt;

&lt;p&gt;Should you find a burning need to share your thoughts or rants about the show, please spray them at &lt;a href="mailto:devrel@newrelic.com"&gt;devrel@newrelic.com&lt;/a&gt;. While you're going to all the trouble of shipping us some bytes, please consider taking a moment to let us know what you'd like to hear on the show in the future. Despite the all-caps flaming you will receive in response, please know that we are sincerely interested in your feedback; we aim to appease. Follow us on the Twitters: &lt;a href="https://twitter.com/LaunchiesShow"&gt;@LaunchiesShow&lt;/a&gt;.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/launchies/skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Skill and Knowledge Sharing – Creating Community with Arisa Fukuzaki&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/launchies"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        Launchies
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki" alt="Launchies" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqIIXJAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_l3MirTt--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/launchies/skill-and-knowledge-sharing-creating-community-with-arisa-fukuzaki"&gt;
      &lt;img id="episode-profile-image" alt="Skill and Knowledge Sharing – Creating Community with Arisa Fukuzaki" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_5JRBqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S-_M_-nf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Jonan Scheffler: Hello and welcome to &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;, proudly brought to you by New Relic's Developer Relations team, &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt;. The Launchies podcast is about supporting new developers and telling their stories and helping you make the next step in what we certainly hope is a very long and healthy career in software. You can find the show notes for this episode along with all of The Relicans podcasts on &lt;a href="//developer.newrelic.com/podcasts"&gt;developer.newrelic.com/podcasts&lt;/a&gt;. We're so glad you're here. Enjoy the show.&lt;/p&gt;

&lt;p&gt;Pachi Parra: Hello and welcome to &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies Podcast&lt;/a&gt;. We are a podcast for newbies, developers with non-traditional backgrounds, and career-switchers. I am &lt;a href="https://twitter.com/pachicodes"&gt;Pachi&lt;/a&gt;, and I'm a DevRel Engineer at &lt;a href="https://newrelic.com"&gt;New Relic&lt;/a&gt;. And I will be your host for today. And today's guest I have here with me &lt;a href="https://twitter.com/arisa_dev"&gt;Arisa&lt;/a&gt;. She's a DevRel engineer at &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt; where she works demonstrating how &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt; can minimize the gap between devs and non-devs to better work. &lt;/p&gt;

&lt;p&gt;She learned front end on her own. And after resigning from her previous job as a cabin crew on an airline, she had a chance to teach front end in an online school. And with her newfound skills and experience, she built her own school. That's awesome. In her free time, Arisa is a podcaster too. She's a &lt;a href="https://www.thecodingspace.com/girlcode.html"&gt;GirlCode&lt;/a&gt; Ambassador and a front-end school mentor. So welcome, &lt;a href="https://twitter.com/arisa_dev"&gt;Arisa&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Arisa Fukuzaki: Hey, Pachi. Thanks for having me. &lt;/p&gt;

&lt;p&gt;Pachi: Thanks for accepting. How are you doing today? &lt;/p&gt;

&lt;p&gt;Arisa: Well, I'm doing great. I'm located in Germany. So right now here in Germany it's like 8:00 p.m., kind of dinner time, [laughs] but it's okay; I will have my dinner later. But yeah, today I was also doing great. And I'm really excited for this podcast. &lt;/p&gt;

&lt;p&gt;Pachi: That's what I love about this entire DevRel thing and how online we are. You can talk to people from all over.&lt;/p&gt;

&lt;p&gt;Arisa: [laughs] Yeah, it's crazy that everything can be done online, and you can even work in different time zones. &lt;/p&gt;

&lt;p&gt;Pachi: Yes. It's awesome. And you are Japanese, right? So, how long have you been in Germany? &lt;/p&gt;

&lt;p&gt;Arisa: Oh, I've been living in Germany since 2017. So it's going to be four to five years. Yeah, time flies really fast. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: So I'm not going to ask you how you got there. I'm going to get to that later. So I'd like to ask you how you got started in tech. I feel like lots of people that I talk with didn't think that programming was for them until later in life, especially women. So I saw you used to work in airplanes before. So, how did you get started in tech, and when did you realize that that was a career path for you? &lt;/p&gt;

&lt;p&gt;Arisa: Well, the timing when I realized that programming is something for me is when I was working in an airline, which was &lt;a href="https://www.emirates.com/us/english/"&gt;Emirates&lt;/a&gt;. And there I felt like okay, for me, in my personal opinion, this job was quite hard, you know, getting up in the middle of the night and working at 2:00 a.m. 3:00 a.m., going back home around 10:00 a.m. or something like this with different time zones. So I was like, okay, I need to make up my mind to find something like a job which is technical or something like a highly demanded job. So that's what I started to search. &lt;/p&gt;

&lt;p&gt;And there were programmers or developers then I was like erm...Of course, in the beginning, I had some stereotypes because I didn't come from a background of computer science. And also, I don't have a computer science degree back in my home. So I was like, maybe it's not for me, but you never know until you try. So I'm the kind of person that likes to try it first, and if it doesn't work, then that's okay, and if it works, then that's hooray. [chuckles] So I tested it out and more than I expected, like really, really, more than I expected, I really loved it. &lt;/p&gt;

&lt;p&gt;So the first thing I started was learning from HTML and CSS. That's a super fun part for beginners. I realized that maybe front end is something for me that I can continue. And I continued to study JavaScript. And yeah, so that's the moment I decided like, okay, if I'm going to change the job, then I'm going to be a developer. So I got the confidence that if I keep continuing to study, I think I can really continue that for several years or even longer than ten years or so. So that's why I was like, okay, I will quit the job, and I will fully commit to this. So yeah, that's how I got into tech. That's the moment I realized that programming is something for me. &lt;/p&gt;

&lt;p&gt;And eventually, I got the job as a freelancer then started to be involved in one programming school, and some other schools were also attractive to work for me. So that's how I got to work as a mentor at the &lt;a href="https://www.frontendfoxes.org/"&gt;Front-End Foxes School&lt;/a&gt; and one other school.&lt;/p&gt;

&lt;p&gt;Pachi: That's awesome. Have you ever heard or done something with programming before that? I know that here in the U.S., not for me because I'm from Brazil, but in the U.S., lots of people have some programming in high school, even if it's not great because it's not fun. But have you seen any programming when you were younger?&lt;/p&gt;

&lt;p&gt;Arisa: Well, of course, I knew about programming. But the thing is, I didn't hear people talking about hey, there's programming, and it's super fun. And there are also some opportunities that you can learn and test it out. So actually, I didn't have a chance or someone asking me to have some lectures together, or there are some teachers who can teach us. So I think I was lacking the opportunities. But of course, there's always some environment at some point that you know how programming is or stuff like that.  &lt;/p&gt;

&lt;p&gt;Pachi: And how did you get into teaching? Because you have your own school.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, [laughs] I have my own school. I need to say I had because as I started to work at &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;, I was the only person who was running the school because that was my own school. So it's going to be quite hard to manage working for both with the full 100% effort. So I'm not this talented, so I had to keep my focus on either one of them. But instead of just closing the school and saying bye-bye to all my students, I turned my own school into a free community.&lt;/p&gt;

&lt;p&gt;Pachi: Oh, awesome.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah. So that's what I'm actually running right now. It's a tech community for Japanese developers regardless of any level. So we also have some who are really senior and also have some work experience in several companies or someone who just started to be interested in studying programming too. And in this community, instead of just learning from the teacher, you will learn the experience as well as the knowledge you need from the community members, not just from me. So it will be more varied experience that you can prepare in order to be able to work in any environment.&lt;/p&gt;

&lt;p&gt;Pachi: That's really cool.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: And I'm curious, I'm from Brazil, and you're from Japan. We have lots of content in English on learning how to code. In Portuguese, we're getting there, but we don't have as much. So lots of people if they learn English, they have more resources. How is Japan for programming learning?&lt;/p&gt;

&lt;p&gt;Arisa: That's a really interesting question. So the thing is, if you're Japanese and looking for some opportunities to learn programming, there are actually quite a lot of resources translated into Japanese. So I'm a front-end developer, or I came from the background of the front end. So if you're a front-end developer and, for example, know Japanese as your first language, the MDN documentation on there is also written in Japanese.&lt;/p&gt;

&lt;p&gt;And I don't know why but somehow, most of the famous libraries and frameworks have translations for Japanese people. So if you're lucky, for example, if you're familiar with Vue.js, you have an almost full translation for the documentation, or they even have some of the technical books that you can buy at the store and also test it out in your environment. So I think even if you don't speak English or even if you cannot understand fully in English, you still have a lot of opportunities to learn and read the contents for programming in Japanese.&lt;/p&gt;

&lt;p&gt;But of course, there's always the limitation. For example, if you want to learn something really new, features or tools, libraries, frameworks coming out...of course, all the newest information is first coming out in English. And you need to wait for a couple of months or, worst case, years for it to be translated. [chuckles] So, of course, if you understand English, there would be higher possibilities that you can have some opportunities to test these new tools.&lt;/p&gt;

&lt;p&gt;Pachi: Yeah, learning English in programming is helpful. &lt;/p&gt;

&lt;p&gt;Arisa: Yeah. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: So before getting started as a DevRel engineer, you were working on front end. So you mentioned you did some freelancing. Do you care to tell us a little bit about how your experience was to get your first job as a front end, and how was that first job?&lt;/p&gt;

&lt;p&gt;Arisa: So, my first job was actually a freelance front-end developer job. So I started as a freelancer eventually. And I found the job opportunity or project online. In Japan, we call it crowdsourcing. So through online, you will find a match with a client who is looking for someone who can develop the projects for them. So the developers also can find those kinds of clients. I found one of them. So I've developed one very simple landing page. &lt;/p&gt;

&lt;p&gt;At the same time, I also was working for my friend who lived in Hiroshima because I'm from Hiroshima. So I developed, I would say web application. Because from her request, she wanted to have a web project as well as this web project to have the real-time chat feature. So I was integrating &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; as BaaS, Backend-as-a-Service. And the front-end side was...at the time; I couldn't do &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; [laughs] because that was my first project, and I had just started to study. So I used the simple Vanilla JavaScript. So those two were working at the same time, so I would count these two as my first project. &lt;/p&gt;

&lt;p&gt;Pachi: But that is a very challenging project for a first project. I'm impressed.&lt;/p&gt;

&lt;p&gt;Arisa: [laughs] Yeah, at the time, I really wanted to make an impressive portfolio for future job opportunities. [laughs] So I was doing...I also was asking my clients to let me learn some of the new technologies which I wanted to study. [laughs] But it turned out really good results in the end. &lt;/p&gt;

&lt;p&gt;Pachi: That's great. That's really cool. And after that first job...can you tell us some of the challenges that you had in your first job, like learning things, how to figure them out? Because as a freelancer, how did you get help when you needed it?&lt;/p&gt;

&lt;p&gt;Arisa: So to get the help, in the beginning, that was the biggest challenge I've ever had at the time. The way I figured it out was, first of all, know the right place to ask the questions or know the right resources to find the answers. And the thing is, in my opinion, I didn't have to ask too often at &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;, in my opinion. [chuckles] There were already enough answers laying down in there. So when I got some error logs or some stuff like that, I just googled the keywords, which had to be really precise to narrow down the problems which I had, and also taking a look at the documentation first.&lt;/p&gt;

&lt;p&gt;Basically, what I had in my mind or what I knew from what I studied before always going back to the documentation. And if there are no answers, then find them in &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; because, most likely, there must be some answers already that have been answered. So, in the beginning, it took some time to get used to, but I think I didn't have to take too much time because, in my case, I understand English. So it will be really faster to search in two languages, in Japanese and in English. I think that was an advantage I had.&lt;/p&gt;

&lt;p&gt;Pachi: That's a good point, you know two languages. [chuckles] Somebody had the same question at some point. &lt;/p&gt;

&lt;p&gt;Arisa: Yeah. And the interesting thing is at &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt; if you want to ask, you also can ask in two languages, although you cannot ask at the same time. You need to somehow wait for, I think, 45 minutes up to an hour to post in a different language, but I knew that it works. [chuckles]&lt;/p&gt;

&lt;p&gt;Pachi: That's great. &lt;/p&gt;

&lt;p&gt;Arisa: And I was asking in both languages, and I knew that in Japanese, once they read my question, the answer may be late, but the answer is quite accurate. And in English, if I want to have really quick answers, then they're really fast. So yeah, that's the trick I used too.&lt;/p&gt;

&lt;p&gt;Pachi: I had no idea that you could ask in two languages, but that is smart. That is great.&lt;/p&gt;

&lt;p&gt;Arisa: [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: Can I ask how long you have been programming?&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, sure. Of course. I've been coding for more than four years. I think it's going to be almost five years. I lost my track, but I started in 2017. So yeah, it's almost five years, I would say. &lt;/p&gt;

&lt;p&gt;Pachi: I feel like everybody is a bit lost sometimes. [laughter]&lt;/p&gt;

&lt;p&gt;Arisa: What about you, Pachi? How long have you been coding?&lt;/p&gt;

&lt;p&gt;Pachi: Three years. &lt;/p&gt;

&lt;p&gt;Arisa: Oh, okay.&lt;/p&gt;

&lt;p&gt;Pachi: I'm also not sure. Something like that.&lt;/p&gt;

&lt;p&gt;Arisa: Wow. But then you do live streaming on &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;. That's really impressive.&lt;/p&gt;

&lt;p&gt;Pachi: But I do live streaming learning. I don't create things from zero. Usually, I'm learning. I like to use the live stream as a learning platform because if I have questions, the people there who are watching me can help me. [laughter] They are very helpful if you have the right people watching you. But what I want to ask you is, how did you have the idea of starting your own school, and why?&lt;/p&gt;

&lt;p&gt;Arisa: That's also an interesting question. So the reason why I started the school is...maybe it's not a good reason as some of the listeners would imagine. [laughs] But one of the reasons was because I used to work in one Japanese online school, and I was working very closely with the CEO. So we had over 50 students in the most successful time, but eventually, there started to be less numbers of students. And one day, the CEO suddenly told me, "Arisa, sorry, we need to shut down the school. So you're on your own from today." [laughs] So I'm like, what? &lt;/p&gt;

&lt;p&gt;Pachi: Oh.&lt;/p&gt;

&lt;p&gt;Arisa: And then, at the time, on my own, I had already over ten students who were learning with me. So I was like, you cannot just abandon them. I need to teach them, or they must have someone who can teach them because the time they committed, the amount of money they spent, that's not something that you can just say, "Sorry, we finished and bye-bye." No, that's not nice. I'm a programming education enthusiast, so I believe in education. So I wanted to keep them to finish their studies. So that's how I came up with the idea that okay, if there is no school, then I can continue on my own. &lt;/p&gt;

&lt;p&gt;So I told my students like, "Hey, the school is going to close the business, but I'm going to teach you guys if you're interested, and you can keep studying with me. What do you think?" And all of them stayed. So that's how I continued to reorganize the platform as my own school. And that's how it continued.&lt;/p&gt;

&lt;p&gt;Pachi: That's nice. You already had the students, so you just kept going. &lt;/p&gt;

&lt;p&gt;Arisa: Yeah, I already had a couple of students, more than 10 of them. That's not the number you can easily say, "No," and then say, "Goodbye." And I also had several people constantly coming over and asking me like, "Hey, I want to learn programming. Can you teach me?" So I knew that there are stable numbers of students who are coming. That's why.&lt;/p&gt;

&lt;p&gt;Pachi: That's really nice that you told them that the school was closing, and everybody wanted to stay.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah. If you want to study something, there should always be a stable place where you can study once you start it. And nobody should be getting lost on where to study or where to continue studying. So I wanted to keep the place for them. &lt;/p&gt;

&lt;p&gt;Pachi: And that was very nice of you. &lt;/p&gt;

&lt;p&gt;Arisa: [laughs] In fact, I really like teaching. So yeah, I was also looking for some opportunities to keep teaching it. And yeah, they needed a place for that. &lt;/p&gt;

&lt;p&gt;Pachi: What are some of your favorite things about teaching?&lt;/p&gt;

&lt;p&gt;Arisa: That's another interesting question. Well, I love teaching because I myself also can learn a lot of things as well as I also will have some opportunities to read the documentation. So the thing is, I realized that if you have your hands full with some working projects and don't have time at all for studying by yourself, then you tend to take a look at the same contents or only work-related content and the documentation. &lt;/p&gt;

&lt;p&gt;But if you teach, you need to be an expert of everything in, let's say, my case was front end. So you cannot say, "Oh, I don't know this, so you need to find it by yourself," no, instead, I need to guide the students to like, "Okay, so if you have questions about let's say an array and specific array methods, here's the MDN where you can take a look at it, or there is also good documentation which is called &lt;a href="https://javascript.info/"&gt;javascript.info&lt;/a&gt;, if I'm correct, so you can see the sources. And if you still have questions, you can ask me where exactly you have the questions." So it's going to be good for students to practice reading the documentation as well as for me to prepare to answer more in-depth questions. And yeah, with this, I also learned quite a lot of things. And yeah, it was really good practice for myself too. &lt;/p&gt;

&lt;p&gt;And also time to time, when I see my students were gaining their skills and being able to build some of the projects which are not just web projects, they were also building Web apps by themselves, it really gave me some moment to feel like, wow, they gained so much skills compared to when they just started to study. And yeah, simply it gives me joy. So those are the reasons I really love teaching.&lt;/p&gt;

&lt;p&gt;Pachi: That's super nice. And with all that, did that help you? How did you get into DevRel? Was it because of your passion for teaching? How did that happen?&lt;/p&gt;

&lt;p&gt;Arisa: Actually, the opportunity came from one of my colleagues, Samuel, &lt;a href="https://twitter.com/samuelsnopko"&gt;Samuel Snopko&lt;/a&gt; from &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;. So he's the head of the DevRel in &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;. And he approached me by watching one of the talks I gave at the &lt;a href="https://www.gatsbyconf.com/"&gt;GatsbyConf&lt;/a&gt; this year in March. So that was really unexpected because I was thinking...of course, I knew DevRel. But in my mind, it was like, in Japan, we have DevRels, but all of them are so...I don't know how to call them, but they're like superstar developers. [chuckles] So I was like, I'm not the one. I'm not as influential as they are. So I was thinking in my stereotype it's not the job for me. &lt;/p&gt;

&lt;p&gt;But then I got an offer that said, "Hey, there's a DevRel opportunity, if you're interested," and I'm like, okay, why not try? If it's not going to fit, I still can count that I took the opportunity to take the job interview to be a DevRel. And there will be something that I can tell my students to as an experience. So I gave it a try, and surprisingly, it worked. &lt;/p&gt;

&lt;p&gt;And I realized that actually the work I've done before, for example, giving some talks at a conference or organizing communities, teaching, programming, et cetera, also writing blogs, everything related with the DevRel job. So I learned through the job interview process that I was doing the DevRel content creation. &lt;/p&gt;

&lt;p&gt;Pachi: I feel like that's what happened to most people in DevRel. It's not a career that when you get out of high school, you say, "I want to work in DevRel." That's not something that happens. You find out later.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, in fact, I think still we have quite less numbers of DevRels around us. So maybe that's why some people...I even sometimes got questions from my ex-colleagues who used to work with me, like, "So you told me you're going to work as a DevRel engineer. What's DevRel?" So it's quite a new term, I guess, for some of the people too. &lt;/p&gt;

&lt;p&gt;Pachi: Yeah, the term is really new. We talked about this before, but you have been working in DevRel for four months now. &lt;/p&gt;

&lt;p&gt;Arisa: Yeah, four months, since this June. &lt;/p&gt;

&lt;p&gt;Pachi: Oh, this year has gone so fast. [laughter] What are you liking the most about it? How exciting is that? &lt;/p&gt;

&lt;p&gt;Arisa: I can tell my favorite part or the most exciting part to be a DevRel, especially at &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;. I would say that you will have a lot of opportunities to give talks in many conferences. And also, if you have the brand name from the company where you work, sometimes it's going to be...I don't want to say easier because I feel like I'm using the name of the brand, but then you have more trust from the conference side or conference organizers that okay, so this person could give us a talk about, let's say, related with &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt; and the most ideal approach of the &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt; et cetera. &lt;/p&gt;

&lt;p&gt;Because I felt sometimes to apply to conferences as a private...I mean, the freelance developer sometimes it's quite hard to win the trust. And I find more opportunities after I started to work as a DevRel engineer. So that's one of the things I really appreciated. And also, you will have a lot of chances to get to know the other developers more than what I used to be able to do. &lt;/p&gt;

&lt;p&gt;As a freelancer, solo, you need to be extremely talented or extremely good at marketing yourself. And if you're lucky, you will have some chance; if you're not lucky, then you don't. But if you belong in an organization or in an organization which has quite a huge trust among other services, software, et cetera, then you might have more or higher chances to get to know the other developers through the community that the company you belong to already has.&lt;/p&gt;

&lt;p&gt;Pachi: Yes. The developer community is really nice; especially it helps you grow and to get to know people. And being in DevRel makes that your job. So that's awesome.&lt;/p&gt;

&lt;p&gt;Arisa: [laughs] Yeah, and also, I really like to communicate with the users or customers because before I started to work as a DevRel, for me, there were quite limited opportunities to talk to the customers. Because, of course, I only have my own one body, so I have the limitations to deal with the customers who I can be responsible to develop their projects. So I had limited numbers of customers to communicate with. &lt;/p&gt;

&lt;p&gt;But right now, I have quite a lot of demo calls to show how &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt; works and how they can integrate in their cases. So if they're just considering taking a look at how it works in their project, I still get the chance to communicate with them what's their concerns, what's their requests, what they're considering. So it's quite good to learn from listening to the voices of the customers or potential customers or users we have.&lt;/p&gt;

&lt;p&gt;Pachi: And I know that when you work with a company that you speak English, it's hard for you to connect to your native community. That's why on the side, I try to do a lot of Brazilian interactions. So do you have time to connect with the Japanese community?&lt;/p&gt;

&lt;p&gt;Arisa: Let's say I still have because, like we talked in the beginning, I have my own tech community, which is for Japanese developers, regardless of any level, so I have that. Nowadays, I have been busy with the conference season because autumn is conference season for us. So I need to get back to talk to them. But I think I do. &lt;/p&gt;

&lt;p&gt;And also, I started to have some offers from the Japanese conferences. And I guess it was last week I had a Japanese conference which was doing the live panel discussion with the other headless CMSs or monolithic CMSs. And I had the opportunity to do the live panel discussion in Japanese, which was quite new for me. [chuckles] So sometimes I had to study to find out okay, how do I say this in Japanese? I think you understand.&lt;/p&gt;

&lt;p&gt;Pachi: Yeah, yeah.&lt;/p&gt;

&lt;p&gt;Arisa: Because mostly, I speak at conferences in English and sometimes I don't know what to say in Japanese, so that's the funny part. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: Yeah, at least in Portuguese, we accept...for technical words, we accept lots of them in English, so usually, it's fine. But I always try to find Portuguese terms. [laughter]&lt;/p&gt;

&lt;p&gt;Arisa: In Japanese, we also adopt quite a lot of technical words just using English translation, but that's not all the cases. Sometimes we need to use Japanese. So yeah, [laughs] we struggle a bit.&lt;/p&gt;

&lt;p&gt;Pachi: And you live in Germany, so do you interact with your German community? Are you fluent in German? How is it? [laughs]&lt;/p&gt;

&lt;p&gt;Arisa: Let me be honest, I'm not fluent in German. [laughs] I guess my German level is really baby level. [laughs] So I'm not able to communicate in terms of work. In fact, I don't have some of the duties, I would say, or tasks that I need to demonstrate in German. I had some opportunities to listen or join the meetings in German, but I do not have to do that. So I would say I'm not good at demonstrating in German, but yeah. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: Oh, that is good. I was going to say that Japanese and English are more than enough. [laughter]&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, but I really can use a lot of advantages that I can speak Japanese as my native language because now I started to be able to connect to a lot of Japanese developers who didn't know about our product &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;, but now they started to recognize us. So that's really something very interesting now.&lt;/p&gt;

&lt;p&gt;Pachi: That's really nice. You can share your product with people that didn't know about it because of your native language. That's really nice. So my last question for you...it’s not really a question, but I always like to ask, what is your best advice for people that are very beginners or people that are thinking about starting to code but they're not sure if they should? What's your best advice?&lt;/p&gt;

&lt;p&gt;Arisa: Okay. My best advice for people who are going to start to study programming is that find someone like a mentor who can teach you as well that you really can, not respect, but someone that you can aim to be. Because if you have someone who is like a role model for you, you really can motivate yourself. For example, I had a role model when I started to study programming who was actually my mentor at a school where I was very quickly in for two months and a half. And he was already doing freelance front-end developer jobs. So I was like, okay, there is also an option to work as a freelancer. And that's what I was actually interested in doing. So this gave me the motivation to be a freelance developer, too, and also the way to work. So find someone who you can look up as a role model. &lt;/p&gt;

&lt;p&gt;And the second advice I have is that always when you get stuck, go back to the documentation. Even if the documentation is really difficult to read if you have a role model who you can ask the questions, then it will be a little bit easier, and the way to achieve your goals wouldn't be too hard. So those two advice I would recommend them. Find a mentor who you can look up to as a role model. Go back to the documentation when you get stuck.&lt;/p&gt;

&lt;p&gt;Pachi: Those are some really great tips. Thank you so much.&lt;/p&gt;

&lt;p&gt;Arisa: I hope so, yeah. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: Even if you have different people, they always have some different advice, and that's great because people that are starting really need it. They don't know what's going on. So it's always great to hear from people that are like mentors, especially with different backgrounds.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, I also saw some of the students who were struggling to continue to study just because they couldn't see something around them. Like, in my point of view, they were doing really great. But from their point of view, they can't see others around them, so they believe that, oh God, I'm the worst. I'm not doing great, what I'm doing. &lt;/p&gt;

&lt;p&gt;Pachi: That is very true.&lt;/p&gt;

&lt;p&gt;Arisa: But you just need to have someone to confirm that no, you're doing a great job from my perspective and just keep continuing. Don't get disturbed by the information on Twitter or on the internet. So that's what they need.&lt;/p&gt;

&lt;p&gt;Pachi: That's a really good point, especially because if you're not in college, you want to learn so fast. But if you think about it, people that are in college learn that for four years. So you just rush yourself, and you don't really have to. So thank you so much for coming to talk with me. That was so much fun.&lt;/p&gt;

&lt;p&gt;Arisa: Yeah, I really enjoyed it too. And it's been a really long time since we talked in my podcast, right? [laughs] It's been a couple of months. So I really had fun. &lt;/p&gt;

&lt;p&gt;Pachi: Yes, it was fun. Before you go, can you just tell people where they can find you online?&lt;/p&gt;

&lt;p&gt;Arisa: Oh yeah, sure. That's an important thing. You can find me on Twitter, so my Twitter username is &lt;a href="https://twitter.com/arisa_dev"&gt;@arisa_dev&lt;/a&gt;. My DMs are open. So if you have questions related with &lt;a href="https://www.storyblok.com/home"&gt;Storyblok&lt;/a&gt;, I'm very happy to answer, of course. You also can find me on &lt;a href="https://www.linkedin.com/in/%F0%9F%A5%8B-arisa-fukuzaki-b68b51a8/"&gt;LinkedIn&lt;/a&gt;. Also, if there's some chance, then I will pass over the link to Pachi so she can maybe post it. And I also have &lt;a href="https://arisa-fukuzaki.dev/"&gt;my own website&lt;/a&gt; too so you can check out the talks I talked at the conferences, et cetera.&lt;/p&gt;

&lt;p&gt;Pachi: The links are going to be in the description. And thanks again for chatting with me. That was super fun, especially because I know that it's pretty late there. &lt;/p&gt;

&lt;p&gt;Arisa: Oh no. Don't worry about it. It's fine. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: And thanks, everybody, for listening. This was the &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies Show&lt;/a&gt; for you. And thanks again. Have a great week and see you or hear you later.&lt;/p&gt;

&lt;p&gt;Jonan: Thank you so much for joining us. We really appreciate it. You can find the show notes for this episode along with all of the rest of The Relicans podcasts on &lt;a href="https://therelicans.com"&gt;therelicans.com&lt;/a&gt;. In fact, most anything The Relicans get up to online will be on that site. We'll see you next week. Take care.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DotVVM Advent Calendar 2021</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Wed, 01 Dec 2021 15:23:56 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/dotvvm-advent-calendar-2021-3343</link>
      <guid>https://dev.to/esdanielgomez/dotvvm-advent-calendar-2021-3343</guid>
      <description>&lt;p&gt;Hello everyone! Welcome to &lt;em&gt;DotVVM Advent Calendar 2021&lt;/em&gt;, 25 days with 25 amazing articles to learn about DotVVM and the multiple applications we can carry out. We have an article for each of the advent days with the following general topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic concepts of ASP.NET with DotVVM. &lt;/li&gt;
&lt;li&gt;Controls for web forms. &lt;/li&gt;
&lt;li&gt;Data reports. &lt;/li&gt;
&lt;li&gt;Web pages with SQL and NoSQL databases. &lt;/li&gt;
&lt;li&gt;Deploy DotVVM applications on Azure and Amazon Web Services. &lt;/li&gt;
&lt;li&gt;Construction of applications for real life.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#calendar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Calendar&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In this second edition of the calendar, the general idea is learn from the basics to the most advanced about the wonderful world of web application development with ASP.NET and DotVVM through the contributions generated by the DotVVM community this year.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Day&lt;/th&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Contribution&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 1st&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.dotvvm.com/docs/tutorials/introduction/latest"&gt;Introduction to DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 2nd&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://medium.com/dotvvm/setting-up-for-dotvvm-development-on-linux-macos-and-windows-ddda46a57380"&gt;Setting up for Dotvvm Development on Linux, MacOS and Windows&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 3rd&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/dotvvm-and-asp-net-core-implementing-crud-operations-l2e"&gt;DotVVM and ASP.NET Core: Implementing CRUD operations&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 4th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/working-with-asp-net-core-and-dotvvm-on-visual-studio-code-3h7b"&gt;Working with ASP.NET Core and DotVVM on Visual Studio Code&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 5th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/web-forms-with-dotvvm-controls-6bk"&gt;Web forms with DotVVM controls&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 6th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/form-validation-in-asp-net-dotvvm-7no"&gt;Form validation in ASP.NET &amp;amp; DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 7th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://medium.com/dotvvm/reports-in-dotvvm-with-gridview-checkbox-and-textbox-controls-7f5f53c712b0"&gt;Reports in DotVVM with GridView, CheckBox, and TextBox controls&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 8th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://medium.com/dotvvm/dotvvm-controls-gridview-3b892a8a87f6"&gt;DotVVM Controls : GridView&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 9th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/web-forms-with-dotvvm-business-pack-gl1"&gt;Web forms with DotVVM Business Pack&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 10th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/dotvvm-upload-files-using-fileupload-control-4b85"&gt;DotVVM: upload files using FileUpload control&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 11th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/html-templates-for-repetitive-elements-in-asp-net-dotvvm-1670"&gt;HTML templates for repetitive elements in ASP.NET &amp;amp; DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 12th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/calling-javascript-functions-from-dotvvm-with-js-directive-1ci0"&gt;https://dev.to/esdanielgomez/html-templates-for-repetitive-elements-in-asp-net-dotvvm-1670&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;13&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 13th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/developing-web-applications-with-net-core-dotvvm-and-mongodb-286l"&gt;Developing web applications with ASP.NET Core, DotVVM and MongoDB&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;14&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 14th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/dotvvm-crud-application-with-entity-framework-and-cosmos-db-4oah"&gt;DotVVM CRUD application with Entity Framework and Cosmos DB&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;15&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 15th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/working-with-web-services-through-asp-net-core-and-dotvvm-a-step-by-step-guide-2le"&gt;Working with web services through ASP.NET Core and DotVVM (A step by step guide).&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;16&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 16th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/deploy-dotvvm-and-net-core-web-applications-to-azure-everything-you-need-to-know-3651"&gt;Deploy DotVVM and .NET Core web applications to Azure (Everything you need to know).&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;17&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 17th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/github-actions-azure-continuous-deployment-of-asp-net-core-with-dotvvm-applications-1i3l"&gt;GitHub Actions + Azure: Continuous deployment of ASP.NET Core with DotVVM applications&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;18&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 18th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/working-with-wcf-services-through-asp-net-and-dotvvm-a-step-by-step-guide-34f8"&gt;Working with WCF Services through ASP.NET and DotVVM (A step-by-step guide).&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;19&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 19th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://esdanielgomez.medium.com/net-hot-reload-for-dotvvm-developers-a41274cc6ce9"&gt;.NET Hot Reload for DotVVM Developers&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 20th&lt;/td&gt;
&lt;td&gt;&lt;a href="https://dev.to/dotvvm/deploying-asp-net-core-and-dotvvm-web-applications-to-a-virtual-machine-in-azure-230f"&gt;Deploying ASP.NET Core and DotVVM web applications to a virtual machine in Azure&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;21&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 21st&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/building-a-dashboard-with-asp-net-core-and-dotvvm-349"&gt;Building a Dashboard with ASP.NET Core and DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 22nd&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/dotvvm/deploy-web-applications-with-asp-net-core-and-dotvvm-on-aws-elastic-beanstalk-2m92"&gt;Deploy web applications with ASP.NET Core and DotVVM on AWS Elastic Beanstalk&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;23&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 23rd&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://esdanielgomez.medium.com/deploying-asp-net-dotvvm-web-applications-to-a-linux-virtual-machine-in-azure-8747752a08b4"&gt;Deploying ASP.NET &amp;amp; DotVVM web applications to a Linux virtual machine in Azure&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;24&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 24th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://esdanielgomez.medium.com/sentiment-analysis-in-a-dotvvm-web-application-with-ml-net-4e1239187abb"&gt;Sentiment analysis in a DotVVM web application with ML.NET&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;25&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Dec 25th&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://dev.to/esdanielgomez/guide-to-organizing-and-promoting-events-through-a-web-portal-with-asp-net-5-dotvvm-234c"&gt;Guide to organizing and promoting events through a web portal with ASP.NET &amp;amp; DotVVM&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HBMCmtsPEUShG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HBMCmtsPEUShG/giphy.gif" alt="" width="500" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We hope you enjoy and learn about DotVVM during these 25 days of advent. If you have any questions or would like to receive any feedback, you can write to me on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt; or request information from &lt;a href="//info@dotvvm.com"&gt;info@dotvvm.com&lt;/a&gt;. If you want to share your progress with this amazing experience, you can use the hashtags #DotVVMCommunity #DotVVMAdventCalendar :)&lt;/p&gt;

&lt;p&gt;From now on, ¡Merry Christmas!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Use Promise.all with Async/Await</title>
      <author>Softhunt</author>
      <pubDate>Wed, 01 Dec 2021 15:18:11 +0000</pubDate>
      <link>https://dev.to/softhunt/how-to-use-promiseall-with-asyncawait-4fem</link>
      <guid>https://dev.to/softhunt/how-to-use-promiseall-with-asyncawait-4fem</guid>
      <description>&lt;p&gt;Async functions and the await keyword, both introduced in &lt;a href="https://softhunt.net/es6-syntax-and-feature-overview/"&gt;ECMAScript 2017&lt;/a&gt;, are more recent innovations to the JavaScript language. These features are essentially syntactic sugar on top of promises, making asynchronous programming easier to write and read. They make async code appear more like synchronous code from the past, thus they’re definitely worth understanding.&lt;/p&gt;

&lt;p&gt;To begin, we have the async keyword, which is used to convert a function declaration into an async function. An &lt;a href="https://softhunt.net/es6-syntax-and-feature-overview/"&gt;async function&lt;/a&gt; is one that understands how to anticipate the usage of the await keyword to launch asynchronous functionality.&lt;/p&gt;

&lt;p&gt;When you combine an async function with the await keyword, the benefit of an async function becomes clear. await only works with async functions in standard JavaScript code, but it can also be used with JavaScript modules on its own. Any async promise-based function can have await in front of it to stop your code on that line until the promise is fulfilled, then return the result. Any function that returns a Promise, including web API calls, can be called using &lt;a href="https://softhunt.net/es6-syntax-and-feature-overview/"&gt;await&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s assume I have an API request that retrieves all of the users from a database and takes a certain length of time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// First promise returns an array after a delay
const getUsers = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(
      () =&amp;gt; resolve([{ id: 'ranjeet' }, { id: 'adil' }, { id: 'preet' }]),
      600
    )
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now there’s another request that relies on data that exists throughout the whole user base.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Second promise relies on the result of first promise
const getIdFromUser = (user) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(() =&amp;gt; resolve(user.id), 500)
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s also a third call that changes the second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Third promise relies on the result of the second promise
const capitalizeIds = (id) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(() =&amp;gt; resolve(id.toUpperCase()), 200)
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’m thinking about doing the first call first, then using a &lt;a href="https://softhunt.net/how-to-use-promise-all-with-async-await/"&gt;for…of loop&lt;/a&gt; to perform the other calls that rely on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const runAsyncFunctions = async () =&amp;gt; {
  const users = await getUsers()

  for (let user of users) {
    const userId = await getIdFromUser(user)
    console.log(userId)

    const capitalizedId = await capitalizeIds(userId)
    console.log(capitalizedId)
  }

  console.log(users)
}

runAsyncFunctions()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this will be my &lt;strong&gt;output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ranjeet
RANJEET
adil
ADIL
preet
PREET
(3) [{…}, {…}, {…}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, I may call &lt;a href="https://softhunt.net/how-to-use-promise-all-with-async-await/"&gt;Promise.all()&lt;/a&gt; to execute all of the first, second, and third procedures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const runAsyncFunctions = async () =&amp;gt; {
  const users = await getUsers()

  Promise.all(
    users.map(async (user) =&amp;gt; {
      const userId = await getIdFromUser(user)
      console.log(userId)

      const capitalizedId = await capitalizeIds(userId)
      console.log(capitalizedId)
    })
  )

  console.log(users)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(3) [{…}, {…}, {…}]
ranjeet
ali
preet
RANJEET
ADIL
PREET
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the whole code you can run in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// First promise returns an array after a delay
const getUsers = () =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(
      () =&amp;gt; resolve([{ id: 'ranjeet' }, { id: 'adil' }, { id: 'preet' }]),
      600
    )
  })
}


// Second promise relies on the result of first promise
const getIdFromUser = (user) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(() =&amp;gt; resolve(user.id), 500)
  })
}


// Third promise relies on the result of the second promise
const capitalizeIds = (id) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    return setTimeout(() =&amp;gt; resolve(id.toUpperCase()), 200)
  })
}

const runAsyncFunctions = async () =&amp;gt; {
  const users = await getUsers()

  Promise.all(
    users.map(async (user) =&amp;gt; {
      const userId = await getIdFromUser(user)
      console.log(userId)

      const capitalizedId = await capitalizeIds(userId)
      console.log(capitalizedId)
    })
  )

  console.log(users)
}

runAsyncFunctions()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I write detailed &lt;a href="https://softhunt.net/"&gt;article on my website&lt;/a&gt; click the link to understand more clearly and follow us for more updates&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Rocket Academy Experience</title>
      <author>Jerome Chua</author>
      <pubDate>Wed, 01 Dec 2021 15:09:44 +0000</pubDate>
      <link>https://dev.to/jeromechua/my-rocket-academy-experience-pd1</link>
      <guid>https://dev.to/jeromechua/my-rocket-academy-experience-pd1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#about-myself"&gt;
  &lt;/a&gt;
  About myself
&lt;/h5&gt;

&lt;p&gt;I was previously involved in data science projects &amp;amp; worked with Python and SQL and had close to 2 years of coding experience in Python. I also mostly completed an Udemy web development bootcamp prior.&lt;br&gt;
As of June 2021, I graduated from Rocket Academy's 6-month Bootcamp, which was fruitful &amp;amp; enjoyable. Thereafter, I was a teaching assistant for their 6-weeks Basics course from July to August while applying for jobs. &lt;/p&gt;

&lt;p&gt;And as of August 2021, I managed to receive a few offers and settled down on a software engineering role at a Fintech company.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#researching-swe-bootcamps"&gt;
  &lt;/a&gt;
  Researching SWE bootcamps
&lt;/h1&gt;

&lt;p&gt;My research for a choice bootcamp was primarily in the US, namely: Lambda School, Fullstack Academy, &amp;amp; Hack Reactor. Reason being, I have had acquaintances who did so and doing well in engineering roles. I also reached out to alumni on Reddit &amp;amp; most of them had good to say for the 3 mentioned above. In short I did not choose them because of time difference &amp;amp; cost.&lt;/p&gt;

&lt;p&gt;How did I find out about Rocket Academy in 2020? Very interestingly it was through a sponsorship logo they had on a Shopee Code league. Then, I remembered googling them up, and it resurfaced later down the road.&lt;br&gt;
 &lt;br&gt;
Prior to contacting Rocket Academy, I reached out to a RA alumni who graciously shared on his own bootcamp research, and he himself was certain RA would be a good place for growth. &lt;/p&gt;

&lt;p&gt;What really helped me solidify my decision was the open curriculum they had which signalled a proactive learning style - focused on the student's desire to learn (where I really believe true growth comes from). I contacted Kai soon after and the rest was history.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-journey%C2%A0"&gt;
  &lt;/a&gt;
  The Journey 
&lt;/h1&gt;

&lt;h5&gt;
  &lt;a href="#general-perception-of-my-instructors"&gt;
  &lt;/a&gt;
  General Perception of My Instructors
&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Kai&lt;/strong&gt; - &lt;br&gt;
From the start, Kai has been meticulous in selection of incoming students yet does it in down-to-earth in manner which just by observing one can learn so much. His teaching of complex topics was always clear and I really like that he cares about the quality of projects &amp;amp; pushes students to be accountable on their progress. Kai was pivotal in me getting good interviews as well &amp;amp; keeping on the journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Akira&lt;/strong&gt; - &lt;br&gt;
My main instructor throughout both Basics &amp;amp; Bootcamp, Akira has a knack for being able to sift out the real question behind my questions. Akira is highly gifted in educating. Through his teaching, he has thought me how to learn &amp;amp; even teach myself better. He demonstrated great passion &amp;amp; patience in ensuring students pick up the material well, &amp;amp; has genuine interest for them to grasp the material.&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#rocket-academy-1month%C2%A0basics"&gt;
  &lt;/a&gt;
  Rocket Academy (1-month Basics)
&lt;/h5&gt;

&lt;p&gt;This was a 1 month part-time program, where we had to create 3 projects in total. Focused on JavaScript. The HTML &amp;amp; CSS were present but not vital. Which allows the students to focus on the essentials of coding. &lt;br&gt;
Total of 4 hours a week in-class, where it would be further divided up into 30 minutes of lessons, 60 minutes of pair programming and recaps. It was a solid foundation for us to build on moving into the 6-month full-time bootcamp. &lt;br&gt;
This was also a good time to see if the learning style suited me, and whether I wanted commit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View Coding Basics open source curriculum&lt;/em&gt; &lt;a href="https://basics.rocketacademy.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#rocket-academy-6month-bootcamp"&gt;
  &lt;/a&gt;
  Rocket Academy (6-month Bootcamp)
&lt;/h5&gt;

&lt;p&gt;A total of 5-6 projects were done. Ready to show case to potential employers and enough to be proud of accomplishing. There was also a group project that helped made us very familiar with Git &amp;amp; Github. Amazingly helpful when on the job.&lt;/p&gt;

&lt;p&gt;Technologies used were mainly JavaScript (React, Express, Third-party libraries), PostgreSQL, Heroku, Netlify, AWS. By the end of the 6 months you would be very familiar on creating full-stack web applications.&lt;/p&gt;

&lt;p&gt;Support as usual was great. Both from the instructors and community. All this while also having check-ins on our data structures &amp;amp; algorithm familiarity.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;View Bootcamp open source curriculum&lt;/em&gt; &lt;a href="https://bootcamp.rocketacademy.co/old-course-schedule/full-course-day-schedule"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#rocket-academy-2month-postbootcamp"&gt;
  &lt;/a&gt;
  Rocket Academy (2-month Post-Bootcamp)
&lt;/h5&gt;

&lt;p&gt;I was surprised at the level of support I received from both Kai &amp;amp; Akira. They are genuinely interested in the welfare of their students. Not just for me, I saw this displayed in their approach to each student under their care. &lt;/p&gt;

&lt;p&gt;I have been to other bootcamps before and although post-bootcamp support was sincere it was only a one-time affair. However, at Rocket Academy there were constant check-ins, referrals, advice and encouragement. &lt;br&gt;
On top of that, both of them gave me lots of their personal takes on interviews, work and general life. So it was really more than a 6-month thing. And they were prepared to go all the way.&lt;/p&gt;

&lt;p&gt;I was fortunate to be in Batch 2, because Batch 1 had all found jobs. An alumni Jit Corn, whom I reached out to was extremely helpful as well. And it makes a world of difference to have someone already gone through that journey and giving good advice on hindsight.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With the current support of our Singapore government to become more tech savvy, it is a great time for non-CS or non-engineering degree people having strong interest in building a career in tech to join bootcamps. &lt;br&gt;
I highly commend what Rocket Academy is offering - strong curriculum, dedicated &amp;amp; personal instructors, like-minded &amp;amp; friendly community, and strong post-bootcamp job-search support. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;Have further questions? Please feel free to reach me at &lt;a href="mailto:jerome.chuame@gmail.com"&gt;jerome.chuame@gmail.com&lt;/a&gt; or connect with me on &lt;a href="https://www.linkedin.com/in/jeromechua"&gt;LinkedIn&lt;/a&gt;. You can also read more about Rocket Academy's latest $1.1 million funding on &lt;a href="https://www.forbes.com/sites/davidprosser/2021/08/31/how-rocket-academy-aims-to-solve-the-8-trillion-coding-crisis/"&gt;Forbes&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cherry-Pick Your Teammate's Changes Without Push 'n Pull-ing To Your Repo In PhpStorm</title>
      <author>Sunny</author>
      <pubDate>Wed, 01 Dec 2021 14:49:57 +0000</pubDate>
      <link>https://dev.to/gitlive/cherry-pick-your-teammates-changes-without-push-n-pull-ing-to-your-repo-in-phpstorm-26e9</link>
      <guid>https://dev.to/gitlive/cherry-pick-your-teammates-changes-without-push-n-pull-ing-to-your-repo-in-phpstorm-26e9</guid>
      <description>&lt;p&gt;You asked your teammate for help with a piece of code and they showed you the solution in their editor. Now you need to fetch those changes. Usually, this would mean a series of tedious Git commands for both of you (not to mention that the changes will forever grace your git history), but no longer - GitLive allows you to cherry-pick your teammate's changes straight from their local files without having to push and pull to Git.&lt;/p&gt;

&lt;p&gt;In PhpStorm, open up the team window by clicking on the GitLive icon on the bottom tool window bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phQRMgzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638207847652/QNQpmfrNo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phQRMgzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638207847652/QNQpmfrNo.png" alt="IMG-1.png" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Click the arrow on the left-hand side of the teammate that helped you to see the repositories they have cloned, locate the one they made the changes to and click the arrow beside that too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bx3-Hf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364480687/11cumW1Kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bx3-Hf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364480687/11cumW1Kc.png" alt="IMG-2.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see the list of files changed by your teammate on their branch compared to the main branch. Files with asterisks next to the file icon contain changes made locally by your teammate that have not yet been pushed to the remote repository.&lt;/p&gt;

&lt;p&gt;Since we are only interested in their local changes, click the filter icon at the bottom of the team window to filter to only the unpushed changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zPYxp4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364487050/6dwGmEl82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zPYxp4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364487050/6dwGmEl82.png" alt="IMG-3.png" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can see the single file that contains the solution we want to copy! Clicking on it will open a diff of the changes so we can make sure it contains only the changes we need. Now all we need to do is to right click on the file and select the cherry-pick option to pick the changes. And voilà - no need for any git push- or git pull -ing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPTYVr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638365529802/UOI7mi8G8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPTYVr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638365529802/UOI7mi8G8.png" alt="IMG-4.png" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also perform the cherry pick at the level above if you want to pick all changes from multiple files at once by right-clicking on the repository and selecting the cherry-pick option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUJkb11K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364497951/VDeR8jV6T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUJkb11K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364497951/VDeR8jV6T.png" alt="IMG-5.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't have the GitLive extension installed yet? You can &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;find GitLive here&lt;/a&gt;, and if you want to learn more, check out &lt;a href="https://blog.git.live/gitlive-8-0-Cherry-picking-your-teammates-changes"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/cherrypicking/"&gt;GitLive docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>git</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 4 - Revisiting CSS Animations | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Wed, 01 Dec 2021 14:46:44 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-4-revisiting-css-animations-100daysofcode-4on0</link>
      <guid>https://dev.to/jannatinnaim/day-4-revisiting-css-animations-100daysofcode-4on0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpCAluN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kep4ixdj24xljpt3uhrr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpCAluN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kep4ixdj24xljpt3uhrr.jpg" alt="Coding Motivation Banner" width="880" height="637"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;I did learn more about CSS animations by researching outside sources. There are some issues I do face while writing CSS animations still now. I'll put this on hold for now cause I think I know enough for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;It's the same as yesterday but a little less worse. Still don't understand this &lt;code&gt;bezier-curve&lt;/code&gt; though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'll work on the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design/#responsive-web-design-principles"&gt;Responsive Web Design Principles&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;Things are much harder than when I started. Maybe I'm trying to go too fast, IDK. Let's see how it goes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
