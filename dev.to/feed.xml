<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 growing forum you should join</title>
      <author>NewLinuxHelper</author>
      <pubDate>Thu, 18 Nov 2021 14:16:43 +0000</pubDate>
      <link>https://dev.to/developerbishwas/top-5-growing-forum-you-should-join-1hl0</link>
      <guid>https://dev.to/developerbishwas/top-5-growing-forum-you-should-join-1hl0</guid>
      <description>&lt;p&gt;These are the list of some top 5 growing programming, gamedev, android dev and webdev related forum you must join. These forums may help you to get your answers for bug fixes and related topics.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Codeproject&lt;br&gt;
This forum is kinda popular in web as well. According to alexa rank, it has 1.53 Daily Pageviews per Visitor and 1:50 daily time on site. The number of content, questions and answers is also pretty good. People generally talk about Python, C++ and Ai related stuff here.&lt;br&gt;
Visit here: &lt;a href="https://www.codeproject.com/"&gt;https://www.codeproject.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Webmatrices Forum&lt;br&gt;
A lot of posts of this forum ranks on Google. It really has higher &lt;code&gt;Daily Pageviews per Visitor: 6.1&lt;/code&gt; and &lt;code&gt;daily time on site: 5:52&lt;/code&gt; compared to Codeproject. It also has a decent amount of content in it. Users mostly talk about web/app development, game development and blogging/SEO related stuff here. This forum is also growing really fast.&lt;br&gt;
Suggest you to join this forum if you wanna learn about web development, frameworks, API security, gameDevelopment and blogging/SEO.&lt;br&gt;
Visit here: &lt;a href="https://webmatrices.com/"&gt;https://webmatrices.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Codeguru&lt;br&gt;
This website is genuinely awesome for learning OS-related stuff. It has 1.3 Daily Pageviews per Visitor and 1:26 daily time on site. People discuss C programming, Onion architecture, .NET, vb.net and other OS-related stuff. Joining this forum would be great if you wanna about OS. Although there's a decrement rate in Alexa rank of this forum website, I guess the rate will be changed soon.&lt;br&gt;
Visit here: &lt;a href="https://forums.codeguru.com/"&gt;https://forums.codeguru.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DaniWeb&lt;br&gt;
This website is also somehow related to hardware and OS related stuff. Daily Pageviews per Visitor and daily time on site are 1.3 and 1:34 respectively. Members usually discuss about VB.NET, Computer Hardware, Python and os related stuff.&lt;br&gt;
I suggest you to join this forum if you really wanna dive more into OS, hardware development and C programming.&lt;br&gt;
Visit here: &lt;a href="https://www.daniweb.com/"&gt;https://www.daniweb.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;thecodingforums This forum is the smallest of all mentioned here, but growing really nice. 1.4 Daily Pageviews per Visitor and 0:57 Daily Time on Site is the Alexa report of this site. People here talk about Python GUI, Tkinter, HTML, CSS and Java. I suggest you join this forum if you're really new to the programming world.&lt;br&gt;
Visit here: &lt;a href="https://www.thecodingforums.com/"&gt;https://www.thecodingforums.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;As I mentioned, these are growing forums, you are the one who gonna be the another growth factor of these forums.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Guide on How to Unzip Files in Linux?</title>
      <author>cloudytech147</author>
      <pubDate>Thu, 18 Nov 2021 14:13:43 +0000</pubDate>
      <link>https://dev.to/cloudytech147/guide-on-how-to-unzip-files-in-linux-4oee</link>
      <guid>https://dev.to/cloudytech147/guide-on-how-to-unzip-files-in-linux-4oee</guid>
      <description>&lt;p&gt;it's consistently dangerous when we work with sudo advantages in a Linux machine as you approach all the setup and framework records, and if you mess up with them, your entire framework may crash. So we encourage you to run the underneath referenced orders with absolute attention to detail.&lt;/p&gt;

&lt;p&gt;Additionally, to utilize the unfasten order, it's required to have the unfasten bundle introduced on our Linux machine. You can basically utilize the bundle administrator of any famous Linux circulation you are rushing to introduce the unfasten bundle. Notwithstanding, the vast majority of the Linux appropriations come pre-introduced with this bundle.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ sudo apt-get -y install unzip&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfpkmBLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o95hv3nc6d7d1lk2tjyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfpkmBLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o95hv3nc6d7d1lk2tjyy.png" alt="Linux unzip" width="880" height="199"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using Fedora, CentOS, etc. and you have yum package manager, you can use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ sudo yum install unzip&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-unzip-files-in-linux"&gt;
  &lt;/a&gt;
  How to Unzip Files in Linux?
&lt;/h2&gt;

&lt;p&gt;When we run the unzip command without any options, in the most native form, it simply extracts all the files and directories inside the current directory that you are in.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ unzip archive.zip&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s7_sB3bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xxlcbup22mty340h6fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s7_sB3bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xxlcbup22mty340h6fg.png" alt="unzip archive" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output Suppression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can see that the unzip command enlists the details of the files that it is extracting from the archived file. To avoid printing the details and suppress the output, we can simply use the quiet (-q) option along with the unzip command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ unzip -q archive.zip&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypGXUBEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jm4xxt7f8t50kgfndao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypGXUBEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4jm4xxt7f8t50kgfndao.png" alt="unzip -q archive" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-extract-files-to-a-different-directory-in-linux"&gt;
  &lt;/a&gt;
  How to Extract Files to a Different Directory in Linux?
&lt;/h3&gt;

&lt;p&gt;If you want to extract them to a different directory, you can use the -d option and specify the path to the destination directory. Please note that if you don’t have write access to the destination directory, you can use the sudo command to get the root privileges.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ unzip archive.zip -d ~/Documents&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90NHPfgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqukh6ss19ww537s4b0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90NHPfgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqukh6ss19ww537s4b0y.png" alt="unzip archive.zip -d ~/Documents" width="880" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-extract-a-passwordprotected-file-in-linux"&gt;
  &lt;/a&gt;
  How to Extract a Password-Protected File in Linux?
&lt;/h3&gt;

&lt;p&gt;If you want to unzip a file that is password-protected, you can use the -P option along with the unzip command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ unzip -P &amp;lt;password&amp;gt; &amp;lt;zipped-file&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXKsveSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqf24cdl5o8cutfxdzh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXKsveSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqf24cdl5o8cutfxdzh7.png" alt="unzip -P &amp;lt;password&amp;gt; &amp;lt;zipped-file&amp;gt;" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, typing the password as plain text in the terminal (command line) could be insecure. What you can do is simply extract the zipped file in a normal manner. When it tries to unzip the files and finds a file with a password, it will automatically prompt you to input the password.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
$ unzip archive.zip&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDeSRBE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuui6pej4yx86xf8tpce.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDeSRBE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuui6pej4yx86xf8tpce.png" alt="unzip archive.zip" width="880" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up!
&lt;/h2&gt;

&lt;p&gt;To conclude this detailed and comprehensive article, we discussed how to unzip files in Linux using the unzip command.   &lt;/p&gt;

</description>
      <category>linux</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Animate your Angular App using Motion One</title>
      <author>William Juan</author>
      <pubDate>Thu, 18 Nov 2021 14:07:19 +0000</pubDate>
      <link>https://dev.to/this-is-angular/animate-your-angular-app-using-motion-one-4bg3</link>
      <guid>https://dev.to/this-is-angular/animate-your-angular-app-using-motion-one-4bg3</guid>
      <description>&lt;p&gt;&lt;a href="https://motion.dev/"&gt;Motion One&lt;/a&gt; is a new animation library built on the Web Animations API. If you have used Popmotion or Greensock before, this library's syntax should look very familiar.&lt;/p&gt;

&lt;p&gt;In this blog post, I will show you how to use Motion One in an Angular application. I will walk you through the installation process, create a simple animation, and use Motion One's spring and timeline features.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out a live demo I've created that you can interact with as part of my &lt;a href="https://williamjuan027.github.io/angular-animations-explorer/post/third-party-libraries/motion-one"&gt;Angular Animation Explorer&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h2&gt;

&lt;p&gt;First, we will need to add Motion One's dependency via npm using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; motion
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you run into any typings issue from the library, try adding &lt;code&gt;skipLibCheck: true&lt;/code&gt; to your tsconfig.json.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#basic-animation-using-motion-one"&gt;
  &lt;/a&gt;
  Basic Animation using Motion One
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQxd2cXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogkptixim7hoc8oahjz3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQxd2cXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogkptixim7hoc8oahjz3.gif" alt="motion one default animation" width="345" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To animate an element from your template, you will need to give it an id so you can access them from your Typescript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;#myElement&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then use Angular's &lt;code&gt;ViewChild&lt;/code&gt; decorator to access the element defined above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MotionOneDemoComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have access to your element, you can use Motion One's animation APIs to animate your element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MotionOneDemoComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;animateMyElement&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ease-in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// animation completed&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error happens&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spring-and-glide-animation"&gt;
  &lt;/a&gt;
  Spring and Glide Animation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kY32r3j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t72d8h4pnf5dvboewi4x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kY32r3j1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t72d8h4pnf5dvboewi4x.gif" alt="motion one spring animation" width="345" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Motion One also comes with prebuilt easing such as &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;glide&lt;/code&gt; which, you can use by passing in their respective functions with any additional configurations. The snippet below is how you create a basic spring animation using Motion One:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MotionOneDemoComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;animateMyElement&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// 👈 modify the easing&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// animation completed&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error happens&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#timeline-animations"&gt;
  &lt;/a&gt;
  Timeline Animations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MNKW2_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbog89q4cif8xuhmrdk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MNKW2_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zbog89q4cif8xuhmrdk.gif" alt="motion one timeline animation" width="345" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another cool feature from Motion One is its out-of-the-box support of timeline. You can chain your animations and animate different elements all at once by creating an animations array and passing it to the &lt;code&gt;timeline&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;timeline&lt;/code&gt; function works similarly to Greensock's timeline feature. The code snippet below shows how you chain and sequence a translation of a box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;timeline&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;motion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MotionOneDemoComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myElement&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;animateMyElement&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;finished&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// animation completed&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error happens&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Motion One is a relatively new animation library compared to other animation libraries out there. However, it is feature-rich, performant, and easy to use. This blog post only covers a small percentage of the library's capabilities. I will be exploring more of Motion One's features in the future and write a follow-up blog post covering more advanced uses of this library.&lt;/p&gt;

&lt;p&gt;If you are interested in more content like this or have any questions, let me know in the comments or tweet me at &lt;a href="https://dev.to/williamjuan27"&gt;@williamjuan27&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>animations</category>
      <category>motion</category>
    </item>
    <item>
      <title>What is random.shuffle() method in python? How to use it?</title>
      <author>Vaarun Sinha</author>
      <pubDate>Thu, 18 Nov 2021 13:53:24 +0000</pubDate>
      <link>https://dev.to/vaarun_sinha/what-is-randomshuffle-method-in-python-how-to-use-it-57o5</link>
      <guid>https://dev.to/vaarun_sinha/what-is-randomshuffle-method-in-python-how-to-use-it-57o5</guid>
      <description>&lt;p&gt;In this blog, we will explore the random.shuffle method in python, and implement this method in our password generator project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Let's Get Started!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is the random.shuffle method? &lt;/p&gt;

&lt;p&gt;Basically the random.shuffle methods takes in a list like:&lt;br&gt;
[1, 2, 3, 4, 5, 6, 7, 8, 9] and shuffles it like: 2, 1, 5, 6, 8, 9, 4, 7, 3].&lt;/p&gt;

&lt;p&gt;Run this code to know more:&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@vaarunSinha/Random-Shuffle-Method?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Let's implement this in our own project!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous blog, we had a problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now if we print/generate the password every time ,there is a &lt;br&gt;
predictable format, first numbers then special etc..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So for that first let's convert the password into a list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;spPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;smallPart&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bigPart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;password_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password_str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Done! Simple Right? &lt;/p&gt;

&lt;p&gt;But what if the user forgets the password and wants to access it? we will build that functionality later on! in the next blog which will come in 2 weeks!&lt;/p&gt;

&lt;p&gt;This is the final code for a basic password generator!&lt;/p&gt;


&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@vaarunSinha/Password-Generator-with-secrets-module?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;So stay tuned!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>projects</category>
    </item>
    <item>
      <title>A One Piece of CSS Art!</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 18 Nov 2021 13:49:03 +0000</pubDate>
      <link>https://dev.to/afif/a-one-piece-of-css-art-225l</link>
      <guid>https://dev.to/afif/a-one-piece-of-css-art-225l</guid>
      <description>&lt;p&gt;After my first "draft" of &lt;a href="https://dev.to/afif/rate-my-first-css-drawing-51m5"&gt;Livaï Ackerman&lt;/a&gt;, I am back with another CSS art and this time I am exploring the One Piece universe.&lt;/p&gt;

&lt;p&gt;A CSS-only Monkey D. Luffy&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGrQGXG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time, the result was quite good compared to the last one. I dropped the use of &lt;code&gt;clip-path&lt;/code&gt; and focused on gradients.&lt;/p&gt;

&lt;p&gt;I used only 11 Divs (I can do better but I got lazy ...) and spent around &lt;code&gt;10h&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It's responsive and the browser support is good&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/xxLMXry?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's on twitter if you want to give some likes or share it  👇&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1s405Stj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEeQ8TRWUAY-OiH.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmlYTCXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1384162618290540551/jtuQodsv_normal.png" alt="CSS Challenges profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CSS Challenges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @challengescss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🎨 CSS Art!&lt;br&gt;&lt;br&gt;Let's celebrate the episode N°1000 of &lt;a href="https://twitter.com/hashtag/ONEPIECE"&gt;#ONEPIECE&lt;/a&gt; &lt;br&gt;A CSS-only Monkey D. Luffy !&lt;br&gt;&lt;br&gt;Demo: &lt;a href="https://t.co/wzzEbqbr5w"&gt;codepen.io/t_afif/full/bG…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt;art &lt;a href="https://twitter.com/hashtag/ONEPIECE"&gt;#ONEPIECE&lt;/a&gt;1000LOGS &lt;a href="https://twitter.com/hashtag/OnePiece1000"&gt;#OnePiece1000&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:37 AM - 18 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1461297540909965312" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1461297540909965312" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1461297540909965312" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;See you the next CSS Art. I am preparing something crazy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TGuyen0ilWsmiIAU2z/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TGuyen0ilWsmiIAU2z/giphy.gif" alt="crazy" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Creator: The Profession of an Inspired Generation

</title>
      <author>Ashok Sharma</author>
      <pubDate>Thu, 18 Nov 2021 13:40:47 +0000</pubDate>
      <link>https://dev.to/ashok83/web-creator-the-profession-of-an-inspired-generation-36fo</link>
      <guid>https://dev.to/ashok83/web-creator-the-profession-of-an-inspired-generation-36fo</guid>
      <description>&lt;p&gt;We've all heard of web design and web development, but what about web creation? The term concept of the "Web Creator" is rapidly gaining ground in an era where digital natives are taking over the job market. The umbrella term defines people capable of manipulating and leveraging the web to create unique experiences, tools, and services.&lt;/p&gt;

&lt;p&gt;Elementor, an innovative "web creation" company, was founded to enable the impending explosion of web creation experts entering the job market. Designed to help creators recognize their potential by simplifying and enhancing the website building process, Elementor has been effectively fuelling the web creator revolution for some time now.&lt;/p&gt;

&lt;p&gt;Recently, Elementor's proprietary research discovered that the "web creator" field is currently at a crucial catalyst point. Since the start of the COVID-19 pandemic in 2020, creators have found a voice, purpose, and community in the digital world.&lt;/p&gt;

&lt;p&gt;Indeed, the number of web creators grow by 67% since the pandemic began, and 77% say they expect the environment to continue growing in the next five years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Ultimate Career for Digital Natives?&lt;/strong&gt;&lt;br&gt;
Demand for digitally-focused jobs has increased drastically in recent years. Digital roles topped the list for positions becoming &lt;a href="https://etradeforall.org/news/digital-roles-top-the-list-of-jobs-on-the-rise-in-2021/"&gt;more popular in 2021&lt;/a&gt;. We've begun to realize en masse that the most valuable, future-proof roles, are the ones that can survive in a fully digital landscape.&lt;/p&gt;

&lt;p&gt;The rising popularity of the web creator profession also comes from the fact that younger generations of digitally-savvy professionals are essentially taking over the workforce. Millennials are already the largest generation in the workforce, and by 2025, &lt;a href="https://whattobecome.com/blog/millennials-in-the-workplace/"&gt;75% of the global workforce&lt;/a&gt; will be powered by this group. All the while, Gen Z is beginning to explore professional opportunities and plan a future in the digitally-enhanced workplace.&lt;/p&gt;

&lt;p&gt;Elementor's research found that around 67% web creators today are Gen Z or Millennials, and around 55% of Millennials rely on web creation as a full-time job. This is a massive contrast compared to Baby Boomers, 19% of which claim to be full-time web creators. The shifting generational balance in the workplace is allowing for a future where "building websites" and designing things isn't just a part-time hobby - it's a lucrative, valuable career.&lt;/p&gt;

&lt;p&gt;As Elementor notes, the rise of the web creator role isn't just an insight into what kinds of jobs younger employees are looking for. We're seeing significant demand for people capable of manipulating the web - particularly since the pandemic. 68% of creators experienced a surge in demand since the outbreak of 2020, and 78% say they expect demand to grow in the upcoming year.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Era of the Web Creator is Here&lt;/strong&gt;&lt;br&gt;
Over the last couple of years, we've seen a significant shift in the employment market. The most in-demand jobs of 2021 can all be done remotely, according to &lt;a href="https://www.linkedin.com/business/talent/blog/talent-strategy/most-in-demand-jobs"&gt;LinkedIn's talent report&lt;/a&gt;. What's more, LinkedIn notes that around 150 million new technology jobs will appear within the next five years. This digital revolution means a career change for a lot of people, and new opportunities for natives already exploring the web creator industry.&lt;/p&gt;

&lt;p&gt;As the concept of the "web creation" field continues to gain steam, it offers a rising crowd of new, passionate employees an opportunity to shape the landscape of tomorrow. After all, it's the web creators who will build the landscapes we traverse for everything from grocery shopping to communication with friends in the years to come.&lt;/p&gt;

&lt;p&gt;Perhaps even more significantly, the web creation landscape promises a future where professionals can take true pride in their jobs. Around 80% of millennials say their families are supportive of their career choices today. 78% of web creators are proud to identify themselves with the title.&lt;br&gt;
The web creation landscape is open and diverse. People can come to this carer path from multiple avenues, including design, development, marketing, and more. There are also endless opportunities to expand and grow. The digital landscape makes it easier than ever for those with a creative mindset to continue updating their skills and offering new services.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcoming the Web Creator Vertical&lt;/strong&gt;&lt;br&gt;
Of course, for the future of web creation to be truly successful, the right systems need to be implemented to support, guide, and empower these new professionals. This is something Elementor has begun to explore, with a &lt;a href="https://youtu.be/I9zeIth3h50"&gt;playful video&lt;/a&gt; posted on its YouTube channel intended to kick-start the conversation about the "Web Creator" landscape.&lt;br&gt;
The video explores the potential and skills of the people who run the "web-based" world we all live in today. It examines the unique mindsets and capabilities of web creators, who walk among us, seeing opportunities in the digital world like threads of code in the matrix.&lt;/p&gt;

&lt;p&gt;Along with the video, &lt;a href="https://elementor.com/resources/web-creators-lp/"&gt;Elementor created a new community hub&lt;/a&gt; full of genuine web creator stories to help align, inspire, and support this budding career path. The hub includes templates to design sites like those which appear in the video, as well as interactive features, learning opportunities, and a host of digital goodies.&lt;/p&gt;

&lt;p&gt;There's no denying the web creator landscape is here to stay. As we all continue to spend more of our time, both at work and at home, in the virtual landscape, we'll continue to rely more heavily on the people who know how to build and navigate the space.&lt;/p&gt;

&lt;p&gt;In the new digital era, the future will be made up of two types of people - those who travel through the digital world and those who create it.&lt;br&gt;
image source: &lt;a href="https://youtu.be/I9zeIth3h50"&gt;Elementor’s YouTube channel&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdevelopers</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Useful Tmux Configuration Examples</title>
      <author>Igor Irianto</author>
      <pubDate>Thu, 18 Nov 2021 13:30:50 +0000</pubDate>
      <link>https://dev.to/iggredible/useful-tmux-configuration-examples-k3g</link>
      <guid>https://dev.to/iggredible/useful-tmux-configuration-examples-k3g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuring-your-tmux-to-be-even-more-awesome"&gt;
  &lt;/a&gt;
  Configuring Your Tmux to Be Even More Awesome
&lt;/h2&gt;

&lt;p&gt;This article is part 2 of my tmux series. In the &lt;a href="https://dev.to/iggredible/tmux-tutorial-for-beginners-5c52"&gt;previous article&lt;/a&gt;, you learned how to use tmux: what tmux is, how to manage multiple terminals, and how to use tmux's powerful features. However, in that article, I didn't cover much how to customize tmux. This is what this article is for. Here you'll learn some configurations that I use.&lt;/p&gt;

&lt;p&gt;My hope is that by exposing a list of my personal tmux configurations and my reasoning behind them, you will see a general pattern and understand it enough to make tmux your own.&lt;/p&gt;

&lt;p&gt;Here you will learn useful tmux shortcuts you might not even know exist. Whenever you thinking &lt;em&gt;"Can Tmux can do that?"&lt;/em&gt; when reading this article, the answer is, 90% of the time, &lt;em&gt;"Yes, tmux can do that!"&lt;/em&gt;. No, tmux can't do your chores or make your wildest dreams come true, but tmux probably can make your wildest terminal multiplexing dreams come true :D.&lt;/p&gt;

&lt;p&gt;It is highly recommended that you either read my previous article or are already familiar with how tmux works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tmux-config-file"&gt;
  &lt;/a&gt;
  The Tmux Config File
&lt;/h3&gt;

&lt;p&gt;When you start using tmux, you may think that some of tmux's keys are not intuitive or straight-up uncomfortable to reach. For example, I never understood why tmux uses &lt;code&gt;Ctrl + b&lt;/code&gt; as a prefix. The letter b is positioned at a weird distance from the ctrl button. I also found commands like the split commands &lt;code&gt;Prefix + "&lt;/code&gt; and &lt;code&gt;Prefix + %&lt;/code&gt; are not intuitive. There is nothing about &lt;code&gt;"&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; that are associable to horizontal / vertical splits.&lt;/p&gt;

&lt;p&gt;It would be nice to be able to change some of the default configs into something that are more intuitive &lt;em&gt;to me&lt;/em&gt;, the user. To do this, we need to configure the &lt;em&gt;tmux config file&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;When you start a tmux session, tmux looks for a file named &lt;code&gt;.tmux.conf&lt;/code&gt; in the HOME path &lt;code&gt;~/.tmux.conf&lt;/code&gt; (technically tmux looks for &lt;code&gt;/etc/tmux.conf&lt;/code&gt; first, then &lt;code&gt;~/.tmux.conf&lt;/code&gt;, but the former is best left untouched).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-modify-the-config-file"&gt;
  &lt;/a&gt;
  How to Modify the Config File
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;.tmux.conf&lt;/code&gt; file to tmux is like &lt;code&gt;.zshrc&lt;/code&gt; to Z-Shell and &lt;code&gt;.vimrc&lt;/code&gt; to Vim. It is a path to a file where you enter your own configurations so next time you launch tmux, it executes everything inside that config file. &lt;/p&gt;

&lt;p&gt;So what can you put inside the tmux config file? Anything. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Endless possibility is not always a good thing. I remember the times I was staring at a blank MS Word when having to write a report or a blank Strathmore Paper when having to draw a scene - it can be intimidating having to fill up your config file from a blank slate. When I started using tmux a few years ago, I copied + pasted much of my tmux config from random sites I found from the internet. Now that I'm older and wiser (am I? :D), I have deleted the configs that I don't need. I also make sure that I understood the ones that I keep. I hope that you will be able to start your tmux journey at a better place than I did: understanding what you put into your config file instead of copy-pasting anything that remotely look interesting without knowing what it really does.&lt;/p&gt;

&lt;p&gt;Tmux has a set of commands that you can run from the terminal inside a tmux session. For example, to display a message, you can use tmux's &lt;code&gt;display-message&lt;/code&gt; command. Type this from the terminal inside a tmux session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display-message "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see "Hello my tmux friends" displayed on the bottom of the screen.&lt;/p&gt;

&lt;p&gt;If you find &lt;code&gt;display-message&lt;/code&gt; is too long to type, &lt;code&gt;display&lt;/code&gt; works the same way, plus it is shorter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to display the message on the terminal instead on the status bar, pass it the &lt;code&gt;-p&lt;/code&gt; flag. Try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmux display -p "Hello tmux"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run tmux command from the terminal, you need to precede it with the &lt;code&gt;tmux&lt;/code&gt; command, as you'll see later.&lt;/p&gt;

&lt;p&gt;Another way to run a tmux command is to use the command-line mode. To enter the command-line mode, press &lt;code&gt;Prefix + :&lt;/code&gt; (Vim users might notice striking similarities with Vim's EX mode). In this mode, you can enter any tmux commands without prepending it with &lt;code&gt;tmux&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't already, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + :
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your cursor should now be at the bottom of the tmux window. Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display "Hello my tmux friends"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, with this approach you don't have to type &lt;code&gt;tmux display&lt;/code&gt; anymore. &lt;code&gt;display&lt;/code&gt; is enough. If you look at the status bar (bottom of the screen), you'll see the "Hello my tmux friends" text.&lt;/p&gt;

&lt;p&gt;One advantage of the command-line mode is that you can run any tmux command while having another program running. For example, if you need to run &lt;code&gt;display "hello"&lt;/code&gt; and you currently have Vim open, instead of exiting Vim then typing &lt;code&gt;tmux display "hello"&lt;/code&gt;, with the command-line mode, you can just press &lt;code&gt;Prefix + :&lt;/code&gt; and type &lt;code&gt;display-message "hello"&lt;/code&gt; - without exiting Vim!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-source"&gt;
  &lt;/a&gt;
  Quick Source
&lt;/h3&gt;

&lt;p&gt;When you edit your tmux config file, you will need to reload it for the change to take place. To reload tmux, run &lt;code&gt;tmux source-file ~/.tmux.conf&lt;/code&gt; from the terminal or run &lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt; from tmux's command-line mode. Tmux will re-execute all the codes inside the &lt;code&gt;~/.tmux.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If you're a tinkerer, a shortcut to quickly source your config file can be useful. Add the following inside &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind r source-file ~/.tmux.conf \; display "Reloaded!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The bind command (short for &lt;code&gt;bind-key&lt;/code&gt;) binds the letter r to perform the following (note, this actually binds &lt;code&gt;Prefix + r&lt;/code&gt;, not just the letter r by itself)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Config file source (&lt;code&gt;source-file ~/.tmux.conf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Display message (&lt;code&gt;display "Reloaded!"&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The semi-colon (&lt;code&gt;;&lt;/code&gt;) lets you to sequentially combine multiple tmux commands. It's a great way to bind a single key with multiple commands.&lt;/p&gt;

&lt;p&gt;So each time you make changes to the config file, save the tmux config and run &lt;code&gt;Prefix + r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some configs won't take place even after you reload the config file. Usually these are the UI-related commands. If you don't see your changes after reloading the tmux config, you need to restart the tmux server: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Detach from the session (&lt;code&gt;Prefix + d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Kill the server (&lt;code&gt;tmux kill-server&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Start a new session (&lt;code&gt;tmux new -s MY_SESSION&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, you can also run &lt;code&gt;Prefix + I&lt;/code&gt; (note the I is uppercased) to reload tmux environment. &lt;/p&gt;

&lt;p&gt;In short, if running &lt;code&gt;Prefix + r&lt;/code&gt; doesn't do anything, try running &lt;code&gt;Prefix + I&lt;/code&gt; or restart your server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting
&lt;/h3&gt;

&lt;p&gt;Tmux uses &lt;code&gt;#&lt;/code&gt; to comment out any subsequent texts. Commented lines won't be executed by tmux config. I like to use comments to explain an obscure code. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add binding to reload tmux.conf for fast, iterative development
bind r source-file ~/.tmux.conf \; display "Reloaded!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also put a comment at the end of the same line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind r source-file ~/.tmux.conf \; display "Reloaded!" # quick reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-configurations"&gt;
  &lt;/a&gt;
  Useful Configurations
&lt;/h2&gt;

&lt;p&gt;Here are some configurations that I find useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-default-prefix"&gt;
  &lt;/a&gt;
  Changing the Default Prefix
&lt;/h3&gt;

&lt;p&gt;As said before, I am not a big fan of tmux's default &lt;code&gt;Ctrl + b&lt;/code&gt; default prefix. Let's change it with something more intuitive. If you look around on the internet, some popular tmux prefix alternatives are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Space&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + s&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + u&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Backticks &lt;/li&gt;
&lt;li&gt;Tab + key variation instead of &lt;code&gt;Ctrl + KEY&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Other?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally use &lt;code&gt;Ctrl + Space&lt;/code&gt; mainly because my Vim leader key is the Space key. To change my prefix to &lt;code&gt;Ctrl + Space&lt;/code&gt;, I add this in the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind C-Space
set -g prefix C-Space
bind C-Space send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What each does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unbind&lt;/code&gt; unbinds whatever functionality &lt;code&gt;C-space&lt;/code&gt; had (if any).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;set -g prefix&lt;/code&gt; line informs tmux that the prefix will now be &lt;code&gt;C-Space&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind ... send-prefix&lt;/code&gt; allows &lt;code&gt;Ctrl + Space&lt;/code&gt; to perform the &lt;code&gt;send-prefix&lt;/code&gt; command. The send-prefix command sends the prefix keystroke to a window. This is useful with nested tmux sessions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to use whatever key combination you feel most comfortable with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mouse-usage-in-tmux"&gt;
  &lt;/a&gt;
  Mouse Usage in Tmux
&lt;/h3&gt;

&lt;p&gt;Although I am not a big fan of using mouse extensively, there were times when I needed to use it. Tmux's default configs are not mouse friendly. Let's change that. To enable scrolling, clicking, and resizing, add the following inside the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g mouse on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to see more, check out the &lt;code&gt;MOUSE SUPPORT&lt;/code&gt; section inside &lt;code&gt;man tmux&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#increase-history"&gt;
  &lt;/a&gt;
  Increase History
&lt;/h3&gt;

&lt;p&gt;By default, tmux keeps the previous 2000 lines of window history (you can scroll up 2000 lines above your current terminal line). Sometimes 2000 isn't enough. To increase it to 5000 lines, add this inside the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g history-limit 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I never needed more than 5000, so I never went higher. Of course, you can make it higher if you need to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jump-to-a-marked-pane"&gt;
  &lt;/a&gt;
  Jump to a Marked Pane
&lt;/h3&gt;

&lt;p&gt;If you're a Vim user, you may be aware that you can create a mark with &lt;code&gt;m&lt;/code&gt; + identifier. You can then return to that mark at any time. You can do the same with tmux.&lt;/p&gt;

&lt;p&gt;To mark the pane you are currently on, press:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + m
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Vim, to return to a marked location, you use a single-quote or a backtick. Since we already have the single-quote shortcut taken (recall that &lt;code&gt;Prefix + '&lt;/code&gt; is used to jump to a window number by index), let's use backtick. To  jump to a mark using a backtick, add this config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind \` switch-client -t'{marked}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try this: mark a pane, then go to a different window - observe that you can quickly return to the previous pane with Prefix + backtick. I find it useful to mark the pane I always find myself returning into, usually the pane where the main codebase is.&lt;/p&gt;

&lt;p&gt;To remove a mark, press &lt;code&gt;Prefix + m&lt;/code&gt; again while you're on that marked pane or just press &lt;code&gt;Prefix + M&lt;/code&gt; anywhere.&lt;/p&gt;

&lt;p&gt;One final re*mark* (pun intended), in Vim you can have up to 26 marks. In tmux, you can only have one, so choose wisely which pane to mark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numbering-windows-and-panes"&gt;
  &lt;/a&gt;
  Numbering Windows and Panes
&lt;/h3&gt;

&lt;p&gt;Recall that tmux windows and panes are 0-based. I find them not really intuitive. I prefer to have my first windows and panes to start with 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g base-index 1
setw -g pane-base-index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Suppose that I have 4 windows in a session - call them window A, B, C, and D. If I close the third window (window C), now I end up with window A in position 1, B in position 2, and &lt;em&gt;D in position 4&lt;/em&gt;. I have a gap in position 3. This behavior causes a friction in my workflow because I have to keep in the back of my mind that position 3 window is vacant. Wouldn't it be better to automatically move window D to the third position after deleting window C? Heck yea! To get this behavior, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g renumber-windows on
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I delete window C in position 3, window D automatically moves to position 3. The next window I create will become window 4. Little things like these free up your mental real estate. The fewer things I have to remember in my head, the more I can use my head to think about the important things! (Like, what's for lunch? :D)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-intuitive-split-commands"&gt;
  &lt;/a&gt;
  More Intuitive Split Commands
&lt;/h3&gt;

&lt;p&gt;I think tmux's default split pane shortcuts, &lt;code&gt;Prefix + %&lt;/code&gt; and &lt;code&gt;Prefix + "&lt;/code&gt; are not intuitive. &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are better symbols to represent vertical and horizontal splits. Why not use them instead?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind | split-window -hc "#{pane_current_path}"
bind - split-window -vc "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I press &lt;code&gt;Prefix + |&lt;/code&gt;, tmux does a vertical split  and when I press &lt;code&gt;Prefix + -&lt;/code&gt;, tmux does a horizontal split.&lt;/p&gt;

&lt;p&gt;Btw, I find that having to press the Shift key to do &lt;code&gt;Prefix + |&lt;/code&gt; is mildly inconvenient. So I have these mappings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key "|" split-window -h -c "#{pane_current_path}"
bind-key "\\" split-window -fh -c "#{pane_current_path}"

bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "_" split-window -fv -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This allows me to press either the uppercased version of that key to get the vertical / horizontal splits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swapping-windows"&gt;
  &lt;/a&gt;
  Swapping Windows
&lt;/h3&gt;

&lt;p&gt;Sometimes I need to swap windows around. Maybe I want to have the &lt;code&gt;docker-compose&lt;/code&gt; to window 1 from window 2. I think &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; make good, intuitive keys to swap the current window to the right and left, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -r "&amp;lt;" swap-window -d -t -1
bind -r "&amp;gt;" swap-window -d -t +1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I want to move the current window to the right, I can do &lt;code&gt;Prefix + &amp;gt;&lt;/code&gt;. To move the current window to the left, do &lt;code&gt;Prefix + &amp;lt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keeping-current-path"&gt;
  &lt;/a&gt;
  Keeping Current Path
&lt;/h3&gt;

&lt;p&gt;When you create a new window (&lt;code&gt;Prefix + c&lt;/code&gt;), tmux resets the path. Wait, what are you talking about? Suppose when I start a new tmux session, I was on the HOME path (&lt;code&gt;~/&lt;/code&gt;). After coding and doing stuff, I end up in &lt;code&gt;~/some/directory/&lt;/code&gt;. Now I need to create a new window. When I run &lt;code&gt;Prefix + c&lt;/code&gt;, the new window will be back on the HOME directory, not whatever path I was on. Tmux automatically resets the path in the new window you just created to the path you were on when you started the current session. 80% of the time, when I create a new window, I want to stay in whatever path I am on. To preserve the path in the new window, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind c new-window -c "#{pane_current_path}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when I create a new window, the new window will also be on &lt;code&gt;~/some/directory/&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggling-windows-and-sessions"&gt;
  &lt;/a&gt;
  Toggling Windows and Sessions
&lt;/h3&gt;

&lt;p&gt;I find myself needing to toggle between the current and previous window a lot. To quickly toggle between windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind Space last-window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I can type &lt;code&gt;Prefix + Space&lt;/code&gt; to toggle between the current and previous windows.&lt;/p&gt;

&lt;p&gt;Recall that &lt;code&gt;Prefix + Space&lt;/code&gt; was originally the toggle layout tmux shortcut. If you use this, you'll lose that layout toggle shortcut. I personally never use the layout toggle functionality at all. I also choose Space because my Prefix is &lt;code&gt;Ctrl + Space&lt;/code&gt;, making it intuitive. If you use a different prefix, you may consider a different shortcut key.&lt;/p&gt;

&lt;p&gt;Moreover, sometimes I also need to toggle between the current and the previous session. Add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key C-Space switch-client -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, I chose &lt;code&gt;Ctrl + Space&lt;/code&gt; because &lt;code&gt;Ctrl + Space&lt;/code&gt; is also my Prefix. So it's like pressing Prefix twice. If you use a different prefix, consider using that prefix key(s) instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing"&gt;
  &lt;/a&gt;
  Resizing
&lt;/h3&gt;

&lt;p&gt;Recall that we can run &lt;code&gt;tmux resize-pane -D/U/L/R&lt;/code&gt; commands to resize the panes. Unfortunately, tmux doesn't come with the shortcuts to quickly resize panes. No worries, let's just add our own! The shortcuts that I use are &lt;code&gt;Prefix + Ctrl-h/j/k/l&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -r C-j resize-pane -D 15
bind -r C-k resize-pane -U 15
bind -r C-h resize-pane -L 15
bind -r C-l resize-pane -R 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 15 above is tmux cell unit. I find 15 unit increments to be perfect. Not too little, not too much. I also find &lt;code&gt;Ctrl-h/j/k/l&lt;/code&gt; to be good keys to do this because it resembles Vim navigation. &lt;/p&gt;

&lt;p&gt;Other resizing alternatives are the arrow keys, Ctrl + arrow keys, or &lt;code&gt;&amp;lt;/&amp;gt;/-/+&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-and-joining-panes"&gt;
  &lt;/a&gt;
  Breaking and Joining Panes
&lt;/h3&gt;

&lt;p&gt;Maybe you are on a window with multiple panes and you want to break the current pane out into its own window. To do this, tmux has a built-in break-pane command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Prefix + !
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conversely, what if you want to join a pane from another window into a different window? There is no native keybinding, but tmux has a &lt;code&gt;join-pane&lt;/code&gt; command. Add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind j choose-window 'join-pane -h -s "%%"'
bind J choose-window 'join-pane -s "%%"'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press &lt;code&gt;Prefix + j&lt;/code&gt; to choose which window you want to join. &lt;/p&gt;

&lt;p&gt;Btw notice that I have two shortcuts: &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;J&lt;/code&gt;. The former joins a window horizontally and the latter vertically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-pane-creation"&gt;
  &lt;/a&gt;
  Quick Pane Creation
&lt;/h3&gt;

&lt;p&gt;I don't know when inspiration strikes. But when it strikes, I want to have a quick access to my notes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key h split-window -h "vim ~/scratch/notes.md"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now whenever I thought of a billion-dollar startup idea, I can just press &lt;code&gt;Prefix + h&lt;/code&gt; to open a new horizontal split window and launch &lt;code&gt;~/scratch/notes.md&lt;/code&gt; in Vim. Who says that learning tmux doesn't pay? :D&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-keybinding"&gt;
  &lt;/a&gt;
  General Key-Binding
&lt;/h3&gt;

&lt;p&gt;All the tmux shortcuts you've seen so far have used the Prefix key. What if you need to create a shortcut that does not use Prefix? What if, instead of &lt;code&gt;Prefix + j&lt;/code&gt;, you want to use &lt;code&gt;Ctrl + j&lt;/code&gt; to join windows?&lt;/p&gt;

&lt;p&gt;You can do this bypassing the &lt;code&gt;-n&lt;/code&gt; option to the &lt;code&gt;bind&lt;/code&gt; command in your config file. Instead of &lt;code&gt;bind j YOUR_COMMAND&lt;/code&gt;, you use &lt;code&gt;bind -n C-j YOUR_COMMAND&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind -n C-j choose-window 'join-pane -h -s "%%"'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it will use &lt;code&gt;Ctrl + j&lt;/code&gt; Instead of &lt;code&gt;Prefix + j&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-config-file-path"&gt;
  &lt;/a&gt;
  Changing the Config File Path
&lt;/h3&gt;

&lt;p&gt;By default your config path is in the HOME directory (in my case, it is &lt;code&gt;~/.tmux.conf&lt;/code&gt;). But you can always put it somewhere else. If you run tmux with &lt;code&gt;tmux -f /path/to/your/new/tmux.conf&lt;/code&gt;, it will use whatever path you point instead of the default HOME path.&lt;/p&gt;

&lt;p&gt;Personally, I keep my config path in HOME (&lt;code&gt;~/.tmux.conf&lt;/code&gt;) but it is symlinked to my dotfiles repo (&lt;code&gt;~/Projects/dotfiles/tmux.conf&lt;/code&gt;). With this, can I can edit either &lt;code&gt;~/Projects/dotfiles/tmux.conf&lt;/code&gt; or &lt;code&gt;~/.tmux.conf&lt;/code&gt; and these two files will remain in sync. I like to keep my config files portable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tpm"&gt;
  &lt;/a&gt;
  TPM
&lt;/h2&gt;

&lt;p&gt;At some point, you'll need to use a more complicated setup instead of one-liner configurations. TPM is a good tool for that. It stands for Tmux Plugin Manager. It allows you to create and install tmux plugins easily.&lt;/p&gt;

&lt;p&gt;In the following section, I will briefly go over TPM. If you want to learn more, feel free to check the &lt;a href="https://github.com/tmux-plugins/tpm"&gt;repository&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-tpm"&gt;
  &lt;/a&gt;
  Installing TPM
&lt;/h3&gt;

&lt;p&gt;To install TPM, you need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Git clone TPM to a HOME directory (&lt;code&gt;~/.tmux/plugins/tpm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add any plugins with &lt;code&gt;set -g @plugin 'YOUR/PLUGIN'&lt;/code&gt; in your tmux config file. Don't forget to precede it with &lt;code&gt;set -g @plugin 'tmux-plugins/tpm'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Point the &lt;code&gt;run&lt;/code&gt; command to the TPM repository location (by default it points to &lt;code&gt;~/.tmux/tpm/tpm&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more, check out the &lt;a href="https://github.com/tmux-plugins/tpm#installation"&gt;TPM installation page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-tpm-package"&gt;
  &lt;/a&gt;
  Adding a TPM package
&lt;/h3&gt;

&lt;p&gt;Let's go over how to install a package. I really like the &lt;a href="https://github.com/dracula/tmux"&gt;dracula theme&lt;/a&gt; plugin. To install it, I have the following in my tmux config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'dracula/tmux'

run '~/.tmux/plugins/tpm/tpm'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recall that the first plugin in the list, &lt;code&gt;tmux-plugins/tpm&lt;/code&gt;, is required as part of TPM. The next one on the list, &lt;code&gt;dracula/tmux&lt;/code&gt;, is the plugin that you're trying to install. Finally, the &lt;code&gt;run '~/.tmux/plugins/tpm/tpm&lt;/code&gt;, is also a required code to make TPM work.&lt;/p&gt;

&lt;p&gt;You can add as many plugins as you want. Once you added the list of plugins, save and source tmux, then run &lt;code&gt;Prefix + I&lt;/code&gt; (reload environment). The dracula plugin should activate. Cool!&lt;/p&gt;

&lt;p&gt;For a curated list of plugins, checkout &lt;a href="https://github.com/rothgar/awesome-tmux#plugins"&gt;awesome-tmux plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tmux-and-vim"&gt;
  &lt;/a&gt;
  Tmux and Vim
&lt;/h2&gt;

&lt;p&gt;I use tmux and Vim a lot. They are like rice and eggs, or croissant and chocolate, or peanut butter and nutella sandwich - you get the point: they work great together.&lt;/p&gt;

&lt;p&gt;There are some configurations that you can add to make them work together even better. It's like adding butter to your rice and eggs, or sesame seeds to your croissant and chocolate, or cheese to your peanut butter and nutella sandwich.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-vimtmux-navigation"&gt;
  &lt;/a&gt;
  Easy Vim-Tmux Navigation
&lt;/h3&gt;

&lt;p&gt;One of the biggest improvement you can do to vim and tmux is to synchronize their navigations. In my regular workflow, I normally have multiple Vim windows and tmux panes on my screen.&lt;/p&gt;

&lt;p&gt;In vim, you move around different windows with &lt;code&gt;Ctrl + w + h/j/k/l&lt;/code&gt;. In tmux, you move around different panes with &lt;code&gt;Prefix + left/down/up/right&lt;/code&gt;. Wouldn't it be great if you can move your cursor between vim windows and tmux panes using the same key sets?&lt;/p&gt;

&lt;p&gt;Heck yea, that sure would make live a LOT simpler! If this is possible, you don't have to pause to think if you're in vim or tmux - should I press &lt;code&gt;Ctrl + w&lt;/code&gt; or &lt;code&gt;Prefix&lt;/code&gt;? Using only one set of keys eliminates navigation context-switching. The less context-switching you need to do, the more flow you have. The more flow you have, the more brain power you can allocate to actually accomplish the important tasks - like making a tasty rice and egg dish for lunch - I mean, to code!&lt;/p&gt;

&lt;p&gt;To accomplish this, you need to install the &lt;a href="https://github.com/christoomey/vim-tmux-navigator"&gt;vim-tmux-navigator&lt;/a&gt; plugin for vim and tmux. Technically this is just one plugin, but it needs to be installed in &lt;em&gt;both&lt;/em&gt; vim and tmux.&lt;/p&gt;

&lt;p&gt;By the way, this article assumes that you have a sufficient understanding of vim plugins. This article is about tmux, not vim. If you want to learn more, check out my other guide, &lt;a href="https://github.com/iggredible/Learn-Vim"&gt;learn-vim&lt;/a&gt;. It's the best guide you'll ever read on vim (no bias there :D)&lt;/p&gt;

&lt;p&gt;Install the &lt;code&gt;vim-tmux-navigator&lt;/code&gt; plugin in vim. I personally use the &lt;a href="https://github.com/junegunn/vim-plug"&gt;vim-plug&lt;/a&gt; plugin manager, so I only need to add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Plug 'christoomey/vim-tmux-navigator'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and source the vimrc, run &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;code&gt;vim-tmux-navigator&lt;/code&gt; plugin in tmux. Add this in the tmux config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g @plugin 'christoomey/vim-tmux-navigator'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and source the tmux config file. Don't forget to reload tmux (&lt;code&gt;Prefix + I&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let's try it! Inside a tmux session, split your window into multiple panes. Inside one pane, open up Vim and split it into multiple windows. Behold! You can navigate to next vim window / tmux pane with &lt;code&gt;Ctrl + h/j/k/l&lt;/code&gt;. What!! Isn't that cool? Mind-blown. My life has never been the same ever since I discovered this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tmuxinator"&gt;
  &lt;/a&gt;
  Tmuxinator
&lt;/h2&gt;

&lt;p&gt;Once you use tmux for a while, you will realize that most of the time, you perform the same sequence of commands. &lt;/p&gt;

&lt;p&gt;For example, for work, I almost always:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new session called &lt;code&gt;work&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Rename this window &lt;code&gt;servers&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Launch the rails server&lt;/li&gt;
&lt;li&gt;Launch the sidekiq server on a split pane&lt;/li&gt;
&lt;li&gt;Launch redis on a split pane&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;codes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Launch Vim&lt;/li&gt;
&lt;li&gt;Horizontal split adjusted at about 30% for random terminal needs&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;consoles&lt;/code&gt; for rails / mysql console&lt;/li&gt;
&lt;li&gt;Create a new window named &lt;code&gt;notes&lt;/code&gt; to take notes / scratchpads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do this almost every single day. Let's automate it. One way to do it is to use tmux templating library like &lt;a href="https://github.com/tmuxinator/tmuxinator"&gt;tmuxinator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tmuxinator lets you to set up your tmux sessions/windows/panes to run specific commands. Set them up once. Reuse any time.&lt;/p&gt;

&lt;p&gt;To get started, install tmuxinator. If you have mac, you can just run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install tmuxinator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more info, check out tmuxinator's &lt;a href="https://github.com/tmuxinator/tmuxinator#installation"&gt;installation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of available tmuxinator commands, but the following three are the most important ones, in my opinion (they are also the only ones I remember :D). You can create, edit, and launch a tmuxinator template with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tmuxinator new PROJECT
tmuxinator edit PROJECT
tmunxinator PROJECT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the way, I find that the name &lt;code&gt;tmunxinator&lt;/code&gt; too long to type. I prefer shorter name, like &lt;code&gt;mux&lt;/code&gt;. In my zshrc (or bashrc if you use bash), add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias mux=tmuxinator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I can just run &lt;code&gt;mux new PROJECT&lt;/code&gt; instead of &lt;code&gt;tmuxinator new PROJECT&lt;/code&gt;. Let's call our project "work". Run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux new work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tmuxinator will create a new file &lt;code&gt;work.yml&lt;/code&gt; somewhere inside the config directory. Inside you can configure your settings for your tmux work project. Mine looks something like this (it comes by default):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/

# lots of stuff...

windows:
  - editor:
      layout: main-vertical
      panes:
        - vim
        - guard
  - server: bundle exec rails s
  - logs: tail -f log/development.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;name:&lt;/code&gt; attribute is the project name and &lt;code&gt;root&lt;/code&gt; is the root directory. &lt;code&gt;windows&lt;/code&gt; represents tmux windows for this project - in this case we have three windows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;editor&lt;/code&gt; window using the &lt;code&gt;main-vertical&lt;/code&gt; layout. It is split into two with two panes, one running &lt;code&gt;vim&lt;/code&gt; and another running &lt;code&gt;guard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;server&lt;/code&gt; that runs &lt;code&gt;bundle exec rails s&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;logs&lt;/code&gt; to display development log.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's edit this template to fit my workflow. First, I'm going to update my root to be my work project. Change them to your work directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root: ~/Work/is/awesome/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now each time I run &lt;code&gt;mux work&lt;/code&gt;, it will automatically use &lt;code&gt;~/Work/is/awesome/&lt;/code&gt; as the root path in my session.&lt;/p&gt;

&lt;p&gt;Next, modify our windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/Work/is/awesome/

windows:
  - server_stuff:
      layout: tiled
      panes:
        - bundle exec rails s
        - bundle exec sidekiq
        - redis-server
  - code_stuff: vim
  - misc_stuff:
  - notes:
    - cd ~/Dropbox
    - vim

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have four windows defined:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first, &lt;code&gt;server_stuff&lt;/code&gt;, has the layout set to be &lt;code&gt;tiled&lt;/code&gt;. It consists of three panes. The first pane runs the rails server, the second sidekiq server, and the third runs redis server.&lt;/li&gt;
&lt;li&gt;The second, &lt;code&gt;code_stuff&lt;/code&gt;, runs vim.&lt;/li&gt;
&lt;li&gt;The third window is just an empty window for whatever comes up (rails console, mysql console, ssh, git workflow, etc)&lt;/li&gt;
&lt;li&gt;The fourth window is my scratchpad. I have it pointed to my Dropbox directory where I store my notes. I take my notes with vim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you're done, save the yml file. If I ever want to edit it, I just need to run &lt;code&gt;mux edit work&lt;/code&gt;. To launch this tmuxinator project, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux work
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! It's convenient and easy to set up. This can save you 5-10 minutes everyday. &lt;/p&gt;

&lt;p&gt;If you need to close it, since all this is just a tmux session, all you need to do is detach from the &lt;code&gt;work&lt;/code&gt; session (&lt;code&gt;Prefix + d&lt;/code&gt;), then kill it with &lt;code&gt;tmux kill-session -t work&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the way, earlier I said that for my codebase window, I like having a window with horizontal split at about 70/30, with the top part running Vim while the bottom one for random terminal work. One way is to use tmux's &lt;code&gt;main-horizontal&lt;/code&gt; layout, but it would be nice if I could fine-tune the length of the top and bottom panes.&lt;/p&gt;

&lt;p&gt;There is no clean way to do it, but you can use this trick:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, create a tmux window and split them horizontally.&lt;/li&gt;
&lt;li&gt;Second, you adjust the height to about 70/30 (using &lt;code&gt;resize-pane&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Third, when you're happy with the proportions, run &lt;code&gt;tmux list-windows&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;It will print something like this: &lt;code&gt;test* (2 panes) [278x70] [layout edac,278x70,0,0[278x50,0,0,1,278x19,0,51,15]] @1 (active)&lt;/code&gt;. Your numbers will probably be different from mine.&lt;/li&gt;
&lt;li&gt;The ambiguous-looking number is the tmux's window proportions. Copy that. Inside tmuxinator, paste that number in the &lt;code&gt;layout&lt;/code&gt; section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My tmuxinator &lt;code&gt;work.yml&lt;/code&gt; file now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /Users/iggy/.config/tmuxinator/work.yml

name: work
root: ~/Work/is/awesome/

windows:
  - server_stuff:
      layout: tiled
      panes:
        - bundle exec rails s
        - bundle exec sidekiq
        - redis-server
  - code_stuff:
      layout: edac,278x70,0,0[278x50,0,0,1,278x19,0,51,15]  
      panes:
        - vim
        - echo "empty"
  - misc_stuff:
  - notes:
    - cd ~/Dropbox
    - vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I run the &lt;code&gt;mux work&lt;/code&gt; command, the second window will be split horizontally with the same proportion as what we had before. Cool!&lt;/p&gt;

&lt;p&gt;By the way, tmuxinator is not the only tmux manager in town. There are two more alternatives that I know of (there could be more):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tmux-python/tmuxp"&gt;tmuxp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/remi/teamocil"&gt;teamocil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your turn now - think of your work / personal project workflows, then create your own tmuxinator / tmuxp / teamocil / etc template!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this chapter you learned the different examples how you can modify your tmux config. They are by no means exhaustive. I've probably only gone through the basic configs. There are many more combinations you can implement to make your tmux more powerful.&lt;/p&gt;

&lt;p&gt;I hope that through reading this article, you'll learn enough to understand how to modify tmux on your own. Tmux is a simple, powerful tool. Used correctly, it allows you to organize your workflows and reduce context-switching, allowing you to focus more on the current task at hand.&lt;/p&gt;

&lt;p&gt;This is by no means the last tmux articles I'll write. I'm currently working on not just one, but two more articles, so stay tuned! Meanwhile, continue to practice and configure tmux to make it truly your own. Until next time!&lt;/p&gt;

</description>
      <category>tmux</category>
      <category>vim</category>
      <category>configuration</category>
      <category>tmuxinator</category>
    </item>
    <item>
      <title>Code Review</title>
      <author>Minsu Kim</author>
      <pubDate>Thu, 18 Nov 2021 13:29:45 +0000</pubDate>
      <link>https://dev.to/mkim219/code-review-2ao2</link>
      <guid>https://dev.to/mkim219/code-review-2ao2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In the previous weeks, I had change to contribute internal Seneca opensource projects: &lt;a href="https://dev.to/mkim219/fix-the-bug-on-telescope-2d4i"&gt;fix the bug on Telescope&lt;/a&gt; and &lt;a href="https://dev.to/mkim219/ipc144-course-curriculum-renewal-5d0p"&gt;IPC144 course note renewal&lt;/a&gt;. The last piece of task is code reviewing on other student's PR. The code reviews that I have done are &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/80"&gt;PR1&lt;/a&gt; and &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/76"&gt;PR2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pr1-code-review"&gt;
  &lt;/a&gt;
  PR1 Code Review
&lt;/h3&gt;

&lt;p&gt;The first code review is "ASCII Collating Sequence image converted into Table" which is very similar with my IPC144 course note renewal. The reason why I had code review on this PR is that I want to know and compare how he resolved the issue. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lz3MNcXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duds1i6khujx87nsv4ug.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz3MNcXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duds1i6khujx87nsv4ug.PNG" alt="PR1" width="808" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is Markdown code what he has done. He has smart idea to add one more column to improve readability on Docusarus. However, not only improving readability but also it helps developers to edit code for maintenance. He used &lt;code&gt;prettier&lt;/code&gt; to align all the content in right position. I had fixed my code after I have reviewed his code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pr2-code-review"&gt;
  &lt;/a&gt;
  PR2 Code Review
&lt;/h3&gt;

&lt;p&gt;The second code review is "Audit and Fix arrays.md". The comment that I left for the code review is that there is a picture for explaining the concept of array. However, the picture did not have proper &lt;code&gt;alt&lt;/code&gt; tag in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVfjBjPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxnanbqwavlnn4q5kgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVfjBjPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhxnanbqwavlnn4q5kgx.png" alt="PR2" width="880" height="75"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;alt&lt;/code&gt; tag provides context of image that display and inform for search engine crawler which is important for SEO. Also &lt;code&gt;alt&lt;/code&gt; tag is important for accessibility perceptive &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The code review is not only helpful for the author of the code but also it is helpful to remind me the right knowledge and provide me better idea to solve the issue. &lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Bubble sort Algorithm</title>
      <author>Mysterio</author>
      <pubDate>Thu, 18 Nov 2021 13:27:37 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/bubble-sort-algorithm-1o5e</link>
      <guid>https://dev.to/shubhamtiwari909/bubble-sort-algorithm-1o5e</guid>
      <description>&lt;p&gt;Hello Guys today i am going to show you how to apply bubble sort algorithm. The Language i have used is javascript and for the frontend end or GUI part HTML AND CSS and The React JS Framework.&lt;/p&gt;

&lt;p&gt;Lets get started...&lt;/p&gt;

&lt;p&gt;What is Bubble Sort Algorithm?&lt;br&gt;
Bubble sort algorithm is an algorithm that sorts the array by comparing two adjacent elements and swaps them if they are not in the intended order. Here order can be anything like increasing order or decreasing order.&lt;/p&gt;

&lt;p&gt;How Bubble-sort works&lt;br&gt;
We have an unsorted array arr = [ 1, 4, 2, 5, -2, 3 ] the task is to sort the array using bubble sort. &lt;/p&gt;

&lt;p&gt;Bubble sort compares the element from index 0 and if the 0th index is less than 1st index then the values get swapped and if the 0th index is less than the 1st index then nothing happens.&lt;/p&gt;

&lt;p&gt;then, the 1st index compares to the 2nd index then the 2nd index compares to the 3rd, and so on…&lt;/p&gt;

&lt;p&gt;Syntax&lt;br&gt;
BubbleSort(array){&lt;br&gt;
  for i -&amp;gt; 0 to arrayLength &lt;br&gt;
     for j -&amp;gt; 0 to (arrayLength - i - 1)&lt;br&gt;
      if arr[j] &amp;gt; arr[j + 1]&lt;br&gt;
        swap(arr[j], arr[j + 1])&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Implementation -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Creating the bblSort function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bblSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

      &lt;span class="c1"&gt;// Last i elements are already in place&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="c1"&gt;// Checking if the item at present iteration&lt;/span&gt;
        &lt;span class="c1"&gt;// is greater than the next iteration&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;

        &lt;span class="c1"&gt;// If the condition is true then swap them&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="c1"&gt;// This is our unsorted array&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;234&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;235&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;547&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UnSortedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//function calling&lt;/span&gt;
  &lt;span class="nx"&gt;bblSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//this is our sorted array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SortedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main-div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-dark text-light text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display-3 text-light my-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Unsorted&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;UnSortedArray&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-primary text-light text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;display-3 text-light my-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sorted&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="nx"&gt;Using&lt;/span&gt; &lt;span class="nx"&gt;Bubble&lt;/span&gt; &lt;span class="nx"&gt;Sort&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SortedArray&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Part -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main-div&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1qkWXx4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9p1r7rojxs4x5703z61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1qkWXx4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9p1r7rojxs4x5703z61.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE -  I have used bootstrap in the code so please install it either through npm or using cdn.&lt;/p&gt;

&lt;p&gt;THANK YOU FOR READING THIS POST IF YOU FIND ANY MISTAKE OR WANTS TO GIVE ANY SUGGESTION PLEASE MENTION IT IN THE COMMENT SECTION.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Authentication token management</title>
      <author>Kevin Pennekamp</author>
      <pubDate>Thu, 18 Nov 2021 13:24:43 +0000</pubDate>
      <link>https://dev.to/crinklesio/authentication-token-management-2669</link>
      <guid>https://dev.to/crinklesio/authentication-token-management-2669</guid>
      <description>&lt;p&gt;In several large projects (React-based SPA applications) managing authentication tokens is a challenge. These solutions implement an OAuth flow using access and refresh tokens. Many of these types of applications live in an enterprise or business setting. This means users are often logged in to the application a lot longer than the access token is valid. The access token needs to be refreshed in the background.&lt;/p&gt;

&lt;p&gt;But that is not the only issue. Many pages need more than one &lt;code&gt;GET&lt;/code&gt; request when it is loaded. This adds an extra dimension to the issue. A dashboard where each card requires different data is a good example. Many solutions cannot handle such a situation and result in many refresh attempts that happen at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-flow-of-the-solution"&gt;
  &lt;/a&gt;
  The flow of the solution
&lt;/h2&gt;

&lt;p&gt;Solving this issue in complex applications can be done in several ways. A brute-force way is to refresh the access token on each outgoing request, or page navigation. But this means that every user action requires at least one more network request. This would decrease the performance of the application, and thus the user experience.&lt;/p&gt;

&lt;p&gt;A second solution would refresh when you hit a &lt;code&gt;401&lt;/code&gt; HTTP error (unauthorized) from the server. This would create a hit on user experience only once within the expiration timeframe. But this hit can be significant. First, we have to do a request to the server. We get back a &lt;code&gt;401&lt;/code&gt;. Now we have to refresh the tokens and execute the requests again. Three requests instead of one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6x3FdrrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lorrcmmmzsainws61du.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6x3FdrrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lorrcmmmzsainws61du.png" alt="Image description" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My proposed solution is to proactively refresh the token. We know when it expires. Before each request, we can check if the token is expired. When this happens, we can send refresh the token before we execute the original request. The user experience is less decreased compared to the previous solution. But this solution still has an issue. It cannot handle many requests at the same time that need refreshing. By introducing a &lt;code&gt;queue&lt;/code&gt; and an extra check, this can be solved. All requests that need to be sent out while the application is refreshing are put in the queue. Once refreshing is complete, the queue is emptied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;The core of this solution is replacing the standard fetch requests, with a &lt;code&gt;fetchOrRefresh&lt;/code&gt; request. An example implementation can be seen in the code block below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;refreshing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;expiresOn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-11-01T00:00:00.000Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchOrRefresh&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expiresOn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refreshing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refreshing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refreshing&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;refreshing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example also uses a simple object to store information, but a central application state that can be used is a better solution. Lastly, the refresh function itself is not filled in. When you solve two 'blanks' you are able to use this code as middleware in libraries like &lt;code&gt;axios&lt;/code&gt; and &lt;code&gt;redux&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Large applications used in a business setting often see long user sessions. This requires us to ensure authentication tokens are refreshed in the background. But, complex applications have many requests happening at the same time. Many solutions cannot handle this and result in many refresh attempts. The flow and code example introduced in this post can help you overcome these issues without impacting the user experience.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>architecture</category>
      <category>react</category>
    </item>
    <item>
      <title>A CMS with a new take - SilverStripe first impression</title>
      <author>Anders Björkland</author>
      <pubDate>Thu, 18 Nov 2021 13:14:14 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/a-cms-with-a-new-take-silverstripe-first-impression-46e4</link>
      <guid>https://dev.to/andersbjorkland/a-cms-with-a-new-take-silverstripe-first-impression-46e4</guid>
      <description>&lt;p&gt;Today we are going to expand our knowledge of PHP frameworks and CMSs. While I usually write about Symfony, today we are going to talk about SilverStripe. Compared to the likes of Laravel and Symfony, this is a small framework when we count stars on GitHub. The &lt;a href="https://github.com/silverstripe/silverstripe-framework"&gt;silverstrip-framework repository&lt;/a&gt; has 700+ stars. When compared as a CMS against Bolt (which I've written about previously), SilverStripe sees a bit more of stardom. Bolt sits on 300+ stars for the current iteration. &lt;/p&gt;

&lt;p&gt;So what is SilverStripe? It's main purpose of existence is its CMS component. The framework part of it has some likeness to Laravel, but appears in a first impression to exist to be a part of a content management system (&lt;em&gt;perhaps I may explore just the framework side of it later on&lt;/em&gt;). The SilverStripe CMS markets itself as "the intuitive content management system and flexible framework loved by editors and developers alike". It's big words to live up to, so let's see how it fairs as we set out to build a Book Review platform (&lt;em&gt;because the Dune movie has gotten me to read the Frank Herbert novel and I like to record that experience&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;We will be building a fairly basic Book Review platform. In this first iteration we will be doing most things manually. Entering the books and authors will be all manual, and we will only have the one user (the default admin user). In a follow up to this article we will be adding a registering page, and using the power of Symfony's HttpClient to make requests to the Google Books API - so we won't have to do that manually anymore.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want the code rather than follow along, this project can be found at &lt;a href="https://github.com/andersbjorkland/devto-book-reviewers"&gt;the Github repository devto-book-reviewers&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-ingredients-of-a-book-review-platform"&gt;
  &lt;/a&gt;
  The ingredients of a Book Review Platform
&lt;/h2&gt;

&lt;p&gt;The features we are going to want is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewing books

&lt;ul&gt;
&lt;li&gt;Add book&lt;/li&gt;
&lt;li&gt;Add author&lt;/li&gt;
&lt;li&gt;Add review&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Viewing reviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we are going to need a few things for this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP 8.0 (you may run with PHP 7.3&amp;gt; and it will mostly work)&lt;/li&gt;
&lt;li&gt;MySQL 5.7&lt;/li&gt;
&lt;li&gt;SilverStripe 5.0&lt;/li&gt;
&lt;li&gt;And some Composer dependencies we are going to attach as we move along&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Oh, there are also a few PHP extensions we need.
  &lt;ul&gt;
&lt;li&gt;ctype&lt;/li&gt;
&lt;li&gt;dom&lt;/li&gt;
&lt;li&gt;fileinfo&lt;/li&gt;
&lt;li&gt;hash&lt;/li&gt;
&lt;li&gt;intl&lt;/li&gt;
&lt;li&gt;mbstring&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;simplexml&lt;/li&gt;
&lt;li&gt;tokenizer&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;li&gt;gd &lt;em&gt;or&lt;/em&gt; imagick&lt;/li&gt;
&lt;li&gt;mysqli &lt;em&gt;or&lt;/em&gt; pdo
&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;Let's build this!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-silverstripe"&gt;
  &lt;/a&gt;
  Installing Silverstripe
&lt;/h2&gt;

&lt;p&gt;Run the following with Composer in your favourite terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer create-project silverstripe/installer book-reviewers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you have PHP8 this command may fail. It's a dev-dependency in the regular recipe causing this. What you will do then is to modify composer.json by removing the following lines:  &lt;/p&gt;


&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nl"&gt;"require-dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"sminnee/phpunit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^5.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
       &lt;/span&gt;&lt;span class="nl"&gt;"sminnee/phpunit-mock-objects"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.4.5"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We will not be using PHPUnit or Mock Objects for this project, so it's safe to disregard these dependencies this time.&lt;br&gt;
You may now go ahead and install SilverStripe. From within the project directory, run the following:&lt;/p&gt;


&lt;pre class="highlight shell"&gt;&lt;code&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;After the installation is done, there are a few configurations needed. We are going to set up a database and an admin-user. I'll be using docker-compose for the database. First off, let's create a &lt;code&gt;.env&lt;/code&gt;-file in the project-root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# DB credentials
SS_DATABASE_CLASS="MySQLDatabase"
SS_DATABASE_SERVER="localhost"
SS_DATABASE_USERNAME="user"
SS_DATABASE_PASSWORD="password"
SS_DATABASE_NAME="silverstripe"

# Admin user
SS_DEFAULT_ADMIN_USERNAME="admin"
SS_DEFAULT_ADMIN_PASSWORD="password"

# WARNING: in a live environment, change this to "live" instead of dev
SS_ENVIRONMENT_TYPE="dev"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-dockercompose-for-the-database"&gt;
  &lt;/a&gt;
  Setting up docker-compose for the database
&lt;/h3&gt;

&lt;p&gt;This part of the project requires &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; - available for Mac and Windows alike. If you're on Linux there exists the &lt;a href="https://hub.docker.com/search?offering=community&amp;amp;operating_system=linux&amp;amp;q=&amp;amp;type=edition"&gt;Docker Engine&lt;/a&gt; for it, and &lt;a href="https://docs.docker.com/compose/install/"&gt;Docker Compose&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now, let's create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file, also in the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.4'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mariadb:10&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3306:3306&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_PASSWORD}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_PASSWORD}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_USERNAME}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${SS_DATABASE_NAME}&lt;/span&gt;
      &lt;span class="na"&gt;MYSQL_INITDB_SKIP_TZINFO&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose will use some of the environment variables from the .env file to configure the database.&lt;/p&gt;

&lt;p&gt;With docker-compose.yml configured, we can launch it from the terminal with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#matter-of-namespace"&gt;
  &lt;/a&gt;
  Matter of namespace
&lt;/h3&gt;

&lt;p&gt;By default, SilverStripe uses local namespaces. My preference is &lt;a href=""&gt;PSR-4&lt;/a&gt;, so we will add the following to the &lt;code&gt;composer.json&lt;/code&gt; file in the project root (right after the &lt;code&gt;"extra"&lt;/code&gt;-key is what I did):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"autoload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"psr-4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"App\\"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app/src/"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#launching-silverstripe"&gt;
  &lt;/a&gt;
  Launching SilverStripe
&lt;/h3&gt;

&lt;p&gt;Now that the database is up and running, we can launch SilverStripe. I like to launch all my virtual servers with the Symfony CLI tool. An alternative to this is launching with the built in virtual server that comes with PHP. Whichever way you launch it, the first time loading the SilverStripe site will take a while as it builds the data schema and cache. You may need to configure php.ini setting &lt;code&gt;max_execution_time&lt;/code&gt; to a higher value&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#symfony-cli-server"&gt;
  &lt;/a&gt;
  Symfony CLI Server
&lt;/h4&gt;

&lt;p&gt;To launch the Symfony CLI server, in the project root run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;symfony serve &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, this will launch the server on port 8000, so you can access it at &lt;a href="https://127.0.0.1:8000/"&gt;https://127.0.0.1:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#php-builtin-server"&gt;
  &lt;/a&gt;
  PHP Built-in Server
&lt;/h4&gt;

&lt;p&gt;To launch the built-in server, move into the &lt;code&gt;public&lt;/code&gt; folder and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php &lt;span class="nt"&gt;-S&lt;/span&gt; localhost:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may now visit the site at &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modeling-the-book-review-platform"&gt;
  &lt;/a&gt;
  Modeling the Book Review Platform
&lt;/h2&gt;

&lt;p&gt;Models represent the data in the database, in an object oriented way. In SilverStripe, models are similar to models in Laravel. This means that we are not having entities and repositories as we would with a Symfony application. Instead, models define both the data and a way to interact with the data. Our models will extend a &lt;code&gt;DataObject&lt;/code&gt;-class which will provide us with the basic functionality.&lt;/p&gt;

&lt;p&gt;As we are going to build a Book Review platform, we will need to model the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Book&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;ISBN&lt;/li&gt;
&lt;li&gt;Description&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Author&lt;/em&gt; (Many-to-Many relationship)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Review&lt;/em&gt; (One-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Author&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GivenName&lt;/li&gt;
&lt;li&gt;AdditionalName&lt;/li&gt;
&lt;li&gt;FamilyName&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Book&lt;/em&gt; (Many-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Review&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rating&lt;/li&gt;
&lt;li&gt;Review&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Member&lt;/em&gt; (Many-to-One relationship) - a member is how users are designated in SilverStripe&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Book&lt;/em&gt; (One-to-Many relationship)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few things are going to be handled automatically for us, such as ID-generation and timestamps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are using Object relational mapping (ORM) to map the data to the database. This means that we are using the SilverStripe DataObjects to represent the data, but underneath the hood, we are using a database to store the data in a couple of tables. When there are relationships of different kinds, this means that a table will store a key that links to another table. So, for example, a book can have many authors, and an author can have many books. These relationships are stored in a table with keys for each different author and book.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many-to-Many; each object can have many other objects, and each other object can have many other objects. Our case is a book can have many authors, and an author in turn can have many other books. &lt;a href="https://en.wikipedia.org/wiki/Many-to-many_(data_model)"&gt;Many-to-many on Wikipedia&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Many-to-One; each object can have only one other object. The other object have many of this object. Our case is a review can have only one user, and a user can have many reviews. &lt;a href="https://en.wikipedia.org/wiki/One-to-many_(data_model)"&gt;This is the reversed side of One-to-many, read about it on Wikipedia&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;One-to-Many; each object can have many other objects, and each other object can have only one other object. Our case is a book can have many reviews, and a review can have only one book. &lt;a href="https://en.wikipedia.org/wiki/One-to-many_(data_model)"&gt;One-to-many on Wikipedia&lt;/a&gt; 
PS. I didn't mean for this to becomea lecture in relational databases, it's just a happy coincidence! 💡&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#lets-go-modeling"&gt;
  &lt;/a&gt;
  Let's go Modeling!
&lt;/h3&gt;

&lt;p&gt;Let's start by creating a Book model. We will extend the &lt;code&gt;DataObject&lt;/code&gt;-class, and add properties that we want to store in the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#book-model"&gt;
  &lt;/a&gt;
  Book Model
&lt;/h4&gt;

&lt;p&gt;Create the file &lt;code&gt;./app/src/Model/Book.php&lt;/code&gt; which has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Book"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'ISBN'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Description'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Reviews'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$many_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Authors'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's describe what we've got here. First, we specify what we want the table to be called in the database that will store our books.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;private static $table_name = "Book";&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Then, we specify the properties that we want to store in this database table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'ISBN'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Description'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's left to describe is the relationships. We have a many-to-many relationship with authors, and a one-to-many relationship with reviews. We therefore have specify that a book can have many reviews with the &lt;code&gt;$has_many&lt;/code&gt;-property. We also have a many-to-many relationship with authors, which we will specify with the &lt;code&gt;$many_many&lt;/code&gt;-property.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#author-model"&gt;
  &lt;/a&gt;
  Author Model
&lt;/h4&gt;

&lt;p&gt;The Author model will be our way of describing an author, as well as its relation to books. We will se the opposite side of a many-to-many relation, and a couple of new nifty features of SilverStripe. Create the file &lt;code&gt;./app/src/Model/Author.php&lt;/code&gt; which has the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Author"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'AdditionalName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar(255)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$belongs_many_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Books'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;GivenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;FamilyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="cd"&gt;/**
     * @return string
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$familyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getSchema&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fieldSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fieldSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$familyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$familyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$givenName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$familyName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again we see &lt;code&gt;private static $db&lt;/code&gt; where we define the author's properties. We also see that we have a many-to-many relationship with books, but this time we define it with &lt;code&gt;private static $belongs_many_many&lt;/code&gt;. The "belongs" here signifies that we probably will be interacting with books more often than authors, such as we create a book and attach a particular author to it.&lt;/p&gt;

&lt;p&gt;The we have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'GivenName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'FamilyName'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;$summary_fields&lt;/code&gt;-property is used to define ehich fields are searchable as well as which will be used when presenting this model in a list on the CMS. We have specified that we want to show the author's given name and family name.&lt;/p&gt;

&lt;p&gt;Next up we are using a neat function that controls what values are permissable or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;GivenName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GivenName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;FamilyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FamilyName is required'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;validate()&lt;/code&gt; function we are checking that we get any truthy values for &lt;code&gt;GivenName&lt;/code&gt; and &lt;code&gt;FamilyName&lt;/code&gt;. We allow &lt;code&gt;AdditionalName&lt;/code&gt; to be empty.&lt;/p&gt;

&lt;p&gt;Another function we get to see in our Author model is &lt;code&gt;getTitle()&lt;/code&gt;. This function is used to get a simple and readable name for models in the CMS. By default, this function would try to return a 'Name' or 'Title' field, failing that, it will return the ID of the model. As we have neither 'Name' or 'Title' we are instructing the CMS to use 'GivenName' and 'FamilyName' instead.&lt;/p&gt;

&lt;p&gt;This is all for the Author model, now let's move on to the Review model.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#review-model"&gt;
  &lt;/a&gt;
  Review Model
&lt;/h4&gt;

&lt;p&gt;We have one model left to describe. It's our Review model. We will again specify a table-name and fields for our model. This time we will also see our first opposite-side of a many-to-one relationship. There are also some nice features we are using, so let's see what we get with this. Create the file &lt;code&gt;./app/src/Model/Review.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\ORM\DataObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Security\Member&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Security\Security&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;DataObject&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$table_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Review"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Varchar'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Rating'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Int'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Review'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Text'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$owns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$summary_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Rating must be between 1 and 5'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Only you may be the reviewer of a book that YOU review.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We again see the use of &lt;code&gt;$table_name&lt;/code&gt; and &lt;code&gt;$db&lt;/code&gt; to define the fields of our model. What's new for us in this model is &lt;code&gt;$has_one&lt;/code&gt; and &lt;code&gt;$owns&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$has_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$owns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'Book'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'Member'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;$has_one&lt;/code&gt; indicates that each Review has either a one-to-one or many-to-one relationship with each entry into its array. As we have specified in the Book model that it has a one-to-many relationship with the Review model, we know that there can be many reviews for each book. We also have a one-to-one relationship with the Member model, which means that each review is associated with a particular member. We have not specified for the Member model that it has a one-to-many relationship with the Review model, and we don't have to! We are using &lt;code&gt;$owns&lt;/code&gt; to specify that the Review model owns the relationship with the Member model. The same doesn't go for the Book model, as we have specified that it has a one-to-many relationship with the Review model, we have to have the reflected side of that relationship represented there. The reason we have &lt;code&gt;'Book'&lt;/code&gt; in the &lt;code&gt;$owns&lt;/code&gt; array is because we want to be able to control the relationship with these from within the Review model.&lt;/p&gt;

&lt;p&gt;Next up we see the use of a new function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nc"&gt;Member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Security&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getCurrentUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;populateDefaults&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is used to populate the default values for the Review model. We are accessing the &lt;code&gt;Member&lt;/code&gt; field and set it to the current logged in member. We also have to call the parent function to ensure that the default values are populated correctly.&lt;/p&gt;

&lt;p&gt;Next up we again see the use of the &lt;code&gt;validate()&lt;/code&gt; function where we check that the &lt;code&gt;Rating&lt;/code&gt; is between 1 and 5, and that the &lt;code&gt;Member&lt;/code&gt; is the current logged in member (if someone were to try anything different than the default).&lt;/p&gt;

&lt;p&gt;We have now set up all the models we need: Book, Author and Review. What we are going to do next is to setup a way to allow users to create new books and authors. We will do this by creating a new tab in the CMS, called "Review", where we can administrate authors, books and reviews. The way to do that is creating a class that will extend SilverStripe's &lt;code&gt;ModelAdmin&lt;/code&gt; class. We will see this next!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#administrating-our-models-with-modeladmin"&gt;
  &lt;/a&gt;
  Administrating our models with ModelAdmin
&lt;/h2&gt;

&lt;p&gt;What we are going to do now is creating an interface for our users to create all that is needed for reviewing a book. That is, we need the user to be able to create authors and books, and then be able to create reviews for those books. So here's what we will do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new folder in the &lt;code&gt;./app/src/&lt;/code&gt; directory called &lt;code&gt;Admin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a new file in the &lt;code&gt;./app/src/Admin/&lt;/code&gt; directory called &lt;code&gt;ReviewAdmin.php&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The file &lt;code&gt;./app/src/Admin/ReviewAdmin.php&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Admin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Book&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Model\Review&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;SilverStripe\Admin\ModelAdmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewAdmin&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;ModelAdmin&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$managed_models&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$url_segment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'reviews'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$menu_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Reviews'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$menu_icon_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'font-icon-book'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review what we are doing here. We are creating a new class called &lt;code&gt;ReviewAdmin&lt;/code&gt; that extends the &lt;code&gt;ModelAdmin&lt;/code&gt; class. We are telling the CMS that this class will manage the &lt;code&gt;Author&lt;/code&gt;, &lt;code&gt;Book&lt;/code&gt; and &lt;code&gt;Review&lt;/code&gt; models. We are also telling the CMS that this class will be available in the CMS under the tab called "Reviews", this tab will use an icon called &lt;code&gt;font-icon-book&lt;/code&gt;. This is quite powerful, as this is all we need to be able to start reviewing books.&lt;/p&gt;

&lt;p&gt;We have now set up our CMS for reviewing books. Let's update it to handle our models. We do this by visiting &lt;code&gt;127.0.0.1:8000/dev/build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-review"&gt;
  &lt;/a&gt;
  Let's Review
&lt;/h2&gt;

&lt;p&gt;We have set up our models and a way to administrate them in the CMS. Let's go reviewing a book! Go to &lt;code&gt;https://127.0.0.1:8000/admin&lt;/code&gt; and click on the tab called "Reviews". Start by clicking the tab for Author and start creating an author of a book you like to review (&lt;em&gt;Frank Herbert&lt;/em&gt;), then click the tab for books and create the book (&lt;em&gt;Dune&lt;/em&gt;). We are now setup for creating a Review. So here's how that looks like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create an Author&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3WqrNmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpjddzwety7azsnnf7uf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3WqrNmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpjddzwety7azsnnf7uf.gif" alt="Create an author" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Book&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek4vFAfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvdhubb0tvd5ifzjm1en.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ek4vFAfQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvdhubb0tvd5ifzjm1en.gif" alt="Create a book" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Review&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9stzDnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0ce7pgwcgh0n2yp4pu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9stzDnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr0ce7pgwcgh0n2yp4pu.gif" alt="Create a review" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this article, but there is room left for improvements. We would like a page for viewing all the reviews on the frontend, and we would like to be able to just review whichever book we want without creating a new entity for each. Those improvements will be left for another day. Please feel free to comment below and let me know what you think.&lt;/p&gt;

</description>
      <category>php</category>
      <category>silverstripe</category>
    </item>
    <item>
      <title>Why Has React Js Become So Popular Among Specialists?</title>
      <author>Hitesh Chauhan</author>
      <pubDate>Thu, 18 Nov 2021 13:08:29 +0000</pubDate>
      <link>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</link>
      <guid>https://dev.to/hiteshtbi/why-has-react-js-become-so-popular-among-specialists-3ni7</guid>
      <description>&lt;p&gt;React Js is a popular open-source JavaScript library that allows you to create stunning web apps with little effort and coding. React Js' main goal is to create engaging User Interfaces (UI) while also increasing the speed of apps.   A Facebook giant of social media has discovered the  React Js programming language for the developer to make the tasks easy. Furthermore, React Js can use Node to render on the server. Developers can also use React Native to create native apps. So, to develop your web application, get in touch with the React Js web development company who will help you in the growth of your business.&lt;/p&gt;

&lt;p&gt;The flexibility of the React Js comes from the fact that it uses single components, allowing the developer to break down complex UI components into smaller pieces. React Js is honored to be affiliated with top-tier companies such as Yahoo, BBC, Instagram, Netflix, PayPal, and many more. Perhaps to build similar web applications for your brand, you will need to &lt;a href="https://www.brihaspatitech.com/hire-react-js-developer"&gt;hire React js developer&lt;/a&gt; who is expertise in the specific industry.&lt;/p&gt;

&lt;h3&gt;Boon of React Js for the Web Development Process&lt;/h3&gt;

&lt;p&gt;According to the statistics, the United States is the most prevalent use of React js followed by other developed countries like Russia, China, the United Kingdom, and Japan. It depicts that most people are using React Js for their websites. React Js is a feasible option for professionals who are trying to find a simple programming language beyond Angular.  &lt;/p&gt;

&lt;p&gt;When the specialists were working with the other frameworks, they were obliged to do a lot of sophisticated coding when creating individual comments. React Js has fixed a lot of this problem, thanks to Facebook. The developers also have the option of reusing the code that speeds up the project execution. However, we have mentioned the traits of the React Js.&lt;/p&gt;

&lt;h3&gt;Easier to make adaptive Web applications with React Js&lt;/h3&gt;

&lt;p&gt;With the help of the React js web development company, you can get your dynamic online application. In fact, we know that it is awkward to develop an app with HTML strings and a difficult task that necessitates extensive coding. So, with React Js the problem is solved. React Js uses JSX syntax that further allows HTML quotes and HTML tag syntax to render the subcomponents. Moreover, it allows the mixing of the various components into a single time variable file.&lt;/p&gt;

&lt;h3&gt;Professionals can reuse the components&lt;/h3&gt;

&lt;p&gt;Reusing the components is a significant asset for web application development developers. The developer can repurpose the elements used to create other applications with the same functionality. Otherwise, you can hire react js developer to build an application with all the functionalities. It will not only save the efforts but also the time consumption to complete the project.&lt;/p&gt;

&lt;p&gt;However, the react js involves less coding so, there are fewer chances of getting errors. Furthermore, it will enhance the speed of the application and will get more customer retention.&lt;/p&gt;

&lt;h3&gt;Easy to learn&lt;/h3&gt;

&lt;p&gt;With the inception of the React Js, it is definitely a plus point for the developers. If you are new to this field and want to learn about the development process, then we think React Js is the one that is very easy to grasp as compared to the other frameworks. Once you start using the React Js, you will become familiar with the features and easily develop web applications. Otherwise, you can approach React Js web development company to get your web application developed in the ReactJs framework.&lt;/p&gt;

&lt;p&gt;However, it is not full-featured but, it is an open-source javascript script library with which you can easily execute every task. With the help of reactjs, you can easily build a high-responsive web application in a short period.&lt;/p&gt;

&lt;h3&gt;Growth of Community&lt;/h3&gt;

&lt;p&gt;Over time, the community of React js has grown widely and making it easier for novice developers to find a library for any task. The developer does not have to build on their own. Moreover, if you want to develop apps with React js and find problems, You can get extended support from Facebook.&lt;/p&gt;

&lt;h3&gt;Use of Practical Tools&lt;/h3&gt;

&lt;p&gt;Although, react js has earned a great reputation for having a useful collection of tools that makes the job of the developers easier. However, you will find React developer tools as a chrome developer add-on. You can easily examine the reactive component hierarchies along with the components of the present state and props.&lt;/p&gt;

&lt;h3&gt;Wind-Up&lt;/h3&gt;

&lt;p&gt;React Js has become so popular that it allows developers to create extremely engaging web apps and user interfaces in a short period. Also, it enables the specialist to reuse the components and build SPA with less coding. Hence, you can contact &lt;a href="https://www.brihaspatitech.com/react-js-development-company"&gt;React js web development company&lt;/a&gt; to create large-scale web apps. By collaborating with a leading agency, you can hire Reactjs developers to establish your full-featured web application at a very cost-effective price.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>discuss</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
