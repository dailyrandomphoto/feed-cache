<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>11 Git Command I Use Everyday</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:24:18 +0000</pubDate>
      <link>https://dev.to/zainsaiff/11-git-command-i-use-everyday-38a5</link>
      <guid>https://dev.to/zainsaiff/11-git-command-i-use-everyday-38a5</guid>
      <description>&lt;p&gt;When I started my career, I was always afraid of losing my code changes. Sometimes, I would copy the code to text files just to be sure that I won't miss something.&lt;/p&gt;
&lt;p&gt;That's not a great practice. If you know how to use git properly, you won't have these doubts.&lt;/p&gt;
&lt;p&gt;Git has everything you need to make you safe. And much more.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/11-git-commands-i-use-every-day/"&gt;11 Git Command i use Everyday&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Material Dashboard - Full-stack Version</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 10 Aug 2021 17:21:12 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-material-dashboard-full-stack-version-3i8f</link>
      <guid>https://dev.to/sm0ke/react-material-dashboard-full-stack-version-3i8f</guid>
      <description>&lt;p&gt;Hello coders, &lt;/p&gt;

&lt;p&gt;This article presents the &lt;strong&gt;Full-stack&lt;/strong&gt; version of &lt;strong&gt;&lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;React Material Dashboard&lt;/a&gt;&lt;/strong&gt;, a premium design crafted by Creative-Tim now usable with multiple API Backend Servers: Node JS, Flask, Django. The UI comes with pre-configured JWT authentication powered by a &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/api-unified-definition"&gt;Unified API Interface&lt;/a&gt; that makes this product compliant with more than one backend: Node JS, Flask, Django (FASTapi and Laravel coming soon).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;Full-stack React Material PRO&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fullstack-react-material-dashboard.appseed-srv1.com/"&gt;Full-stack React Material PRO&lt;/a&gt; - product page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpwMqtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twotn95m9i6291vrxu6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpwMqtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twotn95m9i6291vrxu6q.jpg" alt="Full-stack React Material Dashboard - The widgets page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  Product Features
&lt;/h2&gt;

&lt;p&gt;The product aims to help developers skip over the basics and start faster a new full-stack product already enhanced with authentication, a pixel-perfect UI powered by production-ready backends. The fact that makes this full-stack product unique is the JSON-API compliance over multiple servers: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;Node JS API&lt;/a&gt;: Typescript, Flexible persistence (SQLite, Mongo), TypeORM, Validation &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/django"&gt;Django API&lt;/a&gt;: JWT Authentication over DRF, SQLite, Docker &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/flask"&gt;Flask API&lt;/a&gt;: powered by Flask-JWT-extended, SQL-Alchemy, Docker&lt;/li&gt;
&lt;li&gt;Coming soon APIs: FASTapi, Laravel API &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the UI redirects the guest users to the login page. Once the user is authenticated, all private pages are unlocked. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implemented JWT Authentication Flow: Login, Logout, Register. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VMn0dwy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iueaggig5lt9ojaz4hjl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VMn0dwy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iueaggig5lt9ojaz4hjl.jpg" alt="Full-stack React Material Dashboard - The login page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  How to use the product
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Full-stack React Material Dashboard&lt;/strong&gt; is built using a two-tier architecture where the UI is decoupled from the backend API server and communicates using requests secured by JWT tokens. The recommended way to start using this full-stack product is to follow a simple setup: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step #1&lt;/strong&gt; - Build and start the backend server&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step #2&lt;/strong&gt; - Build and start the UI&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a new user&lt;/strong&gt; via the registration page&lt;/li&gt;
&lt;li&gt;Authenticate and access the private pages&lt;/li&gt;
&lt;li&gt;Add your magic on top of the existing codebase. &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#start-the-backend-server"&gt;
  &lt;/a&gt;
  Start the backend server
&lt;/h2&gt;

&lt;p&gt;As mentioned before, the UI is configured to work with many backend servers that share a common API interface: Django, Node JS, Flask. Based on your license (free or commercial) the access is granted to the requested API Server. On this page, we will compile and start the free version of &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;Node JS API&lt;/a&gt; (open-source product). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-nodejs.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Run the SQLite migration and create the required tables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn typeorm migration:run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the API server - development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm dev
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API interface used by the API is a simple JWT authentication layer that exposes the following methods: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USERS API:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/api/users/register&lt;/code&gt;: create a new user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/login&lt;/code&gt;: authenticate an existing user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/logout&lt;/code&gt;: delete the associated JWT token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/checkSession&lt;/code&gt;: check an existing JWT Token for validity&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/edit&lt;/code&gt; - update the information associated with a registered user &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, the backend API should be &amp;amp; and running on address: &lt;code&gt;http://localhost:5000&lt;/code&gt; and we can move on with the setup and build the React UI.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  Start the React UI
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;React Material Dashboard&lt;/strong&gt; being a commercial product, a license is required before getting access to the source code. In case you don't have a license, please access the &lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;product page&lt;/a&gt; and purchase one. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/priv-react-material-dashboard-pro.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;priv-react-material-dashboard-pro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Template Page - Pricing cards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpQiV7TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0gfj6opcowrz4qvi6tw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpQiV7TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0gfj6opcowrz4qvi6tw.jpg" alt="Full-stack React Material Dashboard - Pricing cards page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backend-integration"&gt;
  &lt;/a&gt;
  Backend Integration
&lt;/h2&gt;

&lt;p&gt;The backend API server address is saved in &lt;code&gt;src/config/constant.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Frontend api has been created at &lt;code&gt;src/api/auth.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;At this point this simple &lt;code&gt;full-stack&lt;/code&gt; product should be up &amp;amp; usable to create and authenticate new users. For more resources and support, please access:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Get assistance via &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; page&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; - 24/7 LIVE assistance (registered users)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - free and commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/bundles/campaign"&gt;React Bundle&lt;/a&gt; - a discounted multi-product bundle &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>fullstack</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Quick start! getting started with flask, python3.</title>
      <author>chrisMurimi</author>
      <pubDate>Tue, 10 Aug 2021 17:14:05 +0000</pubDate>
      <link>https://dev.to/chris_murimi/quick-start-getting-started-with-flask-python3-40lp</link>
      <guid>https://dev.to/chris_murimi/quick-start-getting-started-with-flask-python3-40lp</guid>
      <description>&lt;p&gt;Python is a cool and beautiful programing language. It is beginner friendly, easy to learn and its syntax is very clear and concise. Python is yet powerful enough to be used by global tech giants in their products and applications. One area where Python shines is web development. Python offers many frameworks from which to choose from including bottle.py, Flask, Fast API, CherryPy, Pyramid, Django and web2py. This frameworks have been used is some of the most world applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flask"&gt;
  &lt;/a&gt;
  What is flask.
&lt;/h2&gt;

&lt;p&gt;Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Extensions exist for object-relational mappers, form validation, upload handling, various open authentication technologies and several common framework related tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-flask"&gt;
  &lt;/a&gt;
  Setting up Flask.
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#python-virtual-environment"&gt;
  &lt;/a&gt;
  Python Virtual environment.
&lt;/h4&gt;

&lt;p&gt;A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a “system” Python, i.e., one which is installed as part of your operating system.&lt;br&gt;
virtual environment is used to manage Python packages for different projects. Using virtual environment allows you to avoid installing Python packages globally which could break system tools or other projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-install-virtual-environment-using-pip-use-this-code-in-windows-i-recommend-using-git-bash-than-the-windows-cmd"&gt;
  &lt;/a&gt;
  You can install virtual environment using pip. Use this code in windows (I recommend using git bash than the windows CMD):
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#create-the-virtual-environment"&gt;
  &lt;/a&gt;
  Create the virtual environment.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;my_env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;my_env is the name of the virtual environment we have created.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#activate-the-virtual-environment"&gt;
  &lt;/a&gt;
  Activate the virtual environment.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;my_env&lt;/span&gt;\&lt;span class="n"&gt;Scripts&lt;/span&gt;\&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we have a virtual environment let install flask.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-flask"&gt;
  &lt;/a&gt;
  Installing flask.
&lt;/h2&gt;

&lt;p&gt;Flask is easy to set up. Use pip install flask to install both Flask and all of its dependencies including the Jinja2 templating system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-basic-flask-app"&gt;
  &lt;/a&gt;
  A basic Flask app.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This app doesn’t do much — it just creates a website with a single route that displays “Hello, world” in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routes-in-flask"&gt;
  &lt;/a&gt;
  Routes in flask.
&lt;/h2&gt;

&lt;p&gt;Routes in a Flask app can be created by defining a view function and associating a URL with it using the route() decorator. Routes specify how the Flask app handles requests it receives, such as what to display on the webpage at a certain URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#flask-app-object"&gt;
  &lt;/a&gt;
  Flask App Object.
&lt;/h2&gt;

&lt;p&gt;The Python flask module contains all the classes and functions needed for building a Flask app. The Flask class can be imported to create the main application object. It takes the name of the app as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-flask-app"&gt;
  &lt;/a&gt;
  Running Flask App.
&lt;/h2&gt;

&lt;p&gt;A Flask app can be run by exporting the FLASK_APP environment variable and running flask run in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>flask</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 20 JavaScript tips and tricks to increase your Speed and Efficiency</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:13:30 +0000</pubDate>
      <link>https://dev.to/zainsaiff/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2gkn</link>
      <guid>https://dev.to/zainsaiff/top-20-javascript-tips-and-tricks-to-increase-your-speed-and-efficiency-2gkn</guid>
      <description>&lt;h3&gt;Convenient and useful techniques to reduce the lines of code and pace up your Dev Work!&lt;/h3&gt;
&lt;p&gt;In our daily tasks, we get to write functions such as sorting, searching, finding unique values, passing parameters, swapping values etc, so here I present my list of shorthand techniques to write all of them as a Pro!✌🏻&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;img alt="Increase Your Performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ftNfvGUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--WgxQe1g9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh2m04o3fgw3a6i8bzha.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;JavaScript is truly an awesome language💛 to learn and work with. And there can be more than one approach to reach to the same solution for given problem. In this article, we will discuss only the quickest ones.🚀&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These approaches will definitely help you in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducing the number of LOC(lines of code),&lt;/li&gt;
&lt;li&gt;Coding Competitions,&lt;/li&gt;
&lt;li&gt;Hackathons or&lt;/li&gt;
&lt;li&gt;Other time bound tasks.⏱&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these JavaScript Hacks uses techniques from ECMAScript6(ES2015) onwards, though the latest version is ECMAScript11(ES2020).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: All below tricks have been tested on the Console of Google Chrome.&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/top-20-javascript-tips-and-tricks/"&gt;Top 20 JavaScript tips and tricks to increase your Speed and Efficiency&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>20 Best CSS Library For Developer</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:08:38 +0000</pubDate>
      <link>https://dev.to/zainsaiff/20-best-css-library-for-developer-43gp</link>
      <guid>https://dev.to/zainsaiff/20-best-css-library-for-developer-43gp</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;🚀20 Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>JavaScript Project For Beginners</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:00:03 +0000</pubDate>
      <link>https://dev.to/zainsaiff/javascript-project-for-beginners-1bkj</link>
      <guid>https://dev.to/zainsaiff/javascript-project-for-beginners-1bkj</guid>
      <description>&lt;p&gt;Are you looking for the best JavaScript projects for beginners?&lt;/p&gt;
&lt;p&gt;If you want to &lt;a href="#"&gt;become a web developer&lt;/a&gt;, you need to start practicing your JavaScript skills as soon as possible. Once you finish your first tutorial or online course, you are ready to start with your first small project.&lt;/p&gt;
&lt;p&gt;However, I know it may sometimes feel difficult to find JavaScript project ideas that match your skills and are fun to build.&lt;/p&gt;
&lt;p&gt;To help you get started, I’ve put together a list of 19 fun Javascript projects you can start building right now.&lt;/p&gt;
&lt;p&gt;I want you to browse through the list and click through to any JavaScript project you find intriguing. If you find a project idea that matches your goals and skill level, start building it right away!&lt;/p&gt;
&lt;p&gt;Each of these projects is open-source, meaning you can use the source code for guided learning as you go.&lt;/p&gt;
&lt;p&gt;Let’s dive right in!&lt;/p&gt;
&lt;p&gt;Check here : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/&amp;amp;ved=2ahUKEwjdsanL16byAhXezzgGHbX_DeEQtwJ6BAgSEAE&amp;amp;usg=AOvVaw16eIeKYPB8xzH6B1hMi2E6&amp;amp;cshid=1628606441193"&gt;Javascript Projects For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Eloquent JS: Chapter 3, the World of Functions</title>
      <author>Alex Kharouk</author>
      <pubDate>Tue, 10 Aug 2021 16:31:10 +0000</pubDate>
      <link>https://dev.to/kharouk/eloquent-js-chapter-3-the-world-of-functions-il6</link>
      <guid>https://dev.to/kharouk/eloquent-js-chapter-3-the-world-of-functions-il6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#quick-update"&gt;
  &lt;/a&gt;
  Quick update
&lt;/h2&gt;

&lt;p&gt;It's been almost a month since I published the first part of the Eloquent JavaScript Book Club series. I enjoyed the feedback I received from the Dev.to community and was happy to see folks wanting to join the book club and read along. However, as it has been almost a month, I'm sure many of you continued and finished the book without me. It's cool; I get it. Personally, a lot has happened in my life.&lt;/p&gt;

&lt;p&gt;I quit my current job and am very happy to have accepted an excellent offer at a great company. I received an unconditional offer for a Masters in Computer Science &amp;amp; Artificial Intelligence, where I'll be studying part-time for the next two years. I learned a heck load of data structures, algorithms, systems design, and everything in between.&lt;/p&gt;

&lt;p&gt;It's been a wild month, but I'm ready to sit back a bit. Drink a nice cold brew. Open up the dusty textbook and get into some &lt;em&gt;eloquent JavaScript&lt;/em&gt;. Before we start, I want to quickly mention that I also completed the &lt;a href="https://justjavascript.com/"&gt;Just JavaScript&lt;/a&gt; book/workshop/mini-course by Dan Abramov. I've already seen some parallels between eloquent JS and that course. I would wholeheartedly recommend getting into both. It helped solidify my mental model of how things like variables (and functions) work. There should be a blog post to analyse the two texts.&lt;/p&gt;

&lt;p&gt;Right, &lt;strong&gt;functions&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People think that computer science is the art of geniuses, but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Donald Knuth&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without functions, our code wouldn't function well. It will still do its job. Expressions and statements will continue to execute whilst our bindings (variables) will continue latching onto data. But without some order or a way of keeping related code together, it'd be complicated to manage.&lt;/p&gt;

&lt;p&gt;We can create functions with a function expression. It's similar to how we have defined variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;num&lt;/code&gt; is a &lt;em&gt;parameter&lt;/em&gt;, whilst the curly braces encapsulate the &lt;em&gt;body&lt;/em&gt; of the function. The code above creates a constant called &lt;code&gt;addTwo&lt;/code&gt; and binds it to a function that takes in a number and adds two to it.&lt;/p&gt;

&lt;p&gt;Some functions have a return statement. Others return nothing at all. Yet just because it seems like it returns nothing in the code, in reality, all operations with no explicit return statement return &lt;code&gt;undefined.&lt;/code&gt; Another example is to open your browser's console, and type in &lt;code&gt;console.log('hello')&lt;/code&gt;. You'll see hello being printed, but you'll also get the type &lt;code&gt;undefined&lt;/code&gt; returned. That's because the &lt;code&gt;.log()&lt;/code&gt; is a function that doesn't return anything. It just runs a side effect, which is the printed message.&lt;/p&gt;

&lt;p&gt;Side note, the same thing happens when we execute an expression like &lt;code&gt;let x =&lt;br&gt;
  42;&lt;/code&gt; as variable declarations do not produce a value but returns something.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-scope"&gt;
  &lt;/a&gt;
  Understanding Scope
&lt;/h3&gt;

&lt;p&gt;A crucial advantage that a function has is being able to have it's own scope. It's a mechanism that allows a function to deal with its internal state and prevent other functions from manipulating state. It creates separation of scope, where you have the &lt;em&gt;global&lt;/em&gt; scope (outside the function), and the &lt;em&gt;inner&lt;/em&gt; scope. Global scope is like setting some variables at the top of your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;closingTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions have the ability to read those variables, and even manipulate them (we will discuss why this is not necessarily good). However, we can't reach into functions and control the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;personalSchedule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;doctorsAppointment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doctorsAppointment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// doctorsAppointment is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These variables are known as local variables (or local bindings). They only exist for a limited amount of time, when the function is called. Then, once the the function has finished executing, they cease to exist. It's quite melancholic.&lt;/p&gt;

&lt;p&gt;A key thing to note is that variables declared with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; are local to the &lt;strong&gt;block&lt;/strong&gt; they are called in, and therefore can not be called outside the block, unlike &lt;code&gt;var&lt;/code&gt;. A great example is a for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// execute code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// execute code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the difference in the highlights&lt;/p&gt;

&lt;p&gt;Another thing to note is that whilst we can't &lt;em&gt;look inside&lt;/em&gt; a function to get its variables, we can look outside the scope of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;halve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divided&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divided&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;halve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function inside halve can interact with both the &lt;code&gt;x&lt;/code&gt; variable in the global scope, as well as the &lt;code&gt;divided&lt;/code&gt; variable within the scope of the &lt;code&gt;halve&lt;/code&gt; function. This is also known as &lt;strong&gt;lexical scoping&lt;/strong&gt;, where each local scope can also see all the local scopes that contain it. On top of that, all scopes can see the global scope.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-functions"&gt;
  &lt;/a&gt;
  Declaring Functions
&lt;/h2&gt;

&lt;p&gt;We've seen functions declared as an expression. We can also assign them in a shorter way through what is known as &lt;strong&gt;function declarations&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// how we would write it before&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a difference between the two, and it's primarily due to something called &lt;em&gt;hoisting&lt;/em&gt; (we won't get into this right now). If you were to call &lt;code&gt;booDeclare&lt;/code&gt; before it was declared, you would see that it still works. However, we can't say the same for the other function. This is due to function declarations being &lt;em&gt;hoisted&lt;/em&gt; up to the top of the conceptual page, and thus is able to be used anywhere in the code.&lt;/p&gt;

&lt;p&gt;This kind of makes sense, as the second function is more like how we declare a variable, and that we are unable to know what the variable binds to before it is declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am walking through a haunted house&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// works&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;booDeclare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cannot access 'boo' before initialization&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`BOO! Did I scare you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ghost&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cannot access 'ghost' before initialization&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ghost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nice ghost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;You might be familiar with arrow functions as well. They are newer syntax, and they provide us a way of writing small function expressions in a (my opinion) cleaner manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;owedMoney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// can be written as&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;owedMoney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is less verbose, as it now implicitly returns the value that sum is bound to, and there are no curly braces. There is another difference between the arrow function and a function expression, and that is regarding the keyword &lt;a href=""&gt;this&lt;/a&gt;. We will talk about it more once we get to Chapter 6 (can't wait).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-arguments"&gt;
  &lt;/a&gt;
  Optional Arguments
&lt;/h3&gt;

&lt;p&gt;The beauty of JavaScript is that it's quite lenient in what you can do (compared to other languages).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I have no args&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I have no args&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No errors! What happens here is that JavaScript will ignore all these arguments if they're not being used. Simple. Even if you specified the arguments, and didn't provide any parameters, JavaScript will still not error out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 19 undefined undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript assigns missing parameters to &lt;code&gt;undefined&lt;/code&gt; (similar to when you declare &lt;code&gt;let x;&lt;/code&gt;). It also dismisses any parameters provided if there's no explicit use for them. As you can tell, this is not so beautiful. The downside here is that you can accidentally pass the wrong number of arguments, or none at all, and you might not realise that you have a bug.&lt;/p&gt;

&lt;p&gt;One way to assign a value to an argument even when it's not passed is to use optional arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 22 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this is not the ultimate solution as it will only assign the parameters in order. So if you don't pass anything in the second argument, &lt;code&gt;person2&lt;/code&gt; will always default to 99. That's why it's common to see code like this (albeit this is very contrived).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-and-side-effects"&gt;
  &lt;/a&gt;
  Functions and Side Effects
&lt;/h3&gt;

&lt;p&gt;As we've seen, functions can be split into two types. Functions that execute other functions or side effects, and functions that have return values. At times, you will have functions that do both. Each have their own use cases, and their own advantages. Functions with return values will almost always be called more often, since we rely on the values returned to execute more code.&lt;/p&gt;

&lt;p&gt;There are &lt;code&gt;pure&lt;/code&gt; functions, that have the pleasure of always being reliable. The &lt;em&gt;purity&lt;/em&gt; comes from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;relying on global variables whose values might change&lt;/li&gt;
&lt;li&gt;always returning/producing the same value&lt;/li&gt;
&lt;li&gt;can easily be replaced with a simple value:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;return5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;return5&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are easily testable, making unit tests a breeze to write. They usually are quick to understand, as you don't need to scour other parts of the codebase to see what's being called. In essence, they're great. Yet, that ease comes with a bit of difficulty. Whilst you can write primarily pure functions, you'll realise quickly that some side effects are needed. So unless you're a total purist who despises side effects, I'd say it's fine to have a mixture of both. Like the author says:&lt;/p&gt;

&lt;p&gt;"There'd be no way to write a pure version of console.log, for example, and console.log is good to have."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So, functions. A brilliant addition to our JavaScript tool-belt that allows us to manage multiple kinds of scope, separating code logic, not repeating ourselves, and understanding side effects. The chapter gave us a lot of information, and I think it's an important fundamental to really grasp. The author also brings up concepts like the Call Stack, and Recursion. I decided not to include that in this chapter as I felt it deserved a separate &lt;code&gt;snack-esque&lt;/code&gt; post. You can read more about it on my website, although the blog post is still "growing."&lt;/p&gt;

&lt;p&gt;Thanks for reading! The next chapter will be about some rather essential data structures, &lt;a href="https://eloquentjavascript.net/04_data.html"&gt;Objects and Arrays&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to attempt the exercises for the chapter, you can find them &lt;a href="https://eloquentjavascript.net/03_functions.html#h_TcUD2vzyMe"&gt;at the bottom of the chapter&lt;/a&gt;. Let me know how you get on. I definitely recommend going through them, to help solidify your knowledge.&lt;/p&gt;

</description>
      <category>bookclub</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Mobile Payments with Expo &amp; Stripe</title>
      <author>Thor 雷神</author>
      <pubDate>Tue, 10 Aug 2021 16:04:44 +0000</pubDate>
      <link>https://dev.to/stripe/mobile-payments-with-expo-stripe-1gc2</link>
      <guid>https://dev.to/stripe/mobile-payments-with-expo-stripe-1gc2</guid>
      <description>&lt;p&gt;React Native is an important framework for indie hackers, startups, and established businesses to build and ship native mobile experiences quickly to a large user base. At Stripe, we have maintained both iOS and Android SDKs and are now enabling new experiences for developers building on React Native.&lt;/p&gt;

&lt;p&gt;To best support React Native developers, we're thrilled to work with &lt;a href="https://expo.dev/"&gt;Expo.dev&lt;/a&gt;, the popular framework and platform for building universal React Native applications. With Expo's tools and &lt;code&gt;stripe-react-native&lt;/code&gt;, it's never been easier to build secure and delightful mobile experiences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improving-the-developer-experience"&gt;
  &lt;/a&gt;
  Improving the developer experience
&lt;/h2&gt;

&lt;p&gt;In building the &lt;a href="https://github.com/stripe/stripe-react-native"&gt;stripe-react-native&lt;/a&gt; library with Expo Go support, our goal is to enable developers to create intuitive applications using tools that just work out-of-the-box. In addition, developers also want the ability to add customization as needed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get up and running with Expo and Stripe, follow the docs reference: &lt;a href="https://docs.expo.dev/versions/latest/sdk/stripe/"&gt;https://docs.expo.dev/versions/latest/sdk/stripe/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existing developers using &lt;code&gt;expo-stripe-payments&lt;/code&gt; should follow this migration guide to get up and running with &lt;code&gt;@stripe/stripe-react-native&lt;/code&gt;: &lt;a href="https://github.com/expo/fyi/blob/master/payments-migration-guide.md#how-to-migrate-from-expo-payments-stripe-to-the-new-stripestripe-react-native-library"&gt;Read on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;Expo is working to make &lt;em&gt;all&lt;/em&gt; React Native development as fast and friendly as it is to work in the classic managed workflow with Expo Go, while at the same time allowing you to use any custom native code you'd like. &lt;/p&gt;

&lt;p&gt;Here are some of the new features we're planning to implement for Stripe React Native:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/stripe/stripe-react-native/issues/9"&gt;Standalone Google Pay support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stripe/stripe-react-native/issues/52"&gt;WeChatPay app-to-app redirect support,&lt;/a&gt; which is the most convenient checkout experience for over 800 million customers in China&lt;/li&gt;
&lt;li&gt;Investigating the demand for a separate React Native SDK to enable Stripe Terminal in-person payment experiences. If you’re interested in this, please comment or leave a thumbs up &lt;a href="https://github.com/stripe/stripe-react-native/issues/95"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to the Expo team for working with us and to the React Native developer community for the many PR contributions and invaluable feedback! We’d love for you to test out the new SDK and submit feedback and issues on GitHub, and if you want to learn more about the inner workings of the SDK tune in for our talk at &lt;a href="https://www.react-native.eu/"&gt;https://www.react-native.eu/&lt;/a&gt; and watch our developer videos on &lt;a href="https://youtube.com/stripedevelopers"&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to try out the new Stripe React Native module, check out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.expo.io/versions/latest/sdk/stripe/"&gt;the Expo docs page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stripe/stripe-react-native"&gt;Stripe's GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=DZlAET7Tgx4"&gt;this excellent YouTube video that walks through integrating Stripe in your Expo app&lt;/a&gt; by &lt;a href="https://twitter.com/nathvarun"&gt;Varun Nath&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>reactnative</category>
      <category>expo</category>
      <category>mobile</category>
      <category>payments</category>
    </item>
    <item>
      <title>VS Code - How many extensions is too much?</title>
      <author>Rob OLeary</author>
      <pubDate>Tue, 10 Aug 2021 16:04:35 +0000</pubDate>
      <link>https://dev.to/robole/vs-code-the-perfect-number-of-extensions-is-25ic</link>
      <guid>https://dev.to/robole/vs-code-the-perfect-number-of-extensions-is-25ic</guid>
      <description>&lt;p&gt;VS Code is a (relatively) lightweight editor with a core set of features. It is up to the user to extend the editor to their particular needs through extensions. In fact, many core features are written as extensions. You can see the builtin extensions by searching with &lt;code&gt;@builtin&lt;/code&gt; in the extensions sidebar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GnEYKFQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz0krjzpb6wfdr9hv49u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnEYKFQF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dz0krjzpb6wfdr9hv49u.png" alt="builtin extension list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People have contrasting attitudes to extensions. Some people have a long list of extensions they use and rhapsodize about "must-use" extensions. Other people refrain from using many extensions because they want to avoid "bloat". Other people might be somewhere between these 2 attitudes. Other people will tell you to use Vim!  😉&lt;/p&gt;

&lt;p&gt;The thing is you don't need to belong to a particular camp. If you understand a bit more about VS Code, you can be more pragmatic, and do what suits you.&lt;/p&gt;

&lt;p&gt;Central to this is the recognition that at one time, only a portion of your extensions are loaded. As you see above extensions such as CSS Language Features and Emmet are builtin to VS Code, would you expect them to be loaded always?&lt;/p&gt;

&lt;p&gt;I wouldn't, and they aren't! We will explain more on this in the next section.&lt;/p&gt;

&lt;p&gt;Also, you should recognise what your perceived performance of VS Code is. It is based on the initial time it takes to load the editor and become active, and how long it takes you to do certain actions. This is affected by what extensions are loaded for your typical project, when they are loaded, and if they are well behaved (well written).&lt;/p&gt;

&lt;p&gt;I will show you how you can see what extensions are loaded, and how extensions affects performance generally. VS Code has added some visual cues to the UI to make this easier recently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-are-extensions-loaded"&gt;
  &lt;/a&gt;
  When are extensions loaded?
&lt;/h2&gt;

&lt;p&gt;Extensions are conditionally loaded based on their &lt;a href="https://code.visualstudio.com/api/references/activation-events"&gt;Activation Events&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the common activation events are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; (Startup event): An extension is loaded when VS Code starts up. These extensions will always be active. This impacts the startup time of VS Code, so these should be reserved for critical extensions. You don't want a tonne of these, or the startup time will begin to suck!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onStartupFinished&lt;/code&gt; event: An extension is  loaded sometime after VS Code starts up. This is like the &lt;code&gt;*&lt;/code&gt; activation event, but it will not slow down VS Code's startup.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onLanguage&lt;/code&gt; event: The extension will be loaded whenever a file of a certain language is opened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An extension can be loaded based on a collection of activation events. When the activation events are no longer met for an extension, the extension is unloaded.&lt;/p&gt;

&lt;p&gt;To find out the activations events for an extension, you can look at the extension details in the extensions sidebar. They are shown on the "Feature Contributions" tab. It may be right at the bottom, as per screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y15fqwOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2qvzdaoi1viepwn2mq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y15fqwOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2qvzdaoi1viepwn2mq0.png" alt="activation events show in Feature Contributions tab for ESLint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally, you will find that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Critical and frequently used extensions are loaded on startup e.g. Git.&lt;/li&gt;
&lt;li&gt;Language-specific extensions use the &lt;code&gt;onLanguage&lt;/code&gt; event e.g. HTML Language Features, Emmet. If you have a HTML file open, then HTML Language Features and Emmet are loaded.&lt;/li&gt;
&lt;li&gt;And more niche, less frequently used extensions tend to use the &lt;code&gt;onCommand&lt;/code&gt; event more often e.g. Gulp support for VS Code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You hope that the author of extension doesn't take liberties and always load their extension!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-check-which-extensions-are-loaded"&gt;
  &lt;/a&gt;
  How do I check which extensions are loaded?
&lt;/h2&gt;

&lt;p&gt;You can see a full list by running the command &lt;code&gt;Developer: Show Running Extensions&lt;/code&gt; to get the basic stats about the running extensions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Sn4Cq1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i7zusm02afxz0m62mpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Sn4Cq1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i7zusm02afxz0m62mpc.png" alt="view of running extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also quickly see which extensions have been loaded in the extensions sidebar. If an extension was loaded, you will see a loading time next to its name (see yellow highlight). You can see in the screenshot below that the extensions, ESLint and Format Code Action, have been loaded for my project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O-fbpozE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfjhc3ehckx2d2jclaz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O-fbpozE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfjhc3ehckx2d2jclaz.png" alt="activation time show in extensions sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the extension, you also see this info in the "Runtime Status" tab also (see second yellow highlight).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-review-performance"&gt;
  &lt;/a&gt;
  How do I review performance?
&lt;/h2&gt;

&lt;p&gt;I think the best way to see where you are is to load VS Code without any extensions from the command-line with &lt;code&gt;code my-project --disable-extensions&lt;/code&gt;, and then compare to open it with all your extensions &lt;code&gt;code my-project&lt;/code&gt;. Open some files in your workspace to ensure you get a realistic impression.&lt;/p&gt;

&lt;p&gt;Is there a big difference? If there is, review your extensions.&lt;/p&gt;

&lt;p&gt;I wrote a more detailed article for FreeCodeCamp on this topic, &lt;a href="https://www.freecodecamp.org/news/optimize-vscode-performance-best-extensions/"&gt;VS Code Performance – How to Optimize Visual Studio Code and Choose the "Best" Extensions&lt;/a&gt;, you can give it a read if you want to know more.&lt;/p&gt;

&lt;p&gt;My own investigation led me to remove a couple of extensions that had an activation event of &lt;code&gt;*&lt;/code&gt; and that were not critical for me. I removed a couple of extensions with poor performance e.g. Live Server.&lt;/p&gt;

&lt;p&gt;Also, keep in mind that extensions that are bundled can be much more performant, so favour extensions that are bundled. Suggest it to the maintainers of the extension if they are not doing this.&lt;/p&gt;

&lt;p&gt;I took an the extra step of writing a few of my own extensions. I found &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; was quite slow. It loads in 263ms, and it has a &lt;em&gt;lot&lt;/em&gt; of features that I don't use. So, I wrote 2 smaller extensions to meet my needs more specifically: &lt;a href="https://marketplace.visualstudio.com/items?itemName=robole.marky-edit"&gt;Marky Edit&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=robole.marky-dynamic"&gt;Marky Dynamic&lt;/a&gt;. They both load in approximately 5ms!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yqhWF0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u33gj4j2ra2e2ywq42q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yqhWF0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u33gj4j2ra2e2ywq42q.png" alt="activation time of marky dynamic and marky edit in running extensions view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You shouldn’t be overly concerned with the number of extensions you have installed. This is the wrong way to think about it. The important thing is to recognize the impact an extension can have on initial startup time of VS Code, and how an extension behaves on a typical project for you. When you install an extension, do a quick review of the activation events of the extension, and see how it performs generally. You won’t go too far wrong if you do this habitually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-attribution"&gt;
  &lt;/a&gt;
  Image Attribution
&lt;/h2&gt;

&lt;p&gt;Cover image source: &lt;a href="http://getdrawings.com/goldilocks-and-the-three-bears-clipart"&gt;Goldilocks And The Three Bears&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>performance</category>
    </item>
    <item>
      <title>Dealing with Environment Variables in Flask</title>
      <author>kubona Martin Yafesi</author>
      <pubDate>Tue, 10 Aug 2021 16:00:05 +0000</pubDate>
      <link>https://dev.to/kubona_my/dealing-with-environment-variables-in-flask-o1</link>
      <guid>https://dev.to/kubona_my/dealing-with-environment-variables-in-flask-o1</guid>
      <description>&lt;p&gt;Welcome to yet another article. Thanks for being a dedicated reader. More knowledge unto you, more skills learnt, and a better you. Before we begin on today's article, we will just have a brief recap of what we have learned over the course of time together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dKmsNTBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fe3c7avfr87u9k26n8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dKmsNTBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fe3c7avfr87u9k26n8a.png" alt="recap-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-python"&gt;
  &lt;/a&gt;
  What is Python?
&lt;/h2&gt;

&lt;p&gt;Python is a widely-used, interpreted, object-oriented, and high-level programming language with dynamic semantics, used for general-purpose programming.&lt;br&gt;
It was created by Guido van Rossum as a 'hobby' programming project. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-do-we-love-python"&gt;
  &lt;/a&gt;
  Why do we love Python?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Because it is an easy and intuitive language;&lt;/li&gt;
&lt;li&gt;Open source programming language. As a result, everyone may contribute to its growth;&lt;/li&gt;
&lt;li&gt;Code that is as simple to comprehend as plain English;&lt;/li&gt;
&lt;li&gt;Appropriate for day-to-day work, with quick development times&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-python-used-for"&gt;
  &lt;/a&gt;
  What is Python used for?
&lt;/h2&gt;

&lt;p&gt;Python has its application domains in many areas and these are but not limited to;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Web Applications&lt;/li&gt;
&lt;li&gt;Data Science&lt;/li&gt;
&lt;li&gt;Mobile Applications&lt;/li&gt;
&lt;li&gt;Big Data&lt;/li&gt;
&lt;li&gt;Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Automation &lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To have a more detailed Introduction to Python, please feel free to check out this resource. &lt;a href="https://dev.to/kubona_my/python-basics-pythons-101-dj2"&gt;Python Basics, Pythons 101!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once that article has been read, we have a look at some concepts in Python worth remembering. These may not be explained exhaustively for beginners but gives a refresher to intermediate and expert python programmers. Even beginners can relate, good news!!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;Literals are data whose values are decided by the literal itself, which Python provides out of the box. &lt;/p&gt;

&lt;p&gt;Common literals in Python include;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numeric literals&lt;/li&gt;
&lt;li&gt;Strings literals&lt;/li&gt;
&lt;li&gt;Special literal None&lt;/li&gt;
&lt;li&gt;Boolean literals&lt;/li&gt;
&lt;li&gt;Collection literals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In simple terms, literals are the raw data that are assigned to variables or constants while programming.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arithmetic-operations-in-python"&gt;
  &lt;/a&gt;
  Arithmetic operations in Python
&lt;/h3&gt;

&lt;p&gt;Python supports out of the box support for arithmetic operations. With it you can perform these operations using expressions and operators. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;A variable is a named location reserved to store values in the memory.&lt;/p&gt;

&lt;p&gt;Whenever you want to store results from operations, use a container called a &lt;em&gt;variable&lt;/em&gt; to store them.  When naming variables, make sure you follow the &lt;strong&gt;PEP Standards&lt;/strong&gt; defined here, &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 --Style Guide for Python Code&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;Comments can be used to add more information to your code. At runtime, they are removed. Human readers are addressed by the information left in source code. A comment in Python is a line of text that starts with &lt;code&gt;#&lt;/code&gt; for single line and &lt;code&gt;"""&lt;/code&gt; for multi-line comments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;A function is a group of related statements that perform a given task. So whenever you call a function, those statements will perform that task, however many times you call the function.&lt;/p&gt;

&lt;p&gt;Functions help us as programmers to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid code repetitions&lt;/li&gt;
&lt;li&gt;Have cleaner and readable code&lt;/li&gt;
&lt;li&gt;Decompose large problems into small chunks. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 3 major types of functions these are;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In-built functions&lt;/li&gt;
&lt;li&gt;User defined functions&lt;/li&gt;
&lt;li&gt;Pre-Installed module functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a more detailed guide on functions, please check out this resource. &lt;a href="https://dev.to/kubona_my/introduction-to-python-functions-ije"&gt;Introduction to Python Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ntr0Hva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms0xa64zooklrcvzywes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Ntr0Hva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ms0xa64zooklrcvzywes.png" alt="Recap-done-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, welcome back from that recap about Python. Remember, the more you familiarize yourself with what Python is and how you use it, the better programmer you become at Python. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every expert was once a beginner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#web-development-in-python"&gt;
  &lt;/a&gt;
  Web development In Python
&lt;/h2&gt;

&lt;p&gt;So one of the application domains of Python is &lt;strong&gt;Web development&lt;/strong&gt;. You can use it to make powerful and fast web applications. In so making, a number of tools and frameworks have been developed to aid web development in Python. &lt;/p&gt;

&lt;p&gt;Some of these are but not limited to;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;The picture below shows a list of web frameworks using Python&lt;/em&gt;) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcgWKoes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4zmujxd51z3ne0de1e8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcgWKoes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4zmujxd51z3ne0de1e8.jpg" alt="web-frameworks-python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our focus will be on the Flask framework. For an Introduction to FLASK, please checkout their official documentation.&lt;br&gt;
 &lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Official Flask Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And for a quick overview on how to get started with Python Web development, consider looking into, &lt;a href="https://dev.to/grayhat/getting-started-with-python-web-development-1jl9"&gt;Getting Started with Python Web Development using FLASK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have mastered the basic overview of flask, we will dive into the topic of the day. Phew!!! What an introduction !!! Hope you are enjoying the article. Let us refocus now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jyzOJ2_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvuk6gt4q5y404rw6lfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyzOJ2_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvuk6gt4q5y404rw6lfs.png" alt="refocus-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given a minimal Flask application, such as;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello World, dear Friend!'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/page/&amp;lt;int:page_num&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;h1&amp;gt;Yoo.. It is your page &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;page_num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;/h1&amp;gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The minimal application can be run following the steps below, &lt;em&gt;(as you might be familiar)&lt;/em&gt;, &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;app.py
flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other scenarios you might want to specify the host and port number, environment, debug mode etc.  for which you want your flask application to run, you would have to include all that into the &lt;code&gt;export command&lt;/code&gt; above. &lt;br&gt;
That can become tedious over time as you develop your cool project, pressing up arrow key many times to retrace the export command (&lt;em&gt;bash users, you know what I mean&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;Our goal is to save some time and when running our flask application, we simply do; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variables that we add to the &lt;code&gt;export command&lt;/code&gt; are known as &lt;strong&gt;environment variables&lt;/strong&gt;. These variables are used by your flask application to serve your project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples-of-environment-variables-include"&gt;
  &lt;/a&gt;
  Examples of environment variables include;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FLASK_ENV&lt;/li&gt;
&lt;li&gt;FLASK_DEBUG.&lt;/li&gt;
&lt;li&gt;FLASK_RUN_EXTRA_FILES &lt;/li&gt;
&lt;li&gt;FLASK_RUN_HOST&lt;/li&gt;
&lt;li&gt;FLASK_RUN_PORT &lt;/li&gt;
&lt;li&gt;FLASK_RUN_CERT&lt;/li&gt;
&lt;li&gt;FLASK_RUN_KEY &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are default flask environment variables defined by the framework. If not specified, they use their default values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-defined-variables"&gt;
  &lt;/a&gt;
  User defined variables
&lt;/h3&gt;

&lt;p&gt;Also, if you wanted to connect your application to a database, you would have to hard code your credentials into your python code, &lt;strong&gt;which is not recommended&lt;/strong&gt;. &lt;br&gt;
A simple example would be;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"your_username"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_DB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my_appdb"&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"your_password"&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That kind of hard coding credentials is not ideal if you are working on a large project with other people&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Incase you do not follow &lt;em&gt;Strict password policies&lt;/em&gt; and use one password everywhere....&lt;strong&gt;You are hacked!!!&lt;/strong&gt;. You just shared your password with the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-we-deal-with-the-flask-environment-variables"&gt;
  &lt;/a&gt;
  So how do we deal with the &lt;strong&gt;flask environment variables&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;We are going to see how to load flask environment variables automatically. You are here because you're tired of setting environment variables every time you are running your flask app? Variables like FLASK_APP or FLASK_ENV using &lt;code&gt;export command&lt;/code&gt;. Am going to help you do just that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-pythondotenv"&gt;
  &lt;/a&gt;
  Step 1: Install python-dotenv
&lt;/h3&gt;

&lt;p&gt;In your virtual environment, run;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I emphasize, always use virtual environments on your system to prevent corrupting your main Python installation. In case you want a recap on how to create virtual environments, refer to this guide. &lt;a href="https://docs.python.org/3/library/venv.html"&gt;Creation of Virtual Environments&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-raw-env-endraw-and-raw-flaskenv-endraw-files-in-your-project-root-folder"&gt;
  &lt;/a&gt;
  Step 2: Create &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.flaskenv&lt;/code&gt; files in your project root folder
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;On Bash&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .env
&lt;span class="nb"&gt;touch&lt;/span&gt; .flaskenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-place-your-flask-environment-variables-in-flaskenv"&gt;
  &lt;/a&gt;
  Step 3: Place your flask environment variables in .flaskenv
&lt;/h3&gt;

&lt;p&gt;Depending on your use case, this will guide you on what to include.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In .flaskenv&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//this is the .flaskenv file
FLASK_ENV - Controls the environment.
FLASK_DEBUG - Enables debug mode.
FLASK_RUN_EXTRA_FILES - A list of files that will be watched by the re-loader &lt;span class="k"&gt;in &lt;/span&gt;addition to the Python modules.
FLASK_RUN_HOST - The host you want to &lt;span class="nb"&gt;bind &lt;/span&gt;your app to.
FLASK_RUN_PORT - The port you want to use.
FLASK_RUN_CERT - A certificate file &lt;span class="k"&gt;for &lt;/span&gt;so your app can be run with HTTPS.
FLASK_RUN_KEY - The key file &lt;span class="k"&gt;for &lt;/span&gt;your cert.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for example; &lt;code&gt;FLASK_APP=app.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Boom, great work done. To run your app now, Simply do run;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68w7Bd0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nayohyahnarf80y82f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68w7Bd0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5nayohyahnarf80y82f.png" alt="flask-run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That was fast,.... right?? Yes so you can now focus on programming instead of looking for which flask environment variable is missing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-about-mysecretlydefined-environment-variables"&gt;
  &lt;/a&gt;
  So how about &lt;strong&gt;my-secretly-defined environment variables&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Yes getting to that now. Follow this guide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-place-raw-yoursecretlydefined-environment-variables-endraw-in-raw-env-endraw-"&gt;
  &lt;/a&gt;
  Step 1. Place &lt;code&gt;your-secretly-defined environment variables&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These can include;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login credentials to the database&lt;/li&gt;
&lt;li&gt;API keys&lt;/li&gt;
&lt;li&gt;SECRET_KEY
&lt;em&gt;(among others)&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In .env&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//This is the .env file
&lt;span class="nv"&gt;MYSQL_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root
&lt;span class="nv"&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;my_mysql_password
&lt;span class="nv"&gt;MYSQL_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;userdb
&lt;span class="nv"&gt;MYSQL_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;localhost
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;topsecretkey
&lt;span class="nv"&gt;API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;donotsharethisapikeywithanyone

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-a-settingspy-file"&gt;
  &lt;/a&gt;
  Step 2: Create a settings.py file
&lt;/h3&gt;

&lt;p&gt;(&lt;em&gt;Since these variables are not served automatically, we have to load them through this &lt;code&gt;settings.py&lt;/code&gt; file&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In settings.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;//This is the settings.py file

from os import environ
&lt;span class="nv"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'SECRET_KEY)
API_KEY=environ.get('&lt;/span&gt;API_KEY&lt;span class="s1"&gt;')
MYSQL_USER=environ.get('&lt;/span&gt;MYSQL_USER&lt;span class="s1"&gt;')
//add any more variables you have

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For consistency, it is good to keep the same variable name as the environment variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-the-configurations-to-our-app"&gt;
  &lt;/a&gt;
  Step 3: Add the configurations to our app
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;app.py&lt;/code&gt; , the file that has your flask object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'settings.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# loading all environment variables from settings.py
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what happens is that the settings.py will read the values you placed in your .env file and store them in variables as you defined them in settings.py.&lt;/p&gt;

&lt;p&gt;When you use the flask object's config method, together with the &lt;code&gt;from_pyfile&lt;/code&gt; sub-method, the app will have access to the secretly defined variables in a secure way.&lt;/p&gt;

&lt;p&gt;Run your app as before, and boom you can now serve the world with your cool project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip:
&lt;/h3&gt;

&lt;p&gt;To avoid surbotaging your efforts to secure your credentials, when using a version control system such as &lt;strong&gt;git&lt;/strong&gt; , do not push the &lt;em&gt;.flaskenv&lt;/em&gt; and &lt;em&gt;.env&lt;/em&gt; files. You can use &lt;em&gt;.gitignore&lt;/em&gt; file to ignore them in your project directory. They remain on your local system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-was-the-article"&gt;
  &lt;/a&gt;
  How was the article?
&lt;/h2&gt;

&lt;p&gt;I love to learn with you dear reader. Share your feedback with me in the discussion section below. Are there better ways to do this?&lt;br&gt;
A great friend improves another, feel free to share &lt;br&gt;
I appreciate all the feedback in advance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/u3axz3PUbjJpQeysaP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/u3axz3PUbjJpQeysaP/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>security</category>
      <category>environment</category>
    </item>
    <item>
      <title>Attacks on privacy. Why do we need PETs?</title>
      <author>Jack F.</author>
      <pubDate>Tue, 10 Aug 2021 15:26:13 +0000</pubDate>
      <link>https://dev.to/oblivious/attacks-on-privacy-why-do-we-need-pets-18an</link>
      <guid>https://dev.to/oblivious/attacks-on-privacy-why-do-we-need-pets-18an</guid>
      <description>&lt;p&gt;&lt;em&gt;In this post we are going to look at some examples of reconstruction attacks i.e. how from seemingly anonymous data, one can reveal most sensitive information about individuals.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s say you are analysing data. Maybe you are running some ML prediction algorithms, training your models, calculating different statistics, and sharing your outputs. It may seem that simply removing all the personally identifiable information such as names, addresses or telephone numbers should suffice to make sure that no private information is revealed after the analysis. That might even be sufficient to be considered anonymous data according to some privacy laws. If so, then surely you don’t need to be too worried, right?&lt;/p&gt;

&lt;p&gt;Perhaps instead you are aggregating data over many individuals so you don’t even think about any privacy issues. An extremely trivial example of how things might go wrong with aggregate statistics is revealing an average salary of say 100 employees and then publishing an average of 101 after a new employee has joined. This allows anyone with access to these aggregates to easily figure a salary of a new employee. Even though that might seem like an obvious thing one can easily avoid, it becomes much trickier when revealing a range of statistics and aggregates, in different contexts. Things get even more challenging when such information is combined with other data sources about the same individuals.&lt;/p&gt;

&lt;p&gt;If you don't follow a structured approach to data sharing, you've got a good chance of compromising the privacy of the data source. Many large companies and governments have made these mistakes, so let's talk about how you can avoid the same peril! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#few-data-points-suffice-to-identify-individuals"&gt;
  &lt;/a&gt;
  Few data points suffice to identify individuals
&lt;/h2&gt;

&lt;p&gt;Even if we think of ourselves as a needle in a haystack of 7.7bn people in the world, a range of studies has shown that very few data points suffice to uniquely or with high probability identify an individual. As an example, 4 spatiotemporal points taken from credit card metadata are sufficient to uniquely reidentify 90% of individuals [1]. &lt;/p&gt;

&lt;p&gt;Similarly, in another study that considered mobility data taken from mobile phone devices with a time resolution of 1h and the spatial resolution determined by the distance between antennas, only 4 randomly drawn points sufficed to identify 95% of individuals (and two randomly drawn points identified over 50%) [2]. The task is even easier for an attacker who cleverly uses non-uniform sampling e.g. by exploiting the fact that calls from an office at 2 am might provide more information about an individual than calls at 3 pm, when the office is crowded. Similar attacks can be performed by using other mobility data from geotagging used by social media platforms, smartphone apps, and others.&lt;/p&gt;

&lt;p&gt;It means that even when you completely remove addresses, account numbers, and other PII it is very easy to reidentify people from such a dataset. Almost all re-identification attacks make use of this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l4qb0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv479147qdml6p87c8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4qb0sqB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgv479147qdml6p87c8j.png" alt="Taking a closer look."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, sensitive information can be compromised even if the identifiers are not unique. It is well known that 87% of Americans can be uniquely identified just from their gender, birthday, and ZIP code [3]. To prevent such attacks, the commonly used method is to group and coarsen the identifiers by reporting only the age brackets, giving only the first three digits of ZIP codes etc. resulting in quasi-identifiers. This is done in such a way as to guarantee k-anonymity. As a result, for any record and any set of quasi-identifiers there are at least k-1 other records with the same quasi-identifiers. It is a very common and natural way of trying to ensure privacy. Unfortunately, it can often fail in protecting sensitive information too. A straightforward example of that is the so-called homogeneity attack.&lt;/p&gt;

&lt;p&gt;Given a dataset of different medical conditions (clearly very sensitive information) for individuals, whose age, ZIP codes, and other identifiers have been coarsened in such a way as to ensure k-anonymity, it may still be possible to recover the sensitive information [4]. Simply all k individuals for a given set of quasi-identifiers can have the same medical conditions. Hence, if a neighbour knows your age, your ZIP code, and gender, it may well be that you fall in the category where all other k-1 individuals have the same condition as you. Basically, the situation arises whenever the sensitive information is not very diverse. The scarcity of data severely impacts k-anonymity. The effect becomes even more dominant for high-dimensional data with a large number of quasi-identifiers, when even ensuring k-anonymity becomes harder [5].&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The lesson from this is that inference attacks are often successful even when very few and coarse-grained data points are revealed.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linkage-attacks-connecting-information-from-different-sources"&gt;
  &lt;/a&gt;
  Linkage attacks - connecting information from different sources
&lt;/h2&gt;

&lt;p&gt;Information disclosed by one dataset might not be all the information publicly available about the individual. This may initially be obvious but implies very non-trivial attacks. By joining information from such a dataset with another one or some background information can allow for very successful inference attacks. Such background information might not even be sensitive. Background information that a particular medical condition is much more prevalent in a given age group or sex can increase the probability of identifying medical conditions for individuals in our previous example. Exploiting side information about individuals can lead to spectacular attacks. Arguably, one of the most famous is the one performed by Latanya Sweeney in 1997. A couple of years before that, Massachusetts Group Insurance Company had shared with researchers and sold to industry medical data that included performed medical procedures, prescribed medications, ethnicity but also people's gender, date of birth, and ZIP code. Governor Bill Weld assured that the data had been fully anonymised. Sweeney paid $20 for the Cambridge Massachusetts voter registration list, which also contained these 3 characteristics. Thus by cross-referencing the two databases, she identified Weld's entry in GIC and his medical records.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqT65xbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u829dyhlf06cww4bei99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqT65xbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u829dyhlf06cww4bei99.png" alt="Linkage attacks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example comes from journalist Svea Eckert and data scientist Andreas Dewes. They set up a fake AI start-up, pretended to be needing some data for training their ML models and they did obtain a free database of browsing history for 3m German users with a long list of 9bn URLs and associated timestamps. All this from a data broker. Even though no other identifiers were available, they still managed to re-identify the browsing history of politicians, judges, and even their work colleagues. One way they could achieve it was by noticing that a Twitter’s user who visits Twitter's analytics page, leaves a trace of his or her username in the corresponding URL. Hence, by going to the corresponding Twitter profiles Eckert and Dewes could identify such individuals. Interestingly, they also found out about a police force’s undercover operation. The information about it was in Google Translate URLs, which contain the whole text one inputs to the translator.&lt;/p&gt;

&lt;p&gt;Even what might seem like fairly insensitive data can tell a lot about us. Netflix learned it the hard way when it shared the database with movie ratings made by its users for the Netflix Prize competition. They stripped off all the PII from the data, but as you probably know by now, it was still possible to identify some of the users. This was done by the research from the University of Texas, which linked Netflix’s dataset to IMDB [6]. In this way information about people’s political preferences and even their sexual orientation was compromised.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The main takeaway from this part is that linking information from different data sources can lead to severe privacy leakages. *&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attacks-on-ml-models"&gt;
  &lt;/a&gt;
  Attacks on ML models
&lt;/h2&gt;

&lt;p&gt;All the examples so far were considered with attacks based on some publicly released data. However, one does not need to have direct access to such data to learn about sensitive information of individuals. Another example comes from attacks on machine learning models. It has been shown that that one can learn about statistical properties of trained datasets simply from parameters of trained machine learning models. Not only that, it is also possible to perform attacks given only black-box access to a model by using it to run predictions on input data. Researchers from Cornell Tech have shown that even models trained on MLaaS offerings of Google and Amazon can be open to membership inference attacks [7]. In this scenario, an attacker can say whether a given record was used as a training dataset.‌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-handle-this"&gt;
  &lt;/a&gt;
  How to handle this?
&lt;/h2&gt;

&lt;p&gt;‌&lt;br&gt;
In the current data economy, a vast of information is shared between companies, organisations, and individuals. Banning this is probably unfeasible and counterproductive in the long term. We believe that privacy-enhancing technologies need to employ in order to tackle the privacy challenges. Multi-party computation can allow for encryption during computation. &lt;/p&gt;

&lt;p&gt;Secure enclaves can ensure that data is processed only according to a pre-agreed specification. Differential privacy can be employed in training ML models, building synthetic data, and sharing aggregates with privacy guarantees. We will be writing more about all these different PETs.&lt;/p&gt;

&lt;p&gt;However, if you have encountered any such privacy challenges and you wish to run PETs in your environment, give us a shout!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] De Montjoye, Yves-Alexandre, Laura Radaelli, and Vivek Kumar Singh. "Unique in the shopping mall: On the reidentifiability of credit card metadata." Science 347.6221 (2015): 536-539.&lt;/p&gt;

&lt;p&gt;[2] De Montjoye, Yves-Alexandre, et al. "Unique in the crowd: The privacy bounds of human mobility." Scientific reports 3.1 (2013): 1-5.&lt;/p&gt;

&lt;p&gt;[3] Sweeney, Latanya. "k-anonymity: A model for protecting privacy." International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems 10.05 (2002): 557-570.&lt;/p&gt;

&lt;p&gt;[4] Machanavajjhala, Ashwin, et al. "l-diversity: Privacy beyond k-anonymity." ACM Transactions on Knowledge Discovery from Data (TKDD) 1.1 (2007): 3-es.&lt;/p&gt;

&lt;p&gt;[5] Shokri, Reza, et al. "Membership inference attacks against machine learning models." 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 2017.&lt;/p&gt;

&lt;p&gt;[6] Narayanan, Arvind, and Vitaly Shmatikov. "Robust de-anonymization of large sparse datasets." 2008 IEEE Symposium on Security and Privacy (sp 2008). IEEE, 2008.&lt;/p&gt;

&lt;p&gt;[7] Aggarwal, Charu C. "On k-anonymity and the curse of dimensionality." VLDB. Vol. 5. 2005.&lt;/p&gt;

</description>
      <category>security</category>
      <category>privacy</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Destructuring en Javascript</title>
      <author>AngelO </author>
      <pubDate>Tue, 10 Aug 2021 15:22:21 +0000</pubDate>
      <link>https://dev.to/angeluchh/destructuting-en-javascript-57j9</link>
      <guid>https://dev.to/angeluchh/destructuting-en-javascript-57j9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYF4Mnh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bp1sxpzp8tlp62z4aex.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYF4Mnh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bp1sxpzp8tlp62z4aex.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definici%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Definición.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Destructuring&lt;/em&gt;, o destructuración, es una nueva característica de ES6 para Javascript que nos da la posibilidad de poder tomar los datos de objetos o arrays directamente y de manera múltiple, para extraerlos a variables o constantes. Lo cuál la desestructuración nos permite escribir código limpio y legible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d%C3%B3nde-se-puede-aplicar"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¿Dónde se puede aplicar?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;El &lt;em&gt;destructuring&lt;/em&gt; se puede aplicar en diferentes sitios, suelen ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retornos de funciones&lt;/li&gt;
&lt;li&gt;Parámetros en las funciones&lt;/li&gt;
&lt;li&gt;Funciones de trabajo con arrays&lt;/li&gt;
&lt;li&gt;Destructuring múltiple&lt;/li&gt;
&lt;li&gt;Importación de objetos&lt;/li&gt;
&lt;li&gt;Destructuring en React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;"Desestructurar" no significa "destructivo".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se llama "asignación de desestructuración" porque se "desestructura" copiando elementos en variables. Pero la matriz en sí no se modifica.&lt;/p&gt;

&lt;p&gt;Es solo una forma más corta y limpia de escribir y/o entender el código.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sintaxis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sintaxis&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;La sintaxis del &lt;strong&gt;&lt;em&gt;destructuring&lt;/em&gt;&lt;/strong&gt; es muy sencilla. Por un lado tenemos el objeto que queremos destructurar. Para extraer sus propiedades usamos las &lt;strong&gt;"llaves"&lt;/strong&gt; &lt;strong&gt;{ }&lt;/strong&gt;, metiendo dentro de ellas sus respectivos nombres y con esto tenemos nuevas variables que contienen estas propiedades:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq7MBdf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bdcNks1S/destructuring-javascript-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pq7MBdf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/bdcNks1S/destructuring-javascript-01.png" alt="destructuring-javascript-01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si queremos poner nombres específicos para estas nuevas variables bastará con poner &lt;strong&gt;"dos puntos"&lt;/strong&gt; &lt;strong&gt;:&lt;/strong&gt;, seguido del nuevo nombre de variable que queramos asignar en las propiedades destructuradas:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWEErfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/XYgdNb0k/destructuring-javascript-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPWEErfk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/XYgdNb0k/destructuring-javascript-02.png" alt="destructuring-javascript-02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-de-objetos-object-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración de objetos (Object destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;La asignación de &lt;em&gt;destructuring&lt;/em&gt; también funciona con objetos, como lo vimos en las anteriores imágenes.&lt;/p&gt;

&lt;p&gt;En la siguiente imagen observamos las propiedades &lt;code&gt;options.title&lt;/code&gt;, &lt;code&gt;options.width&lt;/code&gt; y &lt;code&gt;options.height&lt;/code&gt; que se asignan a las variables correspondientes.&lt;/p&gt;

&lt;p&gt;Por ejemplo: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tzSm5Dgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/J79bPxqZ/destructuring-javascript-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tzSm5Dgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/J79bPxqZ/destructuring-javascript-03.png" alt="destructuring-javascript-03"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El orden no importa. Esto también funciona:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--660sgRuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/hv7tX9Qq/destructuring-javascript-04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--660sgRuc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/hv7tX9Qq/destructuring-javascript-04.png" alt="destructuring-javascript-04"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si tenemos un objeto complejo con muchas propiedades, podemos extraer solo lo que necesitamos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lEv74q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/c1KRR2Qd/destructuring-javascript-05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lEv74q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/c1KRR2Qd/destructuring-javascript-05.png" alt="destructuring-javascript-05"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;El patrón de descanso "..."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¿Qué pasa si el objeto tiene más propiedades de las variables que tenemos? ¿Podemos tomar un poco y luego asignar el "resto" a alguna parte?&lt;/p&gt;

&lt;p&gt;Podemos usar el patrón de descanso, (también se puede realizar en matrices). No es compatible con algunos navegadores más antiguos (IE, use Babel para rellenarlo), pero funciona en los modernos.&lt;/p&gt;

&lt;p&gt;Un ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j90m3Z9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/T3xnXPBP/destructuring-javascript-06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j90m3Z9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/T3xnXPBP/destructuring-javascript-06.png" alt="destructuring-javascript-06"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-de-arreglos-arrays-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración de arreglos (Arrays destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Acceder a los elementos de la matriz manualmente&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En la siguiente imagen se muestra un ejemplo para acceder manualmente a los elementos de la matriz:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ1pNJZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Jh4JG2rV/destructuring-javascript-07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQ1pNJZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Jh4JG2rV/destructuring-javascript-07.png" alt="destructuring-javascript-07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La mayoría de las veces, el tamaño de una matriz es grande y usamos un bucle para recorrer cada elemento de las matrices. A veces, es posible que tengamos arreglos cortos. Si el tamaño de la matriz es muy corto, está bien acceder a los elementos manualmente como se muestra arriba, pero a continuación veremos una mejor manera de acceder al elemento de la matriz que se está desestructurando.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acceder a elementos de la matriz mediante desestructuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En la siguiente imagen se muestra un ejemplo para acceder mediante &lt;em&gt;destructuring&lt;/em&gt; a los elementos de la matriz: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OezDKumu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ncBq5mR5/destructuring-javascript-08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OezDKumu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ncBq5mR5/destructuring-javascript-08.png" alt="destructuring-javascript-08"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Durante el &lt;em&gt;destructuring&lt;/em&gt;, cada variable debe coincidir con el índice del elemento deseado en la matriz. Por ejemplo, la variable &lt;strong&gt;mex&lt;/strong&gt; coincide con el índice 0 y la variable &lt;strong&gt;col&lt;/strong&gt; coincide con el índice 2. ¿Cuál sería el valor de &lt;strong&gt;arg&lt;/strong&gt; si tiene una variable &lt;strong&gt;arg&lt;/strong&gt; después de &lt;strong&gt;col&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPV-OELj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/HLZM59nJ/destructuring-javascript-09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPV-OELj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/HLZM59nJ/destructuring-javascript-09.png" alt="destructuring-javascript-09"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si intento la tarea anterior, confirmó que el valor no está definido. En realidad, podemos pasar un valor predeterminado a la variable, y si el valor de ese índice específico no está definido, se utilizará el valor predeterminado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d9a3_4nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/76jTtPgw/destructuring-javascript-10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d9a3_4nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/76jTtPgw/destructuring-javascript-10.png" alt="destructuring-javascript-10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-anidada-nested-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración anidada (Nested destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Si un objeto o una matriz contiene otros objetos y matrices anidados, podemos usar patrones del lado izquierdo más complejos para extraer porciones más profundas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5cejK2sZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/RhfJkrRf/destructuring-javascript-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5cejK2sZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/RhfJkrRf/destructuring-javascript-11.png" alt="destructuring-javascript-11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Saltarse un objeto durante la desestructuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Durante el &lt;em&gt;destructuring&lt;/em&gt;, si no estamos interesados ​​en todos los elementos, podemos omitir un elemento determinado poniendo una coma en ese índice. Saquemos solo México, Colombia y Brasil de la matriz. A continuación en la siguiente imagen se puede observar con más claridad:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jt2R-Gfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/B6jKCPPm/destructuring-javascript-12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jt2R-Gfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/B6jKCPPm/destructuring-javascript-12.png" alt="destructuring-javascript-12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obtener el resto de la matriz usando el operador de propagación usamos tres puntos (...) para extender u obtener el resto de una matriz durante el &lt;em&gt;destructuring&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDkePOm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/7Y3TXkbr/destructuring-javascript-13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDkePOm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/7Y3TXkbr/destructuring-javascript-13.png" alt="destructuring-javascript-13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desestructuraci%C3%B3n-en-react-react-destructuring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Desestructuración en React (React Destructuring)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destructuring&lt;/em&gt;&lt;/strong&gt; es una técnica usada mucho en los componentes React ya que les da mucha más legibilidad. Las &lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt; suelen ser un blanco fácil para poder realizar el destructuring siempre que se use más de una.&lt;/p&gt;

&lt;p&gt;Si comparamos las siguiente imágenes con o sin destructuring podemos ver la diferencia y legibilidad entre ellos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sin &lt;em&gt;destructuring&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cTNw7RM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/kX3bx4Jy/destructuring-javascript-14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cTNw7RM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/kX3bx4Jy/destructuring-javascript-14.png" alt="destructuring-javascript-14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Con &lt;em&gt;destructuring&lt;/em&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSUdPtW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ryt40Wkm/destructuring-javascript-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSUdPtW3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ryt40Wkm/destructuring-javascript-15.png" alt="destructuring-javascript-15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusión&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Destructuring&lt;/em&gt;&lt;/strong&gt; es una nueva característica muy potente del lenguaje que nos permite escribir código más legible, aunque por mi experiencia, como todo no hay que abusar de ella. En este artículo hablamos de pequeños ejemplos, pero seguramente si lo que vas a destructurar solamente tiene una propiedad, la mejor opción es no hacerlo, debido a que el &lt;em&gt;Destructuring&lt;/em&gt; agarra mucha fuerza sobre todo cuando se usan varias propiedades de un mismo objeto que se pueden destructurar, ya que al hacer el desglose de las propiedades todo suele quedar más limpio y claro. Te lo recomiendo, al leer un código con &lt;em&gt;destructuring&lt;/em&gt; lo vas agradecer.&lt;/p&gt;

&lt;p&gt;Sígueme:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/angeluchh"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
