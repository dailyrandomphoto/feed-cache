<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Only stock resources library you will ever need.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 04 Oct 2021 04:37:18 +0000</pubDate>
      <link>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</link>
      <guid>https://dev.to/abhirajb/the-only-stock-resources-library-you-will-ever-need-48jf</guid>
      <description>&lt;p&gt;If you have ever searched the mystic lands of the internet for quality stock photos, videos or music, you have come to the right place. This excerpt from &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; lists the quality websites for stock resources. If I have missed out on any websites, comment down below and they will be added.&lt;/p&gt;

&lt;p&gt;If you like this post and need more resources as such, head on to &lt;a href="https://devresources.gitbook.io"&gt;Dev Resources&lt;/a&gt; for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stock-photos"&gt;
  &lt;/a&gt;
  Stock Photos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock photos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos shared by talented creators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;The internet’s source of freely usable images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 1.7 million+ high-quality stock images and videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://magdeleine.co/"&gt;Magdeleine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gallery &amp;amp; free high-resolution photo everyday&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picspree.com"&gt;Picspree&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free images, stock photos, illustrations, and vectors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://burst.shopify.com/"&gt;Burst&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock photos collections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://gratisography.com/"&gt;Gratisography&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free collection of free high-resolution pictures&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofpix.com/"&gt;Life of Pix&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://stocksnap.io/"&gt;Stock Snap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Hundreds of high quality photos added weekly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://morguefile.com/"&gt;Morguefile&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Over 350,000 free stock photos for commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://kaboompics.com/"&gt;Kaboom Pics&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock photography and color palettes. Good for product images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://nos.twnsnd.co/"&gt;New Old Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock vintage photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picjumbo.com/"&gt;Pic Jumbo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Good collections of different types of photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.publicdomainpictures.net/en/"&gt;Public Domain Pictures&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Public domain images of all types&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.chamberofcommerce.org/findaphoto/"&gt;Find A Photo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Searches multiple stock photo websites&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.stockvault.net/"&gt;Stockvault&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Categorized stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://placeholder.com/"&gt;Placeholder&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A free image placeholder service for the web. You can specify image size and format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://realisticshots.com/"&gt;Realistic Shots&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution stock photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://negativespace.co/"&gt;Negative Space&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;High-Resolution Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://skitterphoto.com/"&gt;SkitterPhoto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free high-resolution photography&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picography.co/"&gt;PicoGraphy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Gorgeous, High-Resolution, Free Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://wunderstock.com/"&gt;Wunder Stock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stunningly amazing free photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://pxhere.com/"&gt;PxHere&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Images &amp;amp; Free stock photos - PxHere&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://piqsels.com/"&gt;Piqsels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty Free Stock Photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.foodiesfeed.com/"&gt;FoodiesFeed&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Food photo stock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.nappy.co/"&gt;Nappy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;A website offering Beautiful, high-res photos of black and brown people.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://generated.photos/"&gt;Generated Photos&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unique AI Generated model photos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.reshot.com/"&gt;Reshot&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Uniquely free photos. Handpicked, non-stocky images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.freeimages.com/"&gt;Free Images&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Find and download free stock photos - all free for personal and commercial use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://picsum.photos/"&gt;Lorem Picsum&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An easy to use API to get beautiful placeholder images. Size and other parameters can be specified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.scienceimage.csiro.au"&gt;scienceimage&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An image library specializing in science and nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://ian.umces.edu/imagelibrary"&gt;Integration &amp;amp; Application Network Image Library&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free images to provide scientists, resource managers, government agencies, community groups and graphics professionals with a resource for enhancing science communication.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://www.freenatureimages.eu"&gt;Saxifraga&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free nature images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://search.creativecommons.org"&gt;Creative Commons&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Search for free images to reuse.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://allthefreestock.com/"&gt;AllTheFreeStock&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;a curated list of free stock images, audio and videos.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-videos"&gt;
  &lt;/a&gt;
  Stock Videos
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock videos of all kinds for your websites and apps&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pexels.com/videos"&gt;Pexels&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Largest library of free to use videos, donated by the community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.pixabay.com/videos"&gt;Pixabay&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Large library of free to use videos, donated by the community similar to Pexels&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://coverr.co/"&gt;Coverr.co&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful free stock video footage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videezy.com/"&gt;Videezy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free HD stock footage &amp;amp; 4K videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/"&gt;Mix Kit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Stock video clips &amp;amp; music&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.lifeofvids.com/"&gt;Life Of Vids&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free video clips and loops&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.videvo.net/stock-video-footage/"&gt;Videvo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free and premium stock videos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="http://stock.loopvidz.com/"&gt;Loopvidz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free To Use Cinema graphs Created With VIMAGE App&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.splitshire.com/"&gt;SplitShire&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Beautiful &amp;amp; exclusive free stock videos &amp;amp; photos&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#stock-music-amp-sound-effects"&gt;
  &lt;/a&gt;
  Stock Music &amp;amp; Sound Effects
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Websites that offer free stock music and/or sound effects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Website                           &lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.free-stock-music.com/"&gt;Free Stock Music&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Royalty free stock music for YouTube videos, podcasts, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.bensound.com/"&gt;Bensound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Download Royalty Free Music for free and use it in your project&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mixkit.co/free-stock-music/"&gt;Mixkit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free music for your projects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freesound.org/"&gt;Freesound&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free stock music and sounds&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://freemusicarchive.org/"&gt;Free Music Archive&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Collaborative database of creative-commons licensed sound for musicians and sound lovers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://musopen.org/music/"&gt;Musopen&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;An online copyright free classical music library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://www.unminus.com/"&gt;Unminus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Free Premium Music for Your Projects 🎁 Royalty Free. Cleared for YouTube.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's Connect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rainboestrykr"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can support me by buying me a coffee maybe&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Some things to know about Lit</title>
      <author>Westbrook Johnson</author>
      <pubDate>Mon, 04 Oct 2021 03:04:18 +0000</pubDate>
      <link>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</link>
      <guid>https://dev.to/open-wc/some-things-to-know-about-litelement-282c</guid>
      <description>&lt;p&gt;When reviewing software with which you have little experience, it's pretty common to attempt to compare it to software you have used before. That can help you get a handle on the general ergonomics and decisions behind the two pieces of software in question. However, one thing that this approach is not particularly good at is comparing the new software &lt;em&gt;in situ&lt;/em&gt;. You may have spent a good amount of time investigating, researching, and getting comfortable with the software you're already using in the context of your particular use casso much so, that it may even be the best solution available in that context. Comparing a new software in that context (unless it, too, is purpose-built for that context) can do a disservice to the software under test, as well as to your ability to fully understand the benefits of that software.&lt;/p&gt;

&lt;p&gt;This is what I keep coming back to when people say things like "X isn't as good as Y" when "X" is a way to build web components (&lt;a href="https://webcomponents.dev/blog/all-the-ways-to-make-a-web-component/"&gt;of which there are many&lt;/a&gt;) and "Y" is a JS framework. Even before you fill actual names into either side of the equation the differences in usage of what you fill those in with is important:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS frameworks often want to own most or all of a page, whereas a web component is a single custom element on an potentially large and diverse DOM tree.&lt;/li&gt;
&lt;li&gt;Functional JS frameworks often hide much of that ownership from view to both the benefit (less code) and expense (less flexibility) of developers leveraging them.&lt;/li&gt;
&lt;li&gt;JS Frameworks tend to be an abstraction above the DOM and in this way, their "components" can exist as both literal (DOM/UI elements) and figurative (data connectivity/translations to non-web contexts).&lt;/li&gt;
&lt;li&gt;Web components being a DOM element can interact with their position in the DOM in the ways you'd otherwise need to bend over backward to do in a framework.&lt;/li&gt;
&lt;li&gt;JS frameworks often ship a lot of JS down the wire that may not be required by your application or component(s) whether or not the framework author gives you the ability to manage how much of that code makes it into your production build.&lt;/li&gt;
&lt;li&gt;Since web components are DOM elements, they can use their position in the DOM in ways you'd need to bend over backward to do in some JS frameworks.&lt;/li&gt;
&lt;li&gt;Web components are portable to just about any context in which you'd build web UI, while JS frameworks require your components to run in an app built with the same framework (unless or course, they allow you to export web components).&lt;/li&gt;
&lt;li&gt;and, many, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some or all of these points could be seen as being for or against either side of the conversation. Many of these could switch from pro to con depending on the particular use case. Too often, reviews that fail to take that into account lead to half-baked, often hypercritical takes.&lt;/p&gt;

&lt;p&gt;With that in mind, I want to go over some concepts that support healthier decision-making when teams evaluate LitElement for their projects. This isn't really a "how-to", though I've got some (slightly) dated version of that available in my &lt;a href="https://dev.to/westbrook/not-another-to-do-app-2kj9"&gt;"Not Another To-Do App" series&lt;/a&gt;. This is more of a "good to know" guide, as these concepts aren't all exact ports from JS framework contexts. I hope the ability to judge the differences from a place of knowledge proves useful to you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default Values
&lt;/h2&gt;

&lt;p&gt;There are a number of ways to define default values for a property on a LitElement, While some do require management across the entire element class, we'll ignore those today as there are a number of options that do not require such work.&lt;/p&gt;

&lt;p&gt;First off, LitElement's &lt;code&gt;render()&lt;/code&gt; method of a LitElement is (from the user's perspective) an almost 1 to 1 conversion from the functional definitions found in other offerings. In this way, you could treat &lt;code&gt;render()&lt;/code&gt; as the only entry into your properties and define fallbacks at the top of your render function's body like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;x-dialog delay=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;Thank you!&amp;lt;/x-dialog&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, you could get very close to copy and paste the rest of a functional UI component into a LitElement for an early test of its capabilities. Leveraging scoped variables like this, rather than class properties, does leave you in much the same place that functional alternatives to UI development do; needing additional tools for memoization of that scope. As using LitElement means you're already in a class context, we can use the capabilities of a class directly rather than synthesizing them with memoization.&lt;/p&gt;

&lt;p&gt;A simpler approach to merging the two concepts is to set that fallback into the class property itself. Above I showed doing this in the &lt;code&gt;render()&lt;/code&gt; lifecycle method, however, I find it much nicer to &lt;em&gt;only&lt;/em&gt; have the template surfaced therein. Leveraging one of the earlier lifecycle methods for managing defaults, validation, sanitation, transformation, or derivation help to maintain that structure. In this case, we'll use &lt;code&gt;willUpdate()&lt;/code&gt; which doesn't require a &lt;code&gt;super&lt;/code&gt; call or a returned value, but will always be visited during each render lifecycle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this approach, you can most closely facilitate the single line defaulting that can be present when relying on a function to define a component. This does mean the &lt;code&gt;shouldRender()&lt;/code&gt; method - the first method called in the render lifecycle - will not have your default value, and if that's an issue for your style of element development, you might want to move this fallback work there, but it also means that due to the fact the LitElement renders asynchronously there's technically a possibility that your local methods could as well. Due to this fact, you may want to leverage a slightly more complete approach to a default.&lt;/p&gt;

&lt;p&gt;Here we see the property getter fallback to the value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This does eclipse the simplicity of a functional solution as we are choosing to apply the default by writing our own getter/setter pair on the property. At the same time, however, we've fallen into a possible trap of the functional fallback approach (and as the &lt;code&gt;willUpdate()&lt;/code&gt; approach above), we're allowing our entire render lifecycle to be triggered for what might not be an actual change to our component state. Were &lt;code&gt;this.closeDelay&lt;/code&gt; to already equal &lt;code&gt;300&lt;/code&gt; and the application to change it to &lt;code&gt;undefined&lt;/code&gt;, all of these approaches we've looked at so far would cause whatever could occur in your render lifecycle to occur needlessly.&lt;/p&gt;

&lt;p&gt;By falling back in the setter as opposed to the getter you can leverage the capabilities of a class component to prevent the render lifecycle to be started altogether. In the following code, no matter how the value of &lt;code&gt;this.closeDelay&lt;/code&gt; gets to &lt;code&gt;300&lt;/code&gt; the call to &lt;code&gt;this.requestUpdate()&lt;/code&gt; is gated as long as the final value doesn't change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closeDelay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;closeDelay&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;_closeDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you may still ask, "but, why it is so much more code?" and, in our ecosystem of "less is more", both from a DX as well as a UX/performance standpoint, it's a great question. It's more code because it is also a different level/type of capability. Here we get a default to our property, clear gating on the render lifecycle, and on top of that, we get a value that is held state-fully within a class that defines a DOM element. This means that not only can it take part in the render pipeline of the element that owns it, but that it is available for other elements that share its DOM tree to query as a container for that state. Not every application is architected with a want or need for this capability. Not every component is going to be leveraged at the scale where the checking is needed to confirm that the render lifecycle has no side effects in a way that benefits extra prevention of the lifecycle altogether. However, when you do, you might take a look at LitElement as a path towards attaining these capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-you-like-typescript"&gt;
  &lt;/a&gt;
  So you like Typescript?
&lt;/h2&gt;

&lt;p&gt;Typescript loves a good &lt;code&gt;"Property is not definitely assigned in the constructor"&lt;/code&gt; warning, and if you like Typescript enough to use it a lot, you'll likely run into it at some point. It's telling you this, because in contrast to what you've been told Typescript is NOT smarter than you and it can't tell if something &lt;em&gt;should&lt;/em&gt; always be available, only if it &lt;em&gt;might&lt;/em&gt; not be available. You can set an initial value to a property, and it'll never yell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// always available, always a string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're looking for that to &lt;em&gt;have&lt;/em&gt; to be initialized to use your element, so &lt;em&gt;you&lt;/em&gt; KNOW it's going to always have a value, but you want the consumer to initialize it, then you can tell Typescript that by using the &lt;code&gt;!&lt;/code&gt; operator once and be done with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// no initial value, but a string is required from the consumer&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you still want to be defensive, you can add some helper code in your lifecycle to support a consumer leveraging your custom element correctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyThing&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// great location to make sure it's NEVER undefined;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;canUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;canUpdate&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shouldUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for one time availability confirmation&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;`myProperty` is unset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#required-properties"&gt;
  &lt;/a&gt;
  Required properties
&lt;/h3&gt;

&lt;p&gt;In this way, you can also manage required properties/attributes. No, it doesn't fall within the available management of a tool-based contract with the consumers of your component, however, a tool-based contract is not strictly enforceable. You as a component author can tell Typescript or a linter to error on certain things, but your consumer can tell them not to just as easily. Deciding to &lt;em&gt;only&lt;/em&gt; leverage tooling for this sort of capability might mean less work for you, but it doesn't guarantee better outcomes for your consumers. Any component author will need to decide the risks they are willing to foist onto their consumers when publishing a component, and this is yet another item to manage on that list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-management"&gt;
  &lt;/a&gt;
  Event management
&lt;/h2&gt;

&lt;p&gt;Event listeners added directly on &lt;code&gt;this&lt;/code&gt; in a custom element &lt;em&gt;do not&lt;/em&gt; need to be cleaned up when disconnected from the &lt;code&gt;document&lt;/code&gt;. Once all references to the element are released, the same garbage collection that cleans up the element itself will clean up the events bound to it. What's more, when calling &lt;code&gt;addEventListener&lt;/code&gt; on &lt;code&gt;this&lt;/code&gt;, the method's &lt;code&gt;this&lt;/code&gt; reference automatically reverts to the instance. You don't need to bind the method, so you can call a class method directly without any &lt;code&gt;.bind(this)&lt;/code&gt; or class field arrow-functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;willUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropertyValues&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Events are even easier if you know the name of the event you're wanting to listen for will be the same throughout the lifecycle of your application. With that knowledge you can listen just once without needing to add/remove the listener based on even name changes over time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;menu-trigger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MenuTrigger&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;known-event-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;eventHandler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do stuff.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done and done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylemap-usage"&gt;
  &lt;/a&gt;
  styleMap usage
&lt;/h2&gt;

&lt;p&gt;Lit's &lt;code&gt;styleMap()&lt;/code&gt; directive helps when setting the &lt;code&gt;style&lt;/code&gt; attribute on HTML elements from JavaScript. It accepts an object with css-property keys and string, &lt;code&gt;undefined&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; values. This means you can prevent a CSS property from being added to the element by passing &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; as the value, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lit/directives/style-map.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;p
        style=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styleMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1px solid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I don't show a type mismatch&lt;/span&gt;
          &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I do show a type mismatch&lt;/span&gt;
        &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
      &amp;gt;Hello, world!&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lit.dev/playground/#project=W3sibmFtZSI6InNpbXBsZS1ncmVldGluZy50cyIsImNvbnRlbnQiOiJpbXBvcnQge2h0bWwsIGNzcywgTGl0RWxlbWVudH0gZnJvbSAnbGl0JztcbmltcG9ydCB7Y3VzdG9tRWxlbWVudCwgcHJvcGVydHl9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7c3R5bGVNYXB9IGZyb20gJ2xpdC9kaXJlY3RpdmVzL3N0eWxlLW1hcC5qcyc7XG5cbkBjdXN0b21FbGVtZW50KCdzaW1wbGUtZ3JlZXRpbmcnKVxuZXhwb3J0IGNsYXNzIFNpbXBsZUdyZWV0aW5nIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgcCB7IGNvbG9yOiBibHVlIH1gO1xuXG4gIEBwcm9wZXJ0eSgpXG4gIG5hbWUgPSAnU29tZWJvZHknO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPHBcbiAgICAgICAgc3R5bGU9JHtzdHlsZU1hcCh7XG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkJyxcbiAgICAgICAgICB3aWR0aDogJzIwMHB4JyxcbiAgICAgICAgICBmbG9hdDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcmdpbjogMTAsXG4gICAgICAgIH0pfVxuICAgICAgICA-SGVsbG8sICR7dGhpcy5uYW1lfSE8L3A-YDtcbiAgfVxufVxuIn0seyJuYW1lIjoiaW5kZXguaHRtbCIsImNvbnRlbnQiOiI8IURPQ1RZUEUgaHRtbD5cbjxoZWFkPlxuICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NpbXBsZS1ncmVldGluZy5qc1wiPjwvc2NyaXB0PlxuPC9oZWFkPlxuPGJvZHk-XG4gIDxzaW1wbGUtZ3JlZXRpbmcgbmFtZT1cIldvcmxkXCI-PC9zaW1wbGUtZ3JlZXRpbmc-XG48L2JvZHk-XG4ifSx7Im5hbWUiOiJwYWNrYWdlLmpzb24iLCJjb250ZW50Ijoie1xuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJsaXRcIjogXCJeMi4wLjAtcmMuMlwiLFxuICAgIFwiQGxpdC9yZWFjdGl2ZS1lbGVtZW50XCI6IFwiXjEuMC4wLXJjLjJcIixcbiAgICBcImxpdC1lbGVtZW50XCI6IFwiXjMuMC4wLXJjLjJcIixcbiAgICBcImxpdC1odG1sXCI6IFwiXjIuMC4wLXJjLjNcIlxuICB9XG59IiwiaGlkZGVuIjp0cnVlfV0"&gt;Check it out here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version of Lit's styleMap excludes numbers as values. You might expect Lit to automatically convert numbers to &lt;code&gt;px&lt;/code&gt; values, but on second thought that isn't actually what you'd want. In CSS, where &lt;code&gt;px&lt;/code&gt; is just one of many units that a numeric CSS property could accept (&lt;code&gt;%&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, &lt;code&gt;vwmax&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;em&gt;ad infinitum&lt;/em&gt;), there's no way for Lit to know or even assume what kind of number you're using. On top of that, you might want to apply unit-less numbers directly to your styles:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;XL&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;LitElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
    output {
      background-color: hsl(var(--hue, 0) 50 100);
    }
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;property&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="s2"&gt;`  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

Thanks &lt;a class="mentioned-user" href="https://dev.to/bennypowers"&gt;@bennypowers&lt;/a&gt;
 for the code sample here.



&lt;p&gt;Defaulting numbers to &lt;code&gt;px&lt;/code&gt; would be a foot-gun. Instead, Lit encourages you to be explicit with your CSS code. Doing so not only helps your consumers, but your teammates and future self as well when it comes time to maintain the components that you create.&lt;/p&gt;




&lt;p&gt;One of the best things about &lt;code&gt;lit-html&lt;/code&gt;, the renderer underlying LitElement, is that, if you want to live on that wild side, you could create your own directive that applied number typed properties as &lt;code&gt;px&lt;/code&gt; and leverage it in your own work. Here are &lt;a href="https://lit.dev/docs/templates/custom-directives/"&gt;the docs&lt;/a&gt; for doing just that! If you're still not convinced, check out some &lt;a href="https://dev.to/open-wc/doing-a-flip-with-lit-html-2-0-3gn4"&gt;directives with which I've experimented&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: the above article, "Doing a FLIP with &lt;a href="mailto:lit-html@2.0"&gt;lit-html@2.0&lt;/a&gt;", was written against an RC of &lt;code&gt;lit@2.0&lt;/code&gt; and may not be 100% current. I'll be looking to update it here, soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When you're learning a new piece of software, by all means, start by comparing it to something that you know. It's like a cheat code to getting started down the path of learning something new. Once you've done that, don't stop there, get into a real use case with it and learn what sort of capabilities or techniques it unlocks or supports. Only then can you really get into the question of why it's doing so and whether in the context that it is intended to be used (or the context that you might use it) it's the sort of tool you want to leverage for the job.&lt;/p&gt;




&lt;p&gt;If you do get to building something with LitElement, come share it here and let's chat about the whats and whys of what you've done/are trying to do. I look forward to seeing it here in the comments, or hit me up on the &lt;a href="https://join.slack.com/t/lit-and-friends/shared_invite/zt-llwznvsy-LZwT13R66gOgnrg12PUGqw"&gt;Lit &amp;amp; Friends Slack&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>litelement</category>
      <category>webcomponents</category>
      <category>typescript</category>
      <category>learning</category>
    </item>
    <item>
      <title>Eating the Cloud from Outside In</title>
      <author>swyx</author>
      <pubDate>Mon, 04 Oct 2021 02:23:15 +0000</pubDate>
      <link>https://dev.to/swyx/eating-the-cloud-from-outside-in-1n2d</link>
      <guid>https://dev.to/swyx/eating-the-cloud-from-outside-in-1n2d</guid>
      <description>&lt;p&gt;Cloudflare launched on September 27, 2010, and every year since, it has made it a point to celebrate "&lt;a href="https://blog.cloudflare.com/tag/birthday-week/"&gt;Birthday Week&lt;/a&gt;" with a raft of launches. By far, the show-stopper this year was the announcement of &lt;a href="https://blog.cloudflare.com/introducing-r2-object-storage/"&gt;R2 Storage&lt;/a&gt;, an S3-compatible Object Storage service that directly takes aim at &lt;a href="https://blog.cloudflare.com/aws-egregious-egress/"&gt;AWS' "Hotel California" business model&lt;/a&gt;. This has been extremely well received, going by the response on &lt;a href="https://news.ycombinator.com/item?id=28682237"&gt;HN&lt;/a&gt; and &lt;a href="https://twitter.com/QuinnyPig/status/1443028078196711426"&gt;Twitter&lt;/a&gt;. In its past 5 birthdays, Cloudflare has gone from world-class CDN to offering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2017: &lt;a href="https://workers.cloudflare.com/"&gt;serverless compute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2018: &lt;a href="https://developers.cloudflare.com/workers/learning/how-kv-works"&gt;eventually consistent datastore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2019: &lt;a href="https://blog.cloudflare.com/extending-the-workers-platform/"&gt;website hosting&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2020: &lt;a href="https://blog.cloudflare.com/introducing-workers-durable-objects"&gt;strongly consistent datastore&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;2021: object storage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and declaring that they will be "&lt;a href="https://www.protocol.com/enterprise/cloudflare-r2-storage-aws"&gt;the fourth major public cloud&lt;/a&gt;". When your market cap is $36 billion and your next biggest competitor is worth $1.6 &lt;em&gt;trillion&lt;/em&gt; (~45x larger, albeit not pure-play), this is a bold statement. Many startups are trying by offering specialized &lt;a href="https://www.swyx.io/cloud-distros/"&gt;Cloud Distros&lt;/a&gt;, but all building with AWS as the presumptive winner of the "first layer cloud" rather than trying to compete.&lt;/p&gt;

&lt;p&gt;What's Cloudflare's strategy here?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My realization: The big 3 clouds are playing Chess, but &lt;em&gt;Cloudflare is playing Go&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2pkwgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dojvxo0i0u5v7cmm1d4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2pkwgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dojvxo0i0u5v7cmm1d4p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-kinds-of-disruption"&gt;
  &lt;/a&gt;
  Two Kinds of Disruption
&lt;/h2&gt;

&lt;p&gt;The canonical thoughtleader of Disruption theory is the legendary HBS Professor Clayton Christensen, and a lot has been made of &lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;Cloudflare's Disruption&lt;/a&gt; of AWS; in fact, Cloudflare cofounders Matthew Prince and Michelle Zatlyn were &lt;a href="https://harbus.org/2011/cloudflare/"&gt;students of him&lt;/a&gt; at HBS. James Allworth, their Head of Innovation, studied and &lt;a href="https://claytonchristensen.com/books/how-will-you-measure-your-life/"&gt;co-authored a book&lt;/a&gt; with him. Prince &lt;a href="https://youtu.be/XeKWeBw1R5A?t=646"&gt;namechecked the Innovator's Dilemma at Cloudflare's launch&lt;/a&gt; in 2010, and in 2021 is still proudly showing off a &lt;a href="https://news.ycombinator.com/item?id=28708636"&gt;handwritten note from him&lt;/a&gt;; in short, you can be sure his lessons are never far from Cloudflare's minds.&lt;/p&gt;

&lt;p&gt;As Ben Thompson noted in &lt;a href="https://stratechery.com/2013/clayton-christensen-got-wrong/"&gt;his now-famous takedown of Christensen on the iPhone&lt;/a&gt;, people often miss that he had &lt;em&gt;two&lt;/em&gt; theories of disruption:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;New Market Disruption&lt;/strong&gt;: When incumbents ignore new technologies until it is too late.

&lt;ul&gt;
&lt;li&gt;Allworth recently wrote an instant-classic application of this on &lt;a href="https://jamesallworth.medium.com/intels-disruption-is-now-complete-d4fa771f0f2c"&gt;Intel (x86/CISC) vs Apple Silicon (ARM/RISC)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Low-End Disruption&lt;/strong&gt;: When vertically integrated premium incumbents get disrupted by "cheap and good enough" modular providers.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A third model of disruption comes from Kevin Kwok's &lt;a href="https://kwokchain.com/2021/02/05/atomic-concepts/"&gt;Atomic Concepts&lt;/a&gt;, but that is a closer fit for the &lt;a href="https://www.swyx.io/cloud-distros/"&gt;Cloud Distros&lt;/a&gt; thesis than Cloudflare.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the first theory: Cloudflare has some excellent technologists — &lt;a href="https://en.wikipedia.org/wiki/John_Graham-Cumming"&gt;John Graham-Cumming&lt;/a&gt;,  &lt;a href="https://www.linkedin.com/in/kenton-varda-5b96a2a4/"&gt;Kenton Varda&lt;/a&gt; and &lt;a href="https://ritakozlov.com/about/"&gt;Rita Kozlov&lt;/a&gt; come to mind — and it is doing some cool things with V8 isolates and dynamic routing, but it doesn't (in my mind) have a clear claim on the overall new technology angle, since AWS created the modern serverless paradigm, &lt;a href="https://www.amazon.science/blog/how-awss-firecracker-virtual-machines-work"&gt;open-sourced Firecracker&lt;/a&gt;, and &lt;a href="https://www.protocol.com/newsletters/protocol-enterprise/serverless-container-aws"&gt;is using Lambda for half of all new applications&lt;/a&gt; (though Cloudflare is also &lt;a href="https://blog.cloudflare.com/the-secret-to-cloudflare-pace-of-innovation/"&gt;aggressively dogfooding Workers&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Most of the disruption discussion focuses on the second model of disruption, and it rings true. Cloudflare took a part of the cloud nobody valued, gave away an insanely good free offering, and quietly accumulated an &lt;a href="https://w3techs.com/technologies/cross/proxy/content_delivery"&gt;80% market share&lt;/a&gt;.  Meanwhile, when people think of "Tier 1" AWS services, its Cloudflare equivalent, Amazon CloudFront, rarely gets any love, and the official AWS Twitter account &lt;a href="https://twitter.com/search?q=from%3Aawscloud%20cloudfront&amp;amp;src=typed_query&amp;amp;f=live"&gt;hasn't tweeted about it in almost a year&lt;/a&gt;. Cloudflare leveraged their foothold into selling premium security services, and now is expanding into other value added pieces by leaning into a fundamentally different (high fixed cost, near zero marginal cost) business model the larger incumbents structurally cannot follow.&lt;/p&gt;

&lt;p&gt;This, at least, is how Ben Thompson framed it in &lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;his writeup on Cloudflare's Disruption&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stratechery.com/2021/cloudflares-disruption/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSgBpUtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7258tf9irknumz5db2vg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this diagram is a little too neat. It imagines the two clouds as worlds apart. Yet R2 is explicitly designed as S3-compatible; in Prince's words, you can &lt;a href="https://news.ycombinator.com/item?id=28703464"&gt;set it to "slurp" mode&lt;/a&gt; and you magically have a S3 interface with egress that is &lt;a href="https://twitter.com/QuinnyPig/status/1443076111651401731?s=20"&gt;six orders of magnitude cheaper&lt;/a&gt;. Similarly, the original Cloudflare service could always be used together with EC2, and Cloudflare Workers have different enough usecases and limitations from AWS Lambda and Lambda@Edge that you could conceivably have a stack using all of them. &lt;/p&gt;

&lt;p&gt;This isn't Apple vs Android; premium and vertically integrated vs cheap and modular; incompatible ecosystems, and never the twain shall meet. &lt;/p&gt;

&lt;p&gt;This is something else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudflare-and-the-rules-of-go"&gt;
  &lt;/a&gt;
  Cloudflare and the Rules of Go
&lt;/h2&gt;

&lt;p&gt;In the classic game of Go, you &lt;a href="https://www.pandanet.co.jp/English/learning_go/learning_go_6.html"&gt;capture pieces&lt;/a&gt; by surrounding your opponents, instead of directly replacing their spot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9r7pu2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/acapture1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9r7pu2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/acapture1.gif" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storage-capture"&gt;
  &lt;/a&gt;
  Storage Capture
&lt;/h3&gt;

&lt;p&gt;You could view Cloudflare's Bandwidth Alliance and R2 as an "encircling" move around AWS' previously secure market position with S3. By promising to be API compatible (including offering S3's eleven-nines durability guarantee and free infrequent access), Cloudflare has cut off nearly all of AWS' remaining "liberties", putting it in "&lt;a href="https://en.wikipedia.org/wiki/List_of_Go_terms#Atari"&gt;atari&lt;/a&gt;". If Cloudflare's offering matures enough to be seen as a strict superset, it places the final stone, capturing the "cloud storage" territory. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dfLqDpfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/ae1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfLqDpfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.pandanet.co.jp/English/learning_go/images/ae1.gif" alt="Untitled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product-strategy"&gt;
  &lt;/a&gt;
  Product Strategy
&lt;/h3&gt;

&lt;p&gt;In Chess, pieces have different values and capabilities. Bishops are worth 3 points and move diagonally, Rooks are worth 5 and move in straight lines, and so on. Pieces are best deployed in a sequence chain where higher value pieces support lower value ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWPNkKS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buwls1amzbahfv0q30d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWPNkKS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buwls1amzbahfv0q30d6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Go, each piece is indistinguishable from the other; it is the &lt;em&gt;network position&lt;/em&gt; that counts, not any individual piece. Support doesn't matter so much as adjacent territory claimed; in the picture below, the four white pieces on the left do far less than the four black pieces on the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwv0RlUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwwiby0brxdq3d7mzt6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uwv0RlUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwwiby0brxdq3d7mzt6r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compare this to public statements about how Cloudflare works. &lt;a href="https://news.ycombinator.com/item?id=28703194"&gt;From Prince&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Since every server in our network runs every service&lt;/strong&gt;, once we’re in for one thing means everything we do in the region gets better and less expensive to operate. This means, counter intuitively, as we add more locations to our network our costs generally go down, not up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So while AWS has &lt;a href="https://www.lastweekinaws.com/blog/the-17-ways-to-run-containers-on-aws/"&gt;17 ways to run containers&lt;/a&gt; and &lt;a href="https://serverlessfirst.com/aws-async-message-services/"&gt;7 ways to do async message processing&lt;/a&gt;, all overlapping and reinforcing and supporting each other, Cloudflare will tend toward introducing singular primitives, &lt;a href="https://blog.cloudflare.com/cloudflare-for-offices/#built-for-purpose"&gt;stuff them in a box&lt;/a&gt;, and try to ship those boxes to &lt;a href="https://blog.cloudflare.com/cloudflare-for-offices/"&gt;as many places as will possibly take them&lt;/a&gt;. If they could install Cloudflare on your mobile phone, they would (this gets them dangerously close to being a &lt;a href="https://www.youtube.com/watch?v=5JM8bkJLLjM"&gt;real life Pied Piper&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#territory-wins"&gt;
  &lt;/a&gt;
  Territory Wins
&lt;/h3&gt;

&lt;p&gt;In Chess, you win when you take the King, which in effect has infinite point value, and it is relatively uncommon to come to a draw. In Go, you win by amount of territory claimed, and it is near impossible for one side to end up with zero territory. Perhaps this is more realistic to real life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fidNMrPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ne0yo5vzoytu04qdkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fidNMrPL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ne0yo5vzoytu04qdkv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While AWS boasts an impressive &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;230+ points of presence&lt;/a&gt;, Cloudflare has &lt;a href="https://www.cloudflare.com/network/"&gt;interconnects with 10,000 networks&lt;/a&gt; including "every major ISP, cloud provider, and enterprise". These aren't the same thing, but it reflects the substantially different game that Cloudflare is playing. From the point of view of users, Cloudflare can be much easier to use and is much more of a painkiller than other big cloud services in their stack, despite perhaps having a single digit % of mindshare and wallet share. This puts Cloudflare within a stone's throw of Ben Thompson's other big claim to fame in Tech Strategy, &lt;a href="https://stratechery.com/aggregation-theory/"&gt;Aggregation Theory&lt;/a&gt; (the Intro to Tech Strategy chapter in &lt;a href="https://www.learninpublic.org/"&gt;my book&lt;/a&gt; is free if you want my take on it).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-for-sente"&gt;
  &lt;/a&gt;
  Watch for Sente
&lt;/h3&gt;

&lt;p&gt;To &lt;a href="https://en.wikipedia.org/wiki/List_of_Go_terms#Gote,_sente_and_tenuki"&gt;quote Wikipedia&lt;/a&gt;, a move that overwhelmingly compels a player into a particular follow-up move is said to have "sente" (先手), or "initiative". In most games, the player who maintains "sente" most of the time will win.&lt;/p&gt;

&lt;p&gt;There is a lot of speculation that AWS will have to respond somehow to Cloudflare's provocations:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rerUnMnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1431046769262006274/7GJFLo-A_normal.jpg" alt="Corey Quinn profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Corey Quinn
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @quinnypig
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm REALLY curious what position &lt;a href="https://twitter.com/awscloud"&gt;@awscloud&lt;/a&gt; is going to take on Cloudflare's free egress:&lt;br&gt;&lt;br&gt;* "That's impossible, &lt;a href="https://twitter.com/Cloudflare"&gt;@Cloudflare&lt;/a&gt; will go bankrupt doing this."&lt;br&gt;* "Yeah, you caught us, we've been ripping you off for years. Have a discount."&lt;br&gt;* Complete silence.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:08 PM - 01 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444016487304364036" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;But beyond a &lt;a href="https://www.infoworld.com/article/3634406/cloudflare-hopes-lack-of-outbound-data-fees-will-convert-aws-s3-users-to-its-r2-storage-service.html"&gt;standard PR response&lt;/a&gt;, I doubt AWS will respond to mere noise - S3 data egress revenues have to take a significant downturn before AWS will be compelled to act. But when it does, every future move of Cloudflare's will be taken increasingly seriously. Cloudflare acts and talks like it has "sente" now, but it isn't real until AWS (or the other big clouds for that matter) feel forced to specifically respond.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-establish-envelop-expand"&gt;
  &lt;/a&gt;
  Conclusion: Establish, Envelop, Expand
&lt;/h2&gt;

&lt;p&gt;While the tech industry is used to come-from-below disruption, and the software industry is increasingly grasping class-for-the-masses atomic concepts, I believe Cloudflare is writing a new playbook that is the little-guy counterpart of the &lt;a href="https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish"&gt;embrace, extend, extinguish&lt;/a&gt; model used by Microsoft.&lt;/p&gt;

&lt;p&gt;Because it involves API compatibility, this playbook is particularly relevant to developer tools, and is protected by &lt;a href="https://twitter.com/swyx/status/1379091545102503937"&gt;the Supreme Court ruling in Google v Oracle&lt;/a&gt;. If I were to summarize it in three words, looking over Cloudflare's history and &lt;a href="https://d18rn0p25nwr6d.cloudfront.net/CIK-0001477333/fa0c28c8-a883-45cd-aba8-0b9c3249cc14.pdf"&gt;annual report&lt;/a&gt;, I might call it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Establish&lt;/strong&gt;: Establish a foothold in something incumbents don't care enough about&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Envelop&lt;/strong&gt;: Reverse-proxy something that incumbents don't serve customers well on&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Expand&lt;/strong&gt;: cross-sell other premium products and services until they are more customers of you than they are customers of the incumbent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given Cloudflare's fundamentally less-centralized approach to growing its cloud, it is no surprise that it &lt;a href="https://blog.cloudflare.com/announcing-web3-gateways/"&gt;announced its first Ethereum product&lt;/a&gt; this Birthday Week; although it remains to be seen if a Web2-native company can really drop enough of its assumptions to handle Web3 threads or opportunities. If we are truly in the "early Internet" days of Web3, only the paranoid might survive here. Fortunately, Prince seems to be a &lt;a href="https://twitter.com/search?q=from%3Aeastdakota%20grove&amp;amp;src=typed_query&amp;amp;f=top"&gt;vocal fan of Andy Grove&lt;/a&gt; as well.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>strategy</category>
    </item>
    <item>
      <title>The Only Github Link You Wanted To Know</title>
      <author>Ughur Huseyn</author>
      <pubDate>Mon, 04 Oct 2021 02:00:53 +0000</pubDate>
      <link>https://dev.to/ughurh/the-only-github-link-you-wanted-to-know-16cn</link>
      <guid>https://dev.to/ughurh/the-only-github-link-you-wanted-to-know-16cn</guid>
      <description>&lt;p&gt;So, you want all repositiories sorted by stars!  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/search?o=desc&amp;amp;q=stars%3A%3E1&amp;amp;s=stars&amp;amp;type=Repositories"&gt;HERE YOU ARE&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Only repositories are shown. As a bonus check this &lt;a href="https://github.com/sindresorhus/awesome"&gt;awesome&lt;/a&gt; repo&lt;/p&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>opensource</category>
      <category>productivity</category>
    </item>
    <item>
      <title>JavaScript Jungle: Convert any object to Iterable</title>
      <author>Vikas yadav</author>
      <pubDate>Mon, 04 Oct 2021 01:16:54 +0000</pubDate>
      <link>https://dev.to/xenoxdev/javascript-jungle-convert-any-object-to-iterable-40l6</link>
      <guid>https://dev.to/xenoxdev/javascript-jungle-convert-any-object-to-iterable-40l6</guid>
      <description>&lt;p&gt;When &lt;strong&gt;ES6&lt;/strong&gt; launched,  it introduced two important protocols &lt;code&gt;Iterable&lt;/code&gt; and &lt;code&gt;Iterator&lt;/code&gt;. Basically we can convert any type of &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;iterable&lt;/code&gt; by implementing these two &lt;code&gt;protocols&lt;/code&gt;. By converting the &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;iterable&lt;/code&gt; we can perform looping with &lt;code&gt;for...of&lt;/code&gt; loop.  We can also use &lt;code&gt;spread operator&lt;/code&gt; in array (which is &lt;code&gt;...&lt;/code&gt; symbol in JS) on these objects. First let's understand these two protocols: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iterable-protocol"&gt;
  &lt;/a&gt;
  Iterable Protocol:
&lt;/h2&gt;

&lt;p&gt;As per MDN &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;iterable protocol&lt;/code&gt; allows JavaScript objects to &lt;code&gt;define&lt;/code&gt; or &lt;code&gt;customize&lt;/code&gt; their &lt;code&gt;iteration behavior&lt;/code&gt;,  such as what values are looped over in a &lt;code&gt;for...of&lt;/code&gt; construct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple terms it is a rule and by following this rule we can do two things: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an object is already iterable, we can modify it's existing &lt;code&gt;iteration behaviour&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If an object is not iterable, we can add &lt;code&gt;iteration&lt;/code&gt; behaviour to it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have used JavaScript as a beginner then you have already used one of the famous iterable &lt;code&gt;Array&lt;/code&gt;s. Obviously there are other built in &lt;code&gt;iterables&lt;/code&gt; in JavaScript as well. Some of the examples are : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;Set &lt;/li&gt;
&lt;li&gt;WeakMap&lt;/li&gt;
&lt;li&gt;WeakSet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the main question comes into picture. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do we implement this protocol ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is very simple. We just need to implement &lt;code&gt;@@iterator&lt;/code&gt;. This &lt;code&gt;@@iterator&lt;/code&gt; is special property in JS. So to make any object &lt;code&gt;iterable&lt;/code&gt; we need to add this &lt;code&gt;@@iterable&lt;/code&gt; property to it. &lt;/p&gt;

&lt;p&gt;We can get this by using constant symbol &lt;code&gt;[Symbol.iterator]&lt;/code&gt;. If you do not known what Symbols are, please read &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@@iterator&lt;/code&gt; should be a simple method with &lt;code&gt;no arguments&lt;/code&gt; which will return a value that should comply with &lt;code&gt;iterator protocol&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To summarise, we can convert any object to &lt;code&gt;Iterable&lt;/code&gt; by using following steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take an object &lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;@@iterable&lt;/code&gt; property via &lt;code&gt;[Symbol.iterator]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@@iterable&lt;/code&gt; should be a &lt;code&gt;no argument&lt;/code&gt; method &lt;/li&gt;
&lt;li&gt;Return of &lt;code&gt;@@iterable&lt;/code&gt; method should be an &lt;code&gt;iterator&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdj3_nSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrj0osqnvemow7odtpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rdj3_nSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfrj0osqnvemow7odtpj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we explore deep into Iterable Jungle. Let's talk about &lt;code&gt;iterator protocol&lt;/code&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iterator-protocol"&gt;
  &lt;/a&gt;
  Iterator protocol:
&lt;/h2&gt;

&lt;p&gt;As per MDN &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;iterator protocol&lt;/code&gt; defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In plain English: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a rule which defines &lt;code&gt;shape&lt;/code&gt; of values during iteration. &lt;/li&gt;
&lt;li&gt;It also needs to tell us that there are &lt;code&gt;no more values&lt;/code&gt; when we have gone through all the values. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make any object &lt;code&gt;iterator&lt;/code&gt; we need to implement &lt;code&gt;next()&lt;/code&gt; method which will return an object which should have these two properties to it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;value&lt;/strong&gt; - value which will be available during iteration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;done&lt;/strong&gt; - boolean value to indicate that there are more values or not&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's quite simple. Isn't it ? here is an example of &lt;code&gt;Infinite Counter&lt;/code&gt; iterator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aRzCjrO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrip91e8ea8wp1kcopyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aRzCjrO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrip91e8ea8wp1kcopyx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a &lt;code&gt;finite counter&lt;/code&gt; iterator as well &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ycLwGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a19udcd2y0a3g93m1kc7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ycLwGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a19udcd2y0a3g93m1kc7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how when limit is reached we return &lt;code&gt;done: true&lt;/code&gt;. This is to tell the iterator like &lt;code&gt;for...of&lt;/code&gt; loop that there is no more values and you can stop the loop. &lt;/p&gt;

&lt;p&gt;Now that we know how to implement &lt;code&gt;iterator&lt;/code&gt;, let's head back to our &lt;code&gt;iterable&lt;/code&gt; and implement it fully. &lt;/p&gt;

&lt;p&gt;So for our example we want &lt;code&gt;user&lt;/code&gt; to be &lt;code&gt;iterable&lt;/code&gt; and return us &lt;code&gt;[key, value]&lt;/code&gt; when we iterate through &lt;code&gt;for...of&lt;/code&gt; loop. If you try to iterate &lt;code&gt;user&lt;/code&gt; in &lt;code&gt;for...of&lt;/code&gt; without implementing &lt;code&gt;iterable&lt;/code&gt; you will get following error:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeError: user is not iterable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eBDt0mHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5td63m0022h3zfk9ybp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eBDt0mHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5td63m0022h3zfk9ybp9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here is a &lt;a href="https://codesandbox.io/s/iterable-pqj4b?file=/src/userIterable.js"&gt;codesandbox&lt;/a&gt; implementation of making &lt;code&gt;user&lt;/code&gt; iterable: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yF_VuA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/871wg9ypjx4lmdsfieix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yF_VuA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/871wg9ypjx4lmdsfieix.png" alt="Screenshot 2021-10-02 at 6.38.29 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we have added &lt;code&gt;[Symbol.iterator]&lt;/code&gt; which intern return an object containing our &lt;code&gt;next()&lt;/code&gt; function which implements &lt;code&gt;iterator&lt;/code&gt; protocol. &lt;/p&gt;

&lt;p&gt;We can reduce some of code if we use as special kind of function called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#generator_functions"&gt;Generator Functions&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// with our own implementation of iterator &lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//with Generator function&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#generator-functions"&gt;
  &lt;/a&gt;
  Generator Functions:
&lt;/h2&gt;

&lt;p&gt;Generator Functions are just a syntactic sugar. In our own implementation of &lt;code&gt;iterator&lt;/code&gt; function we need to keep track of internal states like &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;done&lt;/code&gt;. Generator functions returns a special iterator which is called &lt;code&gt;Generator&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Generator functions are declared with &lt;code&gt;function*&lt;/code&gt; syntax. And it uses a special keyword &lt;code&gt;yield&lt;/code&gt; to give us values over course of iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//definde function with * &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//yield something here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#yield-vs-return"&gt;
  &lt;/a&gt;
  yield Vs return
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; is very different from &lt;code&gt;return&lt;/code&gt;. When we return from a function, it simply means end of execution and we come out of function. Where as when we &lt;code&gt;yield&lt;/code&gt;, generator function pauses the execution and keep track of what to yield next. So when we call &lt;code&gt;next&lt;/code&gt; again on our generator it will &lt;code&gt;yield&lt;/code&gt; next value in line. &lt;/p&gt;

&lt;p&gt;Let's take a look of an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// defined Counter generator&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// create an instance of COunter&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//first call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: false, value: 1}&lt;/span&gt;

&lt;span class="c1"&gt;// second call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: false, value: 2}&lt;/span&gt;

&lt;span class="c1"&gt;// Third call &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;//{done: true, value: undefined}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see when we create instance of our &lt;code&gt;generator&lt;/code&gt; it return us an &lt;code&gt;iterator&lt;/code&gt;. It does following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we call &lt;code&gt;next&lt;/code&gt; first time it will &lt;code&gt;yield&lt;/code&gt; a &lt;code&gt;{done: false, value: 1}&lt;/code&gt; and pause.&lt;/li&gt;
&lt;li&gt;When we call &lt;code&gt;next&lt;/code&gt; again it keeps track of it's state and &lt;code&gt;yield&lt;/code&gt; &lt;code&gt;{done: false, value: 2}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When we call last &lt;code&gt;next&lt;/code&gt; as there is nothing to yield any more it gives us &lt;code&gt;{done: true, value: undefined}&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can keep on calling &lt;code&gt;next()&lt;/code&gt; after it is done, but it will always give you &lt;code&gt;{done: true, value: undefined}&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now let's use generator for our &lt;code&gt;Infinite Counter&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infinite-counter-with-generators"&gt;
  &lt;/a&gt;
  Infinite Counter with Generators
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;InfiniteCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;infinity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;InfiniteCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 1}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 2}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="c1"&gt;// {done: false, value: 3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, with &lt;code&gt;Generator&lt;/code&gt; it is a lot cleaner. &lt;/p&gt;

&lt;p&gt;You might be thinking, it's all cool. But I do not want to do all this just to make an object &lt;code&gt;Iterable&lt;/code&gt;. I have &lt;code&gt;Object.entries&lt;/code&gt; I will use that. Give me some good practical example. &lt;/p&gt;

&lt;p&gt;So here it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practical-example"&gt;
  &lt;/a&gt;
  Practical example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to implement very basic &lt;a href="https://dev.to/vaidehijoshi/linked-lists--basecs-video-series--2le8"&gt;LinkedList&lt;/a&gt;. It only contain following methods &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add - To add new elements to LinkedList&lt;/li&gt;
&lt;li&gt;size - A getter the size of LinkedList&lt;/li&gt;
&lt;li&gt;head - A getter for head node&lt;/li&gt;
&lt;li&gt;tail - A getter for tail
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main portion of code to check is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how I made &lt;code&gt;LinkedList&lt;/code&gt; iterable by implementing &lt;code&gt;[Symbol.iterator]&lt;/code&gt;. &lt;code&gt;*&lt;/code&gt; in front of &lt;code&gt;[Symbol.iterator]&lt;/code&gt; makes it a &lt;code&gt;generator&lt;/code&gt; and I am &lt;code&gt;yield&lt;/code&gt;ing the values until whole list is exhausted. &lt;/p&gt;

&lt;p&gt;Next portion to look at is &lt;code&gt;toString&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`[&lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see here use take advantage of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_array_literals"&gt;Spread operator&lt;/a&gt; in array  of Iterable. I spread it in an array then take advantage of &lt;code&gt;toString&lt;/code&gt; of Array object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Redux Saga&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently I got to know that one of Redux libraries &lt;a href="https://redux-saga.js.org/"&gt;Saga&lt;/a&gt; uses generators heavily. &lt;/p&gt;

&lt;p&gt;Some of example used here can be found in this Codesandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/iterable-pqj4b"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-my-other-articles"&gt;
  &lt;/a&gt;
  Read my other articles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/xenoxdev/special-kind-of-array-tuple-4l1h"&gt;Special kind of array in Typescript - Tuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/xenoxdev/curious-case-of-sparse-array-in-js-38h7"&gt;Curious case of sparse Arrays in JS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/VikasYadav_Dev"&gt;twitter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol"&gt;Official MDN Iterable and Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#generator_functions"&gt;Official MDN Generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Basic Responsive Websites</title>
      <author>Danielle Ellis</author>
      <pubDate>Mon, 04 Oct 2021 01:06:46 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/basic-responsive-websites-473d</link>
      <guid>https://dev.to/thedanielleellis/basic-responsive-websites-473d</guid>
      <description>&lt;p&gt;In this blog, I will share some general concepts of how to implement a responsive design to your website that it is easy to follow. Creating a responsive website can be a bit confusing at first, but once you understand the basic foundations you will be good to go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-responsive-website"&gt;
  &lt;/a&gt;
  What is a Responsive Website?
&lt;/h2&gt;

&lt;p&gt;Responsive Websites allow websites and pages to display on all devices and screen sizes by automatically adapting to the screen, whether it's a desktop, laptop, tablet, or smartphone. We do this by working with CSS using various settings to deliver the best experience to users. To better understand we will discuss the basic concepts of Media Queries and CSS Units. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-queries"&gt;
  &lt;/a&gt;
  Media Queries
&lt;/h2&gt;

&lt;p&gt;Media Queries are conditions that you apply to your CSS. You tell the browser to add or remove specific css rules depending on the capabilities of a device. As the screen size changes, we need rearrange our layout. Typically, it would be structured vertically as the screen size decreases. &lt;/p&gt;

&lt;p&gt;The syntax for a media query looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media &amp;lt;media-type&amp;gt; and (expressions) {
     CSS code;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;@media tells the browser that we are starting a media query. &lt;/li&gt;
&lt;li&gt;media-type describes the kind of device rules we will apply to. For ex: we can place media-type "screen" here. This is an optional input. If we do not use it the rules will be used for all devices. &lt;/li&gt;
&lt;li&gt;(expression) can be a be the width or orientation of the device. &lt;/li&gt;
&lt;li&gt;Inside the media query we can specify some css rules that should be applied &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an real-life example of Media Query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (max-width: 500px) {
  .Projects .Container .img
    width: 80%;
    padding-right: 20%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we did not use the optional media-type. Instead we have the expression max-width: 500px (our breaking point) which tells the browser that the rules inside our media query should be limited to devices that have a screen width of 500px or smaller. Inside our media query we have our regular css code with values of your choice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-units"&gt;
  &lt;/a&gt;
  CSS Units
&lt;/h2&gt;

&lt;p&gt;CSS Units determine the size of a property you're setting for an element or its content. &lt;/p&gt;

&lt;p&gt;Here is an example of a CSS unit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;font-size: 16px;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The font-size is the property, 16px is the value of the property. Px is a css unit called pixel. &lt;/p&gt;

&lt;p&gt;CSS Units can be categorized by Absolute Units and Relative Units: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ABSOLUTE UNITS&lt;/th&gt;
&lt;th&gt;RELATIVE UNITS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Fixed Value&lt;/td&gt;
&lt;td&gt;Scaled Values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;does not scale when the screen size changes&lt;/td&gt;
&lt;td&gt;they scale relative to something else&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ex: px (pixels)&lt;/td&gt;
&lt;td&gt;Ex: Relative to their parent (%), viewport (vw, vh), font size (em, rem)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Relative Units is what will help us build responsive websites. Let's discuss in detail about the most common units. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relative to their parent(%):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CSS FILE
.App .Parent {
  background-color: blue;
  width: 100%
}
.App .Child {
  background-color: yellow;
  width: 50%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the example, inside a parent div, we have a child div. The child div will be 50% of the parent div. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN3GQ2vw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slimcpp0go906h1k27e6.png" alt="Parent-Child Div"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Viewport (vw, vh)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The viewport is the user's visible area. Whether it is a desktop or a smartphone. vw stands for viewport width. vh stands for viewport height. For example: 100vh is 100% of the viewport height (100% height of a smartphone or 100% height of a desktop).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Font size (em, rem)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;em - are relative to the font size (always x times of the parent). For instance, 1em is equal to the font-size of the parent. 2em is twice the font size of the parent. 3em is 3 times the font size of the parent.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTML:
&amp;lt;div className="Parent"&amp;gt;
  &amp;lt;h1&amp;gt;Main Title&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;Next Title&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;

CSS:
.App .Parent {
  font-size:16px
}
.App .Parent h1 {
  font-size: 3em;
}
.App .Parent h2 {
  font-size: 2em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our Parent div we have a font size of 16px. In our h1 we have a font size of 3em which is 3 times the font size of its parent with 16px. Therefore our h1 has 48px (16px*3em) and our h2 has 32px (16px*2em).&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGIl0JNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c928kwuc55i4rf052lbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGIl0JNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c928kwuc55i4rf052lbd.png" alt="Screen Shot 2021-10-03 at 7.32.16 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rem - are relative to the roots html font size. If the root html is not defined then it will be equal to the default font size of the browser (16px usually). This is a more preferred method.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CSS:
html {
  font-size: 20px;
}
.App .Parent h1 {
  font-size: 3rem;
}
.App .Parent h2 {
  font-size: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the root font-size is 20px. Our h1 is 3 times the root (20px*3rem). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-relative-units"&gt;
  &lt;/a&gt;
  Applying Relative Units
&lt;/h2&gt;

&lt;p&gt;In order to apply these relative units for responsive websites, we can go into our CSS file and change our absolute units to relative units where it is needed. We can also add media queries throughout our css file. Now that you understand the basic concepts of making responsive websites try it out. For more complex websites, more concepts will need to be applied. There are many resources you can use for further details such as: YouTube videos and popular sites such as Udemy, Codecademy, Treehouse, etc.  &lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>t3rm.dev is a web-based terminal where commands are minted as collectible NFTs</title>
      <author>t3rm.dev</author>
      <pubDate>Mon, 04 Oct 2021 00:11:45 +0000</pubDate>
      <link>https://dev.to/t3rmdotdev/t3rm-dev-is-a-web-based-terminal-where-commands-are-minted-as-collectible-nfts-1nb8</link>
      <guid>https://dev.to/t3rmdotdev/t3rm-dev-is-a-web-based-terminal-where-commands-are-minted-as-collectible-nfts-1nb8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-to-t3rmdev-the-unstoppable-cli-where-commands-are-minted-as-nfts"&gt;
  &lt;/a&gt;
  Welcome to t3rm.dev, the unstoppable CLI where commands are minted as NFTs.
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Why do we need a command line interface on IPFS, connected through Ethereum, where commands are minted as NFTs, you ask? &lt;strong&gt;Because it’s f*cking cool.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will find &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt; at the intersection of art, dev, and 80s nostalgia.&lt;/p&gt;

&lt;p&gt;Each command line program is minted as a unique NFT using the IPFS protocol to store the metadata and source code, similar to artwork / video NFTs.&lt;/p&gt;

&lt;p&gt;The website runs as a serverless dApp, hosted with a dnsLink over IPNS using Fleek, where commands are discovered and mirrored by a peer-to-peer network and cached onto Cloudflare and other gateways. There is no API or backend running underneath t3rm — everything runs through the Ethereum blockchain.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Visit &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;info&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To get information about a token or package, you can run the command &lt;code&gt;info token &amp;lt;id&amp;gt;&lt;/code&gt; or &lt;code&gt;info pkg dev.t3rm.&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#discover-your-identity"&gt;
  &lt;/a&gt;
  Discover your identity
&lt;/h1&gt;

&lt;p&gt;There are &lt;strong&gt;1,337&lt;/strong&gt; unique identities on &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt; for users to discover. Each identity is a tradable collectible NFT rendered in text-form. These NFTs grant their owner access to special privileges within the platform and voting rights inside the &lt;a href="https://snapshot.org/#/t3rm.eth"&gt;t3rm DAO&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;whoami&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#mint-your-command"&gt;
  &lt;/a&gt;
  Mint your command
&lt;/h1&gt;

&lt;p&gt;To create a new package on the t3rm platform:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;mint&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: we recommend that packages use the bundle prefix: &lt;code&gt;dev.t3rm.&lt;/code&gt; for best compatibility.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-your-artwork"&gt;
  &lt;/a&gt;
  Create your artwork
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://art-txt.xyz"&gt;Art.txt&lt;/a&gt; allows anyone to mint quotes and artwork as 100% on-chain text-based NFTs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLNKTsrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydv45jzvlfwxzdp2i5u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLNKTsrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydv45jzvlfwxzdp2i5u0.png" alt="Art-txt.xyz homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command: &lt;code&gt;connect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;art&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Art.txt has a new graphical interface at &lt;a href="https://art-txt.xyz"&gt;https://art-txt.xyz&lt;/a&gt;. While many projects claim to be "on-chain," Art.txt is 100% on-chain with the storage of each character forever etched into the Ethereum smart contract.&lt;/p&gt;

&lt;p&gt;The artwork created on Art.txt is viewable in SVG-form (see: &lt;a href="https://opensea.io/collection/art-txt"&gt;https://opensea.io/collection/art-txt&lt;/a&gt;) or raw-text form.&lt;/p&gt;

&lt;p&gt;For help setting up your package or using &lt;a href="https://t3rm.dev"&gt;t3rm.dev&lt;/a&gt;, stop by our Discord community at &lt;a href="//discord.gg/t99bHhMQtK"&gt;discord.gg/t99bHhMQtK&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nfts</category>
      <category>ethereum</category>
      <category>crypto</category>
      <category>nft</category>
    </item>
    <item>
      <title>Fazendo um curso na EduTools</title>
      <author>Ederson Ferreira</author>
      <pubDate>Sun, 03 Oct 2021 23:56:28 +0000</pubDate>
      <link>https://dev.to/kotlinautas/fazendo-um-curso-na-edutools-1kbp</link>
      <guid>https://dev.to/kotlinautas/fazendo-um-curso-na-edutools-1kbp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-edutools"&gt;
  &lt;/a&gt;
  O quê é EduTools?
&lt;/h2&gt;

&lt;p&gt;EduTools é um recurso de diversas IDE's da &lt;a href="https://www.jetbrains.com"&gt;Jetbrains&lt;/a&gt; onde pessoas que buscam aprender diferentes linguagens podem fazer um curso, ou resolver uma série de exercícios sobre um conceito ou uma linguagem.&lt;/p&gt;

&lt;p&gt;A EduTools também serve como plataforma para pessoas educadoras que querem criar exercícios ou cursos sobre uma linguagem ou conceito específico, disponibilizando esse curso tanto de maneira privada quanto pública.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#materiais"&gt;
  &lt;/a&gt;
  Materiais
&lt;/h2&gt;

&lt;p&gt;Será necessário ter o &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; instalado na máquina.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-plugin-da-edutools"&gt;
  &lt;/a&gt;
  Instalando plugin da EduTools
&lt;/h2&gt;

&lt;p&gt;Precisaremos instalar o plugin da EduTools para IntelliJ para podermos criar e fazer um curso com EduTools. Primeiro vá ás configurações do IntelliJ em &lt;em&gt;File&lt;/em&gt; &amp;gt; &lt;em&gt;Settings&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcX4Mt8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/assets/menu-settings-intellij-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcX4Mt8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/assets/menu-settings-intellij-01.png" alt="Localização do menu settings do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vá á seção &lt;em&gt;Plugins&lt;/em&gt;, pesquise por EduTools na parte de &lt;em&gt;Marketplace&lt;/em&gt; e instale o plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKK0iapU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzr6fo0cqnu7axg4g7dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKK0iapU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzr6fo0cqnu7axg4g7dm.png" alt="edutools no marketplace do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come%C3%A7ando-um-curso-na-edutools"&gt;
  &lt;/a&gt;
  Começando um curso na EduTools
&lt;/h2&gt;

&lt;p&gt;Para começar um novo curso na EduTools, vá á opção &lt;strong&gt;My Courses&lt;/strong&gt; na tela inicial do IntelliJ, e clique no botão &lt;strong&gt;Start New Course&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSzprkdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ja25e59gidfxzrd1925.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSzprkdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ja25e59gidfxzrd1925.png" alt="botão start new course intellij"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso, irá aparecer uma lista de cursos que podem ser feitos na EduTools. O primeiro é um curso feito pela própria JetBrains chamado &lt;strong&gt;Kotlin Koans&lt;/strong&gt;. Vamos usar esse curso como exemplo neste artigo.&lt;/p&gt;

&lt;p&gt;Para começar esse curso, clique no botão &lt;strong&gt;Start&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_PYy0fU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93qr9pgzp7w595cs08lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_PYy0fU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93qr9pgzp7w595cs08lm.png" alt="botão start no curso kotlin koans"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando a tela carregar, a interface será mostrada com três partes, uma referente ao seu progresso no curso, com todas as lições e atividades que podem ser feitas, uma com o editor de código, e outra com o texto da lição atual, junto com um botão de &lt;strong&gt;Check&lt;/strong&gt; para testar a resposta atual.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7IYYWrLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqv3o5pawm5dfemcj9wb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7IYYWrLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqv3o5pawm5dfemcj9wb.png" alt="interface kotlin koans na edutools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fazendo-um-exerc%C3%ADcio"&gt;
  &lt;/a&gt;
  Fazendo um exercício
&lt;/h2&gt;

&lt;p&gt;Para fazer um exercício na EduTools, você precisa ler a descrição o exercício, e fazer a tarefa que está sendo proposta. No caso, para o primeiro exercício, devemos retornar uma string &lt;code&gt;OK&lt;/code&gt; da função &lt;code&gt;start&lt;/code&gt; (Veja na seção 3 da captura acima)&lt;/p&gt;

&lt;p&gt;Logo, para resolver o exercício, use o editor de texto no meio da tela para mudar o &lt;code&gt;TODO&lt;/code&gt; da função, retornando a string &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Antes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TODO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois disso, clique no botão &lt;strong&gt;Check&lt;/strong&gt; para rodar os testes unitários e ver se a sua reposta foi correta ou não.&lt;/p&gt;

&lt;p&gt;Caso você tenha seguido os passos corretamente, a EduTools informará que todos os testes passaram corretamente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_s9dJmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqhjgatmz4o19yhnnskl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_s9dJmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqhjgatmz4o19yhnnskl.png" alt="Testes do primeiro exercício com saída verdadeira"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, você pode clicar em &lt;strong&gt;Next&lt;/strong&gt; para ir á proxima lição, e poder ir concluindo as atividades do Koans. Todas seguiram exatamente o mesmo esquema, um enunciado dando enredo e explicando o quê deve ser feito na atividade, e um editor de texto para você codar a solução, sempre buscando passar dos testes unitários.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Nesse artigo, você aprendeu como abrir um curso no EduTools, e como fazer um exercício nessa plataforma.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>jetbrains</category>
    </item>
    <item>
      <title>Backdrop-filters!</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Sun, 03 Oct 2021 23:17:10 +0000</pubDate>
      <link>https://dev.to/tolentinoel/backdrop-filters-3ec8</link>
      <guid>https://dev.to/tolentinoel/backdrop-filters-3ec8</guid>
      <description>&lt;p&gt;Hi! This blog is just to show recent backdrop-filters I've used!&lt;br&gt;
I am no expert but this is just me sharing what I've encountered in the hopes to help other newbie devs like me that might have an interest testing these effects out!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#backdropfilter"&gt;
  &lt;/a&gt;
  backdrop-filter:
&lt;/h2&gt;

&lt;p&gt;While filter applies the effect on the entire element including its children, backdrop-filter is more specific since it only applies as a ‘background effect’ or anything behind that element.&lt;/p&gt;

&lt;p&gt;It is limited on compatibility, so please bare with me since almost all of these would still need a workaround to apply the same effect.&lt;/p&gt;



&lt;p&gt;There are multiple values which backdrop-filter may be:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#blur"&gt;
  &lt;/a&gt;
  blur()
&lt;/h3&gt;

&lt;p&gt;Starting of with blur, which values can be of pixels or rem. The length value refers to the length of pixels blurring together hence, longer the length the blurry it is.&lt;br&gt;
I have examples on blur application on my previous blog(&lt;a href="https://dev.to/tolentinoel/frosted-glass-on-css-37bg"&gt;Frosted glass on CSS&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZwyd0Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd7pq3h8nrx19m98zns2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZwyd0Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qd7pq3h8nrx19m98zns2.png" alt="blur example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other workarounds for other browser were also discussed on &lt;a href="https://stackoverflow.com/questions/38145368/css-workaround-to-backdrop-filter"&gt;stackoverflow&lt;/a&gt; by other fellow devs!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#sepia"&gt;
  &lt;/a&gt;
  sepia()
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sepia&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt; 

&lt;span class="c"&gt;/* Can be an IE &amp;amp; Firefox fallback: */&lt;/span&gt;
&lt;span class="c"&gt;/* Not exactly the same but definitely can be altered for a more similar effect*/&lt;/span&gt;
&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#715515&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;span class="nt"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y9n9qZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnyvkt8arx3tenr9aem6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Y9n9qZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnyvkt8arx3tenr9aem6.png" alt="Sepia example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Workaround:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yX5P-XUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1u7vhw2wf0xx4pauxb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yX5P-XUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1u7vhw2wf0xx4pauxb5.png" alt="Sepia workaround"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#grayscale"&gt;
  &lt;/a&gt;
  grayscale()
&lt;/h3&gt;

&lt;p&gt;Values can be a number or percentage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sepia&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;sepia&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* 50% of the effect */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov3RP6u0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfzbtzjvqx0x6gldoiid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov3RP6u0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfzbtzjvqx0x6gldoiid.png" alt="grayscale"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#huerotate"&gt;
  &lt;/a&gt;
  hue-rotate()
&lt;/h3&gt;

&lt;p&gt;I think this is my current favorite effect. This effect changes the whole hue of the image or background color depending on the angle values!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hue-rotate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;220&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* same effect as -140deg */&lt;/span&gt;
&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hue-rotate&lt;/span&gt;&lt;span class="o"&gt;(.&lt;/span&gt;&lt;span class="err"&gt;61&lt;/span&gt;&lt;span class="nt"&gt;turn&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* same effect as 220deg */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7alPjgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s54a8bq3l6ewrp3o573b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7alPjgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s54a8bq3l6ewrp3o573b.png" alt="hue-rotate"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you wanted to take a peek of each's compatibility on browsers, check out &lt;a href="https://caniuse.com/"&gt;caniuse.com&lt;/a&gt; and browse around for any css compatibility you wanna know about.&lt;/p&gt;

&lt;p&gt;There are more backdrop-filter effects you should try! Check out these CodePens by other creators!&lt;/p&gt;
Simon's CodePen



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/typo3-freelancer/embed/YzGQMmP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Mahdi's CodePen



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/hamidimahdi92/embed/oNZZdjg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Python 101 Series</title>
      <author>Sahil</author>
      <pubDate>Sun, 03 Oct 2021 23:11:00 +0000</pubDate>
      <link>https://dev.to/sahilfruitwala/python-101-series-9em</link>
      <guid>https://dev.to/sahilfruitwala/python-101-series-9em</guid>
      <description>&lt;p&gt;Python, world's one of the most popular general-purpose programming languages. According to the &lt;a href="https://insights.stackoverflow.com/survey/2021?_ga=2.236209345.190202062.1628102352-126161871.1625855113#technology-most-popular-technologies"&gt;2021 Developer Survey&lt;/a&gt; Python is the 4th most popular technology rated by &lt;em&gt;Professional  Developers&lt;/em&gt;. Python is easy to learn and use programming language, and I believe that is one of the reasons why YOU also wanted to learn Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdVlKMF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bcumar4y01u9jm70sf1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdVlKMF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bcumar4y01u9jm70sf1.png" alt="Survey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get-from-this-series"&gt;
  &lt;/a&gt;
  What you will get from this series
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; You will learn about Python's history&lt;/li&gt;
&lt;li&gt; You will understand basic concepts of programming&lt;/li&gt;
&lt;li&gt; You will be able to write and understand code on your own&lt;/li&gt;
&lt;li&gt; You will work on some small projects&lt;/li&gt;
&lt;li&gt; You will get knowledge to know "what to google when you stuck"&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#outline-of-this-series"&gt;
  &lt;/a&gt;
  Outline of this  series
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Introduction

&lt;ul&gt;
&lt;li&gt;  History&lt;/li&gt;
&lt;li&gt;  Install Python&lt;/li&gt;
&lt;li&gt;  Test Installation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; Variable &amp;amp; DataType&lt;/li&gt;
&lt;li&gt; Conditional Statements&lt;/li&gt;
&lt;li&gt; Data Structures&lt;/li&gt;
&lt;li&gt; Loops &amp;amp; Iterations&lt;/li&gt;
&lt;li&gt; Functions&lt;/li&gt;
&lt;li&gt; Regular Expression &amp;amp; Files&lt;/li&gt;
&lt;li&gt; Object-Oriented Programming&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#is-this-series-for-you"&gt;
  &lt;/a&gt;
  Is this series for you?
&lt;/h2&gt;

&lt;p&gt;I know, I know! You are the audience. But I am specifically targeting the people who are just getting started or new to the programming world. It does not mean people who know programming won't get anything. There might be some concepts that you have not learned yet, or you want to refresh the concepts you have learned once. It is always a good idea to develop a strong core.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-use-of-python"&gt;
  &lt;/a&gt;
  What is the use of Python?
&lt;/h2&gt;

&lt;p&gt;Nowadays, you will see everyone exaggerating the use of Python. People will say, python can be used here and here and here. But should you use Python everywhere?&lt;/p&gt;

&lt;p&gt;The simple answer is NO. I agree, Python is an amazing language, but every programming language has its use case. Python is broadly used for the following tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Back-end development&lt;/li&gt;
&lt;li&gt;System Scripting / Automation Scripting&lt;/li&gt;
&lt;li&gt;Internet of Things&lt;/li&gt;
&lt;li&gt;Data Science &amp;amp; Machine Learning&lt;/li&gt;
&lt;li&gt;Small Part of Software / Game Development&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Time to decide. Now, after reading all these if you think that Python can be useful to you then let's do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8JuHpo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkngnb03sfmjwgk0k3s1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8JuHpo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkngnb03sfmjwgk0k3s1.png" alt="Let's do it!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or doubts, mention them in the comment section or reach out to me on &lt;a href="https://twitter.com/Sahil_Fruitwala"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/sahilfruitwala/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://www.instagram.com/motivated.manush/"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want me to explain any specific topic, mention that in the comment section below 👇.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>machinelearning</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Resources that every developer should know.</title>
      <author>Ivan Zadivar</author>
      <pubDate>Sun, 03 Oct 2021 22:17:24 +0000</pubDate>
      <link>https://dev.to/ivanz123/resources-that-every-developer-should-know-3jkd</link>
      <guid>https://dev.to/ivanz123/resources-that-every-developer-should-know-3jkd</guid>
      <description>&lt;p&gt;Hi guys! I have created this publication, because I wanted to share some tools or resources that I use in my day to day when I am developing an app. And some of these may work for you. Get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-code-editors"&gt;
  &lt;/a&gt;
  Online Code Editors.
&lt;/h2&gt;

&lt;p&gt;Sometimes when we are developing an app, we need to perform a process, create an algorithm, and we do not want to perform in our project. We have the alternative of creating a new project and testing. But sometimes we need it to be fast, so online code editors are not great.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codesandbox"&gt;
  &lt;/a&gt;
  Codesandbox.
&lt;/h3&gt;

&lt;p&gt;Is defined as "Where teams build faster, together&lt;br&gt;
Create, share, and get feedback with collaborative sandboxes for rapid web development". Visit the following link: &lt;a href="https://codesandbox.io"&gt;https://codesandbox.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vjjfaSLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd5bhjau2t4e241k14yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vjjfaSLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd5bhjau2t4e241k14yx.png" alt="Codesandbox Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codeopen"&gt;
  &lt;/a&gt;
  Codeopen.
&lt;/h3&gt;

&lt;p&gt;Is defined as "The best place to build, test, and discover front-end code. CodePen is a social development environment for front-end designers and developers. Build and deploy a website, show off your work, build test cases to learn and debug, and find inspiration.". Visit the following link: &lt;a href="https://codepen.io"&gt;https://codepen.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PO8LBkCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hn869rcgkv5hstfxapj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PO8LBkCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hn869rcgkv5hstfxapj.png" alt="Codeopen Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stackblitz"&gt;
  &lt;/a&gt;
  Stackblitz.
&lt;/h3&gt;

&lt;p&gt;Is defined as "The fastest, most secure dev environment on the planet.". Visit the following link: &lt;a href="https://stackblitz.com"&gt;https://stackblitz.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YziwlJpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgi12eor2jzwlaraijk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YziwlJpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrgi12eor2jzwlaraijk.png" alt="Stackblitz Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other online code editors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codeanywhere.com"&gt;https://codeanywhere.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jsfiddle.net"&gt;https://jsfiddle.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeshare.io"&gt;https://codeshare.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing.
&lt;/h2&gt;

&lt;p&gt;When we have finished our app, it is time to test that everything we have done works correctly, and prevent things from breaking once in production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cypressio"&gt;
  &lt;/a&gt;
  Cypress.io
&lt;/h3&gt;

&lt;p&gt;Cypress is a front-end automated testing tool built for the modern web. Cypress is based on a new architecture and runs on the same execution cycle as the application under test. As a result, Cypress provides better, faster, and more reliable tests for everything that runs in a browser. Cypress works on any front-end website or framework. Visit the following link: &lt;a href="https://www.cypress.io"&gt;https://www.cypress.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88FrdrCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8hj9xeucl2xyjmpz659.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88FrdrCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8hj9xeucl2xyjmpz659.png" alt="Cypress.io Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-platform"&gt;
  &lt;/a&gt;
  API Platform.
&lt;/h2&gt;

&lt;p&gt;I use this tool when I am creating an API and I do not want to develop the Frontend at the time of API development, I know that there are extensions in VSCode such as REST Client. But I want to share some programs with you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postman"&gt;
  &lt;/a&gt;
  Postman.
&lt;/h3&gt;

&lt;p&gt;Postman is an API platform for building and using APIs. Postman simplifies each step of the API lifecycle and streamlines collaboration so you can create better APIs—faster. You can download in the following link: &lt;a href="https://www.postman.com"&gt;https://www.postman.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tcjSpBze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzosysvkhih5fo50fcs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tcjSpBze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzosysvkhih5fo50fcs8.png" alt="Postman Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insomnia"&gt;
  &lt;/a&gt;
  Insomnia.
&lt;/h3&gt;

&lt;p&gt;Is defined as "Deliver high quality APIs through standards and collaboration with the Insomnia API design platform". You can download in the following link: &lt;a href="https://insomnia.rest"&gt;https://insomnia.rest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atWxoo9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4w5jaiyrkl7y5kx85b3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atWxoo9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4w5jaiyrkl7y5kx85b3.png" alt="Insomnia Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-testing"&gt;
  &lt;/a&gt;
  Email Testing.
&lt;/h2&gt;

&lt;p&gt;Many times when we want to incorporate email verification for our users, or we are developing an ecommerce, we send offers to our clients we need to send emails. Here are some tools that allow us to test this entire process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mailtrap"&gt;
  &lt;/a&gt;
  Mailtrap.
&lt;/h3&gt;

&lt;p&gt;This is one of the best tools that I have used when I am developing an app that needs to send emails. Click in the following link: &lt;a href="https://mailtrap.io"&gt;https://mailtrap.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAYifqBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jpo5uiu16ycxwu6zej8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAYifqBg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jpo5uiu16ycxwu6zej8.png" alt="Mailtrap Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sendgrid"&gt;
  &lt;/a&gt;
  Sendgrid.
&lt;/h3&gt;

&lt;p&gt;Now sendgrid brings new functionalities, and one of these is to be able to test our emails before going to production. Click here: &lt;a href="https://sendgrid.com/solutions/email-marketing/email-testing"&gt;https://sendgrid.com/solutions/email-marketing/email-testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RJrB1WDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkmjx7m9z92jfnu5kgur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RJrB1WDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkmjx7m9z92jfnu5kgur.png" alt="Senedgrid Testing Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.htmlemailcheck.com"&gt;https://www.htmlemailcheck.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mock-data"&gt;
  &lt;/a&gt;
  Mock Data.
&lt;/h2&gt;

&lt;p&gt;Data generators. Many times when we are developing an app, we need to generate false records to be able to carry out tests, and check that everything works perfectly. Imagine that you are creating a virtual store, and it contains products, categories, customers, promotions, among others. If you realize there are many things, and it is a tedious and boring task, enter all these data. With these tools, you will take off that burden.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mockaroo"&gt;
  &lt;/a&gt;
  Mockaroo.
&lt;/h3&gt;

&lt;p&gt;Mockaroo is a website where you can create thousands of test data in just seconds, modify the fields that your database models will have and more ... Personally, this is the one I use the most. Visit the following link: &lt;a href="https://www.mockaroo.com"&gt;https://www.mockaroo.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFOqNnDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i05irw8f6fg7oz2fi5x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFOqNnDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i05irw8f6fg7oz2fi5x0.png" alt="Image Mockaroo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generatedata"&gt;
  &lt;/a&gt;
  Generatedata.
&lt;/h3&gt;

&lt;p&gt;Generatedata, on a website that allows you to create false data immediately, you can obtain streets, addresses, names, telephone numbers. In addition, to specify is what format you want, be it JSON, HTML, SQL and more. Visit the following link: &lt;a href="https://generatedata.com"&gt;https://generatedata.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qwn43MHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfjcy4ys18j9shz7eeon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qwn43MHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfjcy4ys18j9shz7eeon.png" alt="Generatedata image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other generate data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mockapi.io"&gt;https://mockapi.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://designer.mocky.io"&gt;https://designer.mocky.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.onlinedatagenerator.com"&gt;https://www.onlinedatagenerator.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.randomuser.me"&gt;https://www.randomuser.me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images.
&lt;/h2&gt;

&lt;p&gt;It is very common to add images to our websites, but sometimes we want to have images in high definition. That is why I leave you some of the websites with the best images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  Undraw.
&lt;/h3&gt;

&lt;p&gt;Allows you to add svg images. In addition, it allows you to make aesthetic changes so that they are in sync with our website. Visit following link: &lt;a href="https://undraw.co/illustrations"&gt;https://undraw.co/illustrations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uohDDr5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uquykjkgag4adtgr7qjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uohDDr5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uquykjkgag4adtgr7qjy.png" alt="Undraw Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pexels"&gt;
  &lt;/a&gt;
  Pexels.
&lt;/h3&gt;

&lt;p&gt;This is one of the websites that I use the most to add images to my websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B3Txphuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlgsgelxy6ftal9xxbnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3Txphuz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlgsgelxy6ftal9xxbnc.png" alt="Pexels Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uiavatars"&gt;
  &lt;/a&gt;
  UiAvatars.
&lt;/h3&gt;

&lt;p&gt;If you've ever wondered how Google can add an avatar with your first and last name, take a look here: &lt;a href="https://ui-avatars.com"&gt;https://ui-avatars.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JEaQus9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpwiky6jw660d257ux8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JEaQus9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpwiky6jw660d257ux8t.png" alt="UiAvatars Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash"&gt;
  &lt;/a&gt;
  Unsplash.
&lt;/h3&gt;

&lt;p&gt;Is defined as "The internet’s source of freely-usable images.&lt;br&gt;
Powered by creators everywhere". Visit the following link: &lt;a href="https://unsplash.com"&gt;https://unsplash.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFMQbFop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/111j5ed2474j1dxqp3qq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFMQbFop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/111j5ed2474j1dxqp3qq.png" alt="Unsplash Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pixabay.com"&gt;https://pixabay.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://picsum.photos"&gt;https://picsum.photos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image-compression"&gt;
  &lt;/a&gt;
  Image Compression.
&lt;/h2&gt;

&lt;p&gt;There are times that our images are too heavy, and that slows down the loading of our website, now is the time to minify our images. Or use Lazy-Loading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tinypng"&gt;
  &lt;/a&gt;
  TinyPNG.
&lt;/h3&gt;

&lt;p&gt;This site allows us to compress images of all resolutions and extensions. Click in the following link: &lt;a href="https://tinypng.com"&gt;https://tinypng.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ynmzi139--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p832bgykk2q0dlb5lku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ynmzi139--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p832bgykk2q0dlb5lku.png" alt="TinyPNG Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ezgif.com/optipng"&gt;https://ezgif.com/optipng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#favicon-generators"&gt;
  &lt;/a&gt;
  Favicon generators.
&lt;/h2&gt;

&lt;p&gt;When we are about to deploy an application (or in development) we want to see an icon on the page. This icon is as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92PpeM3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6s08up4d0iemv9ag3z8r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92PpeM3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6s08up4d0iemv9ag3z8r.jpg" alt="Favivon example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#faviconico"&gt;
  &lt;/a&gt;
  Favicon.ico
&lt;/h3&gt;

&lt;p&gt;The only favicon generator you need for your next project. Quickly generate your favicon from text, image, or choose from hundreds of emojis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKt3VY1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32d00xtramj7ypcv9qjc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKt3VY1w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32d00xtramj7ypcv9qjc.png" alt="Favicon.io Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Others websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.favicon-generator.org"&gt;https://www.favicon-generator.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realfavicongenerator.net"&gt;https://realfavicongenerator.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.favicon.cc"&gt;https://www.favicon.cc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors.
&lt;/h2&gt;

&lt;p&gt;The safest thing is that you already know these pages, but I'll leave them here anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flatuicolors"&gt;
  &lt;/a&gt;
  Flatuicolors.
&lt;/h3&gt;

&lt;p&gt;In this page you will find beautiful colors for adding in your page, website or webapp. Visit the following link: &lt;a href="https://flatuicolors.com"&gt;https://flatuicolors.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o66EjZAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b3ylk9xuc6942cba67v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o66EjZAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6b3ylk9xuc6942cba67v.png" alt="Flatuicolors Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uigradients"&gt;
  &lt;/a&gt;
  UiGradients.
&lt;/h3&gt;

&lt;p&gt;This site, I use it normally when I need to have colors with gradients. Visit the following link: &lt;a href="https://uigradients.com"&gt;https://uigradients.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LnkB6n_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg153t1krf97eqvdtmm9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LnkB6n_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg153t1krf97eqvdtmm9.png" alt="UiGradient Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#htmlcolorcodes"&gt;
  &lt;/a&gt;
  Htmlcolorcodes.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4tblgc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otp53ztexczmllvvya80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4tblgc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otp53ztexczmllvvya80.png" alt="HtmlColorCodes image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcolors.com"&gt;https://htmlcolors.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.webfx.com/web-design/color-picker"&gt;https://www.webfx.com/web-design/color-picker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/colors/colors_picker.asp"&gt;https://www.w3schools.com/colors/colors_picker.asp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons.
&lt;/h2&gt;

&lt;p&gt;When we are developing an application we need to add icons to our buttons, card, toolbar and others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boxicons"&gt;
  &lt;/a&gt;
  Boxicons.
&lt;/h3&gt;

&lt;p&gt;On this site you will find a lot of icons to add to your components. Click in the following link: &lt;a href="https://boxicons.com"&gt;https://boxicons.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_lHyw3PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88lfd5zni0obemhddm2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lHyw3PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88lfd5zni0obemhddm2t.png" alt="Boxicons Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#font-awesome"&gt;
  &lt;/a&gt;
  Font Awesome.
&lt;/h3&gt;

&lt;p&gt;Well, every developer who is a few weeks old knows about this tool. 😂😂😂 I leave the link: &lt;a href="https://fontawesome.com"&gt;https://fontawesome.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-m1N-vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4g2nj8cfwm7egz8h3p4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-m1N-vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4g2nj8cfwm7egz8h3p4.png" alt="Font Awesome Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google-icons"&gt;
  &lt;/a&gt;
  Google Icons.
&lt;/h3&gt;

&lt;p&gt;Google also offers very nice icons, it also allows filtering these by categories, names, etc; so that the icon we are looking for is faster. Click here: &lt;a href="https://fonts.google.com/icons"&gt;https://fonts.google.com/icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7_bl0S2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dknefm2h6dm8fu2t9yaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7_bl0S2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dknefm2h6dm8fu2t9yaf.png" alt="Google Icons Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.flaticon.com"&gt;https://www.flaticon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com"&gt;https://icons8.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#text-generators"&gt;
  &lt;/a&gt;
  Text generators.
&lt;/h2&gt;

&lt;p&gt;The text generator is very useful when we are developing an application and we need to add filler text to see how it is being. And the truth is that it is quite tedious if we add it, especially when it is a large text. Here are some websites:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loremipsumio"&gt;
  &lt;/a&gt;
  Loremipsum.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eb76dbic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0a4olhcsmnklvfza8mi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eb76dbic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0a4olhcsmnklvfza8mi.png" alt="Image Lorem Ipsum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lorem Ipsum is a placeholder text commonly used in the graphics, graphics, and publishing industries to preview visual layouts and mockups. Click in the following link: &lt;a href="https://loremipsum.io"&gt;https://loremipsum.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other websites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lipsum.com"&gt;https://www.lipsum.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getlorem.com"&gt;https://getlorem.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.webfx.com/tools/lorem-ipsum-generator"&gt;https://www.webfx.com/tools/lorem-ipsum-generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the time of making this post, they are the tools that I use in my day to day, at least the one I remember. If there are tools that you use, do not forget to comment, which is very helpful for all of us to grow as a community. Regards and until next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-me-on-social-networks"&gt;
  &lt;/a&gt;
  Follow me on social networks.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;🎉 Twitter: &lt;a href="https://twitter.com/ToSatn2"&gt;https://twitter.com/ToSatn2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💡 Github: &lt;a href="https://github.com/IvanZM123"&gt;https://github.com/IvanZM123&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>tooling</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Do it in Keras! - Hacktoberfest</title>
      <author>Sebastian Ponce</author>
      <pubDate>Sun, 03 Oct 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/sebaspv/do-it-in-keras-hacktoberfest-4g2h</link>
      <guid>https://dev.to/sebaspv/do-it-in-keras-hacktoberfest-4g2h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#modern-deep-learning-architectures-and-tasks-all-implemented-in-keras"&gt;
  &lt;/a&gt;
  Modern deep learning architectures and tasks, all implemented in Keras
&lt;/h3&gt;

&lt;p&gt;Have you ever been in a situation where you scroll through forums, reddit, journal posts or even 5 year old github repos trying to find an example for a Deep Learning task that you want to implement using Python and Keras?&lt;/p&gt;

&lt;p&gt;Is your code not working because the original code was outdated?&lt;/p&gt;

&lt;p&gt;Are you tired of always seeing the same benchmark datasets without the possibility of implementing your own?&lt;/p&gt;

&lt;p&gt;Do you like to contribute to the spread of Deep Learning and want to implement your own examples in Keras?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Well, then Do it in Keras is for you!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-do-it-in-keras"&gt;
  &lt;/a&gt;
  What is Do it in Keras?
&lt;/h3&gt;

&lt;p&gt;Do it in Keras is a collection of easy to use Jupyter Notebooks hosted in Github which have various implementations of Deep Learning with custom datasets and future exercises for you to learn the most popular Deep Learning library: Keras.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-contribute-to-it"&gt;
  &lt;/a&gt;
  How do I contribute to it?
&lt;/h3&gt;

&lt;p&gt;Do it in Keras is now participating in Hacktoberfest, so you can not only learn a lot more about Keras and Open Source, but you can also win a lot of cool prizes!&lt;/p&gt;

&lt;p&gt;If you've never heard about Hacktoberfest, you can check it out &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To contribute to Do it in Keras, you only need to make a pull request on the official &lt;a href="https://github.com/sebaspv/do-it-in-keras"&gt;Do it in Keras repository&lt;/a&gt;. Anything related to Deep Learning with Keras helps, and you can also upload your own implementation of a Deep Learning task.&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>jupyter</category>
      <category>machinelearning</category>
      <category>hacktoberfest</category>
    </item>
  </channel>
</rss>
