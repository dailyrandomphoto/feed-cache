<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Useful React Libraries ⚛️ Part-2</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Thu, 08 Jul 2021 06:58:06 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/5-useful-react-libraries-part-2-4l0c</link>
      <guid>https://dev.to/chetan_atrawalkar/5-useful-react-libraries-part-2-4l0c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello Everyone👋&lt;/strong&gt;&lt;br&gt;
Here another part of my series &lt;strong&gt;React Useful Libraries⚛️&lt;/strong&gt;. So today, I want to share 5 react libraries that will help you to make react projects better and more customized.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1️⃣ React-Toastify&lt;/strong&gt;&lt;br&gt;
🎉 React-Toastify allows you to add notifications to your app with easily. You Can display a react component inside the toast. It's super easy to customize and provide dark mode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZcwVgbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RTF_1_cmzkfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZcwVgbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RTF_1_cmzkfe.jpg" alt="toast"&gt;&lt;/a&gt;&lt;br&gt;
📌&lt;a href="https://github.com/fkhadra/react-toastify#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
📡&lt;a href="https://github.com/fkhadra/react-toastify"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔗Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;$ npm install --save react-toastify&lt;/code&gt;&lt;br&gt;
&lt;code&gt;$ yarn add react-toastify&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;🔗Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';
 function App(){
    const notify = () =&amp;gt; toast("Wow so easy!");
return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={notify}&amp;gt;Notify!&amp;lt;/button&amp;gt;
        &amp;lt;ToastContainer /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2️⃣ RC-Slider&lt;/strong&gt;&lt;br&gt;
It is provide Slider UI component for React. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nquURky4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RCS_2_fb6mqj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nquURky4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646732/RL/RCS_2_fb6mqj.jpg" alt="Slide"&gt;&lt;/a&gt;&lt;br&gt;
📌&lt;a href="http://github.com/react-component/slider/"&gt;Homepage&lt;/a&gt;&lt;br&gt;
📡&lt;a href="https://github.com/react-component/slider"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔗Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install rc-slider&lt;/code&gt;&lt;br&gt;
&lt;strong&gt;🔗Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Slider, { Range } from 'rc-slider';
import 'rc-slider/assets/index.css';

export default () =&amp;gt; (
  &amp;lt;&amp;gt;
    &amp;lt;Slider /&amp;gt;
    &amp;lt;Range /&amp;gt;
  &amp;lt;/&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3️⃣ &lt;strong&gt;React Intl&lt;/strong&gt;&lt;br&gt;
React Intl is a library that helps to internationalize React applications. It provides components and API to format text, numbers, and dates. With the internationalization context provided by React Intl, we can use translation and formatting in any React component throughout the application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZ58h7VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RINT_3_atpwwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZ58h7VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RINT_3_atpwwd.jpg" alt="intl"&gt;&lt;/a&gt;&lt;br&gt;
📌&lt;a href="https://formatjs.io/docs/react-intl"&gt;Homepage&lt;/a&gt;&lt;br&gt;
📡&lt;a href="https://github.com/formatjs/formatjs"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm i -S react-intl&lt;/code&gt;&lt;br&gt;
🔗&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
import {injectIntl, IntlProvider, FormattedRelative, useIntl} from 'react-intl';

const MS_IN_DAY = 1e3 * 3600 * 24

const PostDate = ({date}) =&amp;gt; {
  const intl = useIntl()
  return (
    &amp;lt;span title={intl.formatDate(date)}&amp;gt;
      &amp;lt;FormattedRelativeTime value={(Date.now() - date)/MS_IN_DAY} unit="day"/&amp;gt;
    &amp;lt;/span&amp;gt;
  )
});

const App = ({post}) =&amp;gt; (
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{post.title}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;PostDate date={post.date} /&amp;gt;
    &amp;lt;/p&amp;gt;
    &amp;lt;div&amp;gt;{post.body}&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
);

ReactDOM.render(
  &amp;lt;IntlProvider locale={navigator.language}&amp;gt;
    &amp;lt;App
      post={{
        title: 'Hello, World!',
        date: new Date(1459913574887),
        body: 'Amazing content.',
      }}
    /&amp;gt;
  &amp;lt;/IntlProvider&amp;gt;,
  document.getElementById('container')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4️⃣ &lt;strong&gt;React Tippy&lt;/strong&gt;&lt;br&gt;
Tippy.js is a lightweight, easy-to-use library that provides tooltip solutions, as well as other pop-out style GUI tools. A tooltip is a textbox that appears while your cursor hovers over an element in an application and is useful for displaying additional information that a user may need.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O9XaAh54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RTT_4_wwlrve.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O9XaAh54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RTT_4_wwlrve.jpg" alt="tooltip"&gt;&lt;/a&gt; &lt;br&gt;
📌&lt;a href="https://github.com/tvkhoa/react-tippy"&gt;Homepage&lt;/a&gt;&lt;br&gt;
📡&lt;a href="https://github.com/tvkhoa/react-tippy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install react-tippy&lt;/code&gt;&lt;br&gt;
🔗&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
First, you need import css&lt;br&gt;
&lt;code&gt;import 'react-tippy/dist/tippy.css'&lt;/code&gt;&lt;br&gt;
Second, add tooltip component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  Tooltip,
} from 'react-tippy';


&amp;lt;Tooltip
  // options
  title="Welcome to React"
  position="bottom"
  trigger="click"
&amp;gt;
  &amp;lt;p&amp;gt;
    Click here to show popup
  &amp;lt;/p&amp;gt;
&amp;lt;/Tooltip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5️⃣&lt;strong&gt;React Moment&lt;/strong&gt;&lt;br&gt;
It's a react component for the moment date library. Moment date library for parsing, validating, manipulating, and formatting dates.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EGtXdJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RM_5_bqajlh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EGtXdJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/chetan-ca/image/upload/v1625646731/RL/RM_5_bqajlh.jpg" alt="moment"&gt;&lt;/a&gt;&lt;br&gt;
📌&lt;a href="https://github.com/headzoo/react-moment#readme"&gt;Homepage&lt;/a&gt;&lt;br&gt;
📡&lt;a href="https://github.com/headzoo/react-moment"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗&lt;strong&gt;Installation&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install --save moment react-moment&lt;/code&gt;&lt;br&gt;
🔗&lt;strong&gt;Usage&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React  from 'react';
import Moment from 'react-moment';

export default class MyComponent extends React.Component {
    render() {
        return (
            const dateToFormat = '1976-04-19T12:59-0500';
            &amp;lt;Moment&amp;gt;{dateToFormat}&amp;lt;/Moment&amp;gt;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like this react libraries please drop your comments about your thoughts and suggest more libraries you used  in react projects.&lt;br&gt;
For more content follow me on&lt;br&gt;
Instagram &lt;a class="mentioned-user" href="https://dev.to/chetan"&gt;@chetan&lt;/a&gt;
 .fullstack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank You&lt;/strong&gt;&lt;br&gt;
😎 &lt;strong&gt;Keep Claim And Just Code It!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>github</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Start Your Blog for Free : Best Platforms</title>
      <author>Mayank Pathak</author>
      <pubDate>Thu, 08 Jul 2021 06:57:03 +0000</pubDate>
      <link>https://dev.to/mayankpathak/start-your-blog-for-free-best-platforms-5198</link>
      <guid>https://dev.to/mayankpathak/start-your-blog-for-free-best-platforms-5198</guid>
      <description>&lt;p&gt;Hey all 👋, how you doing! Hope everything going in your way.&lt;/p&gt;

&lt;p&gt;Many of you would be looking for a place where you can write and share your content and knowledge with several others and to connect with others to build some great amount of community.&lt;/p&gt;

&lt;p&gt;So, this post is going to be very useful for those who wants to write their articles, blogs, technical stuff etc through which they want to share their knowledge and content to whole of the needy people out there looking for some true and on-point information to solve their issues or to gain or learn what you can offer them.&lt;/p&gt;

&lt;p&gt;Hence, with this post all your queries related to where to write, where to publish, how to reach the community of readers and most importantly the valuable and known platform where to share the knowledge and content related to any niche of your interest.&lt;/p&gt;

&lt;p&gt;As I said, we will walk through some of the advanced and great writing platforms which is accessed and used by Millions of people out there like you, to share their knowledge and experience with the others to help them, to get suggestion and feedback and most importantly to learn new things and techniques through all these.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because when, knowledge_is_shared = (knowledge)2 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hence not taking your much time and making you bored let’s check which are those platforms on which you can write and find great audience to you blog or the article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-platforms-to-write-the-blog-or-articles%E2%9C%8D"&gt;
  &lt;/a&gt;
  List of Platforms to write the Blog or Articles✍
&lt;/h3&gt;

&lt;p&gt;The list of platforms is in decreasing order based on the features they provide you as a writer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-blogger"&gt;
  &lt;/a&gt;
  5. Blogger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9lu3r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxx07pfi5zb33hb2e3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iz9lu3r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxx07pfi5zb33hb2e3n.png" alt="Blogger as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Blogger is an American online content management system owned by Google. It provides you to write the blogs and articles in the easiest way with a free sub-domain named as blogspost.com. Like if you want to keep the name of your blog as XYZ then the domain for your blog can be xyz.blogspost.com – it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;Blogger provides you to upload images, videos, text etc, you can use different templates provided by Blogger which can change the view of your blog or you can map your own template by finding it on google or writing the coding by yourself. &lt;/p&gt;

&lt;p&gt;It also provides you a way to earn from your blog posts through connecting your Blogger account to the Goggle AdSense or any web monetization platform or to any Ad network to show ads to your blog. But for this you have to be somewhat wait as it has to meet certain requirements.&lt;/p&gt;

&lt;p&gt;You also have to connect your blogger to Google web master like Google search console, Google analytics, Goggle tag manager, Bing etc to reach your content to a greater number of people.&lt;/p&gt;

&lt;p&gt;You can check my Blog that I made using Blogger – &lt;a href="https://thecodingbro.xyz/"&gt;https://thecodingbro.xyz/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-wordpress"&gt;
  &lt;/a&gt;
  4. WordPress
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ffdOAZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4tcbbslrjtz5c3sc4pb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ffdOAZAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4tcbbslrjtz5c3sc4pb.png" alt="WordPress as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
WordPress is a free and open-source content management system written in PHP and paired with a MySQL or MariaDB database. It is much popular than the Blogger and provides many more features than Blogger. Here you can create your website or the blog for all free. But need have some basic knowledge of using the WordPress platform as it is not easy and confusing to use.&lt;/p&gt;

&lt;p&gt;It also provides a free subdomain named as wordpress.com. Like if you want to keep the name of your blog as XYZ then the domain for your blog can be xyz.wordpress.com or the available domain name – it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;It has many more functions and extensions than Blogger which are called as plugins. You need to have some good knowledge to use these plugins and if you can use them pretty well then, a great number of audiences can end up to coming to your website or the blog.&lt;/p&gt;

&lt;p&gt;Same as Blogger you have to connect your WordPress domain to the Google web master to reach more audience and better list your posts and articles on google. Also, you can earn by connecting your domain to any web monetization tool or the Ad network, but again here came the play of plugins because through only plugins you can show something to your website or blog while using WordPress as a platform.&lt;/p&gt;

&lt;p&gt;Start your Blog or website using WordPress - &lt;a href="https://wordpress.com/"&gt;https://wordpress.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-medium"&gt;
  &lt;/a&gt;
  3. Medium
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RzL019VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujejo38u0fo3wwcbr08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzL019VY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ujejo38u0fo3wwcbr08.png" alt="Medium as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Medium is an open platform where readers find dynamic thinking, and where expert and undiscovered voices can share their writing on any topic. It’s a place to write, read and connect. It accessed and used by a very large community of writers, readers and learners and all of those are professional, hence you get a quality content to read on the medium.&lt;/p&gt;

&lt;p&gt;It also provides a free subdomain named as medium.com. Like if you want to keep the name of your profile as XYZ then the domain for your blog is xyz.medium.com or the available domain name – it is the name through which the audience will find your blog posts.&lt;/p&gt;

&lt;p&gt;It doesn’t provide you more features like WordPress but what makes it better then WordPress is its popularity and ranking of the posts on any search engine. If you write a post on medium then it will rank very high on the google and hence people notice and reach to your post. Also, the available community of people that are registered on medium find your post on the homepage of medium and hence if find interesting many of them comes to read to your blog.&lt;/p&gt;

&lt;p&gt;You don’t have to do much on medium just have to focus on writing the articles and other thing will happen automatically, you can also earn by using their medium partner program where you get earning by the readers who read your posts.&lt;/p&gt;

&lt;p&gt;Want to start at Medium or Check my Medium Blog - &lt;a href="https://mayankpathak4513.medium.com/"&gt;https://mayankpathak4513.medium.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dev-community"&gt;
  &lt;/a&gt;
  2. Dev Community
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWxBm9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9zkyq233tquqt8259g3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWxBm9x4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9zkyq233tquqt8259g3.png" alt="Dev Community as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
DEV Community is a community of 650,754 amazing developers. They are a place where coders share, stay up-to-date and grow their careers. It’s a great platform to write your articles and blog posts. You can read thousands of articles on their feed as published daily by several others – that’s what I love about dev community, because you don’t know which great article can help you to grow your knowledge.&lt;/p&gt;

&lt;p&gt;It provides you a lot of features like you can write your article using Markdown feature – this is truly amazing, a dashboard where you can check your post views, comments and likes, link to your personal website or portfolio, web monetization, import your articles using RSS and GitHub. You can also connect your GitHub profile to Dev community. &lt;/p&gt;

&lt;p&gt;As of now you will be provided with a username of your choice and you can land on this page, where all your posts, comments and activities will be visible to the other users, this page will help you to connect with thousands of developers registered on Dev Community.&lt;/p&gt;

&lt;p&gt;Let me tell you, on their new updates they have provided a feature where you can make your own website or the blog using the free domain name by netlify and stackbit. They mentioned something like “Generate a personal blog from your DEV Community posts”. You can check this and then surely you will have a separate blog for all your posts on dev community.&lt;/p&gt;

&lt;p&gt;There’s a lot more features to try and I insist you to check the Dev Community platform as it helps you to create a great community and helps to meet developers from different part of the world. &lt;/p&gt;

&lt;p&gt;Want to explore Dev Community or check my Dev Profile - &lt;a href="https://dev.to/mayankpathak"&gt;https://dev.to/mayankpathak&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-hashnode"&gt;
  &lt;/a&gt;
  1. Hashnode
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqA_dz7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7n4fx3ifo5ycjdqq0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqA_dz7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2e7n4fx3ifo5ycjdqq0s.png" alt="Hashnode as a platform to write"&gt;&lt;/a&gt;&lt;br&gt;
Hashnode is a free developer blogging platform that allows you to publish articles on your own domain and helps you stay connected with a global developer community. Yes, that’s right it allows you to publish articles on your own domain. It allows you to read thousands of articles on their feed as published daily by several others – that’s what excite me a lot for Hashnode.&lt;/p&gt;

&lt;p&gt;The most important thing about Hashnode that it provides you with a personal Blog for your all articles and posts and the domain customization option which makes the Hashnode a stand-out platform for blogging purpose.&lt;/p&gt;

&lt;p&gt;With Hashnode you can connect with several other developers, writers and publishers from all parts of the world and by visiting and reading the best technical articles on their feed it’s help you to enrich and boost your knowledge to next level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-to-the-features-of-hashnode-let-me-tell"&gt;
  &lt;/a&gt;
  Coming to the features of Hashnode let me tell,
&lt;/h3&gt;

&lt;ul&gt; 
&lt;li&gt;You will have a several Blog and its dashboard for all your content and articles with the subdomain as xyz.hashnode.dev or the custom domain of your choice.&lt;/li&gt;
&lt;li&gt;You can customize the appearance of your personal blog using the pure CSS, to give a great feel and next level to your blog.&lt;/li&gt;
&lt;li&gt;You can create different posts, pages and several series and link them to the navbar of the personal blog provided by Hashnode.&lt;/li&gt;
&lt;li&gt;It provides you with the analytics section for your blog where you can check the views and find what all articles community finds interesting to read.&lt;/li&gt;
&lt;li&gt;It provides you with a personal newsletter to connect people with you and widgets section where you can add different widgets of your use using some coding.&lt;/li&gt;
&lt;li&gt;It also provides you with integrations like SEO for your blog, google analytics, google search console where you can work to rank your article pretty well on any search engine.&lt;/li&gt;
&lt;li&gt;Also, it allows you to connect your GitHub and import, export and back-up your articles to GitHub, from GitHub and also using the RSS Feed URL.&lt;/li&gt;
&lt;li&gt;You can also earn through several hackathons and giveaways if you are in the top 100 publishers based on the reading of your published post, also using the web monetization option you can earn for views on your articles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If something is not listed here about Hashnode then sorry for that but there is much more to try and check about the Hashnode.&lt;/p&gt;

&lt;p&gt;Want to explore Hashnode check - &lt;a href="https://hashnode.com/@mayankpathak/joinme"&gt;hashnode.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check my Hashnode Blog, after checking this you will be eager to start your blog on the Hashnode platform, visit - &lt;a href="https://mayankpathak.hashnode.dev/"&gt;https://mayankpathak.hashnode.dev/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So, each of these platforms are great to start your blog and show the readers and audience what you have got in your hands. Coming to the conclusion which is the best platform to choose then I will suggest you with two options&lt;/p&gt;

&lt;p&gt;First, if you are very good with SEO techniques i.e., Search Engine Optimization and knows very well how to rank your articles on the top of any search engine then you can go with either Blogger or the WordPress.&lt;/p&gt;

&lt;p&gt;Secondly, if you don’t have any idea about SEO them surely go with either Medium or Dev Community or the Hashnode. In my opinion Hashnode is the best platform to start your blogging career as it provides you with all the things needed to write the Blog.&lt;/p&gt;

&lt;p&gt;That’s what we have in this article…With this hope you find the platform that suits you. Drop a link to your blog in the comment section if you started your Blog after reading this article.&lt;br&gt;
Thank you for Reading, would Love ❤ to hear your valuable feedback.&lt;/p&gt;

&lt;p&gt;If anything is confusing or incorrect then let me know in the comment section. Thanks, from my side, this is Mayank, keep learning and exploring!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect-twitter-linkedin"&gt;
  &lt;/a&gt;
  Let's Connect &lt;a href="https://twitter.com/mayankp4513"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/mayank-pathak4513/"&gt;Linkedin&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me 🙏
&lt;/h3&gt;

&lt;p&gt;If you liked the artticle, Consider &lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;Buying me a Coffee ☕&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>blog</category>
      <category>help</category>
      <category>newbie</category>
    </item>
    <item>
      <title>🤖 Creating your own discord bot using JS 🤖</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Thu, 08 Jul 2021 06:41:23 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/creating-your-own-discord-bot-using-js-2ep0</link>
      <guid>https://dev.to/kaiwalyakoparkar/creating-your-own-discord-bot-using-js-2ep0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey everyone, I have been developing my first discord bot from couple of days and I am finally here to share with you how you can create your bot very easily. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-build"&gt;
  &lt;/a&gt;
  What will you build?
&lt;/h2&gt;

&lt;p&gt;In this blog I am going to tell you how can you make a bot which replies 'Pong' when you say &lt;code&gt;!ping&lt;/code&gt;. Again this can be constructed into anything you want. Like you say &lt;code&gt;Hey&lt;/code&gt; and bot will say 'Hola' you get the idea right.&lt;/p&gt;

&lt;p&gt;I have used &lt;strong&gt;Discord Js&lt;/strong&gt; to build this bot. Yes you can build this in python as well using Discord py.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can invite my bot &lt;a href="https://discord.com/api/oauth2/authorize?client_id=861212506251984906&amp;amp;permissions=8&amp;amp;scope=bot"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Computer (of-course)&lt;/li&gt;
&lt;li&gt;Text editor(Using sublime in this tutorial)&lt;/li&gt;
&lt;li&gt;Discord account and a discord server where you have admin access (You can create new one to test the bot out)&lt;/li&gt;
&lt;li&gt;A bit of node js and express knowledge. If not refer &lt;a href="https://youtu.be/TlB_eWDSMt4"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;Before you do anything make sure you have developer mode enable in your discord. We won't be needing it for this tutorial but you will eventually need it so why not enable it now :)&lt;/p&gt;

&lt;p&gt;For this head over to &lt;code&gt;Setting &amp;gt; Advanced &amp;gt; Developer Mode: ON&lt;/code&gt; in your discord account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1W4UzaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YcLgrSO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1W4UzaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YcLgrSO.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-application-and-creating-bot-account"&gt;
  &lt;/a&gt;
  Setting up application and creating bot account
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Okay so now you will have to visit &lt;a href="https://discord.com/developers/applications/"&gt;https://discord.com/developers/applications/&lt;/a&gt; website.&lt;/li&gt;
&lt;li&gt;Login with your discord account and you should see interface like this. (Ignore my previous applications, you may find this blank and that's alright)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQPnp-Zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/48ud7oo.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now head over to &lt;code&gt;New Application&lt;/code&gt; button.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJyDr20Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ej7TQan.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now name your application (You can change it afterwards). I have named it &lt;code&gt;Tutorial-Bot&lt;/code&gt; and hit &lt;code&gt;Create&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3W7MBXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/oGMzNzU.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now you are on your application dashboard. You can add description, image and all to make it beautiful and explore other options.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhSN_HYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c4gp2zt.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now as you have successfully created application account and now it's time to create bot instance. Head over to &lt;code&gt;Bot&lt;/code&gt; and click on &lt;code&gt;Add Bot&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu5at8B6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Qo2PH0E.png"&gt;
&lt;/li&gt;
&lt;li&gt;After this you will be prompted with a message. Click on &lt;code&gt;Yes, do it&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UnK8ha7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Hqrz3is.png"&gt;
&lt;/li&gt;
&lt;li&gt;Awesome now you may see something like below. (You can customize image, description as you want before moving ahead)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7ZJBHN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2z8VGtI.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now head over to &lt;code&gt;OAuth2&lt;/code&gt; section and copy &lt;code&gt;Application Id&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdMng1K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KfDD5rY.png"&gt;
&lt;/li&gt;
&lt;li&gt;Now we will generate the bot invite link. There are many ways to do that. I will be telling you easiest way. Just replace &lt;code&gt;&amp;lt;app-id&amp;gt;&lt;/code&gt; with the &lt;code&gt;application id&lt;/code&gt; you copied into the following link :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution!&lt;/strong&gt; This would give admin access to the bot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://discord.com/api/oauth2/authorize?client_id=&amp;lt;app-id&amp;gt;&amp;amp;permissions=8&amp;amp;scope=bot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Paste this &lt;em&gt;edited&lt;/em&gt; link into the browser search-box and you should see something like below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;--:-&amp;gt; You will land here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ClKYGcy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7QSj1Uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClKYGcy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7QSj1Uw.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; Select the server&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0yvKy1Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3BHdSHy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0yvKy1Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3BHdSHy.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; Click on &lt;code&gt;Continue&lt;/code&gt; and &lt;code&gt;Authorize&lt;/code&gt; (Authorize would be on next window after clicking on continue)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_0efxJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8uyDu9S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_0efxJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8uyDu9S.png"&gt;&lt;/a&gt;&lt;br&gt;
--:-&amp;gt; If you did everything correctly then you should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i4hV56_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FKuFsrT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i4hV56_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FKuFsrT.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now you can see your bot on right hand side of your discord (Where all the participants are shown)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DffwjAnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/tZUfX1X.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#lets-code-it-now"&gt;
  &lt;/a&gt;
  Let's code it now.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a folder with your bot name (Or anything where you will store the code potentially).&lt;/li&gt;
&lt;li&gt;Open that folder with any text editor (I will be doing that in sublime text)&lt;/li&gt;
&lt;li&gt;Now Also open a cmd (on windows) or terminal (on linux/mac) in that folder and type
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Again here you can remove the &lt;code&gt;-y&lt;/code&gt; flag to customize it. But I will keep it for now to make it a bit easy. After running command you might see something like this or similar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A14Lv1ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mK0eInC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A14Lv1ik--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mK0eInC.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now type in command
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;you should see something like this or similar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eRx8MeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9533x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eRx8MeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/q9533x9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now create 4 files &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;config.json&lt;/code&gt; ,&lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.gitignore&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now create a folder &lt;code&gt;Commands&lt;/code&gt; and add &lt;code&gt;pong.js&lt;/code&gt; &amp;amp; &lt;code&gt;command.js&lt;/code&gt; file in it. Now your file/folder structure should look something like this (only &lt;code&gt;pong.js&lt;/code&gt; and &lt;code&gt;command.js&lt;/code&gt; are in &lt;code&gt;Commands&lt;/code&gt; folder)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEXSxcNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HANwnvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEXSxcNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HANwnvc.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now add the code to the respective files as heading&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-indexjs-"&gt;
  &lt;/a&gt;
  In index.js :-
&lt;/h3&gt;

&lt;p&gt;Add the following code&lt;br&gt;
&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Commands/command.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Commands/pong.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yay your bot is live&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Bot is currently running on version v&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./package.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOTTOKEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-commandjs"&gt;
  &lt;/a&gt;
  In command.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;aliases&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;aliases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;aliases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Running the command &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-pongjs"&gt;
  &lt;/a&gt;
  In pong.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pong!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-configjs"&gt;
  &lt;/a&gt;
  In config.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-gitignore"&gt;
  &lt;/a&gt;
  In .gitignore
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/node_modules/
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-env"&gt;
  &lt;/a&gt;
  In .env
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;First go to the developer portal from where you created the bot application.&lt;/li&gt;
&lt;li&gt;Then go to &lt;code&gt;Bot&lt;/code&gt; and then copy the token as shown in the below image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Caution! :- This is a secret key and should not be added to github or internet or told to anyone.&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLAAFpB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PrKwvDM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLAAFpB0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PrKwvDM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now add it to your env file (replace XXXXX with your secret key &lt;strong&gt;don't&lt;/strong&gt; add any spaces or something just add as it is.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BOTTOKEN=XXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-now-go-to-cmdterminal-again-and-run-commands"&gt;
  &lt;/a&gt;
  - Now go to cmd/terminal again and run commands
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;discord.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Okay so now you are done with coding and it's time for checking it out.&lt;/li&gt;
&lt;li&gt;Run command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now go to your discord where this bot was invited.
and send command &lt;code&gt;!ping&lt;/code&gt; you should receive pong in response like below.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B3rvjjwe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/C8ItQi1.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#but-what-did-we-do"&gt;
  &lt;/a&gt;
  But what did we do?
&lt;/h2&gt;

&lt;p&gt;I will try to explain it in most simple way possible. We created &lt;code&gt;index.js&lt;/code&gt; which will be the entry point point of the application/bot. then we authenticatied it using &lt;code&gt;client.login('process.env.BOTTOKEN')&lt;/code&gt; and we checked if your application was online.&lt;/p&gt;

&lt;p&gt;Our bot will monitor each and every message being posted on the server while it is online and it will check if the posted message was a valid command using &lt;code&gt;command.js&lt;/code&gt; if it was then we will run the operation present in &lt;code&gt;pong.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next what? If you followed through then you have created somewhat scalable bot structure. Now everytime you have to add the command then you have to just make a file of the command. Import it to &lt;code&gt;index.js&lt;/code&gt; and write at what keyword would you like it to get triggered. and that's it.&lt;/p&gt;

&lt;p&gt;Okay so now we have set up our project and you can do lot more with discord bots . Look at the references below to increase the commands and power of your bot.&lt;/p&gt;

&lt;p&gt;If you would like me to tell you how to host your bot for free then please let me know in the comments below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://discordjs.guide/"&gt;Discord Js Doumentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PLRqwX-V7Uu6avBYxeBSwF48YhAnSn_sA4"&gt;The coding train yt channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/kaiwalyakoparkar/Lilliputian-Bot"&gt;My discord bot&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;My Socials:&lt;/strong&gt; &lt;a href="https://twitter.com/kaiwalya_13"&gt;Twitter&lt;/a&gt; | &lt;a href="https://linkedin.com/in/kaiwalyakoparkar"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/kaiwalyakoparkar"&gt;GitHub&lt;/a&gt; | &lt;a href="https://discord.com/invite/jvdcY2NkXa"&gt;Discord Server&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>OpenAI Codex - The Model behind GitHub Copilot</title>
      <author>Danyson</author>
      <pubDate>Thu, 08 Jul 2021 06:15:44 +0000</pubDate>
      <link>https://dev.to/danyson/openai-codex-the-model-behind-github-copilot-j0l</link>
      <guid>https://dev.to/danyson/openai-codex-the-model-behind-github-copilot-j0l</guid>
      <description>&lt;p&gt;OpenAI has released the research paper,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"Evaluating Large Language Models Trained on Code"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which powers &lt;strong&gt;Codex&lt;/strong&gt;, a highly improved &lt;strong&gt;Autoregressive language model&lt;/strong&gt; than the 3rd generation &lt;strong&gt;Generative Pre-trained Transformer&lt;/strong&gt; (GPT-3) language model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codex&lt;/strong&gt; is much improved than GPT-3 due to its model been trained on a dataset that includes a much larger concentration of public source code from GitHub.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codex&lt;/strong&gt; has been fine-tuned on publicly available code from GitHub, and study its Python code-writing capabilities.&lt;/p&gt;

&lt;p&gt;An evaluation harness for the &lt;strong&gt;HumanEval problem solving dataset&lt;/strong&gt; from the research paper is also available on &lt;strong&gt;OpenAI Github repository&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"A distinct production version of Codex powers GitHub Copilot" says the paper&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which explains that the sucessor of &lt;strong&gt;Codex&lt;/strong&gt; is used to train on code dataset from &lt;strong&gt;GitHub&lt;/strong&gt; repositories for the &lt;strong&gt;GitHub Copilot&lt;/strong&gt; project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8srXzB8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1doiga28dxjnwyd32o7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8srXzB8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1doiga28dxjnwyd32o7v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The paper claims it has solved 10,000 competitive programming problems and problems from open source projects related to Continuous Integration.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The paper concludes,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"We found that our models displayed strong performance on a dataset of human-written problems with difficulty level comparable to easy interview problems"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;About data collection, the paper says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;"Our training dataset was collected in May 2020 from 54 million public software repositories hosted on GitHub, containing 179 GB of unique Python files under 1 MB. We filtered out files which were likely auto-generated, had average line length greater than 100, had maximum line length greater than 1000, or contained a small percentage of alphanumeric characters. After filtering, our final dataset totaled 159 GB"&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The economic impact that CODEX going to do will be observed in programming related jobs in future by improving productivity of the coder and also a change in Competitive Programming World.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where may be the difficulty level of coding questions will be increased or may be Competitive Programming will be left alone to AI and Humans have to focus on much higher level of problem solving than that of just writing repeatable codes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Check out the following resources,&lt;/p&gt;

&lt;p&gt;Link to the paper : &lt;a href="https://arxiv.org/abs/2107.03374"&gt;https://arxiv.org/abs/2107.03374&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenAI Github repository : &lt;a href="https://github.com/openai/human-eval"&gt;https://github.com/openai/human-eval&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personal Blog @ &lt;a href="https://danyson.github.io"&gt;danyson.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>programming</category>
      <category>ai</category>
    </item>
    <item>
      <title>Learning Python- Basic course: Day 12, Basic algorithms</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 08 Jul 2021 05:56:00 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</link>
      <guid>https://dev.to/aatmaj/learning-python-basic-course-day-12-basic-algorithms-1edc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-let-us-explore-sequential-search-binary-search-and-bubble-sort-in-python"&gt;
  &lt;/a&gt;
  Today let us explore Sequential search, Binary search and Bubble sort in Python.🚀
&lt;/h2&gt;




&lt;p&gt;Today we will check out sequential search, binary search and bubble sort in Python lists. We will not go into the mathematical details of the complexity and all but just see how the algorithms are implemented. More complicated searching and sorting algorithms, complex data structures will be referenced and covered in the later parts. In case anyone among you are coming across these algorithms for the first time, please do google these terms out. I have also provided Geeksforgeeks references for further reading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequential-search"&gt;
  &lt;/a&gt;
  Sequential search
&lt;/h3&gt;

&lt;p&gt;The sequential search is the most easy and simple program for searching. We can just traverse through the list or use the inbuilt &lt;code&gt;in&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter the number to be searched "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#Method-1
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-1 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;

&lt;span class="c1"&gt;#Method-2
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method-2 Yes, the number is in the list "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter the number to be searched 6
Method-1 Yes, the number is in the list 
Method-2 Yes, the number is in the list 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python provides a shortcut for searching as shown in method 2. This is a sequential search method for searching. It can search not only numbers, but characters or any other data types as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binary-search"&gt;
  &lt;/a&gt;
  Binary search
&lt;/h3&gt;

&lt;p&gt;Binary search is another simple algorithm to search for numbers in a sorted list. In case you are new with Binary search, see &lt;a href="https://www.geeksforgeeks.org/binary-search/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Please enter a number "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is greater, ignore left half
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# If x is smaller, ignore right half
&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="c1"&gt;# means x is present at mid
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Please enter a number 6
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bubble-sort"&gt;
  &lt;/a&gt;
  Bubble sort
&lt;/h3&gt;

&lt;p&gt;Bubble sort is a good sorting algorithm, and quite easy comparatively. more about it on &lt;a href="https://www.geeksforgeeks.org/bubble-sort/"&gt;GeeksForGeeks&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="c1"&gt;# Traverse through all array elements
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# Last i elements are already in place
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# traverse the array from 0 to n-i-1
&lt;/span&gt;            &lt;span class="c1"&gt;# Swap if the element found is greater
&lt;/span&gt;            &lt;span class="c1"&gt;# than the next element
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#Swapping the two
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sorted array is:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sorted array is: [2, 3, 4, 5, 6, 7, 9, 10, 12]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises-
&lt;/h3&gt;

&lt;p&gt;1) &amp;amp; 2) In the samples above, the programs give no output if the item is not in the list. Modify the programs to include it. Answers - &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%201.py"&gt;Sequential search&lt;/a&gt;, &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%202.py"&gt;binary search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Write a program to bubble sort a list and then search using binary search. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/97d78151fd6bfccb02ac1da1c042f807d08c6f06/Basic/Day%2012/Exercise%20solutions/Exercise%203.py"&gt;Answer&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;😎 Your suggestions motivate me, so please please please let me know in the comment section if you this part or not. 🧐 And don't forget to like the post if you did. 😍 Follow me on github and star the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>learningpython</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Using loading animation on websites : Blazor Examples</title>
      <author>Techguy</author>
      <pubDate>Thu, 08 Jul 2021 05:53:12 +0000</pubDate>
      <link>https://dev.to/techguy/using-loading-animation-on-websites-blazor-examples-do1</link>
      <guid>https://dev.to/techguy/using-loading-animation-on-websites-blazor-examples-do1</guid>
      <description>&lt;p&gt;In this video we will discuss how to display loading animation in a Blazor web application.&lt;/p&gt;

&lt;p&gt;In a real world there are many usecases where we need a loading spinner or indicator. For example&lt;/p&gt;

&lt;p&gt;Your app is processing a report and it takes a few seconds to complete or&lt;br&gt;
A server-side REST API is being called and it's taking a few seconds to retrieve data maybe because of a slow network connection, server busy or just because you are retrieving lots and lost of data.&lt;br&gt;
Whatever maybe the case, if your app is taking a bit of time to do something it's better to display a loading indicator so the enduser knows the application is busy processing the request and not frozen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.syncfusion.com/blazor-components/blazor-spinner"&gt;Syncfusion Blazor Spinner Component&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blazor Spinner - Simple, Animated Circular Progress Indicator&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Show indeterminate progress indicators.&lt;/li&gt;
&lt;li&gt;Utilize built-in support for theme-based spinners.&lt;/li&gt;
&lt;li&gt;Customize spinners’ appearance, labels, size, type, z-index, and overlay.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tERsRtmRAe0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>spinner</category>
      <category>webdev</category>
      <category>webassembly</category>
    </item>
    <item>
      <title>🍩 Creating an Interactive JS Donut Chart in 4 Steps 🚀</title>
      <author>andreykh1985</author>
      <pubDate>Thu, 08 Jul 2021 05:28:09 +0000</pubDate>
      <link>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</link>
      <guid>https://dev.to/andreykh1985/creating-a-js-donut-chart-in-4-steps-592k</guid>
      <description>&lt;p&gt;Wondering how data designers and developers create compelling donut charts using JavaScript? Then you’ve come to the right place at the right time. Follow along and you will learn how to build an interactive JS donut chart with great ease even if you are a beginner!&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be visualizing data about the global market share of the top online music streaming platforms. It is a good example of information that can be nicely represented in a donut chart.&lt;/p&gt;

&lt;p&gt;To make sure we are on the same page, let’s first see what a donut chart is and then get down to charting straight away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-donut-chart"&gt;
  &lt;/a&gt;
  What Is a Donut Chart?
&lt;/h2&gt;

&lt;p&gt;Basically, &lt;a href="https://www.anychart.com/chartopedia/chart-type/donut-chart/"&gt;donut charts&lt;/a&gt; (or doughnut charts) are &lt;a href="https://www.anychart.com/chartopedia/chart-type/pie-chart/"&gt;pie charts&lt;/a&gt; with a cut-out area of the center which can be filled with additional information. They are frequently used as a way to visualize the proportions of categorical data.&lt;/p&gt;

&lt;p&gt;In a donut chart, the size of each slice (or piece) depicts how much of the total each category represents. Consequently, this type of data visualization can help you quickly understand the proportional composition of a variable.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, the number of categories visualized in a donut chart graphic should be limited to a few to keep the representation uncluttered and avoid legibility issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-donut-chart-preview"&gt;
  &lt;/a&gt;
  JS Donut Chart Preview
&lt;/h2&gt;

&lt;p&gt;Take a look at how the JS donut chart will turn out at the end of this tutorial. And it will be interactive!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggqO5okQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d45igagc2uzfps3fkyh7.png" alt="Interactive JavaScript-based donut chart which will be created along this tutorial on JS HTML5 data visualization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-basic-javascript-donut-chart"&gt;
  &lt;/a&gt;
  Building a Basic JavaScript Donut Chart
&lt;/h2&gt;

&lt;p&gt;A beautiful JS donut chart can be built in just four easy steps. Isn’t that music to our ears?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an HTML page.&lt;/li&gt;
&lt;li&gt;Include JavaScript files.&lt;/li&gt;
&lt;li&gt;Add the data.&lt;/li&gt;
&lt;li&gt;Write some JS charting code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-create-an-html-page"&gt;
  &lt;/a&gt;
  1. Create an HTML page
&lt;/h3&gt;

&lt;p&gt;The first thing we do is create a basic HTML page with a block element designed to hold the donut chart.&lt;/p&gt;

&lt;p&gt;To identify this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; later in the code, we give it an id attribute. Let it be just “container” this time.&lt;/p&gt;

&lt;p&gt;We also specify the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; parameters inside the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block as “100%” so the donut chart fills the whole page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-include-javascript-files"&gt;
  &lt;/a&gt;
  2. Include JavaScript files
&lt;/h3&gt;

&lt;p&gt;There are many JavaScript charting libraries out there providing ready-made features that are of great help to quickly visualize data in graphs even without a lot of technical skills and experience. Some of them support donut charts out of the box.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are using the &lt;a href="https://www.anychart.com/"&gt;AnyChart JS library&lt;/a&gt;. It is a lightweight, strong, and flexible solution for interactive data visualization. AnyChart is also great for beginners because of extensive and detailed &lt;a href="https://docs.anychart.com/"&gt;documentation&lt;/a&gt; and a whole lot of &lt;a href="https://www.anychart.com/products/anychart/gallery/"&gt;chart examples&lt;/a&gt; with the source code that can be played with on the dedicated &lt;a href="https://playground.anychart.com/"&gt;playground&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, as step two, let’s include the necessary JavaScript files from the library’s &lt;a href="https://cdn.anychart.com/"&gt;CDN&lt;/a&gt; (or you can download them if you want).&lt;/p&gt;

&lt;p&gt;AnyChart’s JavaScript charting library features a modular system to ensure optimal performance. To create an interactive HTML5 donut chart using it, we need to add two scripts — the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#core"&gt;core module&lt;/a&gt; and the &lt;a href="https://docs.anychart.com/Quick_Start/Modules#pie_and_doughnut"&gt;pie-and-donut module&lt;/a&gt; — to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of the HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript Donut Chart&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-core.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.anychart.com/releases/8.10.0/js/anychart-pie.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;      
      &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;  
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// All the code for the JS donut chart will come here&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-add-the-data"&gt;
  &lt;/a&gt;
  3. Add the data
&lt;/h3&gt;

&lt;p&gt;A donut chart is a simple chart type that requires a straightforward and limited dataset. So, although AnyChart supports &lt;a href="https://docs.anychart.com/Working_with_Data/Supported_Data_Formats"&gt;multiple ways to load data&lt;/a&gt;, we will just pass the data directly in a hassle-free manner.&lt;/p&gt;

&lt;p&gt;For this tutorial, I decided to take data on the market share of the leading music streaming apps, which I collected from the &lt;a href="https://www.businessofapps.com/data/spotify-statistics/"&gt;Business of Apps&lt;/a&gt; website. So, I am just adding it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Spotify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Amazon Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tencent apps&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube Music&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Others&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have everything all set, let’s get ready to see the donut chart shape up by adding some JavaScript code! Basically, this is quite intuitive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-write-the-js-charting-code-for-our-donut-chart"&gt;
  &lt;/a&gt;
  4. Write the JS charting code for our donut chart
&lt;/h3&gt;

&lt;p&gt;The first thing we do is add a function enclosing all the code, which makes sure that the code inside it will only execute once the page is ready.&lt;/p&gt;

&lt;p&gt;Donut charts are very straightforward to create with an appropriate JS library and in this case, it will actually be just a couple of lines of code!&lt;/p&gt;

&lt;p&gt;As we have learned just above, a donut chart is fundamentally a pie chart with a hole, like a ring all in all. So, we simply create a pie chart instance and give it an inner radius value to make it a donut chart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a pie chart with the data&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;anychart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// set the chart radius making a donut chart&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerRadius&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;55%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we give our donut chart a title and set the container id before finally drawing the resulting visualization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Music Streaming Apps Global Market Share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it — a fully functional interactive JavaScript-based donut chart is ready! Isn’t this absolutely easy?&lt;/p&gt;

&lt;p&gt;Notice that the legend was created automatically. Also, go ahead and click on its items or any piece to see the cool interactive donut slicing behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79jgac6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obm2sg41xib4n2cgnh0t.png" alt="Basic JavaScript Donut Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The initial version of this basic JS donut chart with the full code is available on &lt;a href="https://playground.anychart.com/oGg0sx87/"&gt;AnyChart Playground&lt;/a&gt; and &lt;a href="https://codepen.io/shacheeswadia/pen/eYvJxJQ"&gt;CodePen&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This donut chart distinctly shows that Spotify is the global leader and that Spotify and Apple Music together hold more than half of the market of music streaming apps.&lt;/p&gt;

&lt;p&gt;Now, let’s customize our donut chart to make it look even cooler and communicate the insights in a clearer manner (like shown in the preview at the beginning of the article):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the color palette.&lt;/li&gt;
&lt;li&gt;Add labels.&lt;/li&gt;
&lt;li&gt;Improve the tooltip.&lt;/li&gt;
&lt;li&gt;Add details to the center of the donut.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.anychart.com/blog/2021/07/06/donut-charts-javascript/"&gt;CONTINUE READING HERE&lt;/a&gt; FOR A WALKTHROUGH OF THESE JS DONUT CHART CUSTOMIZATIONS&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Pomodoro technique</title>
      <author>Abhinav Pandey</author>
      <pubDate>Thu, 08 Jul 2021 05:08:16 +0000</pubDate>
      <link>https://dev.to/abh1navv/the-pomodoro-technique-226c</link>
      <guid>https://dev.to/abh1navv/the-pomodoro-technique-226c</guid>
      <description>&lt;p&gt;You must have heard about it a lot. You must have tried. You may have found it too much. You may have stopped. But the Pomodoro technique is timeless and scientifically backed. So I'm here to remind you about it again with a very bite sized summary. And if you have read the previous posts in this series, you will have a general idea how regular reminders are helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pomodoro"&gt;
  &lt;/a&gt;
  Pomodoro
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;25 mins of focus, 5 mins of rest&lt;/strong&gt; - together known as 1 round of Pomodoro &lt;/li&gt;
&lt;li&gt;no hard rule, go slightly longer if it suits you but not too long. Some studies show that &lt;strong&gt;52-17 works pretty well too&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;use a timer/stopwatch to repeat. Or use &lt;a href="http://www.tomato.es/"&gt;Tomatoes&lt;/a&gt;. For people like me who are on the laptop all day, websites are better than any stopwatch or mobile app.&lt;/li&gt;
&lt;li&gt;good way to prevent procrastination as its difficult to lose focus in 25 mins&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;start with the hardest task&lt;/strong&gt; in every Pomodoro and then move on to easier tasks. You will be at the peak of your focus after that short much needed rest.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rest time&lt;/strong&gt; means you &lt;strong&gt;do not do anything brain intensive&lt;/strong&gt;. Do not look at your phone or read articles on the web. Maybe close your eyes or get something to eat or walk around in the house. Try to &lt;strong&gt;avoid pen, paper and screen at all costs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You do not have to do Pomodoro all day. You &lt;strong&gt;only do it when you need to work&lt;/strong&gt; and its fine to do other stuff in between. E.g. you can work for 1 hour doing 2 rounds of Pomodoro - watch an episode of your favorite show - get back to work&lt;/li&gt;
&lt;li&gt;Just know that 25 mins of focus and 5 mins of complete rest is your strategy whenever you sit down to work.&lt;/li&gt;
&lt;li&gt;Sometimes your brain will not stop thinking about the work in those 5 mins. Its fine. &lt;strong&gt;Practice will make it perfect.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;My timer ends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFGKwu86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1400/1%2AZB91m3uEJ51nPNBCwSrpkA.gif" alt="Timer"&gt;
&lt;/h2&gt;

&lt;p&gt;You can connect with me at  &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/abh1navv"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.twitter.com/abh1navv"&gt;Twitter/@abh1navv&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>learning</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Use IndexDB to Manage State in JavaScript</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Thu, 08 Jul 2021 05:03:34 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/how-to-use-indexdb-to-manage-state-in-javascript-4k98</link>
      <guid>https://dev.to/asayerio_techblog/how-to-use-indexdb-to-manage-state-in-javascript-4k98</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/craig-buckler"&gt;Craig Buckler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My previous article, &lt;a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage"&gt;Getting Started with IndexedDB for Big Data Storage&lt;/a&gt;, demonstrated how to use the browser's IndexedDB NoSQL database to store data. IndexedDB has &lt;a href="https://caniuse.com/indexeddb"&gt;good cross-browser support&lt;/a&gt; and offers at least 1GB of storage.&lt;/p&gt;

&lt;p&gt;This article explains how to use IndexedDB to store state in a typical client-side JavaScript application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/craigbuckler/asayer-idbstate"&gt;The code is available from Github&lt;/a&gt;&lt;/strong&gt;. It provides an example to-do app which you can use or adapt for your own projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-mean-by-state"&gt;
  &lt;/a&gt;
  What do we mean by "state"?
&lt;/h2&gt;

&lt;p&gt;All applications store state. For a to-do app, it's a list of items. For a game, it's the current score, weapons available, power-up time remaining, etc. Variables store state but these can become unwieldly as complexity increases.&lt;/p&gt;

&lt;p&gt;State management systems such as &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt; and &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; provide centralized data stores. Any JavaScript component can read, update, or delete data. Some systems permit components to &lt;em&gt;subscribe&lt;/em&gt; to change events. For example, when a user toggles light/dark mode, all components update their styles accordingly.&lt;/p&gt;

&lt;p&gt;Most state management systems store values in memory although techniques and plugins are available to transfer data to localStorage, cookies, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-indexeddb-suitable-for-storing-state"&gt;
  &lt;/a&gt;
  Is IndexedDB suitable for storing state?
&lt;/h2&gt;

&lt;p&gt;As always: &lt;em&gt;it depends&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;IndexedDB offers some benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It can typically store 1GB of data which makes it suitable for large objects, files, images etc. Moving these items out of memory can make an application faster and more efficient.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike cookies and Web Storage (&lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt;), IndexedDB stores native JavaScript object data. There's no need to serialize into JSON strings or deserialize back again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IndexedDB access is asynchronous so it has minimal impact on the main JavaScript processing thread.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Web Storage is synchronous: your JavaScript code pauses execution while it accesses data. This can cause performance issues when saving larger datasets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynchronous data access has some drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The IndexedDB API uses older callback and event methods so a Promise-based wrapper library is practical.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;async&lt;/code&gt; class constructors and &lt;a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;Proxy&lt;/a&gt; get/set handlers are not possible in JavaScript. This poses some challenges for state management systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-indexeddbbased-state-management-system"&gt;
  &lt;/a&gt;
  Creating an IndexedDB-based state management system
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://github.com/craigbuckler/asayer-idbstate"&gt;example code below&lt;/a&gt;&lt;/strong&gt; implements a simple &lt;code&gt;State&lt;/code&gt; management system in 35 lines of JavaScript. It offers the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can define a &lt;em&gt;state&lt;/em&gt; with a &lt;code&gt;name&lt;/code&gt; (string) and a &lt;code&gt;value&lt;/code&gt; (primitive, array, object, etc). An IndexedDB object store saves these values using the name as an index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any JavaScript component can &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; a value by its name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a value is &lt;code&gt;set&lt;/code&gt;, the state manager alerts all subscribed components about the change. A component subscribes itself via the &lt;code&gt;State&lt;/code&gt; constructor, or by setting or getting a named value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A to-do list project demonstrates the &lt;code&gt;State&lt;/code&gt; manager. It defines two &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt; which both access the same &lt;code&gt;todolist&lt;/code&gt; array of tasks managed by &lt;code&gt;State&lt;/code&gt; objects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;todo-list.js&lt;/code&gt;: renders the &lt;code&gt;todolist&lt;/code&gt; HTML and removes an item when the user clicks it's 'done' button.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;todo-add.js&lt;/code&gt;: shows an "add new item" form which appends new tasks to the &lt;code&gt;todolist&lt;/code&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: A single todo list component would be more practical, but this demonstrates how two isolated classes can share the same state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-indexeddb-wrapper-class"&gt;
  &lt;/a&gt;
  Creating an IndexedDB wrapper class
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://blog.openreplay.com/getting-started-with-indexeddb-for-big-data-storage"&gt;Getting Started article&lt;/a&gt; provided a Promise-based IndexedDB wrapper. We require a similar class, but it can be simpler because it fetches single records by &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;js/lib/indexeddb.js&lt;/code&gt; script defines an &lt;code&gt;IndexedDB&lt;/code&gt; class with a constructor. It accepts a database name, version, and upgrade function. It returns the instantiated object following a successful connection to the IndexedDB database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IndexedDB wrapper class&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// connect to IndexedDB database&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// connection object&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;// no support&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indexedDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not supported&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// open database&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;indexedDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// database upgrade event&lt;/span&gt;
        &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onupgradeneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;dbUpgrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newVersion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;dbOpen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`IndexedDB error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;errorCode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;set&lt;/code&gt; method stores a &lt;code&gt;value&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; identifier in the &lt;code&gt;storeName&lt;/code&gt; object store. IndexedDB handles all operations in a transaction which triggers events that resolve or reject the Promise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// store item&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// new transaction&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt;
        &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readwrite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// write record&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oncomplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// success&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, the asynchronous &lt;code&gt;get&lt;/code&gt; method retrieves the &lt;code&gt;value&lt;/code&gt; with the &lt;code&gt;name&lt;/code&gt; identifier in the &lt;code&gt;storeName&lt;/code&gt; object store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// get named item&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// new transaction&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt;
        &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readonly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

        &lt;span class="c1"&gt;// read record&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// success&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// failure&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Whether you're using React, Vue or just vanillaJS, debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-state-manager-class"&gt;
  &lt;/a&gt;
  Creating the State manager class
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;js/lib/state.js&lt;/code&gt; script imports &lt;code&gt;IndexedDB&lt;/code&gt; and defines a &lt;code&gt;State&lt;/code&gt; class. It shares five &lt;code&gt;static&lt;/code&gt; property values across all instantiations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;dbName&lt;/code&gt;: the name of the IndexedDB database used for state storage (&lt;code&gt;"stateDB"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dbVersion&lt;/code&gt;: the database version number (&lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;storeName&lt;/code&gt;: the name of the object store used to store all name/value pairs (&lt;code&gt;"state"&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DB&lt;/code&gt;: a reference to a single &lt;code&gt;IndexedDB&lt;/code&gt; object used to access the database, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt;: an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget"&gt;EventTarget() object&lt;/a&gt; which can dispatch and receive events across all &lt;code&gt;State&lt;/code&gt; objects.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// simple state handler&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./indexeddb.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;dbName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stateDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;dbVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;storeName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventTarget&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The constructor accepts two optional parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;an array of &lt;code&gt;observed&lt;/code&gt; names, and&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;updateCallback&lt;/code&gt; function. This function receives the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; whenever a state updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A handler listens for &lt;code&gt;set&lt;/code&gt; events called when state changes. It runs the &lt;code&gt;updateCallback&lt;/code&gt; function when the passed &lt;code&gt;name&lt;/code&gt; is being &lt;code&gt;observed&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// object constructor&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// state change callback&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// observed properties&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// subscribe to set events&lt;/span&gt;
    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The class does not connect to the IndexedDB database until it's required. The &lt;code&gt;dbConnect&lt;/code&gt; method establishes a connection and reuses it across all &lt;code&gt;State&lt;/code&gt; objects. On the first run, it creates a new object store named &lt;code&gt;state&lt;/code&gt; (as defined in the static &lt;code&gt;storeName&lt;/code&gt; property):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// connect to IndexedDB database&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IndexedDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// upgrade database&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oldVersion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;set&lt;/code&gt; method updates a named value. It adds the &lt;code&gt;name&lt;/code&gt; to the &lt;code&gt;observed&lt;/code&gt; list, connects to the IndexedDB database, sets the new value, and triggers a &lt;code&gt;set&lt;/code&gt; &lt;a href="https://developer.mozilla.org/docs/Web/API/CustomEvent"&gt;CustomEvent&lt;/a&gt; which all &lt;code&gt;State&lt;/code&gt; objects receive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// set value in DB&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// add observed property&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// database update&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// raise event&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The asynchronous &lt;code&gt;get&lt;/code&gt; method returns a named value. It adds the &lt;code&gt;name&lt;/code&gt; to the &lt;code&gt;observed&lt;/code&gt; list, connects to the IndexedDB database, and retrieves the indexed data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// get value from DB&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// add observed property&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// database fetch&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dbConnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can retrieve and update state values using a new &lt;code&gt;State&lt;/code&gt; object, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./state.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// instantiate&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;stateUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get latest value and default to zero&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// set a new state value&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myval&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// callback runs when myval updates&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stateUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is now &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other code can receive state update notifications about the same item, e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myval&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I also see &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is now set to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-statemanaged-todo-list"&gt;
  &lt;/a&gt;
  Creating a state-managed todo list
&lt;/h2&gt;

&lt;p&gt;A simple to-do list app demonstrates the state management system:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRtaFS_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbwwubw4hqztu44px0bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRtaFS_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbwwubw4hqztu44px0bm.png" alt="todo list app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; file defines two custom elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;IndexedDB state management to-do list&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./css/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;IndexedDB state management to-do list&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;todo-list&amp;gt;&amp;lt;/todo-list&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;todo-add&amp;gt;&amp;lt;/todo-add&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; - the todo list controlled by &lt;code&gt;./js/components/todo-list.js&lt;/code&gt; which updates the list when tasks are added and removed, and&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; - a form to add items to the todo list controlled by &lt;code&gt;./js/components/todo-list.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;./js/main.js&lt;/code&gt; loads both component modules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// load components&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/todo-add.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/todo-list.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The scripts define frameworkless &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt; which get and set a shared &lt;code&gt;todolist&lt;/code&gt; state. Web Components are beyond the scope of this article, but the basics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can define a custom HTML element (such as &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt;). The name must contain a dash (&lt;code&gt;-&lt;/code&gt;) to avoid clashes with current or future HTML elements.&lt;/li&gt;
&lt;li&gt;A JavaScript class which &lt;code&gt;extends&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"&gt;HTMLElement&lt;/a&gt; defines the functionality. The constructor must call &lt;code&gt;super()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The browser calls a &lt;code&gt;connectedCallback()&lt;/code&gt; method when it's ready to update the DOM. The method can append content, optionally using an encapsulated &lt;a href="https://developer.mozilla.org/docs/Web/Web_Components/Using_shadow_DOM"&gt;Shadow DOM&lt;/a&gt; which is not accessible to other scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define"&gt;customElements.define&lt;/a&gt; registers the class with the custom element.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-lttodolistgt-endraw-component"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./js/components/todo-list.js&lt;/code&gt; defines the &lt;code&gt;TodoList&lt;/code&gt; class for the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component. It shows a list of tasks and handles deletion when the user clicks a 'done' button. The class sets static HTML strings and creates a new &lt;code&gt;State&lt;/code&gt; object. This monitors the a &lt;code&gt;todolist&lt;/code&gt; variable and runs the object's &lt;code&gt;render()&lt;/code&gt; method when its value changes:&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
import { State } from '../lib/state.js';&lt;/p&gt;

&lt;p&gt;class TodoList extends HTMLElement {&lt;/p&gt;

&lt;p&gt;static style = &lt;code&gt;&lt;br&gt;
    &amp;lt;style&amp;gt;&lt;br&gt;
      ol { padding: 0; margin: 1em 0; }&lt;br&gt;
      li { list-style: numeric inside; padding: 0.5em; margin: 0; }&lt;br&gt;
      li:hover, li:focus-within { background-color: #eee; }&lt;br&gt;
      button { width: 4em; float: right; }&lt;br&gt;
    &amp;lt;/style&amp;gt;&lt;br&gt;
&lt;/code&gt;;&lt;br&gt;
  static template = &lt;code&gt;&amp;lt;li&amp;gt;$1 &amp;lt;button type="button" value="$2"&amp;gt;done&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.state = new State(['todolist'], this.render.bind(this));&lt;br&gt;
  }&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;render()&lt;/code&gt; method receives the updated &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; (only &lt;code&gt;todolist&lt;/code&gt; will arrive). It stores the list as a local object property then appends HTML to the Shadow DOM (created by the &lt;code&gt;connectedCallback()&lt;/code&gt; method):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // show todo list&lt;br&gt;
  render(name, value) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// update state
this[name] = value;

// create new list
let list = '';
this.todolist.map((v, i) =&amp;gt; {
  list += TodoList.template.replace('$1', v).replace('$2', i);
});

this.shadow.innerHTML = `${ TodoList.style }&amp;lt;ol&amp;gt;${ list }&amp;lt;/ol&amp;gt;`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback()&lt;/code&gt; method runs when the DOM is ready. It:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creates a new Shadow DOM and passes the latest &lt;code&gt;todolist&lt;/code&gt; state to the &lt;code&gt;render()&lt;/code&gt; method, and&lt;/li&gt;
&lt;li&gt;attaches a click event handler which removes an item from the &lt;code&gt;todolist&lt;/code&gt; state. The &lt;code&gt;render()&lt;/code&gt; method will automatically execute because the state changed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // initialise&lt;br&gt;
  async connectedCallback() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.shadow = this.attachShadow({ mode: 'closed' });
this.render('todolist', await this.state.get('todolist') || []);

// remove item event
this.shadow.addEventListener('click', async e =&amp;gt; {

  if (e.target.nodeName !== 'BUTTON') return;
  this.todolist.splice(e.target.value, 1);
  await this.state.set('todolist', this.todolist);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TodoList&lt;/code&gt; class is then registered for the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// register component&lt;br&gt;
customElements.define( 'todo-list', TodoList );&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-endraw-lttodoaddgt-raw-component"&gt;
  &lt;/a&gt;
  The &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;./js/components/todo-add.js&lt;/code&gt; defines the &lt;code&gt;TodoAdd&lt;/code&gt; class for the &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component. It shows a form that can append new tasks to the &lt;code&gt;todolist&lt;/code&gt; state. It sets a static HTML string and creates a new &lt;code&gt;State&lt;/code&gt; object. This monitors the &lt;code&gt;todolist&lt;/code&gt; state and retains it as a local object property:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
class TodoAdd extends HTMLElement {&lt;/p&gt;

&lt;p&gt;static template = &lt;code&gt;&lt;br&gt;
    &amp;lt;style&amp;gt;&lt;br&gt;
      form { display: flex; justify-content: space-between; padding: 0.5em; }&lt;br&gt;
      input { flex: 3 1 10em; font-size: 1em; padding: 6px; }&lt;br&gt;
      button { width: 4em; }&lt;br&gt;
    &amp;lt;/style&amp;gt;&lt;br&gt;
    &amp;lt;form method="post"&amp;gt;&lt;br&gt;
    &amp;lt;input type="text" name="add" placeholder="add new item" required /&amp;gt;&lt;br&gt;
    &amp;lt;button&amp;gt;add&amp;lt;/button&amp;gt;&lt;br&gt;
    &amp;lt;/form&amp;gt;&lt;br&gt;
&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;constructor() {&lt;br&gt;
    super();&lt;br&gt;
    this.state = new State(['todolist'], (name, value) =&amp;gt; this[name] = value );&lt;br&gt;
  }&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;connectedCallback()&lt;/code&gt; method runs when the DOM is ready. It:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fetches the latest &lt;code&gt;todolist&lt;/code&gt; state into a local property which defaults to an empty array&lt;/li&gt;
&lt;li&gt;appends the form HTML to a Shadow DOM, and&lt;/li&gt;
&lt;li&gt;attaches a submit event handler which adds an new item to the &lt;code&gt;todolist&lt;/code&gt; state (which, in turn, updates the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component). It then clears the input field so you can add another task.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
  // initialise&lt;br&gt;
  async connectedCallback() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// get latest todo list
this.todolist = await this.state.get('todolist') || [];

const shadow = this.attachShadow({ mode: 'closed' });
shadow.innerHTML = TodoAdd.template;

const add = shadow.querySelector('input');

shadow.querySelector('form').addEventListener('submit', async e =&amp;gt; {

  e.preventDefault();

  // add item to list
  await this.state.set('todolist', this.todolist.concat(add.value));

  add.value = '';
  add.focus();

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TodoAdd&lt;/code&gt; class is then registered for the &lt;code&gt;&amp;lt;todo-add&amp;gt;&lt;/code&gt; component:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// register component&lt;br&gt;
customElements.define( 'todo-add', TodoAdd );&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Projects often avoid IndexedDB because its API is clunky. It's not an obvious choice for state management, but the indexed database and large storage allocation could make it a good option for complex projects which store significant volumes of data.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Top 5 Advantages of Ai Chatbots for Business</title>
      <author>Chris Fowler</author>
      <pubDate>Thu, 08 Jul 2021 04:31:31 +0000</pubDate>
      <link>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</link>
      <guid>https://dev.to/dsvdeveloper88/top-5-advantages-of-ai-chatbots-for-business-1o18</guid>
      <description>&lt;p&gt;Chatbots are based on Machine Learning to gather conversational cadences that allow them to copy human conversations and react to written or spoken requests to deliver a service. They comprehend language, not just commands, since they use AI.&lt;/p&gt;

&lt;p&gt;Chatbots are bringing a new way for businesses to communicate with the world and most importantly with their customers by the help of exploding popularity of messaging apps, the accelerated development of all kinds of sensors and wearables and of course with the rise of emerging technologies and &lt;a href="http://www.designveloper.com/blog/best-ai-chatbot-smartest-ai-chatbot/"&gt;AI chatbots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQ-XHjES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dga5qmnu9x4mb1rn3uz.jpg" alt="ai chatbots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the top 5 benefits of chatbots, and have a better understanding of how they can contribute to your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cost-savings"&gt;
  &lt;/a&gt;
  1. Cost Savings
&lt;/h2&gt;

&lt;p&gt;Businesses have a variety of options from ready-made softwares developed by Facebook, Microsoft and other big IT companies to choose.&lt;/p&gt;

&lt;p&gt;First of all, implementing a full functioning chatbot, is much cheaper and faster than creating a cross platform app or hiring employees for each task. Since chatbots are automated solutions, they allow organizations to handle many customers at once, and simultaneously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-easier-approach-to-global-markets"&gt;
  &lt;/a&gt;
  2. Easier Approach to Global Markets
&lt;/h2&gt;

&lt;p&gt;Whether you are already an international brand with customers all over the world, or a local brand who is ready for global business, &lt;a href="https://www.designveloper.com/blog/what-is-chatbot-and-how-does-it-work/"&gt;chatbots&lt;/a&gt; can solve your customer care problems in multiple languages and 24/7, 365 days a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-better-lead-generation-qualification-and-nurturing"&gt;
  &lt;/a&gt;
  3. Better Lead Generation, Qualification and Nurturing
&lt;/h2&gt;

&lt;p&gt;Personalized messaging that assists consumers along “buyer’s journey” is possible with the consumer information that chatbots receive. Besides, a chatbot can also help you to determine the unqualified leads through identified KPIs and prevent you to deal with time-consuming leads.&lt;/p&gt;

&lt;p&gt;Chatbots ensure the flow is in the right direction to get higher conversion rates. Moreover, a bot can ask the necessary and related questions, persuade the user and generate a lead for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-improved-customer-service"&gt;
  &lt;/a&gt;
  4. Improved Customer Service
&lt;/h2&gt;

&lt;p&gt;Chatbots can provide assistance real-time like a sales person in a real store. In addition, along with text and voice, they can present customers rich content with product pages, images, blog entries, tutorial videos based on their responses that can help them through their journey. Moreover, chatbots can offer an interactive communication where they also ask questions to understand the real problem.&lt;/p&gt;

&lt;p&gt;With the help of &lt;a href="https://www.designveloper.com/blog/top-5-best-chatbot-platform/"&gt;chatbot platforms&lt;/a&gt;, organizations can handle more tasks at the same time so that no customer has to wait. This will allow companies to scale up their operations to new markets globally without multiplying incoming requests to be handled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-keeping-up-with-the-trends"&gt;
  &lt;/a&gt;
  5. Keeping Up with the Trends
&lt;/h2&gt;

&lt;p&gt;Since customers’ preferences verge to interact with brands via chat -as it’s easier and faster to use- businesses have now the opportunity to reach more customers via Chatbots while staying trendy for their customers.&lt;/p&gt;

&lt;p&gt;Therefore, integrating your own chatbot into one of the popular platforms that your customers use daily, can be better than building a new app by saving money and time. Furthermore, 65% of smartphone users don’t download any new apps in a month. Since users have their core apps such as Facebook, Instagram, WhatsApp etc., they don’t look for new ones.&lt;/p&gt;

</description>
      <category>analyst</category>
      <category>techtalks</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Difference between API and Web Service</title>
      <author>Chhotu</author>
      <pubDate>Thu, 08 Jul 2021 04:24:10 +0000</pubDate>
      <link>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</link>
      <guid>https://dev.to/chhotu05/difference-between-api-and-web-service-3oeb</guid>
      <description>&lt;p&gt;Let's see what definitions says.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API (Application Programming Interface) is a software interface that permits two applications to interact directly with each other without any user intervention.&lt;/li&gt;
&lt;li&gt;Web service is a collection of some open protocols and standards which are used to exchange data between systems or applications.

Now Let's understand the differences between them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Web services and APIs are two of these overlapping tech terms that often get confused. you would possibly have even heard these words used interchangeably, but are they even an equivalent thing?&lt;/p&gt;

&lt;p&gt;Here is the answer:&lt;br&gt;
   An API is an interface that permits you to build on the data and functionality of potentially another application, while a web service is a network-based resource that fulfills a specific task.&lt;br&gt;
   Yes, they overlap on each other: all web services are APIs, but not all APIs are web services.&lt;/p&gt;

&lt;p&gt;Contrary to what you would possibly think, APIs and web services aren't mutually exclusive. One is a subset of the other: every web service is an API — since it exposes an application’s data and it's functionality — but not every API is a web service. this is often because the definition of a web service is sort of restrictive when it involves implementation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web services require a network&lt;/strong&gt;. While APIs can be offline or online, web services must use a network.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;APIs are generally protocol agnostic&lt;/strong&gt;. Web services usually use SOAP (but sometimes REST, UDDI, and XML-RPC), whereas APIs can use any protocols or design styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aq-8DEFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l2ibhi15ksgsjq8eazr.jpg" alt="API vs WebServices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the key differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API is used for any style of communication, whereas Web service is used for only REST, SOAP and XML-RPC for communication.&lt;/li&gt;
&lt;li&gt;API supports both HTTP and HTTPS protocol, whereas Web service supports only HTTP protocol.&lt;/li&gt;
&lt;li&gt;API supports XML and JSON, whereas Web service only supports XML.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>systems</category>
      <category>architecture</category>
      <category>functional</category>
    </item>
    <item>
      <title>Create a Resume Uploader Using AWS Amplify</title>
      <author>Michael Liendo</author>
      <pubDate>Thu, 08 Jul 2021 04:09:53 +0000</pubDate>
      <link>https://dev.to/mtliendo/create-a-resume-uploader-using-aws-amplify-2e17</link>
      <guid>https://dev.to/mtliendo/create-a-resume-uploader-using-aws-amplify-2e17</guid>
      <description>&lt;p&gt;In the first part of this series, we learned how to send emails by creating a contact form. In this post, we'll take things up a notch by also allowing our users to upload attachments.&lt;/p&gt;

&lt;p&gt;Sites like Indeed.com allow for job seekers to upload their resumes with the idea that employers can browse those resumes to see if a candidate is a good fit.&lt;/p&gt;

&lt;p&gt;The scope of this post will be catered to job seekers submitting resumes, but it can also be extended to account for companies as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 Because the knowledge in this series builds with each post, in this post, we'll spend more time focusing on the &lt;em&gt;how&lt;/em&gt; and only touch on the &lt;em&gt;why&lt;/em&gt; when appropriate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;We'll kick things off by downloading the starter project. This will contain our UI, but it currently has no backend logic tied to it.&lt;/p&gt;

&lt;p&gt;👉🏽 &lt;a href="https://github.com/mtliendo/amplify-email-recipes/tree/resume-uploader-starter"&gt;Grab the starter files here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the project is cloned to our machine, we'll make sure we're on the &lt;code&gt;resume-uploader-starter&lt;/code&gt; branch. From here, we can install the dependencies and run our application. &lt;/p&gt;

&lt;p&gt;When running the application, we should be presented with the following screen:&lt;/p&gt;

&lt;p&gt;// screenshot of app&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ix3XVZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjwsoeiyf6uhrzzo705v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ix3XVZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjwsoeiyf6uhrzzo705v.png" alt="Project homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is nearly identical to the last project, however, when clicking the "upload resume" button there is a new option to upload a file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfduBfs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpnh44hu2rgiqvtm2v5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfduBfs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpnh44hu2rgiqvtm2v5q.png" alt="Modal with file upload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal of this project is to allow a user to upload a file, and have it both saved in AWS as well as emailed to a verified recipient.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-our-backend"&gt;
  &lt;/a&gt;
  Understanding Our Backend
&lt;/h2&gt;

&lt;p&gt;Before diving into the code, let's take a moment to walk through how our AWS services will be working together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wH8vCTVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d84npefc3ic0k0wm4r9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wH8vCTVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d84npefc3ic0k0wm4r9g.png" alt="Architecture Overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the above screenshot as a guide, as a candidate enters our application, they will be asked to sign up. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝  We want users to authenticate to not only restrict who can upload/download files, but also in case resumes have the same name ie. &lt;em&gt;resume.pdf&lt;/em&gt;. So we'll use their generated user ID as a prefix to their resume.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More on the note above later 😉 &lt;/p&gt;

&lt;p&gt;The next part of our application is very similar to the last post: Our API sends data to our database and upon being stored in the table, a function is triggered to send an email.&lt;/p&gt;

&lt;p&gt;This brings us to S3. &lt;/p&gt;

&lt;p&gt;When our frontend gets a &lt;em&gt;.pdf&lt;/em&gt; file, we'll store it in S3. Our lambda function will be in charge of grabbing the correct &lt;em&gt;.pdf&lt;/em&gt; and adding it as an attachment to the email.&lt;/p&gt;

&lt;p&gt;That's the general flow of the application. Let's get started on putting it all together.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;In our terminal, we'll make sure we're in the project's root directory. For here, we'll install some Amplify dependencies as well as initialize our project to use the Amplify CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the dependencies are done installing, there will be a prompt asking us how we would like our app configured. &lt;/p&gt;

&lt;p&gt;Enter a name of your choosing, then **select &lt;code&gt;n&lt;/code&gt; **when asked if you would like to initialize amplify with the default configuration.&lt;/p&gt;

&lt;p&gt;This is because we want to change the build directory from &lt;code&gt;build&lt;/code&gt; to &lt;code&gt;out&lt;/code&gt; since NextJS will be building our site as static HTML files.&lt;/p&gt;

&lt;p&gt;Hit enter to accept the default options when prompted, but when asked for a &lt;strong&gt;"Distribution Directory Path"&lt;/strong&gt; type &lt;em&gt;out&lt;/em&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;When done, confirm the profile you'd like to use. The entire flow should look similar to the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi3ON3u7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkiodsc9mzieu16y9if.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi3ON3u7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nkiodsc9mzieu16y9if.png" alt="amplify configure project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 If you ever accidentally accept the default configuration or want to change it later, typing the command &lt;code&gt;amplify configure project&lt;/code&gt; will take you back to the prompt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With our project configured, let's started adding our services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-authentication"&gt;
  &lt;/a&gt;
  Adding Authentication
&lt;/h2&gt;

&lt;p&gt;Amazon Cognito user pools will store our users while identity pools will manage their permissions. Amplify can set this up for us with reasonable defaults (password protection, TOTP, etc) all from the CLI.&lt;/p&gt;

&lt;p&gt;To get started, we'll type the following command in our terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The prompts will ask us how we would like to configure Amazon Cognito.&lt;/p&gt;

&lt;p&gt;For our use case, we'll make the following selections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Default Configuration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Username&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No, I am done.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The entire flow, should look like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysf3mbtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nomtvx36hol1l2dwusgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ysf3mbtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nomtvx36hol1l2dwusgj.png" alt="amplify add auth with default configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With auth templated through the CLI, let's move on to our next service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-api"&gt;
  &lt;/a&gt;
  Adding An API
&lt;/h2&gt;

&lt;p&gt;Setting up an API using AWS AppSync will be very similar to the last section, with the addition of a reference to the candidate's resume.&lt;/p&gt;

&lt;p&gt;Back in the terminal, type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the prompts that follow, select the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GraphQL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to select the default name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Amazon Cognito User Pool&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No, I am done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single object with fields&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The generated flow, should look like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGXGR9dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzms6x14arlfyct4jwxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGXGR9dO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzms6x14arlfyct4jwxc.png" alt="amplify add api flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecting "Yes" to the last option should've opened up our schema file in our editor. &lt;/p&gt;

&lt;p&gt;Replace the contents with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Candidate&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;operations&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;resumeFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;userIdentity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned in the last post, the &lt;code&gt;@model&lt;/code&gt; directive will automatically create our DynamoDB table and the corresponding CRUDL operations to interact with it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;@auth&lt;/code&gt; directive says that the only operations allowed on this API are the ability to create and update. Furthermore, those operations are scoped to the currently signed in user.&lt;/p&gt;

&lt;p&gt;The fields correspond to what is being stored in our database -- &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, and &lt;code&gt;resumeFile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also have a &lt;code&gt;userIdentity&lt;/code&gt; field. When a user is added to Cognito, a user ID is created for them. We are adding this to our API so that our lambda function (as well as employers in the future) will be able to access resumes. Note that this ID is not associated with our user's usernames or passwords 😉  &lt;/p&gt;

&lt;p&gt;The next two services are where things &lt;em&gt;really&lt;/em&gt; start to get interesting. Let's dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-s3-bucket"&gt;
  &lt;/a&gt;
  Adding An S3 Bucket
&lt;/h2&gt;

&lt;p&gt;In our application, we are choosing to store resumes in Amazon Simple Storage Service (S3). Doing so has the following benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Decreases the payload size of what we're storing in our database&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We don't have to mess around with sending multi-part form data to our lambda&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have a dedicated space where emails are sent, as opposed to just an email inbox&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Much like the other services thus far, we'll create our S3 bucket from within the CLI.&lt;/p&gt;

&lt;p&gt;To start, we'll type the following command in out terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📝 Amplify comes with two primary types of storage: A database, and an S3 bucket.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Through the prompts, we'll configure our S3 bucket by selecting the following options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Content&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept the default&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter] to accept the default&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Auth users only&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;use the spacebar to select all options&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When done, the generated output should look like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lRYLkd4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t1tdgdf0b1k59vygkpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lRYLkd4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t1tdgdf0b1k59vygkpw.png" alt="amplify add s3 configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With S3 configured, it's time to tie our services together!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-lambda-function"&gt;
  &lt;/a&gt;
  Adding A Lambda Function
&lt;/h2&gt;

&lt;p&gt;Our lambda function has the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is triggered by the dynamoDB table associated with our API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Has access to the S3 bucket we just created&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Has permission to send email with SES&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Amplify gives us the ability to accomplish all of this without heading to the AWS Console.&lt;/p&gt;

&lt;p&gt;To get started, type the following command in the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, make the following selections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Lambda function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"resumeFunc"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NodeJS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lambda Trigger&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon DynamoDB Stream&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use API category graphql @model table&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Configure Advanced Settings? Yes&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Y" to access other resources &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[use spacebar to select storage]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[use spacebar to select our S3 bucket]&lt;br&gt;
select "read"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"N" to not invoking on a recurring schedule&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"N" to not enable lambda layers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Y" to configuring environment variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SES_EMAIL&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[enter an email address you have access to]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"I'm done"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"N" we don't need to configure secret values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Y" we want to edit the local function now&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 If you think that was a lot of steps, try doing it manually!&lt;/p&gt;

&lt;p&gt;📝 Once done, the CLI should provide you with a few environment variables that it generated: &lt;code&gt;ENV&lt;/code&gt;, &lt;code&gt;REGION&lt;/code&gt;, and &lt;code&gt;_YOUR_BUCKET_&lt;/code&gt;. Keep track of the bucket variable for now as we'll be needing that later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kGorU8XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v74o0a1nde9g7vmin2iy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kGorU8XF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v74o0a1nde9g7vmin2iy.png" alt="Screenshot of generated variables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similar to the last post, this function will be triggered whenever there is a change event on our database (when an item is inserted, modified, or deleted). &lt;/p&gt;

&lt;p&gt;Also worth re-mentioning from the last post is that under heavy load, DynamoDB with batch changes together. This is why we are iterating over &lt;code&gt;event.Records&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Replace the generated code in the lambda function with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemailer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransport&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;SES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//pull off items from stream&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resumeFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;candidateEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;candidateName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;candidateIdentity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;streamedItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dynamodb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userIdentity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;
      &lt;span class="c1"&gt;//change this to match your bucket name👇🏽&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RESUME_BUCKET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STORAGE_RESUMEBUCKET_BUCKETNAME&lt;/span&gt; 
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//get record from s3&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resumeFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RESUME_BUCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`protected/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;candidateIdentity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;//setup email with attachment&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mailOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Candidate Resume Submission&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;p&amp;gt;You can reach &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;candidateName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at the following email: &amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;candidateEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SES_EMAIL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resumeFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//send email&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;transporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mailOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above can be split into four basic sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configure our project: Here we're bringing in and setting up relevant packages. The &lt;a href="https://nodemailer.com/transports/ses/"&gt;&lt;code&gt;nodemailer&lt;/code&gt; package&lt;/a&gt; is a handy utility we'll install in a bit. This makes sending emails with attachments a bit simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grabbing the data we need from the event&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting the relevant resume file. Note that our files are protected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting up our email and sending the email with an attachment.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The last thing to do here is give our function permission to call SES.&lt;/p&gt;

&lt;p&gt;In the last section, we set up SES. Feel free to grab the ARN from that resource, or follow the steps in that post to setup SES for the first time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 If you have the AWS CLI installed, you can actually setup an email by typing the following command in your terminal and clicking the verification link sent to the provided email address:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="nx"&gt;ses&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;emai&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="nx"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have an ARN for the SES email we created, we'll want to open up our function's cloudformation template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//from the root of your project&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;amplify&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="sr"&gt;/YOUR_FUNC_NAM&lt;/span&gt;&lt;span class="err"&gt;E
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From there, open the file ending in &lt;code&gt;-cloudformation-template.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add a statement to the &lt;code&gt;lambdaexecutionpolicy&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Effect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Allow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ses:SendRawEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR_SES_ARN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;lambdaexecutionpolicy&lt;/code&gt; should look like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBdW0_Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ji7u5qr6gahzyp29go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBdW0_Dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ji7u5qr6gahzyp29go.png" alt="lambda policy with ses sendRawEmail permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we'll change into the &lt;code&gt;src&lt;/code&gt; directory of our lambda function and install the nodemailer package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assuming we're still in the amplify/backend/function/ourFunction directory:&lt;/span&gt;

&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;nodemailer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📝 We don't have to install the &lt;code&gt;aws-sdk&lt;/code&gt; unless we're testing our function locally. AWS already installs this package in the lambda runtime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#configure-our-application"&gt;
  &lt;/a&gt;
  Configure Our Application
&lt;/h2&gt;

&lt;p&gt;With all of our services configured and connected, it's time to push them up to AWS.&lt;/p&gt;

&lt;p&gt;In the root of our application, we'll run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;amplify&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will bring up a table, showing all of our configured services. When asked if we'd like to continue, select yes (&lt;code&gt;Y&lt;/code&gt;) and accept all of the default options.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☕️ This will deploy our backend resources to the cloud, generate code for our API, and create an &lt;code&gt;aws-exports&lt;/code&gt; file containing our backend secrets (automatically added to &lt;code&gt;.gitignore&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzeUNfFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pxbsal4xdqjzx50ts18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzeUNfFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7pxbsal4xdqjzx50ts18.png" alt="Amplify status cli table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-our-frontend"&gt;
  &lt;/a&gt;
  Configuring Our Frontend
&lt;/h2&gt;

&lt;p&gt;With our backend successfully deployed, we can now connect it to our frontend.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;_app.js&lt;/code&gt; add the following snippet to connect our frontend to our Amplify backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-amplify/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to have our users sign in. In addition to letting our users have their own account, user sign in gives us the following benefits:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We have insight into who is storing information in our S3 bucket&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can control who has access to view and upload items in S3&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Amplify comes with several ways to add authentication to our applications depending on how much control we'd like to have over the process.&lt;/p&gt;

&lt;p&gt;For this project, we'll go with the simplest, which is a higher-ordered-function that fully manages the authentication flow.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt; modify the top portion to look like the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppHeader&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/AppHeader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withAuthenticator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-amplify/ui-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AppHeader&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ResumeModal&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/AppContainer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withAuthenticator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//rest of code...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to add the actual code that sends data from our frontend to both our database and to S3.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ResumeForm.js&lt;/code&gt; add the following import statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createCandidate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../src/graphql/mutations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;protected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API module will talk to AppSync, the Storage module will talk to S3 and we are bringing in our &lt;code&gt;createCandidate&lt;/code&gt; mutation that was generated automatically when we pushed up our schema.&lt;/p&gt;

&lt;p&gt;Note that we are setting the configuration level to &lt;code&gt;protected&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The S3 module comes with three modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;public&lt;/strong&gt;: All files are stored at the same level. Accessible to all users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;protected&lt;/strong&gt;: Files are separated by the user's Cognito identity ID. Anyone can read, but only the user can write.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;private&lt;/strong&gt;: Only accessible to the given user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;📝 In some cases, it might make sense for files to be public. What's important to remember is that files with the same name will overwrite one another, which would be bad in our application. Example: user1 uploads &lt;code&gt;resume.pdf&lt;/code&gt;, user2 uploads &lt;code&gt;resume.pdf&lt;/code&gt;. For that reason we use &lt;code&gt;protected&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The last bit before we test this out is to add the code that actually does the uploading. In the same file, there is a function called &lt;code&gt;handleResumeFormSubmit&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's replace the comment and console statement with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentCredentials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentCredentials&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resumeFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resumeFile&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createCandidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resumeFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;userIdentity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currentCredentials&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identityId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;📝 Because we configured S3 as &lt;code&gt;protected&lt;/code&gt;, it will automatically prepend our files with &lt;code&gt;protected/{COGNITO_IDENTITY_ID}/&lt;/code&gt;, however, we call &lt;code&gt;Auth.currentCredentials()&lt;/code&gt; to get the Cognito User Identity ID to send to our lambda function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After making sure all our files are saved, restarting the application and signing up for an account, we should be able to upload a &lt;em&gt;.pdf&lt;/em&gt; and have it sent to the email we verified with SES! 🎉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I'll be frank--it took &lt;em&gt;a lot&lt;/em&gt; longer to explain this process, than it did to actually do it 😅&lt;/p&gt;

&lt;p&gt;The level of power that AWS Amplify provides lies in its suite of tools. In this post we took a deep dive into its CLI. However, out of the box, it provides a CI/CD pipeline, UI components, an Admin UI, and much more. &lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read this! Let me know your thoughts and questions in the comments, or &lt;a href="https://twitter.com/intent/follow?screen_name=mtliendo"&gt;follow me on Twitter&lt;/a&gt; for more insights into AWS Amplify!&lt;/p&gt;

&lt;p&gt;Until next time 🤖 &lt;/p&gt;

</description>
      <category>aws</category>
      <category>amplify</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
