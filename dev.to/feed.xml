<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Amazing :: before &amp; ::after Simple CSS Explained</title>
      <author>Nikhil Bobade </author>
      <pubDate>Wed, 04 Aug 2021 14:20:26 +0000</pubDate>
      <link>https://dev.to/nikhil27b/amazing-before-after-simple-css-explained-1f7i</link>
      <guid>https://dev.to/nikhil27b/amazing-before-after-simple-css-explained-1f7i</guid>
      <description>&lt;p&gt;Hey Guys ,&lt;/p&gt;

&lt;p&gt;Today We are discussed very important topic in CSS. A pseudo-element is used to style specified parts of an element in this post I get some reference from Insharamin please follow her on twitter his have a good web development content.&lt;/p&gt;

&lt;p&gt;A many people are is don’t understand how to use ::before &amp;amp; ::after. A CSS ::before and ::after is a very useful pseudo element that is very simple and easy to understand example in this article so that anyone can understand it better Happy Reading.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-actually-are-before-and-after-"&gt;
  &lt;/a&gt;
  What actually are ::before and ::after ?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In CSS, these are known as pseudo elements.&lt;/li&gt;
&lt;li&gt;A pseudo-element is used to style specified parts of an element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, it can be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Style the first letter, or line, of an element&lt;/li&gt;
&lt;li&gt;Insert content before, or after, the content of an element.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#-before-"&gt;
  &lt;/a&gt;
  :: before :-
&lt;/h4&gt;

&lt;p&gt;The ::before pseudo-element can be used to insert some content before the content of an element.  You can be add anything before the content. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#after-"&gt;
  &lt;/a&gt;
  ::after :-
&lt;/h4&gt;

&lt;p&gt;The ::after pseudo-element can be used to insert some content after the content of an element. below is the best example for ::before and ::after.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/callmenick/embed/DjrAv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts. For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Python f-strings can do more than you thought</title>
      <author>Envoy-VC</author>
      <pubDate>Wed, 04 Aug 2021 14:17:34 +0000</pubDate>
      <link>https://dev.to/envoy_/python-f-strings-can-do-more-than-you-thought-23ag</link>
      <guid>https://dev.to/envoy_/python-f-strings-can-do-more-than-you-thought-23ag</guid>
      <description>&lt;p&gt;In this Article I'm going to be talking about f-strings and some of the cool things that you can do with them. so most of you are probably already aware of what f strings are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fstrings"&gt;
  &lt;/a&gt;
  🎯 f-strings
&lt;/h2&gt;

&lt;p&gt;
Also called “formatted string literals,” f-strings are string literals that have an f at the beginning and curly braces containing expressions that will be replaced with their values.
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1put-a-sign-afterwards"&gt;
  &lt;/a&gt;
  1.Put a '='  Sign afterwards
&lt;/h2&gt;

&lt;p&gt;One of the really cool things that you can do is just put an equals sign afterwards,eg-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello World'&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;152&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The value of word is f&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The value of num is f&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The value of word is Hello World
word='Hello World'
The value of num is f152
num=152
num + 8 =160
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2conversions"&gt;
  &lt;/a&gt;
  2.Conversions
&lt;/h2&gt;

&lt;p&gt;
So if you're not aware,  inside the curly braces of an f string after the expression you can put a

 ```!a ,!s , !r ```

 , and 
what these do is instead of printing the value of this thing, it will additionally do some extra thing on top of that.
&lt;/p&gt;



&lt;p&gt;
!r - repr() 'The repr() method returns a string containing a printable representation of an object.'
&lt;br&gt;
&lt;br&gt;
!a - ascii 'all the non ascii characters get replaced with an ascii safe escaped version of it'
&lt;br&gt; 
&lt;br&gt;
!s - string conversion operator 'formating'
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;str_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World 😀"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Hello World 😀'
'Hello World \U0001f600'
Hello World 😀
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3formatting"&gt;
  &lt;/a&gt;
  3.Formatting
&lt;/h2&gt;

&lt;p&gt;
':' after the variable 
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formatting&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;num_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;475.2486&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;#Formats the datee in the given format
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Rounds the decimal to 2 digits
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_value&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;now=2021-08-04
475.25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>programming</category>
      <category>todayilearned</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to learn devops</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 04 Aug 2021 14:10:03 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/how-to-learn-devops-48pc</link>
      <guid>https://dev.to/ajitsinghkaler/how-to-learn-devops-48pc</guid>
      <description>&lt;p&gt;So from the past few months I've been learning about AWS and a lot about Hashicorp stack too I've tried some projects deployed Forem, ghost, basic applications but it still seems I'm getting no where with devops. So what projects do you think I should do to be better at cloud deployment and SRE(software reliability engineering). Are thee some Github repo that I can follow or is there any curated list of articles or resources that should be followed I'm stumped here. If someone can help me in the comments?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>cloud</category>
      <category>help</category>
    </item>
    <item>
      <title>Make anchors in links work in EmberJS</title>
      <author>Michal Bryxí</author>
      <pubDate>Wed, 04 Aug 2021 13:54:26 +0000</pubDate>
      <link>https://dev.to/michalbryxi/make-anchors-in-links-work-in-emberjs-51l9</link>
      <guid>https://dev.to/michalbryxi/make-anchors-in-links-work-in-emberjs-51l9</guid>
      <description>&lt;p&gt;Every web app starts with an &lt;a href="https://en.wikipedia.org/wiki/URL"&gt;URL&lt;/a&gt;. And commonly used URLs for web apps usually look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://domain.com/path?query=value#fragment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last bit (&lt;code&gt;fragment&lt;/code&gt;) can be used to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#linking_to_an_element_on_the_same_page"&gt;instruct the browser&lt;/a&gt; to scroll the page to the element that has the same &lt;code&gt;id&lt;/code&gt; as said fragment. Those are usually called &lt;em&gt;anchors&lt;/em&gt; or &lt;em&gt;in-page-anchors&lt;/em&gt;. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;a&amp;gt; element links to the section below --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#Section_further_down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Jump to the heading below
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Heading to link to --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Section_further_down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Section further down&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The scrolling works when the user clicks on a link on current page and also when the user opens the URL from bookmarks or other app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Unfortunately with the advent of &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single-page applications&lt;/a&gt; (SPAs), this nifty feature of the browsers stopped working. &lt;/p&gt;

&lt;p&gt;Why? Because initially, SPA has minimal HTML with a link to a big JavaScript bundle that will eventually get parsed by the browser and &lt;em&gt;the JS code&lt;/em&gt; will populate the DOM with respective elements based on URL, data, code logic, etc.&lt;/p&gt;

&lt;p&gt;So at the initial page load when the browser checks in the DOM for the presence of an &lt;em&gt;tag&lt;/em&gt; that has the same &lt;em&gt;id&lt;/em&gt; as the &lt;em&gt;fragment&lt;/em&gt; in the &lt;em&gt;URL&lt;/em&gt; it will find nothing because the DOM is almost empty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Luckily &lt;a href="https://emberjs.com/"&gt;EmberJS&lt;/a&gt; has an addon (&lt;a href="https://github.com/CrowdStrike/ember-url-hash-polyfill"&gt;ember-url-hash-polyfill&lt;/a&gt;) that solves exactly this kind of problem in a very elegant way. From the addon README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Navigating to URLs with &lt;code&gt;#hash-targets&lt;/code&gt; in them is not supported by most single-page-app frameworks due to the async rendering nature of modern web apps -- the browser can't scroll to a &lt;code&gt;#hash-target&lt;/code&gt; on page load/transition because the element hasn't been rendered yet.&lt;/p&gt;

&lt;p&gt;This addon provides a way to support the behaviour that is normally native to browsers where an anchor tag with &lt;code&gt;href="#some-id-or-name"&lt;/code&gt; would scroll down the page when clicked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ember &lt;span class="nb"&gt;install &lt;/span&gt;ember-url-hash-polyfill
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just have to adjust your app &lt;code&gt;router.js&lt;/code&gt; and add a &lt;code&gt;withHashSupport&lt;/code&gt; decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/router.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withHashSupport&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-url-hash-polyfill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;withHashSupport&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EmberRouter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locationType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rootURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rootURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after that all URLs with &lt;em&gt;in-page-anchors&lt;/em&gt; in them should just work™.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lucassankey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lucas Sankey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/anchor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  Make anchors in links work in EmberJS&lt;/p&gt;

</description>
      <category>ember</category>
    </item>
    <item>
      <title>S3 types of Storage</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 04 Aug 2021 13:43:43 +0000</pubDate>
      <link>https://dev.to/this-is-learning/s3-types-of-storage-1535</link>
      <guid>https://dev.to/this-is-learning/s3-types-of-storage-1535</guid>
      <description>&lt;p&gt;We store files in S3 but we may need different types of storage based on our needs. Like some files that are infrequently accessed some that are needed once a year so paying the same charges as a normal storage does not make sense for these. So, based on our needs AWS has given us various types of storage based on needs.There are 6 types of storage types in AWS S3 &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;S3 Standard&lt;/strong&gt; for general-purpose storage of frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 Intelligent-Tiering&lt;/strong&gt; for data with unknown or changing access patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 Standard-Infrequent Access&lt;/strong&gt; (S3 Standard-IA)for long-lived, but less frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 One Zone-Infrequent Access&lt;/strong&gt; (S3 One Zone-IA) for long-lived, but less frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon S3 Glacier&lt;/strong&gt; (S3 Glacier) for archives&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon S3 Glacier Deep Archive&lt;/strong&gt; (S3 Glacier Deep Archive) for long-term archive and digital preservation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these storage classes varies on the availability of our objects in our S3 buckets for usage. Let us study each one of them in detail&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-standard"&gt;
  &lt;/a&gt;
  S3 Standard
&lt;/h2&gt;

&lt;p&gt;This is the storage type we have been using until now,it is the default for our S3 buckets. It has low latency and high availability. This is used when the data has a very frequent access. It has very high availability and AWS is bound by the &lt;a href="https://aws.amazon.com/s3/sla/"&gt;SLA agreement&lt;/a&gt; on this which makes sure its always highly available. It is used for dynamic websites, content distribution, mobile and gaming applications, and big data analytics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-standardinfrequent-access"&gt;
  &lt;/a&gt;
  S3 Standard-Infrequent Access
&lt;/h2&gt;

&lt;p&gt;This has 99.9% percent availability. Suitable for data when is accessed less but requires immediate access when needed. It requires less money for storage but whenever we retrieve the objects under this class we have to pay a fee so its not good for frequent access. It is mainly used for  long-term storage, backups, and as a data store for disaster recovery files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-intelligenttiering"&gt;
  &lt;/a&gt;
  S3 Intelligent-Tiering
&lt;/h2&gt;

&lt;p&gt;If you don't know where to put your data in standard access or Infrequent Access. We have this storage class in which S3 automatically stores data according to pour retrieval rates. If data is frequently accessed then it is put in standard storage other wise in Infrequent Access . This is the most cost optimized class if you don't want to think in which class to put your data. It is the ideal storage class for data sets with unknown storage access patterns, like new applications, or unpredictable access patterns, like data lakes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-one-zoneinfrequent-access"&gt;
  &lt;/a&gt;
  S3 One Zone-Infrequent Access
&lt;/h2&gt;

&lt;p&gt;One Zone-Infrequent Access it has all the same properties of Infrequent access except all the above storage are in 3 availability zones but this storage class is only in one AZ so is prone to disasters. It is ideal for customers who want a lower-cost option for infrequently accessed data but do not require the availability and resilience of S3 Standard or S3 Standard-IA. It’s a good choice for storing secondary backup copies of on-premises data or easily re-creatable data. You can also use it as cost-effective storage for data that is replicated from another AWS Region using S3 Cross-Region Replication. It is normally used for data that you want ti copy across regions as copying it across 3 AZ may not make sense.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-glacier"&gt;
  &lt;/a&gt;
  Amazon S3 Glacier
&lt;/h2&gt;

&lt;p&gt;S3 glacier is a very low cost storage available on S3. Normally data stored here is kept for years. you normally use it for data archiving. You can reliably store any amount of data at costs that are competitive with or cheaper than on-premises solutions. It has 3 sub classes of data retrievals available in S3 glacier &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expedited - Data retrieval in 1 to 5 min&lt;/li&gt;
&lt;li&gt;Standard - Data retrieval in 3 to 5 hours&lt;/li&gt;
&lt;li&gt;Bulk - Data retrieval in 5 to 12 hours&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-deep-glacier"&gt;
  &lt;/a&gt;
  Amazon S3 Deep Glacier
&lt;/h2&gt;

&lt;p&gt;S3 Glacier Deep Archive is Amazon S3’s lowest-cost storage class and supports long-term retention and digital preservation for data that may be accessed once or twice in a year. It is designed for customers — particularly those in highly-regulated industries, such as the Financial Services, Healthcare, and Public Sectors — that retain data sets for 7-10 years or longer to meet regulatory compliance requirements. S3 Glacier Deep Archive can also be used for backup and disaster recovery use cases, and is a cost-effective and easy-to-manage alternative to magnetic tape systems, whether they are on-premises libraries or off-premises services. S3 Glacier Deep Archive complements Amazon S3 Glacier, which is ideal for archives where data is regularly retrieved and some of the data may be needed in minutes. It has 3 sub classes of data retrievals available in S3 deep glacier &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Standard - Data retrieval in 12 hours&lt;/li&gt;
&lt;li&gt;Bulk - Data retrieval in 48 hours&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;th&gt; &lt;/th&gt;

&lt;th&gt;S3 Standard&lt;/th&gt;

&lt;th&gt;S3 Intelligent-Tiering*&lt;/th&gt;

&lt;th&gt;S3 Standard-IA&lt;/th&gt;

&lt;th&gt;S3 One Zone-IA†&lt;/th&gt;

&lt;th&gt;S3 Glacier&lt;/th&gt;

&lt;th&gt;S3 Glacier Deep Archive&lt;/th&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Designed for durability&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Designed for availability&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.5%&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Availability SLA&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Availability Zones&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;1&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Minimum capacity charge per object&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;128KB&lt;/td&gt;

&lt;td&gt;128KB&lt;/td&gt;

&lt;td&gt;40KB&lt;/td&gt;

&lt;td&gt;40KB&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Minimum storage duration charge&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;90 days&lt;/td&gt;

&lt;td&gt;180 days&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Retrieval fee&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;First byte latency&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;select minutes or hours&lt;/td&gt;

&lt;td&gt;select hours&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Storage type&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Lifecycle transitions&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this article we studies about the various S3 classes in the next article we will study how to use them and move various things into different storage classes.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>
Best Practices for Cloud Disaster Recovery in Microsoft Azure</title>
      <author>We are IOD</author>
      <pubDate>Wed, 04 Aug 2021 13:36:57 +0000</pubDate>
      <link>https://dev.to/iod/best-practices-for-cloud-disaster-recovery-in-microsoft-azure-2dg0</link>
      <guid>https://dev.to/iod/best-practices-for-cloud-disaster-recovery-in-microsoft-azure-2dg0</guid>
      <description>&lt;p&gt;In today’s cloud era, the ability to bounce back after downtime can make or break your business. Disaster recovery (DR) capabilities should therefore be a key consideration when choosing a cloud platform. Leveraging the cloud as a secondary data center for DR is often the first step in cloud adoption, and disaster recovery as a service (DRaaS) offerings from various cloud service providers underline this fact.&lt;/p&gt;

&lt;p&gt;Azure packs a punch with multiple DR options for services like VMs, storage, databases, and containers. In this blog post, I’ll explore these options and discuss how you can develop a robust business continuity and disaster recovery (BCDR) strategy for your workloads hosted in Azure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-consider-when-creating-your-dr-plan-in-azure"&gt;
  &lt;/a&gt;
  What to Consider When Creating Your DR Plan in Azure
&lt;/h2&gt;

&lt;p&gt;Contrary to popular belief, applications hosted in the cloud are not foolproof—failures happen. Since application downtime can be disastrous for your business, you need a well-defined DR strategy to be prepared to handle failures. This strategy should cover the entire application stack, not just the services you think are important.&lt;/p&gt;

&lt;p&gt;You might need to manually trigger the DR process yourself in order to differentiate between transient failures and actual downtimes. However, the failover process in Azure should be automated as much as possible. &lt;a href="https://stagemarketer.wpengine.com/blog/monitoring-in-azure-the-high-level-fundamentals/"&gt;Configure alerts&lt;/a&gt; so you can stay informed about failures and take necessary actions to trigger your DR plan.&lt;/p&gt;

&lt;p&gt;With Azure, you can choose to deploy application components across Azure regions to protect from regional failures. If applications are regional, you can deploy them in availability zones (physically separated zones within a region) to protect from data center failures. Your choice will depend on the type of resiliency you want to deliver for your application. In addition to a DR strategy that protects from cateroscopic failures, you should have a backup strategy for  preventing unavailability due to data corruption or application configuration.&lt;/p&gt;

&lt;p&gt;Your DR strategy should also clearly define the DR process, which activities will be completed when the plan is triggered, and who will be responsible for executing the plan. However, a detailed DR strategy won’t really help unless you test and fine-tune it regularly. This is where services that offer non-disruptive DR testing, such as Azure’s DR solution, come into play. Similarly, executing a regular test restore of backups in a test environment will help avoid surprises during an eventuality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disaster-recovery-in-azure-what-are-your-options"&gt;
  &lt;/a&gt;
  Disaster Recovery in Azure: What Are Your Options?
&lt;/h2&gt;

&lt;p&gt;Before developing a DR strategy, you should be clear about the recovery point objective (RPO) and recovery time objective (RTO) for your workloads. For example, if a bit of downtime is okay with you (i.e., non-prod and test environments), a complete redeployment of applications is a good choice. You can also choose to adopt an active/passive or warm-spare approach, where a &lt;a href="https://stagemarketer.wpengine.com/blog/cost-optimization-in-azure-the-building-blocks-part-1/"&gt;scaled-down secondary service&lt;/a&gt; is ready to take over in the event of a failure. It’s most effective to use an active/active or hot-spare architecture, where instances of the application are available in multiple regions in order to accept production traffic.&lt;/p&gt;

&lt;p&gt;Azure offers native capabilities built into most of its services, which can be leveraged to develop a well-rounded DR strategy. Note that it’s important to start from the ground up (i.e., covering infrastructure, if applicable, as well as data and application layers) in order to develop a comprehensive solution. Below I’ll explore the DR options for common Azure services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h2&gt;

&lt;p&gt;Azure Site Recovery, Azure’s DRaaS offering, helps protect your VMs from outages by continuously replicating them to a different paired region. In the event of a disaster, the VMs can be failed over to the secondary region, and you can enable access from there. You can also fail back to the primary region once the outage is over. Organizations often use Azure Site Recovery to leverage Azure as their DR site, as it supports replicating VMs in VMware/Hyper-V or in physical machines to Azure.&lt;/p&gt;

&lt;p&gt;Azure Backup is another solution you can include in the BCDR strategy for your VMs. You can use this cloud-based backup service to take point-in-time copies of data in the VMs. The backup copies can then be restored to bring your application back online in the event of data loss or corruption. For the highest level of availability and resiliency from failure, use a &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/n-tier/multi-region-sql-server"&gt;multi-region architecture&lt;/a&gt;, in which both primary and secondary regions are factored into the design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;An Azure Storage account can be deployed as geo-redundant, allowing data in the storage account to be replicated to the secondary region asynchronously. In case of an outage that renders the primary end point unavailable, you can initiate an account failover for &lt;a href="https://docs.microsoft.com/en-us/azure/backup/azure-file-share-backup-overview"&gt;Azure Storage&lt;/a&gt;. The failover process will cause the secondary endpoint to become the primary one so that applications can continue to use the storage. &lt;/p&gt;

&lt;p&gt;For Azure Blob, you can use snapshots to create read-only point-in-time copies of the data. Azure files can be protected through a scheduled Azure backup. You can also use the snapshot feature to create point-in-time copies of the data, similar to Azure Blob. If your application is utilizing Azure Table storage, use the &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10"&gt;AzCopy&lt;/a&gt; tool to copy the data to a different storage account in another Azure region for DR purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h2&gt;

&lt;p&gt;Your DR strategy for databases will depend on whether you are using IaaS or PaaS as the deployment approach. For SQL Server and SAP HANA databases hosted in VMs, you can use the integrated Azure Backup feature to discover and configure regular backup without deploying any additional infrastructure. &lt;/p&gt;

&lt;p&gt;There are also managed databases like Azure SQL, MySQL, PostgreSQL, and Cosmos DB, delivered as PaaS services. For those databases, Azure offers an automated backup service that takes regular snapshot-based backups of the database to a separate storage account. If you need the backups to be retained for a longer period of time, Azure SQL offers a &lt;a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/long-term-retention-overview"&gt;long-term backup retention feature&lt;/a&gt; that allows you to store your backup copies in a storage account for up to 10 years.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#containers"&gt;
  &lt;/a&gt;
  Containers
&lt;/h2&gt;

&lt;p&gt;Azure provides a robust ecosystem of services to support &lt;a href="https://stagemarketer.wpengine.com/blog/what-you-should-know-about-containers-in-azure/"&gt;container-based workloads&lt;/a&gt;, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Kubernetes Service (AKS)&lt;/li&gt;
&lt;li&gt;Azure Container Instances (ACI)&lt;/li&gt;
&lt;li&gt;Azure App Service&lt;/li&gt;
&lt;li&gt;Azure Container Registry (ACR)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AKS uses VM scale sets that can protect your workloads from node failures. However, to protect from regional outages, you should consider multi-region deployments that &lt;a href="https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-multi-region#use-azure-traffic-manager-to-route-traffic"&gt;leverage Azure Traffic Manager&lt;/a&gt; to route traffic to available regions.&lt;/p&gt;

&lt;p&gt;It’s also important to segregate the process of recovering your application and data. You can leverage Azure Storage solutions like disks and file shares to create &lt;a href="https://docs.microsoft.com/en-us/azure/aks/concepts-storage#persistent-volumes"&gt;persistent volumes&lt;/a&gt; for applications hosted in containers, then protect that data using Azure Backup. ACR’s geo-replication feature allows you to access your container images from a secondary region, should the primary endpoint go down due to a regional outage. &lt;/p&gt;

&lt;p&gt;In addition, you should have a well-defined DevOps process for redeploying infrastructure to a different region through IAC, and for redeploying applications through a CI/CD process, should there be a downtime due to a cloud outage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-app-service"&gt;
  &lt;/a&gt;
  Azure App Service
&lt;/h2&gt;

&lt;p&gt;For Azure App Service, &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/app-service-web-app/multi-region"&gt;multi-region deployment&lt;/a&gt; is the best way to minimize application downtime. You can also leverage the backup and restore feature of Azure App Service, which automatically creates a backup of your application configuration, file content, and databases connected to the app. In case of regional outages, applications hosted in Azure App Service will be placed in DR mode. In this mode, you can restore your app contents to a destination app in a different Azure region.&lt;/p&gt;

&lt;p&gt;With a mature DevOps practice in place, you can also restore the application by redeploying the code targeting the new destination app. For serverless apps like Azure Functions and microservices-based deployments, it’s best to separate the configuration from the code in cloud-scale deployments. You can use &lt;a href="https://docs.microsoft.com/en-us/azure/azure-app-configuration/overview"&gt;Azure App Configuration&lt;/a&gt; to store configuration information that can be accessed during runtime. This approach also helps fast-track the redeployment process of applications during a disaster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The modern cloud-scale applications deployed in Azure offer multiple options for DR. Be it end-to-end replication using Azure Site Recovery for VMs, leveraging CI/CD pipelines for redeployment, or the more traditional backup/restore approach for services like Azure apps, databases, and containers, the best solution for you will depend on your RPO and RTO. In most cases, you can create an effective solution using Azure-native tools and services and by integrating elements of DR into your application architecture.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>azure</category>
    </item>
    <item>
      <title>A lightweight markdown + WYSWYG editor by elastic UI</title>
      <author>Rahul kumar</author>
      <pubDate>Wed, 04 Aug 2021 13:05:19 +0000</pubDate>
      <link>https://dev.to/ats1999/a-lightweight-markdown-wyswyg-editor-by-elastic-ui-1hph</link>
      <guid>https://dev.to/ats1999/a-lightweight-markdown-wyswyg-editor-by-elastic-ui-1hph</guid>
      <description>&lt;p&gt;&lt;a href="https://elastic.github.io/eui/#/editors-syntax/markdown-editor#base-editor"&gt;editor-link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am very impressed with this editor, i was looking for such an editor for a very long time. &lt;/p&gt;

&lt;p&gt;I want to use this in a project, but it dose't available as standalone editor. &lt;/p&gt;

&lt;p&gt;Does anyone knows such an standalone editor??&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How IHP uses Haskell's Type System to enforce good patterns</title>
      <author>digitallyinduced</author>
      <pubDate>Wed, 04 Aug 2021 12:56:30 +0000</pubDate>
      <link>https://dev.to/digitallyinduced/how-ihp-uses-haskell-s-type-system-to-enforce-good-patterns-2kjn</link>
      <guid>https://dev.to/digitallyinduced/how-ihp-uses-haskell-s-type-system-to-enforce-good-patterns-2kjn</guid>
      <description>&lt;p&gt;Good patterns and clean code are what differentiates a production application from a legacy application. In a lot of cases, many production applications become legacy applications with time, because patterns aren't enforced and therefore ignored, wrongly interpreted, or otherwise abandoned.&lt;/p&gt;

&lt;p&gt;IHP uses Haskell as its language of choice, and one big reason for this is the typesafety that Haskell provides. After reading this article you'll hopefully understand how IHP is making use of Haskell's strong typesystem to enforce proper use of patterns shared between all IHP applications, which prevents your production webapp from becoming a legacy webapp.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote:&lt;/em&gt; at digitally induced we have multiple older IHP apps, none of which we consider "legacy", even if they've been running for quite some time. If we need to make changes to them, it is very easy to get back into them and understand what is going on, as all IHP apps follow similar patterns. We know what to expect, and where to find the code we're looking for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modelviewcontroller"&gt;
  &lt;/a&gt;
  Model-View-Controller
&lt;/h2&gt;

&lt;p&gt;Let's get the biggest point out of the way first. IHP uses the popular Model-View-Controller pattern, which is characterized by the three parts giving the pattern its name:&lt;/p&gt;

&lt;p&gt;The Model is the data of the application, which has a static structure when running, but variable content, as the content is user-generated. In IHP all data types are auto-generated from the database schema, ensuring that the code you write is always compatible with the database.&lt;/p&gt;

&lt;p&gt;The View is a simple mapping that turns data into Html. Using Haskell's type system, this is enforced by defining every view as a pure function (a function without side-effects that always produces the same output if it receives the same input). You might have heard that that's the core idea of React as well, and it's a reason React is so popular: the render function should simply take the current component's state and render Html based on that. However, React has the problem that everything else is also possible in the view, and in a way even requires it to be there, including updating state. In IHP, the view really fulfills this promise, and it's enforced by the type system.&lt;/p&gt;

&lt;p&gt;The Controller is the part of the application that contains the actual business logic, and should be the only place in the application that is able to interact with the outside world, including the database (also known as IO: Input and Output). In Haskell, doing IO isn't possible everywhere, only in functions that have been declared to be able to do it. IHP makes use of that by defining the actions (endpoints of controllers) as the only functions that can run IO things. Even if someone is tempted to fetch data from the database in the View, they can't, because the controller is simply going to prevent it from working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch-all-required-information"&gt;
  &lt;/a&gt;
  Fetch all required information
&lt;/h2&gt;

&lt;p&gt;As described above, the View is a function mapping data to Html. However, this data is different from view to view of course. Since the data has to be fetched by the controller, the view defines a data structure which the controller needs to completely fetch the information for to render the view, which makes sure that no information is ever missing in the view, not even accidentally. And when some information is not necessary anymore, you can just remove it from the view data structure, which will cause compiler errors everywhere where you're still fetching it (where there could now be unnecessary code).&lt;/p&gt;

&lt;p&gt;To read more about how passing the data from controller actions to the view works, &lt;a href="https://ihp.digitallyinduced.com/Guide/controller.html#passing-data-from-the-action-to-the-view"&gt;read the documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-missing-information-for-links"&gt;
  &lt;/a&gt;
  No missing information for links
&lt;/h2&gt;

&lt;p&gt;When the user wants to interact with the website, they mainly do so via links. Usually links are simply strings, which means that if parameters are required but missing, this can only be detected via trial-and-error. Using IHP's &lt;code&gt;pathTo&lt;/code&gt; and &lt;code&gt;urlTo&lt;/code&gt; functions, you can build the links between pages of your application in a typesafe way, which means you're not going to forget to send new necessary information when an endpoint requires it, and will not forget to remove it when it's unnecessary anymore. Renaming is a non-issue as well, and typos are (again) compiler errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ids-cannot-be-used-to-query-the-wrong-database-table"&gt;
  &lt;/a&gt;
  IDs cannot be used to query the wrong database table
&lt;/h2&gt;

&lt;p&gt;In IHP, IDs are (by default) UUIDs. But even if you use Integer-based IDs instead, you could run into a situation where you'd accidentally use a user-ID for querying a different table, and wouldn't be any wiser, since both are UUIDs. In IHP on the other hand, all IDs are wrapped once more, making the type of the ID &lt;code&gt;Id User&lt;/code&gt; for example. You then can't use this ID to for example fetch a product.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If for some obscure reason you still need to do this, or you get the ID as another type and need to convert it to this special type, that's of course possible.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This special type also allows the &lt;code&gt;fetch&lt;/code&gt; function that queries the database for a single row with the given ID to be super simple to call: since the ID already contains the information of which table it's for, you don't have to do any more work than passing the ID to the function, and it will take care of the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ensuring-proper-html"&gt;
  &lt;/a&gt;
  Ensuring proper HTML
&lt;/h2&gt;

&lt;p&gt;Views in IHP are written in Haskell, using something called HSX, which is the same basic idea as JSX in React. That means you write the HTML you would normally write, and can easily include dynamic Haskell code where needed.&lt;/p&gt;

&lt;p&gt;Since HSX is just syntactic sugar for other Haskell functions though, it is typesafe! That means you can't use attributes for elements where the spec doesn't allow for it, and many markup errors (like forgetting to close a tag) are caught at compile-time.&lt;/p&gt;

&lt;p&gt;If you need to use custom attributes, that's what &lt;code&gt;data-&lt;/code&gt; attributes are for, and they are fully supported. Just like custom web components.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bonus:&lt;/em&gt; beginners in React often want to quickly output the content of some data they have, and try to just inline the variable in their JSX. They are then often surprised to see &lt;code&gt;[Object object]&lt;/code&gt;, since converting an object to a string in JS will lead to this result. In HSX, this will call &lt;code&gt;show&lt;/code&gt; on the provided data if possible, leading to the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-maybe-endraw-and-the-dreaded-raw-nullpointerexception-endraw-or-raw-typeerror-variable-is-undefined-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Maybe&lt;/code&gt; and the dreaded &lt;code&gt;NullPointerException&lt;/code&gt; (or &lt;code&gt;TypeError: variable is undefined&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;While technically not IHP-exclusive, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; do not exist in Haskell. Instead, if you need to represent something not being there, you can use &lt;code&gt;Nothing&lt;/code&gt;, which is a value for the &lt;code&gt;Maybe&lt;/code&gt; type. Using this, you can represent that something might not be there, which will force you to handle that case. But once you've handled that case, you don't have to handle it again - something that I've seen a lot in medium to larger codebases, where it's not always entirely clear where a value might come from.&lt;/p&gt;

&lt;p&gt;What this means in essence is that you will never get a &lt;code&gt;NullPointerException&lt;/code&gt; or a &lt;code&gt;TypeError: yourVariable is undefined&lt;/code&gt; when using IHP!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;IHP makes as much use of Haskell's types as possible, leading to less bugs and an easier-to-grasp codebase that won't become legacy. If this article peaked your interest in IHP, &lt;a href="https://ihp.digitallyinduced.com/Guide/installation.html"&gt;you can get started using the Guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>typescript</category>
      <category>haskell</category>
      <category>ihp</category>
    </item>
    <item>
      <title>Upcoming event: Live AMA with Jason &amp; Kishore, Typesense</title>
      <author>Amazer786</author>
      <pubDate>Wed, 04 Aug 2021 12:45:07 +0000</pubDate>
      <link>https://dev.to/amazer786/upcoming-event-live-ama-with-jason-kishore-typesense-2bki</link>
      <guid>https://dev.to/amazer786/upcoming-event-live-ama-with-jason-kishore-typesense-2bki</guid>
      <description>&lt;p&gt;Typesense is a modern, privacy-friendly, open-source search engine built from the ground up using cutting-edge search algorithms that take advantage of the latest advances in hardware capabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why should you join?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Typesense is on a mission to democratize search with an Open Source, out-of-the-box, easier-to-use alternative to Algolia and Elastic search.&lt;/p&gt;

&lt;p&gt;2) Typesense is built specifically for decreasing the "time to market". It is a lightweight yet powerful &amp;amp; scalable alternative that focuses on Developer Happiness and Experience with a clean well-documented API, clear semantics and smart defaults.&lt;/p&gt;

&lt;p&gt;3) Typesense has been built from scratch to offer a delightful search experience with minimal effort using cutting-edge search algorithms that take advantage of the latest advances in hardware capabilities&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s talk about Search engines, Open-Source and everything in between.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✍ Join and ask all your questions in the comments&lt;/p&gt;

&lt;p&gt;Join Here 👉🏻 &lt;a href="https://bit.ly/3ypFE8s"&gt;https://bit.ly/3ypFE8s&lt;/a&gt; 👈🏻&lt;/p&gt;

&lt;p&gt;Save the date: 📆&lt;strong&gt;Friday, Aug 6th, 2021&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part I&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🚩Jason &amp;amp; Kishore, Maintainer, Typesense.Time-&lt;strong&gt;7 PM IST  (Asia)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part II&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🚩Jason &amp;amp; Kishore, Maintainer, Typesense.Time-&lt;strong&gt;7 PM PST (North America)&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 GitHub repos based on HTML</title>
      <author>Pasca Vlad</author>
      <pubDate>Wed, 04 Aug 2021 12:21:05 +0000</pubDate>
      <link>https://dev.to/pascavld/10-github-repos-based-on-html-256n</link>
      <guid>https://dev.to/pascavld/10-github-repos-based-on-html-256n</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-html5boilerplate"&gt;
  &lt;/a&gt;
  1. html5-boilerplate
&lt;/h3&gt;

&lt;p&gt;A professional front-end template for building fast, robust, and adaptable web apps or sites.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/h5bp/html5-boilerplate"&gt;https://github.com/h5bp/html5-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-html5reset"&gt;
  &lt;/a&gt;
  2. HTML5-Reset
&lt;/h3&gt;

&lt;p&gt;A simple set of best practices to get HTML5 projects off on the right foot.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/murtaugh/HTML5-Reset"&gt;https://github.com/murtaugh/HTML5-Reset&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-html5devicemockups"&gt;
  &lt;/a&gt;
  3. html5-device-mockups
&lt;/h3&gt;

&lt;p&gt;HTML5 mockups of popular devices, to showcase your portfolio and spice up your website.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/pixelsign/html5-device-mockups"&gt;https://github.com/pixelsign/html5-device-mockups&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-awesomehtml5"&gt;
  &lt;/a&gt;
  4. Awesome-html5
&lt;/h3&gt;

&lt;p&gt;A curated list of awesome HTML5 resource&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/diegocard/awesome-html5"&gt;https://github.com/diegocard/awesome-html5&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-htmlminifier"&gt;
  &lt;/a&gt;
  5. html-minifier
&lt;/h3&gt;

&lt;p&gt;Javascript-based HTML compressor/minifier (with Node.js support)&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/kangax/html-minifier"&gt;https://github.com/kangax/html-minifier&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-shower"&gt;
  &lt;/a&gt;
  6. shower
&lt;/h3&gt;

&lt;p&gt;Shower HTML presentation engine&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/shower/shower"&gt;https://github.com/shower/shower&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-htmldom"&gt;
  &lt;/a&gt;
  7. html-dom
&lt;/h3&gt;

&lt;p&gt;Common tasks of managing HTML DOM with vanilla JavaScript.&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/phuoc-ng/html-dom"&gt;https://github.com/phuoc-ng/html-dom&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-materialdesignlite"&gt;
  &lt;/a&gt;
  8. material-design-lite
&lt;/h3&gt;

&lt;p&gt;Material Design Components in HTML/CSS/JS&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/google/material-design-lite"&gt;https://github.com/google/material-design-lite&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-tabler"&gt;
  &lt;/a&gt;
  9. tabler
&lt;/h3&gt;

&lt;p&gt;Tabler is free and open-source HTML Dashboard UI Kit built on Bootstrap&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/tabler/tabler"&gt;https://github.com/tabler/tabler&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-framework7"&gt;
  &lt;/a&gt;
  10. framework7
&lt;/h3&gt;

&lt;p&gt;Full featured HTML framework for building iOS &amp;amp; Android apps&lt;/p&gt;

&lt;p&gt;🔗&lt;a href="https://github.com/framework7io/framework7"&gt;https://github.com/framework7io/framework7&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>html</category>
    </item>
    <item>
      <title>Project Collaboration And Pair Programming</title>
      <author>Ayu Adiati</author>
      <pubDate>Wed, 04 Aug 2021 11:49:14 +0000</pubDate>
      <link>https://dev.to/adiatiayu/project-collaboration-and-pair-programming-4be6</link>
      <guid>https://dev.to/adiatiayu/project-collaboration-and-pair-programming-4be6</guid>
      <description>&lt;p&gt;Hello Fellow Codenewbies 👋,&lt;/p&gt;

&lt;p&gt;A bit of background, I am a self-taught front-end developer. &lt;br&gt;
In this article, I want to share my experience in project collaboration and pair programming.&lt;/p&gt;

&lt;p&gt;A while ago, I had a chance to collaborate in creating a project with vanilla Javascript.&lt;br&gt;
One of the approaches that we did to collaborate was pair programming.&lt;/p&gt;

&lt;p&gt;The first time I heard the term &lt;em&gt;pair programming&lt;/em&gt;, I imagined two (or more) developers learning the same topics together. &lt;br&gt;
But that wasn't it! 😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pair-programming"&gt;
  &lt;/a&gt;
  Pair Programming
&lt;/h2&gt;

&lt;p&gt;So, what is pair programming?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pair programming is an agile software development technique in which two programmers work together at one workstation. One, the &lt;strong&gt;driver&lt;/strong&gt;, writes code while the other, the &lt;strong&gt;observer&lt;/strong&gt; or &lt;strong&gt;navigator&lt;/strong&gt;, reviews each line of code as it is typed in. The two programmers switch roles frequently.&lt;br&gt;
-- &lt;a href="https://en.wikipedia.org/wiki/Pair_programming"&gt;Wikipedia&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#first-experience-doing-pair-programming"&gt;
  &lt;/a&gt;
  First Experience Doing Pair Programming
&lt;/h2&gt;

&lt;p&gt;As a self-taught, I spent my time learning and coding solo. I solve problems and make decisions alone.&lt;br&gt;
So when I had the chance, I saw the team project as a good opportunity to learn to collaborate.&lt;/p&gt;

&lt;p&gt;As the first step, we had a meeting to decide on a project app that we would create and how this app would work in general.&lt;/p&gt;

&lt;p&gt;Next, we planned the features that we want for the app and started pair programming to create those features.&lt;br&gt;
So the pair programming journey began.&lt;/p&gt;

&lt;p&gt;In the first couple of sessions, I only observed how pair programming works to get a grip on it.&lt;br&gt;
But then, I got confused about what's going on and freaked out!&lt;/p&gt;

&lt;p&gt;Before the navigation, some of us were talking over the solutions. But those solutions were not what I would think of as my first approach. So I needed some time to digest them. When two or more people are having the same thoughts, the pace goes faster. That is exactly what happened. I didn't want to break the flow by asking questions or asking them to slow down. And while I was still trying to figure things out, the problems were solved. &lt;/p&gt;

&lt;p&gt;The confusion in trying to wrap my head around what's going on while having a somewhat fast pace was the thing that freaked me out. I faced the famous imposter syndrome until I did the next session a few weeks later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-the-driver"&gt;
  &lt;/a&gt;
  Be The Driver
&lt;/h2&gt;

&lt;p&gt;Although I'm an introvert, I don't have trouble with general communication. But communicating codes and go through them with other people requires another skill. A skill that I'm sure everyone can get better at with practice.&lt;/p&gt;

&lt;p&gt;On the next session of pair programming, I got the opportunity to be the driver, the one who writes the code.&lt;br&gt;
This was when I finally learned so many things about pair programming and its benefits.&lt;/p&gt;

&lt;p&gt;As the driver, I need to listen to the navigators' instructions and type/write the codes in a good structure.&lt;br&gt;
There were times when the navigators were talking too fast. And there were also times when the given instructions were not too clear, or when I wasn't sure how to write the codes.&lt;br&gt;
When it happened, I &lt;em&gt;had&lt;/em&gt; to ask them to slow down, or repeat and give clearer instructions, or told them that I need a minute to google the syntax. These were necessary for me to write the codes.&lt;br&gt;
By listening, writing the codes, and asking questions, I started to understand what's going on and was able to follow the whole process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;Pair programming gives many benefits. Some of them that I've experienced are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn to work in a team.&lt;/li&gt;
&lt;li&gt;With more heads solving the problems, the project is done faster.&lt;/li&gt;
&lt;li&gt;When people talking through solutions, we could gain new knowledge.&lt;/li&gt;
&lt;li&gt;Everyone learns to listen and communicate better as a team.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For self-taught developers, it would be a challenge to get this experience, but it's not impossible.&lt;br&gt;
Try to &lt;a href="https://dev.to/adiatiayu/networking-community-4kp3"&gt;find a community&lt;/a&gt; to open up a chance for you to collaborate on a project, and even for networking. &lt;br&gt;
If you're doing an online course on Udemy or any other platforms, you can try to find a study buddy and do pair programming from there.&lt;/p&gt;

&lt;p&gt;And if it is your first time, volunteering to be the driver could give you a better view of pair programming. Also, it's okay for you to ask questions or to ask other collaborators to slow down.&lt;/p&gt;

&lt;p&gt;It's completely normal if you feel confused or uncomfortable in your first sessions. Like other things, pair programming takes practice.&lt;br&gt;
Well, I'm still practicing myself 😊.&lt;/p&gt;




&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! 😊&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>watercooler</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Webpack Academy #1: Loaders</title>
      <author>CodeOzz</author>
      <pubDate>Wed, 04 Aug 2021 10:50:47 +0000</pubDate>
      <link>https://dev.to/codeozz/webpack-academy-1-loaders-hf4</link>
      <guid>https://dev.to/codeozz/webpack-academy-1-loaders-hf4</guid>
      <description>&lt;p&gt;As we saw in the last course, webpack can handle &lt;code&gt;js&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; file !&lt;/p&gt;

&lt;p&gt;But what happened if we need to import css file ?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-css-file"&gt;
  &lt;/a&gt;
  Add css file
&lt;/h3&gt;

&lt;p&gt;We need add a new entry point to your application since we have no entry file for css file yet !&lt;/p&gt;

&lt;p&gt;webpack.config.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;style.css&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toto&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go to &lt;code&gt;build&lt;/code&gt; this !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ERROR in ./src/style.css 1:0
Module parse failed: Unexpected token (1:0)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
&amp;gt; .toto {
|     color: blue;
| }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What? why?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loader"&gt;
  &lt;/a&gt;
  Loader
&lt;/h3&gt;

&lt;p&gt;As we saw before, webpack only handle &lt;code&gt;js&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt; file, but webpack let us to use &lt;code&gt;loader&lt;/code&gt;, this function is simple -&amp;gt; translate file to webpack in order to handle it !&lt;/p&gt;

&lt;p&gt;For handle css file, we will use two loader !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Match file extension&lt;/span&gt;
                &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;// Order of loader from bottom to up&lt;/span&gt;
                &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First &lt;code&gt;css-loader&lt;/code&gt; will resolve css import issue, and after &lt;code&gt;style-loader&lt;/code&gt; will &lt;strong&gt;inject&lt;/strong&gt; css into the &lt;strong&gt;DOM&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;So if we add a html file&lt;/p&gt;

&lt;p&gt;index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My First Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"dist/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that your &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is blue !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It's just a little example but if you use webpack, you will have a lot of loader, for exemple if you are using &lt;code&gt;ts&lt;/code&gt; you will need loader to handle &lt;code&gt;.ts&lt;/code&gt; file, if we need to import image we will need another loader etc...&lt;/p&gt;

&lt;p&gt;Code here -&amp;gt; &lt;a href="https://github.com/Code-Oz/webpack-academy/tree/5e80e4c080c156d1ebd261fc80e3c505d92473a7"&gt;https://github.com/Code-Oz/webpack-academy/tree/5e80e4c080c156d1ebd261fc80e3c505d92473a7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you want to learn more about &lt;code&gt;webpack&lt;/code&gt; in my academy !&lt;/p&gt;

&lt;p&gt;If you want to have nice article to read about web dev, you can subscribe to my &lt;strong&gt;FREE newsletter&lt;/strong&gt; at this url -&amp;gt; &lt;a href="https://codeoz.substack.com/welcome"&gt;https://codeoz.substack.com/welcome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can follow me on :&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to buy me a coffee :D -&amp;gt; &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;https://www.buymeacoffee.com/CodeoZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
  </channel>
</rss>
