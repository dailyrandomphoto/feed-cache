<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting form body data in your SvelteKit endpoints</title>
      <author>Dana Woodman</author>
      <pubDate>Fri, 09 Apr 2021 23:23:45 +0000</pubDate>
      <link>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</link>
      <guid>https://dev.to/danawoodman/getting-form-body-data-in-your-sveltekit-endpoints-4a85</guid>
      <description>&lt;p&gt;Most of the time when working with forms, we opt to override the browser's default behavior (via &lt;code&gt;&amp;lt;form on:submit|preventDefault={handleSubmit}&amp;gt;&lt;/code&gt;), but sometimes we just want a simple form submission. &lt;/p&gt;

&lt;p&gt;In those cases, you may find yourself with an empty body coming into your SvelteKit endpoints. If that is you, read on!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;Suppose we have an HTML form like this and we want to &lt;code&gt;POST&lt;/code&gt; it's content to our endpoint at &lt;code&gt;/newsletter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/newsletter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we tried to access &lt;code&gt;req.body&lt;/code&gt; from our endpoint directly, we would get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReadOnlyFormData {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#accessing-form-data"&gt;
  &lt;/a&gt;
  Accessing form data
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;What the heck is this?&lt;/strong&gt; With a little searching, you can see it defined in the SvelteKit types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ReadOnlyFormData&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;has&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Iterator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the weirdos among us, you can &lt;a href="https://github.com/sveltejs/kit/blob/master/packages/kit/src/core/http/get_body/read_only_form_data.js"&gt;check out the code for the &lt;code&gt;ReadOnlyFormData&lt;/code&gt; class on Github&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;But the tl;dr is that for form data, SvelteKit gives us this little class that we can use to pull out values in our endpoints.&lt;/p&gt;

&lt;p&gt;Here is how to use the basic property accessors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// "sveltegroupie3000"&lt;/span&gt;

&lt;span class="c1"&gt;// Get an array of values (useful for checkboxes and selects)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;favIceCreamFlavors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ['vanilla', 'toffee', 'caramel']&lt;/span&gt;

&lt;span class="c1"&gt;// Check if a value exists (useful for boolean checkboxes)&lt;/span&gt;
&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;agreeToTerms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get all the form data, you'll need to access the &lt;code&gt;Iterators&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get all items in the form in an "entries" type array:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "name": "Rich Harris" ], [ "hobbies", "svelte" ], [ "hobbies": "journalism" ] ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get each keys:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ "name", "hobbies", "hobbies" ]&lt;/span&gt;

&lt;span class="c1"&gt;// Get all values:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="c1"&gt;// [ [ "Rich Harris" ], [ "svelte" ], [ "journalism" ] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should be able to work with your HTML form data, high five! 🙏&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#going-further"&gt;
  &lt;/a&gt;
  Going further
&lt;/h1&gt;

&lt;p&gt;If you're like me, you'd rather just have a nice little object to play with of all your form data. If you want something like this, try out the following helper function to parse your form data and modify as desired:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;()].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this you can now access your form data as you're probably use to with thinks like Express.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h1&gt;

&lt;p&gt;Thanks for reading and hope this was helpful! 🤓&lt;/p&gt;

&lt;p&gt;This post was inspired by a question @Teunminator in Svelte's #svelte-kit Discord channel, thanks for a fun challenge!&lt;/p&gt;

&lt;p&gt;PS: If you're trying to implement file uploads, you'll like see &lt;code&gt;Error: File upload is not yet implemented&lt;/code&gt; which is because SvelteKit does not yet support it (as of this writing). You'll have to upload your files in other ways until then.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>sveltekit</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Secret Weapons: Pen and Paper</title>
      <author>Anthony</author>
      <pubDate>Fri, 09 Apr 2021 23:17:16 +0000</pubDate>
      <link>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</link>
      <guid>https://dev.to/toymachine/secret-weapons-pen-and-paper-1nhb</guid>
      <description>&lt;p&gt;When doing computer work there is an obvious inclination to doing your note-taking and documenting on the computer. And this makes sense, as it makes your notes accessible from anywhere and you never have to worry about losing them. The problem is that you are making major trade-offs when it come to retention and consideration of your thoughts. &lt;/p&gt;

&lt;p&gt;Any number of studies and articles over the past few years have highlighted the positives of handwritten notes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.frontiersin.org/articles/10.3389/fpsyg.2020.01810/full"&gt;The Importance of Cursive Handwriting Over Typewriting for Learning in the Classroom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://journals.sagepub.com/doi/abs/10.1177/0956797614524581"&gt;The Pen Is Mightier Than the Keyboard: Advantages of Longhand Over Laptop Note Taking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://commons.lib.jmu.edu/cgi/viewcontent.cgi?article=1056&amp;amp;context=lexia"&gt;The Benefits of Hand-written Versus Digital Notetaking in College Lectures&lt;/a&gt; [PDF]&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gse.harvard.edu/news/uk/17/08/note-taking-low-tech-often-best"&gt;For Note Taking, Low-Tech Is Often Best&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It turns out what we learned in grade school was correct: writing things down means you are better able to recall them later. This, it turns out, needs to be done with pen and paper to be effective as typed notes doing see the same level of positive effect. &lt;/p&gt;

&lt;p&gt;This might be disheartening news for many of us who have lost what little handwriting capabilities we had and can type much faster than we can write longhand, but perhaps the slowness of handwritten notes is the key. For example, during a lecture, the slowness of writing requires one to listen, process, and then take abbreviated notes. A strong typist can capture the &lt;a href="https://www.huffingtonpost.com.au/2016/04/21/writing-by-hand-benefits_n_9735384.html"&gt;lecture almost word for word&lt;/a&gt;, focusing only on the typing. &lt;/p&gt;

&lt;p&gt;Studies also point to the laptops as being distracting. Despite your intention to focus on the topic at hand -- be is a lecture, a speech, a presentation, or a Zoom call -- laptops are filled with distractions where a pen and paper has no battery, alerts, pop-ups, or ability to quickly search for more information on a topic. &lt;/p&gt;

&lt;p&gt;Of course notebooks come with their own problems. A misplaced backpack or spilled coffee and lead to a disaster, with dozens of hours of work lost. This is something that would (almost) never happen with Google Docs, or at least would be completely avoidable with digital notes. &lt;/p&gt;

&lt;p&gt;This risk can be mitigated by taking notes by hand first, perhaps &lt;a href="https://unsharpen.com/whats-the-deal-with-moleskine/"&gt;in a nice notebook&lt;/a&gt; with a water-safe, pigmented pen and then to type in the notes later. This would be usefully for important information that is worth considering twice. It is also possible to simply scan in documents, which can be done at incredible speed and accuracy with any document scanner. &lt;/p&gt;

&lt;p&gt;My recommendation? Keep a paper notebook and a reliable pen at handy. Jot down your thoughts there, especially those taken on an important call, during a meeting with stakeholders, and other places where proper retention matters. Don't change your workflow for long pieces of text that you are going to drop into your notepad and search through later -- computers are great at that. So improve your notetaking when it matters and then stay efficient everywhere else. &lt;/p&gt;

</description>
      <category>writing</category>
      <category>notes</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to ace a coding interview even if you can't solve the problem</title>
      <author>Erin Schaffer</author>
      <pubDate>Fri, 09 Apr 2021 21:32:34 +0000</pubDate>
      <link>https://dev.to/educative/how-to-ace-a-coding-interview-even-if-you-can-t-solve-the-problem-25a5</link>
      <guid>https://dev.to/educative/how-to-ace-a-coding-interview-even-if-you-can-t-solve-the-problem-25a5</guid>
      <description>&lt;p&gt;At most major tech companies, coding problems are the biggest part of the interview process. Some major tech companies have such difficult coding interviews that software engineers often spend months preparing for them. Unfortunately, no matter how much you prepare, it’s impossible to prepare for every problem. The questions in the interviews are designed to be difficult, and they can stump even the most experienced developers. Luckily, there are steps you can take to help yourself get unstuck.&lt;/p&gt;

&lt;p&gt;Here, we’ve outlined a process you can follow along with some advice to help you approach even the most difficult problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We will cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#part-1"&gt;Taking a deep breath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-2"&gt;Clarifying the problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-3"&gt;Creating good examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-4"&gt;Doing it by hand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-5"&gt;Going simple, then optimizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-6"&gt;Taking a hint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#part-7"&gt;Next steps for your learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-a-deep-breath"&gt;
  &lt;/a&gt;
  Taking a deep breath
&lt;/h2&gt;

&lt;p&gt;The first thing to do when you think you can’t solve the problem is to take a deep breath. Remember that no interview is perfect and that mistakes are expected. These questions are designed to be extremely challenging -- no one will have the perfect answer right away. Even the most seasoned candidates wouldn’t be expected to answer them quickly. From here, there are steps you can take to tackle the problem.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clarifying-the-problem"&gt;
  &lt;/a&gt;
  Clarifying the problem
&lt;/h2&gt;

&lt;p&gt;Before taking it any further, start by clarifying the problem. Sometimes, interviewers will purposely leave out some important details. Asking questions is a good thing and will show your interviewer that you’re thinking deeply about the problem and seeking to understand it better. Asking clarifying questions is a skill that you’ll regularly use as a developer, so your interview is a great place to showcase this skill. &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-good-examples"&gt;
  &lt;/a&gt;
  Creating good examples
&lt;/h2&gt;

&lt;p&gt;Now that you’ve clarified your understanding of the question, it’s time to create some examples. Think of some possible inputs and what the expected outputs would be for them. Think about a few edge cases that may need special consideration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to explain your process out loud. Your interviewer doesn’t necessarily care if you can solve this specific problem perfectly, they care about gaining insight into your problem-solving methods that will lend themselves to the job you’re applying for. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doing-it-by-hand"&gt;
  &lt;/a&gt;
  Doing it by hand
&lt;/h2&gt;

&lt;p&gt;If a solution doesn’t immediately come to mind, it can be helpful to solve the problem by hand first. Forget that this is a coding interview for a second. If you were asked to solve this problem by hand, how would you approach the problem? Try to reverse engineer your thought process. Sometimes, nerves can cause us to get caught up in algorithms, but take away the coding, and we can quickly arrive at a solution.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-simple-then-optimizing"&gt;
  &lt;/a&gt;
  Going simple, then optimizing
&lt;/h2&gt;

&lt;p&gt;It’s much better to have an inefficient solution than no solution at all. A lot of the time, it’s easier to come up with something that simply works. From there, you can discuss steps you could follow to improve it or mention potential bottlenecks and how to fix them. &lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-a-hint"&gt;
  &lt;/a&gt;
  Taking a hint
&lt;/h2&gt;

&lt;p&gt;If you’re totally stuck, it’s okay to ask for a hint. It’s better to ask and actually get somewhere than end up with nothing. If possible, ask for a hint on something specific to give you the best chance of getting unstuck. Remember, your interviewer is on your side and wants to see you do well.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-for-your-learning"&gt;
  &lt;/a&gt;
  Next steps for your learning
&lt;/h2&gt;

&lt;p&gt;It seems coding interviews are only getting harder, causing even the most experienced candidates to become stuck. Luckily, you now have a process to follow in case you ever get stuck on a coding problem in an interview. The best thing you can do is to study and prepare as much as you can before your interview. To learn more about how to prepare for your coding interview, check out Educative’s course, &lt;a href="https://www.educative.io/courses/grokking-the-coding-interview?affiliate_id=5082902844932096&amp;amp;utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=grokking-ci&amp;amp;gclid=Cj0KCQiA1KiBBhCcARIsAPWqoSpGI906622ESC7ZqU9CasJWwTj4Pt3nLALX1IkWo8MXMumKgcCeLycaAtKXEALw_wcB"&gt;&lt;strong&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/strong&gt;&lt;/a&gt;, where you’ll learn about the 16 patterns for coding questions. The techniques taught in this course have helped developers land jobs at top companies, such as Amazon, Google, Facebook, and Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-reading-about-coding-interviews"&gt;
  &lt;/a&gt;
  Continue reading about coding interviews
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/coding-interview-faq-preparation-guide"&gt;The Coding Interview FAQ: preparation, evaluation, and structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/crack-amazon-coding-interview-questions"&gt;Cracking the top Amazon coding interview questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/How-can-I-prepare-for-interviews-in-any-big-software-company/answer/Fahim-ul-Haq"&gt;How can I prepare for interviews in any big software company?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/5-tried-and-true-techniques-to-prepare-for-a-coding-interview"&gt;5 tried and true techniques to prepare for a coding interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>career</category>
      <category>interview</category>
      <category>coding</category>
    </item>
    <item>
      <title>Open source MERN survey APP for you to Learn and contribute</title>
      <author>Shashank Katte</author>
      <pubDate>Fri, 09 Apr 2021 21:02:18 +0000</pubDate>
      <link>https://dev.to/shashankkatte/open-source-mern-survey-app-for-you-to-learn-and-contribute-5b8a</link>
      <guid>https://dev.to/shashankkatte/open-source-mern-survey-app-for-you-to-learn-and-contribute-5b8a</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/shashankkatte/feedbackr-mern"&gt;Github link here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedbackr is an Opensource and free survey app. 📝. Use it as a starter app to build your own custom feedback collection App or use it as your reference to explore a production ready MERN App.&lt;/p&gt;

&lt;p&gt;If you are exploring MERN stack, this app will show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to use &lt;strong&gt;React and Redux&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Routing with &lt;strong&gt;React routing&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using reusable &lt;strong&gt;Redux Forms&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Payments with &lt;strong&gt;Stripe&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Google OAuth Authentication&lt;/strong&gt; with &lt;strong&gt;Passport.js&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Persisting data into &lt;strong&gt;MongoDB&lt;/strong&gt; and using &lt;strong&gt;Mongoose&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;strong&gt;webhooks&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending Automated &lt;strong&gt;Emails&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;API key handling techniques&lt;/strong&gt; and  Deployment strategy with configs to &lt;strong&gt;Heroku&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a very good App for you to practice your MERN Skills and contribute to opensource. See you there!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/shashankkatte/feedbackr-mern"&gt;Github link here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The App is based off of learnings from great teachers like Stephen Grider, Brad traversy, Max - Academind, Freecodecamp and many more.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Maquetado de Web Responsive con CSS Grid</title>
      <author>dux</author>
      <pubDate>Fri, 09 Apr 2021 20:10:23 +0000</pubDate>
      <link>https://dev.to/duxtech/maquetado-de-web-responsive-con-css-grid-128l</link>
      <guid>https://dev.to/duxtech/maquetado-de-web-responsive-con-css-grid-128l</guid>
      <description>&lt;p&gt;Maquetado de web básica usando CSS Grid. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q_ZA7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisdux/css-grid-ejemplo-basico-2020/main/img.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q_ZA7FL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/crisdux/css-grid-ejemplo-basico-2020/main/img.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github del proyecto: &lt;a href="https://github.com/crisdux/css-grid-ejemplo-basico-2020/"&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deploy: &lt;a href="https://crisdux.github.io/css-grid-ejemplo-basico-2020/index.html"&gt;aqui&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tuturial en video: &lt;a href="https://www.youtube.com/watch?v=VmHO_AjxHnQ&amp;amp;t=1024s"&gt;https://www.youtube.com/watch?v=VmHO_AjxHnQ&amp;amp;t=1024s&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>cssgrid</category>
    </item>
    <item>
      <title>Why I Love Zero Result Search as a Metric and You Should Too!</title>
      <author>Amara Graham</author>
      <pubDate>Fri, 09 Apr 2021 20:05:13 +0000</pubDate>
      <link>https://dev.to/missamarakay/why-i-love-zero-result-search-as-a-metric-and-you-should-too-3efj</link>
      <guid>https://dev.to/missamarakay/why-i-love-zero-result-search-as-a-metric-and-you-should-too-3efj</guid>
      <description>&lt;p&gt;Have you ever "broken" Google search? Typed in something and received exactly zero results? Or maybe like a handful of results, with what almost looks like an apology from the search engine, that might as well be nothing? It's equal parts thrilling and annoying. Like HA! I got you Google. Until you realize, you didn't make any progress helping yourself. &lt;/p&gt;

&lt;p&gt;It's likely your technical documentation or developer portal has a search capability. &lt;/p&gt;

&lt;p&gt;Search gives you two really great opportunities, you can track what terms people are using and maybe even see what they are clicking on (click-through) after searching with those terms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-your-assumptions-meet-the-community-where-they-are"&gt;
  &lt;/a&gt;
  Check your assumptions, meet the community where they are
&lt;/h2&gt;

&lt;p&gt;Ask yourself questions like the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are searchers using the terms &lt;em&gt;you&lt;/em&gt; expected?&lt;/li&gt;
&lt;li&gt;Are searchers finding what &lt;em&gt;you&lt;/em&gt; expect with the terms they are using?&lt;/li&gt;
&lt;li&gt;Are searchers finding what &lt;em&gt;they&lt;/em&gt; expect with the terms they are using?&lt;/li&gt;
&lt;li&gt;Are searchers finding nothing with a term &lt;em&gt;you&lt;/em&gt; expect them to use?&lt;/li&gt;
&lt;li&gt;Are searchers seeming to use terms &lt;em&gt;you&lt;/em&gt; previously didn't think of and are they hitting a dead end? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This really all boils down to the core question - &lt;strong&gt;did you make assumptions about your community's knowledge that are incorrect?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your searchers, your community members including potential customers(!!!), are using their terms, their language. &lt;/p&gt;

&lt;p&gt;It is your job to educate or train them in the right direction.&lt;/p&gt;

&lt;p&gt;This can be done with synonyms explicitly written in your content, a glossary, or more subtly, enhancing search metadata with synonyms. &lt;/p&gt;

&lt;p&gt;Failure to guide them through this experience efficiently will result in the path of least resistance - finding a competing technology that does better/easier/more seamlessly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-can-measure-it"&gt;
  &lt;/a&gt;
  If you can measure it...
&lt;/h2&gt;

&lt;p&gt;Let's revisit that last question in the bulleted list. Depending on the tool you are using (slightly more on that below), you should be able to see when a term returns zero results - often called zero result search or no search result. &lt;/p&gt;

&lt;p&gt;This is my &lt;strong&gt;favorite&lt;/strong&gt; thing to track, both terms and a ratio. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-BggmXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305986664381247494/RH5n-NVn_normal.jpg" alt="Amara Graham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amara Graham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/missamarakay"&gt;@missamarakay&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      What's your favorite developer experience (&lt;a href="https://twitter.com/hashtag/DX"&gt;#DX&lt;/a&gt;) metric? &lt;br&gt;&lt;br&gt;I'll start - zero result search or no result search rate 🤩
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:45 PM - 05 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1357716874532958209" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;In Developer Experience, my goal is to offer developers an efficient, effective, delightful experience and I would use none of those words to describe hitting the wall that is "zero results returned" when searching technical documentation.&lt;/p&gt;

&lt;p&gt;I've already mentioned above some of the ways to improve this, including overt synonyms to educate your searchers or synonyms in metadata for a more subtle approach. &lt;/p&gt;

&lt;p&gt;What I haven't mentioned is that zero result search is a great opportunity for a success metric you can clearly track and improve! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-you-can-improve-it"&gt;
  &lt;/a&gt;
  ... you can improve it
&lt;/h2&gt;

&lt;p&gt;I consider zero result search rich data because it often gives me a ratio (great for things like KPIs or other quantitative tracking metrics) and a curated list of terms I can iterate on and improve. It's literally like "hey, should people be searching for this? Why or why not? Better investigate." &lt;/p&gt;

&lt;p&gt;It may even prioritize things for me by showing me just how many people attempted a given search! &lt;/p&gt;

&lt;p&gt;Now, allow me to throw myself under the bus by sharing with you the data that has been collected and I've done exactly zero work towards improving. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sc0rC9tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nysai1jdcq2kmdr3to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc0rC9tT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4nysai1jdcq2kmdr3to.png" alt="A line chart showing a 7-day range in Algolia DocSearch of total searches, total users, and no results rate."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a look at a 7-day range in our Algolia DocSearch for a project that hasn't officially launched. Dark blue, top line is total searches. Aqua, mostly middle line, is total users. Dusty purple, mostly bottom line, is no results rate.&lt;/p&gt;

&lt;p&gt;Until we officially launch, I don't know what a good baseline is, as these early engagers have been asked to critique the overall experience and offering, as you do with pre-GA programs. They are in a mindset to break and challenging things, which is not to say our post-GA audience won't do this, but theoretically, they may have different goals in mind. This is why I've done no work to improve this, but I'm casually monitoring. &lt;/p&gt;

&lt;p&gt;I do know the closer I can get the no results rate to 0% the better the developer experience will be, at least from one aspect of the searcher's perspective. I may have not solved their problem, but I have given them something to read that's hopefully relevant. And I didn't hit them with that "no results returned" page.&lt;/p&gt;

&lt;p&gt;Let me show you a few terms that came up over a 3 month period, a great list to iterate on to improve your docs outside of the usual new or improved features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suSI2Eih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx1ihenbauq6ayntg8gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suSI2Eih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx1ihenbauq6ayntg8gw.png" alt="A list of zero result search terms from a 3 month period."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we've got some interesting terms in here like "maxmessagesize", "newthrowerrorcommand", and "encryption". &lt;/p&gt;

&lt;p&gt;We previously had a bug with &lt;code&gt;maxMessageSize&lt;/code&gt; where it wasn't respecting the value on write, which I only know because I did a Google search and found a &lt;a href="https://camunda.com/blog/2020/07/zeebe-0225-0234-release/"&gt;release blog&lt;/a&gt;. Because of this history, and because &lt;code&gt;maxMessageSize&lt;/code&gt; feels like an important value to understand in a system that does messaging, we should probably take care to explicitly document it somewhere. &lt;em&gt;Writes herself a to-do.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youve-convinced-me-now-what-do-i-do"&gt;
  &lt;/a&gt;
  You've convinced me, now what do I do?
&lt;/h2&gt;

&lt;p&gt;You don't need to roll your own tools to track search terms and zero results search, but you may need to configure portions of existing tooling to do it.&lt;/p&gt;

&lt;p&gt;You can capture this search data with purpose-built tools like Algolia (DocSearch) or configure Google Analytics and the massive voodoo magic that is that suite of tools. &lt;/p&gt;

&lt;p&gt;If you are using a documentation framework or developer portal framework this may already be available to you in your admin console. For example, I know KnowledgeOwl makes this available and I've worked with tech writers who monitor this quite closely because they care about the experience. &lt;/p&gt;

&lt;p&gt;So do a little investigating, see what you are currently tracking, or could track in your search experience, and go from there.&lt;/p&gt;

&lt;p&gt;Are you measuring zero result search? Or have you looked at the data? I'd love to know what your threshold is for your no results ratio. Or if this post inspires you to start tracking this, let me know that too! &lt;/p&gt;

</description>
      <category>documentation</category>
      <category>developerrelations</category>
      <category>devrel</category>
      <category>developerexperience</category>
    </item>
    <item>
      <title>Avoid Costly Rails Logging</title>
      <author>Jake Swanson</author>
      <pubDate>Fri, 09 Apr 2021 20:04:40 +0000</pubDate>
      <link>https://dev.to/jakswa/avoiding-costly-rails-logger-cases-3gch</link>
      <guid>https://dev.to/jakswa/avoiding-costly-rails-logger-cases-3gch</guid>
      <description>&lt;p&gt;Let's be clear: This post is &lt;em&gt;not&lt;/em&gt; targeting logger lines like this, with short/quick strings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="s1"&gt;'Rare Event!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-logs-can-be-costly"&gt;
  &lt;/a&gt;
  Some Logs Can Be Costly
&lt;/h2&gt;

&lt;p&gt;But every now and then you might stumble upon a more-intense logger line. Maybe you are serializing objects for debugging in your logs, or doing IO to load DB rows for debugging purposes. To simulate this, I will go to an extreme and just use &lt;code&gt;sleep&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:info&lt;/span&gt; &lt;span class="c1"&gt;# simulating production&lt;/span&gt;

&lt;span class="no"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;measure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="s2"&gt;"Log: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;real&lt;/span&gt;

&lt;span class="c1"&gt;# 1 second passes...&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0011528139948496&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This log does not print because it is &lt;code&gt;.debug&lt;/code&gt; and our &lt;code&gt;logger.level&lt;/code&gt; is &lt;code&gt;:info&lt;/code&gt;. But we still had to endure the string-building logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possible-solution-use-block-syntax"&gt;
  &lt;/a&gt;
  Possible Solution: Use Block Syntax
&lt;/h2&gt;

&lt;p&gt;This syntax passes a block, which is only called if the logging actually runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:info&lt;/span&gt; &lt;span class="c1"&gt;# simulating production&lt;/span&gt;

&lt;span class="no"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;measure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"Log: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;real&lt;/span&gt;

&lt;span class="c1"&gt;# instantly returns a way smaller value&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.4374993043020368e-05&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your logging level is &lt;code&gt;:debug&lt;/code&gt; (usually in development), you will see the time go back up because the logging is actually happening:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:debug&lt;/span&gt; &lt;span class="c1"&gt;# simulating development&lt;/span&gt;

&lt;span class="no"&gt;Benchmark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;measure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"Log: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;real&lt;/span&gt;

&lt;span class="c1"&gt;# back up to 1s, we are in debug and want our log&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;1.0006488429935416&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-coverage-concern"&gt;
  &lt;/a&gt;
  Code Coverage Concern
&lt;/h2&gt;

&lt;p&gt;One downside to this path is code-coverage, especially if you suppress &lt;code&gt;:debug&lt;/code&gt;-level logging in your build environment. Unless your block is executed on a real case, you might not know for sure that it works. Maybe you have a typo or &lt;code&gt;nil.method&lt;/code&gt; error in your log line and you will only find it in whatever special environment wants to actually log your string.&lt;/p&gt;

&lt;p&gt;In my head you can make that more visible by making sure to add a newline on your block, so that automated code coverage tools will call you out. This way, the line will be red unless your build pipeline actually built you a string successfully:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;"Log: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ruby</category>
      <category>logging</category>
      <category>rails</category>
      <category>performance</category>
    </item>
    <item>
      <title>My Favorite C# Features - Part 3: Nullability</title>
      <author>Jeffrey T. Fritz</author>
      <pubDate>Fri, 09 Apr 2021 19:57:37 +0000</pubDate>
      <link>https://dev.to/dotnet/my-favorite-c-features-part-3-nullability-2mcg</link>
      <guid>https://dev.to/dotnet/my-favorite-c-features-part-3-nullability-2mcg</guid>
      <description>&lt;p&gt;I'm a practical programmer.  I don't like to over-optimize my code, and I want to make it very readable for the next person who needs to work with something that I wrote.  Consequently, I sometimes leave alternate interpretations and access patterns into my code that might not always work as expected.  A great example of this is the ability to pass &lt;code&gt;null&lt;/code&gt; into C# methods and trigger a different behavior.  This can lead to errors in future code where you are now accessing something that inadvertently is a &lt;code&gt;null&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;In C# 8, the langauge designers introduced a feature called &lt;a href="https://docs.microsoft.com/dotnet/csharp/nullable-references?WT.mc_id=friends-0000-jefritz"&gt;&lt;strong&gt;Nullable Reference Types&lt;/strong&gt;&lt;/a&gt; that allows you to define which variables could be null and which variables should &lt;strong&gt;NEVER&lt;/strong&gt; be null.&lt;/p&gt;

&lt;p&gt;In this article, and as an effort to help make myself a better programmer, we're going to review the nullable Reference Types feature of C# and discuss why it is an important feature that we should start using by default in our applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-null"&gt;
  &lt;/a&gt;
  Why null?
&lt;/h2&gt;

&lt;p&gt;As an object oriented language, C# has always had the concept of &lt;code&gt;null&lt;/code&gt; in code.  null is the absence of an object, its synonymous with "nothing" and is an easy concept for folks to understand when you declare a variable.  However, this can (and most likely WILL) lead to the dreaded &lt;code&gt;NullReferenceException&lt;/code&gt;, an error that indicates a &lt;code&gt;null&lt;/code&gt; object was acted on unexpectedly.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;PRO TIP:&lt;/em&gt; Sometimes, you'll hear C# programming folks refer to a &lt;code&gt;NullReferenceException&lt;/code&gt; as an NRE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Logger&lt;/span&gt; &lt;span class="n"&gt;myConsoleLogger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;myConsoleLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LogInformation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Processed the data"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the sample above, the &lt;code&gt;myConsoleLogger&lt;/code&gt; object is declared but never assigned.  This would trigger a &lt;code&gt;NullReferenceException&lt;/code&gt; because &lt;code&gt;myConsoleLogger&lt;/code&gt; was never assigned an instance of an object.  This is a simple mistake, but it would be really nice if the compiler caught this before we even tried to run the code.  Consider a scenario like this array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;firstValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to throw a &lt;code&gt;NullReferenceException&lt;/code&gt; also, because the &lt;code&gt;values&lt;/code&gt; array is declared but never assigned values.  The &lt;code&gt;firstValue&lt;/code&gt; variable is initialized with a &lt;code&gt;null&lt;/code&gt; value on line 2 and the &lt;code&gt;ToLower()&lt;/code&gt; method is then attempting to operate on a &lt;code&gt;null&lt;/code&gt; object.  Once again, a simple error because the &lt;code&gt;values&lt;/code&gt; array is never assigned values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nullable-contexts-and-compiler-warnings-to-the-rescue"&gt;
  &lt;/a&gt;
  Nullable Contexts and Compiler Warnings to the Rescue!
&lt;/h2&gt;

&lt;p&gt;Some folks fear the compiler.  There's a feeling that the compiler throwing errors or emitting warnings is an intimidating practice.  I see it the other way:  The compiler is my friend telling me when I made a mistake before I attempt to run my application.  In this case, I want the compiler to tell me when I might work with a &lt;code&gt;null&lt;/code&gt; object because the variables weren't initialized properly.  Let's get some help to ensure that our objects in our code are being used correctly.&lt;/p&gt;

&lt;p&gt;By default in C#, any reference type can be assigned the &lt;code&gt;null&lt;/code&gt; value.  With C# 8 and .NET Core 3.0 and later, we can define contexts in and around our projects where the compiler will perform nullability checks and raise warnings if we are potentially going to throw a &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can enable nullable checking on a segment of code by wrapping it with a compiler pre-processor &lt;code&gt;#nullable&lt;/code&gt; with a setting the indicates how it should behave.  Let's add nullability checking to the &lt;code&gt;Hat&lt;/code&gt; class I introduced in the previous post in this series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two pre-processor commands present in this code:  &lt;code&gt;#nullable enable&lt;/code&gt; and &lt;code&gt;#nullable restore&lt;/code&gt;.  The &lt;code&gt;enable&lt;/code&gt; command tells the compiler to check for variables that could be inadvertently assigned null and raise a compiler warning if there are any.  Sure enough, in the &lt;code&gt;Hat&lt;/code&gt; class, the string properties &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Theme&lt;/code&gt; need to be initialized according to these compiler warnings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;warning CS8618: Non-nullable property 'Name' must contain a non-null value when exiting 
constructor. Consider declaring the property as nullable. 
warning CS8618: Non-nullable property 'Theme' must contain a non-null value when exiting constructor. Consider declaring the property as nullable.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This are easy fixes as I can default the values for these two properties to &lt;code&gt;string.Empty&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler warnings go away, and I am a happy developer.  If I try to define a &lt;code&gt;Hat&lt;/code&gt; and assign &lt;code&gt;null&lt;/code&gt; to these fields, will the compiler catch it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code DOES compile with no warnings.  Why?  The &lt;code&gt;#nullable&lt;/code&gt; compiler directive is set on the &lt;code&gt;Hat&lt;/code&gt; class, not the construction of the &lt;code&gt;newHat&lt;/code&gt; variable.  In order to protect more of our code, we need to expand the nullable check's scope to include more of our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This raises the appropriate compiler warning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;warning CS8625: Cannot convert null literal to non-nullable reference type.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review quickly:  these are ONLY compiler warnings.  In fact, this code will run and not produce any errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declaring-a-reference-type-as-nullable"&gt;
  &lt;/a&gt;
  Declaring a Reference Type as Nullable
&lt;/h2&gt;

&lt;p&gt;I can also tell the compiler that it's ok if one of these reference values is assigned null by attaching a &lt;code&gt;?&lt;/code&gt; to the end of it's variable declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;AcquiredYear&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this change, the &lt;code&gt;Name&lt;/code&gt; of the hat is allowed to be assigned &lt;code&gt;null&lt;/code&gt; regardless of the Nullable context around the class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projectwide-nullable-checking"&gt;
  &lt;/a&gt;
  Project-wide Nullable Checking
&lt;/h2&gt;

&lt;p&gt;What if I want to roll-out this compiler interaction across my ENTIRE project.  You can add an entry to your project file that indicates nullable checking should be enabled with the &lt;code&gt;Nullable&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now remove the &lt;code&gt;#nullable&lt;/code&gt; directives from the &lt;code&gt;Hat&lt;/code&gt; class and I'll receive the same compiler warnings without writing more code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disable-nullable-checking"&gt;
  &lt;/a&gt;
  Disable Nullable Checking
&lt;/h2&gt;

&lt;p&gt;What if I have an application that is configured with the &lt;code&gt;Nullable&lt;/code&gt; entry in the project file, and I want to relax the checking on various sections of my application?&lt;/p&gt;

&lt;p&gt;Similar to before, we can add a processor directive to our code that disables null checking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;newHat&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Hat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Phillies 80's Maroon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;AcquiredYear&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1985&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt; &lt;span class="n"&gt;restore&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're talking...  I can enforce the better developer behavior by adding the Nullable check to my project file, and those developers that want to take the risk of assigning and working with &lt;code&gt;null&lt;/code&gt; can wrap their code with the processor to remove the warnings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-final-step"&gt;
  &lt;/a&gt;
  The Final Step
&lt;/h2&gt;

&lt;p&gt;Warnings are just silly yellow text the compiler emits that tells us we MIGHT have a concern in our project.  Did you know that you can turn up the importance of this warnings, converting them to errors the compiler emits and ensuring that you write better code?  Add the &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; element to your project file and those pesky warnings become a real problem that blocks your project from compiling properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TreatWarningsAsErrors&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/TreatWarningsAsErrors&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our project team will be forced to treat &lt;code&gt;null&lt;/code&gt; values with more respect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The ability to assign and work with the &lt;code&gt;null&lt;/code&gt; value is valuable in C#, but can be misused and lead to errors in our running applications.  Let's get some help from the compiler to make handling of &lt;code&gt;null&lt;/code&gt; values easier and clearer when we're building our projects.&lt;/p&gt;

&lt;p&gt;Did you know, I host a weekly live stream on the &lt;a href="https://twitch.tv/visualstudio"&gt;Visual Studio Twitch channel&lt;/a&gt; teaching the basics of C#? Tune in on Mondays at 9a ET / 1300 UTC for two hours of learning in a beginner-friendly Q+A format with demos and sample code you can download.&lt;/p&gt;

&lt;p&gt;Looking to get started learning C#? Checkout our &lt;a href="https://docs.microsoft.com/users/dotnet/collections/yz26f8y64n7k07?WT.mc_id=friends-0000-jefritz"&gt;free on-demand courses on Microsoft Learn!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I Learned Machine Learning in a Weekend</title>
      <author>Guy Torbet</author>
      <pubDate>Fri, 09 Apr 2021 19:29:53 +0000</pubDate>
      <link>https://dev.to/torbet/how-i-learned-machine-learning-in-a-weekend-3fac</link>
      <guid>https://dev.to/torbet/how-i-learned-machine-learning-in-a-weekend-3fac</guid>
      <description>&lt;p&gt;Machine learning and AI as a whole can seem hugely daunting when you're first getting started. Over a weekend, I &lt;em&gt;painstakingly&lt;/em&gt; sifted through all of the "beginner" guides on how to get started, so that you don't have to.&lt;/p&gt;

&lt;p&gt;If you like this post, feel free to &lt;a href="https://torbet.co/subscribe"&gt;subscribe&lt;/a&gt; or check out my other posts &lt;a href="https://torbet.co/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most people recommend an image classifier using the MNIST dataset as your 'hello world'/first machine learning program - I'm not sure if there is just an obscenely high barrier to entry, or if I'm simply just stupid, but for someone who wants to go from zero to something in the world of machine learning, this project seems a bit tricky.&lt;/p&gt;

&lt;p&gt;Now of course I attempted it. I read anything and everything that I could get my hands on about the inner workings for how neural networks ACTUALLY work, and thought I had a pretty rudimentary understanding of what was going on, but with pre-made datasets and perplexing technical jargon, it's often hard to dilute what is actually happening - I'm still not entirely sure what the fuck a 2D convolutional layer is.&lt;/p&gt;

&lt;p&gt;So without further ado, here's how a beginner can get started with machine learning, by a REAL beginner. This will cover everything, from what libraries and frameworks to use, to how to save and load your trained model. By the end of this project, you should have a rough idea as to how it all works, which will send you on your merry way to more complex projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-framework-to-use"&gt;
  &lt;/a&gt;
  What Framework to Use
&lt;/h2&gt;

&lt;p&gt;There are countless machine learning frameworks and libraries out there, but the main players are TensorFlow, PyTorch and Keras (now part of TensorFlow). As usual, I ended up in a state of paralysis as to which to pick, and which one was the best - this is what inspired me to adopt the mentality of &lt;a href="https://torbet.co/posts/Just-Start"&gt;&lt;strong&gt;just starting&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, I went with PyTorch. I would recommend this as you get control of everything and it makes it easy to visualise what's going on, but in the grand scheme of things they all work well and it doesn't really matter which one you go with - so just pick one and get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-project"&gt;
  &lt;/a&gt;
  First Project
&lt;/h2&gt;

&lt;p&gt;Neural Networks function around arrays, or tensors if you're cool (yes, I know that there is a difference, but it's not that important at this stage).&lt;/p&gt;

&lt;p&gt;Long story short, you give a trained model an input as an array, and it gives you an output, that is hopefully correct. The simplest way that I could think to demonstrate this was to count the number of occurrences in a list.&lt;/p&gt;

&lt;p&gt;The end goal of this model is to give it a binary list, and it outputs the number of ones, for example;&lt;/p&gt;

&lt;p&gt;input: [1, 0, 0, 1, 0, 0, 0, 0, 1, 1], output: 4&lt;/p&gt;

&lt;p&gt;Neural networks require an input and an expected output in order to train. You can generate arrays of random 1's and 0's like so, which also includes labels (expected outputs) for easy training later down the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then can assign the values and labels to variables, which we convert to tensors so that the neural network can easily read and process them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;genData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;xTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;yTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simple so far right? Now we structure our network! We will use PyTorches nn.Module to include all of the layers we could ever need, and then just piece them together. For this network, I only used 1 layer, it takes in 10 inputs (I used a random binary array of length 10), and 1 output (0-10, number of 1's in the given list).&lt;/p&gt;

&lt;p&gt;We then have a forward method, which tells the network how to process the inputs as they pass through the layers, we're keeping it simple by just passing them through layer 1 and using a relu function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need a loss function, which will tell our network how far off the expected output it was, so that it can correct itself and become more accurate, we will also add an optimiser, to you know... optimise this process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;criterion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MSELoss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;lr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do a lot of reading for yourself on the different loss functions, there are hundreds of them, but I enjoyed the MSE or cross entropy loss function for linear NN's.&lt;/p&gt;

&lt;p&gt;Now, TRAIN, TRAIN, TRAIN! Think of an epoch as a training loop, so in this example, I'm cycling through the data 1000 times:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;epoch&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xTensor&lt;/span&gt;
        &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yTensor&lt;/span&gt;

        &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero_grad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unsqueeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backward&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;optimizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can finally save the model like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cnn.pt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! you've successfully created and trained your first neural network, from the ground up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-model"&gt;
  &lt;/a&gt;
  Running the Model
&lt;/h2&gt;

&lt;p&gt;Now that we've trained and saved our model, we can start to pass in real inputs, and see what it predicts!&lt;/p&gt;

&lt;p&gt;Make a new file, and initialise a simple array, and turn it into a tensor like before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;in_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;inTensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to copy the model from our previous file, so that we can add the weights and biases from our saved neural network to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can load our saved model, evaluate it, and pass in our new input data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cnn.pt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inTensor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you print the value of the "out" variable, you should see a 6 in this case!&lt;/p&gt;

&lt;p&gt;If you've made it this far and have been following along, you should hopefully have a better understanding as to how PyTorch, and machine learning, works as a whole. For me, this project was a good jumping off point, and after it I felt more comfortable pursuing image classification with MNIST!&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>ai</category>
      <category>learnprogramming</category>
    </item>
    <item>
      <title>type vs interface in TypeScript</title>
      <author>saad ahmad</author>
      <pubDate>Fri, 09 Apr 2021 19:10:17 +0000</pubDate>
      <link>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</link>
      <guid>https://dev.to/saadsharfuddin/type-vs-interface-in-typescript-35i6</guid>
      <description>&lt;p&gt;When I first started working with TypeScript, I quickly found myself questioning the use of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; in regards to providing type safety to my code. What is the difference between the two? When should I use one over the other? I decided it was time to get some answers.&lt;/p&gt;

&lt;p&gt;After a bit of research, I realized that the two are more similar today than they have ever been. However, there are still some differences that are worth mentioning. Let’s talk about it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-and-interfaces-at-a-high-level"&gt;
  &lt;/a&gt;
  types and interfaces at a high level
&lt;/h3&gt;

&lt;p&gt;Before we take a look at the similarities and differences between a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;, let’s first get a good mental model of what the two were intended to achieve in the first place.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; keyword in TypeScript is a way for you to provide type aliases to your variables, objects, and functions. These aliases essentially &lt;em&gt;describe&lt;/em&gt; what your data is going to look like. You can describe what your data is going to look like by using the core types (e.g. &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; etc.) or by creating your own custom types. Let’s take a look at a few examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDkDY49p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ehj9d5iv6ln8cj3m5er.png" alt="1_MKAKdf6Gco0bcRhNr3pgjg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;interface&lt;/code&gt; keyword in TypeScript on the other hand is a way for you to describe &lt;strong&gt;only&lt;/strong&gt; what your objects are going to look like. Let’s see an example of &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mALzEbEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67zhfletiltbgvs5op0g.png" alt="1_hSlmeCXEy1x37EZ9E9smLQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right off the bat, you might think that the &lt;code&gt;type&lt;/code&gt; keyword is the more flexible choice of the two when it comes to type safety. Hold that thought. Let’s take a look now at how the two are similar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#similarities"&gt;
  &lt;/a&gt;
  Similarities
&lt;/h3&gt;

&lt;p&gt;Let’s say I wanted to provide some type safety for an object, one of the most common use cases for using a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;. Turns out they both work pretty much the same, and the syntax is almost identical.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-2-1gn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44iatgimtabmszm93vhn.png" alt="1_TPjtC18Ro3IhSSro3ZXoYw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if I wanted to combine object properties from one &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; into another? We can do that too for both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4-RQca7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10m7jy8j3dapyxso11on.png" alt="1_ARdjVoUQbBugTD8MlvenrA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJkRPXLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwguegx24ggi9dlavfmk.png" alt="1_yNQhRWm2m2F8esP1HPw1Yg"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer the extends syntax as it feels a bit more natural to me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Want to provide some type safety to your functions? This is also possible with both a &lt;code&gt;type&lt;/code&gt; and an &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6BF6NTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gx5733qewnx6pmfwvob.png" alt="1_B1WDG4pKhygWDnPN8vCCEA"&gt;&lt;/a&gt; &lt;em&gt;I personally prefer using a type here since it reads a bit cleaner, but totally up to you!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A quick note about the above. Earlier I mentioned that an interface can &lt;strong&gt;only&lt;/strong&gt; describe what an object is going to look like, yet here I am describing what a function is going to look like with an &lt;code&gt;interface&lt;/code&gt;. The reason this is possible is because a function technically &lt;em&gt;is&lt;/em&gt; an object under the hood.&lt;/p&gt;

&lt;p&gt;Finally, if you wanted to create a class that adheres to a certain type safety contract provided by a &lt;code&gt;type&lt;/code&gt; or an &lt;code&gt;interface&lt;/code&gt;, you would be able to do so just fine with both.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig4uYVhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zf0gacwfbvrqkz811yv.png" alt="1_0FTHZgh-R80TUJ355AwURA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That covers most of the similarities of &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;, let’s now take a look at the differences.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#differences"&gt;
  &lt;/a&gt;
  Differences
&lt;/h3&gt;

&lt;p&gt;Starting with &lt;code&gt;type&lt;/code&gt;, there are a few things that are possible that you wouldn’t be able to do with an &lt;code&gt;interface&lt;/code&gt;. For example, If you wanted to setup a type alias for just a single core type (e.g. string, number, boolean etc.), this is something that is possible with &lt;code&gt;type&lt;/code&gt; but not with &lt;code&gt;interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSIM3fBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7uwnpwny4wsw85yfh0.png" alt="1_9msX1PR0rC_REWxd3eouAw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another possibility with &lt;code&gt;type&lt;/code&gt; is that you are able to create a bit more custom type aliases by using unions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsirRkWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balanxh1crdkuimpg39j.png" alt="1_QlcaARr_2JgnLPry7FEsoQ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pretty much sums up the unique offerings of &lt;code&gt;type&lt;/code&gt;. While there may be some more advance features that &lt;code&gt;type&lt;/code&gt; offers that I missed, this should cover the most common use cases.&lt;/p&gt;

&lt;p&gt;Moving on to &lt;code&gt;interface&lt;/code&gt;, there is a unique feature called “declaration merging” that you aren’t able to do with a &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3yI3bMzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0zhxxxvuqq52hdjuap1.png" alt="1_pbV0jRO22ETpb0-_obqmBw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;To summarize, both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt; provide some nice type safety options for you to choose from depending on your needs. When it comes to describing object shapes which is the majority of my use cases, I prefer to go with an &lt;code&gt;interface&lt;/code&gt;. I personally like that an &lt;code&gt;interface&lt;/code&gt; was designed specifically with this purpose in mind, and is very intentional about it.&lt;/p&gt;

&lt;p&gt;However anytime I need to provide type safety for a function, or need a bit more customization for a type alias such as the case with unions, I prefer to go with &lt;code&gt;type&lt;/code&gt;. Both are lovely options for providing type safety, and you really can’t go wrong with using either one!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My 5 favorite HTML/CSS shortcuts in VSCode</title>
      <author>Seth A Burleson</author>
      <pubDate>Fri, 09 Apr 2021 18:50:07 +0000</pubDate>
      <link>https://dev.to/sbrevolution5/my-5-favorite-html-css-shortcuts-in-vscode-2m5d</link>
      <guid>https://dev.to/sbrevolution5/my-5-favorite-html-css-shortcuts-in-vscode-2m5d</guid>
      <description>&lt;p&gt;Tired of typing in &lt;/p&gt; only to be forced to scroll back and type in the class elements?  Exhausted by nesting div into div to make your beautiful grid layout in what was supposed to be a flash, but turned into leaning on your left arrow key until your hand went numb?  If you said yes to any of that, you need to meet my buddy Emmet.  Emmet helps devs by allowing you to type in snippets within VSCode, and have beautiful HTML come out the other end. 
&lt;h1&gt;
  &lt;a href="#5-quick-siblings"&gt;
  &lt;/a&gt;
  5. Quick siblings
&lt;/h1&gt;

&lt;p&gt;Good ol' addition symbols (+) will get you sibling elements.  Lets say you have a div with an image, h3, and paragraph.  With your cursor in the body of the div, just type &lt;code&gt;img+h3+p&lt;/code&gt; and emmet will give you the beautiful html :&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;div&amp;gt;
          &amp;lt;img src="" alt=""&amp;gt;
          &amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;And your cursor will be ready to insert the src for your image.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-nested-elements"&gt;
  &lt;/a&gt;
  4. Nested elements
&lt;/h1&gt;

&lt;p&gt;What if you need nested elements?  Just change out the + for a &amp;gt;!  &lt;code&gt;body&amp;gt;main&amp;gt;div&amp;gt;h1&lt;/code&gt; will give you&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;body&amp;gt;
          &amp;lt;main&amp;gt;
              &amp;lt;div&amp;gt;
                  &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
              &amp;lt;/div&amp;gt;
          &amp;lt;/main&amp;gt;
      &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#3-multiple-elements"&gt;
  &lt;/a&gt;
  3. Multiple elements
&lt;/h1&gt;

&lt;p&gt;Making a table can be time consuming, unless you're using emmet to its full potential.  Using the same technique, parentheses will let you multiply the number of nested children.  &lt;code&gt;div&amp;gt;(p*5)&lt;/code&gt; turns into:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;div&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
      &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#2-fast-ids"&gt;
  &lt;/a&gt;
  2. fast ids
&lt;/h1&gt;

&lt;p&gt;If you want to put some divs in with ids already attached, you can use css-style syntax.  &lt;code&gt;#article&lt;/code&gt; becomes &lt;code&gt;&amp;lt;div id="article"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.  But you can combine other techniques with this, for instance &lt;code&gt;div&amp;gt;#hello&amp;gt;p&lt;/code&gt; becomes&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       &amp;lt;div&amp;gt;
          &amp;lt;div id="hello"&amp;gt;
              &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#1-divs-but-with-class"&gt;
  &lt;/a&gt;
  1. Divs, but with class!
&lt;/h1&gt;

&lt;p&gt;If you paid attention during the last tip you'll probably already understand how to use classes.  Just add a dot.  &lt;code&gt;.bold&lt;/code&gt; becomes &lt;code&gt;&amp;lt;div class="bold"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;.  You can also chain them together to add more (.bold.bigtitle.nav-bar-header) or combine any previous methods to get these going.  Try &lt;code&gt;div&amp;gt;#art1.article&amp;gt;#art2.article&amp;gt;#art3.article&lt;/code&gt; and you'll see how many things we've just covered can be combined.&lt;/p&gt;

&lt;p&gt;Let me know what your favorite shortcuts are!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>5 Super Useful Menubar Apps For macOS</title>
      <author>Rohith Gilla</author>
      <pubDate>Fri, 09 Apr 2021 18:48:55 +0000</pubDate>
      <link>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</link>
      <guid>https://dev.to/gillarohith/5-super-useful-menubar-apps-for-macos-1o9o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMpaJ4ao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif%3Fcid%3Decf05e47lyeouvoiu4bvmmmdlzfgx8dwfb0n5jptcz4zo6yj%26rid%3Dgiphy.gif" alt="Hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! In this post let's breeze ❄️ through some of my most used and favourite, free menu bar applications for Mac. &lt;/p&gt;

&lt;p&gt;At one point or another, nearly every Mac user reaches a point where they feel as though the functionality included with macOS is not enough to enable them to perform their jobs to their standards. For this reason, many Mac owners turn to third-party applications that will help improve these workflows while offering additional features.&lt;/p&gt;

&lt;p&gt;There are a number of menu bar applications that Mac owners use for daily workflows. In many cases, these applications help you improve your workflow and offers you some extra features that will allow you to do your work more efficiently throughout the day.&lt;/p&gt;

&lt;p&gt;If you haven't checked my 2020 edition I'll leave the link here, do check it out 😄&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gillarohith" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVXfW6Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xIsgHLUD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/317018/ae62352f-cc66-414d-8d25-1735f649f780.jpg" alt="gillarohith image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/xenoxdev/6-super-useful-menubar-apps-for-macos-3g19" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Super Useful Menubar Apps For MacOS&lt;/h2&gt;
      &lt;h3&gt;Rohith Gilla ・ Jun 16 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#macos&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The 5 Applications we will go over are the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud App&lt;/li&gt;
&lt;li&gt;Dozer&lt;/li&gt;
&lt;li&gt;Tot&lt;/li&gt;
&lt;li&gt;xbar&lt;/li&gt;
&lt;li&gt;Drafts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's glide over them now&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwmoiNWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/9DeF9TxMxqybiMiKDK/giphy.gif%3Fcid%3Decf05e47swknnji9oc0a2fq8u2e4atinmczxiduaeorihybu%26rid%3Dgiphy.gif" alt="Glide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-app"&gt;
  &lt;/a&gt;
  Cloud App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edLTPeGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets-global.website-files.com/58e32bace1998d6e3fee8d71/6063e0c4f2ded72e5e7cebc3_cloudapp-logo-full-lockup.svg" alt="Cloud app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Record your screen as a video with your voice &amp;amp; face, an annotated image, or a GIF and instantly share it as a link to get your point across.&lt;/p&gt;

&lt;p&gt;This is an amazing application, this is currently my go-to app to take and share screenshots, record screen.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://www.getcloudapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dozer"&gt;
  &lt;/a&gt;
  Dozer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" class="article-body-image-wrapper"&gt;&lt;img height="100" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q6T1z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Mortennn/Dozer/raw/master/Stuff/demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hide menu bar icons to give your Mac a cleaner look. This is a free version of the famous bartender application.&lt;/p&gt;

&lt;p&gt;You can download it &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;br&gt;
You can also check and contribute to the code &lt;a href="https://github.com/Mortennn/Dozer/releases"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tot"&gt;
  &lt;/a&gt;
  Tot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZzy6r7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmsavs5amxksc5x2jbhy.png" alt="Tot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An elegant, simple way to collect &amp;amp; edit text on your Mac, iPhone, and iPad.&lt;/p&gt;

&lt;p&gt;I use to jot down quick stuff, write some important tasks and taking notes during an impromptu meeting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#xbar"&gt;
  &lt;/a&gt;
  xbar
&lt;/h2&gt;

&lt;p&gt;Put the output from any script or program into your macOS Menu Bar.&lt;/p&gt;

&lt;p&gt;If you want a custom script running on your menubar, like your youtube stats, Twitter followers or anything else, this is the application for you.&lt;/p&gt;

&lt;p&gt;You can download and check other plugins &lt;a href="https://xbarapp.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drafts"&gt;
  &lt;/a&gt;
  Drafts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dlcEoa_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6geqt5uqd57qpstx6qh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drafts opens to a new page with the keyboard ready so you can type immediately. Go hands-free with Dictation. Drafts lets you get things down before you forget without fiddling folders, naming, etc.&lt;/p&gt;

&lt;p&gt;This is one of the most underrated application, this is the quickest way to jot down anything. The best thing is not only it resides in the menu bar, but it can also be added as a complication to an Apple Watch. It syncs between iPad, iPhone, Mac, Watch seamlessly. You get the amazing apple ecosystem feeling.&lt;/p&gt;

&lt;p&gt;You can support me here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/C0C042WW1"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWEX3xu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi2.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rohithgilla"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to drop your favourite apps in the comments below and let me know if I missed any amazing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--624_nTBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/KB8C86UMgLDThpt4WT/giphy.gif%3Fcid%3Decf05e47z9s61cqcouzqcscd5f037k6yeo7ljgegtgy0z06v%26rid%3Dgiphy.gif" alt="Thanks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Rohith Gilla&lt;/p&gt;

&lt;p&gt;P.S: Please let me know if you want me to explain how each of the application helps make your workflow better in detail. &lt;/p&gt;

&lt;p&gt;Will definitely try to make it happen.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>macos</category>
      <category>todayilearned</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
