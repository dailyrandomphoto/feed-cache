<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Just Ask Ipython for help</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 11 Oct 2021 14:24:25 +0000</pubDate>
      <link>https://dev.to/waylonwalker/just-ask-ipython-for-help-324e</link>
      <guid>https://dev.to/waylonwalker/just-ask-ipython-for-help-324e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#it-happens-to-the-best-of-us"&gt;
  &lt;/a&gt;
  It happens to the best of us
&lt;/h2&gt;

&lt;p&gt;We can't all remember every single function signature out there, it's just not&lt;br&gt;
possible.  If you want to stay productive while coding without the temptation&lt;br&gt;
to hit YouTube or Twitter.  Use the built in help.  Here are 5 ways to get help&lt;br&gt;
without leaving your terminal.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TZrRAP-9UMk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docstrings"&gt;
  &lt;/a&gt;
  Docstrings
&lt;/h2&gt;

&lt;p&gt;In any python repl you can access the docstring of a function by calling for &lt;code&gt;help&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ipython we can even get some syntax highlighting with the &lt;code&gt;?&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;Sometimes the docstrings are not good enough, and don't give us the content we&lt;br&gt;
need, and we just need to look at the source.  Without leaving your terminal&lt;br&gt;
there are two ways I often use to get to the source of a function I am trying&lt;br&gt;
to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The more common way I do it is with the ipython &lt;code&gt;??&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.rolling??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-richinspect"&gt;
  &lt;/a&gt;
  Bonus rich.inspect
&lt;/h2&gt;

&lt;p&gt;You thought the syntax highlighting was good with ipython, check out what&lt;br&gt;
&lt;code&gt;rich.inspect&lt;/code&gt; can do! As far as I know there is no way to get to source code,&lt;br&gt;
but the results are still fantastic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;rich
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Install rich&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;then inspect&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;If you liked this one, check out the YouTube Channel, catch me live on twitch,&lt;br&gt;
or connect on twitter, I'd love to hear from you.&lt;/p&gt;

&lt;p&gt;twitter:  &lt;a href="https://twitter.com/_WaylonWalker"&gt;https://twitter.com/_WaylonWalker&lt;/a&gt;&lt;br&gt;
twitch: &lt;a href="https://www.twitch.tv/waylonwalker"&gt;https://www.twitch.tv/waylonwalker&lt;/a&gt;&lt;br&gt;
github: &lt;a href="https://github.com/waylonwalker/"&gt;https://github.com/waylonwalker/&lt;/a&gt;&lt;br&gt;
twitch: &lt;a href="https://www.twitch.tv/waylonwalker"&gt;https://www.twitch.tv/waylonwalker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Writing an Engaging, SEO-Friendly Technical Content: Tips from Fellow Creators</title>
      <author>Charu Veluthoor</author>
      <pubDate>Mon, 11 Oct 2021 13:45:46 +0000</pubDate>
      <link>https://dev.to/aviyel/writing-an-engaging-seo-friendly-technical-content-tips-from-fellow-creators-3pn1</link>
      <guid>https://dev.to/aviyel/writing-an-engaging-seo-friendly-technical-content-tips-from-fellow-creators-3pn1</guid>
      <description>&lt;p&gt;The role of writers in building brands is indispensable today. From global tech giants like Facebook to budding startups, carefully articulated content is essential in attracting consumers, building user base, and maximising user retention rate. Aviyel works with creators around the globe and features informative content around open source projects.&lt;br&gt;
Here’s a quick guide to the basics of technical writing that certainly answers- how to begin with technical writing from a scratch with Aviyel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-we"&gt;
  &lt;/a&gt;
  Who are we?
&lt;/h2&gt;

&lt;p&gt;Aviyel works with open source creators to build and incentivise active communities, achieve financial independence and increase adoption of their projects. At Aviyel, we are building a knowledge repository to share their contents, experiences, and support for open source projects. We are the bridge connecting open source communities, businesses, and developers who build great products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-of-freelancers-in-building-a-platform-like-aviyel"&gt;
  &lt;/a&gt;
  Role of freelancers in building a platform like Aviyel
&lt;/h3&gt;

&lt;p&gt;Great open source projects deserve great content. Open source has always had a content problem creating difficulties connecting with the audience. Here’s where writers come into the picture. Creators are a building block of any organisation, regardless of the size. The content developers through their product allow companies like Aviyel to kickstart the conversations around open source and help OSS projects to climb the desired mark. We want you to help build OSS communities for our partners through your content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-enterprises-expect-from-creators"&gt;
  &lt;/a&gt;
  What do enterprises expect from creators?
&lt;/h3&gt;

&lt;p&gt;To create well-planned, well-researched, and well-crafted articles. Inform the developer ecosystem, stimulate a new and critical discourse around Open Source creators, projects, and community. The blog post should sound human and curated in a way that all reader questions are answered. While preparing a draft of your blog, please ask yourself if this is what I want to read as a reader? This is how you will polish your writing style by quick elimination and bringing rigor to your content. If you encounter any difficulty while writing/formulating your thoughts on a write-up, reach out to our content community and Aviyel’s content management team on our Discord channel. Above all, we will assist each other to learn, grow and accomplish their missions in life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voice-and-tone"&gt;
  &lt;/a&gt;
  Voice and Tone
&lt;/h3&gt;

&lt;p&gt;Generally, most articles follow this standard:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice"&gt;
  &lt;/a&gt;
  Voice
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Informative&lt;/li&gt;
&lt;li&gt;Technical&lt;/li&gt;
&lt;li&gt;Confident&lt;/li&gt;
&lt;li&gt;Human&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tone"&gt;
  &lt;/a&gt;
  Tone
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q&amp;amp;A: Conversational&lt;/li&gt;
&lt;li&gt;Blog: Opinionated&lt;/li&gt;
&lt;li&gt;How-to’s and Tutorials: Informative&lt;/li&gt;
&lt;li&gt;Cheat Sheets, Checklists, and To-do’s: Report&lt;/li&gt;
&lt;li&gt;Reviews: Analyst&lt;/li&gt;
&lt;li&gt;Thought pieces: Storyteller&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#word-count"&gt;
  &lt;/a&gt;
  Word Count
&lt;/h3&gt;

&lt;p&gt;The article should contain around 1500 words. Although, editors do appreciate you going the extra mile, please make sure the extra content adds rigor and value to your content, rather than make it dormant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-blog"&gt;
  &lt;/a&gt;
  Structure of Blog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction- First line should have the primary keyword. Please use a stat or recent example to supplement your introduction. Must contain at least one external linking (mostly to your stat).&lt;/li&gt;
&lt;li&gt;Body- The body should have a minimum of two headings. Both internal and external linking is required. The headings must include your keywords.&lt;/li&gt;
&lt;li&gt;Conclusion- Can be quoted as “Way Forward/ Parting Note.” Please connect your article with Aviyel’s vision and add Aviyel’s relevant social media/blog links.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt;- Aviyel is partnering with MobSF to deliver a one-of-a-kind mobile security infrastructure available in the electronics industry. We are embarking on a journey to monetise open source software and build a developers-driven community with constant flow of knowledge, ideas, and goals. To know more about Aviyel's recent endeavors, follow our discussions here. Join Aviyel’s Twitter space at AviyelHQ.&lt;br&gt;
Moreover, the structure of your blog primarily depends on the niche of your post. For instance, if you are curating a step by step tutorial or contribution guide, try to include some generalised pointers like prerequisites, attributions and a summary of your writeup in conclusion. Similarly, if you are attempting a benchmarking article, make sure to enlist pros, cons, and difference between the two technologies you are writing about. You can checkout a sample guide &lt;a href="https://dev.toput-link-here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-optimisation"&gt;
  &lt;/a&gt;
  Keyword Optimisation
&lt;/h3&gt;

&lt;p&gt;This is the heart and soul of your write-up. A blog mainly consists of 5-7 main keywords out of which primary keyword will lift your blog ranking. To rank your blog on search engines, please ensure your keyword is stuffed at the right places. Do not overuse your keywords. An ideal keyword density means using your primary keyword once in every three lines. Please follow the ritual the next time you draft an article. Other pointers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least two of your headings must have the primary keyword.
The first paragraph of your blog must contain the primary keyword. It’s better if you use it in the first two lines themselves.&lt;/li&gt;
&lt;li&gt;There is no right answer to how many times your keywords should appear in your blog. However, please make sure your secondary keywords are stuffed at least 5-7 times in the entire blog.&lt;/li&gt;
&lt;li&gt;Frame your content around your keywords, not vice versa.&lt;/li&gt;
&lt;li&gt;The title should not be more than 12-word long. The keyword must come in the first 4 words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#plagiarism"&gt;
  &lt;/a&gt;
  Plagiarism
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Aviyel, or any other company per se is strictly against * plag. Please use any plag detection tool before submitting your article to the content team at Aviyel. At times, plag is a result of adding repeated quotations or stats. Try to modify their language without changing the essence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#important-pointers"&gt;
  &lt;/a&gt;
  Important Pointers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use minimum passive voice. It decreases the readability score of your blog.&lt;/li&gt;
&lt;li&gt;Try not to use big words with more than two syllables.&lt;/li&gt;
&lt;li&gt;Use Headings as much as you can. It decreases the complexity meter.&lt;/li&gt;
&lt;li&gt;Image caption and title- should involve keywords in a robust manner. Download your images with the title of your blog.&lt;/li&gt;
&lt;li&gt;Complex sentences reduce readability scores and may not pacify the reader’s imagination. Short and crisp sentences enrich the content. Try to wrap most of your sentences in 10 words.&lt;/li&gt;
&lt;li&gt;Use Social media links. Embed them in your articles.
Internal and external linking&lt;/li&gt;
&lt;li&gt;Do not end your headings with a period, semicolon.&lt;/li&gt;
&lt;li&gt;Make sure your content is fresh. Freshness enhances the SEO of your content.&lt;/li&gt;
&lt;li&gt;Conclude your blog with Aviyel’s vision, social media links.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#headlinestitles"&gt;
  &lt;/a&gt;
  Headlines/Titles
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Write in title case&lt;/li&gt;
&lt;li&gt;Make sure you use your primary keyword within the first five words.&lt;/li&gt;
&lt;li&gt;Primary Section Headers: Use Heading 1&lt;/li&gt;
&lt;li&gt;Key Subheads That Should Show Up in Contents: Use Heading 2&lt;/li&gt;
&lt;li&gt;Third-Tier Subheads: Use Subtitle&lt;/li&gt;
&lt;li&gt;Body: Normal Text&lt;/li&gt;
&lt;li&gt;Examples: Indent Normal Text; use bullets as necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#subheads"&gt;
  &lt;/a&gt;
  Subheads
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Include and follow the H2 &amp;gt; H3 &amp;gt; H4 hierarchy strictly. Your headings should start with H2 then followed by H3.&lt;/li&gt;
&lt;li&gt;Do not forget to use your primary keyword in headings and subheadings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#body"&gt;
  &lt;/a&gt;
  Body
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bullets: default CMS bullet, aligned left&lt;/li&gt;
&lt;li&gt;Numbering: default CMS, aligned left&lt;/li&gt;
&lt;li&gt;Font, bold, italics

&lt;ul&gt;
&lt;li&gt;Leave font as “paragraph” style unless using a subhead. Bold subheads. No need to italicize.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Hyperlinks

&lt;ul&gt;
&lt;li&gt;Embed link for SEO, set to open in a new tab.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h4&gt;

&lt;p&gt;Whenever you download images from Google Images, make sure the title of the blog is the title of your images. When inserting the image in the doc/CMS platform, please caption the image with the primary keyword.&lt;br&gt;
If project title- MobSF: Best practices and Tips&lt;br&gt;
Image captions can be Features of MobSF/Analysis of Mobile Security Framework&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#embeddable-content"&gt;
  &lt;/a&gt;
  Embeddable Content
&lt;/h4&gt;

&lt;p&gt;Here, I am talking from Aviyel’s perspective;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Videos

&lt;ul&gt;
&lt;li&gt;Be opportunistic to include YouTube of vloggers approved by Aviyel (here in this case) only.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Social media posts

&lt;ul&gt;
&lt;li&gt;Be opportunistic to embed Facebook, Twitter, Instagram, and other posts of Aviyel, yours, or other Aviyel freelancers writing on similar issues.&lt;/li&gt;
&lt;li&gt;Find social media handles of our partners- Docz, MobSF, etc, and embed them into your posts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#aviyel-house-style"&gt;
  &lt;/a&gt;
  Aviyel House Style
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;business&lt;/strong&gt;&lt;br&gt;
Plural: businesses&lt;br&gt;
Sing. possessive: business’s&lt;br&gt;
Plural possessive: businesses’&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FinTech businesses burst onto the scene in 2006.&lt;/li&gt;
&lt;li&gt;The business’s toxic work environment&lt;/li&gt;
&lt;li&gt;Businesses’ policies for work-life balance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;br&gt;
One word, no hyphen.&lt;br&gt;
&lt;strong&gt;internet&lt;/strong&gt;&lt;br&gt;
Always lowercase except when used as part of a name or proper noun.&lt;br&gt;
&lt;strong&gt;log in/login&lt;/strong&gt;&lt;br&gt;
log in (intransitive verb), and login (adjective, noun). Never "log on," never hyphenated.&lt;br&gt;
Log into the master as root.&lt;br&gt;
Log in to complete the steps.&lt;br&gt;
&lt;strong&gt;multicloud&lt;/strong&gt;&lt;br&gt;
One word, no hyphen.&lt;br&gt;
&lt;strong&gt;operating system&lt;/strong&gt;&lt;br&gt;
The foundational software that runs a computer, server, mobile device.  OS is acceptable on second use. operating systems, OSs&lt;br&gt;
&lt;strong&gt;open source software&lt;/strong&gt;&lt;br&gt;
No hyphen between open and source. Do not capitalise on open source in between the sentences.&lt;br&gt;
&lt;strong&gt;software&lt;/strong&gt;&lt;br&gt;
As an uncountable noun, software is always singular.&lt;br&gt;
&lt;strong&gt;job titles&lt;/strong&gt;&lt;br&gt;
Do not capitalise job titles unless they follow a name or are used as part of the name.&lt;br&gt;
Co-Founder Jose Kuttan&lt;br&gt;
Jose Kuttan, the co-founder of Aviyel&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sourcing"&gt;
  &lt;/a&gt;
  Sourcing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Don’t use only one source of information&lt;/li&gt;
&lt;li&gt;Don’t exclusively or repeatedly use the same sources&lt;/li&gt;
&lt;li&gt;Sources should reflect the diversity in our communities&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#attribution"&gt;
  &lt;/a&gt;
  Attribution
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#in-line-in-copy"&gt;
  &lt;/a&gt;
  In line in copy
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;“The open source industry will grow by X% by 2025, according to McKinsey.”
Parting Note
It is vital to build a fresh, SEO-laiden copy of your posts. Above, I have summarised a number of tips and techniques you can use to master your content. However, SEO-enrichment would work only if your content is up-to date with greater visibility. Gaining followers to your blog isn’t about fine keywords, but quality of your content.
You can follow Aviyel for similar styleguides.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To read the full article, &lt;a href="https://bit.ly/3DEVf6r"&gt;tap here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>writing</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Much Does It Cost To Build a CRM System?</title>
      <author>AscendixTech</author>
      <pubDate>Mon, 11 Oct 2021 13:43:30 +0000</pubDate>
      <link>https://dev.to/ascendixtech/how-much-does-it-cost-to-build-a-crm-system-5ag</link>
      <guid>https://dev.to/ascendixtech/how-much-does-it-cost-to-build-a-crm-system-5ag</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://ascendixtech.com/crm-development-cost-full-guide/"&gt;Ascendix Tech's blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://www.statista.com/statistics/605933/worldwide-customer-relationship-management-market-forecast/#:~:text=The%20global%20customer%20relationship%20management,(CAGR)%20of%200.4%20percent."&gt;worldwide CRM software market is expected to reach over $43 bln by 2024&lt;/a&gt;&lt;/strong&gt; with a CAGR of 0.4% per year, according to Statista. &lt;/p&gt;

&lt;p&gt;These numbers mean that more and more companies continue to invest large funds into improving their lead generation funnels, customer service, lead-to-deal rates, and other activities through purchasing or building a powerful CRM system. &lt;/p&gt;

&lt;p&gt;Today, we want to discuss how much does it cost to build a CRM system comparing both ready-made solutions and custom CRM software for your business. &lt;/p&gt;

&lt;p&gt;Let’s get down to business. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-crm-development-vs-readymade-solutions"&gt;
  &lt;/a&gt;
  Custom CRM Development vs Ready-Made Solutions
&lt;/h2&gt;

&lt;p&gt;Before getting right into discussing the CRM development cost, we want to briefly shed the light on the key options you have to get a customer relationship management system for your business. &lt;/p&gt;

&lt;p&gt;Generally, there are three of them: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Develop custom CRM from scratch &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize existing CRM solutions (i.e., on top of Salesforce or Dynamics 365) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Purchase a ready-made CRM software license &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now highlight the pros and cons of each solution and then compare them by the same criteria. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-crm-development"&gt;
  &lt;/a&gt;
  Custom CRM Development
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High system performance level &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High compatibility in terms of integrations with any third-party platforms you need &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High data security level using the latest encryption protocols &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High flexibility by building a single IT infrastructure for all departments &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cost-efficient solution in the long run. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High initial price for building and setting up the system &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Much time required to create a CRM from scratch &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Costly maintenance. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#crm-customization"&gt;
  &lt;/a&gt;
  CRM Customization
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cost savings as you need only to build several specific features on top of ready-made solutions  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save much time as most features and infrastructures are preliminary ready for use &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid much technical issues &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get enough customizability and flexibility for your business &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frequent platform updates automatically. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You still need to purchase licenses for each new CRM user &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You still don’t get full flexibility in terms of features and integrations. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#offtheshelf-crm-systems"&gt;
  &lt;/a&gt;
  Off-The-Shelf CRM Systems
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Save much time and start using a CRM within a couple of minutes/hours &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lots of features out-of-the-box  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Existing integrations with third-party tools  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Low flexibility level &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extra funds on the functionality you may never use &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High CRM development cost in the long run &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limited customization opportunities &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Potential scalability issues in the future. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now dive into a more detailed comparison of the mentioned options covering and cover the most crucial aspects for your business. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--am6_YcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg5k7blgvgea67ahtnvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--am6_YcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg5k7blgvgea67ahtnvh.png" alt="Ready-Made Solutions vs CRM Customization vs Custom CRM Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsoE1lic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wlywi0qffw0wtzwqxtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsoE1lic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wlywi0qffw0wtzwqxtf.png" alt="Ready-Made Solutions vs CRM Customization vs Custom CRM Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crm-development-cost-key-price-components"&gt;
  &lt;/a&gt;
  CRM Development Cost: Key Price Components
&lt;/h2&gt;

&lt;p&gt;Now we want to share the core CRM system modules that will impact the final CRM development cost. This way, you will have a better understanding of the key components that should complement your CRM system so that you know what you’re paying for. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin Panel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a cornerstone of your future custom CRM software which is responsible for system rights management, authorization processes, navigation, and account settings. &lt;/p&gt;

&lt;p&gt;So, software engineers will need to develop advanced server-side logic and features to make server request architecture as fast as possible. &lt;/p&gt;

&lt;p&gt;Moreover, development teams will need to create an easy-to-use and lightweight user interface to offer your employees easy-to-use and advanced CRM software user experience. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sales Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sales functionality block is one of the most crucial parts of your CRM system as it empowers your sales managers to automate their daily workflows and utilize contacts management, task management, get sales data analytics, and many other features. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CRM software is a must-have system for your marketing department as well.  &lt;/p&gt;

&lt;p&gt;Marketers create personalized customer profiles, analyze market segments, verify the quality of leads they generate, and build powerful email campaigns for leads and contacts stored in your CRM software. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customer Support Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your custom CRM software should provide an advanced customer support functionality block. &lt;/p&gt;

&lt;p&gt;In general, it includes a help desk, agent console, knowledge base portal, service analytics, case report and management, cloud-based data storage, and many other features. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpAhWCwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr3ao59ueyzjocofmm21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpAhWCwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr3ao59ueyzjocofmm21.png" alt="Key CRM Development Pricing  Functionality Components | Ascendix Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we have discussed the most default features and modules of your custom CRM software. And here comes the question: ‘how much does it cost to build a CRM?’ &lt;/p&gt;

&lt;p&gt;Below is the list of technical specialists required to build the functionality blocks listed above: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Frontend developers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend developers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical team leads &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI/UX designers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project managers &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;QA testing engineers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps specialists &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Business analysts. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have a better understanding of the technical specialists that will most likely take part in building, testing, designing, and controlling your custom CRM development project. &lt;/p&gt;

&lt;p&gt;In terms of the CRM development cost, it may greatly vary depending on the complexity and number of features you need. &lt;/p&gt;

&lt;p&gt;You will have a more clear understanding after conducting a discovery phase or requesting an estimate from a CRM development company that you want to partner with. &lt;/p&gt;

&lt;p&gt;Generally, an approximate custom CRM software development starts from &lt;strong&gt;$50,000 building must-have functionality&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Custom CRM development cost is a complex and multicomponent term which should be estimated based on your business challenges and technical needs.  &lt;/p&gt;

&lt;p&gt;If you want to learn more details, check the full blog article &lt;strong&gt;&lt;a href="https://ascendixtech.com/crm-development-cost-full-guide/"&gt;CRM Development Cost: Ready-Made Solutions vs Custom CRM Software&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Button Fill Animation</title>
      <author>Coder</author>
      <pubDate>Mon, 11 Oct 2021 13:41:41 +0000</pubDate>
      <link>https://dev.to/codezhub/button-fill-animation-1bfk</link>
      <guid>https://dev.to/codezhub/button-fill-animation-1bfk</guid>
      <description>&lt;p&gt; You Can Check Here for More: &lt;b&gt;&lt;a href="http://Codelivly.com"&gt;Codelivly.com&lt;/a&gt; &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you enjoyed this article you can &lt;/span&gt;&lt;span&gt; on &lt;a href="https://dev.to/codezhub"&gt;https://dev.to/codezhub&lt;/a&gt; where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Happy Coding..&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/davekilljoy/embed/wHAvb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Resolving Conflicts within your dev team</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 11 Oct 2021 13:41:34 +0000</pubDate>
      <link>https://dev.to/codesphere/resolving-conflicts-within-your-dev-team-1hfh</link>
      <guid>https://dev.to/codesphere/resolving-conflicts-within-your-dev-team-1hfh</guid>
      <description>&lt;p&gt;Confrontation is inevitable in the close-knit and often stressful environments many dev teams work in. It is a rare group of people that can work together towards the same goal and not disagree sooner or later. The issue is not the arisal of conflict, but how you manage it. The way a team works through disagreements to find common ground can be the difference between a good team and a great one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omlkuehB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnk1zyq4og0ob0utm5cd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omlkuehB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnk1zyq4og0ob0utm5cd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denial is not a river in Egypt, but it is one of the most common problems when it comes to resolving conflict.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, avoidance is an all too common response to conflict. A response that usually only serves to draw an issue out and, ultimately, helps nobody. Granted not every disagreement needs an intervention and team-building retreat before it's solved, but having the tools to help your team communicate is how you will find your way to productivity.&lt;/p&gt;

&lt;p&gt;Conflict can come from anywhere; a bad code review, a design disagreement, or even just a team member having a bad day. In a high-paced environment, the smallest miscommunication can escalate into an issue that can cause the whole team to be disrupted. Whatever the conflict, there is always a simple rule to remember - &lt;em&gt;Conflict exists when one party has a need for another and that &lt;strong&gt;need is not being met&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLlqGYUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7w6zc79dhlggwzum7qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLlqGYUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7w6zc79dhlggwzum7qa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thought you might have is that not all disputes fit so neatly into this simple definition, but think of it as a jumping-off point to help you understand and hopefully solve the issue…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicate-the%C2%A0need"&gt;
  &lt;/a&gt;
  Communicate the need
&lt;/h3&gt;

&lt;p&gt;It is important to understand what each party is trying to achieve in any given conflict, what is their stance, and why are they involved at all. This might be as simple as one party requesting a resource or action from another, or it may be much more complicated in that there is no single 'need' to be filled in order to resolve the issue. The important thing is to establish communication on what all parties are trying to accomplish.&lt;/p&gt;

&lt;p&gt;In many cases, simply allowing all parties to vocalize their position can create enough space for a compromise to be achieved. Whether or not the need can be realistically met is not the goal of this step, it is simply to establish communication and an understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k62WIjmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ga1eryrh18r7yoydks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k62WIjmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ga1eryrh18r7yoydks.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-the%C2%A0need"&gt;
  &lt;/a&gt;
  Meet the need
&lt;/h3&gt;

&lt;p&gt;If the need can be met within reason, then great. Conflict resolved. If not, then negotiation can begin. Again, we cannot speak to all situations with a single magic solution, but once all parties have vocalized their argument and there is still no clear solution, then you would hope cooler heads can prevail and a compromise that suits everyone or at least restores harmony can be made.&lt;/p&gt;

&lt;p&gt;Only if these steps fail do 3rd parties need to be involved for conflict resolution - a very common issue that many teams totally skip these steps. People can have a tendency to avoid the issue altogether or manifest their issue with aggression instead of trying to hear both sides…&lt;br&gt;
If you take anything away from this article it should be that all members of a successful dev team should be equipped with the tools to vocalize their needs with conflict counterparts and try to meet that need if possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflict-resolution"&gt;
  &lt;/a&gt;
  Conflict resolution
&lt;/h3&gt;

&lt;p&gt;Third-party intervention is the only option left if the conflicting parties are unable to find a solution on their own. A member of the leadership team should be able to act as an impartial adjudicator of a disagreement and make an unbiased decision that gets everyone involved back on track. The key here is listening and understanding the argument and making the most effective decision for the development of the project, not to disrespect or diminish any team member. &lt;br&gt;
A resolution needs to be found one way or the other in order for the team to get back to work and steps to keep everyone as happy and efficient as possible are the result of any good conflict resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yS28hUvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401plp8v95j7iskp05nn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yS28hUvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401plp8v95j7iskp05nn.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-avoid%C2%A0conflict"&gt;
  &lt;/a&gt;
  How to avoid conflict
&lt;/h3&gt;

&lt;p&gt;These tools are great for your team to know and implement but avoiding situations that cause friction between team members is an altogether better approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-clear%C2%A0goals"&gt;
  &lt;/a&gt;
  Set clear goals
&lt;/h3&gt;

&lt;p&gt;Ensuring all team members are well informed and on the same page is a great first step to avoiding miscommunication and conflict. Trying to make any group of people pull together to achieve a task can be difficult, everyone has their own opinion. Well-defined tasks will help team members see the destination clearly and avoid disputes about the best route to get there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lines-of-communication"&gt;
  &lt;/a&gt;
  Lines of communication
&lt;/h3&gt;

&lt;p&gt;Healthy lines of communication don't need much explanation but make sure the team is able to speak to one another and clear up any issues before they escalate into a potential problem. Maybe your goals were not as clearly defined as you thought? Well-accessible communication will allow all team members to clarify what may be causing them a bottleneck.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#effective-onboarding"&gt;
  &lt;/a&gt;
  Effective onboarding
&lt;/h3&gt;

&lt;p&gt;A well-planned and informative onboarding process will help every new team member's transition into the team be as smooth as possible. Company vision, KPIs, technical documentation, tools the team uses, roles, and responsibilities are all key things for a new hire to know and understand to avoid any conflict with new team members down the line.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Clearly defining the roles and responsibilities of each team member along with a well-defined goal and metrics will keep conflicts to a minimum. It's easier for everyone to sing from the same hymn sheet if everyone has the same one. A well-structured company with well-established and open communication is the best way to keep your team working together and in harmony.&lt;/p&gt;

&lt;p&gt;If and when conflict does arise, the ideal scenario would see all parties involved exercising their ability to vocalize their issue with as little ego as possible. Understanding one another and finding a compromise where possible should be the goal. This isn't always going to be possible but it should be a skill set all team members at least strive to achieve if an effective workflow is to follow. &lt;/p&gt;

&lt;p&gt;Understandably not every hire your team ever makes will be an emotionally mature and well-balanced individual, capable of clearly communicating their needs and finding healthy solutions to conflict. The foundation of any effective team though is communication. Giving your team these tools or even trying to establish them as a part of the culture will go a long way in avoiding many issues and keep you focused on the important stuff.&lt;/p&gt;

&lt;p&gt;What does your team use to resolve conflicts? Let us know down below. &lt;/p&gt;

&lt;p&gt;And as always, happy coding from your friends at &lt;a href="https://link.codesphere.com/EN"&gt;Codesphere&lt;/a&gt;, the bottleneck-free cloud provider. &lt;/p&gt;

&lt;p&gt;Written by Dan Parry&lt;/p&gt;

</description>
      <category>management</category>
      <category>teamwork</category>
      <category>productivity</category>
      <category>developer</category>
    </item>
    <item>
      <title>Flutter for JS devs - LLF #6</title>
      <author>Keff</author>
      <pubDate>Mon, 11 Oct 2021 13:39:19 +0000</pubDate>
      <link>https://dev.to/nombrekeff/flutter-for-js-devs-llf-6-dd1</link>
      <guid>https://dev.to/nombrekeff/flutter-for-js-devs-llf-6-dd1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey there&lt;/strong&gt; 👋&lt;/p&gt;

&lt;p&gt;I'm back with another entry to this series, so... Javascript right? We all love and hate it, yet have no choice but to use it if we want to create interactive websites (&lt;em&gt;kinda&lt;/em&gt;).  As a result, many developers know Javascript or have at least used it on some occasion. &lt;/p&gt;

&lt;p&gt;Consider this post as a comparison between some common aspects of both JS and Dart applications (like &lt;em&gt;async code, handling lists/arrays&lt;/em&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#entrypoints"&gt;Entrypoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boolean-checks"&gt;Boolean checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#futurespromises"&gt;Futures/Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncawait"&gt;Async/Await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapsobjects"&gt;Maps/Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-an-app"&gt;Running an app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-more"&gt;Learning more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#entrypoints"&gt;
  &lt;/a&gt;
  Entrypoints
&lt;/h2&gt;

&lt;p&gt;The first step to creating an app is launching/starting it. In dart, an entry-point function is required for all applications, in contrast to Javascript where it's up to you to define such a function. Note that if you use a framework it might require you to define an entry-point of some sort. &lt;/p&gt;

&lt;p&gt;Let's see how Dart does it and then show some examples of how we do that in javascript and some frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;

&lt;p&gt;In dart, all applications are required to start with a &lt;code&gt;main()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h4&gt;

&lt;p&gt;In flutter, we are also required to define a &lt;code&gt;main()&lt;/code&gt; function. But to start the app we must call the &lt;code&gt;runApp()&lt;/code&gt; function. This will bootstrap and start our app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;Javascript is not as strict and doesn't force us to write a &lt;code&gt;main&lt;/code&gt; function or any kind of entry-point really. Some might start directly when the script loads, or maybe wait until the page is fully loaded. Others might only start when a button is clicked and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When script loads:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Called when script is loaded&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;When page loads:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Called when the page fully loaded all the HTML and external resources&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h4&gt;

&lt;p&gt;Angular does not require us to define an entry-point function, but it requires us to create a &lt;code&gt;main&lt;/code&gt; file where we will bootstrap/start our application. That file would look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="nx"&gt;platformBrowserDynamic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bootstrapModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Angular uses TypeScript but it's the same drill.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native
&lt;/h4&gt;

&lt;p&gt;React native somewhat forces you to create an entry-point in the form of a React Component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HelloWorldApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;HelloWorldApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h2&gt;

&lt;p&gt;Dart does not offer such a variety of logging possibilities as the Javascript console. We are limited to just a single method &lt;code&gt;print&lt;/code&gt;, without adding external packages (like &lt;a href="https://pub.dev/packages/logger"&gt;logger&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'"I will, I do, I can, I should could do, yeh"'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I can only log a single string, but can easily interpolate variables like this: &lt;/span&gt;&lt;span class="si"&gt;$example&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"I will, I do, I can, I should could do, yeh"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I can only log more than a single string, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`but can easily interpolate variables like this: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;canFly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAChicken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canRespawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInmortal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;canFly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAChicken&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or specifying the type&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;canFly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAChicken&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;canRespawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInmortal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean-checks"&gt;
  &lt;/a&gt;
  Boolean checks
&lt;/h2&gt;

&lt;p&gt;In Javascript &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, an empty string (&lt;code&gt;''&lt;/code&gt;) are all evaluated as &lt;code&gt;false&lt;/code&gt;. And &lt;code&gt;1&lt;/code&gt; and any other &lt;code&gt;non-null&lt;/code&gt; value is evaluated as &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTgjDOVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc1mx46n278uzml200p1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTgjDOVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc1mx46n278uzml200p1.png" alt="Just a meme image on javascript bool checks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dart only considers the boolean value &lt;code&gt;true&lt;/code&gt; as true. So let's have a close look at how to perform some common checks:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;undefinedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;undefinedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nullValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;emptyString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;''&lt;/code&gt; are all being treated as &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emptyString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, in Dart we must implicitly check if it's a certain value. Nothing is treated as a boolean, except booleans themselves (makes sense).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We must use the &lt;code&gt;==&lt;/code&gt; equality operator to implicitly check for &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and other values&lt;/li&gt;
&lt;li&gt;For empty string we can use the built-in &lt;code&gt;isEmpty()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#futurespromises"&gt;
  &lt;/a&gt;
  Futures/Promises
&lt;/h2&gt;

&lt;p&gt;Both Javascript and Dart support single-threaded execution. Javascript offers the Promise object to handle this, while in Dart we use &lt;a href="https://dart.dev/codelabs/async-await"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; objects. These classes represent the eventual completion or failure of some operation.&lt;/p&gt;

&lt;p&gt;We commonly use &lt;a href="https://dart.dev/codelabs/async-await"&gt;&lt;code&gt;Futures&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Promises&lt;/code&gt; objects when calling remote APIs via HTTP requests, as they take a long time to complete. Synchronously doing this operation would freeze the application until the operation either fails or completes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://answeroflife.ai/give-it-to-me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://answeroflife.ai/give-it-to-me'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;catchError&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did you know that you can create Web Apps with Flutter?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
It seems it's not 100% ready for big scale applications, though it does the job with some work on our part.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  Async/Await
&lt;/h2&gt;

&lt;p&gt;If you are familiar with Javascript async/await, Dart is almost exactly the same. We mark the function with the &lt;code&gt;async&lt;/code&gt; keyword, then we can use the &lt;code&gt;await&lt;/code&gt; keyword to wait for promises/futures to complete.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://answeroflife.ai/give-it-to-me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://answeroflife.ai/give-it-to-me'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayslists"&gt;
  &lt;/a&gt;
  Arrays/Lists
&lt;/h2&gt;

&lt;p&gt;Dart handles arrays quite similarly to javascript, with some differences. Let's take a look at some of the most common list operations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-arrays"&gt;
  &lt;/a&gt;
  Creating arrays
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Typed list&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Untyped list&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;stepsAndBabyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Jonathan'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Joseph'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tommy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stepsAndBabyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jonathan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joseph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tommy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterating-arrays"&gt;
  &lt;/a&gt;
  Iterating arrays
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using for-in loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;$step&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Clasic for &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;${steps[i]}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// forEach&lt;/span&gt;
&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;$step&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using for-in loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Clasic for &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// forEach&lt;/span&gt;
&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: $step`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#map-items"&gt;
  &lt;/a&gt;
  Map items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;In dart we need to call &lt;code&gt;toList&lt;/code&gt; to convert back to a List, as map returns a lazy Iterable (&lt;a href="https://api.dart.dev/stable/1.10.1/dart-core/List/map.html"&gt;docs&lt;/a&gt;))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter-items"&gt;
  &lt;/a&gt;
  Filter items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-a-part-of-the-list"&gt;
  &lt;/a&gt;
  Get a part of the list
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sublist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#item-exists"&gt;
  &lt;/a&gt;
  Item exists
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-index-of-item"&gt;
  &lt;/a&gt;
  Find index of item
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-single-item"&gt;
  &lt;/a&gt;
  Find single item
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstWhere&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#has-items"&gt;
  &lt;/a&gt;
  Has items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapsobjects"&gt;
  &lt;/a&gt;
  Maps/Objects
&lt;/h2&gt;

&lt;p&gt;Most languages offer some sort of data structure to create unstructured data, dart is not different and offers the Map type.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-maps"&gt;
  &lt;/a&gt;
  Creating maps
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Samuel'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samuel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#serializingdeserializing-json"&gt;
  &lt;/a&gt;
  Serializing/Deserializing JSON
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Samuel'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;encodedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;decodedMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infoString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samuel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encodedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodedMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;infoString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-an-app"&gt;
  &lt;/a&gt;
  Running an app
&lt;/h2&gt;

&lt;p&gt;Running apps differs from language to language, and from framework to framework. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;Let's first see how we do it in flutter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the run utility in the IDE&lt;/li&gt;
&lt;li&gt;Executing &lt;code&gt;flutter run&lt;/code&gt; in the project root&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native
&lt;/h3&gt;

&lt;p&gt;In react native we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use npm script &lt;code&gt;npm run&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;or yarn &lt;code&gt;npm run&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;ng serve&lt;/code&gt; in the project root&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/get-started/flutter-for/react-native-devs"&gt;Introduction to Dart for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/get-started/codelab#step-1-create-the-starter-flutter-app"&gt;First flutter app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As seen in the post, Javascript and Dart have quite a few things in common. But differ in some aspects, such as handling booleans or working with arrays. This post just scratches the surface so let me know if you would like a follow-up!&lt;/p&gt;

&lt;p&gt;If you found this post useful, please consider checking &lt;a href="https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm"&gt;my previous post&lt;/a&gt;. It's a similar format to this one but comparing the theming/styling aspects of Flutter against CSS.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nombrekeff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSaJs7tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hX7RfmcL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/187971/a5359a24-b652-46be-8898-2c5df32aa6e0.png" alt="nombrekeff"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Flutter styling explained in CSS - LLF #5&lt;/h2&gt;
      &lt;h3&gt;Keff ・ Oct 1 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;And as always, thanks for reading. And remember to comment if you have any suggestions, doubts, or something you would like me to cover in these posts.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Dynamic styling in Vue.js</title>
      <author>Edoardo Cordani</author>
      <pubDate>Mon, 11 Oct 2021 13:26:57 +0000</pubDate>
      <link>https://dev.to/ecordani/dynamic-styling-in-vue-js-46l</link>
      <guid>https://dev.to/ecordani/dynamic-styling-in-vue-js-46l</guid>
      <description>&lt;p&gt;When I started using Vue.js as a front-end framework I immediately enjoyed the easy way I can set up and manage my components. Using single file components let me focus on all aspects regarding the way I build them: I simply need to put 3 tags inside a .vue file and I can start shaping both the visual aspect and all the logics behind the component itself. Talking about styling, the first thing that official doc tells you is how to style a component: simply insert a style tag (usually at the end of the file) and you're done. But when you move on and start to build complex interfaces, you immediately need to perform styling that goes beyond the simple composition of CSS classes.&lt;br&gt;&lt;br&gt;
So, during my journey, I discovered several ways to perform dynamic styling, and this article aims to be a short reference for people that come up at first with this need.&lt;br&gt;&lt;br&gt;
In order to show you the different techniques, I'll use a super-simple button component that must use a specific background color value if a boolean prop is true (ok maybe is too simple, but so you'll grasp the concepts quickly).&lt;br&gt;&lt;br&gt;
Let's start with the component code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.my-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we call the component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;my-button&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;"Attention!"&lt;/span&gt; &lt;span class="na"&gt;:is-warning=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-style-binding"&gt;
  &lt;/a&gt;
  #1 Style binding
&lt;/h3&gt;

&lt;p&gt;This is the simpler solution, just use Vue.js style binding and change the CSS background-color property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt;
    &lt;span class="na"&gt;:style=&lt;/span&gt;&lt;span class="s"&gt;"{'background-color': isWarning ? '#FC4': '#CCC'}"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-class-binding"&gt;
  &lt;/a&gt;
  #2 Class binding
&lt;/h3&gt;

&lt;p&gt;With class binding we append a specific class only if the prop &lt;code&gt;isWarning&lt;/code&gt; is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"['my-button', {'warning': isWarning}]"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and below in the style tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"scss"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.my-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;.warning&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FC4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-computed-style"&gt;
  &lt;/a&gt;
  #3 Computed style
&lt;/h3&gt;

&lt;p&gt;Ahh, this is the technique I like the most 😀 . We start defining a &lt;code&gt;classes&lt;/code&gt; computed value that returns a string of CSS class names based on the component property &lt;code&gt;isWarning&lt;/code&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-button warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we use the class binding we used above, passing only the computed value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"classes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-styledcomponents"&gt;
  &lt;/a&gt;
  #4 Styled-components
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;Styled-components&lt;/a&gt;  is a famous CSS-in-JS library used especially by React developers...and you can use it with Vue.js too 😉. You can find the package  &lt;a href="https://github.com/styled-components/vue-styled-components"&gt;here&lt;/a&gt;, please note that it's compatible only with Vue 2.x.&lt;br&gt;&lt;br&gt;
Install the package (using yarn as the package manager):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;yarn add vue-styled-components
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Due to the simplicity of the component, we define it inside the parent component in the &lt;code&gt;script&lt;/code&gt; tag. First we must import the library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we define the component (a styled button) and its property &lt;code&gt;isWarning&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btnProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;btnProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 10px 20px;
  border-radius: 8px;
  border: 0;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isWarning&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FC4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#CCC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the &lt;code&gt;background-color: ${props =&amp;gt; props.isWarning ? '#FC4' : '#CCC'};&lt;/code&gt;, here we are telling the library to change the CSS property based on then prop &lt;code&gt;isWarning&lt;/code&gt; value.&lt;br&gt;&lt;br&gt;
Last step is to register the newly created component and use it inside the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;....&lt;/span&gt;
  &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;MyButton&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;my-button&lt;/span&gt; &lt;span class="na"&gt;:is-warning=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Attention!
&lt;span class="nt"&gt;&amp;lt;/my-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides of styled-components library, there are also other CSS-in-JS libraries usable for Vue.js, for example &lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; through &lt;a href="https://github.com/egoist/vue-emotion"&gt;vue-emotion&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;That's all, hope you find this article useful. If you know other techniques feel free to write me and I'll update the article!&lt;br&gt;&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>vue</category>
    </item>
    <item>
      <title>Divtober Day 11: Slice</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 11 Oct 2021 13:16:15 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-11-slice-bkd</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-11-slice-bkd</guid>
      <description>&lt;p&gt;Today's #divtober drawing got a little bit out of hand. The word of the day is "slice," so I went for the obvious choice of a slice of pizza. It looked a bit sad, so I added cute eyes and a mouth. Then I made it dance (à la Peanut-Butter-Jelly-Time)... and then I turned it into an audio element so it could dance/sing to the music.&lt;/p&gt;

&lt;p&gt;Here's the demo on CodePen:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, due to the browsers' privacy policies, the songs don't autoplay anymore (or not every time). So, &lt;strong&gt;the song won't start until you click on the slice of pizza&lt;/strong&gt;. In order to do that, I had to cheat a little by adding an inline JavaScript command &lt;code&gt;onclick="this.play()"&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/qBXEdNp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It was fun using the &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tag instead of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. It opened a lot of doors for enhancing the drawing, adding more than just animation. A pity that the audio doesn't support autoplay or play on click without needing JS.&lt;/p&gt;

&lt;p&gt;Also, I learned about the &lt;code&gt;:playing&lt;/code&gt; pseudo-class (which I was going to use, so the slice of pizza danced only with the music)... unfortunately, it is not supported anywhere.&lt;/p&gt;

&lt;p&gt;This is another example of an animation that looks better on Chrome than on the other browsers because of the &lt;code&gt;@property&lt;/code&gt; support that allows to animate the backgrounds.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Use these expert-verified tips to enhance your technical writeups!</title>
      <author>Saharsh Laud</author>
      <pubDate>Mon, 11 Oct 2021 13:15:33 +0000</pubDate>
      <link>https://dev.to/saharshlaud/use-these-tips-to-enhance-your-technical-writeups-3239</link>
      <guid>https://dev.to/saharshlaud/use-these-tips-to-enhance-your-technical-writeups-3239</guid>
      <description>&lt;p&gt;There is no better feeling in this world than having your thoughts transformed into words and those words being helpful to other people. The entire essence of Technical writing is to convert complex technical terminologies into a clear, concise, and easily understandable format for your audience. &lt;/p&gt;

&lt;p&gt;While the result of technical writing seems to be quite clear, the process of reaching that goal is definitely not a piece of cake. The main point here is to keep things simple for the audience which a lot of writers struggle to incorporate in their write ups. &lt;/p&gt;

&lt;p&gt;I recently had the chance to be a part of the Hashnode Technical Writing Bootcamp where I met some of the most outstanding personalities in the technical writing community ( &lt;a href="https://hashnode.com/@quincy"&gt;Quincy Larson&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@tanoaksam"&gt;Sam Sycamore&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@didicodes"&gt;Edidiong Asikpo&lt;/a&gt; ,  &lt;a href="https://hashnode.com/@dailydevtips"&gt;Chris Bongers&lt;/a&gt;  and many others) and the tips and suggestions shared by them surely helped me to shape my thoughts and actions as a technical writer.&lt;/p&gt;

&lt;p&gt;Here are some tips that I think are useful for any technical writer despite the experience level or background:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beginners-mindset-is-an-asset"&gt;
  &lt;/a&gt;
  Beginners Mindset is an Asset
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dc5xt7cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461080945/hJrhuqmRD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dc5xt7cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461080945/hJrhuqmRD.jpeg" alt="Beginners-Mindset.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being a beginner at technical writing might be quite intimidating at times but this lack of expertise can be your biggest advantage also. There are millions of beginners out there just like you who are trying to figure out different technologies. Writing articles with a beginner's mindset makes it easier for the other beginners to relate to your content since they might also have gone through the same steps and encountered the same problems that you did. &lt;/p&gt;

&lt;p&gt;So every time you're learning something new just write about it, the steps that you followed, and any issues that you encountered. This way you'll not only connect with other beginners like yourself but also get your issues resolved by someone who had the same problems and has resolved them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-your-personality-shine-through-your-articles"&gt;
  &lt;/a&gt;
  Let your personality shine through your articles
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0K-0MvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462633100/kigTT_rp0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0K-0MvZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462633100/kigTT_rp0.jpeg" alt="Standing-out-from-others-cartoon.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Always try to provide a personal tone to your articles instead of copying the theme of an existing article. Being yourself is the best way for your articles to be interesting and unique from the other articles. Nowadays many writers plagiarize technical content and don't even provide proper credits. Just be yourself and try to find your own voice because even if one of your articles blows up, you'll be able to build an audience for yourself and those people will start to notice you for your personality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-your-audience"&gt;
  &lt;/a&gt;
  Understanding your audience
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nma_c1bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461279898/GeVAnV27B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nma_c1bo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632461279898/GeVAnV27B.jpeg" alt="albert-eistein1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the greatest mistakes technical writers make is an improper perception of their audience. An article on advanced React concepts is of no use if a majority of your readers are beginners in React. So, before writing an article always ask yourself some basic questions such as - What does the audience need? Where will they be reading it? When will they read it? ,etc.&lt;/p&gt;

&lt;p&gt;Through this, you shall have a clear idea of whether your audience requires an in-depth article or a short and simple post, whether the article will pertain to beginners, intermediate or expert audiences, and many other aspects that'll help you to frame your entire article. All your articles should convey proper technical facts but more importantly to the proper audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#research"&gt;
  &lt;/a&gt;
  Research
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bI-HAJFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462367337/-bMgzHx26.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bI-HAJFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462367337/-bMgzHx26.jpeg" alt="research.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The backbone of technical writing lies in the research around the topic that you are writing on. Try to understand every minute detail of the topic clearly and before writing an article to explain it to your audience. Lack of proper research and correct technical information is what stops an ordinary writer from becoming extraordinary. &lt;/p&gt;

&lt;p&gt;If you have sound knowledge about the concepts that you want to write on, you can easily break them down into simpler ideas to better explain them to your audience and the only way to do so is through rigorous research. In short, &lt;strong&gt;Google the hell out of things that you want to write about.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-okay-to-not-know"&gt;
  &lt;/a&gt;
  It's okay to not know
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCtCnZUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462333248/UKQQ0jsbi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCtCnZUx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462333248/UKQQ0jsbi.jpeg" alt="clueless.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you might not have all the desired skills required for technical writing and that is totally fine. The most important aspect of technical writing is to start writing even if you might not know certain things. Just start writing because you can always learn other skills on the way. There are a lot of resources that can help you such as technical writing courses, style guides, technical communities, etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proper-reviews"&gt;
  &lt;/a&gt;
  Proper Reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--roRw7ah4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462698585/7u3EyPbY8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roRw7ah4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462698585/7u3EyPbY8.jpeg" alt="review.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reviewing and proofreading are essential tasks that should be performed multiple times before publishing an article online. Don't be in a rush to publish your article after the first draft. If possible take some time off from the article after finishing the first draft and then try to come back for a second look at it. This way you will have a fresh start for your review and you might even notice certain pointers that you didn't notice before. &lt;/p&gt;

&lt;p&gt;Try to fine-tune your article to perfection. However perfect your first draft might seem there are always some changes that you can do. You can even take help from your friends, colleagues, community members to review your draft and provide suggestions. It is always better to publish a properly reviewed article than the first draft.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grammar"&gt;
  &lt;/a&gt;
  Grammar
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nEYecHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462784136/xRg7kXzf2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nEYecHtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632462784136/xRg7kXzf2.jpeg" alt="grammar.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Believe it or not but all great technical articles have one thing in common, "&lt;strong&gt;proper grammar&lt;/strong&gt;". Grammar is the base of an article and improper grammar might lead to falling interest from the readers. However great your technical knowledge and skills might be, if you can't follow basic grammar rules in your write ups, this knowledge is of no use to your audience. Articles with grammatical errors often detract from the message or image the writer is trying to portray. So always pay attention to the grammar in your article and you can even use tools such as Grammarly for your assistance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-be-consistent"&gt;
  &lt;/a&gt;
  Try to be consistent
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lWr73P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463031949/_Gca02fsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0lWr73P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463031949/_Gca02fsp.png" alt="consitent.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://h.daily-dev-tips.com/learn-how-to-come-up-with-article-ideas-and-stay-consistent-cktmign6f042onss1h377cwpd"&gt;Chris Bongers&lt;/a&gt; during his session at Hashnode Bootcamp said that there can be two meanings to being consistent according to him: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Consistency of Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Consistency of efforts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Consistency of time simply means that you are consistent in the time that you spend on writing and publishing articles. Consistency of efforts means that you put in a constant effort in all your articles no matter how the article performs online. Both of these standards correspond to consistent writing. &lt;/p&gt;

&lt;p&gt;Being consistent is a key factor because many writers start with huge excitement and might even publish several articles in the initial phases but then as time passes several factors such as personal problems, work schedule, content not getting traction, etc. might lead to fading away of the excitement and efforts.&lt;/p&gt;

&lt;p&gt;Always try to keep writing despite all other things in your path and try to set some weekly or monthly writing goals to help you remain consistent because readers love to get fresh content and writing might even help you to de-stress yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JM_ob5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463151136/nvJIZICm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM_ob5Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463151136/nvJIZICm2.png" alt="tooling-removebg-preview.png"&gt;&lt;/a&gt;&lt;br&gt;
You might be giving your best efforts but with proper tooling, you can enhance your productivity even further. There is a huge array of tools available for each and every requirement whether it be publishing, authoring, scheduling, image editing, spell-checking, or anything else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.grammarly.com/"&gt;Grammarly &lt;/a&gt; is probably the most used spell-check tool in the world and you can use its features to ensure proper grammar in your articles.  &lt;a href="https://www.notion.so/"&gt;Notion &lt;/a&gt; is another great tool that can be used to keep a list of article ideas, schedules, and even drafts for reviewing. &lt;/p&gt;

&lt;p&gt;The word tooling is not specifically restricted to software tools or apps. Any resource that can assist you in your technical writing journey can be considered a tool. &lt;strong&gt;Writer's groups, blogging communities, discord channels, events, social media&lt;/strong&gt;, etc. are all such tools that might not have a specific set of features for you but they will surely help you enhance your content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphics-and-stats"&gt;
  &lt;/a&gt;
  Graphics and Stats
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7E_oNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463250418/aXYUqmv8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7E_oNPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632463250418/aXYUqmv8l.png" alt="Screenshot 2021-09-23 133333.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphics and visual aids can help your readers to better understand a particular concept. Always try to include proper graphics such as images, illustrations, or videos that are related to the idea that you are focusing on. Visuals appeal more to the audience than written content and if you can have a perfect blend between the two, then you'll surely have better audience retention for your articles. &lt;/p&gt;

&lt;p&gt;While graphics and images enhance the look and feel of your draft, statistics help in building trust and credibility around your technical content. Including properly researched statistics along with the reference to the source is generally considered a good practice especially for technical articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last Words…..
&lt;/h2&gt;

&lt;p&gt;So there you have it! These were some of the tips that will surely help in your technical writing journey.&lt;/p&gt;

&lt;p&gt;Many people think technical writing to be too complex as a profession or even a part-time hobby but the reality is that the complexity of technical writing lies in the writer's mind. Presenting information in a simple and easy to grasp manner is the main focus of technical writing which if followed correctly will automatically drive the audience towards your writeups. So what are you waiting for grab a cup of coffee and get started on that blog post!&lt;/p&gt;

&lt;p&gt;Hope you enjoyed my blog. Thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to comment, share and reach out to me on &lt;a href="https://dev.to/saharshlaud"&gt;Dev.to&lt;/a&gt;,  &lt;a href="https://twitter.com/saharshlaud"&gt;Twitter&lt;/a&gt; , or  &lt;a href="https://in.linkedin.com/in/saharsh-laud"&gt;LinkedIn&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>tips</category>
      <category>beginners</category>
      <category>writing</category>
      <category>community</category>
    </item>
    <item>
      <title>How to make a parser and a filter?</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 11 Oct 2021 13:13:44 +0000</pubDate>
      <link>https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98</link>
      <guid>https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98</guid>
      <description>&lt;p&gt;I've waited to post this on Monday morning because... well, even if you don't like coffee, more than any morning, the start of the week is certainly for "Coffee and Contemplation". &lt;/p&gt;

&lt;p&gt;(I prefer tea, but unfortunately, "Tea and Contemplation" doesn't roll of the tongue.)&lt;/p&gt;

&lt;p&gt;Now that you're &lt;a href="https://en.wikipedia.org/wiki/Priming_(psychology)"&gt;primed&lt;/a&gt;, what am I talking about?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parser"&gt;
  &lt;/a&gt;
  Parser
&lt;/h2&gt;

&lt;p&gt;Parser takes a input (generally text) and transforms it in a data structure that can be used in the following steps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  Filter
&lt;/h2&gt;

&lt;p&gt;Filter is a... filter... that filter things. More enter and less get out. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Anyway...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What can you do if you combine then?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-search-engine"&gt;
  &lt;/a&gt;
  A search engine!
&lt;/h2&gt;

&lt;p&gt;Of course there's a lot more behind the biggest ones you can think, but in essence it's that it.&lt;/p&gt;

&lt;p&gt;From the query you create a structure that the filter consumes, and at the end of the pipeline you have the results you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-you-ever-tried-making-one"&gt;
  &lt;/a&gt;
  Have you ever tried making one?
&lt;/h2&gt;

&lt;p&gt;The easiest thing you can make, and here I'll be using Javascript is something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`your array with data`&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;probably from a input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredDataToReturn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sourceArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I did say the easiest right?&lt;/p&gt;

&lt;p&gt;The "more right" way to do it would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is still really simple.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But far from any search engine&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enters-easyfilter"&gt;
  &lt;/a&gt;
  Enters &lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;EasyFilter&lt;/a&gt;!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJJH01Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clsuczsh9865g5bquou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJJH01Vr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4clsuczsh9865g5bquou.png" alt="EasyFilter print from NPM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes, as you might be realizing now... this is a shamelessly self promotion post... but please, I will teach you how to make your own "EasyFilter"!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;https://www.npmjs.com/package/@noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to get even close to a "real" search engine you have to put in the work, and when you're busy doing other things, you just don't have the time to give your users what they &lt;em&gt;expect&lt;/em&gt; a search input to be: "Google".&lt;/p&gt;

&lt;p&gt;More than just random words, you use quotes and even tag:value pairs... my inspirations were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google / Gmail&lt;/li&gt;
&lt;li&gt;Stackoverflow&lt;/li&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seriously... check their advanced search... there's so much you can filter!&lt;/p&gt;

&lt;p&gt;And with EasyFilter you can simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`search for something "this between quotes" and then here:"you search for this"`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;EasyFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sourceArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will filter just like you expect! It works for single values, quoted values and even values nested inside keys. AND MORE! (Check the documentation!)&lt;/p&gt;

&lt;p&gt;You don't need to settle for the &lt;em&gt;easy&lt;/em&gt;, you can have it be &lt;em&gt;easy&lt;/em&gt; for you and powerful for the users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-one"&gt;
  &lt;/a&gt;
  How do I make one?
&lt;/h2&gt;

&lt;p&gt;For now... check the docs or the source code. 😋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Noriller/easy-filter"&gt;https://github.com/Noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Noriller/easy-filter-parser"&gt;https://github.com/Noriller/easy-filter-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And next week, we start at earnest.&lt;/p&gt;




&lt;p&gt;Also... EasyFilter ended with as just a &lt;em&gt;warming&lt;/em&gt;... &lt;/p&gt;

&lt;p&gt;Let's just say you can wait for the... &lt;em&gt;Sequel&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(If you read the docs, you will understand.)&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCnrDwn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4mb4rl84w85pw4n6v9wt.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="%5Bhttps://unsplash.com/@nate_dumlao?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%5D(https://unsplash.com/@nate_dumlao?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;Nathan Dumlao&lt;/a&gt; on &lt;a href="%5Bhttps://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText%5D(https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>7 javaScript Array methods you should know</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Mon, 11 Oct 2021 13:11:17 +0000</pubDate>
      <link>https://dev.to/mcube25/7-javascript-array-methods-you-should-know-7mf</link>
      <guid>https://dev.to/mcube25/7-javascript-array-methods-you-should-know-7mf</guid>
      <description>&lt;p&gt;Arrays are one of the most common things a programmer uses or is likely to come across in a project. In this regard the array method we are going to look into should come in handy.&lt;br&gt;
 We are going to use a single array for our examples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clubs = [
  { name: "All-stars", fans: 20000 },
  { name: "Bay", fans: 30000 },
  { name: "C-stars", fans: 25000 },
  { name: "D-pillars", fans: 40000 },
  { name: "Clos", fans: 60000 },
  { name: "Magic", fans: 45000 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take a look at this methods and what they do to an array&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter
&lt;/h5&gt;

&lt;p&gt;The filter method is used to filter out or remove all elements from an array that affirms the subject in the proposition logic and they are returned in a new array without altering the original array&lt;br&gt;
for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const filterClub = clubs.filter((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the clubs having fans of less than or equal to 30000 fans are going to be returned to a new array.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rODDNLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136793752-642ffd60-6877-4de0-9f95-655106c33168.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rODDNLeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136793752-642ffd60-6877-4de0-9f95-655106c33168.png" alt="Screenshot (91)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The filter method is a simple method to use.  It returns true or false for each item. If the item is true, it is included in the new array and if it is false it is not included. The filter method does not change the array or object it is being filtered over. This method is convenient because we do not have to worry about the old array being changed when using it subsequently.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map
&lt;/h5&gt;

&lt;p&gt;This method allows the taking of an array and converting it to a new array so that all items in the array are going to look slightly different. Let us say we want to get the names of every clubs in the array sample. We can use the map method for this.&lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const clubNames = clubs.map((item) =&amp;gt; {
  return item.name
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfieuKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794128-9061b13f-9b3b-4f23-ad42-5312a846758e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfieuKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794128-9061b13f-9b3b-4f23-ad42-5312a846758e.png" alt="Screenshot (92)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get a new array that prints out the names of the club in the original array without altering the original array. This is super convenient when you want to get the items in an object or the keys of an object or convert an array from one form to another. It has millions of uses.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#find"&gt;
  &lt;/a&gt;
  find
&lt;/h4&gt;

&lt;p&gt;This method allows a single object to be found in an array of objects. The method takes a single item as a parameter and returns the first item that returns true for the statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const findClub = clubs.find((item) =&amp;gt; {
  return item.name === "All-stars"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2PsTZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794411-39d02d01-230d-4e89-bf1e-fac9de361276.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yo2PsTZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794411-39d02d01-230d-4e89-bf1e-fac9de361276.png" alt="Screenshot (93)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach
&lt;/h5&gt;

&lt;p&gt;This method does not return anything unlike the methods we covered previously. It works very similarly to a forLoop but it takes a function instead and takes a single parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;clubs.forEach((item) =&amp;gt; {
  console.log(item.name);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every single element inside the array, it prints out the names. The method makes working with an array where you have to loop through them much easier so that you don't have to write clunky, long forLoop syntax.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#some"&gt;
  &lt;/a&gt;
  some
&lt;/h5&gt;

&lt;p&gt;This function does not return a brand new array. Instead what it does is to return true or false. We can check if some items in the array affirms or denies the subject in the proposition logic. example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const highestFans = clubs.some((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6i7vWnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794833-9c90bc54-f70f-403d-aecd-629ad492cf30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6i7vWnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136794833-9c90bc54-f70f-403d-aecd-629ad492cf30.png" alt="Screenshot (94)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It checks if any item value returns true and returns the first item that matches the criteria.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#every"&gt;
  &lt;/a&gt;
  every
&lt;/h5&gt;

&lt;p&gt;This method checks if every single item in the array affirms the subject proposition logic and returns true or false&lt;br&gt;
example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const highestFans = clubs.every((item) =&amp;gt; {
  return item.fans &amp;lt;= 30000
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0ENZJYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795110-f3d3b6d8-2c96-4034-9e56-eb550e1e461f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0ENZJYm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795110-f3d3b6d8-2c96-4034-9e56-eb550e1e461f.png" alt="Screenshot (95)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce
&lt;/h5&gt;

&lt;p&gt;This method performs an operation on the array and returns a combination of all the different operations. To get the total of all the fans in our clubs array we use the reduce method in the following way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const totalFans = clubs.reduce((x, item) =&amp;gt; {
  return item.fans + x;
}, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8A_0K8DC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795286-40a8f964-e2b1-4e90-81e7-58e12bdecc42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8A_0K8DC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23004266/136795286-40a8f964-e2b1-4e90-81e7-58e12bdecc42.png" alt="Screenshot (96)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes a property and an item we want the property to be reduced to. It also takes a second parameter which is where we want to start the reduce from. In our case it starts from 0.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 reasons why Frontend Developers love GraphQL</title>
      <author>Luka Kukina</author>
      <pubDate>Mon, 11 Oct 2021 13:09:39 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/5-reasons-why-frontend-developers-love-graphql-16h8</link>
      <guid>https://dev.to/bornfightcompany/5-reasons-why-frontend-developers-love-graphql-16h8</guid>
      <description>&lt;p&gt;Besides creating those beautiful UIs our beloved designers give us, handling complex application logic and component architecture, we as frontend developers work with a lot of data manipulating in the process. In this post I will talk about how can a frontend developer be more productive and have a better developer experience by simply using GraphQL.&lt;/p&gt;

&lt;p&gt;Probably like most developers out there, I used to work with REST APIs and mostly enjoyed it, but recently I've got an opportunity to work with GraphQL and instantly fell in love with it.&lt;br&gt;
Here are the reasons why:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-graphql-has-only-one-endpoint"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1) GraphQL has only one endpoint&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When working with REST APIs, you are surrounded with a lot of endpoints, as their configuration is based on the names of the application’s entities they represent. On top of that, each entity has different methods to manipulate its data (POST, GET, DELETE, PUT, PATCH). All that taken into consideration, &lt;br&gt;
basic REST API will look something like the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TtMxlut1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7yb3nsrklpv8emel9dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TtMxlut1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7yb3nsrklpv8emel9dk.png" alt="REST endpoints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With greater complexity there will be more entities and more specific endpoints/queries...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; 🎉  &lt;strong&gt;GraphQL uses only one endpoint!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;GraphQL server operates on a single URL/endpoint, usually /graphql, and all GraphQL requests for a given service should be directed at this endpoint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#2-graphql-is-self-documenting"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2) GraphQL is self documenting&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Developing big applications, having deadlines, difficult or indecisive clients is a developer's everyday experience and to be honest, sometimes, documenting the APIs isn't the highest priority task. Because of that, developer’s productivity and developer experience (DX) may decrease as more time will be needed to understand what exactly a developer needs, it gets harder to onboard other developers on the project and so on...&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; (again) 🎉  &lt;strong&gt;GraphQL is self documenting!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xH0RLSv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56x4scqtwz1yfs46mb5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xH0RLSv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56x4scqtwz1yfs46mb5k.png" alt="Self documenting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GraphQL documentation will keep frontend developers up to date with all the changes that might happen.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-no-more-underfetchingoverfetching"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3) No more underfetching/overfetching&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;RESTful APIs assume for us which entity's information should be coupled together as a whole. They don't look at the design of the application. &lt;br&gt;
With that said, frontend developers usually get more information than what they need to display on the screen. This is called overfetching. &lt;br&gt;
On the other hand, some screens need a little extra information that we don’t get with only one GET request. This is called underfetching. To overcome this problem, we will make another request to fetch the data we need. &lt;br&gt;
OK, now we overcame that underfetching problem, but remember that we only needed a little more information, so we are now overfetching again (I can smell an infinite loop here 😅).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GraphQL to the rescue&lt;/em&gt; (and again) 🎉  &lt;strong&gt;GraphQL lets us query for the data that we actually need!&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Send a GraphQL query to your API and get exactly what you need, nothing more and nothing less.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL is actually a query language (&lt;strong&gt;Graph&lt;/strong&gt; &lt;strong&gt;Q&lt;/strong&gt;uery &lt;strong&gt;L&lt;/strong&gt;anguage) and it lets us write our own queries. This way we can look at the given design and decide what information we need to fetch. And it is simple too: queries are written in an object-like syntax where you specify the keys and get back the key-value pairs like on image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drT4_vcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crhjswbnu4914mn5nex5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drT4_vcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/crhjswbnu4914mn5nex5.png" alt="GraphQL query"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-graphql-playground"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4) GraphQL playground&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;That brings us to GraphQL playground - GraphiQL. GraphiQL is a powerful tool that lets you test your queries, see the response, check out the documentation, schema and types for the needed fields. Everything is typed and it even helps you with autocomplete as a nice finishing touch.&lt;br&gt;
All you need to do is enable GraphiQL in your backend (BE developer will do that) and enter your only endpoint into URL.&lt;/p&gt;

&lt;p&gt;Example of a free-to-use Rick and Morty API below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d66RGcoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkcv67yncnxtndye04x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d66RGcoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkcv67yncnxtndye04x9.png" alt="Rick and Morty GraphiQL"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-apollo-client"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5) Apollo Client&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Even though Apollo Client is not the part of GraphQL out of the box, it makes the DX much nicer (...and post title: &lt;em&gt;4 reasons why Frontend Developers love GraphQL&lt;/em&gt; wouldn't be as catchy). Apollo Client most importantly provides us with three easy-to-use custom hooks for manipulating the data: &lt;strong&gt;useQuery&lt;/strong&gt;, &lt;strong&gt;useLazyQuery&lt;/strong&gt; and &lt;strong&gt;useMutation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;useQuery&lt;/em&gt; - we use it when we need to fetch the data when the component mounts. It returns an object containing &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any and &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
All you need to pass is a query and options object (if there are variables, anything that needs to be done onCompleted etc.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { loading, error, data } = useQuery(SOME_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;useLazyQuery&lt;/em&gt; - we use it when we need to fetch the data on some event (for example on search button click). It returns an array containing a function to use on some event and an object with &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any, &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [fetchOnSearch, { error, loading, data }] = useLazyQuery(SOME_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; - we use it when we need to mutate the data. It returns an array containing a function to which mutates the data and an object with &lt;strong&gt;data&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt; if any, &lt;strong&gt;loading&lt;/strong&gt; state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [fetchOnSearch, { error, loading, data }] = useMutation(MUTATION_QUERY, options)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;GraphQL was created by Facebook developers and it is used by many big companies which means it is not going anywhere. So, if you are a frontend developer and looking for something new to try out - start with GraphQL, you might fall in love with it! 🥰&lt;/p&gt;

&lt;p&gt;...For more in detail information please check the official &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; and &lt;a href="https://www.apollographql.com/docs/"&gt;Apollo Client&lt;/a&gt; documentations...&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>react</category>
      <category>programming</category>
      <category>engineeringmonday</category>
    </item>
  </channel>
</rss>
