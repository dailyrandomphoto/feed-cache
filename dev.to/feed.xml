<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mood Selector</title>
      <author>Mads Stoumann</author>
      <pubDate>Wed, 07 Jul 2021 14:33:38 +0000</pubDate>
      <link>https://dev.to/madsstoumann/mood-selector-jhi</link>
      <guid>https://dev.to/madsstoumann/mood-selector-jhi</guid>
      <description>&lt;p&gt;Throughout this week, the ‚ÄúStar (rating) Wars‚Äù have run here on dev.to.&lt;/p&gt;

&lt;p&gt;With proposals by &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/lapstjup"&gt;@lapstjup&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/link2twenty"&gt;@link2twenty&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/siddharthshyniben"&gt;@siddharthshyniben&lt;/a&gt;
 and possisble others ‚Äì dev.to has been plastered in ‚ÄúStar Rating‚Äù components!&lt;/p&gt;

&lt;p&gt;My proposal was &lt;a href="https://dev.to/madsstoumann/star-rating-using-a-single-input-i0l"&gt;a single input solution&lt;/a&gt;, allowing for any number of stars, also half- and quarter-stars ‚Äì without adding extra markup.&lt;/p&gt;

&lt;p&gt;All the other solutions use groups of &lt;code&gt;&amp;lt;input type="radio"&amp;gt;&lt;/code&gt;-tags, so I decided to do a component with just that, but not with &lt;strong&gt;stars&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Instead, pick your mood after these dramatic days ‚Äì no JavaScript required:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/QWvNrwq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading üòÅ&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Typing React Props in TypeScript</title>
      <author>Benny Neugebauer</author>
      <pubDate>Wed, 07 Jul 2021 14:31:44 +0000</pubDate>
      <link>https://dev.to/typescripttv/typing-react-props-in-typescript-5hal</link>
      <guid>https://dev.to/typescripttv/typing-react-props-in-typescript-5hal</guid>
      <description>&lt;p&gt;One advantage of using React with TypeScript is that you can easily type the props of your (function) components. You don't have to use React's &lt;a href="//ttps://reactjs.org/docs/typechecking-with-proptypes.html"&gt;PropTypes&lt;/a&gt; because TypeScript already has its own typing system.&lt;/p&gt;

&lt;p&gt;In the following, I will show you how to define custom props for a component in connection with already existing props like &lt;code&gt;children&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-example"&gt;
  &lt;/a&gt;
  Starting Example
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PostPreview.tsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our &lt;code&gt;PostPreview&lt;/code&gt; component has a &lt;code&gt;title&lt;/code&gt; property. The component is supposed to render the &lt;code&gt;title&lt;/code&gt; and other components (&lt;code&gt;children&lt;/code&gt;) below the title. In technical terms this is called &lt;a href="https://reactjs.org/docs/composition-vs-inheritance.html#containment"&gt;Containment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because our &lt;code&gt;Props&lt;/code&gt; interface only defines the title, the following error shows up:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TS2339: Property 'children' does not exist on type 'Props'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me show you three different ways to solve this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-1-raw-propswithchildren-endraw-"&gt;
  &lt;/a&gt;
  Solution 1: &lt;code&gt;PropsWithChildren&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The easiest way to solve the problem is to use the generic type &lt;code&gt;PropsWithChildren&lt;/code&gt;. It supports a &lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html#working-with-generic-type-variables"&gt;generic type variable&lt;/a&gt;, so that we can use our &lt;code&gt;Props&lt;/code&gt; with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The solution is simple, but it doesn't describe our component very well. The compiler knows that our component can have children, but it doesn't know whether our component has other tag-specific properties. We also have to remind ourselves to import React. So let's take a look at a more advanced solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-2-raw-reactfc-endraw-"&gt;
  &lt;/a&gt;
  Solution 2: &lt;code&gt;React.FC&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;React.FC&lt;/code&gt; specifies a &lt;a href="https://reactjs.org/docs/components-and-props.html#function-and-class-components"&gt;function component&lt;/a&gt; and lets us also assign a type variable. It uses &lt;code&gt;PropsWithChildren&lt;/code&gt; behind the scenes, so we don't have to worry about connecting our &lt;code&gt;Props&lt;/code&gt; with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to the use of &lt;code&gt;React.FC&lt;/code&gt;, the TypeScript compiler now knows that our &lt;code&gt;PostPreview&lt;/code&gt; constant is a React component. We no longer have to think about importing React ourselves, as the compiler already prompts us to do so. However, the compiler still does not know how our component looks like in detail. It cannot tell whether it is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element or a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element or something else. Hence we come to solution number three.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-3-raw-reacthtmlprops-endraw-"&gt;
  &lt;/a&gt;
  Solution 3: &lt;code&gt;React.HTMLProps&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The most specialized version is to extend &lt;code&gt;React.HTMLProps&lt;/code&gt;. The &lt;code&gt;HTMLProps&lt;/code&gt; support a variety of tags (&lt;code&gt;HTMLDivElement&lt;/code&gt;, &lt;code&gt;HTMLFormElement&lt;/code&gt;, &lt;code&gt;HTMLInputElement&lt;/code&gt;, etc.). Make sure that the type variable matches the outmost tag (the first tag, that is mentioned after &lt;code&gt;return&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this variant our component inherits all properties of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and extends them with custom props like &lt;code&gt;title&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;PostPreview&lt;/code&gt; component can now be used as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IndexPage.tsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PostPreview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First Post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;#1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Second Post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;#2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tested with: React v17.0.2&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more? üç®
&lt;/h2&gt;

&lt;p&gt;Please subscribe to &lt;a href="https://www.youtube.com/c/typescripttv"&gt;TypeScript TV&lt;/a&gt; on YouTube if you liked this post. &lt;/p&gt;

&lt;p&gt;In addition you can follow me on &lt;strong&gt;DEV&lt;/strong&gt; to learn about best practices with TypeScript &amp;amp; JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Announcing Appwrite 0.9: The open source Firebase alternative </title>
      <author>Christy Jacob</author>
      <pubDate>Wed, 07 Jul 2021 14:27:41 +0000</pubDate>
      <link>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</link>
      <guid>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</guid>
      <description>&lt;p&gt;The last month was a crazy one. We've put together over &lt;strong&gt;250 commits&lt;/strong&gt;, &lt;strong&gt;20k lines of code&lt;/strong&gt; and countless hours to bring you the best Appwrite version ever! With that, we're incredibly excited to announce the release of &lt;strong&gt;Appwrite 0.9&lt;/strong&gt;, packed with a ton of cool new features like &lt;strong&gt;Android support&lt;/strong&gt;, &lt;strong&gt;Kotlin Server SDK&lt;/strong&gt;, &lt;strong&gt;Flutter Desktop Support&lt;/strong&gt;, and much more! Without spending any more time, let's dive in! ü§ø&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. Come hang out with us on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#android-support"&gt;
  &lt;/a&gt;
  ü§ñ Android Support
&lt;/h2&gt;

&lt;p&gt;It's finally here üìå Appwrite now has official support for Android! &lt;a href="https://github.com/appwrite/sdk-for-android"&gt;Our SDK&lt;/a&gt; has been out in the wild for over 2 weeks now - we've gathered some amazing feedback from the community, and we're now ready to present it to all of you! We've got all the setup instructions in our new &lt;a href="https://appwrite.io/docs/getting-started-for-android?"&gt;Getting Started Guide&lt;/a&gt;, but here's what you'll need to do, in a nutshell ü•ú. &lt;/p&gt;

&lt;p&gt;Include the &lt;strong&gt;mavenCentral()&lt;/strong&gt; repository in your project's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
    &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the Android SDK in your app's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-android:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ü§© Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.GlobalScope&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.launch&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Account&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nc"&gt;GlobalScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;      
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-android"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-getstarted-with-android"&gt;Getting Started App&lt;/a&gt; that has interactions with all of Appwrite's endpoints.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-quiz-with-android"&gt;Simple Quiz App&lt;/a&gt; built with Appwrite.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kotlin-server-sdk"&gt;
  &lt;/a&gt;
  ü¶æ Kotlin Server SDK
&lt;/h2&gt;

&lt;p&gt;We also released a brand new &lt;a href="https://github.com/appwrite/sdk-for-kotlin"&gt;Kotlin Server SDK&lt;/a&gt; to go along with the Android one! Setting up the Kotlin SDK is a similar drill. You can check out our &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;Getting Started Guide&lt;/a&gt; or follow along for a quick summary.&lt;/p&gt;

&lt;p&gt;Add the dependency to your &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sdk-for-kotlin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or your &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file if using &lt;strong&gt;Gradle&lt;/strong&gt; as your build system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-kotlin:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üöÄ Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Users&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"919c2d18fb5d4...a2ae413da83346ad2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-kotlin"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;We also have some really cool &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;Cloud Function demos&lt;/a&gt; using our Kotlin SDK. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flutter-desktop-support"&gt;
  &lt;/a&gt;
  üñ•Ô∏è Flutter Desktop Support
&lt;/h2&gt;

&lt;p&gt;With Appwrite 0.9, we've enabled platform wide support for your Flutter Desktop Apps! You can now register your Linux, Windows and Mac apps from the Dashboard! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" alt="Flutter Desktop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-cloud-function-runtimes"&gt;
  &lt;/a&gt;
  üèÉ New Cloud Function Runtimes
&lt;/h2&gt;

&lt;p&gt;Our Cloud Function runtimes list continues to grow with over 20+ (!) runtimes. This time we've added support for &lt;strong&gt;deno-1.10&lt;/strong&gt;, &lt;strong&gt;deno-1.11&lt;/strong&gt;, &lt;strong&gt;dart 2.13&lt;/strong&gt;, &lt;strong&gt;node-16.0&lt;/strong&gt; , &lt;strong&gt;java-11.0&lt;/strong&gt; and &lt;strong&gt;java-16.0&lt;/strong&gt;. We've got you covered üí™ no matter what your favourite language is! If you're looking for some creative ways to get started with Cloud Functions, feel free to check out &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;our demos&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  ‚öíÔ∏è Breaking Changes
&lt;/h2&gt;

&lt;p&gt;Breaking changes are hard, but unfortunately, they're a necessary evil! We've kept those nasty breaking changes to a bare minimum with this release and only made changes to our Server SDKs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt; has been renamed to &lt;code&gt;runtime&lt;/code&gt; in the &lt;code&gt;POST v1/functions&lt;/code&gt; endpoint. If you're using named parameters in your server SDKs, you will need to update them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deleteUser&lt;/code&gt; has been replaced in favour of the &lt;code&gt;delete&lt;/code&gt; method in all our Server SDKs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  üöÄ Everything else
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Our Image Preview üì∏ endpoint now let's you specify a gravity giving you much more control when cropping your images!  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of our community members &lt;a href="https://github.com/Meldiron"&gt;&lt;strong&gt;@Meldiron&lt;/strong&gt;&lt;/a&gt;, helped speed up our Cloud Function executions by upto a &lt;a href="(https://github.com/appwrite/appwrite/pull/1308)"&gt;&lt;strong&gt;whopping 4s ü§Ø&lt;/strong&gt;&lt;/a&gt; in some cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We revamped our &lt;strong&gt;User Sessions UI&lt;/strong&gt; in the Dashboard to give you more fine grained information about a user's session.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" alt="sessions"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We've added some additional metadata in our &lt;strong&gt;File Preview Dialog&lt;/strong&gt; to make it easier to view your file types, file size and the creation date.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" alt="meta-data"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internally, we've optimized our database connection pools for overall improved server performance ü§©&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gone are the days of running multiple migration scripts to upgrade to the latest version of Appwrite! From Appwrite 0.9, it's just a single script! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on popular demand, we've added a &lt;a href=""&gt;new endpoint&lt;/a&gt; to delete a session by ID and another endpoint to force update the user verification status from Server Side SDKs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last but not the least, we've &lt;a href="https://github.com/appwrite/appwrite/pull/1225"&gt;overhauled our Email Templates&lt;/a&gt; in an attempt to offer lot more customization in the future! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's not forget, you also helped us reach a major milestone of &lt;strong&gt;10k Github stars&lt;/strong&gt; ‚≠êÔ∏è making us one of the &lt;strong&gt;top 2000&lt;/strong&gt; projects in Github history! We also crossed a landmark &lt;strong&gt;2.2M Docker pulls&lt;/strong&gt; and &lt;strong&gt;over 40k reads&lt;/strong&gt; on our blog posts! Thank you so much for all your support!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" alt="star"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  üòç And More!
&lt;/h2&gt;

&lt;p&gt;We still haven't covered everything! There's lots more bug fixes and other micro optimizations we made under the hood to make your experience with Appwrite better! To get all the details on Appwrite 0.9, check out all the changes in the &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;changelog on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Are you curious about the big ideas we have up next, or have a great idea for Appwrite's future? Check out the &lt;a href="https://github.com/appwrite/rfc"&gt;RFC Repository&lt;/a&gt; for more details. Also, our &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite repository&lt;/a&gt; keeps growing with new tutorials, videos, and demos.&lt;/p&gt;

&lt;p&gt;If you've just discovered Appwrite and would like to get started, check out out our &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt; series where we explain step-by-step everything you need to know to build awesome Appwrite-powered apps. Follow us on &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find your friendly neighbourhood Appwrite. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>kotlin</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Getting started with GitHub Actions for Rust</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 07 Jul 2021 14:14:45 +0000</pubDate>
      <link>https://dev.to/rogertorres/getting-started-with-github-actions-for-rust-1o6g</link>
      <guid>https://dev.to/rogertorres/getting-started-with-github-actions-for-rust-1o6g</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: Create an Action on GitHub so your code gets built and tested after every push, and do all this with nothing more than a "next-next-finish".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You &lt;em&gt;never&lt;/em&gt; used GitHub Actions and you want do do it with your Rust project; if that's the case, this might help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-and-why-github-actions"&gt;
  &lt;/a&gt;
  What is and Why GitHub Actions?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; automatize software workflow, which &lt;em&gt;per se&lt;/em&gt; is &lt;strong&gt;not&lt;/strong&gt; CI/CD (Continuous Integration/Continuous Delivery), but is used in this method.&lt;/p&gt;

&lt;p&gt;So, which workflow are we going to automatize? Test and build. In other words, this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ssh"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;cargo&lt;/span&gt; test
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="k"&gt;cargo&lt;/span&gt; build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it
&lt;/h2&gt;

&lt;p&gt;First, open your GitHub repository and go to &lt;strong&gt;Actions&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1hDShd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/756h5zscio1kj5ksu6ig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1hDShd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/756h5zscio1kj5ksu6ig.png" alt="GitHub Actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The example is from &lt;a href="https://github.com/rogertorres/mtgsdk"&gt;this repository&lt;/a&gt; that I wrote about &lt;a href="https://dev.to/rogertorres/rest-api-wrapper-with-rust-mk4"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will lead you to this GitHub proposal, which will do exactly what we're set to do here, i.e., build and test:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iPgioco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qawjl7h9op3bi27fjatc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iPgioco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qawjl7h9op3bi27fjatc.png" alt="Workflow proposal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub will preview the &lt;code&gt;.yml&lt;/code&gt; file it will create. For this scope, you don't have to change anything (except  maybe the &lt;code&gt;name&lt;/code&gt; from "Rust" to something else ‚Äî I used "test").&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5k_Q7YXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijt85753h6odw1vk9eqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5k_Q7YXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijt85753h6odw1vk9eqj.png" alt="yml preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commit the change clicking on the button that will appear on the right and the file will be created:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVVIVRoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lncchmvn2svx6068rmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVVIVRoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lncchmvn2svx6068rmn.png" alt="After commit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if you go to &lt;strong&gt;Actions&lt;/strong&gt; again, you will see GitHub creating your &lt;strong&gt;.yml&lt;/strong&gt; file. For me, it took around 2 minutes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuJTRy_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12lw4b8lyl7tr58xdok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuJTRy_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i12lw4b8lyl7tr58xdok.png" alt="Building yml"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slyRzxGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ke1u2hymkr3f00exc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slyRzxGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7ke1u2hymkr3f00exc1.png" alt="yml built"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it. From now on, every time you &lt;code&gt;push&lt;/code&gt; against the repository, GitHub will run the tests for you.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fes2PmCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzgxpvgmedft7zexpacb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fes2PmCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzgxpvgmedft7zexpacb.png" alt="After push"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see the result of the commit above, see the &lt;strong&gt;Build&lt;/strong&gt; log &lt;a href="https://github.com/rogertorres/mtgsdk/runs/2993657655?check_suite_focus=true"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;And that's all for today.&lt;/p&gt;

&lt;p&gt;See ya üôÉ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/photos/BiWM-utpVVc"&gt;Susan Q Yin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>rust</category>
      <category>github</category>
      <category>actions</category>
    </item>
    <item>
      <title>Diving Into DevSecOps (Part 1) w/ John Willis</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 07 Jul 2021 14:06:49 +0000</pubDate>
      <link>https://dev.to/linearb/diving-into-devsecops-part-1-w-john-willis-47ll</link>
      <guid>https://dev.to/linearb/diving-into-devsecops-part-1-w-john-willis-47ll</guid>
      <description>&lt;p&gt;John Willis is a legendary DevOps speaker, mentor and author of &lt;a href="https://www.google.com/search?q=the+devops+handbook&amp;amp;rlz=1C1CHBF_enUS949US949&amp;amp;sxsrf=ALeKk029-roPGTB6J_bWkBb9WvzA5-1z8g:1624995751185&amp;amp;ei=p3fbYI7wCs6m-wSwn7fIBA&amp;amp;start=0&amp;amp;sa=N&amp;amp;ved=2ahUKEwjO34r0zL3xAhVO054KHbDPDUk4ChDy0wN6BQgBEJkB&amp;amp;biw=1920&amp;amp;bih=937"&gt;The DevOps Handbook&lt;/a&gt;. He even helped coin the term DevSecOps.&lt;/p&gt;

&lt;p&gt;But DevSecOps is one of those buzzwords that can mean a lot of things or nothing at all.&lt;/p&gt;

&lt;p&gt;In this special 2-part series of &lt;a href="https://devinterrupted.com/podcast/diving-into-devsecops-part-1/"&gt;Dev Interrupted&lt;/a&gt;, John takes us on a DevSecOps journey from the origin of the term all the way to how software developers at the team level can implement the practice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/06Z0rH2S1zOVKccTpI800f"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What DevSecOps means at the team-level&lt;/li&gt;
&lt;li&gt;First steps for implementing DevSecOps strategies at your organization&lt;/li&gt;
&lt;li&gt;Why it‚Äôs critical to start thinking about security more holistically&lt;/li&gt;
&lt;li&gt;The difference between Security, Compliance, Governance &amp;amp; Risk&lt;/li&gt;
&lt;li&gt;What is coming next for software development security&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devsecops</category>
      <category>devteam</category>
      <category>security</category>
    </item>
    <item>
      <title>State manager of dream</title>
      <author>Slava Birch</author>
      <pubDate>Wed, 07 Jul 2021 14:00:12 +0000</pubDate>
      <link>https://dev.to/betula/state-manager-of-dream-98i</link>
      <guid>https://dev.to/betula/state-manager-of-dream-98i</guid>
      <description>&lt;p&gt;Some time ago during one of my interviews, a potential employer asked me to describe a perfect frontend framework in my wildest dreams. I gave quite a thorough answer explaining how it works, and realized that it actually was a description vaguely resembling the synthesis of React and Angular. My dream was born at that moment!&lt;/p&gt;

&lt;p&gt;Currently, when it comes to all existing frontend frameworks, those widely popular or not, I prefer React since it has a beautiful integration with the typescript. Using JSX as part of a language is really convenient. It offers a lightweight version with perfect compatibility (4 kB Preact instead of 30), with the possibility to inject it on the Webpack level without changes to your codebase. And React is simply a view system without any special solution builder, application architecture, or advanced state management control. That is just awesome!&lt;/p&gt;

&lt;p&gt;As for the organization of application logic, if we don‚Äôt find it in React we can choose one of the existing solutions.&lt;/p&gt;

&lt;p&gt;Redux has the most powerful community in that field. A big set of trusted community-based components are provided to develop a lot of popular types of applications for topical business issues. It enables you to have both a quick start and a quick make.&lt;/p&gt;

&lt;p&gt;Action, Store, and Selector are just great to add an  abstraction layer and allow you to define a way to control your state.&lt;br&gt;
&lt;strong&gt;Actions&lt;/strong&gt; can be possible to use everywhere in your app, the subscription with sagas provides a great mechanism for listening to your app‚Äôs actions and reacting to them.&lt;br&gt;
The &lt;strong&gt;immutable state&lt;/strong&gt; in the store makes your app free from a proxy-based data transformation, and provides a very easy and understandable modification for both simple and nested states.&lt;br&gt;
And &lt;strong&gt;selectors&lt;/strong&gt; that cache parts of your state for performance reasons are useful a lot as well.&lt;/p&gt;

&lt;p&gt;As far as more customizable reactivity goes, the desirable functions are either the possibility to subscribe to selector changes, or description of &lt;strong&gt;several stores&lt;/strong&gt; for modular decomposition. Other options are that you probably want to code the view component &lt;strong&gt;local logic&lt;/strong&gt; in the same way as to control your global app's store, or you want to manage the reactive state that contains not only plain javascript objects and arrays.&lt;/p&gt;

&lt;p&gt;Once similar thoughts have already come to Mobx. This is a totally different way to organize your application logic.&lt;br&gt;
Decomposition of your business issues using the &lt;strong&gt;object-oriented&lt;/strong&gt; technique is a great decision for people who have knowledge in that field. Subscription to the result changes of   of any combinations of values and selectors is really convenient.&lt;br&gt;
Great modular decomposition and transparent reactive programming both sound awesome.&lt;/p&gt;

&lt;p&gt;And on the testy is the &lt;strong&gt;streaming programming&lt;/strong&gt; there is a beautiful pattern that has Rx as the most popular implementation. It offers a &lt;strong&gt;declarative way&lt;/strong&gt; to coding your app‚Äôs actions as chaining configurable objects of reactive streams. It is a perfect instrument for event management.&lt;/p&gt;

&lt;p&gt;Well, in such a way, we can take the most appealing state control techniques, and use them however we want.&lt;/p&gt;

&lt;p&gt;And as a cherry on the cake, I like one more technique which is a &lt;strong&gt;shared stateful logic&lt;/strong&gt; decomposition. Angular implemented it as the service on dependency injection.&lt;/p&gt;

&lt;p&gt;All of the above-mentioned ideas inspired me to combine such really progressive techniques into one implementation for &lt;strong&gt;playing it together&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Stores, actions, selectors, object-oriented support, imperative and declarative styles, reactive streams, and stateful logic availability scopes - all in one, my dream implemented in &lt;a href="https://github.com/betula/realar#readme"&gt;Realar state manager&lt;/a&gt;. This is my pride and result of long, deep, and happy work.&lt;/p&gt;

&lt;p&gt;My work is not only techniques connected together, I have reached an incredibly small size with this functionality. I used a special style of the code, which achieves the maximum compression of the minified code. &lt;strong&gt;5 kB&lt;/strong&gt; for all It‚Äôs a real success story! With Preact you can get a modern frontend environment by 10kB bundle size for all you need)&lt;/p&gt;

&lt;p&gt;I‚Äôm happy after tons of deep coding hours, happy that I can share. Achievement is unlocked))))&lt;/p&gt;

&lt;p&gt;Already &lt;strong&gt;in production&lt;/strong&gt; on the &lt;a href="http://card-of-the-day.com/get-app"&gt;Card of the Day&lt;/a&gt; react native app üëç&lt;/p&gt;

&lt;p&gt;I‚Äôm looking for a sponsor because my hands have already been burning from continuing development non-stop! I want to make a beautiful form framework and a streams framework for nodes, with core on Realar. I would like to start recording teaching videos about all actual questions on the modern frontend field. And I dream of writing an open book. If you know any methods for searching sponsors, or if some of your friends know something, I urge you to tell me in the comments. It will be your great contribution to make a better world!&lt;/p&gt;

&lt;p&gt;Thanks a lot for your attention, and&lt;br&gt;
Happy coding!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/betula"&gt;
        betula
      &lt;/a&gt; / &lt;a href="https://github.com/betula/realar"&gt;
        realar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      5 kB Advanced state manager for React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Realar&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ab89da59043449736b87a767e874641148b728d9a9b55a1a8eeb0dc084b527f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7265616c61723f7374796c653d666c61742d737175617265" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://bundlephobia.com/result?p=realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/062265192a9a2b8cc274d2b070d22cc4dcc7f6f3972a7c464da1850471e21dc6/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f7265616c61723f7374796c653d666c61742d737175617265" alt="npm bundle size"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/betula/realar" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3119c6c3f30e566d884e04c9d754b69e8a0c0eadd7c24c9c2ed82f504f874eea/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6769746875622f626574756c612f7265616c61723f7374796c653d666c61742d737175617265" alt="code coverage"&gt;&lt;/a&gt; &lt;a href="https://raw.githubusercontent.com/betula/realar/master/./src/types.ts"&gt;&lt;img src="https://camo.githubusercontent.com/ae0dc69716122dcf3a64aadb67707d51d81145cc1e654310fcaaa74a38989844/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f74797065732f747970657363726970743f7374796c653d666c61742d737175617265" alt="typescript supported"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Realar state manager targeted to all scale applications &lt;strong&gt;up to complex enterprise&lt;/strong&gt; solutions on a modular architecture. And has an incredible small size &lt;strong&gt;5 kB&lt;/strong&gt; for all you need.&lt;/p&gt;
&lt;h3&gt;
Usage&lt;/h3&gt;
&lt;p&gt;You can make stores and "actions" &lt;sup&gt;&lt;em&gt;&lt;a href="https://runkit.com/betula/60c071ff26dea9001373459c" rel="nofollow"&gt;play on runkit&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;add&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;updater&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;num&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;num&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;inc&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;updater&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And bind to React easily &lt;sup&gt;&lt;em&gt;&lt;a href="https://codesandbox.io/s/realar-readme-second-example-ld0g1?file=/src/App.tsx" rel="nofollow"&gt;play on codesandbox&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;state&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useValue&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;store&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;p&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;state&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt; &lt;span class="pl-c1"&gt;onClick&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s1"&gt;inc&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;button&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;p&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;You can make streams &lt;sup&gt;&lt;em&gt;&lt;a href="https://runkit.com/betula/60c073765105e1001311b294" rel="nofollow"&gt;play on runkit&lt;/a&gt;&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;addendum&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'0'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;pre&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;ev&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-s1"&gt;ev&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;target&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;value&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/betula/realar"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>TypeScript: Getting Started</title>
      <author>Joel P. Mugalu</author>
      <pubDate>Wed, 07 Jul 2021 13:54:43 +0000</pubDate>
      <link>https://dev.to/codingknite/typescript-getting-started-39dm</link>
      <guid>https://dev.to/codingknite/typescript-getting-started-39dm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#typescript-has-taken-the-development-world-by-storm-no-wonder-it-has-over-15-million-weekly-downloads-on-npm-but-what-is-typescript-and-what-do-you-need-to-know-about-it"&gt;
  &lt;/a&gt;
  TypeScript has taken the development world by storm. No wonder it has over 15 million weekly downloads on &lt;a href="https://www.npmjs.com/package/typescript"&gt;npm&lt;/a&gt;. But what is TypeScript, and what do you need to know about it?
&lt;/h3&gt;

&lt;p&gt;In this article, I am going answer those questions. By the end you'll have a grasp of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What TypeScript is&lt;/li&gt;
&lt;li&gt;Main pillars of TypeScript&lt;/li&gt;
&lt;li&gt;Main features of TypeScript&lt;/li&gt;
&lt;li&gt;Why you should use TypeScript&lt;/li&gt;
&lt;li&gt;TypeScript basics to get you started&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, let's address the elephant in the room.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h2&gt;

&lt;p&gt;TypeScript is a programming language built and maintained by Microsoft.&lt;br&gt;&lt;br&gt;
It is a superset of JavaScript that adds strong type checking and is compiled into plain JavaScript code.&lt;/p&gt;

&lt;p&gt;Being a superset means that TypeScript has all the features of JavaScript as well as some additional features.&lt;/p&gt;

&lt;p&gt;TypeScript comes with features such as better development-time tooling, static code analysis, compile-time type checking, and code-level documentation.&lt;/p&gt;

&lt;p&gt;Don't worry if you have no idea what any of this means. I'll explain all of it in this article.&lt;/p&gt;

&lt;p&gt;All these features that come with TypeScript make it the perfect programming language for building large-scale JavaScript applications.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-pillars-of-typescript"&gt;
  &lt;/a&gt;
  Main pillars of TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is built upon three main pillars ‚Äì namely the language, the compiler, and the language service.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-language"&gt;
  &lt;/a&gt;
  TypeScript Language
&lt;/h3&gt;

&lt;p&gt;This consists of the syntax, keywords, and type annotations of TypeScript.&lt;br&gt;&lt;br&gt;
TypeScript syntax is similar to but not the same as JavaScript syntax.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#typescript-compiler"&gt;
  &lt;/a&gt;
  TypeScript Compiler
&lt;/h3&gt;

&lt;p&gt;The compiler is responsible for compiling Typescript code into JavaScript.&lt;br&gt;&lt;br&gt;
In reality, what happens is not actually compiling but transpiling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compiling means that source code is transformed from a human-readable format to a machine-readable format, whereas transpiling is transforming source code from one human-readable format to another human-readable format.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The TypeScript compiler is also responsible for erasing any information related to types at compile time.&lt;/p&gt;

&lt;p&gt;Types are not valid features in JavaScript. And since TypeScript has to be compiled to plain JavaScript, anything related to types has to be erased before it can become valid JavaScript ready to be executed by the browser.&lt;/p&gt;

&lt;p&gt;The TypeScript compiler also performs code analysis. It emits errors and warnings if there's reason to do so.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#language-service"&gt;
  &lt;/a&gt;
  Language Service
&lt;/h3&gt;

&lt;p&gt;The language service is responsible for collecting type information from the source code.&lt;/p&gt;

&lt;p&gt;This information can then be used by development tools to provide IntelliSense, type hints, and refactoring alternatives.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-features-of-typescript"&gt;
  &lt;/a&gt;
  Main Features of TypeScript
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#type-annotations-in-typescript"&gt;
  &lt;/a&gt;
  Type Annotations in TypeScript
&lt;/h3&gt;

&lt;p&gt;Type annotation simply means assigning a type to a variable or function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Happy birthday &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you are now &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old!`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birthdayHero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we define a function that accepts two parameters &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt;. We assign &lt;code&gt;name&lt;/code&gt; to the type &lt;em&gt;string&lt;/em&gt; &lt;code&gt;age&lt;/code&gt; to the type &lt;em&gt;number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can also assign types to the return value of a function. In this case, our function returns a value of the type &lt;em&gt;string&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;birthdayGreeter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;Typescript&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;different&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;ones&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#structural-typing-in-typescript"&gt;
  &lt;/a&gt;
  Structural Typing in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript is a structurally typed language meaning that if two elements have corresponding and identical features then they are considered to be of the same type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference-in-typescript"&gt;
  &lt;/a&gt;
  Type Inference in TypeScript
&lt;/h3&gt;

&lt;p&gt;The TypeScript compiler can attempt to infer the type information if there is no specific type assigned. This means that TypeScript can assign a type to a variable or function based on its initial values or usage.&lt;/p&gt;

&lt;p&gt;Type inference usually happens when you initialize variables, set default values, and determe function return types&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;freeCodeCamp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable platform in the above example is assigned the type &lt;em&gt;string&lt;/em&gt; even though we didn't explicitly do so and the return value of the function &lt;code&gt;add&lt;/code&gt; is inferred the type &lt;em&gt;number&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-erasure-in-typescript"&gt;
  &lt;/a&gt;
  Type Erasure in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript removes the type system constructs during compilation:&lt;/p&gt;

&lt;p&gt;Input&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-use-typescript"&gt;
  &lt;/a&gt;
  Why use TypeScript?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#type-checking-and-static-code-analysis"&gt;
  &lt;/a&gt;
  Type checking and static code analysis
&lt;/h3&gt;

&lt;p&gt;This reduces the overall errors in your code because TS will warn you when you wrongfully use a certain type.&lt;/p&gt;

&lt;p&gt;It also reduces runtime errors and because of static code analysis, TypeScript will throw warnings about typos and such. So this means fewer errors which could potentially mean less testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-annotations-can-act-like-code-documentation"&gt;
  &lt;/a&gt;
  Type annotations can act like code documentation
&lt;/h3&gt;

&lt;p&gt;Type annotations help us to understand what type of arguments a function expects, for example, and what it returns.&lt;/p&gt;

&lt;p&gt;This makes code more readable and makes it easier for others and for us to understand what the code is supposed to do.&lt;/p&gt;

&lt;p&gt;Another advantage of TypeScript is that IDEs can provide more specific and smarter IntelliSense when they know exactly what types of data you are processing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-typescript"&gt;
  &lt;/a&gt;
  How to Get Started with TypeScript
&lt;/h2&gt;

&lt;p&gt;Let's begin by installing the TypeScript package. Here we have two options: we can either install it globally so we can use it on any project in the system, or we can install it to use on the specific project we're working on.&lt;/p&gt;

&lt;p&gt;You can install TypeScript globally by running this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't wish to install globally you can just run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="nx"&gt;typescript&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the local installation, TypeScript is installed as a Dev-dependency because we use it for development. It has to first compile to JavaScript before it can be used in production. The browser can't execute TypeScript.&lt;/p&gt;

&lt;p&gt;After installing TypeScript, we need to initiate a new project. You can do that by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command initiates a new &lt;em&gt;tsconfig.json&lt;/em&gt; file in the root directory of the project. This config file comes with all the configuration options we have for using TypeScript in a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5_S0XfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/05/image1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5_S0XfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2021/05/image1-1.png" alt="an example of a tsconfig file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the compile options for a particular project can be specified in the tsconfig.json file under the &lt;em&gt;compileOptions&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;The file comes with some config options by default but you can add more options to the project as needed. You can comment out or delete unused compiler options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builtin-types-in-typescript"&gt;
  &lt;/a&gt;
  Built-In Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;Typescript comes built-in with all the primitive types in JavaScript like string, number, and boolean.&lt;/p&gt;

&lt;p&gt;The types can then be assigned to variables to specify what data type should be assigned to the variable. This is called type annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript annotations are not always necessary because TypeScript automatically infers the type of a variable based on its initial value or usage. Therefore the following would also be valid TypeScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// myName is inferred type 'string'&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jonathan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays-in-typescript"&gt;
  &lt;/a&gt;
  Arrays in TypeScript
&lt;/h3&gt;

&lt;p&gt;To specify the type of an array you can use the syntax &lt;code&gt;string[]&lt;/code&gt; or &lt;code&gt;number[]&lt;/code&gt;. This effectively means 'array of strings or array of numbers'.&lt;/p&gt;

&lt;p&gt;You'll also see people use the syntax &lt;code&gt;Array&amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt; which means the same thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union-types-in-typescript"&gt;
  &lt;/a&gt;
  Union Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;Union types allow us to define several types that may be assigned to a variable. For this, we use a pipe | to specify the various types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default &lt;code&gt;null | undefined&lt;/code&gt; can be assigned to any variable but TypeScript comes with the &lt;em&gt;strictNullChecks&lt;/em&gt; compiler option which does not allow assigning both to a variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-in-typescript"&gt;
  &lt;/a&gt;
  Functions in TypeScript
&lt;/h3&gt;

&lt;p&gt;Functions can also receive type annotations. However, with TypeScript functions, they can only receive the specified parameters. Nothing more nothing less.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and I'm {age} years old`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function parameters receive normal type annotation.&lt;/p&gt;

&lt;p&gt;TypeScript functions must also specify the return data type. In the case where a function returns nothing, we can use &lt;em&gt;void&lt;/em&gt; type as the return data type.&lt;/p&gt;

&lt;p&gt;We can also use the &lt;code&gt;?&lt;/code&gt; operator to specify &lt;strong&gt;parameters that are optional&lt;/strong&gt;. In this case, Typescript won't complain if the parameter is not passed on the function call.&lt;/p&gt;

&lt;p&gt;We can also assign default values to parameters just like we would in normal JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old. I work as a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that in this example I used the JavaScript &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;arrow function&lt;/a&gt; syntax and specified that the job parameter is optional and assigned a default value 'developer' to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-any-endraw-type-in-typescript"&gt;
  &lt;/a&gt;
  The &lt;code&gt;any&lt;/code&gt; type in TypeScript
&lt;/h3&gt;

&lt;p&gt;In TypeScript, every variable whose type cannot be inferred becomes implicitly the type &lt;em&gt;any&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Any&lt;/code&gt; is typically a wild card type that literally means 'whatever type'. We can also explicitly assign the type &lt;em&gt;any&lt;/em&gt; to a variable.&lt;/p&gt;

&lt;p&gt;However, &lt;code&gt;any&lt;/code&gt; typings are usually considered to be problematic.&lt;/p&gt;

&lt;p&gt;Typescript comes with the &lt;em&gt;noImplicitAny&lt;/em&gt; compiler option which raises an error when we assign the type &lt;em&gt;any&lt;/em&gt; to a variable or expression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-your-own-types-in-typescript"&gt;
  &lt;/a&gt;
  How to Create Your Own Types in TypeScript
&lt;/h3&gt;

&lt;p&gt;TypeScript offers a way for us to define and use our own types for inputs. Here we can describe the exact type that is acceptable for a particular input.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;type&lt;/code&gt; keyword to define our own types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Operator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;Operator&lt;/code&gt; type can accept either of the values. Notice how we use the OR operator &lt;code&gt;|&lt;/code&gt; to create a union type. In this case, any variable assigned the type Operator can accept any of the three values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-example-project"&gt;
  &lt;/a&gt;
  TypeScript Example Project
&lt;/h2&gt;

&lt;p&gt;Let's now use this knowledge to create a simple calculator program. A user can only enter one of three operations - add, multiply, or divide. If you want to, take a moment and try to attempt this then you come back and follow along.&lt;/p&gt;

&lt;p&gt;Hopefully, you tried it on your own. The program may then look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Operation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;multiply&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;divide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;divide&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Operation unknow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to read the above code and see if you can figure out what is going on.&lt;/p&gt;

&lt;p&gt;We can also create custom types using the &lt;code&gt;interface&lt;/code&gt; keyword. Interfaces allow us to define the property and type of an object. An interface can have the ability to extend another interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Manager&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;meeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define an interface Employee which has two properties - &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;, both of which are of the type &lt;em&gt;string&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We then use this interface to create another interface &lt;code&gt;Manager&lt;/code&gt; which has the same properties as the Employee interface but with a meeting method.&lt;/p&gt;

&lt;p&gt;At the outset, I mentioned that Typescript is a structurally typed language. This means that if an element has the same properties as another, they're both of the same types.&lt;/p&gt;

&lt;p&gt;The same is true with interfaces. If an object has the properties of an interface then it has the type of the interface. Such an object can have additional properties as long as some properties match those of the interface.&lt;/p&gt;

&lt;p&gt;We can now use our defined interface such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newEmployee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FrontEnd Developer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far we've seen that we can create our own types using the &lt;em&gt;type&lt;/em&gt; and &lt;em&gt;interface&lt;/em&gt; keywords. But, what is the difference between the two?&lt;/p&gt;

&lt;p&gt;The most notable difference is that defining multiple interfaces with the same name will result in a merged interface. On the other hand, defining multiple types with the same name will result in an error indicating that the name is already declared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Typescript has a lot of features that can't simply be exhausted in this article. I just highlighted a few of the features that may be helpful to understand in order to get started working with it.&lt;/p&gt;

&lt;p&gt;You can learn more about Typescript by reading the &lt;a href="https://www.typescriptlang.org/docs/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you liked this article, consider following me on &lt;a href="https://twitter.com/codingknite"&gt;Twitter&lt;/a&gt; or connecting with me on &lt;a href="https://linkedin.com/in/joelmugalu"&gt;LinkedIn&lt;/a&gt;. I share content about programming and what am learning. Feel free to get in touch or share your thoughts regarding TypeScript in the comment section below.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Insights de carreira - Grupo Alura - Parte 1: Apoio Educacional</title>
      <author>Felipe Moreno Borges</author>
      <pubDate>Wed, 07 Jul 2021 13:51:20 +0000</pubDate>
      <link>https://dev.to/devcapu/insights-de-carreira-grupo-alura-parte-1-apoio-educacional-4af9</link>
      <guid>https://dev.to/devcapu/insights-de-carreira-grupo-alura-parte-1-apoio-educacional-4af9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#sua-linguagem-do-cora%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Sua linguagem do cora√ß√£o
&lt;/h3&gt;

&lt;p&gt;Quando entrei no Grupo Alura eu n√£o tinha nenhuma experi√™ncia de trabalho com programa√ß√£o. Tudo que eu tinha feito eram projetos pessoais e da faculdade. E em todos esses projetos eu usava a mesma linguagem, PHP. O que fazia sentido, era o que eu conhecia at√© aquele momento, apesar de conhecer um pouco de Java, meu conhecimento n√£o era suficiente para entregar um projeto. E tudo que eu precisei fazer at√© aquele momento o PHP resolveu muito bem. &lt;/p&gt;

&lt;p&gt;O problema √© que eu cheguei a acreditar que essa ferramenta era melhor que as outras - um erro muito grande - S√≥ que no final das contas, a sua linguagem de programa√ß√£o √© isso, uma ferramenta. E toda ferramenta se destina a resolver um problema espec√≠fico. Dois anos e meio depois, fica claro que aquela paix√£o pelo PHP era mais uma vis√£o deturpada do que baseada em fatos.&lt;/p&gt;

&lt;p&gt;N√£o me entenda errado, tudo bem gostar de uma linguagem, se poss√≠vel se aprofunde nela. Mas o fato de voc√™ gostar dela, n√£o a torna melhor que outras, uma linguagem s√≥ pode ser melhor que outra se usarmos um filtro bem espec√≠fico (que seria o problema a ser resolvido). E mesmo assim o conceito de "melhor" √© bem abstrato. No fim, n√£o importa se √© Java, PHP, C# ou qualquer que seja a linguagem da moda. O seu cliente n√£o se importa com isso, o problema sendo resolvido de uma forma que de fato agregue valor importa bem mais.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mais-qualidade-do-que-quantidade"&gt;
  &lt;/a&gt;
  Mais qualidade do que quantidade
&lt;/h3&gt;

&lt;p&gt;A princ√≠pio meu trabalho n√£o era escrever c√≥digo - pelo menos n√£o diretamente - era ajudar alunos e alunas com d√∫vidas t√©cnicas e sobre carreira no f√≥rum da comunidade. Assim como qualquer jovem no come√ßo de carreira, eu quis mostrar proatividade, no caso respondendo o m√°ximo de d√∫vidas que eu conseguisse. Paralelo a isso n√≥s t√≠nhamos treinamentos sobre como aprender, passar conhecimento adiante e reconhecer o n√≠vel de conhecimento da pessoa que estava aprendendo com a gente. &lt;/p&gt;

&lt;p&gt;Nesses treinamentos acabei entendendo que algumas pessoas tinham mais dificuldades para entender algum conceito, era preciso um tempo maior com pesquisa e a explica√ß√£o, tempo esse, onde eu n√£o estaria respondendo outras d√∫vidas. E tudo bem! As respostas come√ßaram a ficar mais elaboradas, o passar conhecimento ficou mais claro, e com isso eu n√£o tinha que responder a mesma d√∫vida 3/4 vezes (pelo menos n√£o na maioria dos casos). &lt;/p&gt;

&lt;p&gt;Uma resposta mais elaborada, com mais exemplos e descri√ß√µes aumentavam a qualidade da resposta. No fim, valia mais responder de 30-35 perguntas semanais, de forma mais elaborada do que 50-60 que fosse mais pobre em conte√∫do, a satisfa√ß√£o comigo mesmo era maior tamb√©m.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-ler-erros"&gt;
  &lt;/a&gt;
  Aprenda a ler erros
&lt;/h3&gt;

&lt;p&gt;Tenha um refer√™ncia, de prefer√™ncia que seja a pr√≥pria documenta√ß√£o. √â claro que √© muito f√°cil voc√™ ir at√© um colega de trabalho e tirar a d√∫vida diretamente, mas o bater cabe√ßa √© importante (s√≥ n√£o por muito tempo), seja capaz de procurar, a internet est√° a√≠, StackOverflow, posts, documenta√ß√£o e v√≠deos s√£o seus amigos. &lt;/p&gt;

&lt;p&gt;Quando eu tinha uma d√∫vida n√£o podia recorrer ao f√≥rum da Alura, claro, seria eu que teria que responder depois. Saber procurar, vai te levar al√©m, uma coisa √© certa, em algum momento seu c√≥digo vai quebrar, ler e entender a mensagem de erro j√° √© meio caminho, o resto do caminho √© solucionar.&lt;/p&gt;

&lt;p&gt;A pesquisa por conta pr√≥pria vai te ajudar mesmo que de forma indireta, quando voc√™ ler de novo aquela mesma mensagem de erro, voc√™ vai lembrar de como solucionar, ou pelo menos ter uma ideia de onde pode estar errado, se algu√©m te d√° a resposta toda vez, como voc√™ espera entender e melhorar.&lt;/p&gt;

&lt;p&gt;N√£o estou dizendo que voc√™ n√£o deva procurar ajuda, muito longe disso, na verdade, estou dizendo que antes de pedir ajuda, tente solucionar voc√™ mesmo. At√© porque, como desenvolvedor o seu trabalho √© resolver problemas, ent√£o √© nisso que voc√™ deve ser bom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uma-rotina-de-estudos"&gt;
  &lt;/a&gt;
  Uma rotina de estudos
&lt;/h3&gt;

&lt;p&gt;Novas tecnologias surgem todo dia, sua biblioteca favorita pode ser trocada por outra mais eficiente, mais intuitiva ou que simplesmente esteja no hype. Se o seu trabalho √© solucionar problemas, √© importante que voc√™ estude para resolver eles da forma mais eficiente poss√≠vel. Pegue 30 min do seu hor√°rio de trabalho e estude. Parece pouco, mas no longo prazo vale a pena.&lt;/p&gt;

&lt;p&gt;Como voc√™ vai ver na segunda parte desse post, eu optei por desenvolvimento mobile. Apesar disso, ter estudado sobre desenvolvimento frontend e o b√°sico de como usar o Figma com certeza me ajudaram a como desenvolvedor mobile, seja criando prot√≥tipo (e n√£o tendo que recorrer toda hora aos designers), ou mexendo nas telas de chromecast, que s√£o puramente CSS. Afinal, saber √© melhor que n√£o saber.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#converse"&gt;
  &lt;/a&gt;
  Converse
&lt;/h3&gt;

&lt;p&gt;Converse com pessoas das mais diversas √°reas, n√£o s√≥ do seu time. Conversar com pessoas de marketing, instrutores e comercial me trouxeram v√°rias experi√™ncias incr√≠veis. Conversar com instrutores me fez entender que ningu√©m nasce sabendo, e que ao passar conhecimento, √© umas das melhores formas de aprender, eles tamb√©m t√™m d√∫vidas! √â mais do que o famoso networking, √© conhecer e reconhecer as pessoas independente da √°rea, todos tem algum conhecimento a agregar. &lt;/p&gt;

&lt;p&gt;O time de tecnologia n√£o deveria estar longe do time de opera√ß√£o (que √© um p√©ssimo nome, todos est√£o operando de alguma forma para o produto/servi√ßo a ser entregue). Os times operam entre eles, os times s√£o interdependentes - mesmo que indiretamente - al√©m de insights, conversar com v√°rias pessoas pode te garantir umas boas risadas no bar. E momentos incr√≠veis n√£o tem pre√ßo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foque"&gt;
  &lt;/a&gt;
  Foque
&lt;/h3&gt;

&lt;p&gt;Eu vivi programa√ß√£o antes de ser programador, estudei muito. Em alguns momentos at√© de uma forma exagerada, dias e noites, eu sempre soube qual era a dire√ß√£o, mesmo sem saber o destino. N√£o √© sobre estude enquanto eles dormem, isso n√£o quer dizer nada. Mas a partir do momento que voc√™ souber que √© isso que voc√™ quer, n√£o olhe pra tr√°s, foque na sua carreira. No ensino m√©dio eu deixei de ir em festas pra ir para evento de tecnologia ou pra estudar - e n√£o me arrependo nem um pouco - agora que cheguei no "checkpoint" eu posso curtir mais, ir pra festas (quando a pandemia acabar). Mas naquele momento era necess√°rio o esfor√ßo. Olhe o que √©. importante pra voc√™ nesse momento e fa√ßa&lt;/p&gt;

</description>
      <category>comunidade</category>
      <category>insights</category>
      <category>carreira</category>
    </item>
    <item>
      <title>Improving Horizontal Scroll with CSS Scroll Snap</title>
      <author>Paul Golubkov</author>
      <pubDate>Wed, 07 Jul 2021 13:46:00 +0000</pubDate>
      <link>https://dev.to/paulcodes/improving-vertical-scroll-with-css-scroll-snap-2aea</link>
      <guid>https://dev.to/paulcodes/improving-vertical-scroll-with-css-scroll-snap-2aea</guid>
      <description>&lt;p&gt;The pattern with horizontal scroll is frequently found in mobile versions of sites.&lt;/p&gt;

&lt;p&gt;For example, on Airbnb's home page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klziDyJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625578932305/bcl8gXkXf6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klziDyJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625578932305/bcl8gXkXf6.gif" alt="Airbnb's vertical scroll block example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It looks smooth and the scroll always stops at the beginning of a card, but there are many bad examples on the Internet when the scroll stops in random positions. I'll not provide links to these sites, but I've created a demo for you, please see it on your phone: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/golubkov-p/full/dyWGEKe"&gt;codepen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try to enable and disable CSS Scroll Snap behaviour by toggling the checkbox on top of the page and see a difference when scrolling.  The difference is enormous. When CSS scroll snap is enabled, the scroll behaviour is more smooth and looks like a native app.&lt;/p&gt;

&lt;p&gt;This behaviour is achieved by 2 simple CSS rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.scroll-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-snap-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;mandatory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.scroll-container-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;scroll-snap-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, right? You can read more about CSS Scroll Snap on  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap"&gt;mdn&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browsers-support"&gt;
  &lt;/a&gt;
  Browser's support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQP4NPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625664933009/ZTo8A0hQSf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQP4NPk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625664933009/ZTo8A0hQSf.png" alt="Browser's support table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has nice browser's support and can be used in production. &lt;a href="https://caniuse.com/?search=CSS%20Scroll%20Snap"&gt;Can I Use&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;Thank you for reading! Add your reactions and comments.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/paulcodes_tech"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build a static site in Ruby with Bridgetown</title>
      <author>Felipe Vogel</author>
      <pubDate>Wed, 07 Jul 2021 13:43:04 +0000</pubDate>
      <link>https://dev.to/fpsvogel/build-a-static-site-in-ruby-with-bridgetown-45kg</link>
      <guid>https://dev.to/fpsvogel/build-a-static-site-in-ruby-with-bridgetown-45kg</guid>
      <description>&lt;p&gt;Once upon a time, in ye olden days of 2008, the world saw the release of Jekyll, the first popular static site generator. Fast forward 2+ decades, and its popularity has been eclipsed by newer JavaScript counterparts like Gatsby and Eleventy. And why not? Jekyll runs on Ruby &lt;em&gt;(boo!)&lt;/em&gt; so it is unsexy and &lt;a href="https://css-tricks.com/comparing-static-site-generator-build-times/#jekyll-the-odd-child"&gt;obviously super slow&lt;/a&gt;. (Hint: in that article, read down to where the author notes, "Also surprising is that Jekyll performed faster than Eleventy for every run.")&lt;/p&gt;

&lt;p&gt;Sarcasm aside, Jekyll seems to be built on a solid enough foundation, but unfortunately it has not received a lot of updates in recent years. Is this another arena where, as they say, Ruby is dead?&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://www.bridgetownrb.com/"&gt;Bridgetown&lt;/a&gt;, a fork of Jekyll which aims to compete toe-to-toe with its modern JS cousins, providing even more Ruby tools for building static sites. Very exciting.&lt;/p&gt;

&lt;p&gt;Many of Bridgetown's Ruby upgrades are already released, so I (happy for any chance to write Ruby) rebuilt and extended my blog with Bridgetown. Here's how I did it. Note that these instructions apply to &lt;a href="https://www.bridgetownrb.com/release/embracing-ruby-in-0.21/"&gt;Bridgetown 0.21&lt;/a&gt;, the latest version at the time of writing. Also note that a knowledge of Ruby is assumed here, but not necessarily any prior experience in building a static site.&lt;/p&gt;

&lt;p&gt;You can see the final result of this process in &lt;a href="https://github.com/fpsvogel/blog-2021"&gt;my site's GitHub repo&lt;/a&gt;. The site itself is at &lt;a href="https://fpsvogel.com/"&gt;fpsvogel.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setup"&gt;
  &lt;/a&gt;
  1. Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Follow the steps on Bridgetown's &lt;a href="https://www.bridgetownrb.com/docs/"&gt;Getting Started&lt;/a&gt; page.

&lt;ul&gt;
&lt;li&gt;If you want to use a CSS framework: &lt;a href="https://github.com/whitefusionhq/bulmatown"&gt;Bulmatown&lt;/a&gt; or &lt;a href="https://github.com/bt-rb/bridgetown-theme-bootstrap-blog"&gt;Bootstrap blog theme&lt;/a&gt;. But instead I used a classless CSS framework (see below in "Design").&lt;/li&gt;
&lt;li&gt;If you see strange or missing styling when serving up your site locally, just wait a minute when running &lt;code&gt;yarn start&lt;/code&gt; until the Webpack manifest is generated (you'll be notified in the console when it is generated), then exit and run &lt;code&gt;bridgetown serve&lt;/code&gt;. Note that &lt;code&gt;bridgetown serve&lt;/code&gt; does not generate a Webpack manifest, so use &lt;code&gt;yarn start&lt;/code&gt; or &lt;code&gt;yarn webpack-dev&lt;/code&gt; whenever you see CSS issues and need to regenerate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Install plugins:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/bridgetownrb/bridgetown-seo-tag"&gt;SEO tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayushn21/bridgetown-sitemap"&gt;Sitemap generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bridgetownrb/bridgetown-feed"&gt;Atom feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayushn21/bridgetown-svg-inliner"&gt;SVG inliner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bridgetownrb.com/docs/bundled-configurations#turbo"&gt;Turbo&lt;/a&gt; for quick page transitions without a full reload.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bridgetownrb.com/docs/bundled-configurations#stimulus"&gt;Stimulus&lt;/a&gt; if you need JavaScript sprinkles. (Alternatively you could use LitElement, as explained in &lt;a href="https://www.bridgetownrb.com/docs/components"&gt;the Components doc&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch to the resource content engine.

&lt;ul&gt;
&lt;li&gt;Doc: &lt;a href="https://www.bridgetownrb.com/docs/resources"&gt;Resources&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;bridgetown.config.yml&lt;/code&gt;, add &lt;code&gt;content_engine: resource&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the Liquid templates, change &lt;code&gt;page&lt;/code&gt; to &lt;code&gt;resource&lt;/code&gt;, and access front matter via the &lt;code&gt;data&lt;/code&gt; variable. For example: instead of &lt;code&gt;page.title&lt;/code&gt;, use &lt;code&gt;resource.data.title&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch from Liquid to ERB templating.

&lt;ul&gt;
&lt;li&gt;Doc: &lt;a href="https://www.bridgetownrb.com/docs/erb-and-beyond"&gt;ERB and Beyond&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;bridgetown.config.yml&lt;/code&gt;, add &lt;code&gt;template_engine: erb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Convert the Liquid templates in &lt;code&gt;src/_layouts&lt;/code&gt; and &lt;code&gt;src/_components&lt;/code&gt; to ERB. Then move the templates from &lt;code&gt;_components&lt;/code&gt; into a new &lt;code&gt;src/_partials&lt;/code&gt; directory, and add an underscore to the beginning of each filename, e.g. &lt;code&gt;head.liquid&lt;/code&gt; becomes &lt;code&gt;_head.erb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Convert the Liquid code in &lt;code&gt;posts.md&lt;/code&gt; to ERB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set your preferred permalink style.

&lt;ul&gt;
&lt;li&gt;Docs: &lt;a href="https://www.bridgetownrb.com/docs/structure/permalinks"&gt;Permalinks&lt;/a&gt; and &lt;a href="https://www.bridgetownrb.com/docs/resources#configuring-permalinks"&gt;how they're different with the resource content engine&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set up pagination.

&lt;ul&gt;
&lt;li&gt;Docs: &lt;a href="https://www.bridgetownrb.com/docs/content/pagination"&gt;Pagination&lt;/a&gt; and &lt;a href="https://www.bridgetownrb.com/docs/resources#loops-and-pagination"&gt;how it's different with the resource content engine&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;_posts-drafts/&lt;/code&gt; directory for drafts that will not be published with your other posts. (&lt;a href="https://www.bridgetownrb.com/docs/posts#hiding-in-progress-posts-aka-drafts"&gt;The documented way of doing this&lt;/a&gt; works only for the legacy content engine, but the docs will be updated by the time the resource content engine becomes the default.)&lt;/li&gt;
&lt;li&gt;Set your site's info in &lt;code&gt;src/_data/site_metadata.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add a Pygments CSS theme for code syntax highlighting.

&lt;ul&gt;
&lt;li&gt;Either &lt;a href="https://jwarby.github.io/jekyll-pygments-themes/languages/ruby.html"&gt;download one of the handily premade CSS files&lt;/a&gt;, or &lt;a href="https://pygments.org/demo/#try"&gt;pick from the full list&lt;/a&gt; then &lt;a href="https://stackoverflow.com/a/14989819/4158773"&gt;install Pygments and make it generate a CSS file&lt;/a&gt;. (I picked one of the premade stylesheets and then created a second one to override some of the colors.)&lt;/li&gt;
&lt;li&gt;Place the CSS file in &lt;code&gt;frontend/styles/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Import it into &lt;code&gt;frontend/styles/index.scss&lt;/code&gt;: for example, for Monokai place &lt;code&gt;@import "monokai.css";&lt;/code&gt; near the top of &lt;code&gt;index.scss&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-design"&gt;
  &lt;/a&gt;
  2. Design
&lt;/h2&gt;

&lt;p&gt;As a foundation I used &lt;a href="https://holidaycss.js.org/"&gt;holiday.css&lt;/a&gt;, a classless stylesheet for semantic HTML, and then I &lt;a href="https://dev.to/jaredcwhite/custom-elements-everywhere-for-page-layout-parts-i-and-ii-438p"&gt;extended it with custom elements&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I still used CSS classes wherever a custom element would need to inherit from an element other than &lt;code&gt;span&lt;/code&gt; or &lt;code&gt;div&lt;/code&gt;, because this inheritance can only be set up via JavaScript, and that seems like more trouble than it's worth at this point.&lt;/p&gt;

&lt;p&gt;Occasionally I took a part of a page and abstracted it out into a partial, such as &lt;code&gt;_page_selector.erb&lt;/code&gt; and &lt;code&gt;_tweet_button.erb&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ruby-component-and-plugin"&gt;
  &lt;/a&gt;
  3. Ruby component and plugin
&lt;/h2&gt;

&lt;p&gt;Partials work great for simply sectioning off parts of the page, but for any significant manipulation of data prior to rendering, building a Ruby component makes more sense. In my case, I wanted a "Reading" page that lists titles from my &lt;code&gt;reading.csv&lt;/code&gt; file (my homegrown alternative to Goodreads), including only books that I rated at least a 4 out of 5.&lt;/p&gt;

&lt;p&gt;Following &lt;a href="https://www.bridgetownrb.com/docs/components/ruby"&gt;the doc on Ruby components&lt;/a&gt;, I created a &lt;code&gt;ReadingList&lt;/code&gt; component in &lt;code&gt;_components/reading_list.rb&lt;/code&gt;, and its template &lt;code&gt;_components/reading_list.erb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After writing the HTML + ERB + CSS for the reading list element, I used Stimulus to add JavaScript sprinkles to expand/collapse rows with reading notes or long blurbs, to filter rows by rating or genre, and to sort rows (though sorting is disabled on my site, since I went with the minimal "favorite or not" way of showing ratings).&lt;/p&gt;

&lt;p&gt;Then I filled out &lt;code&gt;reading_list.rb&lt;/code&gt; to load my reading list and provide data for &lt;code&gt;reading_list.erb&lt;/code&gt;. This was just a matter of extracting CSV-parsing code from &lt;a href="https://github.com/fpsvogel/readstat"&gt;a previous app&lt;/a&gt; into a gem, then including it in my component and tying up the loose ends.&lt;/p&gt;

&lt;p&gt;Thanks to a tip (one of many) from the Bridgetown creators on &lt;a href="https://discord.gg/Cugms94QFM"&gt;the Discord server&lt;/a&gt;, I realized my Ruby component had way too much logic in it which should be separated out into a plugin. So I read &lt;a href="https://www.bridgetownrb.com/docs/plugins"&gt;the docs on plugins&lt;/a&gt; and moved nearly all of my component's code into a plugin.&lt;/p&gt;

&lt;p&gt;So now the plugin parses my CSV file and saves it into the site's data, then my component's &lt;code&gt;.rb&lt;/code&gt; file pulls that data into instance variables, then the ERB template uses the instance variables as it displays the reading list.&lt;/p&gt;

&lt;p&gt;If you create a plugin and want to make it more easily available to other Bridgetown site creators, you should &lt;a href="https://www.bridgetownrb.com/docs/plugins#creating-a-gem"&gt;make it into a gem&lt;/a&gt; and possibly create an &lt;a href="https://www.bridgetownrb.com/docs/automations"&gt;automation&lt;/a&gt; for it. I didn't for my reading list plugin, because the intersection of people who track their reading in a CSV file and people who will make a Bridgetown site is‚Ä¶ very few people, I'm sure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-and-beyond"&gt;
  &lt;/a&gt;
  Deployment and beyond
&lt;/h2&gt;

&lt;p&gt;Publishing my site was as simple as &lt;a href="https://www.netlify.com/blog/2016/09/29/a-step-by-step-guide-deploying-on-netlify/"&gt;choosing the GitHub repo on Netlify&lt;/a&gt; and &lt;a href="https://docs.netlify.com/domains-https/custom-domains/"&gt;configuring the custom domain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One possible improvement remains. Currently, to update the reading list I must delete it (&lt;code&gt;_data/reading.yml&lt;/code&gt;) and rebuild the site locally (so that my &lt;code&gt;reading.csv&lt;/code&gt; can be re-parsed) before pushing it to be built and deployed on Netlify. I could avoid these manual steps by taking advantage of the fact that my &lt;code&gt;reading.csv&lt;/code&gt; is automatically synced to Dropbox: I could change my plugin to connect to Dropbox and update the list from there instead of from the copy on my local machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Besides Bridgetown itself, I learned a number of new things in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Semantic HTML.&lt;/li&gt;
&lt;li&gt;More CSS.&lt;/li&gt;
&lt;li&gt;Stimulus, and more JavaScript than I'd written before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what I really loved was using what I &lt;em&gt;already&lt;/em&gt; knew (Ruby) in a completely new way. Bridgetown is doing a wonderful job of bringing the joy of Ruby into the world of modern static site generators.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>jamstack</category>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Quick Introduction to class in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Wed, 07 Jul 2021 13:32:59 +0000</pubDate>
      <link>https://dev.to/guptaaastha/quick-introduction-to-class-in-c-57je</link>
      <guid>https://dev.to/guptaaastha/quick-introduction-to-class-in-c-57je</guid>
      <description>&lt;p&gt;A class is a data type that you define and you can also add some functions that work on this data type. That's it, that is exactly what a class is! Thank you for reading this article and I'll see you in the next one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wait&lt;/strong&gt; . . .&lt;/p&gt;

&lt;p&gt;Above explanation is simple and covers what a class is in as little words as possible but there are more caveats related to it and I'll go over them in this article. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaring-a-class"&gt;
  &lt;/a&gt;
  Declaring a class
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;private:&lt;/span&gt;

      &lt;span class="c1"&gt;// data memebers&lt;/span&gt;
      &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;legs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nl"&gt;public:&lt;/span&gt;
      &lt;span class="c1"&gt;// constructor&lt;/span&gt;
      &lt;span class="n"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sphynx"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;legs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;meow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="c1"&gt;// member function&lt;/span&gt;
      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setLegs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;legs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="c1"&gt;// member function&lt;/span&gt;
      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setBreed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;breed_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;breed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;breed_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#data-members"&gt;
  &lt;/a&gt;
  Data members
&lt;/h4&gt;

&lt;p&gt;What you create of classes are &lt;code&gt;objects&lt;/code&gt;. These &lt;code&gt;objects&lt;/code&gt; have certain properties that can be accessed and these can be defined in the class as &lt;strong&gt;data members&lt;/strong&gt;. For a Table it can be wood type, number of drawers, length, height etc. By creating an object of a table, you can assign values to these properties in accordance with their data types.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A class is a plan, object it's execution &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#member-functions"&gt;
  &lt;/a&gt;
  Member functions
&lt;/h4&gt;

&lt;p&gt;You might want your objects to perform some tasks and for that you write member functions. These functions are like regular functions accept they are only accessible to the object of the class; which means the functions can or can not take parameters, it can or cannot or return something back. Member functions are a powerful and you must use them with caution.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Inheritance&lt;/em&gt; in C++ can be achieved by deriving a class from another class of which access specifiers are an important part. I'll pick these topics up in my future articles. Stay tuned! If you want to read more about classes, head over &lt;a href="https://en.cppreference.com/w/cpp/language/class"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one üòÑ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: This is an article in my series Quick Introduction to a concept in C++. You can find all the articles in this series &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-a-concept-in-c-15n6"&gt;here&lt;/a&gt;. I also answer why I don't use the series feature by &lt;a href="https://dev.to/guptaaastha/"&gt;dev.to&lt;/a&gt; there.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cpp</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>class</category>
    </item>
    <item>
      <title>Art of making satisfying buttons</title>
      <author>Ammadeo</author>
      <pubDate>Wed, 07 Jul 2021 13:28:32 +0000</pubDate>
      <link>https://dev.to/ammadeo/art-of-making-satisfying-buttons-1407</link>
      <guid>https://dev.to/ammadeo/art-of-making-satisfying-buttons-1407</guid>
      <description>&lt;p&gt;There is only one rule of making a satisfying button. When You press it, You need to feel the same as pressing a physical one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-cohesive-3d-space"&gt;
  &lt;/a&gt;
  Create cohesive 3D space
&lt;/h1&gt;

&lt;p&gt;When You create a website, You need to imagine how it looks in 3D space. &lt;em&gt;Why bother?&lt;/em&gt; Because every time You use a shadow, You simulate that the element is either thicker or floating. Understanding 3D will help You fake depth later with CSS. Let's start with shadows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-shadows-feel-real"&gt;
  &lt;/a&gt;
  Make shadows feel real
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksxVJLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vhaiif5rtin15lnc5d7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ksxVJLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vhaiif5rtin15lnc5d7.gif" alt="The button press animation."&gt;&lt;/a&gt;&lt;/p&gt;
Shadows get smaller on the button press.



&lt;p&gt;¬†&lt;br&gt;
Firstly there are no shadows without the light. Ask Yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where is the website's light source?&lt;/li&gt;
&lt;li&gt;How strong is it?&lt;/li&gt;
&lt;li&gt;How diffuse is it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answers for the above will help You decide what shape of shadows You should use and how to animate them. &lt;br&gt;
Besides the light, there is only one more rule to follow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The thicker the button, the longer and more diffuse shadows are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#lets-add-some-shadows"&gt;
  &lt;/a&gt;
  Let's add some shadows
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Use realistic shadows */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make shadows much smaller */&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.06&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
              &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.08&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Learn more about realistic shadows in &lt;a href="https://dev.to/devang/the-master-guide-to-smooth-realistic-shadows-in-css-463p"&gt;The master guide to smooth, realistic shadows in CSS&lt;/a&gt; by Devang Saklani.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#remember-about-perspective"&gt;
  &lt;/a&gt;
  Remember about perspective
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jL8fCicU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lknle562fd0arr26u150.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jL8fCicU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lknle562fd0arr26u150.gif" alt="The button press animation in perspective."&gt;&lt;/a&gt;&lt;/p&gt;
The button gets smaller on press.



&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#firstly-what-is-perspective"&gt;
  &lt;/a&gt;
  Firstly what is perspective?
&lt;/h3&gt;

&lt;p&gt;Simply put, perspective is an optical illusion that makes things further away appear smaller.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#perspective-in-web-design"&gt;
  &lt;/a&gt;
  Perspective in web design
&lt;/h3&gt;

&lt;p&gt;In web design, we need to fake the perspective. To do that, You can make floating elements larger than those below them. In the case of a button, it'll get smaller on press.&lt;br&gt;
That might be enough, but if You want to make perspective more obvious, You may want to show the side of a button. It'll feel like looking at the interface from an angle.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-implement-perspective"&gt;
  &lt;/a&gt;
  How to implement perspective?
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make sure that transform-origin match translate() direction. 
     It makes translate() and scale() work it the same axis */&lt;/span&gt;  
  &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Apply perspective transformation */&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="c"&gt;/* Translate down on Y axis */&lt;/span&gt;
    &lt;span class="n"&gt;translatey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.25em&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="c"&gt;/* Make button smaller */&lt;/span&gt;
    &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.98&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For more insight on perspective, check out &lt;a href="https://www.youtube.com/watch?v=JQ6Ry_yfj80"&gt;Fix Your Perspective&lt;/a&gt; by Matt Kohr.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#make-it-move"&gt;
  &lt;/a&gt;
  Make it move
&lt;/h2&gt;

&lt;p&gt;Bear in mind, adding &lt;code&gt;transition&lt;/code&gt; is not always necessary for small scale transformations. It's like in classic animation. Our mind will fill the gaps. &lt;br&gt;
In the case of buttons, we may use a brief &lt;code&gt;transition&lt;/code&gt; to keep them pressed for a bit longer. It'll help the user to see the impact of clicking it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-add-transition"&gt;
  &lt;/a&gt;
  How to add transition?
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add short transition with a delay 
     This transition will control second half of the animation */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="m"&gt;10ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt; &lt;span class="m"&gt;10ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* On button press */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Add short transition
     This transition will control first half of the animation */&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;50ms&lt;/span&gt; &lt;span class="n"&gt;ease-in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For the best guide on animation ‚Äî check out &lt;a href="https://youtu.be/uDqjIdI4bF4"&gt;12 Principles of Animation&lt;/a&gt; by Frank Thomas &amp;amp; Ollie Johnston.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-see-the-implementation"&gt;
  &lt;/a&gt;
  Let's see the implementation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ammadeo/embed/rNyEmbL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-last-tip"&gt;
  &lt;/a&gt;
  One last tip
&lt;/h1&gt;

&lt;p&gt;To optically centre a button's content, try moving it up a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Make bottom padding slightly larger */&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.05rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#challenge-for-you"&gt;
  &lt;/a&gt;
  Challenge for You
&lt;/h1&gt;

&lt;p&gt;Go and press some buttons around You. &lt;em&gt;For science!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>design</category>
    </item>
  </channel>
</rss>
