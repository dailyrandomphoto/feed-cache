<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create React App - Mind Map. Part 7 of 10: Chart</title>
      <author>101samovar</author>
      <pubDate>Mon, 03 Jan 2022 08:33:50 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-chart-1cbf</link>
      <guid>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-chart-1cbf</guid>
      <description>&lt;p&gt;The Chart is the most interesting part of the MindMap App.&lt;br&gt;
Let’s create a separate component for the chart.&lt;br&gt;
A functional component.&lt;br&gt;
And the chart.module.css file for the styling.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/6xU9vmADJkI"&gt;https://youtu.be/6xU9vmADJkI&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A11y tips: what is ARIA and when to use it</title>
      <author>Carlos Espada</author>
      <pubDate>Mon, 03 Jan 2022 08:03:20 +0000</pubDate>
      <link>https://dev.to/carlosespada/a11y-tips-what-is-aria-and-when-to-use-it-2ncd</link>
      <guid>https://dev.to/carlosespada/a11y-tips-what-is-aria-and-when-to-use-it-2ncd</guid>
      <description>&lt;p&gt;ARIA stands for &lt;a href="https://www.w3.org/TR/using-aria/"&gt;Accessible Rich Internet Applications&lt;/a&gt;, and consists of a &lt;strong&gt;set of attributes and values ​​that are added to HTML tags to offer extra information to assistive technologies&lt;/strong&gt; and thus improve their experience. It is about communicating what happens on a page, what it means and how you can interact with it.&lt;/p&gt;

&lt;p&gt;And when might it be necessary to use ARIA? Only in these cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the feature is available in HTML but it is not implemented, or it is implemented but &lt;a href="https://www.html5accessibility.com/"&gt;accessibility support&lt;/a&gt; is not.&lt;/li&gt;
&lt;li&gt;If the feature is not currently available in HTML.&lt;/li&gt;
&lt;li&gt;If the visual design constraints rule out the use of a particular native element, because the element cannot be styled as required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, &lt;strong&gt;ARIA should never be used to fix meaningless or incorrect HTML or to rewrite behaviors&lt;/strong&gt; that already come natively in the browser using less suitable ones with added ARIA roles.&lt;/p&gt;

&lt;p&gt;A very common example might be trying to emulate a button using a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with ARIA attributes. &lt;strong&gt;Don't do it&lt;/strong&gt;. Use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, it will always be the best option no matter how hard you try to imitate it.&lt;/p&gt;

&lt;p&gt;Remember: the &lt;a href="https://www.w3.org/TR/using-aria/#rule1"&gt;first rule of ARIA&lt;/a&gt; is &lt;strong&gt;"Don't use ARIA"&lt;/strong&gt;. The less it is used, the better. Try to solve your problems first using what very capable people have thought before, working on our technologies for years.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>tips</category>
      <category>html</category>
    </item>
    <item>
      <title>React Component Testing</title>
      <author>Dylan Oh</author>
      <pubDate>Mon, 03 Jan 2022 08:02:43 +0000</pubDate>
      <link>https://dev.to/ohdylan/react-component-testing-54ie</link>
      <guid>https://dev.to/ohdylan/react-component-testing-54ie</guid>
      <description>&lt;p&gt;In our last article, we have introduced the usage of Jest to test our JavaScript code &lt;a href="https://dev.to/ohdylan/start-testing-your-javascript-codes-with-jest-2gfm"&gt;Start Testing Your JavaScript Code with Jest&lt;/a&gt;. We are going to further extend the topic to introduce how do we use React Testing Library and Jest to test our React components.&lt;/p&gt;

&lt;p&gt;React Testing Library and Jest are provided out-of-the-box support with &lt;code&gt;create-react-app&lt;/code&gt; and we do not need to install them separately. React Testing Library (RTL) is built on top of the DOM testing library, as in the tests will work with the actual DOM. This allows the tests to simulate the ways that users will interact with DOM, as closer as possible. It is super easy to use, provides an array of assertion methods (extended from Jest), user-events simulation and etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;create-react-app&lt;/code&gt; uses Jest as its test runner. Jest will look for the test files name with the following naming conventions (according to official site):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files with .js suffix in __tests__ folders.&lt;/li&gt;
&lt;li&gt;Files with .test.js suffix.&lt;/li&gt;
&lt;li&gt;Files with .spec.js suffix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today we are going to explore how render our components to be tested, finding the right element in the component, and performing snapshot testing. Let's get started with creating a new &lt;code&gt;create-react-app&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app testing-react-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the creation, change directory into the app that you created and open the directory in your desired code editor.&lt;/p&gt;

&lt;p&gt;You should already see an &lt;em&gt;App.test.js&lt;/em&gt; in the &lt;em&gt;src&lt;/em&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may remove this file, or leave it. I will remove it for this demonstration and therefore you will not see it being included in the test suites.&lt;/p&gt;

&lt;p&gt;What I will normally do next is that I will create a &lt;em&gt;components&lt;/em&gt; folder and include the files (such as css and test files) that belong to this component inside this folder. After created &lt;em&gt;components&lt;/em&gt; folder, create two more folders called &lt;em&gt;SubscribeForm&lt;/em&gt; and &lt;em&gt;PokeSearch&lt;/em&gt;. These are the two components that we want to write some tests on today.&lt;/p&gt;

&lt;p&gt;Let's create our first simple component in SubscribeForm folder:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;SubscribeForm.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./SubscribeForm.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDisabled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setIsDisabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Our&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="nx"&gt;Address&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;agree&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;disagree&lt;/span&gt; &lt;span class="nx"&gt;whatever&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;terms&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;conditions&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isDisabled&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subscribe&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple component, where we have an input field for email address, and a button to hit "subscribe". The button is first disabled and prevent clicking before any text is entered to the input field. This button seems to be one of the perfect test cases that we can create. &lt;/p&gt;

&lt;p&gt;Button is disabled before text input&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yYea06O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6in3pzfg9inj9ad9ppzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yYea06O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6in3pzfg9inj9ad9ppzm.png" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Button is enabled after text input&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hkRP1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aph4hh50lb2vrjpzpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_hkRP1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9aph4hh50lb2vrjpzpn.png" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Followed by this, we are going to create another component called PokeSearch (I am not a Pokemon fan, but Poke API is good for demonstration). As another simple enough example, we have a component that has a useEffect hook to fetch information from an API, and display it (Pokemon name) to the screen. Before the result is fetched, we display a "...Loading..." text to users. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;PokeSearch.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPokemon&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://pokeapi.co/api/v2/pokemon/bulbasaur`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setPokemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's jump into testing these two components. For our first component, SubscribeForm component, we create a new file called &lt;em&gt;SubscribeForm.test.js&lt;/em&gt;. We followed the naming convention, so that it could be recognized by our test runner. In order to create tests, we will need &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt; from &lt;em&gt;testing-library/react&lt;/em&gt; and the user events from &lt;em&gt;testing-library/user-event&lt;/em&gt;. Besides, remember to import the component that we want to test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SubscribeForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can first create a test to ensure that our button is disabled when the page first loaded, since there is no input in the email address field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button is disabled before typing anything in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the last article, we know that we will give a name to our test, and provide a callback function, which includes the assertions. &lt;/p&gt;

&lt;p&gt;First, we use render method to render the component to be tested in a container which is appended to document.body (on a side note, Jest 26 and before is using jsdom as default environment). After rendering out the component, we need to have a way to find the right element (which is the button) to test. We can use query methods from RTL to do so. The elements in DOM can be found by their accessibility roles and names (more on this later), or by text, or by test id that we give to the elements. There is a priority given by official statements. They recommend to query by role or text (where everyone is accessible), by semantic HTML (alt text such as img, area, etc), and by test id (user cannot see or hear this, therefore if you could not make sense of using any of previous methods, use this).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-testid=&lt;/span&gt;&lt;span class="s"&gt;"test-element"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information about the priority here: &lt;br&gt;
(About Queries of React Testing Library)[&lt;a href="https://testing-library.com/docs/queries/about#priority"&gt;https://testing-library.com/docs/queries/about#priority&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;You can do this to find out the accessible roles within your component: You can just write &lt;code&gt;screen.getByRole("")&lt;/code&gt; in the test for that component, it will fail but give you the accessibility information and the name of those elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Here&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;accessible&lt;/span&gt; &lt;span class="nx"&gt;roles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subscribe To Our Newsletter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;textbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;checkbox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I agree to disagree whatever the terms and conditions are.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;agreement_checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;Name&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subscribe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subscribe-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class="o"&gt;--------------------------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here we know that we have different accessibility roles such as button, textbox, checkbox and heading. In order to target our subscribe button, we need to target role "button". After targeting the role, we want specifically the button with the accessible name "Subscribe", as stated in the accessibility information provided ('Name "Subscribe"'). This value of "Name" can be derived from visible or invisible property of an element, the text in the button is one of them. In order to search for its name, we usually put insensitive case for regex on the name, into the second object argument of getByRole (&lt;code&gt;{name: /subscribe/i}&lt;/code&gt;). After getting that button, we want to check if this button is disabled (it should be disabled). &lt;/p&gt;

&lt;p&gt;Then we have the second test. In this test, we simulate the user event to type something in the text box, and make the button enabled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button becomes enabled when we start typing in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/email/i&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the same step to render the SubscribeForm to the document, and use user event of "type", to type some text on the element that we want, in this case, it is the textbox that we can select by accessible role and name (refer back to the accessibility information that we took just now). The second argument of &lt;code&gt;userEvent.type()&lt;/code&gt; is the text that you want to input. After the text has been typed, we can now expect the button to be enabled.&lt;/p&gt;

&lt;p&gt;Finally, we are doing a snapshot testing for our React componenet. We need to use react-test-renderer to render a pure JavaScript object (does not depend on DOM) for the snapshot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-test-renderer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing and importing, we can use the renderer to create SubscribeForm component in JavaScript Object. Finally, we use a toMatchSnapshot() function from Jest, to kickstart the snapshot testing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this test for the first time, it will create a new  folder (automatically after you run the test), called &lt;em&gt;__snapshots__&lt;/em&gt; within your directory, in this case is the SubscribeForm folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;written&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;2.519&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMlMZnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2lzeq6cif2pzwkja1x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMlMZnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2lzeq6cif2pzwkja1x1.png" alt="Image description" width="239" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a snap document in it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;SubscribeForm.test.js.snap&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Jest Snapshot v1, https://goo.gl/fbAQLP&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Test to match snapshot of component 1`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
&amp;lt;div
  className="container"
&amp;gt;
  &amp;lt;h1&amp;gt;
    Subscribe To Our Newsletter
  &amp;lt;/h1&amp;gt;
  &amp;lt;form
    className="form"
  &amp;gt;
    &amp;lt;label
      htmlFor="email"
    &amp;gt;
      Email Address
    &amp;lt;/label&amp;gt;
    &amp;lt;input
      id="email"
      name="email"
      onChange={[Function]}
      placeholder="Email Address"
      type="email"
      value=""
    /&amp;gt;
    &amp;lt;input
      id="agreement_checkbox"
      name="agreement_checkbox"
      type="checkbox"
    /&amp;gt;
    &amp;lt;label
      htmlFor="agreement_checkbox"
    &amp;gt;
      I agree to disagree whatever the terms and conditions are.
    &amp;lt;/label&amp;gt;
    &amp;lt;button
      className="button"
      disabled={true}
      name="subscribe-button"
      type="submit"
    &amp;gt;
      Subscribe
    &amp;lt;/button&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the test suite take note of your previous snapshot of the component. If you run the test again, it will take another snapshot of the compoenent, and compare to the one in &lt;em&gt;__snapshots__&lt;/em&gt; folder. If they are different, the test is going to fail. This is useful to make sure that our UI components did not get changed unexpectedly. Let's try to make a change to our SubscribeForm component and run the test again. We are going to change "Subscribe to Our Newsletter" to "Subscribe to Their Newsletter".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Subscribe To Their Newsletter&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we run the test again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;FAIL&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Test to match snapshot of component 1`&lt;/span&gt;

    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Snapshot&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Received&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="p"&gt;@@&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;@@&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;     &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Our&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;
    &lt;span class="o"&gt;+&lt;/span&gt;     &lt;span class="nx"&gt;Subscribe&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;Their&lt;/span&gt; &lt;span class="nx"&gt;Newsletter&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;

      &lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="o"&gt;|&lt;/span&gt;                               &lt;span class="o"&gt;^&lt;/span&gt;
      &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;anonymous&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Inspect&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;press&lt;/span&gt; &lt;span class="s2"&gt;`u`&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;3.817&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and the test failed. If this is an intended change, we can update our snapshot to the latest by pressing "u". By doing that, the snap file in our &lt;em&gt;__snapshots__&lt;/em&gt; folder will get updated, all the tests are re-run and they pass this time. This is pretty similar to what we used (Enzyme library) last time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Snapshot&lt;/span&gt; &lt;span class="nx"&gt;Summary&lt;/span&gt;
 &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;2.504&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;span class="nx"&gt;Ran&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Watch&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Press&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore, this is the complete script to test our SubscribeForm component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-test-renderer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./SubscribeForm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button is disabled before typing anything in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The subscribe button becomes enabled when we start typing in the input text box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;textbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/email/i&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/subscribe/i&lt;/span&gt;&lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test to match snapshot of component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SubscribeForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscribeFormTree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note to mention: There is a clean up process (&lt;code&gt;afterEach(cleanup)&lt;/code&gt;) done to prevent memory leak automatically by Jest (injected globally) after each test.&lt;/p&gt;

&lt;p&gt;Finally, we would also like to test our component asynchronously (PokeSearch).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;waitForElementToBeRemoved&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PokeSearch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading is shown until the Pokemon is fetched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitForElementToBeRemoved&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;...Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we can test if the "...Loading..." text is rendered correctly to the screen. We need to query on the correct element that contains "...Loading...", and use assertion method to check if it is in the DOM. Then we can use an asynchronous function provided by RTL to be resolved by the loading text element to disappear after the result is fetched. Besides, it is also recommended by official site to use &lt;code&gt;queryBy...&lt;/code&gt; to query for the element to disappear from DOM.&lt;/p&gt;

&lt;p&gt;After testing the Loading text, we can then test the case after fetched. In this test case, we do not want to test with the real API (we are just ensuring that our component is working fine), there we can just mock the fetch function. We fix the returned data by the fetch function when the promise is resolved. After that, we will render the PokeSearch, and the fetch call is made to fetch our fake data. After the data is back, we will try to use &lt;code&gt;findBy...&lt;/code&gt; (use &lt;code&gt;findBy...&lt;/code&gt; for asynchronous case) to find for the element that has text "bulbasaur", and check if the element is in the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Pokemon name is displayed correctly after it has been fetched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Mock the browser fetch function&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemon&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PokeSearch&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pokemonName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bulbasaur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pokemonName&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this gives you an insight on how do get started on testing React components.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do follow me for more future articles on web design, programming and self-improvement 😊&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Fiber Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:20:12 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-fiber-version-4la0</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-fiber-version-4la0</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt; framework and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure a Fiber application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Fiber is an &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; inspired HTTP web framework written in Golang with performance and zero memory allocation support. Fiber is built on top of &lt;a href="https://github.com/valyala/fasthttp"&gt;Fasthttp&lt;/a&gt;, an HTTP engine written in Golang.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this &lt;a href="https://github.com/Mr-Malomz/fiber-mongo-api"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir fiber-mongo-api &amp;amp;&amp;amp; cd fiber-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a  &lt;code&gt;fiber-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init fiber-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/gofiber/fiber/v2 go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/gofiber/fiber/v2&lt;/code&gt; is a framework for building web application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;

&lt;p&gt;After installing the required dependencies, we might get &lt;code&gt;github.com/klauspost/compress is not in your go.mod filego mod tidy&lt;/code&gt; error in &lt;code&gt;go.mod&lt;/code&gt; file. To fix this, we need to manually install the required package with&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/klauspost/compress
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize a Fiber application using the &lt;code&gt;New&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Get&lt;/code&gt; function to route to &lt;code&gt;/&lt;/code&gt; path and an handler function that returns a JSON of &lt;code&gt;Hello from Fiber &amp;amp; mongoDB&lt;/code&gt;. &lt;code&gt;fiber.Map&lt;/code&gt; is a shortcut for &lt;code&gt;map[string]interface{}&lt;/code&gt;, useful for JSON returns.&lt;/li&gt;
&lt;li&gt;Set the application to listen on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7kRNk88H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640616832121_Screenshot%2B2021-12-27%2Bat%2B15.39.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kRNk88H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640616832121_Screenshot%2B2021-12-27%2Bat%2B15.39.28.png" alt="Testing the app" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldI5sqIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640618264604_Screenshot%2B2021-12-27%2Bat%2B16.17.26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldI5sqIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640618264604_Screenshot%2B2021-12-27%2Bat%2B16.17.26.png" alt="Updated project folder structure" width="536" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oPdbnQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640646363920_Screenshot%2B2021-12-28%2Bat%2B00.05.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oPdbnQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640646363920_Screenshot%2B2021-12-28%2Bat%2B00.05.44.png" alt="Updated folder structure with .env file" width="536" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type,  a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XapHbJmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640678631468_Screenshot%2B2021-12-28%2Bat%2B00.18.21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XapHbJmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640678631468_Screenshot%2B2021-12-28%2Bat%2B00.18.21.png" alt="terminal output" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure a Fiber application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gofiber/fiber"&gt;Fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>fiber</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Echo Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:19:19 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-echo-version-2gdg</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-echo-version-2gdg</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt; framework and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure an Echo application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Echo is a Golang-based HTTP web framework with high performance and extensibility. It supports optimized routing, middlewares, templating, data binding and rendering.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this repository.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir echo-mongo-api &amp;amp;&amp;amp; cd echo-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates an  &lt;code&gt;echo-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init echo-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/labstack/echo/v4 go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/labstack/echo/v4&lt;/code&gt; is a framework for building web application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize an Echo application using the &lt;code&gt;New&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Get&lt;/code&gt; function to route to &lt;code&gt;/&lt;/code&gt; path and an handler function that returns a JSON of &lt;code&gt;Hello from Echo &amp;amp; mongoDB&lt;/code&gt;. &lt;code&gt;echo.Map&lt;/code&gt; is a shortcut for &lt;code&gt;map[string]interface{}&lt;/code&gt;, useful for JSON returns.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Start&lt;/code&gt; function to run the application on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cahN6G2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705723363_Screenshot%2B2021-12-28%2Bat%2B16.35.05.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cahN6G2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705723363_Screenshot%2B2021-12-28%2Bat%2B16.35.05.png" alt="Testing the app" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lmwWHJna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705978931_Screenshot%2B2021-12-28%2Bat%2B16.37.13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lmwWHJna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640705978931_Screenshot%2B2021-12-28%2Bat%2B16.37.13.png" alt="Updated project folder structure" width="540" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7D0z3uHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640706662816_Screenshot%2B2021-12-28%2Bat%2B16.50.46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7D0z3uHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640706662816_Screenshot%2B2021-12-28%2Bat%2B16.50.46.png" alt="Updated folder structure with .env file" width="540" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
  

&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns an &lt;code&gt;error&lt;/code&gt;. Inside the function, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type,  a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpweAjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640726048122_Screenshot%2B2021-12-28%2Bat%2B17.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpweAjRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_59B4FB0BF7F93F4C93C0A682D6A687630719B407B5DC5D5F5AA486DD3C2044DE_1640726048122_Screenshot%2B2021-12-28%2Bat%2B17.03.40.png" alt="terminal output" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNE3SHSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_97A8BAFA9C176AA31F7FC2C18065AA1FE2F74B0C6537A26A8D511A9956341968_1640692844347_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure an Echo application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/labstack/echo"&gt;Echo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>echo</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Gorilla/Mux Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:18:24 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gorillamux-version-57fh</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gorillamux-version-57fh</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/gorilla/mux"&gt;Mux&lt;/a&gt; package and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure a Mux application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Gorilla/Mux, popularly known as &lt;strong&gt;Mux&lt;/strong&gt;, is a powerful HTTP router and URL matcher for building Go web servers.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this &lt;a href="https://github.com/Mr-Malomz/mux-mongo-api"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir mux-mongo-api &amp;amp;&amp;amp; cd mux-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a  &lt;code&gt;mux-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init mux-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/gorilla/mux go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/gorilla/mux&lt;/code&gt; is a package for building web servers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variable.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize a Mux router using the &lt;code&gt;NewRouter&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;HandleFunc&lt;/code&gt; function that uses &lt;code&gt;net/http&lt;/code&gt; package as parameters to route to &lt;code&gt;/&lt;/code&gt; path and a handler function that sets the header type to a &lt;strong&gt;JSON&lt;/strong&gt; and returns a JSON of &lt;code&gt;Hello from Mux &amp;amp; mongoDB&lt;/code&gt; using the &lt;code&gt;encoding/json&lt;/code&gt; package. We also attached the HTTP method to this function &lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;http.ListenAndServe&lt;/code&gt; function to run the application on port &lt;code&gt;6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ccutaY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640683931465_Screenshot%2B2021-12-28%2Bat%2B10.15.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ccutaY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640683931465_Screenshot%2B2021-12-28%2Bat%2B10.15.17.png" alt="Testing the app" width="880" height="712"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-W77t-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640684172740_Screenshot%2B2021-12-28%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-W77t-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640684172740_Screenshot%2B2021-12-28%2Bat%2B10.35.59.png" alt="Updated project folder structure" width="536" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5coi5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640685273552_Screenshot%2B2021-12-28%2Bat%2B10.54.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5coi5Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640685273552_Screenshot%2B2021-12-28%2Bat%2B10.54.15.png" alt="Updated folder structure with .env file" width="536" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as&lt;/em&gt; &lt;strong&gt;&lt;em&gt;struct tags&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Fiber to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns a &lt;code&gt;net/http&lt;/code&gt; handler. Inside the returned handler, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w.WriteHeader&lt;/code&gt; function is used for setting the API status code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;json.NewDecoder&lt;/code&gt; ‘s &lt;code&gt;Decode&lt;/code&gt; and &lt;code&gt;Encode&lt;/code&gt; methods are used to convert  &lt;strong&gt;JSON&lt;/strong&gt; into a &lt;strong&gt;Go&lt;/strong&gt; value and vice-versa.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns a &lt;code&gt;net/http&lt;/code&gt; handler. Inside the returned handler, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type, a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully  deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QS5uM2Az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640698765987_Screenshot%2B2021-12-28%2Bat%2B10.58.17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QS5uM2Az--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_BC8769862BCEA31F821440B3676C5166FE78EC8D4A79B5249E1EA1C793C15DDC_1640698765987_Screenshot%2B2021-12-28%2Bat%2B10.58.17.png" alt="terminal output" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure a Gin-gonic application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gorilla/mux"&gt;Gorilla/Mux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>mux</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Build a REST API with Golang and MongoDB - Gin-gonic Version</title>
      <author>Demola Malomo</author>
      <pubDate>Mon, 03 Jan 2022 07:17:04 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gin-gonic-version-269m</link>
      <guid>https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-gin-gonic-version-269m</guid>
      <description>&lt;p&gt;Representational state transfer (REST) is an architectural pattern that guides an Application programming interface(API) design and development. REST APIs have become the standard of communication between the server part of the product and its client to increase performance, scalability, simplicity, modifiability, visibility, portability, and reliability.&lt;/p&gt;

&lt;p&gt;This post will discuss building a user management application with Golang using the &lt;a href="https://github.com/gin-gonic/gin"&gt;Gin-gonic&lt;/a&gt; framework and &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt;. At the end of this tutorial, we will learn how to structure a Gin-gonic application, build a REST API and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;Gin-gonic, popularly known as &lt;strong&gt;Gin&lt;/strong&gt;, is an HTTP web framework written in Golang with performance and productivity support. Gin uses a custom version of &lt;a href="https://github.com/julienschmidt/httprouter"&gt;HttpRouter&lt;/a&gt;, a lightweight, high-performance HTTP request router that navigates through API routes faster than most frameworks out there.&lt;/p&gt;

&lt;p&gt;MongoDB is a document-based database management program used as an alternative to relational databases. MongoDB supports working with large sets of distributed data with options to store or retrieve information seamlessly.&lt;/p&gt;

&lt;p&gt;You can find the complete source code in this &lt;a href="https://github.com/Mr-Malomz/gin-mongo-api"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;The following steps in this post require Golang experience. Experience with MongoDB isn’t a requirement, but it’s nice to have.&lt;/p&gt;

&lt;p&gt;We will also be needing the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://www.mongodb.com/"&gt;MongoDB account&lt;/a&gt; to host database. &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;&lt;strong&gt;Signup&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;is completely free&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; or any API testing application of your choice&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let’s code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;To get started, we need to navigate to the desired directory and run the command below in our terminal &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir gin-mongo-api &amp;amp;&amp;amp; cd gin-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command creates a  &lt;code&gt;gin-mongo-api&lt;/code&gt; folder and navigates into the project directory.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize a Go module to manage project dependencies by running the command below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init gin-mongo-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This command will create a &lt;code&gt;go.mod&lt;/code&gt; file for tracking project dependencies.&lt;/p&gt;

&lt;p&gt;We proceed to install the required dependencies with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/gin-gonic/gin go.mongodb.org/mongo-driver/mongo github.com/joho/godotenv github.com/go-playground/validator/v10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;github.com/gin-gonic/gin&lt;/code&gt; is a framework for building web applications.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go.mongodb.org/mongo-driver/mongo&lt;/code&gt; is a driver for connecting to MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/joho/godotenv&lt;/code&gt; is a library for managing environment variables.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; is a library for validating structs and fields.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-entry-point"&gt;
  &lt;/a&gt;
  Application Entry Point
&lt;/h2&gt;

&lt;p&gt;With the project dependencies installed, we need to create &lt;code&gt;main.go&lt;/code&gt; file in the root directory and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Initialize a Gin router using the &lt;code&gt;Default&lt;/code&gt; configuration. The &lt;code&gt;Default&lt;/code&gt; function configures Gin router with default middlewares (logger and recovery).&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Get&lt;/code&gt; function to route to &lt;code&gt;/&lt;/code&gt; path and a handler function that returns a JSON of &lt;code&gt;Hello from Gin-gonic &amp;amp; mongoDB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;Run&lt;/code&gt; function to attach the &lt;code&gt;router&lt;/code&gt; to an &lt;strong&gt;http.Server&lt;/strong&gt; and starts listening and serving HTTP requests on &lt;code&gt;localhost:6000&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bg8LVv1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640450184129_Screenshot%2B2021-12-25%2Bat%2B17.35.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bg8LVv1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640450184129_Screenshot%2B2021-12-25%2Bat%2B17.35.40.png" alt="Testing the app" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#modularization-in-golang"&gt;
  &lt;/a&gt;
  Modularization in Golang
&lt;/h2&gt;

&lt;p&gt;It is essential to have a good folder structure for our project. Good project structure simplifies how we work with dependencies in our application and makes it easier for us and others to read our codebase.&lt;br&gt;
To do this, we need to create  &lt;code&gt;configs&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, &lt;code&gt;responses&lt;/code&gt; and &lt;code&gt;routes&lt;/code&gt; folder in our project directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPjoYexz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640510349834_Screenshot%2B2021-12-26%2Bat%2B10.18.46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPjoYexz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640510349834_Screenshot%2B2021-12-26%2Bat%2B10.18.46.png" alt="Updated project folder structure" width="532" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;em&gt;The&lt;/em&gt; &lt;code&gt;go.sum&lt;/code&gt; &lt;em&gt;file contains all the dependency checksums, and is managed by the&lt;/em&gt; &lt;code&gt;go&lt;/code&gt; &lt;em&gt;tools. We don’t have to worry about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;configs&lt;/code&gt; is for modularizing project configuration files&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers&lt;/code&gt; is for modularizing application logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;models&lt;/code&gt; is for modularizing data and database logics.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;responses&lt;/code&gt; is for modularizing files describing the response we want our API to give. This will become clearer later on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes&lt;/code&gt; is for modularizing URL pattern and handler information.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;With that done, we need to log in or sign up into our &lt;a href="https://dev.tohttp://"&gt;MongoDB&lt;/a&gt; account. Click the project dropdown menu and click on the &lt;strong&gt;New Project&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcTSNMP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637365380025_Screenshot%2B2021-11-20%2Bat%2B00.33.27.png" alt="New Project" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the &lt;code&gt;golang-api&lt;/code&gt; as the project name, click &lt;strong&gt;Next&lt;/strong&gt;, and click &lt;strong&gt;Create Project..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uune2Wsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449262_Screenshot%2B2021-12-26%2Bat%2B10.35.59.png" alt="enter project name" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGS_XE7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511449329_Screenshot%2B2021-12-26%2Bat%2B10.36.27.png" alt="Create Project" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Build a Database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3Vw_2qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640511574285_Screenshot%2B2021-12-26%2Bat%2B10.38.59.png" alt="" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Shared&lt;/strong&gt; as the type of database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-gcwCkX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334670330_Screenshot%2B2021-11-19%2Bat%2B15.59.38.png" alt="Shared highlighted in red" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create&lt;/strong&gt; to setup a cluster. This might take sometime to setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwJDLYJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_B58C50BB61437E91E681B5825981F54733906EC9A6070DFB4A21109C66F0E3FA_1637334961608_Screenshot%2B2021-11-19%2Bat%2B16.13.28.png" alt="Creating a cluster" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create a user to access the database externally by inputting the &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;Password&lt;/strong&gt; and then clicking on &lt;strong&gt;Create User&lt;/strong&gt;. We also need to add our IP address to safely connect to the database by clicking on the &lt;strong&gt;Add My Current IP Address&lt;/strong&gt; button. Then click on &lt;strong&gt;Finish and Close&lt;/strong&gt; to save changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP-GoZeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512109914_Screenshot%2B2021-12-26%2Bat%2B10.43.36.png" alt="Create user" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgYrk21O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512118747_Screenshot%2B2021-12-26%2Bat%2B10.43.52.png" alt="Add IP" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On saving the changes, we should see a Database Deployments screen, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRNiaxls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512328028_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Database Screen" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connecting-our-application-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting our application to MongoDB
&lt;/h2&gt;

&lt;p&gt;With the configuration done, we need to connect our application with the database created. To do this, click on the &lt;strong&gt;Connect&lt;/strong&gt; button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLXpDCQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640512936968_Screenshot%2B2021-12-26%2Bat%2B10.51.34.png" alt="Connect to database" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Connect your application&lt;/strong&gt;, change the &lt;strong&gt;Driver&lt;/strong&gt; to &lt;code&gt;Go&lt;/code&gt; and the &lt;strong&gt;Version&lt;/strong&gt; as shown below. Then click on the copy &lt;strong&gt;icon&lt;/strong&gt; to copy the connection string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CKRof165--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302462_Screenshot%2B2021-12-26%2Bat%2B11.03.40.png" alt="connect application" width="880" height="475"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsQ4KIjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640513302542_Screenshot%2B2021-12-26%2Bat%2B11.04.29.png" alt="Copy connection string" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup Environment Variable&lt;/strong&gt;&lt;br&gt;
Next, we must modify the copied connection string with the user's password we created earlier and change the database name. To do this, first, we need to create a &lt;code&gt;.env&lt;/code&gt; file in the root directory, and in this file, add the snippet below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://&amp;lt;YOUR USERNAME HERE&amp;gt;:&amp;lt;YOUR PASSWORD HERE&amp;gt;@cluster0.e5akf.mongodb.net/myFirstDatabese?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Sample of a properly filled connection string below:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGOURI=mongodb+srv://malomz:malomzPassword@cluster0.e5akf.mongodb.net/golangDB?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eraqhw92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640514977875_Screenshot%2B2021-12-26%2Bat%2B11.36.06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eraqhw92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640514977875_Screenshot%2B2021-12-26%2Bat%2B11.36.06.png" alt="Updated folder structure with .env file" width="544" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Environment Variable&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a helper function to load the environment variable using the &lt;code&gt;github.com/joho/godotenv&lt;/code&gt; library we installed earlier.  To do this, we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create an &lt;code&gt;env.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;EnvMongoURI&lt;/code&gt; function that checks if the environment variable is correctly loaded and returns the environment variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Connecting to MongoDB&lt;/strong&gt; &lt;br&gt;
To connect to the MongoDB database from our application, first we need to navigate to the &lt;code&gt;configs&lt;/code&gt; folder and in this folder, create a &lt;code&gt;setup.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ConnectDB&lt;/code&gt; function that first configures the client to use the correct URI and check for errors. Secondly, we defined a timeout of 10 seconds we wanted to use when trying to connect. Thirdly, check if there is an error while connecting to the database and cancel the connection if the connecting period exceeds 10 seconds. Finally, we pinged the database to test our connection and returned the &lt;code&gt;client&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DB&lt;/code&gt; variable instance of the &lt;code&gt;ConnectDB&lt;/code&gt;. This will come in handy when creating collections.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetCollection&lt;/code&gt; function to retrieve and create &lt;code&gt;collections&lt;/code&gt; on the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to connect to the database when our application startup. To do this, we need to modify &lt;code&gt;main.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup-api-route-handler-and-response-type"&gt;
  &lt;/a&gt;
  Setup API Route Handler and Response Type
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Route Handler&lt;/strong&gt;&lt;br&gt;
With that done, we need to create a  &lt;code&gt;user_route.go&lt;/code&gt; file inside the &lt;code&gt;routes&lt;/code&gt; folder to manage all the user-related routes in our application, as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we need to attach the newly created route to the &lt;strong&gt;http.Server&lt;/strong&gt; in &lt;code&gt;main.go&lt;/code&gt; by modifying it as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Response Type&lt;/strong&gt;&lt;br&gt;
Next, we need to create a reusable &lt;code&gt;struct&lt;/code&gt; to describe our API’s response. To do this, navigate to the &lt;code&gt;responses&lt;/code&gt; folder and in this folder, create a &lt;code&gt;user_response.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above creates a &lt;code&gt;UserResponse&lt;/code&gt; struct with &lt;code&gt;Status&lt;/code&gt;, &lt;code&gt;Message&lt;/code&gt;, and &lt;code&gt;Data&lt;/code&gt; property to represent the API response type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: &lt;code&gt;json:"status"&lt;/code&gt;&lt;em&gt;,&lt;/em&gt; &lt;code&gt;json:"message"&lt;/code&gt;&lt;em&gt;, and&lt;/em&gt; &lt;code&gt;json:"data"&lt;/code&gt; &lt;em&gt;are known as struct tags. Struct tags allow us to attach meta-information to corresponding struct properties. In other words, we use them to reformat the JSON response returned by the API.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally-creating-rest-apis"&gt;
  &lt;/a&gt;
  Finally, Creating REST API’s
&lt;/h2&gt;

&lt;p&gt;Next, we need a model to represent our application data. To do this, we need to navigate to the &lt;code&gt;models&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_model.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;User&lt;/code&gt; struct with required properties. We added &lt;code&gt;omitempty&lt;/code&gt; and &lt;code&gt;validate:"required"&lt;/code&gt; to the struct tag to tell Gin-gonic to ignore empty fields and make the field required, respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create a User Endpoint&lt;/strong&gt;&lt;br&gt;
With the model setup, we can now create a function to create a user. To do this, we need to navigate to the &lt;code&gt;controllers&lt;/code&gt; folder, and in this folder, create a &lt;code&gt;user_controller.go&lt;/code&gt; file and add the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;userCollection&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; variables to create a collection and validate models using the &lt;code&gt;github.com/go-playground/validator/v10&lt;/code&gt; library we installed earlier on, respectively.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;CreateUser&lt;/code&gt; function that returns a Gin-gonic handler. Inside the returned handler, we first defined a timeout of 10 seconds when inserting user into the document, validating both the request body and required field using the validator library. We returned the appropriate message and status code using the &lt;code&gt;UserResponse&lt;/code&gt; struct we created earlier. Secondly, we created a &lt;code&gt;newUser&lt;/code&gt; variable, inserted it using the &lt;code&gt;userCollection.InsertOne&lt;/code&gt; function and check for errors if there are any. Finally, we returned the correct response if the insert was successful.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get a User Endpoint&lt;/strong&gt;&lt;br&gt;
To get the details of a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The snippet above does the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the required dependencies.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;GetAUser&lt;/code&gt; function that returns a Gin-gonic handler. Inside the returned handler, we first defined a timeout of 10 seconds when finding a user in the document, a &lt;code&gt;userId&lt;/code&gt; variable to get the user’s &lt;strong&gt;id&lt;/strong&gt; from the URL parameter and a &lt;code&gt;user&lt;/code&gt;  variable. We converted the &lt;code&gt;userId&lt;/code&gt; from a string to a &lt;code&gt;primitive.ObjectID&lt;/code&gt; type, a BSON type MongoDB uses. Secondly, we searched for the user using the &lt;code&gt;userCollection.FindOne&lt;/code&gt;, pass the &lt;code&gt;objId&lt;/code&gt; as a filter and use the &lt;code&gt;Decode&lt;/code&gt; attribute method to get the corresponding object. Finally, we returned the decoded response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; &lt;em&gt;We also passed a&lt;/em&gt; &lt;code&gt;userId&lt;/code&gt; &lt;em&gt;as a parameter to the URL path. The specified parameter must match the one we specified in the controller.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit a User Endpoint&lt;/strong&gt;&lt;br&gt;
To edit a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;EditAUser&lt;/code&gt; function above does the same thing as the &lt;code&gt;CreateUser&lt;/code&gt; function. However, we included an &lt;code&gt;update&lt;/code&gt; variable to get updated fields and updated the collection using the &lt;code&gt;userCollection.UpdateOne&lt;/code&gt;. Lastly, we searched for the updated user’s details and returned the decoded response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Delete a User Endpoint&lt;/strong&gt;&lt;br&gt;
To delete a user, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;DeleteAUser&lt;/code&gt; function follows the previous steps by deleting the matched record using the &lt;code&gt;userCollection.DeleteOne&lt;/code&gt;. We also checked if an item was successfully deleted and returned the appropriate response.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Get List of Users Endpoint&lt;/strong&gt;&lt;br&gt;
To get the list of users, we need to modify &lt;code&gt;user_controller.go&lt;/code&gt; as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;GetAllUsers&lt;/code&gt; function follows the previous steps by getting the list of users using the &lt;code&gt;userCollection.Find&lt;/code&gt;. We also read the retuned list optimally using the &lt;code&gt;Next&lt;/code&gt; attribute method to loop through the returned list of users.&lt;/p&gt;

&lt;p&gt;Next, we need to update &lt;code&gt;user_routes.go&lt;/code&gt; with the route API URL and corresponding controller as shown below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_controller.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Complete user_route.go&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With that done, we can test our application by starting the development server by running the command below in our terminal.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WH1lBkOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566569640_Screenshot%2B2021-12-26%2Bat%2B16.17.02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WH1lBkOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566569640_Screenshot%2B2021-12-26%2Bat%2B16.17.02.png" alt="terminal output" width="880" height="237"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kd5NFYMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640692825871_Screenshot%2B2021-12-28%2Bat%2B12.59.51.png" alt="Create a user endpoint" width="880" height="717"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dC1m6tz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566665581_Screenshot%2B2021-12-26%2Bat%2B20.59.07.png" alt="Get a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-N5xS4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566698763_Screenshot%2B2021-12-27%2Bat%2B00.28.38.png" alt="Edit a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQCOJtbA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566729703_Screenshot%2B2021-12-27%2Bat%2B00.49.33.png" alt="Delete a user endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnDA6MG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640566748806_Screenshot%2B2021-12-27%2Bat%2B01.16.15.png" alt="Get list of users endpoint" width="880" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUQg6jdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0E637C74C0D58C5FC3FBA1D21E2CF4F11E7592B7929DAE10790A9D12FE972D1D_1640609703212_Screenshot%2B2021-12-26%2Bat%2B19.39.22.png" alt="Database with users document" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This post discussed how to structure a Gin-gonic application, build a REST API, and persist our data using MongoDB.&lt;/p&gt;

&lt;p&gt;You may find these resources helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gin-gonic/gin"&gt;Gin-gonic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.mongodb.com/drivers/go/current/"&gt;MongoDB Go Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/go-playground/validator"&gt;Go Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joho/godotenv"&gt;Go Environment Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>gin</category>
      <category>mongodb</category>
      <category>restapi</category>
    </item>
    <item>
      <title>Public Solving: Find the missing presents</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 03 Jan 2022 07:05:56 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-find-the-missing-presents-4k5e</link>
      <guid>https://dev.to/dailydevtips1/public-solving-find-the-missing-presents-4k5e</guid>
      <description>&lt;p&gt;Oh no, some of the presents have gone missing, and Santa asked us to quickly write a program to find the missing ones.&lt;/p&gt;

&lt;p&gt;Luckily for us, the elves are super organized and have a list of all presents there would be.&lt;/p&gt;

&lt;p&gt;They also provided us a manifest with all the presents id's that should be in the current sack of Santa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-23"&gt;You can find the original puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-a-solution"&gt;
  &lt;/a&gt;
  Thinking about a solution
&lt;/h2&gt;

&lt;p&gt;This is quite a quick assignment, by the looks of it.&lt;/p&gt;

&lt;p&gt;We basically start with three arrays:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The full item array (id + name of each present) - all items&lt;/li&gt;
&lt;li&gt;Manifest array (id) - items that should be in the sack&lt;/li&gt;
&lt;li&gt;Sack array (id) - items in the sack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to break this up into two elements to make things readable and easy to grasp.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the missing items by comparing the manifest and the sack.&lt;/li&gt;
&lt;li&gt;Return the complete item object by comparing the items with the missing array we just created.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alright, let's get cracking on this puzzle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-missing-elements-in-two-arrays-in-javascript"&gt;
  &lt;/a&gt;
  Find missing elements in two arrays in JavaScript
&lt;/h2&gt;

&lt;p&gt;The first part compares the two arrays (manifest and sack).&lt;br&gt;
They contain ID's so we can use the &lt;a href="https://daily-dev-tips.com/posts/javascript-filter-method/"&gt;&lt;code&gt;filter&lt;/code&gt; method&lt;/a&gt; to quickly filter out the missing one.&lt;/p&gt;

&lt;p&gt;A present would be missing if it exists in the manifest array but not in the sack array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;sack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can use this array to filter the items array to output the id and name of that present.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can even write this as a one-liner for those interested.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findMissing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;sack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try out the test to see if it worked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6-QhNQkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640319298526/1es-AQgEE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6-QhNQkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640319298526/1es-AQgEE.png" alt="Padding the tests" width="540" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comments what you would do differently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Use TypeScript Generics to enhance your React components and make them reusable</title>
      <author>Nitsan Cohen</author>
      <pubDate>Mon, 03 Jan 2022 06:50:01 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/use-typescript-generics-to-enhance-your-react-components-and-make-them-reusable-431f</link>
      <guid>https://dev.to/nitsancohen770/use-typescript-generics-to-enhance-your-react-components-and-make-them-reusable-431f</guid>
      <description>&lt;p&gt;Use TypeScript Generics to enhance your React components and make them reusable!&lt;/p&gt;

&lt;p&gt;What is TypeScript Generics?&lt;/p&gt;

&lt;p&gt;Generics allow us to have a dynamic type for our components. It gives us more flexibility when building components and allows better reusability for the consumers of the components.&lt;/p&gt;

&lt;p&gt;Let's have a look at a simple example of Generics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function returnWhatItGets&amp;lt;Type&amp;gt;(arg: Type): Type =&amp;gt; arg;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part where we write &lt;code&gt;&amp;lt; Type&amp;gt;&lt;/code&gt; tells typescript that when we use this function, we will be able to insert a dynamic type that will serve as the Type of our argument (&lt;code&gt;arg&lt;/code&gt;) and the Type of the return value of this function.&lt;/p&gt;

&lt;p&gt;That is how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numberOutput = returnWhatItGets&amp;lt;number&amp;gt;(5);

const stringOutput = returnWhatItGets&amp;lt;string&amp;gt;("hi");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we're all on the same page with Generics, let's implement generics in our React component!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 import React from 'react';
2
3 export type GenericComponentProps&amp;lt;Type&amp;gt; = {
4 data: Type[];
5 };
6
7 export function GenericComponent&amp;lt;Type&amp;gt;({ data }: 8GenericComponentProps&amp;lt;Type&amp;gt;) {
9 return (
10 &amp;lt;&amp;gt;
11 {data?.map((item: Type, index: number) =&amp;gt; (
12 &amp;lt;ul key={index}&amp;gt;
13 {(Object.keys(data[0]) as Array&amp;lt;keyof Type&amp;gt;).map((key) =&amp;gt; (
14 &amp;lt;li key={key.toString()}&amp;gt;{item[key]}&amp;lt;/li&amp;gt;
15 ))}
16 &amp;lt;/ul&amp;gt;
17 ))}
&amp;lt;/&amp;gt;
);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It might not look very clear at first glance, but it's really straightforward. Let's go through the code line by line:&lt;/p&gt;

&lt;p&gt;On line number 3, we define a Generic type for our component's props (Type).&lt;/p&gt;

&lt;p&gt;In line 4, we assume that our props object will have the "data" property. Our data type will be an array of the dynamic Type we will initiate our component.&lt;/p&gt;

&lt;p&gt;Moving forward to line 7, we define our functional component with the generic Type that will be passed down to the props object's Type.&lt;/p&gt;

&lt;p&gt;Our data is an array with our custom Type, so in line 11, we begin mapping that array. For each object, we output an&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;  attribute.&lt;/p&gt;

&lt;p&gt;Now we want to output all the properties values of the given object, so we turn our object to an array of its keys using the Object.keys method and map it to print the value for each property. Notice how we define the type for this array dynamically with the keyof syntax.&lt;/p&gt;

&lt;p&gt;Now let's test our component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;GenericComponent
   data={[
    { name: 'Nitsan', city: 'Harish' },
    { name: 'Abraham', city: 'Beer Sheva' },
   ]}
  /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We get all the benefits of typescript, such as auto-completion and type checking, while creating flexible and reusable components.&lt;/p&gt;

&lt;p&gt;Using tools to keep track and build independent components, such as &lt;a href="//bit.dev"&gt;Bit&lt;/a&gt;, our users benefit significantly from such a flexible setup.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Node.js vs Python: Which Backend Technology to choose in 2021?</title>
      <author>Linearloop Private Limited</author>
      <pubDate>Mon, 03 Jan 2022 06:15:31 +0000</pubDate>
      <link>https://dev.to/linearloop/nodejs-vs-python-which-backend-technology-to-choose-in-2021-pmm</link>
      <guid>https://dev.to/linearloop/nodejs-vs-python-which-backend-technology-to-choose-in-2021-pmm</guid>
      <description>&lt;p&gt;Developers cannot decide on any backend technology depending on their choice because it must be as per the demand of the project. While planning for web app development, it may be possible that you find Node.JS beneficial for the project.&lt;/p&gt;

&lt;p&gt;On the other hand, there are many other &lt;a href="https://www.linearloop.io/web-development/"&gt;web development services&lt;/a&gt; that demand Python. Hence depending on the project demand, developers choose the required backend and front technology.&lt;/p&gt;

&lt;p&gt;The ultimate aim is to execute the project on time by meeting the complete requirement.&lt;/p&gt;

&lt;p&gt;In this blog, we will compare Node.JS Vs. Python for backend technology on various parameters. As a result, you will get to know which one is better and when. See, nothing can always be good or bad.&lt;/p&gt;

&lt;p&gt;The same applies to these technical aspects as well. So let’s analyze Node.JS Vs. Python and see which is better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;Architecture is one of the important parameters that is always considered while choosing any backend technology. Hence, Architecture is our first parameter based on which we will compare Node.JS vs. Python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node.JS:&lt;/strong&gt; The architecture of Node.JS is event-driven that further supports input and output. On execution of any event, the invoked program makes sure that no program should stop the running thread.  Also, there is no need for resources and memory in Node.JS, because here, a single thread can handle multiple requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python:&lt;/strong&gt; The architecture of Python is completely different from Node.JS. With the implementation of certain tools, the technology can be made asynchronous event-driven. With the module “asyncio”, one can write the asynchronous code. Also, there is some extra effort is required because most of the frameworks of Python do not have this feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;If we focus on Architecture, here Node.JS will be preferred over Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#libraries-amp-dev-tools"&gt;
  &lt;/a&gt;
  Libraries &amp;amp; Dev Tools
&lt;/h2&gt;

&lt;p&gt;Now we will compare the technologies based on their libraries and dev tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node.js:&lt;/strong&gt; If we work on Node.js, we get well-structured and comprehensive libraries through Node Package Manager. Moreover, the technology becomes more advantageous because of 350,000 packages and it is the world’s largest repository of packages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python:&lt;/strong&gt; Pip Installs Packages (PIP) manage the Python libraries. Few libraries are properly documented and their deployment is simple. As technology evolves, the new libraries are not structured and documented as expected.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Hence based on libraries and development tools, Node.JS becomes the choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance:
&lt;/h2&gt;

&lt;p&gt;Node.JS Vs Python performance has been analyzed here and a final conclusion is drawn for better performance. Hence if you are planning for web app development, keep this parameter in mind.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node.JS:&lt;/strong&gt; The speed of Node.JS is phenomenal and this is the reason for which Node.JS gets preference. Here, the JavaScript is converted via the V8 engine and hence its speed becomes outstanding. Also, Node.JS executes code outside of your browser as a result of which the application utilizes lesser resources. It also enhances the performance of the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python:&lt;/strong&gt; As we know, JavaScript and Python are interpretive programming languages and they are a little slow in comparison to Node.JS. Also, Python is a single-flow programming language and hence the handling of requests is not as fast as Node.JS. Request handling process is a little sluggish in Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Based on the performance, Node.JS wins here. It is fine, Python is simple to understand but speed is the concern here. So if performance is the parameter, the web application development services should go with Node.JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability:
&lt;/h2&gt;

&lt;p&gt;Now the comparison of Python and Node.JS is done on the basis of their scalability. So let’s have a look.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node.JS:&lt;/strong&gt; Here, the developers will have the flexibility to create a collection of microservices. Each module will use the compact system and also execute its individual operations. Also, one can add any new module anytime that makes the system more flexible and agile. Moreover, Node.JS has more alternatives if we compare it with Python.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python:&lt;/strong&gt; In order to scale a program, multithreading is mandatory which is not permitted in Python. Although, Python has the libraries for multithreading they are not real. Here, only one thread runs at the given time as per GIL (Global Interpreter Lock).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;When scalability comes, Node.JS should be given preference for web app development.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#final-conclusion"&gt;
  &lt;/a&gt;
  Final Conclusion
&lt;/h4&gt;

&lt;p&gt;As we have stated earlier, the selection of any technology or programming language is completely dependent upon the requirement of the project and the expectation of the client.&lt;/p&gt;

&lt;p&gt;Being leading &lt;strong&gt;&lt;a href="https://www.linearloop.io/web-development/"&gt;web app development company in India&lt;/a&gt;&lt;/strong&gt;, Linearloop always recommends analyzing the requirement properly. Afterward, you should select the best-suited backend technology that can either be Python or Node.JS. Let us know if you are looking to know more.&lt;/p&gt;

</description>
      <category>node</category>
      <category>python</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to update PHP in WordPress?</title>
      <author>aashiya123</author>
      <pubDate>Mon, 03 Jan 2022 06:08:18 +0000</pubDate>
      <link>https://dev.to/aashiya123/how-to-update-php-in-wordpress-5cnc</link>
      <guid>https://dev.to/aashiya123/how-to-update-php-in-wordpress-5cnc</guid>
      <description>&lt;p&gt;As we have discussed earlier, some languages run on web browsers and PHP is one of them. If you own your web server, you will be able to make changes yourself, but if you have hosted your website via a third-party then you need to contact them for making the required changes. But having a third-party, it will not be your job to manage and maintain the updates, they will do it on their own whenever a new version update is available. Same goes with the plugins, themes, and PHP version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Via cPanel&lt;/strong&gt;&lt;br&gt;
It also follows the same steps as login into your web hosting account. Then you can look for the software section where you can check the selected PHP version as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qv2nMr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/104ykun2uusa98zlffc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qv2nMr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/104ykun2uusa98zlffc8.png" alt="Image description" width="608" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click it and you can see the next page displaying the PHP version. From there, you can select the latest version for the PHP as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3qjLNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qflj1d39l9ohaz91yojh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3qjLNx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qflj1d39l9ohaz91yojh.png" alt="Image description" width="601" height="294"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;strong&gt;Via WordPress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can follow the below-mentioned simple steps to check the PHP version.&lt;br&gt;
You can look for the plugin “Display PHP Version” and install it. You can find it in the WordPress repository as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vy4dMWab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xufc6989h2uteu7j0zo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vy4dMWab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xufc6989h2uteu7j0zo.png" alt="Image description" width="596" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now activate the plugin. Then navigate to the WordPress dashboard-&amp;gt; home-&amp;gt; at a glance.&lt;br&gt;
You will be redirected to the new page where you will be able to see the PHP version on which your website is running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kscN_MNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsgumf817dv9najnmwrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kscN_MNZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsgumf817dv9najnmwrr.png" alt="Image description" width="593" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click the Update option available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contacting host provider&lt;/strong&gt;&lt;br&gt;
If you are using a third-party for hosting your website, then you need to contact them for making the required changes. These host providers have skilled persons for making such changes either via code or via interface depending on the changes. &lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Data-Oriented Programming is dope</title>
      <author>Xavier Barbosa</author>
      <pubDate>Mon, 03 Jan 2022 06:07:38 +0000</pubDate>
      <link>https://dev.to/xba/data-oriented-programming-is-dope-ma2</link>
      <guid>https://dev.to/xba/data-oriented-programming-is-dope-ma2</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@ravi_roshan_inc?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ravi Roshan&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/small&gt;&lt;br&gt;
&lt;small&gt; This post was published first in &lt;a href="https://techblog.deepki.com/data-oriented-programming/"&gt;https://techblog.deepki.com/data-oriented-programming/&lt;/a&gt;. This is an English translation by the same author.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Data-oriented programming (DOP) is not a new concept. It's a paradigm that can be used by developers in any programming language, it's purpose is to reduce complexity of information system that they are designing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.klipse.tech/"&gt;Yehonathan Sharvit&lt;/a&gt; explains that in his book &lt;a href="https://www.manning.com/books/data-oriented-programming"&gt;Data-oriented programming&lt;/a&gt;.&lt;br&gt;
The book explores tenets of this paradigm, as a dialog between two people.&lt;/p&gt;

&lt;p&gt;The narrator is a junior javascript developer, he develops a Library Management System of a client. Initial features are easy, the software is coded in object oriented. But when the client asks for some new features at the very last moment, everything becomes complicated. He seeks support from a veteran developper, Joe.&lt;/p&gt;

&lt;p&gt;Throughout these pages Joe demonstrates difficulties he encounters, shows him how to confront them. &lt;em&gt;In fine&lt;/em&gt;, he teaches him a new way to organize his source code that is more easy to decipher and to evolve.&lt;/p&gt;



&lt;p&gt;Examples in the book are in Javascript, I wanted to introduce my interpretation in Python on a small part of these rules: code and data separation.&lt;/p&gt;

&lt;p&gt;In the book, the heroes talk about user management. The narrator had to design two types of users, the librarian and the member:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFgzvTTe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85f8ztl3lond67l8wprv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFgzvTTe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85f8ztl3lond67l8wprv.png" alt="Image description" width="539" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this logic implemented, the client requested him to add super members, then VIP members.&lt;br&gt;
It achieves to be this UML class diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aEUSZ_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rqxjbq1cpmwzw93tgu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aEUSZ_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rqxjbq1cpmwzw93tgu5.png" alt="Image description" width="733" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's really hard to manage for the young narrator. Although everything is perfectly logic, the classes hierarchy is hard to work with, mixing inheritance with dependencies.&lt;/p&gt;

&lt;p&gt;Joe understands affirms that is "feelings" are due to « Data encapsulation has its merits and drawbacks: Think about the way you designed the Library Management System. According to DOP, the main cause of the complexity of systems and their lack of flexibility is because code and data are mixed together in objects »&lt;/p&gt;

&lt;p&gt;That's what Yehonathan Sharvit fights all along the book: he depicts the difficulty to just understand something and be able to upgrade it without difficulties.&lt;/p&gt;

&lt;p&gt;Complexity is a thing that have been accumulated insidiously. When it's not kept under control, implementing new features can take weeks instead of days. But DO comes with a radical approch to fight this complexity. To achieve this, data and code must be separated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_OiO3efa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq2dno3fk7m5117h0w6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_OiO3efa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq2dno3fk7m5117h0w6p.png" alt="Image description" width="608" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to explain this separation, here is my implementation in python.&lt;/p&gt;

&lt;p&gt;I've followed technics that are described in the book. I started from the client specifications, I've made a list of names that seem to represent Entities of the system, and another list of everything that look like a feature. Then I've organized what I've found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two kind of users: &lt;strong&gt;members&lt;/strong&gt; and &lt;strong&gt;librarians&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Users&lt;/strong&gt; &lt;em&gt;log in&lt;/em&gt; to the system via email and password&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Members&lt;/strong&gt; can &lt;em&gt;borrow &lt;strong&gt;books&lt;/strong&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Members&lt;/strong&gt; and &lt;strong&gt;librarians&lt;/strong&gt; can &lt;em&gt;search &lt;strong&gt;books&lt;/strong&gt;&lt;/em&gt; by &lt;strong&gt;title&lt;/strong&gt; or by &lt;strong&gt;author&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Librarians&lt;/strong&gt; can &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;unblock &lt;strong&gt;members&lt;/strong&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Librarians&lt;/strong&gt; can &lt;em&gt;list the &lt;strong&gt;books currently lent&lt;/strong&gt; by a &lt;strong&gt;member&lt;/strong&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;There could be &lt;strong&gt;several copies of a book&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entities classified by groups:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9u888kaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfd0qerc7c5aup9rboud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9u888kaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfd0qerc7c5aup9rboud.png" alt="Image description" width="512" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features put in several code modules:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUhVLeDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vizx1mythj76ivmmhedz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUhVLeDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vizx1mythj76ivmmhedz.png" alt="Image description" width="733" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this basis, I will implement book lending.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;catalog&lt;/strong&gt;'s data part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;$schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://json-schema.org/draft/2020-12/schema"&lt;/span&gt;
&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;lendings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;additionalProperties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;book_item_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;user_email&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;book_item_id&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;propertyNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;lendings&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;user_management&lt;/strong&gt;'s data part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;$schema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://json-schema.org/draft/2020-12/schema"&lt;/span&gt;
&lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;members_by_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
    &lt;span class="na"&gt;additionalProperties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;is_blocked&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;boolean&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;is_blocked&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
    &lt;span class="na"&gt;propertyNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;members_by_id&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I've used JSON Schema, because data does not have to be contained in rigid structures. Only the keys are relevant and need to be specified. In DO, data requires to obey three other rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all types are generic&lt;/li&gt;
&lt;li&gt;all types are immutable&lt;/li&gt;
&lt;li&gt;shape of data and data schema are separated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a mock that validates these two schemas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;library_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"catalog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"books_by_isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"9781234567897"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Data Oriented Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Yehonathan Sharvit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;"book_items_by_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"book-item-1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"9781617298578"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;"book-item-2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"9781617298578"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"member-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"book_item_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"book-item-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"user_management"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"members_by_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"member-1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"member-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Xavier B."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"xavier@deepki.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"aG93IGRhcmUgeW91IQ=="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;"is_blocked"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By convention, &lt;code&gt;dict&lt;/code&gt; are used like some &lt;code&gt;Mapping&lt;/code&gt;, and I forbid myself to update them.&lt;/p&gt;

&lt;p&gt;Please note that examples will use the &lt;code&gt;classes+static&lt;/code&gt; method form in order to make this article readable. In a production code, the &lt;code&gt;modules+functions&lt;/code&gt; form is the way to go.&lt;/p&gt;

&lt;p&gt;And now the code part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;uuid4&lt;/span&gt;

&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"T"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;user_management_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user_management"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;UserManagement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Only members can borrow books"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;UserManagement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blocked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Member cannot borrow book because he is bloqued"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;catalog_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"catalog"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Book is already borrowed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;library_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"catalog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;lending&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserManagement&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"members_by_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_blocked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"members_by_id"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"is_blocked"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;lendings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lending&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"book_item_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lendings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;lending_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lending_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"book_item_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;lendings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;catalog_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lendings&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lending&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;lending&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, code is a series of pure functions.&lt;br&gt;
Functions that modify a state return a new state object rather than upgrading the previous state.&lt;/p&gt;

&lt;p&gt;In each module, functions are made simple and easy to test. They can be reused in any context, like the main module. Globally, they are composed with other existing function. It becomes very easy to adapt them for the client's needs.&lt;/p&gt;

&lt;p&gt;And now, which path will data lead if my alter-ego borrows another copy of the book?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"member-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"book-item-2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two things occur:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data is systematically transmitted to every function calls. This object is quite opaque, each level use only a fragment that he knows without worrying about the remaining:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 1. injects data into Library.checkout module
&lt;/span&gt;&lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;

&lt;span class="c1"&gt;# 2. extracts data from user_management
&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user_management"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 3. uses this data fragment into UserManagement module
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;UserManagement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;UserManagement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_blocked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_management_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# 4. picks catalog data
&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"catalog"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 5. uses this data fragment into Catalog module
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a function is about to change a state, it returns a new version of data. Every level of the call stack must returns a new version of data:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 1. handles the request in Catalog.checkout
&lt;/span&gt;&lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;lendings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 2. creates a new version of catalog_data
&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"lendings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lendings&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lending&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# 3. interception of the new catalog_data by Library.checkout
&lt;/span&gt;&lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Catalog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="c1"&gt;# 4. creation of a new version of library_data
&lt;/span&gt;&lt;span class="n"&gt;library_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;library_data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"catalog"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;catalog_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then, this new version of data can be exposed to whole system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my example, I don't talk about data consolidation. I suggest you to read the book which gives informations concerning this subject.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-it-pythonic"&gt;
  &lt;/a&gt;
  Is it pythonic?
&lt;/h2&gt;

&lt;p&gt;Broadly speaking, this paradigm fits well in Python if we shelve the object oriented capabilities of the language.&lt;br&gt;
The notion of modules in data-oriented are naturally superimposed on modules in Python, which facilitates adherence.&lt;/p&gt;

&lt;p&gt;Borrowings of functional languages such as &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt; as well as functions from standard &lt;code&gt;operator&lt;/code&gt; module also contribute to make this paradigm quite natural in Python.&lt;/p&gt;

&lt;p&gt;In our example, &lt;a href="https://techblog.deepki.com/typage-en-python/"&gt;standard typing&lt;/a&gt; will not work. However, it is quite easy to do custom typing, such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;M&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__or__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;# type: ignore
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__hash__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;# which can be used as well in the source code
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;members_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-purity"&gt;
  &lt;/a&gt;
  Code purity
&lt;/h2&gt;

&lt;p&gt;In my implementation my functions are not really pure because I have used exceptions. However, this disgression is acceptable if it is applied under a certain condition. Indeed, exceptions are only used to express illegal operations, in a &lt;em&gt;throw early, catch late&lt;/em&gt; way. Using them this way contributes to the readability of the code. The higher layers of the system will know how to deal with them.&lt;/p&gt;

&lt;p&gt;For example in a &lt;a href="https://flask.palletsprojects.com/en/2.0.x/errorhandling/#error-handlers"&gt;Flask application&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/checkout"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;checkout_view&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="n"&gt;lending&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;library_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_item_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# la fonction 'checkout' peut lever des exceptions
&lt;/span&gt;        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lending&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The author is also clear that embracing DO comes at a cost. For example, the fact that DO is relatively agnostic of any programming language undermines the guarantees offered by object modeling (or other tools such as code analysis that some IDEs allow). However, he sometimes offers alternatives for this, such as JSON Schema used here.&lt;/p&gt;

&lt;p&gt;What I presented to you was just a preview of DOP using pure Python. The author gives a lot of details about unit tests, data structures, state management, structural sharing, atomicity, transformation pipeline, etc.&lt;/p&gt;

&lt;p&gt;I highly recommend you to read &lt;a href="https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7"&gt;Data-oriented programming&lt;/a&gt; by Yehonathan Sharvit, and please follow his approach &lt;a href="https://blog.klipse.tech/visualization/2021/02/16/data-related-paradigms.html"&gt;in his blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;The author is a multilingual developer and without citing it, many concepts come from the Clojure language. According to its defenders, &lt;a href="https://clojure.org/"&gt;Clojure&lt;/a&gt; is the easiest programming language in the world because it has &lt;a href="https://blog.cleancoder.com/uncle-bob/2019/08/22/WhyClojure.html"&gt;almost no syntax or grammar&lt;/a&gt; and it was designed by Rich Hickey in such a way as to &lt;a href="https://www.youtube.com/watch?v=2V1FtfBDsLU"&gt;facilitate code changes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This language can be inspiring for other languages. To convince yourself, you can consult this other talk &lt;a href="https://www.youtube.com/watch?v=yoUPB62slns"&gt;Design, Composition, and Performance Short&lt;/a&gt; by Rich Hickey.&lt;/p&gt;

&lt;p&gt;It makes me happy to see some of these principles reused in other languages. Indeed, languages must nurture on each other.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bref&lt;/em&gt;, making functional code in Python &lt;em&gt;is dope&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>books</category>
      <category>dataorientedprogramming</category>
    </item>
  </channel>
</rss>
