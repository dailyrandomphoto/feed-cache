<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Linked List VS Array</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 07 Sep 2021 22:18:02 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/linked-list-vs-array-9oe</link>
      <guid>https://dev.to/ayabouchiha/linked-list-vs-array-9oe</guid>
      <description>&lt;p&gt;Hello everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, on this amazing day, we'll talk about the difference between array and linked list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#array-vs-linked-list"&gt;
  &lt;/a&gt;
  Array VS Linked List
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h4&gt;

&lt;p&gt;The array is a collection of elements stored at contiguous memory of a similar data type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array elements are stored in a contiguous block of memory&lt;/li&gt;
&lt;li&gt;fixed size&lt;/li&gt;
&lt;li&gt;accessing directly a specific element &lt;em&gt;O(1)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;slow when performing delete and insert operations.&lt;/li&gt;
&lt;li&gt;fast when it comes to finding an element (binary search)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#types-of-array"&gt;
  &lt;/a&gt;
  Types of Array
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;one-dimensional array&lt;/li&gt;
&lt;li&gt;two-dimensional array&lt;/li&gt;
&lt;li&gt;multidimensional array&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#linked-list"&gt;
  &lt;/a&gt;
  Linked List
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h4&gt;

&lt;p&gt;A linked list is a linear data structure, in which the elements are linked using pointers, additionally, they are not stored at contiguous memory locations. A Linked List consists of Nodes that contain value ( data ) and a pointer to the next node in the chain. The head pointer points to the first node if the list is not empty, and the last element of the list points to null.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linked List elements are stored randomly.&lt;/li&gt;
&lt;li&gt;dynamic size&lt;/li&gt;
&lt;li&gt;for accessing an element we need to pass all linked list elements that are preceded by the specified element O(n)&lt;/li&gt;
&lt;li&gt;faster than array when It comes to performing insert and deletes operations.&lt;/li&gt;
&lt;li&gt;take more extra space to store node pointers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for more information about linked lists like the time and space complexity, Linked list's advantages and disadvantages, implementation&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#types-of-linked-list"&gt;
  &lt;/a&gt;
  Types of Linked List
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Singly Linked List&lt;/li&gt;
&lt;li&gt;Doubly Linked List&lt;/li&gt;
&lt;li&gt;Circular Linked List&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/linked-list-data-structure-4g7k"&gt;https://dev.to/ayabouchiha/linked-list-data-structure-4g7k&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/linked-list-vs-array/"&gt;https://www.geeksforgeeks.org/linked-list-vs-array/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techdifferences.com/difference-between-array-and-linked-list.html"&gt;https://techdifferences.com/difference-between-array-and-linked-list.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.faceprep.in/data-structures/linked-list-vs-array/"&gt;https://www.faceprep.in/data-structures/linked-list-vs-array/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.studytonight.com/data-structures/linked-list-vs-array"&gt;https://www.studytonight.com/data-structures/linked-list-vs-array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/ds-array-vs-linked-list#:~:text=An%20array%20is%20a%20collection,the%20memory%20or%20randomly%20stored."&gt;https://www.javatpoint.com/ds-array-vs-linked-list#:~:text=An%20array%20is%20a%20collection,the%20memory%20or%20randomly%20stored.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Build A Random Number Generator w. JavaScript</title>
      <author>Amy Oulton</author>
      <pubDate>Tue, 07 Sep 2021 22:14:53 +0000</pubDate>
      <link>https://dev.to/amyoulton/build-a-random-number-generator-w-javascript-4oak</link>
      <guid>https://dev.to/amyoulton/build-a-random-number-generator-w-javascript-4oak</guid>
      <description>&lt;p&gt;Today we're going to build out a random number generator using JavaScript. &lt;/p&gt;

&lt;p&gt;I went ahead and started with some simple HTML:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div class="cont"&amp;gt;
   &amp;lt;h2 id="number"&amp;gt;0&amp;lt;/h2&amp;gt;
   &amp;lt;button class="btn" id="generate"&amp;gt;Random Number&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I also added in some styles because they never made anything worse! 🦄&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8CBXvvs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hceqiigdbf9k1tybsxe4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8CBXvvs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hceqiigdbf9k1tybsxe4.gif" alt="its-called-style-people-eugene-levy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; body {
   background-color: #00242e;
 }

 .cont {
   display: flex;
   flex-direction: column;
   align-items: center;
   margin-top: 100px;
 }

 .btn {
   background-color: #32edd7;
   border: none;
   padding: 16px 32px;
   border-radius: 4px;
   font-size: 16px;
   cursor: pointer;
 }

 .btn:hover {
   background-color: #2ad1bd;
 }

 #number {
   font-size: 28px;
   color: pink;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next we'll begin writing out our JavaScript!&lt;/p&gt;

&lt;p&gt;We start by writing two variables, &lt;code&gt;num&lt;/code&gt; and &lt;code&gt;btn&lt;/code&gt; and assign them to the correct node.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const num = document.getElementById('number');
 const btn = document.getElementById('generate');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We'll then go ahead and create our function. We'll be using the built in &lt;code&gt;.random&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random"&gt;method&lt;/a&gt; on the Math object. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const randomNum = () =&amp;gt; {
   return Math.floor(Math.random() * 1000);
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we wanna add an event listener on the button to listen for whenever it's clicked. We can do that as follows:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; btn.addEventListener('click', () =&amp;gt; {
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now within the body of this, we want to add the logic that replaces the current &lt;code&gt;num&lt;/code&gt; with a random number, as produced by the &lt;code&gt;randomNum&lt;/code&gt; function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; btn.addEventListener('click', () =&amp;gt; {
   num.innerHTML = randomNum(); 
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Make sure you assign it to &lt;code&gt;num.innerHTML&lt;/code&gt; and not &lt;code&gt;num&lt;/code&gt;. Otherwise, we'll be overwriting the &lt;code&gt;num&lt;/code&gt; variable and not updating the actual number visible on the page.&lt;/p&gt;

&lt;p&gt;For a clearer explanation, visit the tutorial on &lt;a href="https://www.codecast.io/casts/dOyLamkoLx7m-javascript-random-number-generator"&gt;CodeCast&lt;/a&gt;. Here you can watch my video tutorial, as well as the code I'm writing in the video.&lt;/p&gt;

&lt;p&gt;Be sure to leave me a comment there letting me know your thoughts, or what you would have done different!&lt;/p&gt;

&lt;p&gt;For more information on CodeCast check out &lt;a href="https://info.codecast.io/"&gt;https://info.codecast.io/&lt;/a&gt; 😌&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Creating Peacekeeper</title>
      <author>RolandiXor (Roland L. Taylor)</author>
      <pubDate>Tue, 07 Sep 2021 20:31:25 +0000</pubDate>
      <link>https://dev.to/rolandixor/creating-peacekeeper-11bn</link>
      <guid>https://dev.to/rolandixor/creating-peacekeeper-11bn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Peace to you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this series, my first ever on DEV, I'll be breaking down some of the details behind one of my favourite website templates, Peacekeeper! This series is largely aimed at beginners, but anyone can benefit. Plus, your feedback is welcomed, because there's always room to learn and grow!&lt;/p&gt;

&lt;p&gt;First, I'd like to start by explaining what Peacekeeper is, beyond what's immediately obvious of course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#peacekeeper-is-a-singlepage-website-template"&gt;
  &lt;/a&gt;
  Peacekeeper is a single-page website template
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZeAGqw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouqh01ajl0boq5vd8zgn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZeAGqw3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouqh01ajl0boq5vd8zgn.png" alt="Peacekeeper Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that though there are multiple source files for each "tab" in the page, there is only &lt;em&gt;one&lt;/em&gt; functional "page" from an end-user perspective. Though an end user can view several "sub-pages" (for want of a better term), they never actually need to navigate away from the landing page. This approach has a number of advantages, but also some disadvantages, which you'd have to weigh if you're taking this approach.&lt;/p&gt;

&lt;p&gt;I've tried to identify a few below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No reloading.&lt;/li&gt;
&lt;li&gt;Faster load times (for most things at least).&lt;/li&gt;
&lt;li&gt;Most necessary resources are already loaded when new content is displayed.&lt;/li&gt;
&lt;li&gt;Potentially easier to manage (from a dev perspective).&lt;/li&gt;
&lt;li&gt;Everything feels self-contained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;(Optionally)&lt;/strong&gt; everything can be placed in one HTML file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tabs cannot be accessed via links (this can be worked around).&lt;/li&gt;
&lt;li&gt;Noticeable delay when loading large or complex tabs.&lt;/li&gt;
&lt;li&gt;Requires JavaScript to be enabled, even if using a single file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably others, but I think these should give a relatively concise idea of what to expect when choosing this approach. Single-page websites are perfect for companies preparing a launch, or individuals seeking to hold an online identity via their own website. It is possible to allow users to navigate to specific tabs via hyperlinks to your website, using JavaScript to catch the specific ID of your tab and activate it.&lt;/p&gt;

&lt;p&gt;In Peacekeeper, I did not choose this specific approach, but that's on purpose — because seeing as it is a template, I decided to keep to the basics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ill-be-covering-in-this-series"&gt;
  &lt;/a&gt;
  What I'll be covering in this series
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvA02En8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnb48ps9ypfvp6ljz3dn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvA02En8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnb48ps9ypfvp6ljz3dn.png" alt="A screenshot of the portfolio section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create Peacekeeper, I've employed a number of CSS capabilities to achieve some rather exciting results. You can change the page's background and theme on the fly, and changes are applied live (with a transition). Each tab comes with its own styles, and thanks to the use of semantic HTML, there's no need to add classes to everything in order to achieve such diverse results. In fact, JavaScript is only used where &lt;em&gt;(for the most part)&lt;/em&gt; CSS can't &lt;em&gt;(or shouldn't)&lt;/em&gt; be: triggering events.&lt;/p&gt;

&lt;p&gt;All of this will be examined and explored in more detail going forward, and I'm pretty sure the DEV community will it useful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-tuned"&gt;
  &lt;/a&gt;
  Stay tuned!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhUAy0ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3pyu9vrlb45nqv0aoic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhUAy0ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3pyu9vrlb45nqv0aoic.png" alt="A screenshot of the Peacekeeper documentation"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using Next.js with Fauna and GraphQL</title>
      <author>Fauna</author>
      <pubDate>Tue, 07 Sep 2021 20:13:48 +0000</pubDate>
      <link>https://dev.to/fauna/using-next-js-with-fauna-and-graphql-1idf</link>
      <guid>https://dev.to/fauna/using-next-js-with-fauna-and-graphql-1idf</guid>
      <description>&lt;p&gt;&lt;a href="http://nextjs.org/"&gt;Next.js&lt;/a&gt; is a frontend framework, powered by React, which provides optimizations and tools to create fast websites. It supports both hybrid static pages, as well as dynamic, real-time content. With built-in integrations like &lt;a href="https://nextjs.org/docs/basic-features/typescript"&gt;TypeScript&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/basic-features/eslint"&gt;ESLint&lt;/a&gt;, Next.js simplifies the Developer Experience (DX) and optimizes for serverless and &lt;a href="https://nextjs.org/docs/deployment"&gt;edge deployments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next.js is not opinionated about where you store your data. It provides APIs for the developer to hook into their content, commerce, or database of choice. Since Next.js is optimized for serverless, it makes sense to pair it with a serverless database. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-fauna-with-nextjs"&gt;
  &lt;/a&gt;
  Why Fauna with Next.js?
&lt;/h2&gt;

&lt;p&gt;Fauna is a serverless, transactional database. It's flexible like NoSQL databases, with support for relational data and transactions. Plus, it has an &lt;a href="https://fauna.com/pricing"&gt;excellent free tier&lt;/a&gt; and is a managed service. No servers to maintain or hidden fees!&lt;/p&gt;

&lt;p&gt;Since it's serverless-first, you can consider Fauna "connectionless". Instead of battling connection limits, Fauna provides a database as an API, allowing developers to not worry about connection limits in serverless environments. Further, it provides a &lt;a href="https://docs.fauna.com/fauna/current/api/graphql/"&gt;GraphQL API&lt;/a&gt;, which simplifies creating, querying, and updating your data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vercel-with-nextjs"&gt;
  &lt;/a&gt;
  Why Vercel with Next.js?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://vercel.com/"&gt;Vercel&lt;/a&gt; is a serverless platform for static applications and frontend frameworks, providing a frictionless Developer Experience to take care of the hard things: deploy instantly, scale automatically, and serve personalized content around the globe.&lt;/p&gt;

&lt;p&gt;Vercel makes it easy for frontend teams to develop, preview, and ship delightful user experiences, where performance is the default. Fauna.com is built with Next.js and Vercel!&lt;/p&gt;

&lt;p&gt;Let's explore deploying a Next.js app using Fauna to Vercel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-nextjs-and-fauna-to-vercel"&gt;
  &lt;/a&gt;
  Deploying Next.js and Fauna to Vercel
&lt;/h2&gt;

&lt;p&gt;Getting started with Fauna and Next.js only takes a few minutes, thanks to the official Next.js template and the &lt;a href="https://vercel.com/integrations/fauna"&gt;Vercel Integration&lt;/a&gt;. The integration will allow you to create or connect to your Fauna database, create a new key, and then add it as an &lt;a href="https://vercel.com/docs/environment-variables"&gt;Environment Variable&lt;/a&gt; to your Vercel project. The value will be saved as &lt;code&gt;FAUNA_ADMIN_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manual-installation"&gt;
  &lt;/a&gt;
  Manual Installation
&lt;/h3&gt;

&lt;p&gt;Alternatively, you can start from the command line locally and clone the template using &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;create-next-app&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example with-fauna with-fauna-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, &lt;a href="https://dashboard.fauna.com/"&gt;create a database&lt;/a&gt; and generate an admin token by going to the &lt;strong&gt;Security&lt;/strong&gt; tab on the left and then click &lt;strong&gt;New Key&lt;/strong&gt;. Give the new key a name and select the &lt;strong&gt;Admin&lt;/strong&gt; Role. Save the token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-your-schema"&gt;
  &lt;/a&gt;
  Setting Up Your Schema
&lt;/h3&gt;

&lt;p&gt;The Next.js and Fauna example includes a setup script (&lt;code&gt;npm run setup&lt;/code&gt;). After providing your admin token, the script will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Import your GraphQL schema:&lt;/strong&gt; Fauna automatically sets up collections and indexes to support your queries. You can view these in your &lt;a href="https://dashboard.fauna.com/"&gt;project dashboard&lt;/a&gt; under &lt;strong&gt;GraphQL&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create an index and function:&lt;/strong&gt; The script will create a GraphQL resolver that uses &lt;a href="https://docs.fauna.com/fauna/current/api/graphql/functions?lang=javascript"&gt;User-defined functions&lt;/a&gt; based on a sorting index.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a scoped token:&lt;/strong&gt; This token is for use on the client side. The admin key can be used on the server side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the script completes, a &lt;code&gt;.env.local&lt;/code&gt; &lt;a href="https://nextjs.org/docs/basic-features/environment-variables"&gt;file&lt;/a&gt; will be created for you with the newly generated client token assigned to an Environment Variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-fauna-in-your-nextjs-application"&gt;
  &lt;/a&gt;
  Connecting to Fauna in your Next.js Application
&lt;/h2&gt;

&lt;p&gt;To connect to your Fauna database with GraphQL, you can use the &lt;a href="https://github.com/prisma-labs/graphql-request"&gt;graphql-request&lt;/a&gt; library to securely fetch or mutate data inside &lt;code&gt;lib/fauna.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/fauna.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;graphql-request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphQLClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://graphql.fauna.com/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FAUNA_ADMIN_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can use the &lt;a href="https://docs.fauna.com/fauna/current/drivers/javascript"&gt;Fauna JavaScript driver&lt;/a&gt; to execute FQL queries in Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-fauna-with-graphql"&gt;
  &lt;/a&gt;
  Querying Fauna with GraphQL
&lt;/h2&gt;

&lt;p&gt;Now that your GraphQL client has been created, you can query or mutate data using your secure connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/fauna.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listGuestbookEntries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
    query Entries($size: Int) {
      entries(_size: $size) {
        data {
          _id
          _ts
          name
          message
          createdAt
        }
      }
    }
  `&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;graphQLClient&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="na"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#displaying-your-fauna-data-inside-nextjs"&gt;
  &lt;/a&gt;
  Displaying your Fauna Data inside Next.js
&lt;/h2&gt;

&lt;p&gt;Since Next.js can handle multiple rendering strategies, including static-site generation, server-side rendering, and client-side rendering, we can display our data from Fauna in many ways.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-site-generation"&gt;
  &lt;/a&gt;
  Static Site Generation
&lt;/h3&gt;

&lt;p&gt;Using &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;getStaticProps&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;getStaticPaths&lt;/a&gt;, we can statically generate all of the content from our Fauna database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/entries/[id].js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Entry&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render entry...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This function gets called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Query all entries from Fauna&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;listGuestbookEntries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the paths we want to pre-render based on entries&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="c1"&gt;// We'll pre-render only these paths at build time.&lt;/span&gt;
  &lt;span class="c1"&gt;// { fallback: false } means other routes should 404.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This also gets called at build time&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// params contains the key `id`.&lt;/span&gt;
  &lt;span class="c1"&gt;// If the route is like /entries/1, then params.id is 1&lt;/span&gt;
  &lt;span class="c1"&gt;// We could create getGuestbookEntry similar to listGuestbookEntries&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getGuestbookEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Pass entry data to the page via props&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#serverside-rendering"&gt;
  &lt;/a&gt;
  Server-Side Rendering
&lt;/h3&gt;

&lt;p&gt;If we need to fetch new data from &lt;em&gt;every&lt;/em&gt; request, we can use &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"&gt;getServerSideProps&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Render entries...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Query all entries from Fauna&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;listGuestbookEntries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Pass entry data to the page via props&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#clientside-rendering"&gt;
  &lt;/a&gt;
  Client-Side Rendering
&lt;/h3&gt;

&lt;p&gt;If we want to fetch data on the client-side, initially showing a loading state, we can use a React hook library like &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt; to simplify data fetching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Entries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/entries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;failed to load&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This example fetches the Fauna data from an &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API Route&lt;/a&gt;, which allows us to securely connect to Fauna on the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/entries.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;listGuestbookEntries&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../lib/fauna&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;listGuestbookEntries&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Try out Fauna and Next.js today and &lt;a href="https://vercel.com/integrations/fauna"&gt;deploy to Vercel&lt;/a&gt;. Next, you can explore:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explore Fauna's &lt;a href="https://docs.fauna.com/fauna/current/tutorials/authentication/user.html"&gt;built-in identity and authentication&lt;/a&gt;, which can be paired with NextAuth and their &lt;a href="https://next-auth.js.org/adapters/fauna"&gt;built-in adapter for Fauna&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn more about &lt;a href="https://fauna.com/blog/evolving-the-structure-of-your-fauna-database"&gt;migrating your Fauna schema&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Explore &lt;a href="https://the-guild.dev/blog/graphql-codegen-plugin-typescript-swr"&gt;GraphQL code generation&lt;/a&gt; to auto-generate &lt;a href="https://swr.vercel.app/"&gt;SWR hooks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>fauna</category>
      <category>graphql</category>
      <category>nextjs</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Photomosh</title>
      <author>Cloneable 🇹🇬</author>
      <pubDate>Tue, 07 Sep 2021 19:53:32 +0000</pubDate>
      <link>https://dev.to/cloneableteam/photomosh-3pi2</link>
      <guid>https://dev.to/cloneableteam/photomosh-3pi2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-photomosh"&gt;
  &lt;/a&gt;
  What is Photomosh?
&lt;/h1&gt;

&lt;p&gt;Photomosh &lt;b&gt;let’s you glitch images, videos, and webCam using WebGL effects&lt;/b&gt;. Save as a output as image, GIF or video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataLayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataLayer&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;gtag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;dataLayer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;gtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;gtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;UA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;249692&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#is-photomosh-free"&gt;
  &lt;/a&gt;
  Is PhotoMosh free?
&lt;/h1&gt;

&lt;p&gt;PhotoMosh-Pro is a one-time purchase with &lt;b&gt;no recurring fees.&lt;/b&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-output-formats-do"&gt;
  &lt;/a&gt;
  What Output Formats do?
&lt;/h1&gt;

&lt;p&gt;Output saves with same size &amp;amp; duration as input with the following limits: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPG - 2048 x 2048 px max size.&lt;/li&gt;
&lt;li&gt;GIF - 640 x 640 px max size. 4 seconds max duration. 20 FPS.&lt;/li&gt;
&lt;li&gt;WEB- 1280 X 1280 px max size. 4 seconds max duration. 10 MBPS Data Rate.

&lt;ul&gt;
&lt;li&gt;WEBM output required with only Chrome or      Firefox.&lt;/li&gt;
&lt;li&gt;WEBM videos may be viewed in the browser or Using &lt;a href="https://www.videolan.org/vlc/index.html"&gt;VLC&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert WEBM to MP4 using &lt;a href="https://handbrake.fr"&gt;Handbrake&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-requirements"&gt;
  &lt;/a&gt;
  What Requirements?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;PhotoMosh requires a recent device with good WebGL capabilities.&lt;/li&gt;
&lt;li&gt;Render quality is only limited by our devices and an GPU speed. Processed large images or videos may make your computer unresponsive or even crash the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="//www.google.com/chrome/fast-and-secure/"&gt;Chrome&lt;/a&gt; recommended.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Django Volt Dashboard - Free Dashboard built with Django 3.2.0 LTS</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 07 Sep 2021 19:52:34 +0000</pubDate>
      <link>https://dev.to/sm0ke/django-volt-dashboard-free-dashboard-built-with-django-3-2-0-lts-2cg3</link>
      <guid>https://dev.to/sm0ke/django-volt-dashboard-free-dashboard-built-with-django-3-2-0-lts-2cg3</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This (short) article presents an open-source &lt;strong&gt;&lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboard&lt;/a&gt;&lt;/strong&gt; updated to use the latest version of Django, a leading web framework written in Python. The &lt;strong&gt;product can be downloaded directly from Github&lt;/strong&gt; and used for hobby &amp;amp; commercial products bases on the permissive (MIT) License. Codebase comes with a few simple features like authentication, database, intuitive codebase and Docker support for an easier deployment in production. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Django Volt Bootstrap 5&lt;/a&gt;&lt;/strong&gt; - product page (contains DEMO &amp;amp; Sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APdsfoJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/django-dashboard-volt/master/media/django-dashboard-volt-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APdsfoJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/django-dashboard-volt/master/media/django-dashboard-volt-intro.gif" alt="Django Volt Dashboard - Simple Dashboard built with Django 3.2.0 LTS."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  Product Features:
&lt;/h2&gt;

&lt;p&gt;Volt Dashboard is a free and open source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages and 3 plugins with Vanilla JS. There are more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, datepickers. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;100+ Components: buttons, alerts, modals, datepickers&lt;/li&gt;
&lt;li&gt;11 Example Pages: Dashboard, SignIN, SignUO, Transactions page&lt;/li&gt;
&lt;li&gt;Vanilla JS - no more jQuery dependency&lt;/li&gt;
&lt;li&gt;Django Codebase: 

&lt;ul&gt;
&lt;li&gt;Latest Dependencies (including Django 3.2.6)&lt;/li&gt;
&lt;li&gt;Docker over Nginx, Gunicorn &lt;code&gt;production-ready&lt;/code&gt; stack&lt;/li&gt;
&lt;li&gt;Simple, intuitive codebase&lt;/li&gt;
&lt;li&gt;SASS to CSS compilation scripts via &lt;code&gt;gulp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Authentication, Forms validation, SQLite persistence &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django Volt&lt;/strong&gt; - Widgets Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDQMs1hF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cc84fxa8ous4j06eez0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDQMs1hF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cc84fxa8ous4j06eez0.png" alt="Django Volt Dashboard - Widgets Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django Volt&lt;/strong&gt; - User Profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBcJz6mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83lua7p09se2sb1tm4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBcJz6mp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t83lua7p09se2sb1tm4e.png" alt="Django Volt Dashboard - Widgets Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The easiest way to start using the product is to use the Docker set up. Here are the steps:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;Download&lt;/a&gt; and UNZIP the product&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ unzip django-dashboard-volt.zip
$ cd django-dashboard-volt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start the product using Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull &lt;span class="p"&gt;;&lt;/span&gt; docker-compose build &lt;span class="p"&gt;;&lt;/span&gt; docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If required, run under &lt;code&gt;sudo&lt;/code&gt; the above command for Linux-based systems. &lt;/p&gt;

&lt;p&gt;Once the app is running on &lt;code&gt;http://localhost:85&lt;/code&gt; we can register a new user and authenticate (project has no default user, we need to create one). &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django Volt&lt;/strong&gt; Login page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGPOoeJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4l5o534d464917fmp1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGPOoeJz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4l5o534d464917fmp1k.png" alt="Django Volt Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For complete information please access the official docs available  on the &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-volt"&gt;product page&lt;/a&gt; or ask for support in &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Admin Dashboards&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published here on Dev.to &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Server side or client side rendering? Vue | React + Rails API</title>
      <author>Lee</author>
      <pubDate>Tue, 07 Sep 2021 19:28:57 +0000</pubDate>
      <link>https://dev.to/leewynne/what-front-end-should-i-choose-for-a-rails-api-app-1kci</link>
      <guid>https://dev.to/leewynne/what-front-end-should-i-choose-for-a-rails-api-app-1kci</guid>
      <description>&lt;p&gt;Hey 👋 &lt;/p&gt;

&lt;p&gt;I am thinking of a side project that will leverage a Rails API backend (because I love it, it makes me happy, no science or general logic involved in that decision).&lt;/p&gt;

&lt;p&gt;The front end is likely to be Vue or React depending on which one integrates with crypto wallet sign in the easiest  (specifically metamask or nami).&lt;/p&gt;

&lt;p&gt;Question: What’s the benefit to doing Vue / React with Rails server side versus client side?&lt;/p&gt;

&lt;p&gt;thanks &lt;/p&gt;

</description>
      <category>rails</category>
      <category>help</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Encoding vs encryption for 📱iOS app devs</title>
      <author>Cossack Labs</author>
      <pubDate>Tue, 07 Sep 2021 19:10:34 +0000</pubDate>
      <link>https://dev.to/cossacklabs/encoding-vs-encryption-for-ios-app-devs-2nll</link>
      <guid>https://dev.to/cossacklabs/encoding-vs-encryption-for-ios-app-devs-2nll</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Anyone&lt;/strong&gt; can install your app from AppStore, decrypt and decode it — and read the data you stored there in a plist. Watch &lt;a href="https://twitter.com/vixentael"&gt;@Anastasiia Voitova&lt;/a&gt; (&lt;a href="https://twitter.com/cossacklabs"&gt;@Cossack Labs&lt;/a&gt;) and &lt;a href="https://twitter.com/V_Pradeilles"&gt;@Vincent Pradeilles&lt;/a&gt; disclosing how to secure your users’ data. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The truth is&lt;/strong&gt; any data you add to your mobile app when developing can be readable because it's a part of an application bundle. &lt;strong&gt;Every single part of your application bundle is public information.&lt;/strong&gt; And all the info you put there massively affects all the app’s users. So, every secret you put there can reveal your app users’ secrets. &lt;/p&gt;

&lt;p&gt;What are the solutions?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚫ If you want to store a particular session/token for the user that your application received during a transition to a backend, you should &lt;strong&gt;put it into a keychain at runtime.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;⚫ If you want to hide some information/tokens that you received in advance while building an application, the good way is to use obfuscation or encryption — probably the easiest is to &lt;strong&gt;split the token and not put it as one string.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Watch this video to get in detail:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Vdsf3o851i0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Often, &lt;strong&gt;plaintext data looks encrypted while it’s just encoded&lt;/strong&gt;. For example, in JWT tokens. Any JWT token is a json encoded in base64 format.&lt;/p&gt;

&lt;p&gt;So, all fields that you add there — email, name, account role, account balance – is stored in plaintext, just &lt;strong&gt;encoded but not encrypted.&lt;/strong&gt; Use sites like jwt.io to find out the token content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJWxDgFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/669c1pvke0u70pyz5qyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJWxDgFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/669c1pvke0u70pyz5qyk.png" alt="Encoded but not encrypted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Here’s a solution:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To avoid revealing sensitive information, &lt;strong&gt;don’t put it&lt;/strong&gt; in JWT — for example, use user ID instead of user email. Also, &lt;strong&gt;make sure that all things that look like encrypted, are really encrypted.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Say hi 👋 to &lt;a href="https://twitter.com/vixentael"&gt;Anastasiia&lt;/a&gt; and &lt;a href="https://twitter.com/V_Pradeilles"&gt;Vincent&lt;/a&gt;!&lt;br&gt;
Follow us for more data security tips and news:&lt;br&gt;
🔥&lt;a href="https://www.cossacklabs.com/"&gt;https://www.cossacklabs.com/&lt;/a&gt;&lt;br&gt;
🔥&lt;a href="https://twitter.com/cossacklabs"&gt;https://twitter.com/cossacklabs&lt;/a&gt; &lt;br&gt;
🔥&lt;a href="https://github.com/cossacklabs"&gt;https://github.com/cossacklabs&lt;/a&gt; &lt;br&gt;
🔥&lt;a href="https://www.linkedin.com/company/cossack-labs/"&gt;https://www.linkedin.com/company/cossack-labs/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>security</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>A Look into a terminal emulator's text stack</title>
      <author>Christian Parpart</author>
      <pubDate>Tue, 07 Sep 2021 19:02:43 +0000</pubDate>
      <link>https://dev.to/christianparpart/look-into-a-terminal-emulator-s-text-stack-3poe</link>
      <guid>https://dev.to/christianparpart/look-into-a-terminal-emulator-s-text-stack-3poe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I am going to describe how I implement rendering text in my terminal emulator so that we get programming ligatures, emoji, variation selectors, and yes, even ZWJ emoji.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Text rendering in a virtual terminal emulator can be as simple as just iterating over each grid cell's character, mapping it to a Font's bitmap glyph, and rendering it to the target surface at the appropriate position. But it can also be as complex as a web browser's text stack[1] if one may want to do it right.&lt;/p&gt;

&lt;p&gt;In contrast to web browsers (or word processors),&lt;br&gt;
terminal emulators are still rendering text the way they did render text 50 years ago - plus some non-standard extensions that did arise over the decades.&lt;/p&gt;

&lt;p&gt;Also, terminal screens weren't made with Unicode in mind, Unicode did not even exist back then, so there were a few workarounds and non-standardized ideas implemented in order to display complex Unicode text and symbols in terminals without a common formal ground that terminal application developers can rely on.&lt;/p&gt;

&lt;p&gt;Text rendering in a terminal emulator puts some additional constraints on how to render, mostly because character placement is decided before text shaping is performed and must align to a fixed-size grid, which makes it almost impossible to properly render traditional Japanese text into the terminal, or Hewbrew right-to-left text (though, there is a handful of virtual terminal emulators that specialize&lt;br&gt;
on the latter and an informal agreement on how to deal with wide characters on the terminal screen).&lt;/p&gt;

&lt;p&gt;Not every character, or to be displayed symbol (such as Emoji) is as wide as exactly one grid cell's width, so additional measurements have to be taken into account for dealing with these characters as well.&lt;/p&gt;

&lt;p&gt;Terminals and terminal applications until now did depend on a standard library API call &lt;code&gt;wcwidth()&lt;/code&gt; that does ideally return the number of grid cells that an input character will occupy. This however became useless as soon as multi codepoint grapheme clusters have been introduced that still form a single user perceived character. &lt;code&gt;wcswidh()&lt;/code&gt; should return the total number of grid cells of a sequence of characters, but these do not handle grapheme clusters nor variation selectors either.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unicode-a-very-quick-rundown-in-the-context-of-terminals"&gt;
  &lt;/a&gt;
  Unicode - a very quick rundown in the context of terminals
&lt;/h2&gt;

&lt;p&gt;Unicode is aiming to have one huge universal space where every imaginable "user perceived character" can be represented. A "user perceived character" is what the user that looks at that character thinks of as one unit. This is in direct contrast to what a character is in computer science. A "user perceived character" can be as simple as one single codepoint (32-bit value representing that&lt;br&gt;
character) and as complex as an ordered sequence of 7 unbreakable codepoints to compose one single "user perceived character".&lt;/p&gt;

&lt;p&gt;This places additional requirements to a virtual terminal emulator where each grid cell SHOULD contain exactly one &lt;em&gt;"user perceived character"&lt;/em&gt; (also known as &lt;em&gt;grapheme cluster&lt;/em&gt;), that is, an unbreakable codepoint sequence of one or more codepoints that must not be broken up into multiple grid cells before the actual text shaping or screen rendering has been performed.&lt;/p&gt;

&lt;p&gt;Also, some grapheme clusters take up more than one grid cell in terms of display width, such as Emoji usually take two grid cells in width in order to merely match the Unicode (TR 51, section 2.2) specification's wording that the best practice to display Emoji is to render them in a square block to match the behavior of the old japanese phone companies that that first introduced Emoji.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-text-a-top-level-view"&gt;
  &lt;/a&gt;
  Rendering text - a top level view
&lt;/h2&gt;

&lt;p&gt;A terminal emulator's screen is divided into fixed width and (not necessarily equal) fixed height grid cells.&lt;br&gt;
When rendering this grid, it is sufficient to iterate over each line and column and render each grid cell individually, at least when doing basic rendering.&lt;/p&gt;

&lt;p&gt;Now, when non-trivial user perceived characters need to be supported, the rendering cannot just render each character individually, but must be first grouped into smaller chunks of text with common shared properties, across the grid cell boundaries.&lt;/p&gt;

&lt;p&gt;Here we enter the world text shaping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-shaping"&gt;
  &lt;/a&gt;
  Text Shaping
&lt;/h2&gt;

&lt;p&gt;Simply put, text shaping is the process of translating a sequence of codepoints into glyphs and their glyph positions. This differs from normal text processors and web browsers in a way because glyph placement in virtual terminal emulators are constrained.&lt;/p&gt;

&lt;p&gt;When shaping text of a single grid line, the line is split into words, delimited by spaces, gaps and SGR attributes, that is, each word must represent the same SGR attributes for every "user perceived character" - for example the text's font style (such as bold or italic) or background color must be equal for each position in this sequence, from now on called "word").&lt;/p&gt;

&lt;p&gt;The word can be used as a cacheable unit, in order to significantly speed up rendering for future renders.&lt;br&gt;
The cache key is composed of the codepoint sequence of that word, as well as, the common shared SGR attributes.&lt;/p&gt;

&lt;p&gt;This cacheable word is further segmented into sub runs by a series categories before text shaping can occur, that is, by Unicode script attribute (such as Latin or Hangul) and by symbol presentation (such as Emoji text presentation or Emoji presentation). This is important because one cannot just pass a string of text to the underlying text shaping engine with mixed properties, such as Hebrew text along with some Latin and Kanji or Emoji in between or a font style change for obvious reasons.&lt;br&gt;
Each segment (usually called run) must be shaped individually with its own set of fallback fonts. Emoji are using a different font and font fallback list than regular text which uses a different font and font fallback list then bold, italic, or bold italic fonts.&lt;br&gt;
Emoji also have two different presentation styles, the one that everybody expects and is named Emoji Emoji presentation (double-width colored Emoji) and the other one is named Emoji text presentation, which renders Emoji in non-colored text-alike pictograms.&lt;/p&gt;

&lt;p&gt;The result of all sub runs is composing the sequence of glyph indices and glyph positions and is used as the cache value for the cacheable word to be passed to the next stage, the text renderer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-rendering"&gt;
  &lt;/a&gt;
  Text Rendering
&lt;/h2&gt;

&lt;p&gt;The text renderer receives an already pre-shaped string of glyphs and glyph positions relative to screen coordinates of the first glyph to be rendered onto the screen.&lt;/p&gt;

&lt;p&gt;In order to lower the pressure on the GPU and reduce synchronization times between CPU and GPU, all glyph bitmaps are stored into a texture atlas on the GPU, such that the text rendering (when everything has been already uploaded once) just needs to deal with indices to those glyph bitmaps into the appropriate texture atlas as well as screen coordinates where to render those glyphs on the target surface.&lt;/p&gt;

&lt;p&gt;There is one texture atlas for gray scaled glyphs (this is usually standard text) as well as one texture atlas for colored glyphs (usually colored Emoji). Additionally there can be a third type of texture atlas for storing LCD anti-aliased bitmap glyphs.&lt;/p&gt;

&lt;p&gt;Now, when rendering a string of glyphs and glyph positions, each glyph's texture atlas ID and atlas texture coordinate is appended into an atlas coordinate array along with each glyph's absolute screen coordinate and color attributes into a vertex buffer to be uploaded to the GPU.&lt;/p&gt;

&lt;p&gt;When iterating over the whole screen buffer has finished, the atlas texture and vertex buffer are filled with all glyphs and related information that are required for rendering one frame. These buffers are then uploaded to the GPU to be drawn in a single GPU render command (such as &lt;code&gt;glDrawArrays&lt;/code&gt;, or &lt;code&gt;glDrawElements&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-terminal-emulator-related-challenges"&gt;
  &lt;/a&gt;
  Other Terminal Emulator related Challenges
&lt;/h2&gt;

&lt;p&gt;Most terminal applications use &lt;code&gt;wcwidth()&lt;/code&gt; to detect the width of a potential "wide character". This is broken by design and a terminal emulator has to deal with such broken client applications. Some however use utf8proc's &lt;code&gt;utf8proc_charwidth&lt;/code&gt;, another library to deal with Unicode,&lt;br&gt;
and maybe some are using &lt;code&gt;wcswidth()&lt;/code&gt;, which doesn't handle grapheme clusters nor variation selectors either.&lt;/p&gt;

&lt;p&gt;The suggested way for future applications (emulator and client) would be to introduce feature detection and mode switching on how to process grapheme clusters and their width, if legacy apps are of concern.&lt;/p&gt;

&lt;p&gt;Just looking at the algorithm, implementing grapheme cluster segmentation isn't too hard but in execution very expensive. Also grapheme cluster width computation is expensive. But luckily, in the context of terminal emulators, both can be optimized for the general case in terminal emulators, which is mostly US-ASCII, and yields almost no penalty with optimizations or a ~60% performance penalty when naively implemented.&lt;/p&gt;

&lt;p&gt;Also, implementing proper text shaping into a fixed-grid terminal wasn't really the easiest when there is no other project or text to look at. I used "Blink's text stack" documentation and the Blink's source code (the Web renderer of Google Chrome) as bases and source of truth to understand this complex topic and then mapped my findings to the terminal world.&lt;/p&gt;

&lt;p&gt;Since text shaping &lt;em&gt;IS&lt;/em&gt; expensive, this cannot be done without caching without severely hurting user experience.&lt;/p&gt;

&lt;p&gt;After investigating into the above optimization possibilities however, I do not see why a terminal emulator should &lt;em&gt;not&lt;/em&gt; do provide support for complex Unicode, as the performance I have achieved so far is above average at least, and therefore should be sufficient for everyday use.&lt;/p&gt;

&lt;p&gt;Bidirectional text was not addressed in this document nor in the implementation in the Contour terminal yet, as this imposes a new set of challenges that have to be dealt with separately. If that is of interest, there are a few terminals (such as mlterm) that have put great effort in getting such scripts into the terminal.&lt;br&gt;
Hopefully this will be eventually added (or contributed) to my project at any time in the future, too and if so, I'll update this document accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If one went through all the pain on how Unicode, text segmentation, and text shaping works, you will be rewarded with a terminal emulator that is capable of rendering complex Unicode. At least as much as most of us desire - being able to use (power user/) programming ligatures and composed Emoji.&lt;/p&gt;

&lt;p&gt;Some terminal emulators do partly support ligatures or rendering trivial single codepoint Emoji or a few of the composed Emoji codepoint sequences, but sadly, most seem to get Emoji wrong. While this is a great start, I'd say we can deliver better and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;I'd like to see the whole virtual terminal emulator world to join forces and agree on how to properly deal with complex text in a somewhat future-proof way.&lt;/p&gt;

&lt;p&gt;And while we would be in such an ideal world, we could even throw away all the other legacies that are inevitably inherited from the ancient VT standards that are partly even older than I am. What would we be without dreams. ;-)&lt;/p&gt;

&lt;p&gt;Some other terminal emulator developers and I have&lt;br&gt;
&lt;a href="https://github.com/contour-terminal/contour/issues/404"&gt;started to address&lt;/a&gt; at least some of the many Unicode problems that are up until now undefined behavior by creating a &lt;a href="https://github.com/contour-terminal/terminal-unicode-core"&gt;formal specification&lt;/a&gt; on how a terminal emulator should behave in a backward and forward compatible way so that app developers and users will benefit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/platform/fonts/README.md"&gt;Blink's text stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unicode.org/reports/tr11/"&gt;UTS 11&lt;/a&gt; - character width&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unicode.org/reports/tr24/"&gt;UTS 24&lt;/a&gt; - script property&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unicode.org/reports/tr29/"&gt;UTS 29&lt;/a&gt; - text segmentation (grapheme cluster, word boundary)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unicode.org/reports/tr51/"&gt;UTS 51&lt;/a&gt; - Emoji&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>terminal</category>
      <category>unicode</category>
      <category>emoji</category>
    </item>
    <item>
      <title>JavaScript - Strategy pattern 🧠</title>
      <author>Emi Castellano</author>
      <pubDate>Tue, 07 Sep 2021 18:46:54 +0000</pubDate>
      <link>https://dev.to/emi_castellano/javascript-strategy-pattern-f79</link>
      <guid>https://dev.to/emi_castellano/javascript-strategy-pattern-f79</guid>
      <description>&lt;p&gt;Do you want to avoid writing multiple if/else if or switch statement with a bunch of cases inside?&lt;/p&gt;

&lt;p&gt;The strategy pattern can help us with that.&lt;/p&gt;

&lt;p&gt;Imagine we have a use case where the user can sign up using different methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Auth&lt;/li&gt;
&lt;li&gt;Facebook Auth&lt;/li&gt;
&lt;li&gt;Form submission&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We want to avoid this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOOGLE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FACEBOOK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Google auth code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;facebookAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Facebook Auth code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSubmissionAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Form submission code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAuthentication&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;googleAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;facebookAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;formSubmissionAuth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How can we improve this using the strategy pattern?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOOGLE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FACEBOOK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Google auth code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;facebookAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Facebook Auth code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formSubmissionAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... Form submission code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authenticationStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;googleAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;facebookAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;formSubmissionAuth&lt;/span&gt;
&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;authenticationStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we want to pass parameters to some of the strategy functions, we can do it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authenticationStrategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GOOGLE&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;googleAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;facebookAuth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AUTH_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FORM_SUBMISSION&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;formSubmissionAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strategyPattern&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The strategy pattern, returns an object with key/value pair and what determines which key is the one to be "executed" is the &lt;code&gt;[method]&lt;/code&gt; at the end, this is the dependency of our function, whatever value we pass there it will be mapped to the corresponding object key.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Install &amp; Configure Git On Computer?</title>
      <author>Mansoor Ahmed</author>
      <pubDate>Tue, 07 Sep 2021 18:32:44 +0000</pubDate>
      <link>https://dev.to/ahmedmansoor012/how-to-install-configure-git-on-computer-284l</link>
      <guid>https://dev.to/ahmedmansoor012/how-to-install-configure-git-on-computer-284l</guid>
      <description>&lt;p&gt;Installation of Git on computers has become incredibly easy in recent times. There are one-click installers for both Mac and Windows.&lt;br&gt;
Installing Git on Windows&lt;br&gt;
On Windows, we will download the “Git for Windows” package from here: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://git-for-windows.github.io/"&gt;https://git-for-windows.github.io/&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;When running the installer EXE, you ought to choose the default options on each screen. After finishing the installation, you’ll begin working with Git by starting the “Git Bash” application. You‘ll find it within the Windows START menu, inside the “Git” folder: Installing Git on Mac OS On Mac OS X, a one-click installer package is out there which will be downloaded from here: &lt;a href="https://sourceforge.net/projects/git-osx-installer/"&gt;https://sourceforge.net/projects/git-osx-installer/&lt;/a&gt; Once this is often installed, we will jump right into Git by starting the “Terminal. app” on our Mac. We‘ll find this within the “Utilities” subfolder of our “Applications” folder in Finder:&lt;/p&gt;

&lt;p&gt;Configuring Git&lt;br&gt;
A couple of very basic configurations should be made before we start. We should always set our name and email address also as enable coloring to doll up command outputs:&lt;/p&gt;

&lt;p&gt;$ git config –global user.the name “John Doe”&lt;/p&gt;

&lt;p&gt;$ git config –global user.email “&lt;a href="mailto:john@doe.org"&gt;john@doe.org&lt;/a&gt;”&lt;/p&gt;

&lt;p&gt;$ git config –global color.ui auto&lt;/p&gt;

&lt;p&gt;The Basic Workflow of Version Control &lt;br&gt;
Before we stray in Git commands, we ought to understand what a basic workflow with version control seems like. We‘ll rehearse each step intimately later during this book. But first, let‘s get an understanding of what the workflow, generally, is like. the foremost basic building block of version control may be a “repository”.&lt;/p&gt;

&lt;p&gt;Getting such a repository on our local machine is often wiped out in two ways: If we have a project locally on our computer that’s not yet under version control, we will initialize a replacement repository for this project. If we‘re aged board a project that‘s already running, the likelihood is that there’s a repository on a foreign server (on the web or on our local network). We‘ll then probably be given a URL to the present repository that we’ll then “clone” (download/copy) to our local computer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As soon as we’ve got an area repository, we’ll start performing on our files: modify, delete, add, copy, rename, or move files in whatever application (our favorite editor, a file browser, …) we favor . during this step, we don‘t have to be careful with love or money. Just make any changes necessary to maneuver our project forward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It‘s only you are feeling you‘ve reached an interesting state that we’ve to think about version control again. Then it‘s time to conclude our changes during a commit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, before we commit, we‘ll want to urge a summary of what we‘ve changed thus far. In Git, we‘ll use the “status” command to urge an inventory of all the changes we performed since the last commit: which files did we change? Did we create any new ones or delete some old ones?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we tell Git which of our local changes we would like to conclude within the next commit. Only because a file was changed doesn‘t mean it’ll be a part of a subsequent commit! Instead, we’ve to explicitly decide which changes we want to incorporate. to try to do this, we add them to the so-called “Staging Area”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, having added some changes to the area, it‘s time to truly commit these changes. We‘ll need to add a brief and meaningful message that describes what you really did. The commit will then be recorded in our local Git repository, marking a replacement version of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From time to time, we‘ll want to possess a glance at what happened within the project – especially if we‘re working alongside people. The “log” command lists all the commits that were saved in chronological order. This allows us to ascertain which changes were made intimately and helps us comprehend how the project evolved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also when collaborating with others, we‘ll both want to share (some of) our changes with them and receive the changes they made. a foreign repository on a server is employed to form this exchange possible.&lt;br&gt;
For more details visit:&lt;a href="https://www.technologiesinindustry4.com/2021/05/how-to-install-configure-git-on-computerhtml"&gt;https://www.technologiesinindustry4.com/2021/05/how-to-install-configure-git-on-computerhtml&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>githunt</category>
    </item>
    <item>
      <title>Tutorial Hell 101✅✅</title>
      <author>Suryaraj Bhaduri</author>
      <pubDate>Tue, 07 Sep 2021 18:32:41 +0000</pubDate>
      <link>https://dev.to/suryaraj1/tutorial-hell-101-8bc</link>
      <guid>https://dev.to/suryaraj1/tutorial-hell-101-8bc</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Tutorial Hell🔥?&lt;/strong&gt;&lt;br&gt;
Well this is a situation in which the learner always feels incompetent or scared to implement things out on their own and relies heavily on tutorials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does one land up in Tutorial Hell?🤔&lt;/strong&gt;&lt;br&gt;
There's no one answer to this, but usually this situation is common in beginners or people trying to master a new skill. At that point they need quick explanation and depend on video tutorials which is a good idea.But over consumption of tutorials leads to a form of dependency which becomes hard to overcome in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do I know if I am in Tutorial Hell or not?😨&lt;/strong&gt;&lt;br&gt;
These are some of the situations that might be an indicator of the same - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You find yourself busy watching video tutorials most of the time&lt;/li&gt;
&lt;li&gt;You think you will not be able to code without an instructor's guidance&lt;/li&gt;
&lt;li&gt;You keep course shopping or spend time on course websites thinking of getting that one course that might teach you the topic the best way possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Looks like I am in hell, any idea how to move out of it?🏃&lt;/strong&gt;&lt;br&gt;
No issues. Firstly don't panic and get yourself a glass of water. Now showing you the way out of this place. Well there's only one way I know of which is - &lt;em&gt;"start doing things on your own"&lt;/em&gt;.You will make mistakes, and this might seem very hard at the beginning and even at later stages, but the key 🔑 is to never,ever give up.Am I saying you should never watch tutorials? Absolutely not! You should always go for tutorials whenever you feel like, but its just that the frequency should be lesser than what it was previously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How I got myself out of the hell?&lt;/strong&gt;&lt;br&gt;
Like many of you budding developers out there, I was in the same place. Was finding it very hard to get out of the same. I was trying to learn front-end web development. Although I had previous knowledge of computer programming, still I faced lot of issues and fear in initial days. Gradually I made up my mind to take on projects on my own and started with the simplest of projects. This helped🎉.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important Note👈&lt;/strong&gt;&lt;br&gt;
If you are in the process of moving out of tutorial hell, you are basically trying to move out of your comfort zone which can be extremely hard. Make sure to not over stress yourself ,take ample rest, drink water, workout and rejuvenate yourself from time to time. This might help make the process a little easier.&lt;/p&gt;

&lt;p&gt;P.S - This is my first ever blog.There are surely tons of things I missed and many places I went wrong. Do let me know in the comments.😄&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
