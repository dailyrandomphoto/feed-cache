<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Emulate Devices on Google Chrome</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 28 Sep 2021 16:58:17 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</link>
      <guid>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</guid>
      <description>&lt;p&gt;When building websites, you have to keep in mind that many kinds of device are going to be viewing your site. These devices will come with different screen orientations. &lt;/p&gt;

&lt;p&gt;Thus, making your website look good on mobile, tablets and desktop is vital. &lt;/p&gt;

&lt;p&gt;You don’t need to use third party tools to test your website. Google Chrome comes with an in-built device simulator. You can select any of the devices and view how your page will look on that device. You can even add custom devices which are not included in the list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simulate-a-device-on-chrome"&gt;
  &lt;/a&gt;
  Simulate a device on Chrome
&lt;/h3&gt;

&lt;p&gt;Open the Chrome DevTool. You can do this by clicking on F12.&lt;/p&gt;

&lt;p&gt;Alternatively, you can click on the three dots on the top right corner of your broswer window, select &lt;strong&gt;more tools&lt;/strong&gt; and then &lt;strong&gt;developer tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, toggle the device view by click on the devices icon next to the elements tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" alt="Toggle device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your page will be rendered into device mode. You will also notice the dropdown menu on top. From this drop down menu, you can select the device you want to emulate and view how you page will look on it.&lt;/p&gt;

&lt;p&gt;The list of devices on the dropdown is limited. You can also edit the list to select and add other devices to the drop-down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-custom-devices"&gt;
  &lt;/a&gt;
  Adding custom devices
&lt;/h3&gt;

&lt;p&gt;You can also create and add custom devices. To do so, click on the custom devices button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" alt="Add devices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to input the height and width of your target device, as well as its pixel density.&lt;/p&gt;

&lt;p&gt;You can find the screen resolution of any mobile device at this  &lt;a href="https://www.webmobilefirst.com/"&gt;website&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;You will also need to add a user agent string. A user agent string is a string of containing information about the computer requesting a web page.&lt;/p&gt;

&lt;p&gt;This website has the user agent string for  &lt;a href="https://deviceatlas.com/blog/list-of-user-agent-strings"&gt;all common devices&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Finally you can add the device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" alt="preview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will be able to emulate that device and test your web page on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Device emulators are very good for responsive design. It's important to note that simulation in this case is just the visual part. The web browser does not run the operating system.&lt;/p&gt;

&lt;p&gt;Don't forget to sign up for my  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;newsletter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>OutSystems: the journey to a $9.5B valuation </title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 28 Sep 2021 16:24:11 +0000</pubDate>
      <link>https://dev.to/linearb/outsystems-the-journey-to-a-9-5b-valuation-gdd</link>
      <guid>https://dev.to/linearb/outsystems-the-journey-to-a-9-5b-valuation-gdd</guid>
      <description>&lt;p&gt;Paulo Rosado founded OutSystems in 2001 with a vision to give every company the power to build software fast, right, and for the future. Today, 20 years later, Paulo remains CEO and OutSystems is valued at more than $9.5 billion.&lt;/p&gt;

&lt;p&gt;Paulo’s incredible journey is the topic of this week’s episode of the Dev Interrupted podcast. Listen to Paulo as he tells the origin story of OutSystems, how he avoided bankruptcy on three separate occasions, his advice for becoming a successful leader, and why technical debt is a growing threat that will cost companies $5 trillion over the next 10 years.&lt;/p&gt;

&lt;p&gt;OutSystems’ Technical Debt Report: &lt;a href="https://www.outsystems.com/stop-tech-debt/"&gt;https://www.outsystems.com/stop-tech-debt/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1Upd99Drq75d6WQK62e73X"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Founding story of OutSystems&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to be a successful leader by creating context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Key drivers of technical debt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Budget costs associated with technical debt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The importance of building cloud ready products&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This week is your last chance to register for INTERACT&lt;/strong&gt;, Dev Interrupted's community-driven, digital conference on &lt;strong&gt;September 30th&lt;/strong&gt; - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, &lt;strong&gt;all free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#save-your-seat"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Save your seat&lt;/a&gt;
&lt;/h1&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 1700 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mwbcnd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APPi3XnTIZrKrxgPL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Mwbcnd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APPi3XnTIZrKrxgPL.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/outsystems-the-journey-to-a-9-5b-valuation/"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>podcast</category>
      <category>leadership</category>
    </item>
    <item>
      <title>3 Must-Install NPM Packages to Write High-Quality React Code</title>
      <author>Remi W.</author>
      <pubDate>Tue, 28 Sep 2021 16:20:19 +0000</pubDate>
      <link>https://dev.to/ixartz/3-must-install-npm-packages-to-write-high-quality-react-code-4jm</link>
      <guid>https://dev.to/ixartz/3-must-install-npm-packages-to-write-high-quality-react-code-4jm</guid>
      <description>&lt;p&gt;As a React developer, you spend your time writing JavaScript code. Programming isn't an easy task. Indeed, you're requested to write high-quality code and at the same time writing code without any bugs. For all my projects, I always install these NPM packages to make my React code better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-checking-typescript"&gt;
  &lt;/a&gt;
  Type checking TypeScript
&lt;/h2&gt;

&lt;p&gt;I've started programming with PHP, a very permissive programming language like JavaScript. It was an easy language to start with but a nightmare to maintain or program when your applications start growing.&lt;/p&gt;

&lt;p&gt;I discover a new world with strongly typed languages like C/C++ or Java. One major advantage of strongly typed language is to catch errors earlier in the development process. In the end, you write better code with fewer bugs in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, C/C++, Java or even PHP you cannot run in browsers. The current browsers support only the JavaScript programming language. But, the good news, there is an alternative to this with TypeScript, a strongly typed programming language that can transpile to JavaScript. So, 100% compatible with JavaScript and your browser can run it without any issue.&lt;/p&gt;

&lt;p&gt;Recently, TypeScript grows in popularity among JS community. Now, almost all NPM packages provide support for TypeScript. In most NPM package documentation, you can find references on how to install and use with TypeScript.&lt;/p&gt;

&lt;p&gt;So, now all my React projects are written in TypeScript and can't live without it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#js-linter-eslint"&gt;
  &lt;/a&gt;
  JS linter ESLint
&lt;/h2&gt;

&lt;p&gt;Another dependency I use in combination with TypeScript is ESLint, a JavaScript linter. But also compatible with TypeScript. A tool to catch errors, bugs and styling issues in your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" alt="ESLint JS linter logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ESLint comes up with tons of rules for JavaScript where your code needs to follow. For example, you can indicate ESLint to raise an error when there are tabs instead of spaces in the source code.&lt;/p&gt;

&lt;p&gt;You can define all the rules one by one but it's extremely time-consuming to do it yourself. Thankfully, you can use some already configured rules for ESLint with &lt;a href="https://www.npmjs.com/package/eslint-config-airbnb"&gt;ESLint config Airbnb&lt;/a&gt;, one of the most famous shared ESLint configs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-formatter-prettier"&gt;
  &lt;/a&gt;
  Code formatter Prettier
&lt;/h2&gt;

&lt;p&gt;In ESLint, you can enforce your preference to a JS code style, but the options are limited. The best way to have a consistent look for your code is to use Prettier on top of ESLint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" alt="Code formatter Prettier logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prettier parses your JavaScript code and reformat your code more nicely. It won't change the logic of your code but make your code more pleasant to read.&lt;/p&gt;

&lt;p&gt;Now, your team and you have the same coding style. It makes the development experience much more pleasant to write code. For new developers in your codebase, they can also ramp up more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-boilerplate-with-typescript-eslint-and-prettier"&gt;
  &lt;/a&gt;
  React Boilerplate with TypeScript, ESLint and Prettier
&lt;/h2&gt;

&lt;p&gt;Hoping this article convinces you to use these tools. If you don't want to lose your time configuring them and learn how to use them, I've open-sourced my &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;React Boilerplate on GitHub&lt;/a&gt;. The perfect template to start any React projects with Next JS and Tailwind CSS.&lt;/p&gt;

&lt;p&gt;In the same principle, if you're currently building a SaaS, I've built a &lt;a href="https://nextlessjs.com"&gt;React SaaS Boilerplate Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Using FastImage to detect image dimensions in Ruby</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 28 Sep 2021 15:58:51 +0000</pubDate>
      <link>https://dev.to/ben/using-fastimage-to-detect-image-dimensions-in-ruby-43d7</link>
      <guid>https://dev.to/ben/using-fastimage-to-detect-image-dimensions-in-ruby-43d7</guid>
      <description>&lt;p&gt;On Forem (the open source software that powers DEV, etc.) we have these display units with customizable content an admin can set.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VeEqWAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu9vvi4vfj14vzxjq5tc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VeEqWAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu9vvi4vfj14vzxjq5tc.png" alt="Display units"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, this contains an image... which will need to load asynchronously as all images do in HTML. If &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; are set, then the browser will save the space for the image to take up once it fully loads. If these values are not set (and no custom styles are set), this will cause the page content to "jump", which is not good for UX, and is penalized by Google as "cumulative layout shift"...&lt;/p&gt;

&lt;p&gt;More on cumulative layout shift:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgwIhvJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1M1qt9Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png" alt="ben"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ben/fixing-cumulative-layout-shift-41ja" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Fixing Cumulative Layout Shift&lt;/h2&gt;
      &lt;h3&gt;Ben Halpern ・ Jan 19 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;These images are &lt;em&gt;user-generated-content&lt;/em&gt;, and we do not want to ask admins to manually declare the image size. They may get it wrong, but even if they get it right, it's not exactly the best use of their time if the application can handle it for them.&lt;/p&gt;

&lt;p&gt;Detecting image dimensions is not rocket science, but you don't want to reinvent the wheel or do it inefficiently. Enter FastImage.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sdsykes"&gt;
        sdsykes
      &lt;/a&gt; / &lt;a href="https://github.com/sdsykes/fastimage"&gt;
        fastimage
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      FastImage finds the size or type of an image given its uri by fetching as little as needed
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="textile"&gt;
&lt;p&gt;&lt;a href="https://rubygems.org/gems/fastimage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c0f1daddc26d5887a0ae5fffa04492c20e9c8e5577425aed3a372772fe15a87d/68747470733a2f2f696d672e736869656c64732e696f2f67656d2f64742f66617374696d6167652e737667" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://travis-ci.org/sdsykes/fastimage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dd09e24cf2d85227a7562dbb788aed095a3220a951facd82c4e2904df7ddf251/68747470733a2f2f7472617669732d63692e6f72672f736473796b65732f66617374696d6167652e7376673f6272616e63683d6d6173746572" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
FastImage&lt;/h1&gt;
&lt;h4&gt;
FastImage finds the size or type of an image given its uri by fetching as little as needed&lt;/h4&gt;
&lt;h2&gt;
The problem&lt;/h2&gt;
&lt;p&gt;Your app needs to find the size or type of an image.  This could be for adding width and height attributes to an image tag, for adjusting layouts or overlays to fit an image or any other of dozens of reasons.&lt;/p&gt;
&lt;p&gt;But the image is not locally stored – it’s on another asset server, or in the cloud – at Amazon S3 for example.&lt;/p&gt;
&lt;p&gt;You don’t want to download the entire image to your app server – it could be many tens of kilobytes, or even megabytes just to get this information.  For most common image types (&lt;span&gt;GIF&lt;/span&gt;, &lt;span&gt;PNG&lt;/span&gt;, &lt;span&gt;BMP&lt;/span&gt; etc.), the size of the image is simply stored at the start of the file.  For &lt;span&gt;JPEG&lt;/span&gt; files it’s a little bit more complex, but even…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sdsykes/fastimage"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;FastImage inspects the image and and read the minimal information needed for the task, in this case determining dimensions. In Forem, we already had in place a process for proxying the images so that they are served by the appropriate CDN instead of direct from the upload source, so adding FastImage was a matter of adding this as an option to that step in the process.&lt;/p&gt;

&lt;p&gt;I added an option in our image manipulation step called &lt;code&gt;synchronous_detail_detection&lt;/code&gt; which, if true, takes the time to inspect images and output the proper attributes.&lt;/p&gt;

&lt;p&gt;Doing this synchronously is the least complicated way to do this, and I felt like it was appropriate for this functionality given that it is only used by &lt;em&gt;admins&lt;/em&gt;. When we use FastImage to detect details on posts, which can be created by any member of the site, it makes more sense to do this inspection asynchronously to ensure a post with 15 images can successfully save without timing out.&lt;/p&gt;

&lt;p&gt;The code for the functionality described is all visible in this pull request, where I made several changes to clean up this particular functionality.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/14789"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Fix inconsistencies with DisplayAd
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#14789&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Btd6rDfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/14789"&gt;&lt;time&gt;Sep 22, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Refactor&lt;/li&gt;
&lt;li&gt;[x] Feature&lt;/li&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;li&gt;[ ] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;At the core of this PR, is adding back in sanitation so that we allow for a consistent, safe interface for creating &lt;code&gt;DisplayAd&lt;/code&gt; content. It's currently awkward and fairly unsafe to use this functionality for many creators. This fixes things.&lt;/p&gt;
&lt;p&gt;Therefore removes this code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# Temporarily disable the sanitisation in order to launch the SheCoded Campaign.
# TODO: find an alternate solution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think the core purpose of this is well in the rearview for Forem and DEV needs.&lt;/p&gt;
&lt;p&gt;This does remove the capacity for inline styles (not immediately breaking existing stuff, but will on re-save of anything), but adds the same wrapping class to the left-hand ads as the right. This should be a big win for visual consistency while still providing a lot of flexibility as far as how admins might choose to use this functionality.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3102842/134362591-c7d4150e-e0cd-4c83-8846-619a559e5846.png" rel="nofollow"&gt;&lt;img width="261" alt="Screen Shot 2021-09-21 at 1 25 55 PM" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeACW1Me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3102842/134362591-c7d4150e-e0cd-4c83-8846-619a559e5846.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This also fixes the issue of &lt;code&gt;DisplayAdEvent&lt;/code&gt; tracking only working for the left ad and not the right ad. This now works across the board, meaning we track impressions and clicks.&lt;/p&gt;
&lt;p&gt;We already use a functionality called &lt;code&gt;for_display&lt;/code&gt; to determine which ad to display in order to reward top performing display units on average, but without consistent and complete implementation of the click tracking, it is hard for admins to understand how to use this functionality and we can't really document it properly.&lt;/p&gt;
&lt;p&gt;I also added one new location: &lt;code&gt;left_sidebar_2&lt;/code&gt; which will now allow admins to set two units on the left if they choose to, and they all work with the same consistency.&lt;/p&gt;
&lt;p&gt;This also uses &lt;code&gt;FastImage&lt;/code&gt; to detect image aspect ratios so they display without the page jumping when rendered without being cached. E.g. like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3102842/134372470-ff602677-60b2-4fea-97e5-fbea214c4953.mov" rel="nofollow"&gt;https://user-images.githubusercontent.com/3102842/134372470-ff602677-60b2-4fea-97e5-fbea214c4953.mov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All in all this should provide clarity and stability to allow admins to make more use of these features. We sure will be able to take advantage of this on DEV.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Please replace this line with instructions on how to test your changes, a note
on the devices and browsers this has been tested on, as well as any relevant
images for UI changes.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-ui-accessibility-concerns" class="anchor" href="#ui-accessibility-concerns"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;UI accessibility concerns?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;If your PR includes UI changes, please replace this line with details on how
accessibility is impacted and tested. For more info, check out the
&lt;a href="https://developers.forem.com/frontend/accessibility" rel="nofollow"&gt;Forem Accessibility Docs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-addedupdated-tests" class="anchor" href="#addedupdated-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added/updated tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Yes&lt;/li&gt;
&lt;li&gt;[ ] No, and this is why: &lt;em&gt;please replace this line with details on why tests
have not been included&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I need help with writing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-forem-core-team-only-how-will-this-change-be-communicated" class="anchor" href="#forem-core-team-only-how-will-this-change-be-communicated"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;[Forem core team only] How will this change be communicated?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Will this PR introduce a change that impacts Forem members or creators, the
development process, or any of our internal teams? If so, please note how you
will share this change with the people who need to know about it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This will provide an opportunity to add more clear and detailed docs of how this functionality works.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] I plan to make a PR into to the admin docs myself when this is merged.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/14789"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Find Unplanned Work And Match Developer Effort To The Right Project With LinearB Matchmaker</title>
      <author>Nick Hodges</author>
      <pubDate>Tue, 28 Sep 2021 15:58:20 +0000</pubDate>
      <link>https://dev.to/linearb/find-unplanned-work-and-match-developer-effort-to-the-right-project-with-linearb-matchmaker-1bpn</link>
      <guid>https://dev.to/linearb/find-unplanned-work-and-match-developer-effort-to-the-right-project-with-linearb-matchmaker-1bpn</guid>
      <description>&lt;p&gt;Even the best developers sometimes find themselves investing time into unplanned work that is not aligned to current team priorities.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The CEO asks for something urgent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A shiny new object becomes a distraction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s a misunderstanding about priorities.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes devs are working on the right priority but it looks to teammates and leaders like they’re not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Branches/PRs are not linked to the project ticket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project tickets status is not up-to-date.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unplanned work is the #1 cause of missed deadlines and miscommunications&lt;/strong&gt; between engineering and business. But not all unplanned work is bad!&lt;/p&gt;

&lt;p&gt;Does this story sound familiar? 👇&lt;/p&gt;

&lt;p&gt;Developer starts working on a new feature. The new feature relies on an old part of the code base with ugly technical debt. Developer decides to fix tech debt because A) it will make the product better overall, B) it will make building the feature easier and faster and C) it will help the new feature work better for customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unplanned work is the #1 cause of missed deadlines and miscommunications&lt;/strong&gt;. We built Matchmaker to deal with that.&lt;br&gt;
&lt;a href="https://linearb.io/get-started-linearb/"&gt;Get it now. Free for dev teams&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a win, win, win, right? Yes, at LinearB we encourage our developers to exercise this judgement. Except on some teams this decision could create confusion because the work is unplanned and undocumented. If we rely on individuals to manually communicate these changes verbally or in our ticketing system (🤣🤣🤣), we may not find out about them until it’s too late, if at all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To empower every developer to be a decision maker and ensure all work is correctly attributed to the right project, we built &lt;em&gt;Matchmaker&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matchmaker starts in &lt;a href="https://linearb.io/blog/linearb-pulse-view-release/"&gt;LinearB Pulse&lt;/a&gt;. Since Pulse correlates your Git activity to your project stories in real-time, it knows when you’re writing code in a branch that is not connected to a project story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4F3R_26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuugyi7mlahl1s3bhpn2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4F3R_26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uuugyi7mlahl1s3bhpn2.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But here, we are interested in the text in the upper right where you are told how many branches are unlinked to project work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1pE-GiQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39y1kyz87jj61j6hdppy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1pE-GiQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39y1kyz87jj61j6hdppy.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we see that the code base has a total of six branches that aren’t linked to work tickets. If you click on the text, you get taken down lower on the page to look at the specifics about these unlinked branches:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKCQy2dL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbq4eoebrb88hy4m4zzz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKCQy2dL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbq4eoebrb88hy4m4zzz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the unlinked branches. You can see the branch names, who is working in them, and what the level of effort is on each one.&lt;/p&gt;

&lt;p&gt;In one of the branches, highlighted above, we have some code that isn’t linked to a work ticket. The small purple dot indicates that the work was done mid-sprint, but wasn’t reviewed and merged. Not only that, but it’s been waiting a while for that review. If you are a manager, you probably need to look into that and find out what is going on.&lt;/p&gt;

&lt;p&gt;If you are a developer, you want to know that what your working on isn’t being properly tracked.&lt;/p&gt;

&lt;p&gt;This particular branch is &lt;a href="https://medium.com/@sukhrobgolibboev/importance-of-refactoring-software-da13417f3b1f"&gt;refactoring work&lt;/a&gt; — effort that is valuable and needed but that doesn’t tie back to a specific project task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coming Soon!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We aren’t standing pat. Matchmaker is improving in the near future.&lt;/p&gt;

&lt;p&gt;Coming soon, we’ll be integrating this feature with Slack Alerts. If a developer creates or commits to a branch that isn’t associated with an issue, a personal alert will be sent to that developer on Slack, immediately making them aware.&lt;/p&gt;

&lt;p&gt;In addition, we’ll make it even easier to take action on that alert by allowing you to connect an unmatched branch to the correct project tool ticket, right in Slack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, this feature lets you see what is happening and correct it if need be. You can see the extra work that developers are doing outside of the “official” work that they are supposed to be doing. Maybe the work is okay and you can make it official. Maybe it’s not and you need to redirect the developer back to the proper tasks.&lt;/p&gt;

&lt;p&gt;There are benefits for the developers as well — perhaps a developer created the branch and didn’t properly name it. She can see that and correct it. She can get noticed for refactoring and reworking code.&lt;/p&gt;

&lt;p&gt;Either way, Matchmaker solves a number of problems for you. Shadow Work can derail your project. Being able to see it allows you to do something about it. You can peer into your code base in a new way to ensure that the work that is being done is work that should be getting gone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matchmaker is triggered when a branch name doesn’t match your team’s naming convention. Here at LinearB we name our branches with our project tool’s ticket number, like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PROJ-3435-some-new-feature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We then include the ticket number “ &lt;strong&gt;PROJ-3435&lt;/strong&gt; “ in our branch name and LinearB sees that and knows that a properly named branch is associated with that ticket.&lt;/p&gt;

&lt;p&gt;It also knows that a Pull Request is associated with a ticket in the same way.&lt;/p&gt;

&lt;p&gt;Branches that are worked on that don’t match the naming convention are highlighted by Matchmaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matchmaker is new and powerful. It will save you time and keep things in order by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Finding code not attached to a project story&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Visualizing the size and scope of activity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helping you match the work to the right project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alerting the developer privately in Slack (&lt;strong&gt;&lt;em&gt;Coming Soon!)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Matching the branch to the right story with one click (&lt;strong&gt;&lt;em&gt;Coming Soon!)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://app.linearb.io"&gt;Give it a try today!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://linearb.io/blog/unplanned-work-matchmaker/"&gt;https://linearb.io&lt;/a&gt; on April 16, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>monitoring</category>
      <category>leadership</category>
      <category>management</category>
    </item>
    <item>
      <title>Why JavaScript will always need Transpilers and Polyfills</title>
      <author>Rohit Dhatrak</author>
      <pubDate>Tue, 28 Sep 2021 15:27:18 +0000</pubDate>
      <link>https://dev.to/rohitdhatrak/why-javascript-will-always-need-transpilers-and-polyfills-45bk</link>
      <guid>https://dev.to/rohitdhatrak/why-javascript-will-always-need-transpilers-and-polyfills-45bk</guid>
      <description>&lt;p&gt;This blog post was originally published  &lt;a href="https://www.rohitdhatrak.com/backwards-forwards-compatibility/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;To understand why we’ll always need transpilers and polyfills let's take a look at Backwards and Forwards compatibility in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backwards-compatibility"&gt;
  &lt;/a&gt;
  Backwards compatibility
&lt;/h2&gt;

&lt;p&gt;Backwards compatibility means that once something is added to the language there won’t be any changes in the future that cause it to become invalid.&lt;/p&gt;

&lt;p&gt;Think about this for a second. This assurance is no small thing, right?&lt;/p&gt;

&lt;p&gt;We certainly shouldn’t take it for granted. This has a huge impact on decisions involving adding something to the language. Because once it is added we can't remove it just like that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_O72FSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/4xYdJ6ySbfUAAAAd/tata-bye-bye-rahul-gandhi-funny-meme.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_O72FSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/4xYdJ6ySbfUAAAAd/tata-bye-bye-rahul-gandhi-funny-meme.gif" alt="https://c.tenor.com/4xYdJ6ySbfUAAAAd/tata-bye-bye-rahul-gandhi-funny-meme.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are not going to wake up one day and find our code has just stopped running. Because of this assurance we, JavaScript developers can sleep peacefully and it makes choosing JavaScript a safe bet.&lt;/p&gt;

&lt;p&gt;But there are some exceptions to this.🙃 JavaScript has a few backwards-incompatible changes. However, the JavaScript committee is very careful in doing so.&lt;/p&gt;

&lt;p&gt;They study the code on the web by gathering data from the browsers to get an estimate of the impact. They make the change only if the impact is going to be minimal and if the browsers are willing to take the brunt from the change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forwards-compatibility"&gt;
  &lt;/a&gt;
  Forwards Compatibility
&lt;/h2&gt;

&lt;p&gt;Forwards compatibility means new syntax would be able to run in an old JavaScript engine. That is if we take some code that was added to the language in 2019 it should be able to run in a JavaScript engine from 2015, 2010 or any previous years.&lt;/p&gt;

&lt;p&gt;JavaScript is &lt;strong&gt;not&lt;/strong&gt; forwards compatible.&lt;/p&gt;

&lt;p&gt;On the contrary HTML and CSS are forwards compatible but not backwards compatible.&lt;/p&gt;

&lt;p&gt;If we take some old HTML or CSS from 2005 it might not run or produce the same results. On the other hand, if we run modern-day HTML or CSS in an old browser it will just skip over the parts it doesn’t recognize, while the rest would be processed accordingly.&lt;/p&gt;

&lt;p&gt;This is possible because HTML and CSS are declarative and it is easier to skip over the stuff that is not recognizable. However, just imagine if the JavaScript engine starts to skip stuff that it doesn't recognize we'll get errors and bugs left and right in our code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBXgqNA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://y.yarn.co/66980f5e-23c0-4765-9c38-677cbf2d6126_text.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBXgqNA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://y.yarn.co/66980f5e-23c0-4765-9c38-677cbf2d6126_text.gif" alt="https://y.yarn.co/66980f5e-23c0-4765-9c38-677cbf2d6126_text.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll have to support some older versions of the browser because everyone doesn't have the latest version. So if we can’t run new code on an old engine should we always stick to an older syntax based on the oldest engine we need to support?&lt;/p&gt;

&lt;p&gt;This is where the tools come in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transpilers"&gt;
  &lt;/a&gt;
  Transpilers
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Source-to-source_compiler"&gt;transpiler&lt;/a&gt; will convert a new syntax to an older syntax.&lt;/p&gt;

&lt;p&gt;The most commonly used transpiler is &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, consider the following snippet of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run this in an older version of a browser where &lt;code&gt;let&lt;/code&gt; is not defined we'll run into issues. So babel will transpile it to an &lt;strong&gt;equivalent&lt;/strong&gt; older syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can write newer forms of syntax without worrying about compatibility issues in old browsers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#polyfills"&gt;
  &lt;/a&gt;
  Polyfills
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"&gt;Polyfills&lt;/a&gt; (aka shims) are useful when the issue is related to a missing API rather than some new syntax. Let us understand what we mean by this.&lt;/p&gt;

&lt;p&gt;Let's assume we want to support an older version of a browser where Array.map() method is not defined.&lt;/p&gt;

&lt;p&gt;So to use the method we’ll have to provide our own implementation that will act as if it was already defined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCCYmaPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/kEJ7XCJ_HakAAAAd/thanos-ill-do-it.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCCYmaPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/kEJ7XCJ_HakAAAAd/thanos-ill-do-it.gif" alt="https://c.tenor.com/kEJ7XCJ_HakAAAAd/thanos-ill-do-it.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The if statement will check if the map() method is defined. If not then our custom implementation will kick in.&lt;/p&gt;

&lt;p&gt;Transpilers like Babel will automatically detect which polyfills are needed in our code but sometimes we might have to do it ourselves.&lt;/p&gt;

&lt;p&gt;The above example is just for illustration purposes. When you need to manually define polyfills use a robust and well-tested polyfill from an official library like &lt;a href="https://github.com/es-shims"&gt;es-shims&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Since JavaScript is not forwards compatible there will always be a gap between the latest code we can write and the oldest JS engine we need to support.&lt;/p&gt;

&lt;p&gt;As developers, we should focus on writing clean and newer syntax that communicates the ideas effectively and let the tools take care of the compatibility.&lt;/p&gt;

&lt;p&gt;Shoutout to the &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;YDKJS&lt;/a&gt; book series by &lt;a href="https://www.linkedin.com/in/getify/"&gt;Kyle Simpson&lt;/a&gt; that enabled this blog post.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>babel</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Window into Docker, minikube, and containerd</title>
      <author>wmchurchill3</author>
      <pubDate>Tue, 28 Sep 2021 15:23:03 +0000</pubDate>
      <link>https://dev.to/leading-edje/a-window-into-docker-minikube-and-containerd-16bi</link>
      <guid>https://dev.to/leading-edje/a-window-into-docker-minikube-and-containerd-16bi</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk4fdJC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xiomsbe1pg2lis88o9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk4fdJC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xiomsbe1pg2lis88o9n.png" alt="Container Runtime Logos"&gt;&lt;/a&gt;&lt;br&gt;
Like many of you, I received an email from Docker notifying me of their changes to service.  Having used Docker Desktop for many years as part of my work, I was a little concerned.  My concern was not great enough to do anything... Until a co-worker suggested an article switching from Docker for Windows to containerd.  &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd"&gt;This link&lt;/a&gt; from 2018 seemed to suggest containerd could run on Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler Alert/TL;DR:&lt;/strong&gt; This is not a post about getting containerd running on Windows.  I was able to get a Windows nanoserver image running in containerd.  I could not get that image connecting to any network.  This post is a survey of the source code, GitHub issues, and dead links chased.  All documented to show how close and far away we are to something useful.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#where-does-minikube-fit-in-here"&gt;
  &lt;/a&gt;
  Where does minikube fit in here?
&lt;/h3&gt;

&lt;p&gt;In my research and frustration, I wanted to try running something else.  I enabled Hyper-V on my machine.  Followed the instructions at &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;minikube quickstart&lt;/a&gt;.  Things worked!  Thank you to the maintainers of minikube!  Great Job!  I definitely will be using this more in the future.&lt;/p&gt;

&lt;p&gt;The only place I deviated was in starting the minikube cluster.  I used the command &lt;code&gt;minikube start --driver=hyperv --container-runtime=containerd&lt;/code&gt;.  For fun, I checked the Hyper-V Manager and saw a new virtual machine named 'minikube'.  Then it hit me.  A Linux VM hosts the minikube cluster complete with its own version of containerd.  This means I could not run a Windows image! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-journey-begins"&gt;
  &lt;/a&gt;
  The Journey Begins
&lt;/h3&gt;

&lt;p&gt;The first stop was the &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd"&gt;Container Platform Tools on Windows&lt;/a&gt;.  This is where the dead links begin (see the Links to CRI Spec).  My second stop was the &lt;a href="https://containerd.io"&gt;containerd site&lt;/a&gt;.  I downloaded and installed the requirements and release tarball.  When the compiling started, I ran into an issue with make looking for gcc.  This seemed odd since 1) it is a Go application, 2) having gcc on Windows seems like a high bar for running containers.&lt;/p&gt;

&lt;p&gt;Some more Googling brought me to &lt;a href="https://www.jamessturtevant.com/posts/Windows-Containers-on-Windows-10-without-Docker-using-Containerd/"&gt;James Sturtevant's&lt;/a&gt; site.  This made me aware pre-built Windows containerd binaries exist.  Now I was making some progress.  &lt;/p&gt;

&lt;p&gt;The following code snippet will download and configure containerd as a service.  Each line does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest (as of 20210924) release of containerd&lt;/li&gt;
&lt;li&gt;Make a directory for the containerd binaries and configs&lt;/li&gt;
&lt;li&gt;Expand the containerd tarball&lt;/li&gt;
&lt;li&gt;Move the binaries to the directory created above&lt;/li&gt;
&lt;li&gt;Add containerd to the Path environment variable&lt;/li&gt;
&lt;li&gt;Create a default containerd configuration in the containerd directory&lt;/li&gt;
&lt;li&gt;Tell Windows Defender not worry about the containerd executable&lt;/li&gt;
&lt;li&gt;Register containerd as a service&lt;/li&gt;
&lt;li&gt;Start containerd&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a Admin PowerShell window,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl.exe -LO https://github.com/containerd/containerd/releases/download/v1.5.5/containerd-1.5.5-linux-amd64.tar.gz
mkdir "C:\Program Files\containerd"
tar -xzf containerd-1.5.5-linux-amd64.tar.gz
mv .\bin\* "C:\Program Files\containerd"
$env:Path = $env:Path + ';C:\Program Files\containerd'
containerd.exe config default | Set-Content "C:\Program Files\containerd\config.toml" -Force
Add-MpPreference -ExclusionProcess "$Env:ProgramFiles\containerd\containerd.exe"
.\containerd.exe --register-service
Start-Service containerd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To verify containerd is running:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the Task Manager&lt;/li&gt;
&lt;li&gt;Go into the &lt;code&gt;More Details&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;Scroll to &lt;code&gt;Background Processes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You should see a &lt;code&gt;containerd.exe&lt;/code&gt; process
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPbS6Vgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf5howvhopubabei7rm9.png" alt="Task Manager Process Listing"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#running-a-container"&gt;
  &lt;/a&gt;
  Running a Container
&lt;/h3&gt;

&lt;p&gt;Under ideal circumstances, we would pull an image using the &lt;code&gt;ctr&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.\ctr.exe pull docker.io/library/mcr.microsoft.com/windows/nanoserver:10.0.19042.1165-amd64`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, there is some authentication around the Microsoft images.  Assuming you have one downloaded using Docker, we can &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save the image &lt;/li&gt;
&lt;li&gt;Import the image using ctr&lt;/li&gt;
&lt;li&gt;Run the image.
From the Admin PowerShell window,
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker save mcr.microsoft.com/nanoserver:10.0.19042.1165-amd64 -o nanoserver.tar
.\ctr.exe image import  --all-platforms c:\wherever\you\put\this\nanoserver.tar
.\ctr.exe run -rm mcr.microsoft.com/windows/nanoserver:10.0.19042.1165-amd64 test cmd /c echo hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see &lt;code&gt;hello&lt;/code&gt; on the next line immediately after the command, Success!&lt;/p&gt;

&lt;p&gt;That's it, right?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHDWlDyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy3weei3rrs7spw6j4v6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHDWlDyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy3weei3rrs7spw6j4v6.gif" alt="Lee Corso, Not So Fast Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a container running a Windows image, but no network.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-a-network-for-the-containers"&gt;
  &lt;/a&gt;
  Creating A Network for the containers
&lt;/h3&gt;

&lt;p&gt;We need extra setup for networking our pods.  CNI (Container Networking Interface) will provide NAT'ing for our dev environment.  We also must get a helper script to set up the network.  The steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the CNI tools executables&lt;/li&gt;
&lt;li&gt;Get the helper script hns.psm1&lt;/li&gt;
&lt;li&gt;Create some directories&lt;/li&gt;
&lt;li&gt;Expand the CNI tools into the created directories.&lt;/li&gt;
&lt;li&gt;Allow your machine to execute scripts&lt;/li&gt;
&lt;li&gt;Unblock the helper script, hns.psm1&lt;/li&gt;
&lt;li&gt;Import hsn.psm1 for use.  Disregard the warning about verbs.  This is a naming convention.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From the PowerShell window,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl.exe -LO https://github.com/microsoft/windows-container-networking/releases/download/v.0.2.0/windows-container-networking-cni-amd64-v0.2.0.zip
curl.exe -LO https://raw.githubusercontent.com/microsoft/SDN/master/Kubernetes/windows/hns.psm1
mkdir -force "C:\Program Files\containerd\cni\bin"
mkdir -force "C:\Program Files\containerd\cni\conf"
Expand-Archive windows-container-networking-cni-amd6464-v0.2.0.zip -DestinationPath "C:\Program Files\containerd\cni\bin" -Force
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine
Unblock-File -Path .\hns.psm1
ipmo .\hns.psm1 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to configure the network.  From the Admin PowerShell window,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$subnet="10.0.0.0/16"
$gateway="10.0.0.1"
New-HNSNetwork -Type Nat -AddressPrefix $subnet -Gateway $gateway -Name "nat"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the name must be &lt;code&gt;nat&lt;/code&gt;.&lt;br&gt;
Let's check our work. From the PowerShell window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netsh lan show profiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the new 'nat' network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Profile on interface vEthernet (nat)
=======================================================================
Applied: User Profile

    Profile Version        : 1
    Type                   : Wired LAN
    AutoConfig Version     : 1
    802.1x                 : Enabled
    802.1x                 : Not Enforced
    EAP type               : Microsoft: Protected EAP (PEAP)
    802.1X auth credential : [Profile credential not valid]
    Cache user information : [Yes]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you get an error about dot3svc not running, run &lt;code&gt;net start dot3svc&lt;/code&gt; and run the &lt;code&gt;netsh&lt;/code&gt; command again.&lt;/p&gt;

&lt;p&gt;Configure containerd to use that network.  From the Admin PowerShell window,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@"
{
    "cniVersion": "0.2.0",
    "name": "nat",
    "type": "nat",
    "master": "Ethernet",
    "ipam": {
        "subnet": "$subnet",
        "routes": [
            {
                "gateway": "$gateway"
            }
        ]
    },
    "capabilities": {
        "portMappings": true,
        "dns": true
    }
}
"@ | Set-Content "C:\Program Files\containerd\cni\conf\0-containerd-nat.conf" -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#container-runtime-interface-cri"&gt;
  &lt;/a&gt;
  Container Runtime Interface (CRI)
&lt;/h3&gt;

&lt;p&gt;We are in the endgame now.  I promise.  From the &lt;a href="https://github.com/kubernetes-sigs/cri-tools/blob/master/docs/crictl.md"&gt;README&lt;/a&gt;, crictl provides a CLI for CRI-compatible container runtimes.&lt;br&gt;
The following snippet performs the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the crictl executable.&lt;/li&gt;
&lt;li&gt;Creates the default location for crictl to look for a configuration&lt;/li&gt;
&lt;li&gt;Creates the configuration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From a PowerShell,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl.exe -LO https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.20.0/crictl-v1.20.0-windows-amd64.tar.gz                          
tar -xvf crictl-v1.20.0-windows-amd64.tar.gz
mkdir $HOME\.crictl
@"
runtime-endpoint: npipe://./pipe/containerd-containerd
image-endpoint: npipe://./pipe/containerd-containerd
timeout: 10
#debug: true
"@ | Set-Content "$HOME\.crictl\crictl.yaml" -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-payoff"&gt;
  &lt;/a&gt;
  The Payoff
&lt;/h3&gt;

&lt;p&gt;Using a pod.json of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "metadata": {
        "name": "nanoserver-sandbox",
        "namespace": "default",
        "uid": "hdishd83djaidwnduwk28bcsb"
    },
    "logDirectory": "/tmp",
    "linux": {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic happens with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$POD_ID=(./crictl runp .\pod.json)
$CONTAINER_ID=(./crictl create $POD_ID .\container.json .\pod.json)
./crictl start $CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;Running the &lt;code&gt;.\crictl runp .\pod.json&lt;/code&gt; creates a sandbox pod for use in creating a container in the next command.  The runp command fails setting up the network adapter for the pod.  The output is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;time="2021-09-22T09:25:29-04:00" level=debug msg="get runtime connection"
time="2021-09-22T09:25:29-04:00" level=debug msg="connect using endpoint 'npipe://./pipe/containerd-containerd' with '10s' timeout"
time="2021-09-22T09:25:29-04:00" level=debug msg="connected successfully using endpoint: npipe://./pipe/containerd-containerd"
time="2021-09-22T09:25:29-04:00" level=debug msg="RunPodSandboxRequest: &amp;amp;RunPodSandboxRequest{Config:&amp;amp;PodSandboxConfig{Metadata:&amp;amp;PodSandboxMetadata{Name:nanoserver-sandbox,Uid:hdishd83djaidwnduwk28bcsb,Namespace:default,Attempt:0,},Hostname:,LogDirectory:,DnsConfig:nil,PortMappings:[]*PortMapping{},Labels:map[string]string{},Annotations:map[string]string{},Linux:&amp;amp;LinuxPodSandboxConfig{CgroupParent:,SecurityContext:nil,Sysctls:map[string]string{},},},RuntimeHandler:,}"
time="2021-09-22T09:25:29-04:00" level=debug msg="RunPodSandboxResponse: nil"
time="2021-09-22T09:25:29-04:00" level=fatal msg="run pod sandbox: rpc error: code = Unknown desc = failed to setup network for sandbox \"e4cc6fc22dbdf8ccde0035239873cb9f31b074fca4650acc545a8af5a51d814c\": error creating endpoint hcnCreateEndpoint failed in Win32: IP address is either invalid or not part of any configured subnet(s). (0x803b001e) {\"Success\":false,\"Error\":\"IP address is either invalid or not part of any configured subnet(s). \",\"ErrorCode\":2151350302} : endpoint config &amp;amp;{ e4cc6fc22dbdf8ccde0035239873cb9f31b074fca4650acc545a8af5a51d814c_nat 11d59574-13be-4a14-b3e8-11cc0d5a7805  [] [{ 0}] { [] [] []} [{10.0.0.1 0.0.0.0/0 0}]  0 {2 0}}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a &lt;a href="https://github.com/containerd/containerd/issues/4851"&gt;GitHub Issue&lt;/a&gt; that hints to a problem with the pod network workflow on Windows&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;There is a good possibility this issue will remain for a while.  It has been around for the better part of a year.  If one is running Linux containers, there is a great substitute in &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;minikube&lt;/a&gt;.  It is easy to setup, well documented, maintained, and simulates a production environment.  It appears Windows images will still need to run on Docker.  Please leave a comment below if you are able to find a workaround.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#relevant-links"&gt;
  &lt;/a&gt;
  Relevant Links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/containerd/containerd/issues/4851"&gt;GitHub Issue: Windows CNI plugin has no chance to create and configure container VNIC&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.jamessturtevant.com/posts/Windows-Containers-on-Windows-10-without-Docker-using-Containerd/"&gt;James Sturtevant's Windows Containers on Windows 10 without Docker using Containerd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.1"&gt;PowerShell Execution Policies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;minikube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/containerd/containerd/blob/main/docs/cri/crictl.md"&gt;crictl README has pod.json samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leading-edje"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SfUhPiEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uo60qforg9yqdpgzncq.png" alt="Smart EDJE Image"&gt;&lt;br&gt;
&lt;/a&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
    </item>
    <item>
      <title>Database-driven realtime architectures: building a serverless and editable chat app - Part 1</title>
      <author>Srushtika Neelakantam</author>
      <pubDate>Tue, 28 Sep 2021 15:12:13 +0000</pubDate>
      <link>https://dev.to/ablydev/database-driven-realtime-architectures-building-a-serverless-and-editable-chat-app-part-1-1ceh</link>
      <guid>https://dev.to/ablydev/database-driven-realtime-architectures-building-a-serverless-and-editable-chat-app-part-1-1ceh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Database-driven realtime architectures are becoming more and more common as evidenced by key backers and widespread use of software like Firebase and Supabase.&lt;/p&gt;

&lt;p&gt;The two key priorities for an app following database-driven realtime messaging are long-term storage and change data capture (CDC) updates from the database.&lt;/p&gt;

&lt;p&gt;In this two part article series, we'll take a detailed look at a fully serverless chat app where you can edit previously published messages. The chat app uses the Ably Postgres connector to achieve this, the details of which you'll see throughout the article. You'll find the architecture and the example app useful if you are looking for ways to build database-driven applications that work seamlessly at scale.&lt;/p&gt;

&lt;p&gt;We've previously written about &lt;a href="https://ably.com/blog/realtime-and-databases-coupling-vs-modularity"&gt;decoupling databases from realtime messaging&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The main problem is lack of modularity: each tool should do its own job.  Databases are bases of data. They should do one thing and one thing well, which is to be the one base source of truth and data. They should never be saddled with realtime concerns --- that is not their strength by design. They should do storage, and a different dedicated piece should do realtime comms. All the other problems stem from this.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the idea of a realtime database sounds great and opens up a huge range of possible use-cases one could build with this architecture, a tight coupling of databases and realtime messaging might suffer from various issues described in the article linked above.&lt;/p&gt;

&lt;p&gt;Moreover, not all event triggers constitute consequential payloads and thus don't need to go into storage. Perhaps some events are just transient to make a client aware of an event occurring, not necessarily even descriptive details about that event. For example, in a chat app, I'd be interested in storing messages, timestamps, etc. but not necessarily typing indicator events.&lt;/p&gt;

&lt;p&gt;In a &lt;a href="https://ably.com/blog/ably-postgres-connector"&gt;recent article&lt;/a&gt;, I introduced the &lt;a href="https://github.com/ably-labs/ably-postgres-connector"&gt;Ably-Postgres connector&lt;/a&gt; built by one of our community experts. It uses Postgres DB's listen/notify feature to listen for changes on any DB tables and publish updates on specific Ably channels whenever a change occurs. This allows us to take advantage of database-driven architectures without worrying about the scalability of realtime messaging or the awkward relationship between the two.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Check out the editable chat app:&lt;/em&gt; &lt;a href="https://serverless-scalable-chat.netlify.app/"&gt;&lt;em&gt;https://serverless-scalable-chat.netlify.app/&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-editable-chat-app-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The editable chat app architecture&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let me present to you a complex looking architecture which will make more sense by the time you've worked through this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADMFdg_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/135112937-06a6326d-45b9-4cc3-9a00-ce4d694cfa18.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADMFdg_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/135112937-06a6326d-45b9-4cc3-9a00-ce4d694cfa18.jpg" alt="Editable chat app architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From an end-user perspective, they will be publishing messages on the frontend app and expect to receive messages on it as well. The same goes with editing any messages: all participants will need a way to edit their own messages and also receive updates about any messages edited by others.&lt;/p&gt;

&lt;p&gt;A common architectural set-up when using a &lt;a href="https://ably.com/pub-sub-messaging"&gt;pub/sub messaging&lt;/a&gt; service like Ably is to publish updates on a channel to which the client is also subscribed. Although this works perfectly well for regular chat messages or any other event triggers, it is more complex to edit previously published messages or to trigger updates about changes to previous messages because Ably messages are immutable by nature.&lt;/p&gt;

&lt;p&gt;It is, however, possible to implement this functionality by using a slightly non-traditional approach. Instead of subscribing to a single chat channel to which users are publishing their messages, we can separate out the incoming and outgoing chat channels. Doing this allows us to perform various operations on the data before it comes back in a subscription callback. A common use case of this architecture is message filtering like applying a &lt;a href="https://en.wikipedia.org/wiki/Wordfilter"&gt;profanity filter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the case of the current chat app, we'll make use of a database to store all the published messages directly in a table. We'll also have a listener that can&lt;/p&gt;

&lt;p&gt;i) observe the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; changes in the chat data table of our database, and&lt;/p&gt;

&lt;p&gt;ii) publish a message on an Ably channel with the name of the operation as well as with the change data capture (CDC).&lt;/p&gt;

&lt;p&gt;If we make our front-end clients subscribe to this channel into which the listener is publishing database updates, we'll not only receive new messages as a result of &lt;code&gt;insert&lt;/code&gt; operations in the database, but also updates on previous messages resulting from &lt;code&gt;update&lt;/code&gt; operations on the database. Each Ably message comes with a unique &lt;code&gt;msgId&lt;/code&gt; assigned by Ably, so we can make use of this to uniquely identify each message in the table. The database will be the single source of truth in the app and also useful if we'd like to load previous messages in the chat like in the &lt;a href="https://realtime-chat-storage.ably.dev/"&gt;Ably-Airtable starter kit&lt;/a&gt; example.&lt;/p&gt;

&lt;p&gt;Before proceeding, take another look at the architecture diagram above to put all the steps in perspective and tie it all together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Tech stack&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We have four main goals with the editable chat app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Scalability&lt;/li&gt;
&lt;li&gt;  Serverless architecture&lt;/li&gt;
&lt;li&gt;  Editability of messages&lt;/li&gt;
&lt;li&gt;  Storage of messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In view of the above, let me explain some of the reasoning behind various tech choices in this chat app, along with some alternative options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0kbQk9RU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/135114866-cf0dfbcc-9ce9-4fbb-b927-19827b9c3648.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0kbQk9RU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/135114866-cf0dfbcc-9ce9-4fbb-b927-19827b9c3648.jpeg" alt="Tech stack for the editable chat app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nuxtjs-for-frontend-web-development"&gt;
  &lt;/a&gt;
  NuxtJS for frontend web development
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt; aims to provide best-practice solutions to common web development problems like routing, state-management, code splitting, etc. It allows us to make use of various NPM utility libraries in a static site that can be deployed and used directly from a CDN, without needing a server, i.e. following the &lt;a href="https://jamstack.org/what-is-jamstack/"&gt;Jamstack architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the case of our chat app, it is useful in terms of separating out state management entirely from the visual components, so developers of all tech stacks can understand the communication and data exchange between the chat app and external services (mainly Ably in this case).&lt;/p&gt;

&lt;p&gt;You can replace Nuxt with any other front-end web framework, vanilla JS or even use a native mobile programming language, depending on the needs and wants of your app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ably-to-enable-the-pubsub-pattern"&gt;
  &lt;/a&gt;
  Ably to enable the pub/sub pattern
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ably.com/"&gt;Ably&lt;/a&gt; is a realtime messaging infrastructure as a service. It allows you to enable &lt;a href="https://ably.com/pub-sub-messaging"&gt;publish/subscribe-based messaging&lt;/a&gt; in your application with just a few lines of code. Ably provides highly-reliable low-latency messaging, and is able to work globally on any platform or device. It completely abstracts away the complex problem of scaling realtime communications across multiple regions around the planet, so developers can focus on their app logic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-lambda-functions-to-insert-and-update-rows-in-the-database"&gt;
  &lt;/a&gt;
  AWS Lambda functions to insert and update rows in the database
&lt;/h3&gt;

&lt;p&gt;We use PostgresDB to store messages from the chat app. In general, any database transactions which change table data shouldn't be done directly from the front-end to avoid potential security risks. Hence, we'll make use of &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; functions to make changes to the database on the users' behalf. Given that we are aiming to make this app fully serverless, Lambda functions fit right in with this theme.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postgresdb-hosted-on-aws-rds-to-store-the-data"&gt;
  &lt;/a&gt;
  PostgresDB hosted on AWS RDS to store the data
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt; is an open-sourced SQL database. Its performance and reliability make it a good choice for complex production applications. There's another special reason to choose Postgres as you'll see in the next point.&lt;/p&gt;

&lt;p&gt;Postgres doesn't come with hosting, we'll need to make use of another service to host the database. Again, in light of keeping everything serverless, I've made use of &lt;a href="https://aws.amazon.com/rds/"&gt;AWS RDS&lt;/a&gt; for Postgres. Using AWS also gives the advantage of the accessibility of the data between other AWS services, like the Lambda function in the previous point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ably-postgres-connector-to-watch-changes-on-the-database-tables-and-publish-messages-on-every-change"&gt;
  &lt;/a&gt;
  Ably Postgres connector to watch changes on the database tables and publish messages on every change
&lt;/h3&gt;

&lt;p&gt;One of the key requirements of this chat app is being able to listen to changes on the database tables and publish these changes to Ably. The &lt;a href="https://github.com/ably-labs/ably-postgres-connector"&gt;Ably Postgres connector&lt;/a&gt; is a community-built project which makes this possible. We use Postgres because the built-in &lt;a href="https://tapoueh.org/blog/2018/07/postgresql-listen-notify/"&gt;listen/notify feature&lt;/a&gt; makes this connector work. We'll take a detailed look at it later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-fargate-with-aws-ecs-and-aws-ecr-to-deploy-the-ably-postgres-connectors-dockerized-image"&gt;
  &lt;/a&gt;
  AWS Fargate with AWS ECS and AWS ECR to deploy the Ably Postgres connector's dockerized image
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate&lt;/a&gt; is a serverless compute engine that hosts containers. The Ably Postgres connector has a dockerized image that needs to be hosted somewhere. We'll use AWS Fargate to do this, because it makes it easy and secure to manage the backend deployment and hosting on a single service like AWS.&lt;/p&gt;

&lt;p&gt;AWS Fargate works with &lt;a href="https://aws.amazon.com/ecs/"&gt;AWS ECS&lt;/a&gt; which enables deployment and management of containerized applications. We use &lt;a href="https://aws.amazon.com/ecr/"&gt;AWS ECR&lt;/a&gt; to upload the docker image so it can be stored in the registry to be used by ECS as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify-to-host-the-static-jamstack-site"&gt;
  &lt;/a&gt;
  Netlify to host the static Jamstack site
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://netlify.com/"&gt;Netlify&lt;/a&gt; provides a serverless platform to deploy web applications. It also allows setting up git-based workflows to automate building and deploying new versions of a static site as changes are made to the repository. The Nuxt app is deployed using Netlify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify-functions-to-enable-a-token-auth-endpoint-to-authenticate-with-ably"&gt;
  &lt;/a&gt;
  Netlify functions to enable a token auth endpoint to authenticate with Ably
&lt;/h3&gt;

&lt;p&gt;Netlify's serverless platform also provides serverless functions which can be invoked to perform a piece of functionality. The Ably service requires clients to be authenticated in one of the two ways: basic authentication or token authentication. Basic authentication exposes the API Key directly in the frontend script, and thus shouldn't be used in production. You should almost always choose Token authentication. To enable this, we need to set up an authentication endpoint that can verify the credentials of the frontend client and issue Ably Token Requests. The frontend client can then use this Ably Token Request to authenticate with Ably and use its service.&lt;/p&gt;

&lt;p&gt;Given that we use Netlify to host the chat app, it's only natural that we make use of &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify functions&lt;/a&gt; to host our authentication endpoint. Even though AWS Lambda is already a part of the tech stack, it would require us to set up an IAM for our users before they can access AWS Lambda. Netlify, meanwhile, makes it very easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ably-postgres-connector-a-key-dependency"&gt;
  &lt;/a&gt;
  The Ably Postgres connector -- a key dependency
&lt;/h2&gt;

&lt;p&gt;Before moving on to the details of the chat app, let's first understand the working of the Ably Postgres connector that makes this architecture possible.&lt;/p&gt;

&lt;p&gt;I recently wrote an &lt;a href="https://ably.com/blog/ably-postgres-connector"&gt;article explaining the Ably Postgres connector in detail&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;The connector accepts a configuration file where you input the connection details for your database as well as for the tables you want to listen to for data changes. It also accepts an &lt;a href="https://knowledge.ably.com/setting-up-and-managing-api-keys"&gt;Ably API key&lt;/a&gt; to be able to instantiate and publish messages to your Ably app following any changes to the specified tables.&lt;/p&gt;

&lt;p&gt;Using the config file, the connector creates in your database a special table called the "ablycontroltable". This table is used to maintain the Ably channel mapping for different changes to the tables in your database.&lt;/p&gt;

&lt;p&gt;Next, the connector creates a procedure to listen to changes on the specified tables using the &lt;code&gt;pg_notify&lt;/code&gt; function. This notify function then publishes the change data capture (CDC) payload on the relevant Ably channel, as specified in the config.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LcJZ1rkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/oTXZk-FCQeiH_QLoU2wvXfR94YqzPraB7cq0PzmIflKiuRuexXbHV5fP46oxQ9hL7fBpw_LGh-9kp345F9hq9Ek_6qdVcl4_zKUg9z69Rg7nZMMLObW4__pYZkOTEgNzoOiTriJE%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LcJZ1rkL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/oTXZk-FCQeiH_QLoU2wvXfR94YqzPraB7cq0PzmIflKiuRuexXbHV5fP46oxQ9hL7fBpw_LGh-9kp345F9hq9Ek_6qdVcl4_zKUg9z69Rg7nZMMLObW4__pYZkOTEgNzoOiTriJE%3Ds0" alt="Ably Postgres Connector"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;With this, I hope you have a better understanding of the high-level architecture of the serverless editable chat app.&lt;/p&gt;

&lt;p&gt;In the next part of this two-part series, we'll take a closer look at various components of the chat app and dive into some code to better understand how each step is implemented.&lt;/p&gt;

&lt;p&gt;Here are a few things we'll see in the next part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Navigating the Nuxt app (even if you are not a Nuxt developer)&lt;/li&gt;
&lt;li&gt;  VueX state management&lt;/li&gt;
&lt;li&gt;  Postgres DB setup&lt;/li&gt;
&lt;li&gt;  Lambda functions setup on the Ably Integrations dashboard&lt;/li&gt;
&lt;li&gt;  Ably Postgres connector setup&lt;/li&gt;
&lt;li&gt;  Deployment of all the components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned and watch this space for the next article. In the meantime, check out the &lt;a href="https://serverless-scalable-chat.netlify.app/"&gt;demo of the editable chat app&lt;/a&gt; or &lt;a href="https://github.com/ably-labs/scalable-serverless-editable-chat-demo"&gt;dive into the GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://twitter.com/Srushtika"&gt;reach out to me&lt;/a&gt; if you have any questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-and-databases-coupling-vs-modularity"&gt;Realtime and databases --- a discussion on coupling versus modularity&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/myth-busting-jamstack-cant-handle-dynamic-content"&gt;Myth-busting: Jamstack can't handle dynamic content&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/ably-aws-web-components"&gt;Build your own live chat web component with Ably and AWS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/topic/scaling-firebase-realtime-database"&gt;Scaling the Firebase Realtime Database beyond 200k users&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>architecture</category>
      <category>postgres</category>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS Font Face</title>
      <author>Rezaul karim</author>
      <pubDate>Tue, 28 Sep 2021 15:10:57 +0000</pubDate>
      <link>https://dev.to/mrezaulkarim/css-font-face-2i7l</link>
      <guid>https://dev.to/mrezaulkarim/css-font-face-2i7l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before reading this article, you need to know about CSS Font Family. I assume you know about the CSS font family.&lt;/p&gt;

&lt;p&gt;Font Face is a great feature of CSS. Think You like a font you want to use, what next? Yes, that's why Fontface.&lt;/p&gt;

&lt;p&gt;Fontface is written in CSS. And you have to write as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@font-face
{
font-family: FontFace;
src: url('MyFavoriteFont.ttf')
 ,url('MyFavoriteFont.eot'); /* For IE */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;font-family: FontFace; You can name your font family with this. You can give any name instead of FontFace. And later you can use the CSS font the way Family uses it: font-family: FontFace;&lt;/p&gt;

&lt;p&gt;Add the url of your font with src: url (‘MyFavoriteFont.ttf’). IE does not support ttf [True Type Font]. For that you have to use eot (Embedded OpenType) font. For this we have added utl of eot font with a comma. If you do not have eot font, then you can get it by doing a little search on Google.&lt;/p&gt;

&lt;p&gt;Our fontface is ready. Now we can use it anywhere. As much as you want.&lt;/p&gt;

&lt;p&gt;To use, you have to write the font family as you write it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.myDiv
{
font-family:FontFace;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the whole example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
@font-face
{
font-family: FontFace;
src: url('MyFavoriteFont.ttf')
 ,url('MyFavoriteFont.eot'); /* For IE */
}

.myDiv
{
font-family:FontFace;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div class="myDiv"&amp;gt;
Some text with CSS3 Font Face feature.
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the name of your font in place of ‘MyFavoriteFont.ttf’. Note: You must enter the url where you will upload the fonts. Now if you open a directory with fonts and put the fonts in it, you have to type ‘fonts / MyFavoriteFont.ttf’ etc.&lt;br&gt;
If you don't want to bother so much, you can use it in a simpler way. There are many fonts uploaded to Google Web Fonts.  &lt;a href="http://www.google.com/fonts/"&gt;http://www.google.com/fonts/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use it by going here and selecting the font of your choice and clicking on the Quick Use button. Add the following link to the header section of your site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link href='http://fonts.googleapis.com/css?family=Caesar+Dressing' rel='stylesheet' type='text/css'&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing more to do. Then just add the name of the font to the fontfamily: font-family: ‘Caesar Dressing’, cursive;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link href='http://fonts.googleapis.com/css?family=Sonsie+One' rel='stylesheet' type='text/css'&amp;gt;
&amp;lt;style&amp;gt;
.myDiv
{
font-family: 'Sonsie One', cursive;
text-align:center;
margin-top:10%;
color:#808080;
}
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;div class="myDiv"&amp;gt;
Some text with CSS3 Font Face feature.
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mrezaulkarim.com/css-shorthand-useful-css-shorthand-properties/"&gt;CSS Shorthand Properties- Useful CSS Shorthand&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mrezaulkarim.com/learn-about-css-background-properties/"&gt;Learn About CSS Background Properties&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://mrezaulkarim.com/text-styling-in-css/"&gt;Learn about Text Styling in CSS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more exciting tips and tricks about programming and coding please read our &lt;a href="https://mrezaulkarim.com/blog/"&gt;others articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find My page on Instagram:  &lt;a href="https://instagram.com/stack.content"&gt;@stack.content&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find Me on Twitter:   &lt;a href="https://twitter.com/mrezaulkarim_"&gt;@mrezaulkarim_&lt;/a&gt; &lt;/p&gt;

</description>
      <category>css</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to install OpenGL in Ubuntu in C++?</title>
      <author>Saheb Giri</author>
      <pubDate>Tue, 28 Sep 2021 15:05:29 +0000</pubDate>
      <link>https://dev.to/iamsahebgiri/how-to-install-opengl-in-ubuntu-in-c-6eb</link>
      <guid>https://dev.to/iamsahebgiri/how-to-install-opengl-in-ubuntu-in-c-6eb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-opengl"&gt;
  &lt;/a&gt;
  What Is OpenGL?
&lt;/h2&gt;

&lt;p&gt;OpenGL is a Graphics rendering API which is operating system independent, window system independent and has high-quality color images composed of geometric and image primitives. OpenGL APIs can use following - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GL

&lt;ul&gt;
&lt;li&gt;OpenGL API implementation (&lt;a href="http://www.opengl.org"&gt;http://www.opengl.org&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GLU

&lt;ul&gt;
&lt;li&gt;OpenGL Utility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Glut

&lt;ul&gt;
&lt;li&gt;GLUT (OpenGL Utility Toolkit) – Glut is portable windowing API and it is not officially part of OpenGL.&lt;/li&gt;
&lt;li&gt;OpenGL Utility Toolkit (&lt;a href="http://www.opengl.org/resources/libraries/glut/"&gt;http://www.opengl.org/resources/libraries/glut/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FLTK

&lt;ul&gt;
&lt;li&gt;FlashLight ToolKit (&lt;a href="http://www.fltk.org/"&gt;http://www.fltk.org/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GLEW&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now lets see how to install OpenGL in Ubuntu.&lt;/p&gt;

&lt;p&gt;Now because GLUT (OpenGL Utility Toolkit) depends upon OpenGL and a number of other related libraries, if we install GLUT then OpenGL will be automatically be installed.&lt;/p&gt;

&lt;p&gt;First update the repository using the given command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the following command to install OpenGL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;libglu1-mesa-dev freeglut3-dev mesa-common-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to test if OpenGL libraries are working fine on our Linux machine, we will create a C++ program and test it.&lt;/p&gt;

&lt;p&gt;So create a following C++ Program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;GL/glut.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;displayMe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;glClear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glBegin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_POLYGON&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;glFlush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;glutInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutInitDisplayMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLUT_SINGLE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutInitWindowSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutInitWindowPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutCreateWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutDisplayFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;displayMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glutMainLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now give the command below to compile your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;g++ main.cpp &lt;span class="nt"&gt;-o&lt;/span&gt; firstOpenGlApp &lt;span class="nt"&gt;-lglut&lt;/span&gt; &lt;span class="nt"&gt;-lGLU&lt;/span&gt; &lt;span class="nt"&gt;-lGL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run your OpenGl program with following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./firstOpenGlApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see something like this on your screen if everythings went well.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B73GtG0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0tf014804bftdcz8dvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B73GtG0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0tf014804bftdcz8dvn.png" alt="OpenGl in Ubuntu using C++"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opengl</category>
      <category>cpp</category>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Function Store - New functionality installed with a click.</title>
      <author>Tahimi</author>
      <pubDate>Tue, 28 Sep 2021 14:57:28 +0000</pubDate>
      <link>https://dev.to/functionstore/hey-everyone-functions-store-just-launched-on-product-hunt-and-we-would-love-your-feedback-29m2</link>
      <guid>https://dev.to/functionstore/hey-everyone-functions-store-just-launched-on-product-hunt-and-we-would-love-your-feedback-29m2</guid>
      <description>&lt;p&gt;Hey Everyone - Functions Store just launched on Product Hunt and we would love your feedback!&lt;br&gt;
We’ve spent that last few months building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Marketplace of reusable, expert-built, and well-tested Google Cloud Functions&lt;/li&gt;
&lt;li&gt;A Platform of tools to simplify building web apps on Google Cloud and Firebase&lt;/li&gt;
&lt;li&gt;An opportunity for developers around the world to generate a new income stream&lt;/li&gt;
&lt;li&gt;20x faster to implement new features for your web app
Check Us Out Here: &lt;a href="https://www.producthunt.com/posts/function-store"&gt;https://www.producthunt.com/posts/function-store&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to everyone who take time out of their busy days to help support by voting and providing feedback!&lt;/p&gt;

</description>
      <category>firebase</category>
      <category>tooling</category>
      <category>functions</category>
    </item>
    <item>
      <title>How to unit test Vuex modules defined with the vuex-module-decorators syntax in Nuxt,  using vue-test-utils and Jest?</title>
      <author>Ivan Spoljaric</author>
      <pubDate>Tue, 28 Sep 2021 14:48:34 +0000</pubDate>
      <link>https://dev.to/ispoljari/how-to-unit-test-vuex-modules-defined-with-the-vuex-module-decorators-syntax-in-nuxt-using-vue-test-utils-and-jest-3n7p</link>
      <guid>https://dev.to/ispoljari/how-to-unit-test-vuex-modules-defined-with-the-vuex-module-decorators-syntax-in-nuxt-using-vue-test-utils-and-jest-3n7p</guid>
      <description>&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@tienvn3012?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tien Vu Ngoc&lt;/a&gt; on &lt;a href="https://unsplash.com/t/arts-culture?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;To find the answer to my question I went through the official Nuxt documentation and through the existing Stack Overflow and Github issue discussions.&lt;/p&gt;

&lt;p&gt;But with no luck. &lt;/p&gt;

&lt;p&gt;It appeared as if no one before me stumbled upon this issue (which I find somewhat hard to believe). &lt;/p&gt;

&lt;p&gt;My AuthModule looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;stateFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;VuexModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;userData&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserData&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;prevRouteList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ICognitoError&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;VuexMutation&lt;/span&gt;
  &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;VuexAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;rawError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setIsLoading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setInitiateRegistration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pushPrevRoute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emailVerification&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setInitiateRegistration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setInitiateRegistration&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setIsLoading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;MutationAction&lt;/span&gt;
  &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt; 

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt; 

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h1&gt;

&lt;p&gt;After some trial and error I finally discovered the answer to my question. &lt;/p&gt;

&lt;p&gt;The implementation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// auth.spec.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createLocalVue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/test-utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/services&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localVue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLocalVue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;localVue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storeOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}):&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;storeOptions&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AuthModule&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mutations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/setIsLoading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/setIsLoading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dummy@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dummy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registrationInitiated&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registrationInitiated&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mutation-actions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;setEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dummyEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dummy@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/setEmail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dummyEmail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dummyEmail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/getError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/getError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Demmo error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth/getError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Demmo error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// services/auth&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// createError is just a util method for formatting the error message and wiring to the correct i18n label&lt;/span&gt;

&lt;span class="c1"&gt;// services/__mock__/auth&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dummy error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;registerData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important thing to realise is that the &lt;a href="https://github.com/championswimmer/vuex-module-decorators"&gt;vuex-module-decorators&lt;/a&gt; class-based model behaves just like a &lt;a href="https://class-component.vuejs.org/"&gt;vue-class-component&lt;/a&gt; under the hood.&lt;/p&gt;

&lt;p&gt;All of the class-based stuff is just syntactic sugar - a wrapper around the vue-class-component API.&lt;/p&gt;

&lt;p&gt;To quote the &lt;a href="https://championswimmer.in/vuex-module-decorators/pages/getting-started.html#define-a-module"&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In your store, you use the MyModule class itself as a module...The way we use the MyModule class is different from classical object-oriented programming and similar to how vue-class-component works. We use the class itself as module, not an object constructed by the class&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing to keep in mind is to use &lt;a href="https://vue-test-utils.vuejs.org/api/createlocalvue.html"&gt;createLocalVue&lt;/a&gt;, which enables us to use Vue classes, plugins, components etc. without polluting the global Vue class.&lt;/p&gt;

&lt;p&gt;Adding the Vuex plugin to &lt;code&gt;createLocalVue&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localVue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AuthModule class is declared as a Vuex (namespaced) module inside the Vuex.Store constructor (as per docs).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storeOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}):&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;storeOptions&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the implementation above, AuthModule (incl. store, actions, mutations, getters...) is re-created inside every test case with the help of the &lt;code&gt;beforeEach&lt;/code&gt; hook (to have a clean store in every new iteration).&lt;/p&gt;

&lt;p&gt;The rest is pretty straightforward. &lt;/p&gt;

&lt;p&gt;You can clearly see how I tested each part of the AuthModule (actions, mutations, getters..).&lt;/p&gt;

&lt;p&gt;That's it. Happy testing :) &lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
