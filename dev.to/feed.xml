<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SpreadArray CSharp</title>
      <author>Alexandre Freire</author>
      <pubDate>Mon, 11 Oct 2021 12:39:22 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/spreadarray-csharp-5136</link>
      <guid>https://dev.to/alexandrefreire/spreadarray-csharp-5136</guid>
      <description>&lt;p&gt;I decided to publish an extension that simulates a javascript spread function. &lt;/p&gt;

&lt;p&gt;When I started using c # I missed some features that I used in javascript, I know they are different things and that c # is a strongly typed language. &lt;/p&gt;

&lt;p&gt;But I'll leave the link to the package that I created and use in some projects, and that solves some problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-array-csharp"&gt;
  &lt;/a&gt;
  Spread Array CSharp
&lt;/h2&gt;

&lt;p&gt;The spread operator is denoted by three dots (…)(popular in javascript). · The spread operator unpacks elements of iterable objects such as arrays, sets, and maps into a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alexandre"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;userAddress&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;UserAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Porto Velho"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Brasil"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my@mail.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;dynamic&lt;/span&gt; &lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ExpandoObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Spread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userAddress&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Spread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;/// Example 1: preparing to json response&lt;/span&gt;
&lt;span class="n"&gt;JObject&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;dynamicUserProfile&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;/// Example 2: setting value on richTextBox from windows application&lt;/span&gt;
&lt;span class="n"&gt;richTextBox1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SelectToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dynamicUserProfile"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserAddress&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;UserAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;City&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;city&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;City&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Country&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Contact&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
    </item>
    <item>
      <title>How to square numbers in Python?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 11 Oct 2021 12:11:42 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-square-numbers-in-python-1k53</link>
      <guid>https://dev.to/hrishikesh1990/how-to-square-numbers-in-python-1k53</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how we can use Python to square a number. We look at all the various methods and break them down for you.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-square"&gt;
  &lt;/a&gt;
  Table of Contents- Python Square
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#squaring-numbers-in-python"&gt;Squaring numbers in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-square-using-"&gt;Python Square using **&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#squaring-using-the-pow-method"&gt;Squaring using the pow() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiplying-the-number-by-itself"&gt;Multiplying the number by itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts-python-square"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#squaring-numbers-in-python"&gt;
  &lt;/a&gt;
  Squaring numbers in Python:
&lt;/h2&gt;

&lt;p&gt;The square of a number is the result of multiplying the number by itself. In Python, we deal with a lot of square numbers - Data, Financial Analysis use them the most. Because of this high usage Python provides three methods to square a number: they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the Exponent Operator&lt;/li&gt;
&lt;li&gt;Multiplying the number by itself (n*n)&lt;/li&gt;
&lt;li&gt;Using pow()
The last method can also be used with the math module which has a lot of other handy mathematical functions as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-square-using-"&gt;
  &lt;/a&gt;
  Python Square using **:
&lt;/h2&gt;

&lt;p&gt;The Python exponent operator ** is used to perform an exponential calculation. It takes in 2 real numbers. The syntax is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here “N” is the number and “power” is the number of times you would like to exponent the number. Since we are looking to square the number, we can pass 2 as the power. Similarly, If we were looking to cube the value we would pass 3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet returns the following values which are the square of the entered values. This is how you use exponents to calculate the square of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#squaring-using-the-pow-method"&gt;
  &lt;/a&gt;
  Squaring using the pow() method:
&lt;/h2&gt;

&lt;p&gt;The pow() method is another method in Python that can be used to square a number. This method also takes in two arguments in the following syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is equivalent to the exponent methods and you can choose which method you would like to use. The pow() method supports a third argument which I would recommend reading about once you have practiced using it with two arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the method above, the square values of the argument are returned. This is how you use the pow() method to calculate the square of a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned above the pow() method can also be used in the math module, however, it needs to be imported before it is used. Hence I would not recommend using it unless you are intending to use other methods from the module as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiplying-the-number-by-itself"&gt;
  &lt;/a&gt;
  Multiplying the number by itself:
&lt;/h2&gt;

&lt;p&gt;This is the most fundamental method of calculating the square of a number. Here we square the number by multiplying the number by itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code returns the square of the number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts-python-square"&gt;
  &lt;/a&gt;
  Closing thoughts - Python Square
&lt;/h2&gt;

&lt;p&gt;All the method methods above can be used to calculate the Python square of a number. Although 3 works well, I personally prefer using methods 1 or 2.&lt;/p&gt;

&lt;p&gt;Once you are done with the tutorial I would recommend that you check out the Python square root method that is used to find the square root of a number.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🌈 Wonderful tools for creating secondary visual elements for your website</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 11 Oct 2021 12:00:59 +0000</pubDate>
      <link>https://dev.to/koddr/wonderful-tools-for-creating-secondary-visual-elements-for-your-website-3bj0</link>
      <guid>https://dev.to/koddr/wonderful-tools-for-creating-secondary-visual-elements-for-your-website-3bj0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV people! 👋&lt;/p&gt;

&lt;p&gt;Here's a small selection of time-tested online tools that can seriously reduce the time it takes to develop a visual concept for your next website (and beyond). All tools will be aimed at creating secondary visual additions to the UI, such as &lt;strong&gt;waves&lt;/strong&gt;, &lt;strong&gt;blobs&lt;/strong&gt;, &lt;strong&gt;patterns&lt;/strong&gt; and animated &lt;strong&gt;backgrounds&lt;/strong&gt; &amp;amp; &lt;strong&gt;gradients&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👌 &lt;strong&gt;Disclamer:&lt;/strong&gt; I usually don't care for articles in this style, but there are too many of these tools accumulated to do separate articles on each. So don't worry, I will continue to delight you with in-depth articles and not go off to “Top X”-like articles!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, here we go! 👇&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#blobbb"&gt;Blobbb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#animated-gradient-background-generator"&gt;Animated Gradient Background Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#svg-shape-dividers-creator"&gt;SVG Shape Dividers Creator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wicked-backgrounds"&gt;Wicked Backgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#basic-pattern-repository"&gt;Basic Pattern Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#figen"&gt;Figen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blobbb"&gt;
  &lt;/a&gt;
  Blobbb
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://www.blobbb.fun/?utm_source=dev.to/koddr"&gt;Blobbb&lt;/a&gt; project is an excellent example of the most convenient tool for creating random blobs with comprehensive settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2g6Q124x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx6140ljb3okhipydl8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2g6Q124x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx6140ljb3okhipydl8e.png" alt="blobbb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There aren't many options, but that's really all you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fill color;&lt;/li&gt;
&lt;li&gt;Stroke color;&lt;/li&gt;
&lt;li&gt;Gradient color;&lt;/li&gt;
&lt;li&gt;Presets of patterns;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 200 200"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#673ab7"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M71.3,-23.4C80.9,6.4,69.3,42.9,44.3,61.1C19.4,79.2,-19,79,-36.2,63.3C-53.4,47.6,-49.4,16.4,-39.9,-13.4C-30.3,-43.1,-15.2,-71.5,7.8,-74C30.8,-76.6,61.7,-53.3,71.3,-23.4Z"&lt;/span&gt;  &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"translate(100 100)"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animated-gradient-background-generator"&gt;
  &lt;/a&gt;
  Animated Gradient Background Generator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://animated-gradient-background-generator.netlify.app/?utm_source=dev.to/koddr"&gt;Animated Gradient Background Generator&lt;/a&gt;. The name of this tool speaks for itself. Completely based on CSS features, no JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJgmXbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k07p3rk37xsy8hxi4o13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDJgmXbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k07p3rk37xsy8hxi4o13.png" alt="animated gradient background generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few options, but it's even good, as this animated background is much easier to implement in an existing website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set of colors;&lt;/li&gt;
&lt;li&gt;Angle of color movement;&lt;/li&gt;
&lt;li&gt;Speed of animation;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.gradient-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;300deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;deepskyblue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;darkviolet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180%&lt;/span&gt; &lt;span class="m"&gt;180%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="m"&gt;18s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient-animation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svg-shape-dividers-creator"&gt;
  &lt;/a&gt;
  SVG Shape Dividers Creator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://shapedividers.com/?utm_source=dev.to/koddr"&gt;SVG Shape Dividers Creator&lt;/a&gt; is a really useful tool for generating content splitter waves (and more) for your website. It's based on plain CSS and can easily be built into any project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWBYRlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckoi4lb2ufecfiu3kjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLWBYRlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fckoi4lb2ufecfiu3kjv.png" alt="svg shape dividers creator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A huge number of options for you to choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wave position &amp;amp; color;&lt;/li&gt;
&lt;li&gt;Short &amp;amp; Long axis;&lt;/li&gt;
&lt;li&gt;Animation duration;&lt;/li&gt;
&lt;li&gt;Support mobile and tablet in-app views;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And my favorite feature is over 35 free wave patterns like this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GMeMdMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sjyl0vzje8p2qhgag5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GMeMdMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7sjyl0vzje8p2qhgag5.png" alt="wave patterns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'shape divider from ShapeDividers.com'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'data:image/svg+xml;
    charset=utf8, &amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 35.28 2.17" preserveAspectRatio="none"&amp;gt;&amp;lt;path d="M0 .5c3.07.55 9.27-.42 16.14 0 6.88.4 13.75.57 19.14-.11V0H0z" fill="%23fbd8c2"/&amp;gt;&amp;lt;path d="M0 1c3.17.8 7.29-.38 10.04-.55 2.75-.17 9.25 1.47 12.67 1.3 3.43-.17 4.65-.84 7.05-.87 2.4-.02 5.52.88 5.52.88V0H0z" opacity=".5" fill="%23fbd8c2"/&amp;gt;&amp;lt;path d="M0 1.85c2.56-.83 7.68-.3 11.79-.42 4.1-.12 6.86-.61 9.58-.28 2.73.33 5.61 1.17 8.61 1 3-.19 4.73-.82 5.3-.84V.1H0z" opacity=".5" fill="%23fbd8c2"/&amp;gt;&amp;lt;/svg&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;2100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.shapedividers_com-9933&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2vw&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wicked-backgrounds"&gt;
  &lt;/a&gt;
  Wicked Backgrounds
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wickedbackgrounds.com/?utm_source=dev.to/koddr"&gt;Wicked Backgrounds&lt;/a&gt; is a tool for creating beautiful and fully customizable wavy SVG backgrounds. The authors did an impressive job on this online tool, so it has a nice design and UX.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGmGE1YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riaglx6ccd91mooayfkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGmGE1YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/riaglx6ccd91mooayfkj.png" alt="wicked backgrounds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are not as many options as I would have liked (for example, &lt;em&gt;I would still like to control the curvature of each of the waves&lt;/em&gt;), but for most tasks this is enough:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wave count;&lt;/li&gt;
&lt;li&gt;Color with color mode;&lt;/li&gt;
&lt;li&gt;Angle of wave rotation;&lt;/li&gt;
&lt;li&gt;Randomize wave's shape;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example “copy-paste” output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.1"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xlink=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xlink"&lt;/span&gt; &lt;span class="na"&gt;xmlns:svgjs=&lt;/span&gt;&lt;span class="s"&gt;"http://svgjs.dev/svgjs"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 1920 1080"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;rect&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1920"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1080"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/rect&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"matrix(1.15,0,0,1.15,-133.8815414428709,-81)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M0,-1080C-16.109467690272208,-987.3534782755676,-76.3233648777778,-696.694101273433,-96.65680614163324,-524.1208696534056C-116.99024740548867,-351.54763803337823,-154.87768348144857,-186.2317926518452,-122.0006475831326,-44.56061027983549C-89.12361168481664,97.11057209217424,79.74857135483008,205.34394482433856,100.6054092482625,325.9062245786526C121.46224714169493,446.46850433296663,9.837258542218564,527.7054581855967,3.1403797774619306,678.8130682460487C-3.5564989872947024,829.9206783065007,62.322865374741006,1081.166449881082,60.424136659722706,1232.5518849413647C58.525407944704405,1383.9373200016475,1.8186969306392573,1432.5509927646397,-8.25199251264786,1587.1256786077456C-18.322681955934975,1741.7003644508516,-1.37533208544131,2064.5209464346244,0,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1000&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M320,-1080C316.5479274166343,-988.0283947909271,306.52547890189555,-735.2750389899924,299.28756449980597,-528.1703687455629C292.0496500977164,-321.0656985011334,261.21331693651325,-72.3552689085293,276.57251358746254,162.62802146657714C291.9317102384118,397.6113118416836,400.5251410555341,654.6011081064328,391.44274440550174,881.7293735050758C382.3603477554694,1108.857638903719,233.98525775485209,1312.352509442615,222.07813368726846,1525.3976138584358C210.17100961968484,1738.4427182742565,303.67968894787805,2054.232935643073,320,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1001&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M640,-1080C649.4269886515594,-936.4225056950557,686.3731109342367,-488.6591163963009,696.5619319093564,-218.53503417033437C706.7507528844761,51.589048055632134,720.4152486002066,295.2526065023857,701.1329258507185,540.7444933557989C681.8506031012304,786.2363802092121,591.0568163875477,984.5403691761117,580.867995412428,1254.4162869501451C570.6791744373082,1524.2922047241786,630.1446659020713,2009.0693811583576,640,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1002&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M960,-1080C972.2722028771731,-999.3689936463607,1044.1924579458341,-778.7088223996913,1033.6332172630384,-596.2139618781637C1023.0739765802426,-413.7191013566361,918.9245023444137,-189.21592185427187,896.6445559032254,14.96916312916585C874.3646094620372,219.15424811260357,899.6643029716962,467.86234802809037,899.9535386159089,628.8965480224628C900.2427742601216,789.9307480168352,904.6358103185602,827.5961407572682,898.3799697685013,981.1743630954002C892.1241292184424,1134.7525854335322,852.1484902769726,1353.8949425671544,862.4184953155557,1550.3658820512544C872.6885003541388,1746.8368215353544,943.7364158859259,2058.394313675209,960,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1003&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1280,-1080C1294.0939719360897,-1011.9782300101334,1355.3563163190304,-811.9909292764734,1364.5638316165382,-671.8693800608005C1373.771346914046,-531.7478308451276,1328.2045657020783,-382.7469685563632,1335.2450917850465,-239.27070470596277C1342.2856178680147,-95.79444085556233,1406.6454171746414,37.69214417447009,1406.8069881143476,188.98820304160216C1406.968559054054,340.28426190873427,1348.3747769475092,507.82694083248896,1336.2145174232842,668.5056484968296C1324.0542578990592,829.1843561611703,1361.84281542639,971.2505198492404,1333.8454309689978,1153.0604490276464C1305.8480465116056,1334.8703782060525,1177.2044491737645,1591.5419650718736,1168.2302106789316,1759.365223567266C1159.2559721840987,1927.1884820626583,1261.371701779822,2093.227537261211,1280,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1004&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1600,-1080C1613.673863873465,-1017.7817217047276,1698.5138879669723,-846.6548339269276,1682.0431832407908,-706.6903302283656C1665.5724785146092,-566.7258265298036,1511.9988180998816,-370.06959119239764,1501.1757716429108,-240.21297780862784C1490.35272518594,-110.35636442485807,1599.144792699853,-59.34818674406321,1617.1049044989652,72.449350074253C1635.0650162980774,204.24688689256922,1603.7020308745543,417.14525790809193,1608.9364424375835,550.5722431012696C1614.1708540006127,683.9992282944472,1648.9919203907264,718.8597923126912,1648.5113738771402,873.0112612333191C1648.030827363554,1027.1627301539472,1629.3649936216461,1340.8009575005751,1606.0531633560663,1475.4810566250376C1582.7413330904865,1610.1611557495,1509.6492528430053,1567.0053654176002,1508.640392283661,1681.091855980094C1507.6315317243166,1795.1783465425876,1584.7733987139436,2080.1819759966825,1600,2160L 1920 2160 L 1920 -1080 Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(&amp;amp;quot;#SvgjsLinearGradient1005&amp;amp;quot;)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1001"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#2a2a2a"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#2a2a2a"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.16666666666666666"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1002"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#555555"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#555555"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.3333333333333333"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1003"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#7f7f7f"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#7f7f7f"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1004"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#aaaaaa"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#aaaaaa"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.6666666666666666"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0.1"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"SvgjsLinearGradient1005"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#d4d4d4"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;stop-color=&lt;/span&gt;&lt;span class="s"&gt;"#d4d4d4"&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0.8333333333333334"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-pattern-repository"&gt;
  &lt;/a&gt;
  Basic Pattern Repository
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://patterns.helloyes.dev/?utm_source=dev.to/koddr"&gt;Basic Pattern Repository&lt;/a&gt; is a just SVG for your delight! A distinctive feature of the project is the ability to load the necessary pattern through the API. This approach not only saves development time, but also keeps your CSS code untouched.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b7td0gS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/totcfvxqxlzx1w6i6pj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b7td0gS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/totcfvxqxlzx1w6i6pj9.png" alt="basic pattern repository"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get a JSON response containing all available patterns as entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;https://patterns.helloyes.dev/api/patterns.json
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get a JSON response for a specific pattern:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;https://patterns.helloyes.dev/api/pattern/&amp;lt;PATTERN NUMBER&amp;gt;&lt;/span&gt;.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#figen"&gt;
  &lt;/a&gt;
  Figen
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://figen.cc/?utm_source=dev.to/koddr"&gt;Figen&lt;/a&gt; is a free online post cover and background generator tool for social media, like Twitter, Facebook, Instagram, LinkedIn and so on. &lt;/p&gt;

&lt;p&gt;Saves a lot of time, and it looks perfect! I, personally, use it for some of my Twitter posts and placeholders for projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;😉 &lt;strong&gt;Note:&lt;/strong&gt; By the way, &lt;a href="https://twitter.com/true_koddr"&gt;follow me&lt;/a&gt; to keep up to date with new articles!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2beqPUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0l1m7uvg9z4ccv6pd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2beqPUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0l1m7uvg9z4ccv6pd8.png" alt="figen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The settings are wealthy and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image size with presets;&lt;/li&gt;
&lt;li&gt;Shapes support;&lt;/li&gt;
&lt;li&gt;Background and gradient colors;&lt;/li&gt;
&lt;li&gt;Upload photo for background;&lt;/li&gt;
&lt;li&gt;Text editor;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the format of the tool suggests using it immediately in applications, so the output will be an optimized PNG file rather than SVG code. For example, this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICdhJ-ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60gdxd9ff8l9rbzx1c9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICdhJ-ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h60gdxd9ff8l9rbzx1c9.png" alt="figen output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tools authors and Vic Shóstak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>6 Chrome &amp; VS Code Extensions For Backend Developers</title>
      <author>Alex Omeyer</author>
      <pubDate>Mon, 11 Oct 2021 11:46:36 +0000</pubDate>
      <link>https://dev.to/alexomeyer/6-chrome-vs-code-extensions-for-backend-developers-24gm</link>
      <guid>https://dev.to/alexomeyer/6-chrome-vs-code-extensions-for-backend-developers-24gm</guid>
      <description>&lt;p&gt;Extensions can make our life as a developer a little easier. Whether they are Visual Studio Code or browser extensions, they can help you manage your tasks, optimize your workflow, or improve your efficiency. Sometimes, an extension can aid you visually, such as JSON Formatter.&lt;/p&gt;

&lt;p&gt;This article shows you different extensions you can install in your Chrome or Firefox web browser or via Visual Studio Code. Many backend developers don’t know about extensions or are reluctant to use them. Yet, developers often overlook the benefits of using these extensions. &lt;/p&gt;

&lt;p&gt;First, let’s take a look at Chrome extensions for backend developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chrome-extensions-for-backend-developers"&gt;
  &lt;/a&gt;
  Chrome Extensions for Backend Developers
&lt;/h2&gt;

&lt;p&gt;Here’s a list of three Chrome extensions for backend devs with alternatives for each one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-json-formatter-json-visualizer"&gt;
  &lt;/a&gt;
  1. JSON Formatter - JSON Visualizer
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 1,000,000+&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.6/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt; assists developers visually. Many developers have to deal with JSON data. It’s a popular format to structure, handle, store, and transfer data in backend applications such as RESTful APIs. However, when your browser prints an API response’s JSON object to your browser, you’ll get a flat string that is not very human-friendly to read.&lt;/p&gt;

&lt;p&gt;For that reason, JSON Formatter formats raw JSON data to a human-readable tree-view of the JSON object. It’s a small Chrome extension, but it definitely makes a difference when reading raw JSON data in your browser. &lt;/p&gt;

&lt;p&gt;You can try out the extension yourself with the following API request to the &lt;a href="https://graph.facebook.com/coca-cola?callback=whatever"&gt;Facebook API&lt;/a&gt; in your browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternative extensions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"&gt;JSON Viewer&lt;/a&gt;: A highly customizable JSON and JSONP viewer&lt;br&gt;
&lt;a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc"&gt;JSONView&lt;/a&gt;: Browser-based JSON viewer and validator that uses a client-side JavaScript implementation of &lt;a href="http://github.com/zaach/jsonlint"&gt;JSONLint&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-dailydev-tech-news-aggregator"&gt;
  &lt;/a&gt;
  2. Daily.dev - Tech News Aggregator
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 100,000+&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.8/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://chrome.google.com/webstore/detail/dailydev-all-in-one-codin/jlmpjdjjbgclbocgajdjefcidcncaied?hl=en"&gt;Daily.dev&lt;/a&gt; extension won’t improve your work as a developer, however, it’s a great extension to stay up to date about developer news. Moreover, Daily.dev is a news aggregator for developer-focused news. &lt;/p&gt;

&lt;p&gt;Many developers spend quite some time reading tech websites to stay up-to-date with industry news and product releases. However, they don’t realise it’s a potential source of distraction. On top of that, you want to avoid reading low-quality developer content.&lt;/p&gt;

&lt;p&gt;This is where Daily.dev jumps in. The extension showcases a page full of news stories, developer blog posts, and other useful developer-related pages about subjects you pick. For instance, you can tell the Daily.dev aggregator to focus on JavaScript-related news. Whenever you open a new tab, the extension will show a handful of high-value posts for you to read.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4SCi6Mbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ri397kyrpjkv2hf1ls7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4SCi6Mbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ri397kyrpjkv2hf1ls7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, Daily.dev is an excellent extension to cut through the noise and stay up to date with industry news.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternative extensions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/30-seconds-of-knowledge/mmgplondnjekobonklacmemikcnhklla"&gt;30 Seconds of Knowledge&lt;/a&gt;: This extension shows small nuggets of programming knowledge through code snippets each time you open a new tab.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-octotree-github-on-steroids"&gt;
  &lt;/a&gt;
  3. Octotree - GitHub on Steroids
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 400,000+&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.9/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many describe &lt;a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc"&gt;Octotree&lt;/a&gt; as GitHub on steroids. The free version allows you to quickly explore a project’s contents with an IDE-like file explorer view. Also, you can click through on &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; statements to inspect a dependency. &lt;/p&gt;

&lt;p&gt;Note that you can also use this extension for private repositories by entering your GitHub authentication token. By doing so, the extension can access your private repositories as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rIE39S0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spiakdtqwlycivxx635y.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rIE39S0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spiakdtqwlycivxx635y.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The paid version has many more features, such as multi-tab view, project-wide search capabilities, and an enhanced code review view. If you want to learn more about the paid offering, you can check out the &lt;a href="https://www.octotree.io/"&gt;Octotree website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alternative extensions?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack"&gt;Sourcegraph&lt;/a&gt;: Adds code intelligence to GitHub, GitLab, and other hosts: hovers, definitions, references. For 20+ languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd"&gt;Enhanced GitHub&lt;/a&gt;: ​​Displays repository size, file size, download link, and option to copy file contents.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visual-studio-code-extensions-for-backend-developers"&gt;
  &lt;/a&gt;
  Visual Studio Code Extensions for Backend Developers
&lt;/h2&gt;

&lt;p&gt;Here’s a list of three Visual Studio Code extensions for backend devs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-vs-code-remote-containers"&gt;
  &lt;/a&gt;
  4. VS Code Remote Containers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 5,395,555&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.8/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers"&gt;Remote Containers&lt;/a&gt; extension lets you use a Docker container as a full-featured development environment. Therefore, you can develop without having to worry about the impact on your local system. Do you want to experiment with some settings? You can safely do so using your container. Moreover, you can quickly change between development environments by switching containers. &lt;/p&gt;

&lt;p&gt;The extension lets you mount workspace files into the container from the local file system or copy them into it once the container is running. Extensions are installed and run inside the container to have full access to the tools, platform, and file system. You then work with Visual Studio Code as if everything were running locally on your machine, except now they are separated inside a container.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-code-spell-checker-grammar-proofing-for-code"&gt;
  &lt;/a&gt;
  5. Code Spell Checker - Grammar Proofing for Code
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 3,193,039&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.5/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt; does exactly what it promises; it will flag any spelling mistakes in your code. Code Spell Checker works best with camelCase code. Now, you might wonder why you need this? &lt;/p&gt;

&lt;p&gt;Let me insert a personal story here. Our developer team once had a significant bug that we couldn’t track down. After a lot of searching, the bug was caused due to a small spelling mistake. It shows how vital a spell checker can be for your code to avoid critical bugs. &lt;/p&gt;

&lt;p&gt;Some notes to consider when using this extension:&lt;br&gt;
• The spellchecker is case insensitive&lt;br&gt;
• The extension uses a local dictionary. Therefore, no code leaves your machine to enhance security for Closed Source code.&lt;br&gt;
• The spellchecker only validates words longer than three characters&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-path-intellisense-autocomplete-filenames"&gt;
  &lt;/a&gt;
  6. Path Intellisense - Autocomplete Filenames
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Users: 5,395,555&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rating: 4.8/5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt; helps you to autocomplete filenames when importing files. The extension works for most programming languages and also HTML. The extension uses the &lt;code&gt;ts.config.compilerOptions.baseUrl&lt;/code&gt; in your editor configuration as a mapping. &lt;/p&gt;

&lt;p&gt;Furthermore, you can define custom mappings, as shown in the example below. You can set a &lt;code&gt;/&lt;/code&gt; mapping to the root of your workspace, or you can define an absolute path like the &lt;code&gt;global&lt;/code&gt; mapping.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"path-intellisense.mappings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/lib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"global"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/Users/dummy/globalLibs"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a must-have extension for backend developers to avoid mistakes when importing files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-track-technical-debt-in-your-editor"&gt;
  &lt;/a&gt;
  Bonus: Track technical debt in your editor
&lt;/h3&gt;

&lt;p&gt;Try out the &lt;a href="https://www.stepsize.com/r/vscode?utm_medium=dev.to&amp;amp;utm_source=referral&amp;amp;utm_campaign=backend%20extenstions"&gt;Stepsize VS Code&lt;/a&gt; extension that our team is building! Stepsize is an issue tracker in your editor which you can use to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bookmark code&lt;/li&gt;
&lt;li&gt;track and prioritise technical debt&lt;/li&gt;
&lt;li&gt;collaborate with your team on any codebase issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you'll enjoy using it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEz7kCA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwn80iodpbepdzz8l22x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEz7kCA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwn80iodpbepdzz8l22x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>programming</category>
      <category>vscode</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Create a backend in Javascript (part 5): Node Package Manager (NPM)</title>
      <author>Eric The Coder</author>
      <pubDate>Mon, 11 Oct 2021 11:44:55 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-part-5-node-package-manager-npm-584g</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-part-5-node-package-manager-npm-584g</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-node-package-manager"&gt;
  &lt;/a&gt;
  NPM (Node Package Manager)
&lt;/h2&gt;

&lt;p&gt;Do you want to create a NodeJS function or module? Why re-invent the wheel? Chances are, the function you want to code has already been created by another developer.&lt;/p&gt;

&lt;p&gt;NodeJS, allows you to use libraries created by the community. To do this, there is a tool called NPM (Node Package Manager) which allows you to download, install and manage these packages.&lt;/p&gt;

&lt;p&gt;NPM is already pre-installed with NodeJS. It is a command line application that will allow you to install the package of your choice.&lt;/p&gt;

&lt;p&gt;The website [&lt;a href="https://www.npmjs.com/ofond(https://www.npmjs.com/)"&gt;https://www.npmjs.com/ofond(https://www.npmjs.com/)&lt;/a&gt; contains a list of all the packages available through NPM. There are more than a million.&lt;/p&gt;

&lt;p&gt;NPM provides a system that allows management of installed packages and their version. This management is done with the help of a file called 'package.json'&lt;/p&gt;

&lt;p&gt;This 'package.json' file is unique to our application and contains the list of 'dependencies' of our project. That is to say the list of all the installed packages and their version.&lt;/p&gt;

&lt;p&gt;This file also contains other information about your project such as name, author and start file (the first that Node.jS will run). It is also possible to create 'script' commands to launch certain functions such as launching the server or the compilation and execution of the project.&lt;/p&gt;

&lt;p&gt;You can create this 'package.json' file manually or run an NPM command to do it automatically&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will ask a few questions. Just use the default answers and it will create the file 'package.json'&lt;/p&gt;

&lt;p&gt;Note that if you have not created a 'package.json' file when you install your first package, NPM will create the file automatically for you.&lt;/p&gt;

&lt;p&gt;We are now going to install our first package named 'slugify'. This package is a small utility for creating a web friendly URL from a string. Ex. "Welcome to my home" will turn into a user-friendly URL for the web: welcome-to-my-home&lt;/p&gt;

&lt;p&gt;To install the package enter the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the package is installed, you can consult the 'package.json' file, you will find the 'slugify' package listed under the list of 'dependencies' there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slugify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^1.6.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the source files of this packages have all been copied into the 'node_modules' folder&lt;/p&gt;

&lt;p&gt;This package can now be used in your application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;slugify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My New Web Site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// My-New-Web-Site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NPM can also install packages globally so that any Node.js applications on your computer can import and use the installed packages. NPM installs the global packages in the //local/lib/node_modules folder.&lt;/p&gt;

&lt;p&gt;Add -g in the install command to install the package globally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;create-react-app &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the time, you will need administrator privileges to install a package globally. In this case, use the sudo command (on Mac)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;create-react-app &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#version-management"&gt;
  &lt;/a&gt;
  Version management
&lt;/h3&gt;

&lt;p&gt;We can see the version number of the package in the file of 'package.json'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"dependencies"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"slugify"&lt;/span&gt;: &lt;span class="s2"&gt;"^1.4.7"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The version number reads like this (eg 1.4.7):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Major version (1): New version with breaking changes&lt;/li&gt;
&lt;li&gt;Minor version (4): New features but no breakthrough changes&lt;/li&gt;
&lt;li&gt;Patch version (7): Only bugs are fixed&lt;/li&gt;
&lt;li&gt;Version prefix:
^ 1.4.7: Accept the minor version update
~ 1.4.7: Only accept the update of the patch version&lt;/li&gt;
&lt;li&gt;1.4.7: Accept all version updates (not recommended)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#updating-packages"&gt;
  &lt;/a&gt;
  Updating packages
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm update slugify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will install accepted updates (if they exist at that time)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uninstalling-packages"&gt;
  &lt;/a&gt;
  Uninstalling packages
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm uninstall slugify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nodemodules-folder"&gt;
  &lt;/a&gt;
  node_modules folder
&lt;/h3&gt;

&lt;p&gt;When you install a package, the contents of the package will be installed in this folder. If you delete this folder, you can recreate it by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will reinstall all your packages listed in the file 'packages.json'&lt;/p&gt;

&lt;p&gt;This command is useful for installing packages when you copy an app from a colleague or from Github. Because when you do so, the node_modules folder is never provided. So you need this command to recreate it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node-package-execute-npx"&gt;
  &lt;/a&gt;
  Node Package Execute (NPX)
&lt;/h3&gt;

&lt;p&gt;npx stands for Node Package execute. It is a tool specially designed for executing packages. When you launch the execution of a package with this tool, npx will look in the "PATH" variable of the computer then in the binary files of the project modules to launch the command. If it has not found it, the tool is even able to go on the web to find the command and then execute it.&lt;/p&gt;

&lt;p&gt;The package is executed in the current directory. npx can also be used in the "scripts" section of the "packages.json" file, in order to put commands that launch a server or a platform at startup.&lt;/p&gt;

&lt;p&gt;Launch a package with npx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx creat-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-nodemon-package"&gt;
  &lt;/a&gt;
  The nodemon package
&lt;/h2&gt;

&lt;p&gt;When you develop a NodeJS application, each time you modify your code you must stop the server and restart your application. It is a huge waste of time.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a tool to remedy this: nodemon&lt;/p&gt;

&lt;p&gt;nodemon is a tool that helps develop Node.js based applications by automatically restarting the Node application when file changes in the directory are detected.&lt;/p&gt;

&lt;p&gt;nodemon does not require any additional modification to your code or your development method. nodemon is a replacement wrapper for Node. To use nodemon, replace the word node on the command line when running your script.&lt;/p&gt;

&lt;p&gt;Example use to launch / test your application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx nodemon app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installation of the module in development mode only&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to install the nodemon package globally. This way you can use nodemon from all your projects&lt;/p&gt;

&lt;p&gt;Here is the command for installation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use when globally installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nodemon app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best UI Frameworks for React.js</title>
      <author>RaftLabs - Product Development Agency</author>
      <pubDate>Mon, 11 Oct 2021 11:19:34 +0000</pubDate>
      <link>https://dev.to/raftlabs/best-ui-frameworks-for-react-js-b49</link>
      <guid>https://dev.to/raftlabs/best-ui-frameworks-for-react-js-b49</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqY-qujF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8isqxv4hdmqxaw9beu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqY-qujF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8isqxv4hdmqxaw9beu4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;React&lt;/strong&gt; (also known as React.js or ReactJS) is a free and &lt;strong&gt;open-source JavaScript library&lt;/strong&gt; for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React is a prevalent Front end framework with over 172k stars on GitHub. There is a growing range of support libraries that helps us customize our UI components efficiently.&lt;/p&gt;

&lt;p&gt;Here we will look at some of the best &lt;strong&gt;React UI Frameworks&lt;/strong&gt; that you can adopt in your project.&lt;/p&gt;

&lt;p&gt;The comparison made here is based on user reviews from the following trusted sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  GitHub&lt;/li&gt;
&lt;li&gt;  npm.js&lt;/li&gt;
&lt;li&gt;  StackShare&lt;/li&gt;
&lt;li&gt;  Stackoverflow&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#1-ant-design%E2%80%8A%E2%80%8Athe-worlds-second-most-popular-react-ui-framework"&gt;
  &lt;/a&gt;
  1) &lt;strong&gt;Ant Design&lt;/strong&gt; --- The world's second most &lt;strong&gt;popular react UI framework&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It is an enterprise-class UI design language with a set of high-quality React UI components.It is one of the best React UI library for enterprises. It offers many polished components that could be used to build an entire application. The documentation is extensive, with tons of examples, and stays up to date.&lt;/p&gt;

&lt;p&gt;To find the examples of websites built on Ant Design, go &lt;a href="https://ant.design/docs/spec/cases"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://ant.design/"&gt;&lt;strong&gt;Ant Design&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 73.4k&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://trends.builtwith.com/websitelist/ANT-Design/Historical"&gt;11,749&lt;/a&gt; websites use ANT Design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.binance.com/en"&gt;&lt;strong&gt;Binance&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.tencent.com/"&gt;&lt;strong&gt;Tencent&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://intl.alipay.com/"&gt;&lt;strong&gt;Alipay&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Internationalization support for dozens of languages,&lt;/li&gt;
&lt;li&gt;  Powerful theme customization, and Typescript support.&lt;/li&gt;
&lt;li&gt;  Ant design is supported by modern browsers and Internet Explorer 11.&lt;/li&gt;
&lt;li&gt;  Enterprise look and feel.&lt;/li&gt;
&lt;li&gt;  High quality icons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://ant.design/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-material-ui%E2%80%8A%E2%80%8Areact-ui-components-for-faster-and-easier-web-development"&gt;
  &lt;/a&gt;
  2) &lt;strong&gt;Material UI &lt;/strong&gt;--- &lt;strong&gt;React UI components&lt;/strong&gt; for faster and easier web development.
&lt;/h4&gt;

&lt;p&gt;Material-UI is the most popular React UI framework that provides Google Material Design out of the box. Material design takes inspiration from the physical world and textures while keeping the actual UI elements to a minimum.&lt;/p&gt;

&lt;p&gt;See the full showcase of public apps using Material UI &lt;a href="https://material-ui.com/discover-more/showcase/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/hihai"&gt;&lt;strong&gt;Hai Nguyen&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‍&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 70k&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://trends.builtwith.com/websitelist/Material-UI/Historical"&gt;193,907&lt;/a&gt; websites use Material-UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://medium.com/"&gt;&lt;strong&gt;Medium.com&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.makit.lv/en/"&gt;&lt;strong&gt;MAK IT&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://scale.com/"&gt;&lt;strong&gt;Scale&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Automatic color changes.&lt;/li&gt;
&lt;li&gt;  Switch between RTL and Non-RTL&lt;/li&gt;
&lt;li&gt;  Integration with Design Kits like Figma, Sketch and Adobe XD.&lt;/li&gt;
&lt;li&gt;  A wide range of helpful components are available, like app bars, auto complete, badges, buttons, cards, dialog boxes, icons, menus, sliders and more.&lt;/li&gt;
&lt;li&gt;  Material-UI also offers React themes and templates, so you can have a custom color theme for your app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-react-bootstrap%E2%80%8A%E2%80%8Athe-most-popular-frontend-ui-framework-rebuilt-for%C2%A0react"&gt;
  &lt;/a&gt;
  3) &lt;strong&gt;React Bootstrap&lt;/strong&gt; --- The most &lt;strong&gt;popular front-end UI framework&lt;/strong&gt; rebuilt for React.
&lt;/h4&gt;

&lt;p&gt;React-Bootstrap replaces the Bootstrap JavaScript. Each component has been built from scratch as a true React component, without unneeded dependencies like jQuery. React Bootstrap is one of the oldest React UI libraries and has grown steadily with React itself. While React-Bootstrap doesn't offer any official support, there is a massive, active community and plenty of resources supporting Bootstrap.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://twitter.com/mdo?lang=en"&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/jacob-thornton-13a6a5162"&gt;&lt;strong&gt;Jacob Thornton&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 19.7k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://isgood.ai/"&gt;&lt;strong&gt;isgood.ai&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://initrode-it.com/"&gt;&lt;strong&gt;initrode&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://chaskiq.io/"&gt;&lt;strong&gt;Chaskiq&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Bootstrap's grid system allows fully responsive series of containers, rows, and columns for your layout.&lt;/li&gt;
&lt;li&gt;  Choose between &lt;a href="https://react-bootstrap.github.io/components/alerts/"&gt;dozens of components&lt;/a&gt;, including badges, carousels, toasts, and jumbotrons.&lt;/li&gt;
&lt;li&gt;  The React component model gives us more control over form and function of each component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://react-bootstrap.github.io/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-semantic-ui-react%E2%80%8A%E2%80%8Athe-official-plugin-for-semantic%C2%A0ui"&gt;
  &lt;/a&gt;
  4) &lt;strong&gt;Semantic UI React&lt;/strong&gt; --- The official plugin for Semantic UI
&lt;/h4&gt;

&lt;p&gt;Semantic UI React is the official plugin for Semantic UI. The library boasts a collection of over fifty components, including segments, progress bars, transitions, pagination, and more. However, despite all of its unique features, if you do not have hands-on experience in JavaScript, you may find the library a bit complex.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://www.linkedin.com/in/jacklukic"&gt;&lt;strong&gt;Jack Lukic&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 12.4k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.lumeneo.com/"&gt;Lumeneo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://hacker.works/"&gt;hacker.works&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://rev.io/"&gt;Rev.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Impressive customization and theming capabilities.&lt;/li&gt;
&lt;li&gt;  Zero traces of any jQuery code, simplifying the application development.&lt;/li&gt;
&lt;li&gt;  Wide collection of over 50 UI components for developers.&lt;/li&gt;
&lt;li&gt;  Complete SUI component definition support.&lt;/li&gt;
&lt;li&gt;  Simple declarative component APIs vs brittle HTML markup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://react.semantic-ui.com/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-chakra-ui%E2%80%8A%E2%80%8Asimple-modular-amp-accessible-react-ui-components-for-your-react-applications"&gt;
  &lt;/a&gt;
  5) &lt;strong&gt;Chakra UI&lt;/strong&gt; --- Simple, Modular &amp;amp; Accessible &lt;strong&gt;React UI Component&lt;/strong&gt;s for your React Applications
&lt;/h4&gt;

&lt;p&gt;Chakra UI provides a set of accessible, reusable, and composable &lt;strong&gt;R&lt;/strong&gt;eact UI components that make it easy to create websites and apps. Chakra UI components are built on top of a React UIPrimitive for endless composability. The community of Chakra UI is very active. You will get all the help required whenever you feel stuck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://twitter.com/thesegunadebayo?lang=en"&gt;Segun Adebayo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 19.6k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://bonton.app/"&gt;&lt;strong&gt;Bonton&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://orbital.chat/"&gt;&lt;strong&gt;Orbital Chat&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://luggit.app/"&gt;&lt;strong&gt;LUGGit&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Chakra UI contains a set of layout components like Box and Stack that make it easy to style your components by passing props.&lt;/li&gt;
&lt;li&gt;  Most components in Chakra UI are dark mode compatible.&lt;/li&gt;
&lt;li&gt;  Chakra UI components follows the WAI-ARIA guidelines specifications.&lt;/li&gt;
&lt;li&gt;  You can use the same react component as much as you want and customize it for further use.&lt;/li&gt;
&lt;li&gt;  Chakra UI library provides you modularreact UI componentsthat help in writing clean and optimal code.&lt;/li&gt;
&lt;li&gt;  This library does not require any heavy set up to implement and is simple and easy to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://chakra-ui.com/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-blueprint%E2%80%8A%E2%80%8Aa-reactbased-ui-toolkit-for-the%C2%A0web"&gt;
  &lt;/a&gt;
  6) &lt;strong&gt;Blueprint&lt;/strong&gt; --- A React-based UI toolkit for the web
&lt;/h4&gt;

&lt;p&gt;Blueprint is a newly open-sourced design system implemented as a collection of composable React components and optimized for desktop applications. This is not a mobile-first UI toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://www.palantir.com/"&gt;&lt;strong&gt;Palantir&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 18k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.onedot.com/"&gt;&lt;strong&gt;Onedot&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.allocate.co.uk/"&gt;&lt;strong&gt;Allocate&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://onvoard.com/"&gt;&lt;strong&gt;OnVoard&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The React UI libraries has over forty components optimized in particular for complex data-dense interfaces for desktop applications.&lt;/li&gt;
&lt;li&gt;  Contains many useful components like breadcrumbs, buttons, callouts, cards, dividers, navbars, tabs, tags, and much more.&lt;/li&gt;
&lt;li&gt;  The library supports Chrome, Firefox, Safari, IE 11, and Microsoft Edge.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://blueprintjs.com/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-grommet%E2%80%8A%E2%80%8Afocus-on-the-essential-experience"&gt;
  &lt;/a&gt;
  7) &lt;strong&gt;Grommet&lt;/strong&gt; --- Focus on the essential experience
&lt;/h4&gt;

&lt;p&gt;Grommet is a react-based framework that provides accessibility, modularity, responsiveness, and theming in a tidy package. Grommet is a component library designed for responsive, accessible, and mobile-first web projects. It even has a list of SVG icons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://www.hp.com/in-en/home.html"&gt;&lt;strong&gt;Hewlett Packard Enterprise&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 7.4k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.netflix.com/in/"&gt;&lt;strong&gt;Netflix&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.uber.com/in/en/"&gt;&lt;strong&gt;Uber&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.boeing.com/"&gt;&lt;strong&gt;Boeing&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.hp.com/in-en/home.html"&gt;&lt;strong&gt;HP&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.samsung.com/in/"&gt;&lt;strong&gt;Samsung&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.twilio.com/"&gt;&lt;strong&gt;Twilio&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It embraces atomic design methods and allows for keyboard navigation, screen reader tags, and more.&lt;/li&gt;
&lt;li&gt;  Powerful theming tools which lets you tailor the component library to align with your color, type, and layout needs. You can even control component interaction.&lt;/li&gt;
&lt;li&gt;  Tailor composite components.&lt;/li&gt;
&lt;li&gt;  Flexible layouts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://v2.grommet.io/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-evergreen%E2%80%8A%E2%80%8Areact-ui-framework-by%C2%A0segment"&gt;
  &lt;/a&gt;
  8) &lt;strong&gt;Evergreen&lt;/strong&gt; --- React UI Framework by Segment
&lt;/h4&gt;

&lt;p&gt;Evergreen contains a set of polished React UI components that work out of the box. It features a UI design language for enterprise-grade web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://segment.com/"&gt;&lt;strong&gt;Segment&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 10.9k&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Dashboard, Stack&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Evergreen contains a set of polished React UI components that work out of the box.&lt;/li&gt;
&lt;li&gt;  Evergreen features a UI design language for enterprise-grade web applications.&lt;/li&gt;
&lt;li&gt;  Evergreen has over 30 components which include buttons, filepickers, select menus, spinners, side sheets, tables, and more.&lt;/li&gt;
&lt;li&gt;  They offer a figma library, and they are working on patterns for handling "Error Messages" and "Table Layouts".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://evergreen.segment.com/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-fluent-ui%E2%80%8A%E2%80%8Amicrosoft-ui-kit-for-web-mobile-amp-desktop-app-development"&gt;
  &lt;/a&gt;
  9) &lt;strong&gt;Fluent UI&lt;/strong&gt; --- Microsoft UI Kit for Web, Mobile &amp;amp; Desktop App Development.
&lt;/h4&gt;

&lt;p&gt;Fluent UI web represents a collection of utilities, React components, and web components for building web applications. It has Web Components and native libraries for iOS, macOS, Android, and Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://www.microsoft.com/en-us"&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 11.8k&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://trends.builtwith.com/websitelist/Fluent-UI/Historical"&gt;97&lt;/a&gt; websites use Fluent UI&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Weekly Downloads on NPM:&lt;/strong&gt; 53,498&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.microsoft.com/en-us"&gt;&lt;strong&gt;Microsoft&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It has components for building forms and lists but also offers very specific ones like a PeoplePicker for example.&lt;/li&gt;
&lt;li&gt;  Good default styling capabilities without any code.&lt;/li&gt;
&lt;li&gt;  Good flexibility and ability to customize the look and functionality of the components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://developer.microsoft.com/en-us/fluentui/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-rebass%E2%80%8A%E2%80%8Areact-primitive-ui-components-built-with-styledsystem"&gt;
  &lt;/a&gt;
  10) &lt;strong&gt;Rebass&lt;/strong&gt; --- React primitive UI components built with styled-system.
&lt;/h4&gt;

&lt;p&gt;Rebass is one of the best grid libraries that provides UI components, leaving the developer to focus only on page development. Rebass offers &lt;a href="https://rebassjs.org/recipes/"&gt;documentation on recipes&lt;/a&gt; for common use cases like grids, navbar, and image cards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developed By:&lt;/strong&gt; &lt;a href="https://twitter.com/jxnblk?lang=en"&gt;&lt;strong&gt;Brent Jackson&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statistics:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;GitHub Stars:&lt;/strong&gt; 7.4k&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Weekly Downloads on NPM:&lt;/strong&gt; 65,779&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Top companies using this:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.tourlane.com/"&gt;&lt;strong&gt;Tourlane&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.charlietango.dk/"&gt;&lt;strong&gt;Charlie Tango&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  First-class support for theming &amp;amp; full compatibility with Theme UI.&lt;/li&gt;
&lt;li&gt;  Quick, mobile-first responsive styles with array-based syntax.&lt;/li&gt;
&lt;li&gt;  Flexbox layout with the Box and Flex components.&lt;/li&gt;
&lt;li&gt;  Minimal footprint at about 4KB.&lt;/li&gt;
&lt;li&gt;  Best-in-class developer ergonomics with &lt;a href="https://styled-system.com/"&gt;Styled System&lt;/a&gt; props.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://rebassjs.org/"&gt;More info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally posted at&lt;/em&gt; &lt;a href="https://raftlabs.co/development/top-react-ui-frameworks?utm_source=devto&amp;amp;utm_campaign=crosspost"&gt;&lt;em&gt;raftlabs.co&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ui</category>
      <category>react</category>
      <category>frontend</category>
      <category>node</category>
    </item>
    <item>
      <title>How To Solve Gee Captcha in Python Using 2Captcha</title>
      <author>Muthu Annamalai Venkatachalam</author>
      <pubDate>Mon, 11 Oct 2021 10:34:02 +0000</pubDate>
      <link>https://dev.to/muthuannamalai12/how-to-solve-gee-captcha-in-python-using-2captcha-55b7</link>
      <guid>https://dev.to/muthuannamalai12/how-to-solve-gee-captcha-in-python-using-2captcha-55b7</guid>
      <description>&lt;p&gt;Everybody knows captchas as those annoying things like "Enter the letters you see on the image" when registering or providing feedback.&lt;/p&gt;

&lt;p&gt;CAPTCHA is designed to make humans capable of reading the text without difficulty, while machines cannot. On the contrary, in practice this rarely works, as almost every simple text captcha posted on the site is cracked after a short period of time. ReCaptcha v2 is much more complicated, but still can be bypassed automatically.&lt;/p&gt;

&lt;p&gt;There is a constant battle between captcha makers and captcha solvers, but different people are interested in automatic captcha solutions so that their software can continue working. Thus, in this particular article, I will demonstrate how to crack gee captcha in Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-captcha"&gt;
  &lt;/a&gt;
  What is a Captcha
&lt;/h2&gt;

&lt;p&gt;A complete automated public Turing test to distinguish between computers and humans is called CAPTCHA. Basically, CAPTCHA determines whether a user is a genuine person or a spam bot. These CAPTCHAs stretch or manipulate letters &amp;amp; numbers &amp;amp; rely on human judgment to determine which symbols they are.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xxrOIyCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633439678415/uaeGDgu9ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xxrOIyCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633439678415/uaeGDgu9ng.png" alt="CAPCHA-computer.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-2captcha"&gt;
  &lt;/a&gt;
  What is 2Captcha
&lt;/h2&gt;

&lt;p&gt;2Captcha.com provides CAPTCHA solving and image recognition services powered by human intelligence. This is the hub for those requiring real-time recognition of their images and those capable of taking the job on.&lt;/p&gt;

&lt;p&gt;They offer 100% accuracy on complicated images as an extra feature based on their special algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The image is recognized by several users&lt;/li&gt;
&lt;li&gt;The robot compares the answers&lt;/li&gt;
&lt;li&gt;The answers that match are recognized as true&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-gee-captcha-in-python-using-2captcha"&gt;
  &lt;/a&gt;
  How To Solve Gee Captcha in Python Using 2Captcha
&lt;/h2&gt;

&lt;p&gt;To get started, we'll need to use the 2captcha-python module. It requires Python 3.x and could be installed with pip&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install 2captcha-python

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create a new instance of 2Captcha class sending our API key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from twocaptcha import TwoCaptcha

solver = TwoCaptcha('YOUR_API_KEY')

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find your API key on the 2captcha.com service after registration and authorization&lt;/p&gt;

&lt;p&gt;Next, let’s create a captcha resolution algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;result = solver.geetest(gt='f1ab2cdefa3456789012345b6c78d90e',
                        challenge='12345678abc90123d45678ef90123a456b',
                        url='https://www.site.com/page/',
                        param1=..., ...)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the captcha should be solved from the same IP address you use to submit it. You'll need to include your proxy along with the other captcha parameters in order to successfully bypass geeCaptcha. &lt;/p&gt;

&lt;p&gt;It returns a token to bypass the captcha. It looks the one below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "challenge": "1a2b3456cd67890e12345fab678901c2de",
    "validate": "09fe8d7c6ba54f32e1dcb0a9fedc8765",
    "seccode": "12fe3d4c56789ba01f2e345d6789c012|jordan"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the values received from the API to submit your request to the target website by placing them in the relevant request fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;geetest_challenge
geetest_validate
geetest_seccode

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, Click on the "Check" button to submit the form.&lt;/p&gt;

&lt;p&gt;Boom now we have solved the geeCaptcha using 2Captcha. 2Captcha is very &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfKUiW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633443289126/wR-awQgx8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfKUiW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633443289126/wR-awQgx8.gif" alt="Geetest.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would it be worth the time spent? Yes, in my opinion. A few lines of code could save you hours of time. 2captcha is even more profitable if you run a self-hosted solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can now extend your support by buying me a Coffee.😊👇&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/muthuannamalai"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for Reading 😊 &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Prevent Configuration Errors in Kubernetes</title>
      <author>Vikas Solegaonkar</author>
      <pubDate>Mon, 11 Oct 2021 10:30:57 +0000</pubDate>
      <link>https://dev.to/solegaonkar/prevent-configuration-errors-in-kubernetes-30dn</link>
      <guid>https://dev.to/solegaonkar/prevent-configuration-errors-in-kubernetes-30dn</guid>
      <description>&lt;p&gt;It was 3AM on a Monday. The team had experienced a sleepless weekend, trying to dig into a production failure. In just a few hours, the work week would begin, and we all knew that the world needed this application to work. It would be a disaster if this issue were not fixed before then. &lt;/p&gt;

&lt;p&gt;But why did it fail? It worked last week. Why did it stop working today? A recent code change? But that was absolutely unrelated. We tested it - with all the rigor. We had setup the best test automation, topped with some manual tests as well. Even further, our microservices are scanned and reviewed by effective tools. Why then did it fail? &lt;/p&gt;

&lt;p&gt;We started cursing our fate and the tools we used. Management started yelling at us. You said K8s is meant for resilience and it enables applications that can never fail. But we have seen more trouble than solution. Never use Open Source! And all that blah..&lt;/p&gt;

&lt;p&gt;But after hours of struggle, fate smiled - just in time - and we discovered the problem with the YML configuration. Some progressive minded developer had not specified the version of the embedded opensource DB used in there - he had used a "latest" - hoping to get the best features as they are released. A new version was available, and that broke some existing functionality.&lt;/p&gt;

&lt;p&gt;Hush! Our job was saved. We managed to resolve the issue and then crashed into the bed - as the world started using our application that was functioning as before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rca"&gt;
  &lt;/a&gt;
  The RCA
&lt;/h2&gt;

&lt;p&gt;Does this sound familiar? I am sure it does. We have all seen disasters caused by misconfiguration in Kubernetes. The problem is in the power of the tool. With great power comes great responsibility. &lt;/p&gt;

&lt;p&gt;There is so much that we configure in there, and there are very few developers who really understand these configurations well enough. Most of them make these configurations using other existing configurations - a copy/paste, with modifying some parts that make sense to them. Or the adventurous ones pick the YML files straight from some online tutorials - which were good to prove a point, but not mature enough for the production.&lt;/p&gt;

&lt;p&gt;When we use infrastructure as code we tend to forget that it is also a piece of code, that should go through all the validation like a normal application code. It is often tempting to use shortcuts that work today. They work and get deployed into production. And we assume that they will work forever. But unfortunately, that is not the case with Kubernetes configurations.&lt;/p&gt;

&lt;p&gt;The world is still new to the Kubernetes Patterns. Developers are still struggling their way though it - so are the admins. And too much of configuration goes into the system, making it easy for such errors to creep in. Worse still, most of these errors show their impact after a few days, or even months. The system works perfectly until it just collapses without any warning. This makes the task even more difficult&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-problems"&gt;
  &lt;/a&gt;
  Common Problems
&lt;/h2&gt;

&lt;p&gt;There is no end to our creativity, and our ability - to introduce newer and newer defects in the system. But there are some common issues that show up very often. Let us look at them one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-namespace"&gt;
  &lt;/a&gt;
  Default Namespace
&lt;/h3&gt;

&lt;p&gt;This is a common mistake new developers make - when they pick the configurations from tutorials and blogs. Most of them are meant to explain the concept and syntax. To keep that simple, most of them skip the other complexities like namespace. &lt;/p&gt;

&lt;p&gt;But any Kubernetes deployment should have a meaningful namespace in the architecture. If we miss it out by error, it can cause name clashes in future. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deprecated-apis"&gt;
  &lt;/a&gt;
  Deprecated API's
&lt;/h3&gt;

&lt;p&gt;Kubernetes is going through an active development. Lot of developers across the globe are working hard on improving it and making it more and more resilient. An unfortunate consequence is that we have some API's getting deprecated in newer releases. &lt;/p&gt;

&lt;p&gt;We need to identify and remove them before they begin failing in production. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#naked-pods"&gt;
  &lt;/a&gt;
  Naked Pods
&lt;/h3&gt;

&lt;p&gt;Kubernetes provides for "Deployments" - as a way to encapsulate pods and all that they need. But some lazy developers may want to skip this and deploy just the pod into Kubernetes. &lt;/p&gt;

&lt;p&gt;Well, this may work today. But it is a bad practice, and will definitely lead to a disaster some day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#namespace-sharing"&gt;
  &lt;/a&gt;
  Namespace Sharing
&lt;/h3&gt;

&lt;p&gt;When entities at different levels share the namespace, the lower entity can access neighbors of the higher entity - to probe the network.&lt;/p&gt;

&lt;p&gt;For example, when a container is allowed to share its host's network namespace, it can access local network listeners and leverage it to probe the host's local network.&lt;/p&gt;

&lt;p&gt;This is a security risk. Even if it is our own code, the minimal access principle recommends that this should not be allowed. When it comes to system security, we should never believe in anyone - not even ourselves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-respecting-the-abstraction"&gt;
  &lt;/a&gt;
  Not Respecting the Abstraction
&lt;/h3&gt;

&lt;p&gt;All communications between the containers should go through the layers of abstraction provided by Kubernetes. Communication between services has to go through the abstractions of ingress and service defined in the deployments.&lt;/p&gt;

&lt;p&gt;Never run containers with root privilege. Never expose node ports from services, or access host files directly in code (using UID). Ingress should forward traffic to the service, not directly to individual pods.&lt;/p&gt;

&lt;p&gt;Hardcoding IP addresses, or directly accessing the docker sockets, etc.. can lead to problems. Again, these won't break the system on the very first day. But it will show up sometime someday - when we just can't afford it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incorrect-image-tags"&gt;
  &lt;/a&gt;
  Incorrect Image tags
&lt;/h3&gt;

&lt;p&gt;This is a common disaster. Developers are often tempted to use "latest" - with the hope of improving continuously, getting the latest and best version available. Such a configuration can live in our system for many months. But, it can lead to a nasty surprise.&lt;/p&gt;

&lt;p&gt;﻿When an image tag is not descriptive (e.g. lacking the version tag like 1.19.8), every time that image is pulled, the version will be a different version and might break our code. Also, a non-descriptive image tag does not allow us to easily roll back (or forward) to different image versions. It is better to use concrete and meaningful tags such as version strings or an image SHA.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#believing-in-defaults"&gt;
  &lt;/a&gt;
  Believing in Defaults
&lt;/h3&gt;

&lt;p&gt;This is another problem that shows up very often - when we are not very confident of a configuration, we tend to believe in the defaults. The memory/CPU allocation, min/max replica counts for auto scaling... these are some of the properties that are missed too often.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#datree"&gt;
  &lt;/a&gt;
  Datree
&lt;/h2&gt;

&lt;p&gt;As we noted, there are too many configurations that go into the Kubernetes cluster. Helm tries to reduce this complexity, but makes things worse, when we try to configure Helm itself. It is impossible for a human to ensure the quality that we need in our production deployments. &lt;/p&gt;

&lt;p&gt;We need some good tools that can automate this process, and help us with this end.&lt;/p&gt;

&lt;p&gt;After some discussion on tech platforms, and a lot of Google / StackOverflow / YouTube, we found a few interesting tools. After comparing them, we chose &lt;a href="https://www.datree.io/"&gt;Datree&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It is simple to set up and use. It can be easily integrated with most CI/CD tools. It helps us identify such issues much before they can cause a problem. It has a lavish free tier and does not lock in - all that we need in an ideal tool.&lt;/p&gt;

&lt;p&gt;Let's check it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Installing the tool is quite easy and fast. Run the below command. We need the sudo permissions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://get.datree.io | /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few seconds, and we are ready to go! Most of us are uncomfortable running such a command - we should be. We can just check out the actual code that is executed by script. Just open the link&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 in the browser.



```bash
#!/bin/bash

osName=$(uname -s)
DOWNLOAD_URL=$(curl --silent "https://api.github.com/repos/datreeio/datree/releases/latest" | grep -o "browser_download_url.*\_${osName}_x86_64.zip")

DOWNLOAD_URL=${DOWNLOAD_URL//\"}
DOWNLOAD_URL=${DOWNLOAD_URL/browser_download_url: /}

OUTPUT_BASENAME=datree-latest
OUTPUT_BASENAME_WITH_POSTFIX=$OUTPUT_BASENAME.zip

echo "Installing Datree..."
echo

curl -sL $DOWNLOAD_URL -o $OUTPUT_BASENAME_WITH_POSTFIX
echo -e "\033[32m[V] Downloaded Datree"

unzip -qq $OUTPUT_BASENAME_WITH_POSTFIX -d $OUTPUT_BASENAME

mkdir -p ~/.datree

rm -f /usr/local/bin/datree || sudo rm -f /usr/local/bin/datree
cp $OUTPUT_BASENAME/datree /usr/local/bin || sudo cp $OUTPUT_BASENAME/datree /usr/local/bin

rm $OUTPUT_BASENAME_WITH_POSTFIX
rm -rf $OUTPUT_BASENAME

curl -s https://get.datree.io/k8s-demo.yaml &amp;gt; ~/.datree/k8s-demo.yaml
echo -e "[V] Finished Installation"

echo

echo -e "\033[35m Usage: $ datree test ~/.datree/k8s-demo.yaml"

echo -e " Using Helm? =&amp;gt; https://hub.datree.io/helm-plugin"

tput init

echo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially, it just downloads a zip file and expands it into the specified locations. It places the binary into the /usr/local/bin folder - for which it needs a sudo. It does not mess with any system configuration and so it is very simple to remove.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-demo"&gt;
  &lt;/a&gt;
  A Simple Demo
&lt;/h3&gt;

&lt;p&gt;The datree installation provides a sample yaml file - for a POC.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;datree &lt;span class="nb"&gt;test&lt;/span&gt; ~/.datree/k8s-demo.yaml                                                                 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;  File: ../../.datree/k8s-demo.yaml                                                                    

❌  Ensure each container has a configured memory limit  &lt;span class="o"&gt;[&lt;/span&gt;1 occurrences]                                  
💡  Missing property object &lt;span class="sb"&gt;`&lt;/span&gt;limits.memory&lt;span class="sb"&gt;`&lt;/span&gt; - value should be within the accepted boundaries recommended 
by the organization                                                                                      

❌  Ensure each container has a configured liveness probe  &lt;span class="o"&gt;[&lt;/span&gt;1 occurrences]                                
💡  Missing property object &lt;span class="sb"&gt;`&lt;/span&gt;livenessProbe&lt;span class="sb"&gt;`&lt;/span&gt; - add a properly configured livenessProbe to catch possible d
eadlocks                                                                                                 

❌  Ensure workload has valid label values  &lt;span class="o"&gt;[&lt;/span&gt;1 occurrences]                                               
💡  Incorrect value &lt;span class="k"&gt;for &lt;/span&gt;key&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; under &lt;span class="sb"&gt;`&lt;/span&gt;labels&lt;span class="sb"&gt;`&lt;/span&gt; - the vales syntax is not valid so it will not be accepted 
by the Kuberenetes engine                                                                                

❌  Ensure each container image has a pinned &lt;span class="o"&gt;(&lt;/span&gt;tag&lt;span class="o"&gt;)&lt;/span&gt; version  &lt;span class="o"&gt;[&lt;/span&gt;1 occurrences]                               
💡  Incorrect value &lt;span class="k"&gt;for &lt;/span&gt;key &lt;span class="sb"&gt;`&lt;/span&gt;image&lt;span class="sb"&gt;`&lt;/span&gt; - specify an image version to avoid unpleasant “version surprises” &lt;span class="k"&gt;in
 &lt;/span&gt;the future                                                                                              


+-----------------------------------+-------------------------------------------------+                  
| Enabled rules &lt;span class="k"&gt;in &lt;/span&gt;policy “default” | 21                                              |                  
| Configs tested against policy     | 1                                               |                  
| Total rules evaluated             | 21                                              |                  
| Total rules failed                | 4                                               |                  
| Total rules passed                | 17                                              |                  
| See all rules &lt;span class="k"&gt;in &lt;/span&gt;policy           | https://app.datree.io/login?cliId&lt;span class="o"&gt;=&lt;/span&gt;GStykNg6GkUAS8LfaEt2B8  |                  
+-----------------------------------+-------------------------------------------------+                  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interesting? Well that was just a glimpse. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#online-view"&gt;
  &lt;/a&gt;
  Online View
&lt;/h3&gt;

&lt;p&gt;Note the URL it generates at the end of the table -&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;https://app.datree.io/login?cliId=GStykNg6GkUAS8LfaEt2B8&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
. &lt;/p&gt;

&lt;p&gt;This is a unique ID assigned to your system. It is stored in a config file in home folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# cat .datree/config.yaml&lt;/span&gt;
token: t4e73q9ZxkXhKhcg4vYHDF
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the link in a browser. It prompts us to log in with Google / Github. As we login, this Unique ID is connected with the new account on Datree. We can now tailor the tool from the web UI. Also, will see the reports from all the tests&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filters-and-policies"&gt;
  &lt;/a&gt;
  Filters and Policies
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t0XlIWeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633599793306/-fMZUlro2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0XlIWeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633599793306/-fMZUlro2.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There we can see detailed setup for the tests. We can alter that and the same is used when the yaml files are evaluated. We can choose what we feel is important and skip what we feel can be ignored. If we want, we can be a rebel and allow a class of errors to go through. Datree gives us that flexibility as well.&lt;/p&gt;

&lt;p&gt;Apart from the default policy available to us, we can define more custom policies that can be triggered as per our need.&lt;/p&gt;

&lt;p&gt;Datree provides "Filters" for all the above mentioned potential issues, and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h3&gt;

&lt;p&gt;On the left panel, we can see a link for "History". Click on it, and we will see the history of all the validations that it has performed so far. So we can just view the status of policy checks right here - without having to open the "black screen"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulNz3xDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633599855062/_n6y-vTSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulNz3xDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633599855062/_n6y-vTSw.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every time we invoke the datree command, it connects to the cloud with this ID and pulls the required configuration, and then uploads the report for the run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatible-with-tools"&gt;
  &lt;/a&gt;
  Compatible with Tools
&lt;/h3&gt;

&lt;p&gt;As we saw above, we can trigger the datree in a single command. Much more than that, it also provides wonderful compatibility with most of the configuration management tools and managed Kubernetes deployments like AKS, EKS and GKS. And ofcourse, we cannot forget Helm when working with Kubernetes. Datree provides a simple plugin on helm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUs_g7Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633600367476/s3vRTEyyF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUs_g7Pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633600367476/s3vRTEyyF.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Datree has an &lt;a href="https://hub.datree.io/"&gt;elaborate documentation&lt;/a&gt; and set of "How to" tutorials on their website. You can refer to them for quickly setting up any feature that you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-wait-for-a-disaster"&gt;
  &lt;/a&gt;
  Don't Wait for a Disaster
&lt;/h2&gt;

&lt;p&gt;Most of the applications across the globe have a lot of such misconfigurations - that will surely bring a nasty disaster some day. We knew our application had this problem. But we underestimated the extent of damage that it could cause. We were just procrastinating, sitting on a timebomb! &lt;/p&gt;

&lt;p&gt;Now I tell everyone, don't do what we did. Don't wait for the disaster. Automate the configuration checks and enjoy your weekends.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>automation</category>
      <category>tooling</category>
    </item>
    <item>
      <title>SvelteKit GraphQL Type Generation</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 11 Oct 2021 10:18:34 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-graphql-type-generation-5753</link>
      <guid>https://dev.to/askrodney/sveltekit-graphql-type-generation-5753</guid>
      <description>&lt;h2&gt;
  &lt;a href="#graphql-with-typescript-and-sveltekit"&gt;
  &lt;/a&gt;
  💫 GraphQL with TypeScript and SvelteKit
&lt;/h2&gt;

&lt;p&gt;In this post we look at how you can do automatic SvelteKit GraphQL type generation.  If that means nothing, read on and hopefully, by the end it makes sense! TypeScript builds on JavaScript to add variable types (like you see in Rust, C++ or Java), making it easier to spot mistakes in your code. Adding types to TypesScript code can get old quickly! GraphQL is a typed language which means you just have to reference the GraphQL schema in the right way to be able to generate types automatically for your TypeScript code base.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;graphql-codegen&lt;/code&gt; tool, we will see how you can generate a single file containing all the types from the GraphQL API you are using. Then when you run a query, you will just need to import the type from that file. If you already use TypeScript you know that can save you a lot of time.  We'll get autocompletions and all the other benefits of using TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-building"&gt;
  &lt;/a&gt;
  🧱 What are we Building?
&lt;/h2&gt;

&lt;p&gt;This post follows on from a recent &lt;a href="https://rodneylab.com/sveltekit-graphql-queries-fetch/"&gt;post on SvelteKit GraphQL queries using fetch only&lt;/a&gt;.  However you can use you the same tool we describe if you are &lt;a href="https://rodneylab.com/use-apollo-client-sveltekit/"&gt;working in Apollo Client on your SvelteKit site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rather than build a new site, we will carry on with the site from the post on SvelteKit queries using fetch only.  In that post we queried a public GraphQL API to get up-to-date currency exchange rates.  We will use the site built there as a starting point and see how you can generate TypeScript types using codegen even when your API needs authorisation credentials.  If that sounds exciting then let's crack on!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-generate-types-in-sveltekit-using-a-graphql-api"&gt;
  &lt;/a&gt;
  🧑🏽‍🎓 How to Generate Types in SvelteKit using a GraphQL API
&lt;/h2&gt;

&lt;p&gt;Let's work through the steps to generate our types and then use them in our code to check all is well.  We are using the earlier mentioned post as a staring point, though the instructions will be similar for another existing project.  So follow along with your own project if you prefer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sveltekit-graphql-type-generation"&gt;
  &lt;/a&gt;
  SvelteKit GraphQL Type Generation"
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Let's start by installing the packages we need.  The main package is &lt;a href="https://www.npmjs.com/package/graphql-codegen-svelte-apollo"&gt;&lt;code&gt;graphql-codegen-svelte-apollo&lt;/code&gt;&lt;/a&gt;.  The official docs recommend installing the &lt;code&gt;graphql&lt;/code&gt; dependency, though I was getting a version conflict when I did install it and it seems to work well without:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; graphql-codegen-svelte-apollo @graphql-codegen/cli
@graphql-codegen/typescript @graphql-codegen/typescript-operations
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we need to create a &lt;code&gt;codegen.json&lt;/code&gt; config file.  You can generate this automatically (by running &lt;code&gt;pnpx grapql-codegen init&lt;/code&gt;) if you have a basic use case, though you will still probably need to add the &lt;code&gt;graphql-codegen-svelte-apollo&lt;/code&gt; plugin to the config manually. Instead, because we need to add authorisation credentials to the config, we will create it manually here. Create the &lt;code&gt;codegen.json&lt;/code&gt; file in the project's root directory and paste in the following content:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"overwrite"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"https://swop.cx/graphql"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ApiKey ${SWOP_API_KEY}"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"generates"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"src/lib/generated/graphql.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typescript-operations"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"graphql-codegen-svelte-apollo"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Notice in line &lt;code&gt;6&lt;/code&gt; we include an authorisation header, which will contain our credentials for the API.  If you are using another API which does not need credentials, just replace lines &lt;code&gt;3&lt;/code&gt;–&lt;code&gt;8&lt;/code&gt; with &lt;code&gt;"schema": "&lt;a href="https://example.com/graphql"&gt;https://example.com/graphql&lt;/a&gt;",&lt;/code&gt;.&lt;br&gt;&lt;br&gt;&lt;br&gt;
You need to make sure &lt;code&gt;SWOP_API_KEY&lt;/code&gt; is defined in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are almost done.  Next we need to add a new generation script to &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev -p 3030"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview -p 3030"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-check --tsconfig ./tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"check:watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-check --tsconfig ./tsconfig.json --watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --ignore-path .gitignore --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --ignore-path .gitignore --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"gen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"export $(grep SWOP_API_KEY .env | xargs) &amp;amp;&amp;amp; graphql-codegen --config codegen.json &amp;amp;&amp;amp; prettier --write src/lib/generated/graphql.ts"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Conveniently this is doing three things for us.  First it reads the API key from the &lt;code&gt;.env&lt;/code&gt; file, making it available in the next step.  I have tested this on macOS. I would expect it to work on Linux and other UNIX-based systems.  I'm not sure how to do this on Windows.  Please drop comments below if you are using Linux/Unix or Windows and get it to work, so I can update.&lt;/p&gt;

&lt;p&gt;Secondly, we actually generate the types, output to &lt;code&gt;src/lib/generated/graphql.ts&lt;/code&gt;.  Finally, we format the types file with prettier —  this saves doing it manually, before committing your code.&lt;/p&gt;

&lt;p&gt;Change the codegen file name if you generated a yaml file automatically in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All that is left to do is to start using the new types, testing everything is working.  We'll look at that below.  Take a look at the new types generated in &lt;code&gt;src/lib/generated/graphql.ts&lt;/code&gt; for now.  You will see there are some missing dependencies, but if you are only using this file for types, you can ignore them.  Just import using the &lt;code&gt;type&lt;/code&gt; keyword, wherever you import one of these new types.  For example:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryLatestArgs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/generated/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-refactor"&gt;
  &lt;/a&gt;
  🖥 Refactor
&lt;/h2&gt;

&lt;p&gt;Let's quickly refactor the previous code, making use of the types. Edit &lt;code&gt;src/routes/query/fx-rates.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryLatestArgs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/generated/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/kit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;currencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CAD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GBP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IDR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      query latestQuery(
        $baseCurrency: String = "EUR"
        $quoteCurrencies: [String!]
      ) {
        latest(
          baseCurrency: $baseCurrency
          quoteCurrencies: $quoteCurrencies
        ) {
          baseCurrency
          quoteCurrency
          date
          quote
        }
      }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryLatestArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;baseCurrency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;EUR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;quoteCurrencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;currencies&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://swop.cx/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`ApiKey &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SWOP_API_KEY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;variables&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Error in /query/fx-rates.json.ts: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then finally, we can refactor &lt;code&gt;src/routes/index.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fontsource/source-sans-pro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rates&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/shared/stores/rates&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$lib/generated/graphql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCurrency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;submitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;submitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/query/fx-rates.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;currencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newCurrency&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;responseData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;responseData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;submitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;$rates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="nx"&gt;newCurrency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error in handleSubmit function on /: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-graphql-type-generation-what-we-learned"&gt;
  &lt;/a&gt;
  🙌🏽 SvelteKit GraphQL Type Generation: What we Learned
&lt;/h2&gt;

&lt;p&gt;In this post we learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to generate TypeScript types automatically from a GraphQL API endpoint,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;configuring graphql-codegen to use HTTP authorisation headers,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;how to use environment variable with graphql-codegen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do hope there is at least one thing in this article which you can use in your work or a side project.  As always get in touch with feedback if I have missed a trick somewhere!&lt;/p&gt;

&lt;p&gt;You can see the full code for this SvelteKit GraphQL queries using fetch project on the Rodney Lab Git Hub repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-graphql-type-generation-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 SvelteKit GraphQL Type Generation: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Do you have your own methods for solving this problem? Let me know your solution. Would you like to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>graphql</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>[Golang] How to Implement Bubble Sort Algorithm</title>
      <author>kuldeep_singh</author>
      <pubDate>Mon, 11 Oct 2021 10:11:11 +0000</pubDate>
      <link>https://dev.to/mavensingh/golang-how-to-implement-bubble-sort-algorithm-46o3</link>
      <guid>https://dev.to/mavensingh/golang-how-to-implement-bubble-sort-algorithm-46o3</guid>
      <description>&lt;p&gt;Today we are going to work on bubble sort implementation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bubble-sort"&gt;
  &lt;/a&gt;
  What is Bubble Sort?
&lt;/h2&gt;

&lt;p&gt;Bubble sort is a sorting algorithm that works by repeatedly stepping through lists that need to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. This passing procedure is repeated until no swaps are required, indicating that the list is sorted. Bubble sort gets its name because smaller elements bubble toward the top of the list.&lt;/p&gt;

&lt;p&gt;Bubble sort is also referred to as sinking sort or comparison sort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;Bubble sort has a worst-case and average complexity of O(n2), where n is the number of items sorted. Unlike the other sorting algorithms, bubble sort detects whether the sorted list is efficiently built into the algorithm. Bubble sort performance over an already sorted list is O(n).&lt;/p&gt;

&lt;p&gt;The position of elements in bubble sort plays an important role in determining performance. Large elements at the beginning do not pose a problem as they are easily swapped. The small elements toward the end move to the beginning slowly. As such, these elements are called rabbits and turtles.&lt;/p&gt;

&lt;p&gt;The bubble sort algorithm can be optimized by placing larger elements in the final position. After every pass, all elements after the last swap are sorted and do not need to be checked again, thereby skipping the tracking of swapped variables. &lt;/p&gt;

&lt;p&gt;So now we know what bubble sort is, So let's start writing code&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    arr := []int{5, 3, 4, 9, 6, 8, 0, 1, 2}
    fmt.Println(arr)

    // Way 1 next index checking with current index
    // 1. x pointer is on index 0
    // 2. y pointer in on index 1
    // each time whenever y execution finishes it increment values for both
    // whenever x starts again for next index
    for x := range arr {
        var swapped bool
        y := x + 1
        for y = range arr {
            if arr[x] &amp;lt; arr[y] {
                arr[x], arr[y] = arr[y], arr[x]
                swapped = true
            }
        }
        if !swapped {
            break
        }
    }


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout Here for more methods on bubble sort implementation:&lt;br&gt;
&lt;a href="https://kdsingh4.blogspot.com/2021/10/golang-how-to-sort-array-slice-using.html"&gt;https://kdsingh4.blogspot.com/2021/10/golang-how-to-sort-array-slice-using.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checkout More Algorithms Solutions: &lt;a href="https://kdsingh4.blogspot.com/search/label/algorithm?&amp;amp;max-results=5/feed/"&gt;https://kdsingh4.blogspot.com/search/label/algorithm?&amp;amp;max-results=5/feed/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't Forget To Subscribe My Youtube Channel as well:&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q"&gt;https://www.youtube.com/channel/UCXhmNqWQ50zitqIdTgS7s8Q&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>algorithms</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React Native: Streaming Agora Cloud-Recording HLS Videos from an S3 Bucket</title>
      <author>Ekaansh Arora</author>
      <pubDate>Mon, 11 Oct 2021 10:03:34 +0000</pubDate>
      <link>https://dev.to/ekaansharora/react-native-streaming-agora-cloud-recording-hls-videos-from-an-s3-bucket-4n6l</link>
      <guid>https://dev.to/ekaansharora/react-native-streaming-agora-cloud-recording-hls-videos-from-an-s3-bucket-4n6l</guid>
      <description>&lt;p&gt;In a &lt;a href="https://www.agora.io/en/blog/cloud-recording-for-react-native-video-chat-using-agora/"&gt;previous blog&lt;/a&gt; post, we looked at how to add Agora cloud recording to a video chat application for storing the recordings in an Amazon S3 bucket. Here, we’ll go over how to fetch and playback the recorded videos in a React Native application.&lt;/p&gt;

&lt;p&gt;We’ve updated the &lt;a href="https://github.com/EkaanshArora/Agora-RN-Record-Playback"&gt;app&lt;/a&gt; and the &lt;a href="https://github.com/EkaanshArora/Agora-Cloud-Recording-Example"&gt;back end&lt;/a&gt; from the last blog post to bring everything together. If you just want the demo, you can deploy the back end and build the app from the links provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An Agora developer account (see How to Get Started)&lt;/li&gt;
&lt;li&gt;An Amazon AWS account&lt;/li&gt;
&lt;li&gt;A Heroku account or another service to deploy the back end&lt;/li&gt;
&lt;li&gt;Understanding of React Native&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#agora-setup"&gt;
  &lt;/a&gt;
  Agora Setup
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create a project&lt;/strong&gt;: Once you have an Agora account, click the Project Management tab in the console. Click the Create button. Enter a name for your project. Select Secured Mode while creating the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Enable cloud recording&lt;/strong&gt;: Click the View usage button and select the option to enable cloud recording.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get app credentials&lt;/strong&gt;: Copy the App ID and the App Certificate from the same page to a text file. We’ll use these later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get customer credentials&lt;/strong&gt;: Visit the RESTful API page and click the Add Secret button. Copy the Customer ID and the Customer Secret to a text file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#aws-setup"&gt;
  &lt;/a&gt;
  AWS Setup
&lt;/h2&gt;

&lt;p&gt;Once you’ve created an AWS account, we need to create an Amazon S3 bucket to store our video recordings and an IAM user to access our bucket. If you have already completed this setup, you can skip this section.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your &lt;a href="https://console.aws.amazon.com/iam/home#/users"&gt;AWS IAM Console&lt;/a&gt; and create a user. Add the AmazonS3FullAccess policy with Programmatic Access. Copy your AWS Access Key and Secret Key to the text file.&lt;/li&gt;
&lt;li&gt;Create an Amazon &lt;a href="https://s3.console.aws.amazon.com/s3/home"&gt;S3 bucket&lt;/a&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyGfNr5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/1%2A2LAlWLeGZNd7QGibCKFEbA.png" alt="aws screenshot"&gt;
Choose a name for your bucket and copy it to a text file. We’ll use this text file later. Allow public access to stream media from your bucket by deselecting the block all public access check box. Click the Create Bucket button.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: With the URL for your recording, anyone on the internet can view it. We’ll discuss how to make the recording secure at the end of the post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ll also need the region number for the selected AWS region. Go to this &lt;a href="https://docs.agora.io/en/cloud-recording/cloud_recording_api_rest?platform=RESTful#a-namestorageconfigacloud-storage-configuration"&gt;table&lt;/a&gt;, click the Amazon S3 tab, and note your region number. For example, if you’re using the US_EAST_1 region, your bucket number is 0.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the bucket policy.
To make files accessible by all users, we’ll add a bucket policy. Go to the Permissions tab in your newly created bucket and add this policy:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Id": "Policy1620917655085",
    "Statement": [
        {
            "Sid": "Stmt1620917653925",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::agora-rec123/*"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#deploying-our-back-end"&gt;
  &lt;/a&gt;
  Deploying Our Back End
&lt;/h2&gt;

&lt;p&gt;Before deploying our back end, we need the following variables. (It’s time to use our text file.) We’ll be using the Heroku one-click deploy to make it super simple to get our back end up and running. You can use any other service as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: We’ve updated the back end, so if you’re using the back end from the previous post, you should update it now.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_ID=
APP_CERTIFICATE=
RECORDING_VENDOR=
RECORDING_REGION=
BUCKET_NAME=
BUCKET_ACCESS_KEY=
BUCKET_ACCESS_SECRET=
CUSTOMER_ID=
CUSTOMER_CERTIFICATE=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note: RECORDING_VENDOR=1 for AWS. Click this link for more information.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Create an account on Heroku if you haven’t done so already.&lt;/li&gt;
&lt;li&gt;Click this link to use the Heroku one-click deploy.&lt;/li&gt;
&lt;li&gt;Enter your variables and click the Deploy App button at the bottom of the page.&lt;/li&gt;
&lt;li&gt;Wait a few minutes. Once the deployment is complete, save your back-end URL in a text file, which we’ll use in the app.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#building-our-app"&gt;
  &lt;/a&gt;
  Building Our App
&lt;/h2&gt;

&lt;p&gt;We’ll start from the app we developed in the last post, which lets you take part in group video calls and record them. I’ve refactored the app to move all the video call and recording components to &lt;code&gt;./components/Call.tsx&lt;/code&gt;. We’ll start with a new file: &lt;code&gt;./components/PlayRecording.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
We’ll use the Video component from react-native-video for HLS playback. We take in the back-end URL, App ID, and channel name as props to our PlayRecording component. We define an interface for our state. tracks will contain an array of URLs for each m3u8 file. currentTrack is the index of the URL we’re playing. statusMsg holds a string to display the current status of the video player.&lt;br&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
We define our component and our initial state. In the &lt;code&gt;componentDidMount&lt;/code&gt; we perform a GET request to the &lt;code&gt;/api/get/recordingUrls/&amp;lt;ChannelName&amp;gt;&lt;/code&gt; route of our back-end server. We get the response JSON and update the &lt;code&gt;tracks&lt;/code&gt; state array.&lt;br&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
In our render method, we’re returning a list of tracks wrapped in &lt;code&gt;TouchableOpacity&lt;/code&gt; using a &lt;code&gt;ScrollView&lt;/code&gt;. When a track is selected, we update the &lt;code&gt;currentTrack&lt;/code&gt; state with the track index.&lt;br&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
We use the &lt;code&gt;Video&lt;/code&gt; component with the source set as the URL we want to play (&lt;code&gt;currentTrack&lt;/code&gt; index of our &lt;code&gt;tracks&lt;/code&gt; array). We have event handlers to update our &lt;code&gt;statusMsg&lt;/code&gt;. We also display the &lt;code&gt;statusMsg&lt;/code&gt; in a &lt;code&gt;Text&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-back-together"&gt;
  &lt;/a&gt;
  Putting it back together
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We use the &lt;code&gt;PlayRecording&lt;/code&gt; component in our &lt;code&gt;App.tsx&lt;/code&gt; along with the Call component to put everything back together.

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Security Consideration&lt;/strong&gt;: As we discussed, with our current configuration all the recordings stored on the S3 bucket are public so that the React Native client can access them. Before we use the app in production, it’s important to set access control for our videos. Once we get our users authenticated, we can issue them access to the files, while keeping the files private for everyone else. You can find more information &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-access-control.html"&gt;here&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can find more information about cloud recording &lt;a href="https://docs.agora.io/en/cloud-recording/landing-page?platform=RESTful"&gt;here&lt;/a&gt;. If you’re starting out with the Agora SDKs, take a look at the &lt;a href="https://docs.agora.io/en/Video/landing-page?platform=React%20Native"&gt;Agora Video Call Quickstart Guide&lt;/a&gt; and this &lt;a href="https://www.agora.io/en/blog/how-to-build-a-react-native-video-calling-app-using-agora/"&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I invite you to join the &lt;a href="https://www.agora.io/en/join-slack/"&gt;Agora Developer Slack community&lt;/a&gt;. Feel free to ask any React Native questions in the &lt;code&gt;#react-native-help-me&lt;/code&gt; channel and cloud recording questions in the &lt;code&gt;#cloud-recording-help-me&lt;/code&gt; channel.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>mobile</category>
    </item>
    <item>
      <title>How to manage object in Angular FormControl</title>
      <author>Dharmen Shah</author>
      <pubDate>Mon, 11 Oct 2021 09:37:24 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-manage-object-in-angular-formcontrol-2ph4</link>
      <guid>https://dev.to/shhdharmen/how-to-manage-object-in-angular-formcontrol-2ph4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this tutorial, we will learn how to manage object in FormControl and handle conversion for input&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Generally we use &lt;code&gt;FormControl&lt;/code&gt; with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;boolean&lt;/code&gt; types and hence it manages only simple values. But what if we want to manage just more than primitive data types? We can do that, let’s see how.&lt;/p&gt;

&lt;p&gt;For example, in this tutorial we will learn how to get country-code and number as separate entities from the same form-control, and we will also create custom input for the same to handle the conversion between UI and value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-telephone-class"&gt;
  &lt;/a&gt;
  The Telephone Class
&lt;/h2&gt;

&lt;p&gt;Let’s assume that we have a &lt;code&gt;Telephone&lt;/code&gt; class, which will hold the related values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s take an &lt;code&gt;input[type=tel]&lt;/code&gt; in which we want to hold the &lt;code&gt;Telephone&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;input
      type="tel"
      name="telephone"
      id="telephone"
      [formControl]="telephone"
    /&amp;gt;
    &amp;lt;div&amp;gt;Value: {{ telephone.value | json }}&amp;lt;/div&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we have initialized the new &lt;code&gt;Telephone&lt;/code&gt; class in &lt;code&gt;FormControl&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Let’s take a look at output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s46W00hU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/9O98N6z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s46W00hU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/9O98N6z.gif" alt="Form control with object" title="Form control with object"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing you will notice is that &lt;code&gt;input&lt;/code&gt; is showing &lt;code&gt;[object] [Object]&lt;/code&gt; in it’s value, because it's a string representation of the object (in our case, it's a member of &lt;code&gt;Telephone&lt;/code&gt; class). To fix &lt;code&gt;input&lt;/code&gt;’s value, we can simply provide the &lt;code&gt;toString()&lt;/code&gt; method in the &lt;code&gt;Telephone&lt;/code&gt; class. You can read more about it on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"&gt;MDN docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second thing is that &lt;code&gt;FormControl&lt;/code&gt;’s value has the desired &lt;code&gt;Telephone&lt;/code&gt;’s structure initially.&lt;/p&gt;

&lt;p&gt;But, if you modify the &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;FormControl&lt;/code&gt;’s value will change to &lt;code&gt;string&lt;/code&gt;. We will need to work on the value conversion from UI to &lt;code&gt;FormControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For that, we will create a custom input directive for &lt;code&gt;input[type=tel]&lt;/code&gt; using &lt;code&gt;CustomValueAccessor&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-input-for-telephone"&gt;
  &lt;/a&gt;
  Custom Input for Telephone
&lt;/h2&gt;

&lt;p&gt;The initial code for &lt;code&gt;InputTelDirective&lt;/code&gt; directive looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/shared/directives/input-tel.directive.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type=tel]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;If you’re new to &lt;code&gt;ControlValueAccessor&lt;/code&gt;, you can read more about it at: &lt;a href="https://indepth.dev/posts/1055/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms"&gt;Never again be confused when implementing ControlValueAccessor in Angular forms&lt;/a&gt; and &lt;a href="https://indepth.dev/posts/1467/how-to-use-controlvalueaccessor-to-enhance-date-input-with-automatic-conversion-and-validation"&gt;How to use ControlValueAccessor to enhance date input with automatic conversion and validation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this example, we are only concerned about &lt;code&gt;writeValue&lt;/code&gt; and &lt;code&gt;registerOnChange&lt;/code&gt;. Simply put, &lt;code&gt;writeValue&lt;/code&gt; is used to convert &lt;code&gt;FormControl&lt;/code&gt;’s value to UI value and &lt;code&gt;registerOnChange&lt;/code&gt; is used to convert UI value to &lt;code&gt;FormControl&lt;/code&gt;’s value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-from-ui-to-raw-formcontrol-endraw-"&gt;
  &lt;/a&gt;
  Conversion from UI to &lt;code&gt;FormControl&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We are going to assume that the user will enter the value in this form: &lt;code&gt;+CC-XXXXXX&lt;/code&gt;, where characters before hyphen (-) combine to country-code and the rest is actual contact number. Note that this is not intended to be a robust directive, just something from which we can start learning.&lt;/p&gt;

&lt;p&gt;To handle that, let’s first add a listener on &lt;code&gt;input&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$event.target.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;onInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s modify the &lt;code&gt;registerOnChange&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;telephoneValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;telephoneValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;telephoneValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDiFbhf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0DobyB5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDiFbhf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/0DobyB5.gif" alt="Form control with Custom Value Accessor" title="Form control with Custom Value Accessor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Works nice! It is converting UI value to a valid &lt;code&gt;FormControl&lt;/code&gt;’s value, i.e. &lt;code&gt;Telephone&lt;/code&gt; class’s member.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-from-raw-formcontrol-endraw-to-ui"&gt;
  &lt;/a&gt;
  Conversion from &lt;code&gt;FormControl&lt;/code&gt; to UI
&lt;/h3&gt;

&lt;p&gt;If you try to set the initial state through &lt;code&gt;FormControl&lt;/code&gt;, it won’t reflect on &lt;code&gt;input&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;+91&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1234567890&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s modify the &lt;code&gt;writeValue&lt;/code&gt; method to handle the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_elementRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the value set through &lt;code&gt;FormControl&lt;/code&gt; will get reflected to &lt;code&gt;input&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h3&gt;

&lt;p&gt;Now we will add the validation part so that input supports validation out-of-the box.&lt;/p&gt;

&lt;p&gt;We will first add &lt;code&gt;NG_VALIDATORS&lt;/code&gt; in providers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/shared/directives/input-tel.directive.ts&lt;/span&gt;

&lt;span class="c1"&gt;// …&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type=tel]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALIDATORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will add &lt;code&gt;isValid&lt;/code&gt; method in &lt;code&gt;Telephone&lt;/code&gt; class to check validity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we will implement the &lt;code&gt;Validator&lt;/code&gt; interface and add &lt;code&gt;validate&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AbstractControl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ValidationErrors&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s modify the template to utilize validation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;input
      type="tel"
      name="telephone"
      id="telephone"
      [formControl]="telephone"
      [class.is-invalid]="
        (telephone?.touched || telephone?.dirty) &amp;amp;&amp;amp; telephone?.invalid
      "
    /&amp;gt;
    &amp;lt;div
      class="invalid-feedback"
      *ngIf="(telephone.touched || telephone.dirty) &amp;amp;&amp;amp; telephone.invalid"
    &amp;gt;
      Invalid Telephone
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;Value: {{ telephone.value | json }}&amp;lt;/div&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XgbZK7a0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/97sXQ1i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XgbZK7a0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/97sXQ1i.gif" alt="Form control with Validation" title="Form control with Custom Validation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how we can manage the object in &lt;code&gt;FormControl&lt;/code&gt; and use &lt;code&gt;ControlValueAccessor&lt;/code&gt; to handle the conversion.&lt;/p&gt;

&lt;p&gt;The whole code for directive looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HostListener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Renderer2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;AbstractControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NG_VALIDATORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ValidationErrors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/forms&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input[type=tel]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALIDATORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InputTelDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_elementRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Renderer2&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$event.target.value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="nx"&gt;onInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_elementRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;telephoneValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;telephoneValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;telephoneValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AbstractControl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ValidationErrors&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;telephone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countryCode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have also created a &lt;a href="https://github.com/shhdharmen/multi-value-form-control"&gt;GitHub repo&lt;/a&gt; for all the code above.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>forms</category>
    </item>
  </channel>
</rss>
