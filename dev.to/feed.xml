<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Traversing the C# Syntax Tree with F#</title>
      <author>Jason</author>
      <pubDate>Thu, 09 Dec 2021 20:53:07 +0000</pubDate>
      <link>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</link>
      <guid>https://dev.to/rametta/traversing-the-c-syntax-tree-with-f-366b</guid>
      <description>&lt;p&gt;This article will go over the basics of the .NET compiler platform feature for analyzing the C# syntax tree, using F#.&lt;/p&gt;

&lt;p&gt;.NET provides a Syntax API that can read any C# or Visual Basic source file and provide the corresponding Syntax Tree for that code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;Why would someone need to traverse the C# syntax tree?&lt;/p&gt;

&lt;p&gt;Well, it can be for a number of reasons, maybe you want to gather statistics about how many classes, namespaces and methods you have, maybe you want generate code based on what is already written, maybe you want to create new tools like a new linter or a tool like Swagger. All these things can be done by analyzing the syntax tree.&lt;/p&gt;

&lt;p&gt;Recently I found myself using the Syntax API for finding Attributes above certain methods and classes, and based on the name and arguments of the Attributes, I generated various other files that were used elsewhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;FunWithSyntaxTrees&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above shows a small program. We will use this snippet as our input for analyzing the syntax tree.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;Assuming you have an F# environment setup. You can begin by installing the nuget package &lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt; and importing that into your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CodeAnalysis&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CodeAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;CSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Syntax&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you install the package and add your &lt;code&gt;open&lt;/code&gt; directives, we will hardcode the C# source code from above into the file, above the &lt;code&gt;main&lt;/code&gt; entrypoint function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... open directives&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""
using System.Collections;
using System.Linq;
using System.Text;

namespace FunWithSyntaxTrees
{
    class Program
    {
        static void Main(string[] args)
        {
            // ...
        }
    }
}
"""&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;

  &lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you write a real program that uses the Syntax API, you will most likely be reading the C# source from files, like this &lt;code&gt;let code = File.ReadAllText "/path/to/file"&lt;/code&gt;, instead of hardcoding the string like we did, but for this tutorial it is fine for demonstration.&lt;/p&gt;

&lt;p&gt;So we will begin by passing the string of C# source code to the Syntax API to be parsed, in return we will get the Syntax Tree that we can begin analyzing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I will write out the &lt;code&gt;Type&lt;/code&gt;'s of all the variables, but it is unnecessary most of the time since F#'s type inference is very capable of inferring the type itself. Just like in C# when you use the &lt;code&gt;var&lt;/code&gt; keyword, it is capable of knowing the underlying type, in F# this inference is even more powerful and applies to arguments, functions and everything in-between.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that the Syntax API has returned our needed Syntax Tree, we can begin travering it and exploring what it offers as data.&lt;/p&gt;

&lt;p&gt;First let us get all the &lt;code&gt;using&lt;/code&gt; directives in the file. We start by getting the root node of the file, then we iterate over all the child nodes inside the root node and find the ones that are the correct &lt;code&gt;UsingDirective&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;rootNodeChildren&lt;/code&gt; variable holds all the child &lt;code&gt;SyntaxNode&lt;/code&gt;'s of the root node. The root node is basically the first node of the &lt;code&gt;SyntaxTree&lt;/code&gt; which holds everything, and a &lt;code&gt;SyntaxNode&lt;/code&gt; is the most general type of node.&lt;/p&gt;

&lt;p&gt;We now need to iterate over these children to find the correct &lt;code&gt;SyntaxNode&lt;/code&gt; for &lt;code&gt;using&lt;/code&gt; directives since that is what we are looking for. We will declare a small helper function to help find them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new helper function &lt;code&gt;usingDirectiveNode&lt;/code&gt; takes a generic &lt;code&gt;SyntaxNode&lt;/code&gt; and checks if it is of the &lt;code&gt;UsingDirectiveSyntax&lt;/code&gt; variety, if it is, it returns an F# Option type containing the &lt;code&gt;using&lt;/code&gt; directive node.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: An F# Option type is a way to represent a &lt;em&gt;"nullable"&lt;/em&gt; value, since there are no real null values in F#, nullable values are representated as Algebraic Data Types, such as the Option type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use the new helper function by mapping over every node and passing it to the function. We use &lt;code&gt;Seq.choose&lt;/code&gt; to filter out any &lt;code&gt;None&lt;/code&gt; types and keep all the &lt;code&gt;Some&lt;/code&gt; types. It also unwraps the &lt;code&gt;Some&lt;/code&gt; types so we can keep using them without Option mapping.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;Seq.choose&lt;/code&gt; is just a fancy way of doing &lt;code&gt;Seq.map&lt;/code&gt; and then &lt;code&gt;Seq.filter&lt;/code&gt; specifically with Option types since the type signature is &lt;code&gt;('T -&amp;gt; 'U option) -&amp;gt; seq&amp;lt;'T&amp;gt; -&amp;gt; seq&amp;lt;'U&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving along, so now that we have a sequence of &lt;code&gt;using&lt;/code&gt; directives in a variable, we can get the specific properties of a &lt;code&gt;using&lt;/code&gt; directive. For now we wil just print them out as proof.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;:?&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;usingDirective&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EntryPoint&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;CSharpSyntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ParseText&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CompilationUnitSyntax&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;syntaxTree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetCompilationUnitRoot&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;SyntaxNode&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rootNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ChildNodes&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;usingDirectives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UsingDirectiveSyntax&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choose&lt;/span&gt; &lt;span class="n"&gt;usingDirectiveNode&lt;/span&gt; &lt;span class="n"&gt;rootNodeChildren&lt;/span&gt;

  &lt;span class="n"&gt;usingDirectives&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofSeq&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"{u.ToString()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of running our program would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.Collections;
using System.Linq;
using System.Text;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool right? We analyzed our C# code and found our using directives and printed them out.&lt;/p&gt;

&lt;p&gt;We can use that strategy to find anything in our code, including methods, method arguments, types, classes, interfaces, enums, comments, attributes, etc, everything!&lt;/p&gt;

&lt;p&gt;If you found this useful, feel free to follow me on twitter at &lt;a href="https://twitter.com/rametta"&gt;@rametta&lt;/a&gt;&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning React.js</title>
      <author>Matheus Tanaka</author>
      <pubDate>Thu, 09 Dec 2021 20:47:57 +0000</pubDate>
      <link>https://dev.to/matheustanaka/learning-reactjs-84o</link>
      <guid>https://dev.to/matheustanaka/learning-reactjs-84o</guid>
      <description>&lt;p&gt;React.js is a Javascript library that allows building user interfaces. There are three main concepts that you need to know before starting your journey with React. So, here you will learn about these concepts and how you can use them in your daily&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;A component is a part of code where you can turn in independent parts and encapsulate them inside a function, and reuse them between other parts of your code. It's possible to write components through functions and classes.&lt;br&gt;
This example will be written through functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, you will select the file App.js and create a const called as you want, here I use the example of forecast and added strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcPv-pNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f76akligv9w7ruek5ptt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcPv-pNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f76akligv9w7ruek5ptt.png" alt="Adding constant" width="663" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now it's time to create our component. So, let's make that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWkVkW9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb2hfmsr4bq0lqmursrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWkVkW9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb2hfmsr4bq0lqmursrb.png" alt="Creating Component" width="671" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) We need to add a div or &amp;lt;&amp;gt;&amp;lt;/&amp;gt; inside of return.&lt;/p&gt;

&lt;p&gt;2) You should select your const and add map function, because we want to iterate every item inside our const.&lt;/p&gt;

&lt;p&gt;3) You should create the other variable inside map just to start the function, you can call as index, item, or anything like that, I chose climate because it's aligned with the forecast.&lt;/p&gt;

&lt;p&gt;4) Now, you should add ⇒ to return something, so I put an HTML tag and passed climate inside of keys as my result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--788UnsdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad0us7ed531sw08c4mop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--788UnsdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad0us7ed531sw08c4mop.png" alt="Result of Component" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As you can see, we are using h1 three times because we have three strings inside of forecast constant. Now, we can conclude that we are reusing the same component three times, in this case, I chose an "h1" but you can use another HTML tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h2&gt;

&lt;p&gt;The state is used to save the data of the component, it's a simple variable that defines an initial and final state, where the final state is considered a mutable state, where you can change the initial state of some component. The state will change the VirtualDOM and when the state is updated, the component renders the new state, the mutable state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here, I will use a Hook, but you can make it with a constructor following the docs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1) You need to import the Hook called useState in your App.js file.&lt;/p&gt;

&lt;p&gt;2) We will change a little bit the way that we declare our constant. Now, you should use the Hook useState and pass your input params. Here, I'm passing forecast as the initial state, and setForecast as our final state.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5vD2kXrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcozkpfywn44byokhib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5vD2kXrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcozkpfywn44byokhib.png" alt="Adding state" width="533" height="420"&gt;&lt;/a&gt;&lt;br&gt;
I added more properties inside of forecast because we want to change them using setForecast.&lt;/p&gt;

&lt;p&gt;3) With our params created, it's time to handle the setForecast, so let's create a function to change our initial state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuHYZOEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6445yo8i49mrmg27xd8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuHYZOEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6445yo8i49mrmg27xd8m.png" alt="handle the function" width="535" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) We need to organize our code, it's important to create a folder where we will save our components. Inside of src I create a folder called components and added a Weather.js file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---169MGJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkxfzt7i82it5mno19vg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---169MGJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkxfzt7i82it5mno19vg.png" alt="Creating component folder" width="338" height="139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) After that, we want to show our output. Inside of Weather, you should create a function that receives a forecast as a parameter and add your return with HTML tags.&lt;/p&gt;

&lt;p&gt;(Don't forget to export your component)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htihK6nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypg0nrr255be3iqyu5zi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htihK6nb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypg0nrr255be3iqyu5zi.png" alt="weather component" width="692" height="248"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, I'm passing forecast inside of "h1" and "p", here we are calling the forecasts constant and accessing the properties inside of an array.&lt;/p&gt;

&lt;p&gt;6) Now, you need to come back to App.js and create a button to execute the handleChangeForecast function. &lt;/p&gt;

&lt;p&gt;We still using map function to iterate every item and you should Import your component inside of App.js to use in the return statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3-Gay3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5zt20s9ai5m8w23tjx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3-Gay3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb5zt20s9ai5m8w23tjx.png" alt="Function to show the output" width="827" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-state"&gt;
  &lt;/a&gt;
  Initial State
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EageNtOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2a7hy4xvyba7xbok9ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EageNtOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2a7hy4xvyba7xbok9ng.png" alt="Inital State" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-state"&gt;
  &lt;/a&gt;
  Final State
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RGBeeSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trd5ciapymh2kfca7b71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RGBeeSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/trd5ciapymh2kfca7b71.png" alt="Final State" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h2&gt;

&lt;p&gt;Props it's the abbreviation of properties, they are passed between the components and return elements that will be shown through the DOM. A Characteristics of props is immutability, you can't change them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCy0Uzr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w6oirl05f4k7oscwn7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCy0Uzr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w6oirl05f4k7oscwn7t.png" alt="Props" width="809" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we are passing a key with forecast ID and forecast property, this props can't change, you can't change the ID, but we are passing them to identify throw the iteration of map.&lt;/p&gt;

&lt;p&gt;Hopefully, the tutorial above helped you to learn more about React concepts. If you have any doubt, feel free to leave comments about them.&lt;/p&gt;

&lt;p&gt;If you learned something from this article, please hit the like button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to talk with me, please send me a message on &lt;a href="https://twitter.com/matheus__tanaka"&gt;Twitter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/matheustanaka/react"&gt;Source Code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/matheus-tanaka-42a833186/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>How to create an Electron application with Vite</title>
      <author>Olyno</author>
      <pubDate>Thu, 09 Dec 2021 20:34:12 +0000</pubDate>
      <link>https://dev.to/olyno/how-to-create-an-electron-application-with-vite-im</link>
      <guid>https://dev.to/olyno/how-to-create-an-electron-application-with-vite-im</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cet article est disponible en français &lt;a href="https://dev.to/olyno/comment-creer-une-application-electron-avec-vite-4noe"&gt;ici&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be able to create a software with Electron is not so complicated. Lots of boilerplates exist, documentation is everywhere on the internet....&lt;br&gt;
However, none of the boilerplates really explain how to create an Electron project with Vite. Let me explain in a few steps how to do it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-default-vite-application"&gt;
  &lt;/a&gt;
  Create the default Vite application
&lt;/h2&gt;

&lt;p&gt;For this nothing is easier. I will use Yarn for my installation. Using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just have to choose the name of your project (in our case "electron-vite"), and choose the framework of your choice (in our case "Svelte"). We go to the project folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd electron-vite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we install the different dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-the-builder"&gt;
  &lt;/a&gt;
  Install the builder
&lt;/h2&gt;

&lt;p&gt;The builder will allow us to create the final electron application, and to put the software in production. For this, we will use Electron Forge. To install Electron Forge, you just have to do the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev @electron-forge/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the forge CLI is installed, we just need to set it up, and for that, Electron Forge takes care of everything. You just have to do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn electron-forge import
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so that the different scripts are automatically added to our package.json.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-edit-the-packagejson"&gt;
  &lt;/a&gt;
  Let's edit the package.json
&lt;/h2&gt;

&lt;p&gt;We still have some dependencies to install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;concurrently &lt;span class="c"&gt;# To run Vite and Electron at the same time&lt;/span&gt;
cross-env    &lt;span class="c"&gt;# To be able to set an environment at launch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install them, we just have to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add -D concurrently cross-env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have all the dependencies installed, we just have to setup the different scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run build &amp;amp;&amp;amp; npm run electron:start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"concurrently -k "&lt;/span&gt;&lt;span class="err"&gt;vite&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="err"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;electron:dev&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cross-env IS_DEV=true electron-forge start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron-forge make"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"electron:package"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"electron-forge package"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can modify the &lt;code&gt;yarn&lt;/code&gt; by &lt;code&gt;npm run&lt;/code&gt; in the different scripts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The environment variable &lt;code&gt;IS_DEV&lt;/code&gt; can of course be renamed to &lt;code&gt;NODE_ENV&lt;/code&gt; for example.&lt;/p&gt;

&lt;p&gt;We are missing 3 fields to add/modify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"main": "app/index.js",
"description": "Boilerplate Electron + Vite + Svelte",
"license": "MIT",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; field will be the entry point of our Electron application.&lt;/p&gt;

&lt;p&gt;The fields &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;license&lt;/code&gt; are necessary to build Electron with Electron Forge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-edit-the-config-of-vite"&gt;
  &lt;/a&gt;
  Let's edit the config of Vite
&lt;/h2&gt;

&lt;p&gt;Nothing very complicated. First of all, we will have to modify the &lt;code&gt;base&lt;/code&gt; of our application. If the application goes into production, then we will look for the files to import (like the assets). Then, we will just have to modify the build folder so that it is linked to our Electron application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;svelte&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/vite-plugin-svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://vitejs.dev/config/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IS_DEV&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;outDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app/build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-setup-electron"&gt;
  &lt;/a&gt;
  We setup Electron
&lt;/h2&gt;

&lt;p&gt;To create our Electron application, we just have to create a file &lt;code&gt;app/index.js&lt;/code&gt; which will contain the default code of Electron:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Handle creating/removing shortcuts on Windows when installing/uninstalling.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron-squirrel-startup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IS_DEV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create the browser window.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mainWindow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;nodeIntegration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Open the DevTools.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openDevTools&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// mainWindow.removeMenu();&lt;/span&gt;
    &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This method will be called when Electron has finished&lt;/span&gt;
&lt;span class="c1"&gt;// initialization and is ready to create browser windows.&lt;/span&gt;
&lt;span class="c1"&gt;// Some APIs can only be used after this event occurs.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;whenReady&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On macOS it's common to re-create a window in the app when the&lt;/span&gt;
    &lt;span class="c1"&gt;// dock icon is clicked and there are no other windows open.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllWindows&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Quit when all windows are closed, except on macOS. There, it's common&lt;/span&gt;
&lt;span class="c1"&gt;// for applications and their menu bar to stay active until the user quits&lt;/span&gt;
&lt;span class="c1"&gt;// explicitly with Cmd + Q.&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;darwin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, there are 2 things to note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The following code is needed if you want to build your application with "squirrel" (a build template for Windows).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electron-squirrel-startup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;About how to get the content:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webContents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openDevTools&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// mainWindow.removeMenu(); // Optional&lt;/span&gt;
  &lt;span class="nx"&gt;mainWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are dev, we will just load a url which will be the one of Vite. However, if we are building our application for production, then we will need to get the &lt;code&gt;index.html&lt;/code&gt; file directly.&lt;/p&gt;

&lt;p&gt;Finally, we just need to create an &lt;code&gt;app/preload.js&lt;/code&gt; file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Electron does not yet support esm syntaxes, so we will use the &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#we-modify-the-svelte-config-file"&gt;
  &lt;/a&gt;
  We modify the Svelte config file
&lt;/h2&gt;

&lt;p&gt;So yes, even if our application is finished, Electron doesn't support esm syntaxes, so we have to modify the import/export in require/module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// svelte.config.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sveltePreprocess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte-preprocess&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Consult https://github.com/sveltejs/svelte-preprocess&lt;/span&gt;
  &lt;span class="c1"&gt;// for more information about preprocessors&lt;/span&gt;
  &lt;span class="na"&gt;preprocess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sveltePreprocess&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it, you have just created your software with Vite et Electron! The livereload works perfectly, what more could you want!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
      <category>vite</category>
    </item>
    <item>
      <title>Free your wings with Linux</title>
      <author>Mohammad Nazmul Hossain</author>
      <pubDate>Thu, 09 Dec 2021 20:26:17 +0000</pubDate>
      <link>https://dev.to/naz365/free-your-wings-with-linux-4f1h</link>
      <guid>https://dev.to/naz365/free-your-wings-with-linux-4f1h</guid>
      <description>&lt;p&gt;Oh my god! Microsoft brings some crucial updates on their OS, yeah, it sounds good, but damn no. Because of its requirements. It’s an unusual surprise if you purchased a new PC for Windows 10, perhaps you have an even older and perfectly capable machine but you won't be able to update your machine. &lt;/p&gt;

&lt;p&gt;Windows 11 requires something like that, The system disk must be 64GB or larger, the PC must support TPM 2.0 and the PC must support Secure Boot there must be at least 4GB of RAM.&lt;/p&gt;

&lt;p&gt;You’re probably using Windows or Mac OS to read this, you will be amazed to know that there is another operating system that is way better than Windows or even Mac OS. So, Today I’m going to highlight some reasons why you should use Linux and never look back. So what is it? &lt;/p&gt;

&lt;p&gt;From smartphones to cars, supercomputers and home appliances, home desktops to enterprise servers, the Linux operating system are everywhere.&lt;/p&gt;

&lt;p&gt;It's in your phones, thermostats, cars, refrigerators, Roku devices, and televisions. It also runs most of the Internet, all of the world’s top 500 supercomputers, and the world’s stock exchanges. even Android is based on the Linux operating system.&lt;/p&gt;

&lt;p&gt;But beside being the platform of choice to run desktops, servers, and embedded systems across the globe, Linux is one of the most reliable, secure, and worry-free operating systems available in the market.&lt;/p&gt;

&lt;p&gt;What is Linux?&lt;/p&gt;

&lt;p&gt;Just like Windows, iOS, and Mac OS, Linux is an operating system. One of the most popular platforms on the planet. LINUX is an operating system or a kernel distributed under an open-source license. Its functionality list is quite like UNIX. The kernel is a program at the heart of the Linux operating system that takes care of fundamental stuff, like letting hardware communicate with software.&lt;/p&gt;

&lt;p&gt;Here’s why you should switch to Linux. While Linux already powers all the top 500 fastest supercomputers worldwide, I focus on desktop Linux for average Mango 🥭 people like you and me.&lt;/p&gt;

&lt;p&gt;01.Linux Is Free&lt;/p&gt;

&lt;p&gt;Let’s overlook it, cost matters. But you’re probably thinking you’ve never paid a dime for an operating system. You have. When you purchase a desktop or laptop, the cost of Windows is built-in. Not only that, but if you’ve ever upgraded Windows, you know of this cost. That inherent cost isn’t found only in the operating system. In our country, we have always been using pirated OS and software which is a kind of punishable crime. Many applications for either Windows or macOS have an associated cost. With Linux, you’ll find thousands upon thousands of free applications. Instead of paying for MS Office, you can install LibreOffice on Linux, directly from your distribution’s app store. Looking for a free Photoshop alternative? Try The GIMP. And when it comes time to upgrade your Linux distribution, it won’t cost you a penny … ever. Nearly every Linux distribution comes free of charge. With a couple of hundred bucks saved, you can use it to upgrade your hardware, purchase premium services, or do anything better than you can think of. Isn’t that exciting?&lt;/p&gt;

&lt;p&gt;02.More Secure: Antivirus not required&lt;/p&gt;

&lt;p&gt;To be honest, every platform has its share of issues. No operating system is immune to security threats, and Linux is no exception. However, Linux is one of the most secure platforms when compared to macOS and Windows.&lt;/p&gt;

&lt;p&gt;With a big community of developers/users, it gets fixed quickly even if someone finds a problem. However, sometimes with macOS and Windows, I’ve noticed that it takes a lot of time for them to fix the issues in a future update.&lt;/p&gt;

&lt;p&gt;And, of course, you don’t necessarily need an antivirus program on Linux. So, you also save on yearly/monthly subscriptions for Antivirus programs on Windows/macOS.&lt;/p&gt;

&lt;p&gt;Yes, one could argue that the market share of Linux on Desktop is lower than Windows/macOS. So, attackers don’t always target Linux users and hence, there aren’t any widespread security issues being spotted.&lt;/p&gt;

&lt;p&gt;The global Antivirus Software market size is projected to reach USD 3364.7 million by 2027, from USD 3635.5 million in 2020, at a CAGR of -1.1% during 2021-2027 only because of upcoming malware threats and cyber-attack.&lt;/p&gt;

&lt;p&gt;Even if that’s true (let’s assume), would you prefer to use something safer to use or something that’s a magnet to the virus, malware, and adware? I’ll respect your decision with that.&lt;/p&gt;

&lt;p&gt;3.Runs on any hardware&lt;/p&gt;

&lt;p&gt;All of us know that with every new release of Windows OS, a huge number of hardware systems become obsolete as their technical specifications are no longer adequate to run the latest Windows OS. Linux makes very efficient use of the system’s resources. Linux installation can be customized for users and specific hardware requirements. The installation procedure is very flexible and allows users to choose the modules they want to install. This allows them to install Linux even on old hardware, thus helping in optimal use of all the hardware resources.&lt;br&gt;
Linux runs on a range of hardware, right from supercomputers to watches. You can give new life to your old and slow Windows system by installing a lightweight Linux system or even run a NAS or media streamer using a particular distribution of Linux. There are also lightweight desktops like Xfce and LXDE which can run on lower-end PCs. Not just limited to that, you can also fire up a Linux distro on a Raspberry Pi or its alternatives to set up a basic system or work on a DIY project.&lt;/p&gt;

&lt;p&gt;04.Linux Is More Private&lt;/p&gt;

&lt;p&gt;When you use Windows, Microsoft creates an advertising ID for you and attaches information about your usage for ad targeting. The feature requires you to opt out, so it will operate by default until you choose otherwise. With Linux, you get much more respect for your privacy. Linux doesn't record your usage data and ships it to some data warehouse. There's no voice command feature registering your speech patterns to create a vocal fingerprint. Some distros may ask if you'd like to contribute to development by sending anonymized data to the developers so they can know which features you use. Again, it's up to you if and how you want to help the project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customization &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Users have tremendous flexibility in customizing the system as per their requirements. There are numerous choices for wallpapers, desktop icons, and panels. There are more than half a dozen desktop environments to choose from, like GNOME, KDE, etc. For any task, right from the GUI interface and file managers, to DVD burners and browsers, around four to six options are available for any particular software. The Linux versions of the most popular browsers are available. The Linux philosophy is based on using several small programs, each of which does one task very well. But these programs can be combined to write really powerful programs and utilities. Starting from the icon pack to the application window, you can change the look and feel of a Linux distro in minutes. In case you want to explore, you can refer to our list of the best GNOME themes and best icons for your Linux distro.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Beauty of command line&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of the great strengths of Linux is its command line. While this is one of its strengths, most people initially fear Linux simply because of this command line. But now the day has changed. A user can continue his work only with the graphical user interface without going to the command line for months. Another excuse for not using Linux before is that Linux does not have the necessary software. Now, this excuse is not acceptable at all. Linux now supports everything from photo editing to superhit commercial animation movies. For example, Pixar Animation Studio uses Linux. With open-source animation software 'Blender', they are giving away all the nice animated movies. But every experienced Linux user knows what a command line is. Everything on the command line can be done in a matter of seconds, which can take hours to complete. Once you are familiar with Linux shells and shell scripts, it is possible to automate any task that can be done manually.&lt;/p&gt;

&lt;p&gt;07.Linux Covers Your Fundamental Needs.&lt;/p&gt;

&lt;p&gt;You can use Linux for virtually all your essential computing needs with its native apps. This includes web browsing, email, streaming, and more. Linux distributions are made for absolutely everything. Popular open-source software GIMP for image editing immediately after installation, Inkscape for vector graphic editing, LibreOffice or OpenOffice as a whole office suite, For example, if you need Microsoft Word, you can still use the web app on Linux, or choose from several native alternatives that can open, edit, and save DOC and DOCX files. Firefox or Chromium as a browser, Nice as an email client, Torrent Client, Nice as a popular OpenSource. The command-line editor is available in Vim, Emax, or Nano. Since Linux is for developers, popular programming languages ​​like Python, JavaScript, and Perl are pre-installed here. Installing other programming languages ​​is also a matter of command. Most programming tools are built primarily for Linux.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linux for Education&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the most useful aspect for students, as they can use the software to study how it works, before modifying and extending the code to suit their needs. This will also help them to learn the internals of an OS and the software. This process will help in the development of new software and aid innovation based on local needs. Even if users are not programmers, they can contribute to Linux by helping in documentation, translation, and testing. Linux is used in student and professional life. If you want to study computer science and engineering, there are one or more courses called the operating system. That course teaches the basics of an operating system. This course is done with Linux as the source code of Linux is open. As well as those who want to create an operating system, have no speed without the Linux kernel. So you need to have a clear idea of ​​how to use Linux and its basics. Knowing Linux is a must for those who will work as software engineers in a large or medium-sized company in their professional life. You don't have to be very skilled, you have to know the basic concepts: use the command line, basic and everyday commands, use a command-line editor (VIM, Nano, Emax), use git in the command line, etc. It turns out that those who are accustomed to using Linux are far ahead of others. When it comes to programming in Linux, you have to write a lot of commands (nowadays you may not have to do it all the time due to heavy IDE, but you have to do it in the beginning). Because of this, they have to know a lot. What a fairly new Linux user programmer knows, a fairly experienced programmer using Windows does not know. The things that Linux users know, the things that they need to know — Windows users don't know that, they will know. You can verify the truth of this statement with your classmates.&lt;/p&gt;

&lt;p&gt;It can be a fantastic educational tool for schools and colleges as free software is available to aid in teaching. Proprietary software for computation, like MATLAB, is very expensive. There are alternatives available to it like Scilab and GNU Octave. Linux software is available in many areas— Celestia and Stellarium for astronomy, Avogadro and Gabedit for chemistry, EMBOSS and TreeView X for biology; and ROOT, Octopus and Step for physics.&lt;/p&gt;

&lt;p&gt;Last but not the least&lt;br&gt;
Incredible Community Support. When you start using Linux, you are a part of the Linux community. This means, from now on you are not alone. Loneliness can never bother you. If you ever face any problem with the server or system, just drop a comment mentioning your problem in any forum. Thousands of users are always ready to solve your problem. Yes, Linux always offers you this helping hand. After all, who will use what is a personal choice. I have tried to highlight some of the benefits of Linux here. If you find it convenient, you can take a break from the world of Linux. Hope you like it.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>educaton</category>
      <category>learn</category>
    </item>
    <item>
      <title>Basic NPM Packages  for Javascript Developers</title>
      <author>Amlan</author>
      <pubDate>Thu, 09 Dec 2021 20:14:09 +0000</pubDate>
      <link>https://dev.to/amlan/basic-npm-packages-for-javascript-developers-5akg</link>
      <guid>https://dev.to/amlan/basic-npm-packages-for-javascript-developers-5akg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dotenv:&lt;/strong&gt; .env is  zero dependency module that loads enviorment variables from a .env file into process.env .&lt;/p&gt;

&lt;p&gt;ex-  const key = process.env.secretkey&lt;br&gt;
this secretkey is declared in our .env file and that file will not be public.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bcrypt:&lt;/strong&gt; Bcrypt is a library that help you easily hash password and compare them in node.js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5btU2Sfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkajst20122a3qqh8hu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5btU2Sfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unkajst20122a3qqh8hu.png" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UUID:&lt;/strong&gt; UUID is a unique random number ids values generator . It generate string random values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1KgXssDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjo4shmx6v6whz7bfhe4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1KgXssDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjo4shmx6v6whz7bfhe4.png" alt="Image description" width="880" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Axios&lt;/strong&gt; Axios is a popular promise based HTTP client for the browser and node.js .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDkZ05oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbr2s6fg31g4n2c2fmcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDkZ05oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbr2s6fg31g4n2c2fmcm.png" alt="Image description" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Socket.io :&lt;/strong&gt; Socket.io enables real time bi-directional communication between web clients and servers. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>Interserf </title>
      <author>Ilo Rty</author>
      <pubDate>Thu, 09 Dec 2021 18:59:52 +0000</pubDate>
      <link>https://dev.to/rtyilo/interserf-292c</link>
      <guid>https://dev.to/rtyilo/interserf-292c</guid>
      <description>&lt;p&gt;&lt;a href="https://photos.app.goo.gl/FsyTPJ1Y1Bf72sq77"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://sites.google.com/d/1eV6EM-2_6r3RtZX7si0vXtMbCtaixZ41/edit?ouid=101548971618870594405"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Pure CSS "Matrix code" effect</title>
      <author>Tetragius</author>
      <pubDate>Thu, 09 Dec 2021 18:54:35 +0000</pubDate>
      <link>https://dev.to/tetragius/pure-css-matrix-code-effect-5b6k</link>
      <guid>https://dev.to/tetragius/pure-css-matrix-code-effect-5b6k</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.tourl"&gt;&lt;/a&gt;&lt;iframe height="600" src="https://codepen.io/tetragius/embed/RwLRqpd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Create CSS property (better for animation)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--timer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;integer&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or just&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;Animate property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;animate-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="py"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*26 -  the number of letters of the English alphabet*/&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;Add some counter magic&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;counter-reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;animate-letter&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.letter&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;lower-alpha&lt;/code&gt; - &lt;a href="https://www.w3.org/TR/predefined-counter-styles"&gt;predefined counter styles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, at each step of the animation, the variable &lt;code&gt;--timer&lt;/code&gt; will increase by &lt;code&gt;1&lt;/code&gt; until it reaches &lt;code&gt;26&lt;/code&gt;. For each digit, the corresponding letter of the alphabet will be selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;Add more counters&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;counter-reset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;timer-1&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-2&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-3&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-4&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-5&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-6&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-7&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-8&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-9&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;timer-10&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;animate-letter&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*Add new counters, shifting each subsequent one by one*/&lt;/span&gt;

&lt;span class="nc"&gt;.letter&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timer-10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;lower-alpha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;writing-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical-rl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="nl"&gt;text-orientation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;upright&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*Also directing text from top to bottom*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;

&lt;p&gt;Add other effects and animations on the bite. And it's ready!&lt;/p&gt;

</description>
      <category>css</category>
      <category>styles</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Project 9: Must Know Dev Tools Tricks</title>
      <author>prachigarg19</author>
      <pubDate>Thu, 09 Dec 2021 18:36:52 +0000</pubDate>
      <link>https://dev.to/prachigarg19/project-9-must-know-dev-tools-tricks-1lb6</link>
      <guid>https://dev.to/prachigarg19/project-9-must-know-dev-tools-tricks-1lb6</guid>
      <description>&lt;p&gt;Welcome to my "Build 30 Js Projects in 30 Days" Series .This is day 9 and project 9. If you haven't read the other articles in this series please check them out first. I'll list them at the end of this article.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous article. This is the Day 9 challenge of &lt;a href="https://javascript30.com/"&gt;Wes Bos Javascript30 course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always before starting download the starter files from &lt;a href="https://github.com/wesbos/JavaScript30"&gt;here&lt;/a&gt;. I've made a separate article on how to download starter files, you can check it out &lt;a href="https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a theoretical challenge where we will discuss some helpful dev tool tricks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Suppose we have javascript on our page and we want to see the js code acting on an element&lt;/u&gt;&lt;/strong&gt; then we can simply select inspect the elements &amp;gt; go to the html code of that element &amp;gt; Right click &amp;gt;Break on&amp;gt; Attribute modification. This will pause our website when js code is implemented on that element and shows that particular line with a dot left to it.This can help a lot when we see websites with large code bases and cannot figure out the js code acting on a element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below we will discuss about different types of output that can be printed on console other than our regular console.log. Hope you find these helpful too!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;u&gt;Ways to print variable values in console-&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a. console.log("My name is %s",'Prachi');&lt;br&gt;
   b. var="Prachi"&lt;br&gt;
     console.log("My name is ${var}");&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;&lt;u&gt;Applying css on our console output-&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
 &lt;code&gt;console.log("%c This is styled text","color:red;font-size:20px");&lt;/code&gt;&lt;br&gt;
&lt;u&gt;First argument&lt;/u&gt;- %c and statement to be printed&lt;br&gt;
&lt;u&gt;Second argument&lt;/u&gt;-css to be applied to the statement.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jejNsWaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64dzl7ocz4uvcs75wtfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jejNsWaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64dzl7ocz4uvcs75wtfz.png" alt="Image description" width="452" height="53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Printing warning message- &lt;/u&gt;&lt;/strong&gt;
console.warn('This is a warning');&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65bRqiv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iitvlwz281jy4n1i8qqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65bRqiv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iitvlwz281jy4n1i8qqs.png" alt="Image description" width="275" height="46"&gt;&lt;/a&gt;&lt;br&gt;
It also displays the stack trace from where it was called.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;&lt;u&gt;Displaying error message:&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
console.error('This is a error");&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2r6m9TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w01n7kf58o8ihhn7jxmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2r6m9TE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w01n7kf58o8ihhn7jxmd.png" alt="Image description" width="323" height="41"&gt;&lt;/a&gt;&lt;br&gt;
It also displays the stack trace from where it was called.&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;&lt;u&gt;Displaying statement with an info sign next to it:&lt;/u&gt;&lt;/strong&gt;&lt;br&gt;
console.info('This is info');&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;To check if statement is true or not:&lt;/u&gt;&lt;/strong&gt;
Suppose we want to check if a part of our code is true or not then we can use this trick.
e.g. &lt;u&gt;we want to check is our input has attribute value or not then-&lt;/u&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

      &amp;lt;input type="text" id="text"&amp;gt;
      &amp;lt;script&amp;gt;
       text=document.getElementById('text');
        console.assert(text.hasAttribute('value'),"There is no value attribute");
      &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lo7kHGED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1isq8s3b8bf0tr8zob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lo7kHGED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1isq8s3b8bf0tr8zob.png" alt="Image description" width="473" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;assert will have 2 arguments, first will contain statement that is to be checked,second will be the statement that we want to print for displaying error. Also, assert shows output ONLY IF STATEMENT IS WRONG.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Clearing console:&lt;/u&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;console.clear(); &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;u&gt;Displaying all the properties and elements associated with an element:&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;console.log(element name);&lt;br&gt;
e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

     &amp;lt;p id="text"&amp;gt;lorem10&amp;lt;/p&amp;gt;
      &amp;lt;script&amp;gt;
       text=document.getElementById('text');
        console.dir(text);
      &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HUB26yne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frrp50bl7o03igvh7ceh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HUB26yne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frrp50bl7o03igvh7ceh.png" alt="Image description" width="671" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Grouping multiple console statements.&lt;/u&gt;&lt;/strong&gt;
Suppose we want to iterate over our array and group all the statements for better readability,then-
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

      &amp;lt;script&amp;gt;
       let Dogs=[{name:"Mylo",age:2},{name:"Noddy",age:3},{name:"blacky",age:4}];

       for(dog of Dogs)
       {  //naming of group
         console.group(`${dog.name}`);
         console.log(`Hello my name is ${dog.name}`);
         console.log(`I am ${dog.age} years old`);
         //ending group
         console.groupEnd(`${dog.name}`);
       }
      &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dVIfMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3hvex1rc5wa9r5yigxm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dVIfMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3hvex1rc5wa9r5yigxm.png" alt="Image description" width="506" height="223"&gt;&lt;/a&gt;&lt;br&gt;
We can have different argument value in group and groupEnd.&lt;/p&gt;

&lt;p&gt;Without groupEnd our first group won't end and the next object will be shown as a subgroup of the first group-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7Rp39q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpf5kd3lvfbeidnz2azk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7Rp39q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpf5kd3lvfbeidnz2azk.png" alt="Image description" width="462" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Printing the number of times a particular dom element,statement,variable etc. has been printed on console:&lt;/u&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      console.count('Mylo');
      console.count('Noddy'); 
      console.count('Mylo');
      console.count('Mylo');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApFgAYEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvb7n3am7wryvj4gtept.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApFgAYEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvb7n3am7wryvj4gtept.png" alt="Image description" width="259" height="102"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Displaying content in table format:&lt;/u&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let Dogs=[{name:"Mylo",age:2},{name:"Noddy",age:3},{name:"blacky",age:4}];
       console.table(Dogs)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9DJBxWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yeospi8cflecln20nm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9DJBxWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2yeospi8cflecln20nm6.png" alt="Image description" width="880" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;u&gt;Displaying time taken by a particular set of code.&lt;/u&gt;&lt;/strong&gt;
We will use console.time to begin with time recording and console.timeEnd to end recording and displaying time taken.
E.g.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let Dogs=[{name:"Mylo",age:2},{name:"Noddy",age:3},{name:"blacky",age:4}];

       //start timer
       console.time('Iterating array')
       for(dog of Dogs)
       {  
         console.log(`${dog.name}`);
        }
        //ending and displaying time
       console.timeEnd('Iterating array');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cT30ox9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4oot0blztlx8prjld3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cT30ox9A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4oot0blztlx8prjld3z.png" alt="Image description" width="342" height="79"&gt;&lt;/a&gt;&lt;br&gt;
Also time and timeEnd should have same string otherwise it'll show a warning displaying that the string doesn't exist unlike group and groupEnd where different arguments will work. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt"&gt;
  &lt;/a&gt;
  &lt;u&gt;Things I learnt:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;Almost all the tricks mentioned in this article were new to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#previous-article-from-this-series"&gt;
  &lt;/a&gt;
  &lt;u&gt;Previous article from this series:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/prachigarg19/project-8html-5-canvas-7bg"&gt;Day 8 Project 8&lt;/a&gt;, in this project I built a HTML5 canvas. Do check it out if you haven't yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;u&gt;Conclusion&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;That's it for today's project.Next project will be 'Hold shift to check multiple checkboxes'.&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you.&lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part of it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Release 0.4 Progression</title>
      <author>Andre Willomitzer</author>
      <pubDate>Thu, 09 Dec 2021 18:30:09 +0000</pubDate>
      <link>https://dev.to/andrewillomitzer/release-04-progression-43ji</link>
      <guid>https://dev.to/andrewillomitzer/release-04-progression-43ji</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-task-at-hand"&gt;
  &lt;/a&gt;
  The Task At Hand
&lt;/h3&gt;

&lt;p&gt;This past week I have been working on &lt;a href="https://github.com/lbdremy/solr-node-client"&gt;solr-node-client&lt;/a&gt; repository, and attempting to adjust their test cases to be browser compatible with the help of the maintainers. &lt;/p&gt;

&lt;p&gt;In order to do this, I have had to learn a lot about setting up Docker containers locally. This has been made even more of a challenge by the fact that I am on Windows 10 Home, which is missing some nice little features like enabling Hyper-V.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-have-accomplished-so-far"&gt;
  &lt;/a&gt;
  What I have accomplished so far
&lt;/h3&gt;

&lt;p&gt;So far, I have managed to install Docker Desktop for Windows 10 Home. This involved workarounds using a &lt;a href="https://www.itechtics.com/enable-hyper-v-windows-10-home/"&gt;batch file&lt;/a&gt; (.bat) and installing WSL/WSL2 and the Linux kernel update manually.&lt;/p&gt;

&lt;p&gt;First, I had to install developer dependencies for &lt;code&gt;jasmine-core&lt;/code&gt;, &lt;code&gt;karma&lt;/code&gt;, &lt;code&gt;karma-chrome-launcher&lt;/code&gt;, and &lt;code&gt;karma-jasmine&lt;/code&gt;. Also in the package.json file, I added a script to run the karma tests: &lt;code&gt;"karma-tests": "karma start --single-run --browsers ChromeHeadless karma.conf.js",&lt;/code&gt;.&lt;br&gt;
In the repository itself I have set up the &lt;code&gt;karma.config.js&lt;/code&gt; file  to use Headless Chrome. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgrBra2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls2nsd4bu0fhnblstffy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgrBra2a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls2nsd4bu0fhnblstffy.png" alt="Image description" width="880" height="275"&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#running-the-tests"&gt;
  &lt;/a&gt;
  Running the tests
&lt;/h3&gt;

&lt;p&gt;When I initially ran the tests, I had to start Docker by running &lt;code&gt;npm run solr:current:start&lt;/code&gt; to start the Docker container. And then to execute the tests, I ran my karma-test command with it pointing to the existing &lt;code&gt;test&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Surprisingly, it didn't work. Because the project uses Typescript rather than JavaScript which Karma is made for, I had to create an exception for &lt;code&gt;.ts&lt;/code&gt; files in the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;files: [
      {
        pattern: 'test/**/*.ts',
        type: 'js'  // to silence the warning. Means load with &amp;lt;script&amp;gt; tag
      },
    ],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure it wasn't my Karma setup, I created a basic Karma test of adding 1+1 and making sure it equals 2. The test passed so I moved on to trying their already created tests.&lt;br&gt;
After running the tests with no Karma warnings, I started to get other errors which were 100% expected because that's why I made the issue branch to try and fix the browser incompatibilities. &lt;/p&gt;

&lt;p&gt;One error was about &lt;code&gt;esModuleInterop&lt;/code&gt; which I assumed was to do with some parts of the code using old import statements (even some packages) and some using &lt;code&gt;require()&lt;/code&gt;. In order to fix these I went into the &lt;code&gt;types.ts&lt;/code&gt; file and changed the import statement from &lt;code&gt;import Dispatcher from 'undici/types/dispatcher';&lt;/code&gt; to &lt;code&gt;import Dispatcher = require('undici/types/dispatcher');&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Upon changing that statement, I ran the tests again and had a strange error about "figc" one of the imports not being a function. From here, I decided it would be best to ask the maintainer what to do about this issue because changing the imports did not seem to fix it like it did the other issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-the-meantime-and-moving-forward"&gt;
  &lt;/a&gt;
  In the meantime and moving forward...
&lt;/h3&gt;

&lt;p&gt;Since I got a little stuck and Docker Desktop took so many tries, attempts, sweaty armpits to set up I asked the maintainers if I could add some documentation to the README about setting it up so that future developers can have an easier time getting going.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjpR2AF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5larpjtzfzabhfz8e29i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjpR2AF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5larpjtzfzabhfz8e29i.png" alt="Image description" width="880" height="273"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for now!!!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Don't Update WordPress Plugins ...</title>
      <author>Ingo Steinke</author>
      <pubDate>Thu, 09 Dec 2021 18:27:48 +0000</pubDate>
      <link>https://dev.to/ingosteinke/dont-update-wordpress-plugins--ja9</link>
      <guid>https://dev.to/ingosteinke/dont-update-wordpress-plugins--ja9</guid>
      <description>&lt;p&gt;... unless you know what you are doing!&lt;/p&gt;

&lt;p&gt;Don't get me wrong: please &lt;strong&gt;do update your plugins&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Keep your system up to date! This includes your server, PHP version, WordPress core version, themes and plugins. But be careful how to do it once your setup has become seriously outdated!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-i-destroyed-and-recovered-my-customers-wordpress-website-with-a-few-clicks"&gt;
  &lt;/a&gt;
  How I destroyed (and recovered) my customer's WordPress website with a few clicks:
&lt;/h2&gt;

&lt;p&gt;As web developers, we might get used to the safety of modern software development. Static code analysis, syntax highlighting, auto completion, automated regression tests and peer reviews on staging systems as well as the possibility to revert changes and deploy the previous working version not only help us to deliver stable quality software, but also spare us the thrill and excitement of editing production systems five minutes before a deadline.&lt;/p&gt;

&lt;p&gt;Unless it's WordPress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#has-it-been-tested-to-work-with-your-setup"&gt;
  &lt;/a&gt;
  Has it been Tested to Work with Your Setup?
&lt;/h2&gt;

&lt;p&gt;"Works for me" does not mean that it will work for you, right? Even more so when it comes to ...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-wordpress-plugins"&gt;
  &lt;/a&gt;
  Updating WordPress Plugins 🤯
&lt;/h3&gt;

&lt;p&gt;WordPress might be the most ubiquitous legacy software that still makes its users do edits and configuration changes directly on a single node production system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XxeX4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6bvio6fmf8iy7wh27ww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XxeX4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6bvio6fmf8iy7wh27ww.png" alt="Screenshot of the Ninja Forms plugin update notice" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WordPress core might not be a problem these days. But WordPress can be extended using themes and plugins, and anyone can upload mostly anything to the official plugin store to release code that has the power to override and break anything, causing fatal errors that make frontend and backend unavailable, unless you got the recovery email.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#works-for-me"&gt;
  &lt;/a&gt;
  Works for me
&lt;/h2&gt;

&lt;p&gt;In theory, as a web developer, I would develop a (child) theme on my local computer, test everything locally as well as on my customer's staging environment before deploying the tested version to the production system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SV8ZnaFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzw74kfnra4y3aai7vwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SV8ZnaFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzw74kfnra4y3aai7vwu.png" alt="Screenshot showing docker-compose up starting WordPress, with hand-written annotation: modern web development, and a smiling emoji face" width="610" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assuming that there is a staging environment using the same system configuration, plugins and content as the production system.&lt;/p&gt;

&lt;p&gt;In practice, my customer uses a page builder, and tweaking some custom style sheets is the least of the problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outdated-wordpress-plugins"&gt;
  &lt;/a&gt;
  Outdated WordPress Plugins
&lt;/h2&gt;

&lt;p&gt;I don't want to shame plugin developers. Ninja Forms is a useful no-code form builder that does its job and has more than a million active installations, according to its &lt;a href="https://wordpress.org/plugins/ninja-forms/"&gt;official plugin page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-fatal-errors"&gt;
  &lt;/a&gt;
  Preventing Fatal Errors
&lt;/h2&gt;

&lt;p&gt;I don't want to shame WordPress either.&lt;/p&gt;

&lt;p&gt;The community is very supportive, and the core developers have made a great effort to make the current versions quite stable and secure, at least compared to the situation about 10 years ago.&lt;/p&gt;

&lt;p&gt;WordPress core tries to prevent installing and activating incompatible plugins, showing and error message and retaining the current plugin version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-sometimes-this-does-not-work"&gt;
  &lt;/a&gt;
  But sometimes this does not work.
&lt;/h3&gt;

&lt;p&gt;While Ninja Forms has done a good job staying backward compatible in the past, the latest versions have a problem with outdated PHP versions like PHP 7.1.&lt;/p&gt;

&lt;p&gt;And after accepting the suggested minor update, WordPress was gone. No more links and menus in the administration, no more content in the frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-more-content-in-the-frontend"&gt;
  &lt;/a&gt;
  No more Content in the Frontend! 😱
&lt;/h2&gt;

&lt;p&gt;Instead, this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fatal error: Uncaught TypeError: Return value of NF_Admin_Metaboxes_Calculations::registerReactMetabox() must be an instance of void, none returned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hN57h6SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njosvkx719n5pjiuiwsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hN57h6SZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njosvkx719n5pjiuiwsk.png" alt="Screenshot of the above error message." width="880" height="29"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fatal-error"&gt;
  &lt;/a&gt;
  Fatal Error!!!
&lt;/h3&gt;

&lt;p&gt;So something broke, because of some reason I won't be able to fix anyway, and WordPress makes it possible to use React in the backend and jQuery in the frontend at the same time in 2021.&lt;/p&gt;

&lt;p&gt;As I did not have access to the mailbox where WordPress helpfully sent a recovery link (see below), I was hoping that maybe a PHP update might bring back the blog content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-your-actual-php-version"&gt;
  &lt;/a&gt;
  Check Your Actual PHP Version
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uf39aaTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d6gqcp08ks6fjolbh39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uf39aaTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d6gqcp08ks6fjolbh39.png" alt="Screenshot of WordPress PHP update notice" width="600" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"PHP Update Required - WordPress has detected that your site is running on an insecure version of PHP." (But we won't tell you any more details here, as PHP 7.3 is just as bad as 5.3 ? Probably not!)&lt;/p&gt;

&lt;p&gt;"What is PHP and how does it affect my site? ... Learn more about updating PHP", well who will click this button?&lt;/p&gt;

&lt;p&gt;Either I didn't have any idea that PHP existed after all and I just want my blog to work so that I can post content and make it look good, or else I am a developer and think I know enough not to follow the link.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-do-i-actually-know"&gt;
  &lt;/a&gt;
  But do I actually know?
&lt;/h3&gt;

&lt;p&gt;Turned out that my customer was only slightly behind the latest PHP version, at least that seemed to be the case at first sight.&lt;/p&gt;

&lt;p&gt;No big deal, I'll update ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-powerless-administrator"&gt;
  &lt;/a&gt;
  A Powerless Administrator 🤷
&lt;/h2&gt;

&lt;p&gt;Don't touch any WordPress setup before you have server access! &lt;/p&gt;

&lt;p&gt;Sometimes, your customers will only provide your with an account as a WordPress administrator, which is fine unless there is any fatal error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#housekeeping-wordpress"&gt;
  &lt;/a&gt;
  Housekeeping WordPress
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;WordPress administration access&lt;/li&gt;
&lt;li&gt;webspace administration:

&lt;ul&gt;
&lt;li&gt;access the file system&lt;/li&gt;
&lt;li&gt;view and edit PHP software version&lt;/li&gt;
&lt;li&gt;database access&lt;/li&gt;
&lt;li&gt;error logs&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recovery-email"&gt;
  &lt;/a&gt;
  Recovery Email 📩
&lt;/h2&gt;

&lt;p&gt;In case of a fatal error, WordPress will send an email to the admin address, informing about the issue and including a secret link to activate &lt;a href="https://make.wordpress.org/core/2019/04/16/fatal-error-recovery-mode-in-5-2/"&gt;recovery mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Too bad if you're &lt;em&gt;an&lt;/em&gt; administrator (a user having administrative rights) but not &lt;em&gt;the&lt;/em&gt; administrator ("Administration Email Address" in general settings).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JVi1-j2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbny67mf8vo1vajnwbfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JVi1-j2p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbny67mf8vo1vajnwbfm.png" alt="unreachable@example.com as administrative email on the general settings page" width="880" height="128"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Too bad if you're set up an email address that no longer works or never did. Maybe a new spam prevention policy no longer allows PHP to send emails unless the domain matches your own domain, but you entered a gmail address.&lt;/p&gt;

&lt;p&gt;Maybe you never cared about &lt;a href="https://wpmailsmtp.com/"&gt;WP Mail SMTP&lt;/a&gt; because the built-in mailer used to work when you set up WordPress five years ago.&lt;/p&gt;

&lt;p&gt;Whatever. The recovery email is the only way to get the recovery link. If you didn't get it, you can still try to use the database and the file system to recover your installation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-recovery-strategy"&gt;
  &lt;/a&gt;
  Alternative Recovery Strategy
&lt;/h2&gt;

&lt;p&gt;Like WordPress describes on their &lt;a href="https://wordpress.org/support/article/faq-troubleshooting/"&gt;troubleshooting page&lt;/a&gt;, you should disable all of your plugins, which can be done by renaming the plugins folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCXfxALU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4josd31tjo9ztd08rsla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCXfxALU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4josd31tjo9ztd08rsla.png" alt="Screenshot of the file system with a renamed plugins folder" width="392" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are able to log in again afterwards, you will see warning messages about missing plugins, and then you can re-enable them one by one until you see the problem. In my case I knew which update caused the problem, so I reactivated all but the troublesome plugin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reverting-to-an-older-version"&gt;
  &lt;/a&gt;
  Reverting to an Older Version?
&lt;/h3&gt;

&lt;p&gt;There doesn't seem to be a convenient way to install an older plugin version using the store, but you can download another version on the vendor's plugin page and install it by file upload.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SgQDV_1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fj9l2dcvuxy2jjpdjkm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SgQDV_1D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fj9l2dcvuxy2jjpdjkm.png" alt="Screenshot of WordPress' plugin file upload form" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While the older plugin version did not throw a fatal error, it didn't fully work either, so getting back to updating PHP at last.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seemingly-minor-php-update"&gt;
  &lt;/a&gt;
  Seemingly Minor PHP Update
&lt;/h2&gt;

&lt;p&gt;I was mistaken to think that my customer was only slightly behind the latest PHP version. While 7.4 was the recommended stable release, the server still ran 7.3, so I updated to 7.4, made a coffee break, and logged into WP-Admin to check again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nothing-had-changed"&gt;
  &lt;/a&gt;
  Nothing had changed.
&lt;/h3&gt;

&lt;p&gt;Most web hosting providers offer the option to set different PHP versions for different domains and subdomains.&lt;/p&gt;

&lt;p&gt;Sometimes you can even specify a specific PHP version &lt;strong&gt;for any folder&lt;/strong&gt; in your file system! 💡&lt;/p&gt;

&lt;p&gt;Nobody seemed to have noticed for some time, that this WordPress folder was stuck to PHP 7.1! No wonder things broke after the update.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recovery"&gt;
  &lt;/a&gt;
  Recovery
&lt;/h2&gt;

&lt;p&gt;So after really updating to PHP 7.4, I first made another database backup just in case, and proceeded to update anything else. Updated WordPress core and all of the plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-system-up-to-date"&gt;
  &lt;/a&gt;
  Keep your system up to date!
&lt;/h3&gt;

&lt;p&gt;If it's not your own system, make sure you (or another skilled person) will have access not only to WP-Admin, but also to the hosting provider's control panel, to the file system, and maybe have the phone number of their support hotline ready. 📞&lt;/p&gt;

&lt;p&gt;Back up your data before doing anything else!&lt;/p&gt;

&lt;p&gt;Unless there is a legacy plugin that requires a legacy PHP version, proceed with the update:&lt;/p&gt;

&lt;p&gt;Make sure to run the latest recommended stable PHP version, currently (in 2021) not 8.x yet (see &lt;a href="https://dev.to/ingosteinke/check-your-wordpress-plugins-before-upgrading-to-php-8-485n"&gt;did I upgrade to PHP 8 too early?&lt;/a&gt;), but no 5.x or any outdated 7.x version either.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZNo3KUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggzchtwtknc7eqo3j6c7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZNo3KUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggzchtwtknc7eqo3j6c7.png" alt="PHP language levels explained in PhpStorm" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After updating PHP, update WordPress core. &lt;br&gt;
Only then update your themes and plugins.&lt;/p&gt;

&lt;p&gt;When everything works, you can add further plugins that you might think you need, so you have more chances to fail once they release an update. 😉&lt;/p&gt;

&lt;p&gt;Or you can finally start designing and blogging!&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>static has only one meaning</title>
      <author>Shaw</author>
      <pubDate>Thu, 09 Dec 2021 18:17:54 +0000</pubDate>
      <link>https://dev.to/shawsumma/static-has-only-one-meaning-5d1e</link>
      <guid>https://dev.to/shawsumma/static-has-only-one-meaning-5d1e</guid>
      <description>&lt;p&gt;&lt;code&gt;static&lt;/code&gt; can be confusing with the wrong definition. Here's a simplified example:&lt;/p&gt;

&lt;p&gt;The task is to write a &lt;code&gt;counter&lt;/code&gt; function that takes no arguments and returns a different number each time, starting at &lt;code&gt;0&lt;/code&gt; and adding &lt;code&gt;1&lt;/code&gt; each time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now imagine someone is using this library. They write a function called &lt;code&gt;counter&lt;/code&gt; just for testing. But when they try to link their code, it fails, telling them that &lt;code&gt;counter&lt;/code&gt; is being redefined. But no worry, We are C programmers and we have &lt;code&gt;static&lt;/code&gt; at our disposal!&lt;/p&gt;

&lt;p&gt;Many believe static to have multiple meanings in C. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static functions are not exported globally&lt;/li&gt;
&lt;li&gt;static local variables are hidden globals&lt;/li&gt;
&lt;li&gt;static global variables are not exported globally
What could have caused this mess of keyword overloading?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The answer lies in a shift of perspective. &lt;strong&gt;&lt;code&gt;static&lt;/code&gt; means compilation unit local&lt;/strong&gt;. A compilation unit in C is just the files given to the c compiler (gcc, clang, msvc, etc) and what they &lt;code&gt;#include&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using this definition we can say the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static functions are owned by the compilation unit&lt;/li&gt;
&lt;li&gt;static global variables are owned by the compilation unit&lt;/li&gt;
&lt;li&gt;static local variables are owned by the compilation unit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using this knowledge, we can rewrite the counter function to not leak &lt;code&gt;counter&lt;/code&gt; into the API. &lt;/p&gt;

&lt;p&gt;First, move &lt;code&gt;current_counter&lt;/code&gt; into a static in &lt;code&gt;counter&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make &lt;code&gt;current_counter&lt;/code&gt; not collide with anything else named current.&lt;/p&gt;

&lt;p&gt;Next is to make &lt;code&gt;counter&lt;/code&gt; a static function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current_counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make &lt;code&gt;counter&lt;/code&gt; not visible to files not in the same compilation unit.&lt;/p&gt;

&lt;p&gt;Now things are fixed! The &lt;code&gt;counter&lt;/code&gt; function and &lt;code&gt;current_counter&lt;/code&gt; variable cannot be used in files not in the same compilation unit. &lt;/p&gt;

&lt;p&gt;I hope this helped someone. &lt;/p&gt;

</description>
      <category>c</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Hacking: Local File Inclusion</title>
      <author>BigCoder</author>
      <pubDate>Thu, 09 Dec 2021 18:00:02 +0000</pubDate>
      <link>https://dev.to/bigcoder/hacking-local-file-inclusion-3m4h</link>
      <guid>https://dev.to/bigcoder/hacking-local-file-inclusion-3m4h</guid>
      <description>&lt;p&gt;&lt;a href="https://www.linux.com/what-is-linux/"&gt;Linux&lt;/a&gt; is a widely popular system for hosting web apps. It's users often think that by using Linux on a server, that it is secure.&lt;/p&gt;

&lt;p&gt;But, just because you use Linux on your server and are good at the &lt;a href="https://bsdnerds.org/what-is-linux-shell/"&gt;shell&lt;/a&gt; commands, does not mean your web app is secure. Sure you may know how to use &lt;a href="https://vim.is"&gt;vim&lt;/a&gt;, but neither that will stop a hacker. &lt;/p&gt;

&lt;p&gt;LFI (or File Inclusion) is a common vulnerability in web appps that provides access to files on the server in question. This allows an attacker to read files and sometimes to create or modify files on the target web server. &lt;/p&gt;

&lt;p&gt;In this article I will explain a vulnerability known as local file inclusion (LFI) and how this hack is carried out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lfi-explained"&gt;
  &lt;/a&gt;
  LFI explained
&lt;/h2&gt;

&lt;p&gt;With many server side programming languages, you can include files. In php that is often done with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;include&lt;/li&gt;
&lt;li&gt;require&lt;/li&gt;
&lt;li&gt;include_once&lt;/li&gt;
&lt;li&gt;require_once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets say a web app has a parameter that lets you specify the file. The web app url can look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://webapp.dev/forum.php?file=myCV.pdf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By changing the url parameter file, the attacker can open different files on the server. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-me-an-example"&gt;
  &lt;/a&gt;
  Give me an example
&lt;/h3&gt;

&lt;p&gt;An attacker might change the url and read different files. These can include system files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;http://webapp.dev/forum.php?file&lt;span class="o"&gt;=&lt;/span&gt;/etc/passwd
http://webapp.dev/forum.php?file&lt;span class="o"&gt;=&lt;/span&gt;../../../../../etc/passwd
http://webapp.dev/forum.php?file&lt;span class="o"&gt;=&lt;/span&gt;/etc/shadow
http://webapp.dev/forum.php?file&lt;span class="o"&gt;=&lt;/span&gt;/etc/issue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what, the attacker can read system files?&lt;/p&gt;

&lt;p&gt;The attacker can get your username from /etc/passwd and your hashed password from /etc/shadow.&lt;/p&gt;

&lt;p&gt;The hashed password can be cracked using &lt;a href="https://crackstation.net/"&gt;crackstation&lt;/a&gt;, giving them full access to the server.&lt;/p&gt;

&lt;p&gt;To prevent this as coder, always check and test user input (especially GET and POST variables)&lt;/p&gt;

&lt;p&gt;The LFI vulnerability can also exist on other operating systems, but they store system files elsewhere.&lt;/p&gt;

&lt;p&gt;To learn more about web hacking, you may like &lt;a href="https://www.udemy.com/course/ethical-hacking-web-app-hacking/"&gt;this course&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>linux</category>
      <category>webdev</category>
      <category>security</category>
    </item>
  </channel>
</rss>
