<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 03 Aug 2021 18:49:25 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4571</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4571</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-analysis"&gt;
  &lt;/a&gt;
  Interview analysis
&lt;/h2&gt;

&lt;p&gt;It's always inspiring when a developer is able to look back on the interviews they've done, scan for lessonns learned, and share them with the world. That's exactly what &lt;a class="mentioned-user" href="https://dev.to/manvityagi9"&gt;@manvityagi9&lt;/a&gt;
 has done here. You have been &lt;em&gt;busy&lt;/em&gt; Manvi! Great work &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/manvityagi9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewveaW80--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uLdJxVB---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/188644/4703152c-867c-4751-8929-d3baff665caa.PNG" alt="manvityagi9"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manvityagi9/my-placements-journey-4m0g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My Placements Journey&lt;/h2&gt;
      &lt;h3&gt;Manvi Tyagi ・ Jul 27 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#interview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#softwaredeveloper&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#faang&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-sleeper-hit-of-javascript"&gt;
  &lt;/a&gt;
  The sleeper hit of JavaScript
&lt;/h2&gt;

&lt;p&gt;This post is a must-read! A humorous and engaging look at &lt;code&gt;with&lt;/code&gt; in JavaScript by &lt;a class="mentioned-user" href="https://dev.to/mistval"&gt;@mistval&lt;/a&gt;
 — who aims to explain why it is "relegated to the dustbin of history". &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mistval" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMGlCR9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--QfmzS_gY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/413348/81e25d08-d557-4f4f-bc83-d704b110b128.jpeg" alt="mistval"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mistval/javascript-s-forgotten-keyword-with-48id" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JavaScript's Forgotten Keyword (with)&lt;/h2&gt;
      &lt;h3&gt;Randall ・ Jul 29 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#who-can-contribute-you"&gt;
  &lt;/a&gt;
  Who can contribute? You!
&lt;/h2&gt;

&lt;p&gt;If you've been wondering if you're the right person to contribute to open source, &lt;a class="mentioned-user" href="https://dev.to/roligautam"&gt;@roligautam&lt;/a&gt;
 can give you a hint ;) &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/roligautam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VqJFfeyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q_4h0tf1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/673278/676eb15a-e234-45b6-94a6-66ad886479c8.jpeg" alt="roligautam"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/roligautam/how-to-make-your-first-contribution-to-open-source-a-beginner-s-guide-2cni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to make your first contribution to Open Source? A Beginner's Guide
&lt;/h2&gt;
      &lt;h3&gt;Roli Gautam ・ Jul 28 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstpost&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#ruby-realness"&gt;
  &lt;/a&gt;
  Ruby realness
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/st0012"&gt;@st0012&lt;/a&gt;
 wrote up this intro to &lt;code&gt;debug&lt;/code&gt;: Ruby's new debugger to be included in Ruby 3.1. If you're as Ruby-obsessed as all of us are here at DEV, this is a great peek inside an exciting new feature. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/st0012" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ejdm9Kv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aFWaIfE7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/238727/9cabf22f-2f6a-44d5-b823-6c8319c288d4.jpg" alt="st0012"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Sneak Peek of Ruby's New Debugger!&lt;/h2&gt;
      &lt;h3&gt;Stan Lo ・ Jul 29 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#debug&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#authorization-and-aws-amplifys-datastore"&gt;
  &lt;/a&gt;
  Authorization and AWS Amplify's DataStore
&lt;/h2&gt;

&lt;p&gt;... with &lt;a class="mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt;
! Alliteration is the &lt;em&gt;least&lt;/em&gt; of the value you'll find in this React API tutorial.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aspittel/build-a-react-app-with-authorization-and-authentication-1mha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a React App with Authorization and Authentication&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel ・ Aug 2 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-list-with-lasting-power"&gt;
  &lt;/a&gt;
  A List with Lasting Power
&lt;/h2&gt;

&lt;p&gt;Great work on your digital accessibility list, &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
. This reference is so thorough and filled with accessibility knowledge/pointers that it was a natural fit this week! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jul 30 ・ 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#two-birds-one-stone"&gt;
  &lt;/a&gt;
  Two birds, one stone
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dhaiwat10"&gt;@dhaiwat10&lt;/a&gt;
 explains how writing and software developing are two skills and habits that feed one another — with the right mindset. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dhaiwat10" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeVnQevl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V60gjbl6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/575046/0d9e4711-677a-4db5-a35d-5c377a8430dd.jpeg" alt="dhaiwat10"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dhaiwat10/become-a-better-writer-as-a-developer-46oc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Become a better writer as a developer&lt;/h2&gt;
      &lt;h3&gt;Dhaiwat Pandya ・ Jul 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Web Performance Optimization- II</title>
      <author>Bipul Sharma</author>
      <pubDate>Tue, 03 Aug 2021 18:18:13 +0000</pubDate>
      <link>https://dev.to/bipul/web-performance-optimization-ii-2799</link>
      <guid>https://dev.to/bipul/web-performance-optimization-ii-2799</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/bipul/web-performance-optimization-i-5d39"&gt;Part-I&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Glossary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shallow depth of feild- very small zones of focus.&lt;/li&gt;
&lt;li&gt;Lossy and Lossless images- lossy has loss in quality and file size on compression while lossless has no loss in quality and results in bigger file size on compression. &lt;/li&gt;
&lt;li&gt;transparency/opacity-  images that is clear and can take the effect of any images behind it&lt;/li&gt;
&lt;li&gt;Render blocking- JS stopping the DOM rendering.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image-optimization"&gt;
  &lt;/a&gt;
  Image Optimization
&lt;/h2&gt;

&lt;p&gt;Images are the leading cause of the slow web. We have two conflicting needs here: we want to post high quality images online, but also want our websites and apps to be performant, and images are the main reason they are not. So how do we solve this conundrum? The answer is with a multi-pronged approach, ranging from &lt;strong&gt;compression&lt;/strong&gt; to careful &lt;strong&gt;selection of image formats&lt;/strong&gt;, to how we &lt;strong&gt;mark up&lt;/strong&gt; and &lt;strong&gt;load&lt;/strong&gt; images in our applications.&lt;/p&gt;

&lt;p&gt;Image performance is all about how much data is contained within an image and how easy it is to compress that data. The more complex the image, the larger the data set necessary to display it and the more difficult it is to compress. &lt;strong&gt;Shallow depth of field means better performance&lt;/strong&gt;. For photography including products, headshots, documentary, and others, a shallower depth of field is preferred. &lt;/p&gt;

&lt;p&gt;If you want to squeeze as much performance as possible out of your images, &lt;strong&gt;reducing the size of each image by 87% percent, and then upscaling it by 115%&lt;/strong&gt;, will actually impact the performance of the image as well. It turns out downscaling a photo by 87% percent, Photoshop will take away pixels and simplify the image to scale it down and reduce the complexity of the image and by upscaling it by 115% percent it preserves image quality well enough that humans can't tell the difference. So we get a image of same size but has significantly less complexity.&lt;/p&gt;

&lt;p&gt;The image format or file type you choose for your images will have a direct impact on performance. On the web we generally use one of five formats JPEG, PNG, GIF, SVG, and webP.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JPG/JPEG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for Photos&lt;/li&gt;
&lt;li&gt;Lossy image with adjustable compression&lt;/li&gt;
&lt;li&gt;High compression means large artifacts(distortion)&lt;/li&gt;
&lt;li&gt;Use for Photos when WebP is not an Option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PNG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for Graphics&lt;/li&gt;
&lt;li&gt;Lossless image format&lt;/li&gt;
&lt;li&gt;Optional transparent alpha layer&lt;/li&gt;
&lt;li&gt;Use for computer generated graphics and transparency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GIF&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for simple lofi gaphics&lt;/li&gt;
&lt;li&gt;Lossy image format&lt;/li&gt;
&lt;li&gt;256 colors&lt;/li&gt;
&lt;li&gt;Can be animated (but dont use them)&lt;/li&gt;
&lt;li&gt;SVG/Video is always a better option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SVG&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for advance scalable graphics&lt;/li&gt;
&lt;li&gt;Written in Markup, can be included in HTML, CSS&lt;/li&gt;
&lt;li&gt;Very small when optimized&lt;/li&gt;
&lt;li&gt;Use for vector-based computer generated graphics and icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;webP&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Meant for web-based photos&lt;/li&gt;
&lt;li&gt;Upto 34% smaller than JPGs&lt;/li&gt;
&lt;li&gt;Not supported in older browsers(fallback required)&lt;/li&gt;
&lt;li&gt;Used for photos and complex detail images (with fallback)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How to choose what to use?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For photos, use webP (with JPG fallback)&lt;/li&gt;
&lt;li&gt;For too complex computer graphics use PNG or JPG (whichever is smaller)&lt;/li&gt;
&lt;li&gt;For graphics with transparency use PNG or webP&lt;/li&gt;
&lt;li&gt;For scalable computer graphics, icons and graphs use SVGs&lt;/li&gt;
&lt;li&gt;Aviod animated GIFs at all cost, use videos instead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mannual Optimizations&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decide on the maximum visible size the image will have in the layout. No image should ever be displayed wider than a full HD monitor, 1920 pixels. Make sure you also restrict the display width of that image to 1920 pixels, and then center align it. Once you've settled on a width for an image, scale your image to fit that size.&lt;/li&gt;
&lt;li&gt;Experiment with compression in webP, JPG &lt;/li&gt;
&lt;li&gt;Simplify SVGs by removing unnecessary points and lines&lt;/li&gt;
&lt;li&gt;Compare file sizes for JPG, webP and PNG for computer graphics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Automated Optimization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/imagemin"&gt;Imagemin&lt;/a&gt; is a good choice. You can use it to build a custom optimization function in Node.js. Or add automated image optimization into your preferred build process. Imagemin CLI provides lossless compression for JPEG, PNGs, and GIFs.&lt;/li&gt;
&lt;li&gt;You can add dedicated lossy compression for each of them using plug-ins: &lt;a href="https://www.npmjs.com/package/imagemin-mozjpeg"&gt;Imagemin-mozjpeg&lt;/a&gt; for JPEGs. &lt;a href="https://www.npmjs.com/package/imagemin-pngquant"&gt;Imagemin-pngquant&lt;/a&gt; for PNGs and &lt;a href="https://www.npmjs.com/package/imagemin-webp"&gt;Imagemin-webp&lt;/a&gt; for webPs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://squoosh.app/"&gt;Squoosh&lt;/a&gt; uses various compression algorithms to optimize images. And it has an &lt;a href="https://www.npmjs.com/package/@squoosh/cli"&gt;experimental CLI&lt;/a&gt; you can use to automate that process.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/sharp"&gt;Sharp&lt;/a&gt; is also available for use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even a fully optimized image can slow down the performance of your site if it's delivered to the wrong browser at the wrong time. This is the problem &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;Responsive Images Markup&lt;/a&gt; is meant to solve. &lt;/p&gt;

&lt;p&gt;We have responsive images attributes: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset"&gt;srcset&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes"&gt;sizes&lt;/a&gt;.&lt;br&gt;
Source sets allows you to provide a list of image sources for the browser to choose from and sizes defines a set of media conditions (e.g. screen widths) and indicates what image size would be best to choose, when certain media conditions are true. W indicates total pixel width of each of these images.&lt;br&gt;
For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnknRYpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a5bo4jq42z2wu9d4vlm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnknRYpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a5bo4jq42z2wu9d4vlm.png" alt="Screenshot (200)"&gt;&lt;/a&gt;&lt;br&gt;
If the viewport of the browser is 800 pixels wide. The browser will pick the 1200 pixel wide image because it is the closest size upwards. If you then choose to scale up the viewport by just scaling up the browser window. The browser will automatically pull down larger versions of the image to fill in the space if it's necessary. But the important thing now is, by carefully planning your image sizes you can now deliver appropriately sized image files to all browsers and all devices. &lt;/p&gt;

&lt;p&gt;But, for most of your images, the actual displayed width of the image is determined using CSS and media queries. And you rarely display all your images as full width in the browser. To address this, we have the sizes attribute. Sizes holds a list of media queries and corresponding width to save.&lt;/p&gt;

&lt;p&gt;For this image, if the viewport is 1200 pixels or wider, the actual width this image will be displayed at will always be 1200 pixels. The reason why I'm still providing the 1920 pixel image here is to provide a higher resolution image to higher resolution displays. The 100 VW at the end of the size of the attribute says, for all other conditions, meaning screen widths under 1200 pixels, the image is always full width because this is a responsive layout.&lt;/p&gt;

&lt;p&gt;This is especially important when you have a design where an image has a max size smaller than the viewport width. Which is almost every single image on the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lazy Loading Images&lt;/strong&gt;&lt;br&gt;
Loading images, videos, and iframes the user never scrolls to has always been a major performance issue on the web. We're simply wasting data that we shouldn't be wasting. To deal with this issue, developers started adding lazy loading JavaScript libraries that would wait for the user to scroll close to an element before the image was loaded by the browser so that instead of loading all the images on a page, only the images the user would actually get to see inside the viewport were loaded by the browser.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbtp88PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yahgqo4wwo0u3uj84rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbtp88PR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yahgqo4wwo0u3uj84rz.png" alt="Screenshot (204)"&gt;&lt;/a&gt; &lt;br&gt;
Native lazy loading is activated using the loading attribute on the element in question. Lazy, meaning the asset is loaded only when it's close to the viewport, and eager, meaning the asset is loaded immediately, even if it's nowhere near the viewport. There's also a fallback here called auto, but it's not yet in the specification.  Now, this loading attribute is also non-destructive, meaning older browsers who do not understand this attribute will simply ignore it and load all the assets as it would normally do. If you want lazy loading support in older browsers as well, you can use a JavaScript solution like &lt;a href="https://www.npmjs.com/package/lazysizes"&gt;lazysizes&lt;/a&gt;, which has an extension plugin called native loading, which serves up the JavaScript solution only to browsers that do not support the loading attribute and the new built in lazy loading feature.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#javascript-optimization"&gt;
  &lt;/a&gt;
  JavaScript Optimization
&lt;/h2&gt;

&lt;p&gt;The code we write is optimized for humans, but if we want the code to be as fast as possible and to be performant, it needs to be rewritten for size and effectiveness, and that makes it unreadable for us humans. We now have tools to do this job for us in the form of code minimizers, packagers, bundlers, and more. At minimum, you'll need a development track where the human readable code is stored and a production track where the highly optimized and compressed machine-readable code is stored.&lt;/p&gt;

&lt;p&gt;How and when we compress, bundle, load, modularize, and execute JavaScript is becoming more and more important to improving performance. The same can be said for CSS. Modular and inline CSS, progressive loading, and other performance techniques are now essential to ensure the style of a site or application doesn't slow down its delivery. &lt;/p&gt;

&lt;p&gt;The modern web platform supports JavaScript modules, separate JavaScript files that export and import objects functions, and other primitives from each other so bundling all JavaScript into one big file, makes no sense on the modern web.&lt;br&gt;
So from a performance perspective heres what should happpen. On initial, load any critical JavaScript necessary to get the app framework up and running and displaying something above the fold should be loaded. Once that's done and the user has something to look at, any necessary JavaScript modules for functionality should be loaded. And from here on out, the browsers should progressively load JavaScript modules only when they become relevant. &lt;br&gt;
JavaScript functionality should be modularized as much as possible and split into dedicated files.&lt;/p&gt;

&lt;p&gt;Several immediate benefits to this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React, uses components. JavaScript modules are the exact same thing. Except they run on the web platform itself and you don't need a bundler to make them work.&lt;/li&gt;
&lt;li&gt;Modularization makes ongoing development easier because it provides clear separation of concerns.&lt;/li&gt;
&lt;li&gt;Modularizing, JavaScript and loading modules only when they are needed, brings significant performance benefits on initial load.&lt;/li&gt;
&lt;li&gt;Modularization means updating some feature in a JavaScript app does not require the browser to download the entire app bundle again. It just needs to download the updated module file with its features, which is way smaller. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When and how the browser loads each JavaScript file it encounters has a significant impact on both performance and functionality. &lt;/p&gt;

&lt;p&gt;If we add JavaScript to the head of an HTML document, it will always load and execute as soon as the browser encounters it, which is always before the body is rendered out. This will always cause render blocking. &lt;/p&gt;

&lt;p&gt;To prevent this blocking JavaScript has been added to the very bottom of the body element, but this too causes render blocking because as soon as the browser encounters a reference to JavaScript, it'll stop doing anything, download the entire script, then execute the script, and then go back to rendering. So basically, entire page will be loaded before the JavaScript is even loaded which just adds to the performance problems.&lt;/p&gt;

&lt;p&gt;We have the &lt;strong&gt;async&lt;/strong&gt; and &lt;strong&gt;defer&lt;/strong&gt; keywords which instruct the browser to either load JavaScript files asynchronously while DOM rendering takes place, and then execute them as soon as they're available, or to load the files asynchronously and defer execution until the DOM rendering is done. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEMMn94S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb1v1lvi522drhwo1jol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEMMn94S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb1v1lvi522drhwo1jol.png" alt="Screenshot (209)"&gt;&lt;/a&gt; &lt;br&gt;
When we add the async tag, the browser will load the JavaScript asynchronously meaning it loads alongside the HTML parsing process. When the script is fully loaded the browser stops the rendering of the HTML until the script is executed and then it continues. Already we're seeing a significant performance enhancement because the parsing isn't paused while the script is being downloaded. &lt;/p&gt;

&lt;p&gt;In JavaScript and other programming languages, a synchronous event means one event happens after another, in a chain. Asynchronous means the events happen independently of one another and one event doesn't have to wait for another to complete before it takes place. &lt;/p&gt;

&lt;p&gt;In the case of async JavaScript loading the loading is asynchronous, while the execution is synchronous.&lt;/p&gt;

&lt;p&gt;Use async anytime you're loading JavaScript and you don't need to wait for the whole DOM to be created first.&lt;/p&gt;

&lt;p&gt;Defer is slightly different. We're still loading the script asynchronously when the browser encounters it without render blocking. And then we literally defer the execution of the JavaScript until the HTML parsing is complete.&lt;/p&gt;

&lt;p&gt;This is effectively the same as placing the script tag at the end of the body element, except the script is loaded asynchronously, and is therefore much better for performance because we don't render out the entire HTML and then go download the JavaScript. The JavaScript is already downloaded. &lt;/p&gt;

&lt;p&gt;Use defer if you need to wait for the whole DOM to be loaded before executing the JavaScript or if the JavaScript can wait. &lt;/p&gt;

&lt;p&gt;So here is your performance focused JavaScript loading best practices.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call JavaScript by placing the script tag in the head&lt;/li&gt;
&lt;li&gt;Anytime you load JavaScript in the head, always put async on there unless you have a reason to use defer.&lt;/li&gt;
&lt;li&gt;Defer any scripts that need the DOM to be fully built or scripts that you can defer because they don't need to execute right away.&lt;/li&gt;
&lt;li&gt; If and only if, you need to support older browsers and you can't allow the browser to wait for things, load your script in the footer the old way and take the performance hit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lazy load JavaScript modules and their associated assets only when they're interacted with and needed using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"&gt;import&lt;/a&gt; statements.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
import("/path/to/import-module.js")&lt;br&gt;
  .then((module) =&amp;gt; {&lt;br&gt;
    // do something with the module&lt;br&gt;
  });&lt;br&gt;
With this you'll not be chaining the events and getting everything to work conditionally on the user's behavior. So you're saving the user a ton of data and only pushing content to the browser when it's needed.&lt;br&gt;
This whole concept can be used with any JavaScript module including external &lt;a href="https://nodejs.org/api/esm.html#esm_introduction"&gt;ESM module&lt;/a&gt;. &lt;br&gt;
To rewrite everything and turn it into highly optimized human unreadable code we can use minifiers and uglifiers. All major bundlers, including webpack, rollup, parcel, etc ship with minifiers built in. The two most popular minifiers are &lt;a href="https://www.npmjs.com/package/@types/uglify-js"&gt;uglify-js&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/terser"&gt;terser&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-optimization"&gt;
  &lt;/a&gt;
  CSS Optimization
&lt;/h2&gt;

&lt;p&gt;The number one measure of perceived performance is how fast something loads in the view port of the browser. For a page to render, all the CSS has to be fully loaded because CSS is a cascade and the rule sets at the bottom of a style sheet may well impact the rules that's higher up. If we serve the browser with a huge style sheet with all the styles for the page, it takes a long time to load that style sheet on this content and the performance suffers. To get around this problem, developers have come up with a clever hack called &lt;strong&gt;critical CSS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, inline any styles impacting the content above the fold(in the viewport) in the HTML document itself as a style tag in the head. Then lazy load and defer the rest of the CSS, using a clever JavaScript trick, so it only loads when the page is fully loaded. &lt;br&gt;
&lt;a href="https://www.npmjs.com/package/critical"&gt;Critical&lt;/a&gt; helps us automate this process so that so you don't have to manually copy and paste code every time you update something.&lt;/p&gt;

&lt;p&gt;Critical reads the HTML and CSS figures out what rule sets should be inlined automatically inlines that CSS into the HTML document, separates out the non-critical CSS into a step separate style sheet and then lazy loads on the first and non-critical CSS. &lt;br&gt;
Because this tool is built into the tool chain, it can be set up to take place at every build, so you don't have to keep tabs on what styles are critical. This tool also has a ton of options, so you can fully customize exactly what happens within the critical CSS, index file or the HTML file, the CSS, the view port you're targeting, all this stuff can be configured.&lt;br&gt;
For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFnq44D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm2e24nfsfbpznibe67e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBFnq44D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm2e24nfsfbpznibe67e.png" alt="Screenshot (212)"&gt;&lt;/a&gt; &lt;br&gt;
Critical actually spin up a browser and then display the contents in the browser in a defined view port size that we've defined. And then look at what CSS is affecting the content inside that view port and split that out into this critical CSS file. The view port in the example is 320 width, 480 height. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgYX5D8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo7l55v50erj7twdfxpc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgYX5D8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo7l55v50erj7twdfxpc.png" alt="Screenshot (213)"&gt;&lt;/a&gt;&lt;br&gt;
The critical inline CSS that will run before the dom's even built. So this will then define the content that's above the fold.&lt;br&gt;
Then below we have our link elements, but the link element now points at uncritical CSS. And you'll notice the media property is set to print. This is the JavaScript trick.&lt;br&gt;
So what happens now is a regular browser will identify itself as screen. For that reason, this style sheet will not be loaded because it's set to only load for print. Meaning when you're actually printing something. Then, on load, which is an event that is triggered when the page is fully loaded, would change this media to all instead. And at that point, once everything else is done, this extra style sheet will be loaded.&lt;/p&gt;

&lt;p&gt;To see how much of your JavaScript and CSS and other code is loaded unnecessarily into the browser, you can use the coverage view in the browser dev tools. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycS1uf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev2qij6fh254i09ayrg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycS1uf_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev2qij6fh254i09ayrg7.png" alt="Screenshot (220)"&gt;&lt;/a&gt; &lt;br&gt;
If you see anything marked in red, here, it's a rule that is not currently being used on the page. This is what Critical does, it runs this type of process and then identifies which rules are being used and which rules are not being used, but in the view port, and then it picks and chooses. &lt;br&gt;
If you have one giant style sheet, you need to compare all of these pages and do a bunch of work.&lt;br&gt;
A better solution would be if we could modularize our CSS and split the CSS into smaller components and then load them only if they are needed. And one way we can do that is by deferring loading of CSS until something happens. Now, you already saw an example of that in Critical. You'll remember when we used Critical, the Critical CSS was in lined and then the rest of the styles were put in this uncritical CSS file and deferred. &lt;/p&gt;

&lt;p&gt;So, here's a different way of doing the same thing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBbY0XHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20a9yruwitjp1i4bb1kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBbY0XHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20a9yruwitjp1i4bb1kq.png" alt="Screenshot (221)"&gt;&lt;/a&gt;&lt;br&gt;
Here we set the rel preload and as style attributes into the link element, to tell the browser to preload this style sheet when there's processing available, meaning the loading is delayed to avoid render blocking. Then the on load attribute fires when the CSS is fully loaded and sets the rel attributes to stylesheet so the browser recognizes it and renders it. But this non script element at the bottom is a fall back for browsers that don't have JavaScript, and in that case, they will just immediately load the style sheet.&lt;br&gt;&lt;br&gt;
We could also:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urAzsvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p7088njjqzt6pns10i6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urAzsvxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7p7088njjqzt6pns10i6.png" alt="Screenshot (222)"&gt;&lt;/a&gt;&lt;br&gt;
This style sheet will not be loaded by the browser at all until the disabled attribute is removed or set defaults. You can then set up a JavaScript function to change the disabled attribute if, and only if, some event occurs like activating a gallery or triggering a JavaScript or triggering some external function and only then will the browser go to the internet pull down the style sheet, and mount it in the browser.   &lt;/p&gt;

&lt;p&gt;Lastly,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wdgWBS88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xauyg8563wb2z8gyjs19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wdgWBS88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xauyg8563wb2z8gyjs19.png" alt="Screenshot (224)"&gt;&lt;/a&gt;&lt;br&gt;
Loading style sheets in body means you can have each component load its own style sheets on the fly. That way the component brings its own styles to the table and you don't have to load any styles you don't need. This makes for much cleaner and more manageable code and it falls in line with modern component-based development practices. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AluraFlix - Configurando padrão do código</title>
      <author>Gabriel Amorim</author>
      <pubDate>Tue, 03 Aug 2021 18:04:36 +0000</pubDate>
      <link>https://dev.to/gabrielamorim1/aluraflix-configurando-padrao-do-codigo-4hc0</link>
      <guid>https://dev.to/gabrielamorim1/aluraflix-configurando-padrao-do-codigo-4hc0</guid>
      <description>&lt;p&gt;Ola, meu nome é Gabriel Amorim e estou escrevendo esse artigo para acompanhar a segunda edição do Alura Challenges. No  &lt;a href="https://dev.to/gabrielamorim1/aluraflix-estruturando-o-projeto-i6c"&gt;último artigo&lt;/a&gt; publicado, eu havia falado que iria tratar sobre padrão de código no projeto e hoje esse será o assunto.&lt;/p&gt;

&lt;p&gt;Para isso utilizaremos 3 ferramentas: eslint, prettier e editorconfig. Caso você utilize o &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; como editor de texto, recomendo instalar as seguintes extensões:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig"&gt;EditorConfig for VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=rvest.vs-code-prettier-eslint"&gt;Prettier ESLint
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#porque-utilizar-ferramentas-de-padroniza%C3%A7%C3%A3o-de-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Porque utilizar ferramentas de padronização de código?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Força que todos os desenvolvedores do projeto utilizem o mesmo padrão, facilitando a leitura do código e ajuda na aplicação de boas práticas.&lt;/li&gt;
&lt;li&gt;Informa problemas no código e muitas vezes os resolvem automaticamente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Existem inúmeras outras vantagens, mas em minha visão essas duas acima são as mais importantes.&lt;/p&gt;

&lt;p&gt;Sem muitas delongas, vamos ao código!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-e-configurando-as-ferramentas"&gt;
  &lt;/a&gt;
  Instalando e configurando as ferramentas
&lt;/h2&gt;

&lt;p&gt;Começamos na raiz do projeto, instalando o eslint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logo após, precisamos iniciá-lo no projeto com o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora serão feitas várias perguntas sobre o padrão que desejado, e aqui vão as minhas respostas, sobre o que eu utilizo no meu dia a dia:&lt;/p&gt;

&lt;p&gt;Como você gostaria de usar o ESLint? Aqui eu escolho a opção para checar a sintaxe, encontrar problemas e forçar estilo do código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? How would you like to use ESLint? … 
  To check syntax only
  To check syntax and find problems
▸ To check syntax, find problems, and enforce code style
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Que tipo de módulos o seu projeto utiliza? Basicamente ele pergunta qual a sintaxe de importação e exportação de módulos. Eu gosto de utilizar import/export.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? What &lt;span class="nb"&gt;type &lt;/span&gt;of modules does your project use? … 
▸ JavaScript modules &lt;span class="o"&gt;(&lt;/span&gt;import/export&lt;span class="o"&gt;)&lt;/span&gt;
  CommonJS &lt;span class="o"&gt;(&lt;/span&gt;require/exports&lt;span class="o"&gt;)&lt;/span&gt;
  None of these
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aqui ele pergunta qual framework o projeto faz uso e como não utilizamos nem Reack nem Vue.js, escolhemos a opção "None of these"(Nenhum desses).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Which framework does your project use? … 
  React
  Vue.js
▸ None of these
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O seu projeto usa TypeScript? Sim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Does your project use TypeScript? ‣ No / Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Onde o seu código irá rodar? Como se trata de uma api, nosso código irá rodar em Node. Atentem-se ao detalhe que aqui o que faz a escolha é apertar a tecla &lt;code&gt;space&lt;/code&gt;(espaço).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Where does your code run? …  &lt;span class="o"&gt;(&lt;/span&gt;Press &amp;lt;space&amp;gt; to &lt;span class="k"&gt;select&lt;/span&gt;, &amp;lt;a&amp;gt; to toggle all, &amp;lt;i&amp;gt; to invert selection&lt;span class="o"&gt;)&lt;/span&gt;
✔ Browser
✔ Node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como você gostaria de definir o estilo para o seu projeto? Aqui vamos escolher "Usar um guia de estilo popular".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? How would you like to define a style &lt;span class="k"&gt;for &lt;/span&gt;your project? … 
▸ Use a popular style guide
  Answer questions about your style
  Inspect your JavaScript file&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Qual guia de estilo você quer seguir? Escolhemos "Airbnb: &lt;a href="https://github.com/airbnb/javascript"&gt;https://github.com/airbnb/javascript&lt;/a&gt;".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Which style guide &lt;span class="k"&gt;do &lt;/span&gt;you want to follow? … 
▸ Airbnb: https://github.com/airbnb/javascript
  Standard: https://github.com/standard/standard
  Google: https://github.com/google/eslint-config-google
  XO: https://github.com/xojs/eslint-config-xo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em qual formato (extensão) você quer que o arquivo de configuração esteja? Escolhemos "JSON".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? What format &lt;span class="k"&gt;do &lt;/span&gt;you want your config file to be &lt;span class="k"&gt;in&lt;/span&gt;? … 
  JavaScript
  YAML
▸ JSON
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por fim, somos perguntados se queremos instalar os plugins com o npm, escolheremos a opção "Yes", e caso você esteja utilizando yarn como eu, espere a instalação terminar, apague o arquivo &lt;code&gt;package-lock.json&lt;/code&gt; e rode o comando &lt;code&gt;yarn&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Would you like to &lt;span class="nb"&gt;install &lt;/span&gt;them now with npm? ‣ No / Yes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso será gerado um arquivo &lt;code&gt;.eslintrc.json&lt;/code&gt; com o seguinte conteúdo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"es2021"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"airbnb-base"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"sourceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após configurado o eslint, vamos para a instalação do prettier e seus plugins do eslint (lembrando que estão em dependências de desenvolvimento pois elas não são necessárias para rodar o código):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add prettier eslint-config-prettier eslint-plugin-prettier &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crie um arquivo chamado &lt;code&gt;.prettierrc.json&lt;/code&gt;, com o seguinte conteúdo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"avoid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"endOfLine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tabWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"semi"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para explicar o que cada um aqui significa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;singleQuote&lt;/strong&gt;: Utilização de aspas simples (true).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;trailingComma&lt;/strong&gt;: Sempre utilizar vírgula ao final da linha (all).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;arrowParens&lt;/strong&gt;: Evitar parênteses em argumentos de função de seta (arrow functions).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;endOfLine&lt;/strong&gt;: Inserir uma linha em branco ao final do arquivo.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;useTabs&lt;/strong&gt;: Não identar as linhas com tabs em vez de espaços (ou seja, utilizamos espaços para identação).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tabWidth&lt;/strong&gt;: Número de espaços por nível de identação.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;semi&lt;/strong&gt;: Utilizar ponto e vírgula ao final das declarações.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;printWidth&lt;/strong&gt;: Tamanho da linha para ocorrer a quebra de linha.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para que essas configurações sejam utilizadas, precisamos utilizar algumas opções no &lt;code&gt;.eslintrc.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"es2021"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"airbnb-base"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"plugin:@typescript-eslint/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint/parser"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ecmaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"sourceType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"@typescript-eslint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"prettier"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"prettier/prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso falta apenas configurar o editorconfig. Caso você tenha instalado a extensão no VSCode é possível clicar com o botão direito do mouse na raiz do projeto e selecionar a opção "Generate .editorconfig". Mas é possível criar esse arquivo manualmente, basta criá-lo com o nome &lt;code&gt;.editorconfig&lt;/code&gt;. Ele será gerado com essas configurações:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = false
insert_final_newline = false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vamos mudar apenas algumas configurações e deixá-lo assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root = true

[*]
indent_style = space
indent_size = 4
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso terminamos a configuração do estilo de código, novas configurações podem precisar de serem adicionadas ao longo do desenvolvimento da aplicação então recomendo dar uma lida na documentação do &lt;a href="https://eslint.org/"&gt;eslint&lt;/a&gt; que pode ajudar bastante. Muito obrigado pela leitura até aqui, nos vemos no próximo artigo!&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>eslint</category>
      <category>prettier</category>
    </item>
    <item>
      <title>Angular CLI - request deprecated error (Solution)</title>
      <author>ashad nasim</author>
      <pubDate>Tue, 03 Aug 2021 17:56:50 +0000</pubDate>
      <link>https://dev.to/ashadnasim52/angular-cli-request-deprecated-error-solution-1oam</link>
      <guid>https://dev.to/ashadnasim52/angular-cli-request-deprecated-error-solution-1oam</guid>
      <description>&lt;p&gt;Try this below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm cache verify

$ npm cache clean --force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then try again to install the angular CLI&lt;/p&gt;

&lt;p&gt;If you still get the error then install yarn package manager. &lt;/p&gt;

&lt;p&gt;Install yarn by running this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$  npm install -g yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then configure angular cli to use yarn package manager, by running this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ng config -g cli.packageManager yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>angular</category>
      <category>angularcli</category>
      <category>requestdeprecated</category>
      <category>yarn</category>
    </item>
    <item>
      <title>Writing Go with Github Copilot</title>
      <author>Tarek Ali</author>
      <pubDate>Tue, 03 Aug 2021 17:19:06 +0000</pubDate>
      <link>https://dev.to/tarekali/writing-go-with-github-copilot-2hpj</link>
      <guid>https://dev.to/tarekali/writing-go-with-github-copilot-2hpj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I've been using Github Copilot a lot recently. In fact, my latest project, &lt;a href="https://github.com/DGKSK8LIFE/redisql"&gt;redisql&lt;/a&gt;, was written partially with suggested code snippets. In this post, I'll illustrate its power with various examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;We'll start with simple arithmetic, then advance to web servers and SQL transactions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#math"&gt;
  &lt;/a&gt;
  Math
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Write a function that returns the square of the number.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for something more advanced:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Write a function that multiples two two-dimensional arrays together and returns the result.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Write an http server which returns 'hello world' for any request.&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point I attempted requesting html rendering with user data. Needless to say, copilot crushed it, even commenting in instructions on how to run the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Write an http web server that returns an html header that shows the user's IP address and the time.&lt;/span&gt;
&lt;span class="c"&gt;// Usage:&lt;/span&gt;
&lt;span class="c"&gt;// go run examples/web/httpserverwithhtml.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":8080"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"text/html; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Your IP is %s. The time is %s&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RemoteAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RFC1123&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I attempted requesting something even more advanced: a WebSocket server that echoes whatever is sent to it with HTML input. Sadly, copilot couldn't handle this task, and suggested incomplete code. Over time, with more training, this may be possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql"&gt;
  &lt;/a&gt;
  SQL
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Write a program that opens a MySQL server connection and executes a query on a user table and prints the results.&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"database/sql"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="s"&gt;"github.com/go-sql-driver/mysql"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Open a connection to the MySQL server&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mysql"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"user:password@tcp(127.0.0.1:3306)/test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Execute a query&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM user"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Loop through the rows and print the results&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Copilot is extremely helpful. The snippets are only basic examples of its capacity, I am actively posting more in &lt;a href="https://github.com/DGKSK8LIFE/go-copilot"&gt;go-copilot&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>github</category>
      <category>go</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Redirecting GitHub Pages</title>
      <author>Christian Heilmann</author>
      <pubDate>Tue, 03 Aug 2021 17:14:50 +0000</pubDate>
      <link>https://dev.to/codepo8/redirecting-github-pages-gph</link>
      <guid>https://dev.to/codepo8/redirecting-github-pages-gph</guid>
      <description>&lt;p&gt;Today I finished moving the &lt;a href="https://aka.ms/devtools-for-code"&gt;Edge Tools for VS Code extension&lt;/a&gt; documentation to its &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension"&gt;official space in the Microsoft docs&lt;/a&gt;. That meant I needed to redirect the documentation I hosted with GitHub pages in a docs folder/branch of the &lt;a href="https://github.com/microsoft/vscode-edge-devtools"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are plugins available for that, but I didn't want to install any extra features on the repository, so I chose a simpler approach. &lt;/p&gt;

&lt;p&gt;You can define HTML templates for your GitHub pages in a folder called &lt;code&gt;_layouts&lt;/code&gt; and connect them using the Markdown frontmatter. So if you create a file called &lt;code&gt;test.md&lt;/code&gt; you can define a template called &lt;code&gt;forward&lt;/code&gt;. You can also add a &lt;code&gt;target&lt;/code&gt; to redirect to, in this case &lt;code&gt;https://example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;test.md:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;--------&lt;/span&gt;
layout: forward
&lt;span class="gh"&gt;target: https://example.com
--------
&lt;/span&gt;... rest of your markdown ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;forward.html&lt;/code&gt; template in the &lt;code&gt;_layouts&lt;/code&gt; folder can use a meta redirect to the target. In its most basic form this can be:&lt;/p&gt;

&lt;p&gt;forward.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0;url={{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Redirecting&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Document has moved, if you aren't automatically redirected 
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ page.target }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;go here&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means that if someone goes to the test document in your GitHub pages, they will get redirected to example.com&lt;/p&gt;

&lt;p&gt;You can see this in action &lt;a href="https://github.com/codepo8/github-redirection-demo/"&gt;in this GitHub demo repo&lt;/a&gt; I quickly put together. I've added quite a few more options to redirect, such as definition of the time and displaying different titles and text. You can read it all and &lt;a href="https://codepo8.github.io/github-redirection-demo/"&gt;try out the demos in the README&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>jekyll</category>
      <category>redirection</category>
    </item>
    <item>
      <title>Important Algorithm Concepts | Algorithm Stability, In-place Algorithms, and Comparison Algorithms</title>
      <author>Danny Adams</author>
      <pubDate>Tue, 03 Aug 2021 16:38:59 +0000</pubDate>
      <link>https://dev.to/doabledanny/important-algorithm-concepts-algorithm-stability-in-place-algorithms-and-comparison-algorithms-11ac</link>
      <guid>https://dev.to/doabledanny/important-algorithm-concepts-algorithm-stability-in-place-algorithms-and-comparison-algorithms-11ac</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/algorithm-concepts"&gt;DoableDanny.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss some important properties of algorithms that can help you to decide which algorithm is best suited to the job.&lt;/p&gt;

&lt;p&gt;In this article we will define and discuss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Algorithm stability&lt;/li&gt;
&lt;li&gt;In-place and out-of-place algorithms&lt;/li&gt;
&lt;li&gt;Comparison and non-comparison sorts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t worry if you’ve never heard these terms before, I’ll explain them fully as we go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-stability-in-sorting-algorithms-and-why-is-it-important"&gt;
  &lt;/a&gt;
  What is stability in sorting algorithms and why is it important?
&lt;/h2&gt;

&lt;p&gt;Stable means that two elements with equal values will appear in the same order in the sorted output as they appear in the unsorted input array.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to sort:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Cherries“, “Blackberries”, “Apples”, “Bananas”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;into alphabetical order by first letter, with a stable sorting algorithm, the output would be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Apples”, “Blackberries”, “Bananas”, “Cherries”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, “Blackberries” and “Bananas” remained in the same relative positions in the input and output array because the algorithm is stable.&lt;br&gt;
Stable sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bubble Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Radix Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the algorithm was unstable, then “Bananas” and “Blackberries” may be interchanged (&lt;code&gt;[“Apples”, “Bananas”, “Blackberries”, “Cherries”]&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Unstable sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Heap Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why is it important to know if an algorithm is stable?&lt;/p&gt;

&lt;p&gt;Suppose we have an array of first and last names and we needed to sort by first name, then by last name, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Danny Adams”, “Bill Gates”, “Dan Jenkins”, “Dylan Grub”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, we could sort by first name using either a stable or unstable algorithm because we don’t need to preserve relative positions. Let’s say we use an unstable sorting algorithm, and we get back:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[“Bill Gates”, “Dylan Grub”, “Dan Jenkins”, “Danny Adams”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The array is now in order by first name – great. But now we need to be careful: the relative positions need to be respected when we sort by last name; we don’t want “Bill Gates” to get swapped with “Dylan Grub” – this could happen if we used an unstable sorting algorithm.&lt;/p&gt;

&lt;p&gt;Using a stable algorithm to sort by last name, we’d safely end up with:&lt;br&gt;
&lt;code&gt;[“Bill Gates”, “Danny Adams”, “Dylan Grub”, “Dan Jenkins”]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Happy days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-inplace-sorting-algorithm"&gt;
  &lt;/a&gt;
  What is an In-place sorting algorithm?
&lt;/h2&gt;

&lt;p&gt;An in-place sorting algorithm is an algorithm which transforms input using no auxiliary data structure; however, a small amount of extra storage space is allowed for auxiliary variables.&lt;/p&gt;

&lt;p&gt;In simple terms, “in-place” just means that the input is overwritten (via swapping or replacement) by the output as the algorithm executes.&lt;/p&gt;

&lt;p&gt;The advantage of in-place algorithms is that they take up less space in memory. The input is overwritten, and so no extra data structures are required; this doesn’t include constant time variables, which will never take up much space, such as the i in for-loops.&lt;/p&gt;

&lt;p&gt;In-place algorithms have constant space complexity. Out-of-place algorithms have greater than constant space complexity, e.g.: linear time or quadratic time.&lt;/p&gt;

&lt;p&gt;In-place algorithms: Bubble Sort, Selection Sort, Insertion Sort, Heap Sort.&lt;/p&gt;

&lt;p&gt;Out-of-place: Merge Sort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-comparison-algorithm"&gt;
  &lt;/a&gt;
  What is a comparison algorithm?
&lt;/h2&gt;

&lt;p&gt;A comparison sorting algorithm is an algorithm that only reads the list of elements through a single abstract comparison operation (usually a “less than” or “equal to”) that determines which of the two elements should occur first in the final sorted output array.&lt;/p&gt;

&lt;p&gt;Comparison sorting algorithms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bubble Sort&lt;/li&gt;
&lt;li&gt;Selection Sort&lt;/li&gt;
&lt;li&gt;Insertion Sort&lt;/li&gt;
&lt;li&gt;Merge Sort&lt;/li&gt;
&lt;li&gt;Quick Sort&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example of a non-comparison-type sorting algorithm would be Radix Sort. It avoids comparison by creating and distributing elements into buckets according to their radix. Radix Sort exploits the face that information about the size of a number is encoded in the number of digits; more digits equals a bigger number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-want-to-master-algorithms"&gt;
  &lt;/a&gt;
  If you Want to Master Algorithms...
&lt;/h2&gt;

&lt;p&gt;If you want to further your knowledge of algorithms and data structures, check out: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;. It’s the best Udemy course I’ve ever taken 👌.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, you can say thanks by subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt; or signing up to &lt;a href="https://www.doabledanny.com/blog/"&gt;my blog&lt;/a&gt; to be notified of new posts 🙏&lt;/p&gt;

&lt;p&gt;Also, feel free to connect with me on &lt;a href="https://twitter.com/DoableDanny"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>SOLID: Dependency Inversion Principle</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Tue, 03 Aug 2021 16:35:50 +0000</pubDate>
      <link>https://dev.to/victorpinzon1988eng/solid-dependency-inversion-principle-5f8m</link>
      <guid>https://dev.to/victorpinzon1988eng/solid-dependency-inversion-principle-5f8m</guid>
      <description>&lt;p&gt;This is the last article about the SOLID principles and in my opinion the most important one. Dependency Inversion is the foundation for one of the most useful features implemented by so many frameworks nowadays, which is Dependency Injection. This SOLID principle gives your architecture the necessary flexibility to achieve separation of concerns between layers and it's a concept that every developer should know. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Robert C. Martin defines DI as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A. High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;br&gt;
B. Abstractions should not depend upon details. Details should depend on abstractions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#high-and-lowlevel-modules"&gt;
  &lt;/a&gt;
  High and Low-level modules:
&lt;/h2&gt;

&lt;p&gt;To fully understand the dependency inversion principle, we should first understand the concept of high and low-level modules. &lt;/p&gt;

&lt;p&gt;A software module is a coding unit that contains one or more routines. Regularly a module has just one responsibility in the whole system. You build a system using multiple modules, which can be grouped in different layers.  Let's have a graphic example of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75l_rRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfy3ksx5f6u3u52aw0lm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75l_rRtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfy3ksx5f6u3u52aw0lm.jpeg" alt="Calculator System Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, there are five different modules, we have the Calculator module, as well as the Add, Subtract, Multiply and Divide module. &lt;/p&gt;

&lt;p&gt;When we talk about high-level modules, we're talking about modules that are directly used or instantiated by the presentation layer. In our example, there is just one high-level module which is the Calculator class. Low-level modules, on the other hand, help the high-level modules to accomplish their work, typically we refer to these modules as dependencies. In our example, the low-level modules are the Add, Subtract, Multiply, and Divide classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies-and-coupling"&gt;
  &lt;/a&gt;
  Dependencies and Coupling
&lt;/h2&gt;

&lt;p&gt;As mentioned in the previous paragraph, dependencies are established when a module uses another module to complete its work. For instance, the Calculator module needs the Add module to achieve its goal, so a dependency is established.&lt;/p&gt;

&lt;p&gt;Coupling is the degree of interdependence between two modules, it's a measure of how closely connected they are. When this connection is strong and we cannot change one part of the dependency without affecting the other part, we say there is a tight coupling. On the other hand, if we can change one part of the dependency without affecting the other part, we say there is a loose coupling.&lt;/p&gt;

&lt;p&gt;We should always avoid tight coupling because it violates the Open/Closed Principle by not allowing to modify one side of the dependency without affecting the other one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  Applying The Dependency Inversion Principle
&lt;/h2&gt;

&lt;p&gt;There is one fundamental flaw with the Calculator System design, there is a tight coupling between Calculator and the rest of the low-level modules. We cannot modify any of the operation modules without modifying the Calculator module. Additionally, if we want to add another operation, square root, for example, we also have to modify the Calculator class which violates the Open/Closed Principle. So, how do we fix this design issue? Easy, applying the Dependency Inversion Principle.&lt;/p&gt;

&lt;p&gt;The first segment of our principle says "High-level modules should not depend on low-level modules. Both should depend on abstractions". In our current design, the Calculator module depends on the Add, Subtract, Divide and Multiply module. To comply with the DI, we must define an abstraction named "CalculatorOperation". Both, high and low-level modules will depend on this abstraction.&lt;/p&gt;

&lt;p&gt;The second segment of the DIP principle says "Abstractions should not depend upon on details. Details should depend on abstractions". To accomplish this rule, we must define the abstraction as an interface (abstraction), not as a class (detail).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e6uxFkyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56xle6db4bhlr5hdonqz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6uxFkyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56xle6db4bhlr5hdonqz.jpeg" alt="Calculator System Design with Dependency Inversion Applied"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now there is loose coupling between the Calculator module and the Operations modules. Now you can change one side of the dependency without affecting the other side. You can also add more operations, as long as they implement the Operation abstraction, without affecting the Calculator module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-example"&gt;
  &lt;/a&gt;
  Coding example
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bad-design"&gt;
  &lt;/a&gt;
  Bad Design
&lt;/h4&gt;

&lt;p&gt;Each calculator operation is represented as a low-level module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Adds two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Subtracts two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;subtract&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Multiplies two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Divides two numbers.
     * @param numA          First number.
     * @param numB          Second number.
     * @return              Result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;divide&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The violation of the Dependency Inversion Principle is noticeable in the Calculator class. If we want to add a new calculator operation, we must modify the Calculator class, which violates the Open/Closed principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;ADD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SUBTRACT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MULTIPLY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DIVIDE&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;


    &lt;span class="cm"&gt;/**
     * Performs a two numbers operation.
     * @param numA              First number.
     * @param numB              Second number.
     * @param operation         Type of operation.
     * @return                  Operation's result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Operation&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;ADD:&lt;/span&gt;
                &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="n"&gt;addOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SUBTRACT:&lt;/span&gt;
                &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="n"&gt;subOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subtract&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;MULTIPLY:&lt;/span&gt;
                &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="n"&gt;multOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;DIVIDE:&lt;/span&gt;
                &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="n"&gt;divOp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;divOp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;divide&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To solve this issue and comply with the DIP and OCP, we must add an abstraction and modify the dependencies, so both, high and low-level modules depend on the abstraction.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-design"&gt;
  &lt;/a&gt;
  Good Design
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubtractOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MultiplyOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;  
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DivideOperation&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbA&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the Calculator class complies with the Dependency Inversion Principle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Performs a two numbers operation.
     * @param numA              First number.
     * @param numB              Second number.
     * @param operation         Type of operation.
     * @return                  Operation's result.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numA&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calculate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numB&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;We've gone through the five SOLID principles, you've seen the benefits and disadvantages of each one. Remember that SOLID principles were thought to help you achieve flexibility, readability, and reusability. Some of these principles are the cornerstone of multiple frameworks and architectures and you will benefit from implementing them. But, also remember that excessive or incorrect use of these principles will overcomplicate your code. You must evaluate each use case and decide which is best for your solution.&lt;/p&gt;

&lt;p&gt;If you like to read more about DIP, you can have a look at &lt;a href="https://martinfowler.com/articles/dipInTheWild.html"&gt;Martin Fowler’s Blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>oop</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Python Functions.</title>
      <author>Acar Emmanuel</author>
      <pubDate>Tue, 03 Aug 2021 16:28:12 +0000</pubDate>
      <link>https://dev.to/manuel_a/python-functions-4bg9</link>
      <guid>https://dev.to/manuel_a/python-functions-4bg9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function?
&lt;/h2&gt;

&lt;p&gt;Simply put, a function in general terms is a sequence of statements that performs a computation. When you define a function , you give it a name followed by these sequence of statements.&lt;br&gt;
Later on, you &lt;em&gt;call&lt;/em&gt; the function by the defined name to perform what it was assigned to do.&lt;br&gt;
If you have worked with python before you have probably worked with a function already! Chances are high that you did not know it even , take an example when you are trying to find the type of a value,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="c1"&gt;# Output is &amp;lt;class 'int'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tada! Easy right? Right there was among the functions you used along the way. It is one of many inbuilt functions that come along with python.&lt;br&gt;
The name of the function right there is &lt;em&gt;type&lt;/em&gt; and the expression in the parenthesis is called the argument of the function. An argument is a value that we pass into the function as an input and in this case the result of the &lt;em&gt;type&lt;/em&gt; function is the type of the argument - an integer.&lt;br&gt;
Briefly the main take away is that a function takes an argument and returns a return value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-take-a-dive-into-inbuilt-functions"&gt;
  &lt;/a&gt;
  Let's take a dive into in-built functions;
&lt;/h2&gt;

&lt;p&gt;Python comes bundled with a lot of in- built functions. We will only look at a few of them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The max and min function. These return the largest and smallest value respectively.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;        &lt;span class="n"&gt;numbers&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;78&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# returns 78
&lt;/span&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# returns 0
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Type conversion function.
These take values of one type and convert them to the type specified by that particular function but of course only when it can. Otherwise, an error is returned. 
Let's visualize it;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'32'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;#returns 32
&lt;/span&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
       &lt;span class="s"&gt;""" Returns value error. ValueError: 
          invalid literal for int() with base 10: 'Hello' """&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.455966696&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns 3
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;#returns 32.0
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3.14159'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#returns 3.14159
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns '40'
&lt;/span&gt;      &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;23.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns '23.9'
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Random numbers.
These are used to avoid a deterministic approach to things for example when designing a game you probably would not want your users to guess the next move so why not make them random. Not only that, how about the issue of security and privacy? Imagine a One Time Pin(OTP) or internet banking password that can be easily guessed because it follows a certain known pattern , why not do it the random way using python's inbuilt random function.
For example when you want to generate 10 random numbers,check below.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="c1"&gt;# returns 10 random numbers.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The random function returns  a float betwen 0.00 and 1.00(including 0.00 but not 1.00).&lt;br&gt;
Each time you run the above function a different set of 10 random numbers are generated as values of x.&lt;br&gt;
Other functions that handle random numbers are &lt;em&gt;randint&lt;/em&gt; and &lt;em&gt;choice&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns any number from 5 to 9
&lt;/span&gt;     &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#returns any value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Math function.
There are set of in built functions in python that simplifies mathematical computations.
We import the math library to be able to use these functions e.g. sqrt,log,sin,tan.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;radians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;360.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;
   &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#userdefined-functions"&gt;
  &lt;/a&gt;
  User-defined functions.
&lt;/h2&gt;

&lt;p&gt;You most likely have been waiting for this one. On top of Python's in-built functions. We can as well create our own functions.&lt;br&gt;
To do this we use the &lt;strong&gt;def&lt;/strong&gt; keyword followed by the function  name and parameters if any.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="c1"&gt;#defining a function in python
&lt;/span&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#may or may not have 
&lt;/span&gt;                                   &lt;span class="c1"&gt;#parameters
&lt;/span&gt;         &lt;span class="c1"&gt;# function statements here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take an example of a function that prints the name of movies and takes no parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movie_titles&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Coming 2 America"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Out of Death"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"War room"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="n"&gt;movie_title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# function call
&lt;/span&gt;
    &lt;span class="c1"&gt;#Output is the movie titles above
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See also an example of a function that takes parameters. This one counts the number of items in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="nb"&gt;list&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;count_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;

   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The number of items in the list is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;count_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arguments-and-parameters"&gt;
  &lt;/a&gt;
  Arguments and parameters.
&lt;/h2&gt;

&lt;p&gt;Parameters are the variables that are defined during function declaration. They are found inside the the parenthesis.&lt;br&gt;
On the other hand, arguments are the actual values that are assigned to the parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;added&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 8. 5 and 3 are the arguments of the function.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fruitful-and-void-functions"&gt;
  &lt;/a&gt;
  Fruitful and void functions.
&lt;/h2&gt;

&lt;p&gt;"Fruitful" functions are those that have a return value. For example the above function which adds two numbers. When you assign it to &lt;em&gt;x&lt;/em&gt; we get a return value of 8.&lt;br&gt;
On the other hand, void functions are those that gives an output but do not have a return value.This is demonstrated by the previous example that was printing movie titles. When we assign the &lt;em&gt;movie_list()&lt;/em&gt; function to let's say &lt;em&gt;movies&lt;/em&gt; we get None simply because there is no return value.&lt;/p&gt;

&lt;p&gt;That's the end of today's article  I hope you learnt something.&lt;/p&gt;

</description>
      <category>python</category>
      <category>functions</category>
      <category>procedural</category>
      <category>programming</category>
    </item>
    <item>
      <title>Install matplotlib In A Docker Container</title>
      <author>Adam Gordon Bell</author>
      <pubDate>Tue, 03 Aug 2021 16:26:09 +0000</pubDate>
      <link>https://dev.to/adamgordonbell/install-matplotlib-in-a-docker-container-51b1</link>
      <guid>https://dev.to/adamgordonbell/install-matplotlib-in-a-docker-container-51b1</guid>
      <description>&lt;p&gt;&lt;code&gt;matplotlib&lt;/code&gt; is an excellent library for creating graphs and visualizations in Python. For example, I used it to generate the performance graphs in &lt;a href="https://dev.to/blog/python-timsort-merge"&gt;my merging article&lt;/a&gt;, and internally, we use it now and again for visualizing any metrics we produce. It is a bit hard to install inside a docker container, though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-matplotlib-in-alpine-linux"&gt;
  &lt;/a&gt;
  Installing Matplotlib in Alpine Linux
&lt;/h2&gt;

&lt;p&gt;On Alpine, or an Alpine-based docker image, it's &lt;em&gt;possible&lt;/em&gt; to install &lt;code&gt;matplotlib&lt;/code&gt;; however it will involve compiling it from source as pip does not provide any pre-compiled binaries -- this will take quite a bit of time. If you don't mind compiling from source, you will need to have its dependencies in place to make this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt; FROM python:3.6-alpine
 RUN apk add g++ jpeg-dev zlib-dev libjpeg make
 RUN pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-matplotlib-in-ubuntu"&gt;
  &lt;/a&gt;
  Installing Matplotlib in Ubuntu
&lt;/h2&gt;

&lt;p&gt;On Ubuntu, or a Ubuntu-based docker image, the process is much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt; FROM ubuntu:20.10
 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 python3-pip
 RUN pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In either case, after you've installed it, you can quickly generate great graphs and visualizations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.interpolate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;splprep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;splev&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.patches&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PathPatch&lt;/span&gt;

&lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Y value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'1.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPVotpAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/python-matplotlib-docker/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPVotpAj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://earthly.dev/blog/assets/images/python-matplotlib-docker/1.png" alt="Simple Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appendix-alpine-vs-ubuntu-pip-install"&gt;
  &lt;/a&gt;
  Appendix: Alpine vs Ubuntu Pip Install
&lt;/h2&gt;

&lt;p&gt;Why is the Ubuntu process fast and simple and the Alpine process slow? The reason is &lt;code&gt;glibc&lt;/code&gt;. The pip wheels for &lt;code&gt;matplotlib&lt;/code&gt; are compiled c/c++ programs that dynamically link to &lt;code&gt;glibc&lt;/code&gt; and Alpine does not have &lt;code&gt;glibc&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Alpine tries to stay small and so uses &lt;code&gt;musl-libc&lt;/code&gt; instead. Unfortunately, this means compiling from source on Alpine, which can be a lengthy process.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/49037742/why-does-it-take-ages-to-install-pandas-on-alpine-linux/58210701#58210701"&gt;ThisGuyCantEven&lt;/a&gt; on Stack Overflow has more details:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pip looks first for a wheel with the correct binaries, if it can't find one, it tries to compile the binaries from the c/c++ source and links them against &lt;code&gt;musl&lt;/code&gt;. In many cases, this won't even work unless you have the python headers from python3-dev or build tools like make.&lt;/p&gt;

&lt;p&gt;Now the silver lining, as others have mentioned, there are &lt;code&gt;apk&lt;/code&gt; packages with the proper binaries provided by the community, using these will save you the (sometimes lengthy) process of building the binaries.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>linux</category>
    </item>
    <item>
      <title>Study Notes for Kent C. Dodds' Javascript Testing Course</title>
      <author>Annie Taylor Chen</author>
      <pubDate>Tue, 03 Aug 2021 16:19:13 +0000</pubDate>
      <link>https://dev.to/annietaylorchen/study-notes-for-kent-c-dodds-javascript-testing-course-43n3</link>
      <guid>https://dev.to/annietaylorchen/study-notes-for-kent-c-dodds-javascript-testing-course-43n3</guid>
      <description>&lt;p&gt;This is a mini guide for developers who are new to testing. The lessons are mainly learnt from Kent C. Dodds' &lt;a href="https://testingjavascript.com/"&gt;Javascript Testing course&lt;/a&gt;. Kent C. Dodds is the library author for &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt;, which is the official recommendation for Create React App.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-testing-strategies-for-frontend-apps"&gt;
  &lt;/a&gt;
  General testing strategies for frontend apps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Static test/format - Eslint and Prettier&lt;br&gt;
To  eliminate type errors and make code looks easy to read and formatted consistently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unit test - Jest + React testing library&lt;br&gt;
Test individual key-components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integration and Snapshot tests - Jest + MSW&lt;br&gt;
Render the login pages with different responses from the metadata endpoint and see that buttons and forms are created properly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;End to End (e2e) test - Cypress + BrowserStack&lt;br&gt;
Implement cypress tests that run our login flow. Run the tests with BrowserStack to get coverage in different browsers. Integrate to GitHub to require approval before release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Acceptance tests/Visual Regression Test - Percy from BrowserStack (without AI) or Applitools (with AI)&lt;br&gt;
Get screenshots from different brands&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Synthetic tests and monitoring - Datadog&lt;br&gt;
Implement synthetic tests in Datadog that runs our authentication flows from different locations. Add real user monitoring in Datadog&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#notes-from-the-course"&gt;
  &lt;/a&gt;
  Notes from the course:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#0-tests-types-configuration"&gt;
  &lt;/a&gt;
  0. Tests types, configuration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are unit, static, integration and e2e tests?&lt;br&gt;
The explanation and code samples here:&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests"&gt;https://kentcdodds.com/blog/unit-vs-integration-vs-e2e-tests&lt;/a&gt;&lt;br&gt;
this post also talks about different levels of tests and the pitfalls. The more tests you have, the higher the trophy you get at, the slower the tests will run (because of too many tests) and more money it will cost. Manual testing can always be expensive. Use strategies that suit your business needs and budget.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I use Node debugger and Chrome dev tool while running my tests?&lt;br&gt;
Add a debugger in your code where you want to pause.&lt;br&gt;
Add a script like this&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;"test:debug": "node --inspect-brk ./node_modules/jest/bin/jest.js --runInBand --watch"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It means we are using node’s inspect break, it would mean node will stop process, and we pass the jest binary to node, since jest will run all the tests in parallel, we want to use “runInBand” to run it one by one.&lt;br&gt;
 Then go to “chrome://inspect” in your chrome browser, and you will see the the inspect appearing in “Remote Target” section. Click on the “Inspect”, you will have a browser pop up where you can check call stacks etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-static"&gt;
  &lt;/a&gt;
  1. Static
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to configure Eslint and Prettier?&lt;br&gt;
In the eslintrc files, the rules can be found on &lt;a href="https://eslint.org/docs/user-guide/configuring"&gt;https://eslint.org/docs/user-guide/configuring&lt;/a&gt;&lt;br&gt;
In the prettierrc, the rules for formatting can be found on &lt;a href="https://prettier.io/playground/"&gt;https://prettier.io/playground/&lt;/a&gt;, click the “show options” in the bottom left, then copy the config JSON.&lt;br&gt;
It is also recommended to use the extensions within your VSCode IDE so you can see errors while you code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do those ignore files such as eslintignore do?&lt;br&gt;
So the linter won’t check errors for the files listed here. For instance, if you run build we will have a dist folder, and we don’t want the linter to check for errors here.&lt;br&gt;
You can configure it in package json like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;”lint”: “eslint --ignore-path .gitignore . “&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It means when you run npm run lint the linter will seek ignore path, which is specified in our gitignore file and don’t check those, otherwise check the rest in the repo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are rc files?&lt;br&gt;
In short:&lt;br&gt;
They're not specific to node.&lt;br&gt;
They're just another file&lt;br&gt;
As far as formats, they can be almost anything — it just depends on what you'll use to parse and read them. YAML, JSON, and ini are probably the most common (at least that I've seen).&lt;br&gt;
In most cases they seem to follow the convention .[program or binary name]rc&lt;br&gt;
package.json files can contain external metadata appropriate for config, it just depends on whether or not your project will expect a .rc file or expect it in package.json (or both, as in the case of babel)&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/36212256/what-are-rc-files-in-nodejs"&gt;https://stackoverflow.com/questions/36212256/what-are-rc-files-in-nodejs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is monkey patch?&lt;br&gt;
A monkey patch is a way for a program to extend or modify supporting system software locally (affecting only the running instance of the program).&lt;br&gt;
Application includes : Replace methods / classes / attributes / functions at runtime, e.g. to stub out a function during testing;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;https://en.wikipedia.org/wiki/Monkey_patch&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are githooks and husky?&lt;br&gt;
Git hooks are scripts that Git executes before or after events such as: commit, push, and receive. Git hooks are a built-in feature - no need to download anything. Git hooks are run locally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://githooks.com/"&gt;https://githooks.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Husky is a JavaScript library that makes Git hooks easier. It offers the possibility of integrating them directly into our JavaScript projects, saving us from having to deal with startup guidelines or startup scripts on repository initialization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/better-programming/a-complete-pre-commit-workflow-cea6e34f0032"&gt;https://medium.com/better-programming/a-complete-pre-commit-workflow-cea6e34f0032&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How can I automatically format the code according to prettier and lint rules before the commit?&lt;br&gt;
Use  husky and lint-staged libs.&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/husky"&gt;https://www.npmjs.com/package/husky&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/lint-staged"&gt;https://www.npmjs.com/package/lint-staged&lt;/a&gt;&lt;br&gt;
Note you might need to use husky@4 if you want to use the “free” version. New version is supposed to be faster and more conformed to the rules, but there might be a license issue for commercial project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I run all scripts at one go?&lt;br&gt;
Try &lt;a href="https://www.npmjs.com/package/npm-run-all"&gt;https://www.npmjs.com/package/npm-run-all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do the ** and * means in the test file path in config file?&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;rootDir&amp;gt;/src/**/__tests__/**/*.{js,jsx,ts,tsx}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Globstar allows ** on its own as a name component to recursively match any number of layers of non-hidden directories. Also supported by the JS libraries and Python's glob.&lt;br&gt;
a/&lt;em&gt;/c would match a/b/c, a/f/c, a/c/c etc&lt;br&gt;
a/&lt;/em&gt;*/c would match a/b/c, a/b/f/t/c&lt;br&gt;
Here it means we want to find the “&lt;strong&gt;test&lt;/strong&gt;” folder, in src folder, but we don’t care where it is located or nested, then we look for any file that has the js, jsx, ts, or tsx extenstion within this folder (which would be our test files).&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Glob_(programming)"&gt;https://en.wikipedia.org/wiki/Glob_(programming)&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Typescript vs propTypes?&lt;br&gt;
Typescript validates types at compile time, whereas PropTypes are checked at runtime.&lt;br&gt;
If you’re using TS then it’s not necessary to use propTypes, and you can convert them. Read more in this guide&lt;br&gt;
&lt;a href="https://davemn.com/2020-07/typescript-vs-proptypes"&gt;https://davemn.com/2020-07/typescript-vs-proptypes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile time vs runtime?&lt;br&gt;
Compile-time is the time at which the source code is converted into an executable code while the run time is the time at which the executable code is started running. Both the compile-time and runtime refer to different types of error.&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/846103/runtime-vs-compile-time"&gt;https://stackoverflow.com/questions/846103/runtime-vs-compile-time&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-unit-testing"&gt;
  &lt;/a&gt;
  2. Unit Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do I do UI test if I have different framework or compiler rather than React?&lt;br&gt;
Try use Dom Testing Library. You need to render the components first before testing. Otherwise you can use the specific library that were built on it, but caters to specific framework or compiler, which will make it easier.&lt;br&gt;
&lt;a href="https://testing-library.com/docs/dom-testing-library/intro"&gt;https://testing-library.com/docs/dom-testing-library/intro&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is there any new update on using React Testing Library?&lt;br&gt;
a. use screen instead of extracting variables from render methods.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Old way
const { getByTestId } = render(&amp;lt;ResetPasswordForm queryParameters={route} /&amp;gt;)
expect(getByTestId('password-input')).toBeEmpty() 
// New way   
render(&amp;lt;ResetPasswordForm queryParameters={route} /&amp;gt;)         
expect(screen.getByTestId('password-input')).toBeEmpty()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;b. use “userEvent” instead of “fireEvent”, “change” becomes “type” because userEvent mimics real user usage better&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Old way
fireEvent.change(
      getByTestId('email-input'), {
        target: {
          value: brokenEmail
        }
      }
    )
// New way
userEvent.type(
      getByTestId('email-input'), 
      brokenEmail
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;c. “wait” becomes “waitFor”&lt;/p&gt;

&lt;p&gt;d. new mock server is encouraged to be used&lt;br&gt;
&lt;a href="https://mswjs.io/"&gt;https://mswjs.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are common mistakes I should avoid using React Testing Library?&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/common-mistakes-with-react-testing-library"&gt;https://kentcdodds.com/blog/common-mistakes-with-react-testing-library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to test accessibility issues?&lt;br&gt;
Use &lt;a href="https://github.com/nickcolley/jest-axe"&gt;Jest-axe ​GitHub - nickcolley/jest-axe: Custom Jest matcher for aXe for testing accessibility ♿️🃏​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, this covers only 30% of real accessibility issues and to improve those you have to manually test with assistive technology that real people use (such as screen reader) and involve disabled people in the user research.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I got a lot of wrapping in act() warning, how it fix that?&lt;br&gt;
It depends on your situation. You shouldn’t just simply wrap things in act() to get away with the warning. Read more in this post:&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/fix-the-not-wrapped-in-act-warning"&gt;https://kentcdodds.com/blog/fix-the-not-wrapped-in-act-warning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There seems to be various ways of querying elements, which way is the best?&lt;br&gt;
There is indeed some priority you should consider when using the query methods. Mostly you should try to mimic the user’s real usage as much as possible. Read more here:&lt;br&gt;
&lt;a href="https://testing-library.com/docs/queries/about/#priority"&gt;https://testing-library.com/docs/queries/about/#priority&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why I can’t use that getByRole and aria-label to get my password input fields if I toggle between password and text types (so password can be visible)?&lt;br&gt;
It’s an aria-query error so you have to specify the attribute type in input. In this case you can use data-testid instead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-snapshot-and-integration-test"&gt;
  &lt;/a&gt;
  3. Snapshot and Integration Test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is snapshot testing?&lt;br&gt;
Snapshot tests are a very useful tool whenever you want to make sure your UI does not change unexpectedly. A typical snapshot test case renders a UI component, takes a snapshot, then compares it to a reference snapshot file stored alongside the test.&lt;br&gt;
In Jest, you can use toMatchSnapshot function. If you have prettier you can use toMatchInlineSnapshot function instead.&lt;br&gt;
&lt;a href="https://jestjs.io/docs/en/snapshot-testing#snapshot-testing-with-jest"&gt;https://jestjs.io/docs/en/snapshot-testing#snapshot-testing-with-jest&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do we make effective (and not meaningless and annoying) snapshot tests?&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/effective-snapshot-testing"&gt;https://kentcdodds.com/blog/effective-snapshot-testing&lt;/a&gt;&lt;br&gt;
According to Justin mentioned by Kent, “Most developers, upon seeing a snapshot test fail, will sooner just nuke the snapshot and record a fresh passing one instead of agonizing over what broke it.” So big snapshot test without telling why is not a good idea.&lt;br&gt;
&lt;a href="https://github.com/kentcdodds/jest-glamor-react"&gt;GitHub - kentcdodds/jest-glamor-react: Jest utilities for Glamor and React&lt;/a&gt;​ is a nice tool to have if you are using css in js with react.&lt;br&gt;
And if you use styled-components, try &lt;a href="https://www.npmjs.com/package/jest-styled-components"&gt;https://www.npmjs.com/package/jest-styled-components&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I generate test data such as fake user name or posts etc?&lt;br&gt;
Try this library: &lt;a href="https://github.com/jackfranklin/test-data-bot"&gt;​GitHub - jackfranklin/test-data-bot​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I pass the params or query in url in my tests?&lt;br&gt;
Before it’s recommended to use history library but now the new way is to use window.history.pushState and BrowserRouter from react-router-dom.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.history.pushState({}, '', '/search?clientId=client-one');

    customRender(
      &amp;lt;BrowserRouter&amp;gt;
        &amp;lt;Login /&amp;gt;
      &amp;lt;/BrowserRouter&amp;gt;
    );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Why can’t I use the toBeNull() to test elements that should NOT show up in the dom?
Now it’s recommended to write like this instead, we use query for things that will NOT be in the dom, and get for things that will be in the dom.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;expect(screen.getByRole('alert')).toBeInTheDocument()
expect(screen.queryByRole('alert')).not.toBeInTheDocument()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to debug the network request failed error?&lt;br&gt;
First check if you set up the test environment properly, and if you’re running the right test script.&lt;br&gt;
If there are still problems, follow the steps here:&lt;br&gt;
&lt;a href="https://mswjs.io/docs/recipes/debugging-uncaught-requests"&gt;https://mswjs.io/docs/recipes/debugging-uncaught-requests&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test runs alright locally, but getting CI test errors such as network request failure?&lt;br&gt;
It’s complicated, but it’s likely to be caused by network request related issues. The last time we had this problem it was caused by one of the inline-svg library which doesn’t fetch properly. Also the testing environment should be setting locally for msw to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the difference between jest.mock() and MSW?&lt;br&gt;
Answered by Artem who is the main contributor behind MSW lib:&lt;br&gt;
jest.mock helps you to mock an entire implementation of something. This means you become in charge of that something, reducing its integrity. That something (i.e. a request library) no longer behaves as it usually does, it listens to your mock and abides it unquestioningly. In the case of API, when you mock axois or fetch, you become in charge of them.&lt;br&gt;
In NodeJS MSW doesn't mock request clients, but monkey patches request issuing modules. That means that your app still makes a real request, it hits all the logic it should, only to get intercepted by MSW and then give you the control over how to respond to a request.&lt;br&gt;
I find it fair to compare jest.mock with NodeJS API of MSW, as jest runs in NodeJS. Apart from using MSW with jest and any other testing framework, you can reuse the mocks you write in a browser. In fact, you'd be using identical mocks, no need to rewrite/tweak/configure. MSW is a tool you adopt to be in charge of your network and does so without deviating your app, and it's a tool you can benefit from on many levels: when testing, developing or debugging.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-e2e-testing"&gt;
  &lt;/a&gt;
  4. E2E Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cypress vs Selenium?&lt;br&gt;
&lt;a href="https://applitools.medium.com/cypress-vs-selenium-webdriver-better-or-just-different-2dc76906607d"&gt;https://applitools.medium.com/cypress-vs-selenium-webdriver-better-or-just-different-2dc76906607d&lt;/a&gt;&lt;br&gt;
Annie: I personally would prefer Cypress because it’s still Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I installed cypress but see the lint error, how to fix that?&lt;br&gt;
Install eslint-plugin-cypress then configure a eslintrc.js file within cypress folder. For example:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  root: true,
  plugins: ['eslint-plugin-cypress'],
  extends: ['plugin:cypress/recommended'],
  env: { 'cypress/globals': true },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do I configure cypress?&lt;br&gt;
Check here for options: &lt;a href="https://docs.cypress.io/guides/references/configuration.html#Folders-Files"&gt;https://docs.cypress.io/guides/references/configuration.html#Folders-Files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The cy.get.('.236r8yf0yyhsleho') with generated class names are annoying, is there any human-friendly way to select those?&lt;br&gt;
Install @testing-library/cypress in your dependencies, import in the cypress/support/index.js file import '@testing-library/cypress/add-commands, then you can use regex to select text. Since it’s asynchronous we mostly use findByXXXX series.&lt;br&gt;
Another trick is to add const user = cy, then you will see it from a user perspective instead of cypress robot. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I avoid the repeated part of the code, such as login, or register?&lt;br&gt;
You can abstract those into functions and add to Cypress commands in cypress/support/commands.js, then use it in the test such as&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; cy.createUser().then( user =&amp;gt; { the rest of the cypress tests…})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to solve the Babel env error undefined?&lt;br&gt;
Check out the solution here: ​&lt;a href="https://github.com/cypress-io/cypress/issues/6755"&gt;react-app presets in babel configuration throw error because missing &lt;code&gt;NODE_ENV&lt;/code&gt; or &lt;code&gt;BABEL_ENV&lt;/code&gt; environment variables · Issue #6755 · cypress-io/cypress​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to test dark mode?&lt;br&gt;
See the mvp and solution in this repo:&lt;br&gt;
​&lt;a href="https://github.com/AnnieTaylorCHEN/test-cypress-darkmode"&gt;GitHub - AnnieTaylorCHEN/test-cypress-darkmode: an MVP to test cypress loading darkmode with styled components​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cypress browser doesn’t run properly (such as not connecting to the internet) when VPN is on, why?&lt;br&gt;
&lt;a href="https://github.com/cypress-io/cypress/issues/672"&gt;Cypress cannot load pages behind a corporate proxy · Issue #672 · cypress-io/cypress​&lt;/a&gt;&lt;br&gt;
According to the above thread, isnce Cypress acts as a reverse proxy to the browser (which also ends up terminating traffic amongst other things), when it makes the external requests to 3rd party servers, it needs to respect the system proxy settings. That's why this is failing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-nodejs-test"&gt;
  &lt;/a&gt;
  5. Nodejs Test
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Any way to improve error message for jest test when there is a function with multiple cases?&lt;br&gt;
Try abstract it with &lt;a href="https://github.com/atlassian/jest-in-case"&gt;​GitHub - atlassian/jest-in-case: Jest utility for creating variations of the same test​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are Spies, Mocks and Stub?&lt;br&gt;
Spies: Creates fake functions which we can use to track executions. This means we can tell/ find out whether the function has been executed/ how many times its been called etc. We can also use spies on existing functions and get the same capability, to track those functions executions.&lt;br&gt;
Stubs: Enables us to replace functions. This gives us more control. We can return whatever we want or have our functions work in a way that suites us to be able to test multiple scenarios.&lt;br&gt;
Mocks: They are fake methods, that have pre-programmed behavior and pre-programmed expectations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic introduction to testing with Chai and Sinon?&lt;br&gt;
​&lt;a href="https://scotch.io/tutorials/how-to-test-nodejs-apps-using-mocha-chai-and-sinonjs"&gt;How to Test NodeJS Apps using Mocha, Chai and SinonJS​&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#faq"&gt;
  &lt;/a&gt;
  FAQ
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why should I bother with testing?&lt;br&gt;
To give you more confidence that your app will run smoothly, that your users won’t be angry on weekends while nobody is there to answer phone for customer support and nobody is there to fix the bug.&lt;br&gt;
It also helps you to focus and think more about your app, its structure, the code robustness etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I cover all the test cases?&lt;br&gt;
It is advised not to go after 100% coverage but cover the most cases, especially in the UI testing. It is also suggested to use user-centered testing strategy that focuses on testing how the user will use the app, instead of implementation details. If the app pass most tests and it’s running well, you can give it a rest until later you find some edge case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I know what to test?&lt;br&gt;
Probably most asked and most difficult for beginners. Some developers said just to write more tests, explore the options and you will become more experienced. Some said you can see it from a user’s perspective, what’s important for them? How will they use the app? What possible errors they might bump into during their usage, at which stage? What is crucial for the business that failure costs more loss?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are implementation details and why we should not focus on testing on that?&lt;br&gt;
There are two distinct reasons that it's important to avoid testing implementation details. Tests which test implementation details:&lt;br&gt;
Can break when you refactor application code. False negatives&lt;br&gt;
May not fail when you break application code. False positives&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/testing-implementation-details"&gt;https://kentcdodds.com/blog/testing-implementation-details&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why don’t we use Enzyme any more?&lt;br&gt;
It doesn’t encourage the best practice.&lt;br&gt;
You can read the above post, and Kent also said : “With shallow rendering, I can refactor my component's implementation and my tests break. With shallow rendering, I can break my application and my tests say everything's still working.”&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/why-i-never-use-shallow-rendering"&gt;https://kentcdodds.com/blog/why-i-never-use-shallow-rendering&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to get good at testing quickly?&lt;br&gt;
There is no quick track, you just have to practice a lot! Mostly it comes from your experiences, so ultimately you just have to write more tests, fail more, and learn from that.&lt;br&gt;
Documentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;Jest - &lt;a href="https://jestjs.io/docs/en/getting-started"&gt;https://jestjs.io/docs/en/getting-started&lt;/a&gt;&lt;br&gt;
Jest Cheat Sheet - &lt;a href="https://github.com/sapegin/jest-cheat-sheet"&gt;​GitHub - sapegin/jest-cheat-sheet: Jest cheat sheet​&lt;/a&gt;&lt;br&gt;
Jest Dom - ​&lt;a href="https://github.com/testing-library/jest-dom"&gt;GitHub - testing-library/jest-dom: Custom jest matchers to test the state of the DOM​&lt;/a&gt;&lt;br&gt;
Testing Library / React Testing Library - &lt;a href="https://testing-library.com/docs/"&gt;https://testing-library.com/docs/&lt;/a&gt;&lt;br&gt;
Cypress: &lt;a href="https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell"&gt;https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell&lt;/a&gt;&lt;br&gt;
BrowserStack - &lt;a href="https://www.browserstack.com/docs/"&gt;https://www.browserstack.com/docs/&lt;/a&gt;&lt;br&gt;
Applitools - &lt;a href="https://applitools.com/"&gt;Applitools: Automated Visual Testing with Visual AI&lt;/a&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>jest</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>YoffeeJS: Yet another Javascript framework. But this one's good, I think</title>
      <author>Numbnut</author>
      <pubDate>Tue, 03 Aug 2021 16:08:34 +0000</pubDate>
      <link>https://dev.to/daweet/yoffeejs-yet-another-javascript-framework-but-this-one-s-good-i-think-55il</link>
      <guid>https://dev.to/daweet/yoffeejs-yet-another-javascript-framework-but-this-one-s-good-i-think-55il</guid>
      <description>&lt;p&gt;As I strive to refine my stack, one consideration becomes increasingly important - &lt;strong&gt;Simplicity&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I want my main tool - the UI library - to do just one thing: help me create reactive components. While doing so, it has to be unopinionated, as close to the standards as possible, without imposing anything except for the data reactivity bit.&lt;/p&gt;

&lt;p&gt;I didn't find anything that felt good enough, so I made one. Meet &lt;em&gt;YoffeeJS&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lefetmeofefet"&gt;
        lefetmeofefet
      &lt;/a&gt; / &lt;a href="https://github.com/lefetmeofefet/yoffee"&gt;
        yoffee
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Minimal HTML one-way binding library
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Yoffee doesn't invent a new syntax. It doesn't impose a cumbersome API. No build steps. No Virtual DOM to slowly depress your soul. All you need to know is HTML and Javascript, and you're set to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createYoffeeElement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/yoffee@latest/dist/yoffee.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;createYoffeeElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello-world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s2"&gt;`&amp;lt;div&amp;gt;Hello World!&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hello-world&amp;gt;&amp;lt;/hello-world&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it on &lt;a href="https://jsfiddle.net/Numbnut/xmu902Lq/"&gt;JSFiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example we used the two API functions of Yoffee: &lt;code&gt;createYoffeeElement&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The output is a legit web component - a brand new HTML tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-data"&gt;
  &lt;/a&gt;
  What about data?
&lt;/h2&gt;

&lt;p&gt;Yoffee's features one-way data binding, much like React. Consider the counter button example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createYoffeeElement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/yoffee@latest/dist/yoffee.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="nx"&gt;createYoffeeElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;clicks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
            &amp;lt;button onclick=&lt;/span&gt;&lt;span class="p"&gt;${()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;
                I've been clicked &lt;/span&gt;&lt;span class="p"&gt;${()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times
            &amp;lt;/button&amp;gt;
        `&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;counter-button&amp;gt;&amp;lt;/counter-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it on &lt;a href="https://jsfiddle.net/Numbnut/6c7ovnuk/13/"&gt;JSFiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;state.clicks&lt;/code&gt; changes, Yoffee knows which expressions need to be rerun, and in turn which DOM Nodes need to be updated. No unnecessary expression evaluations, no DOM Diffing. You can read more about the mechanism and how it compares to other libraries in the &lt;a href="https://yoffee.netlify.app/"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-everything-else"&gt;
  &lt;/a&gt;
  What about &lt;em&gt;everything else&lt;/em&gt;?
&lt;/h2&gt;

&lt;p&gt;Yoffee is just a thin wrapper for web components and reactive html. &lt;br&gt;
Things that usually require learning in other frameworks are elegant and obvious in Yoffee, like CSS, shared state, listening to events, passing data from component to component, calling callbacks passed from parent element, reacting to property changes, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-use-it-and-so-should-everybody"&gt;
  &lt;/a&gt;
  I use it and so should everybody
&lt;/h2&gt;

&lt;p&gt;Joking aside, some code style decisions were made, and I don't claim that they're objectively better. Some people may like the &lt;code&gt;useState&lt;/code&gt; syntax better.&lt;br&gt;
For me, this is the perfect framework. I use it in my projects.&lt;/p&gt;

&lt;p&gt;My wildest hope is that other people will like it, and use it, and maybe even contribute to it.&lt;/p&gt;

&lt;p&gt;In the future I plan to fill gaps that'll make it more accessible to everybody, like a components library and better documentation. &lt;/p&gt;

&lt;p&gt;Feel free to contact me, or add issues on &lt;a href="https://github.com/lefetmeofefet/yoffee"&gt;Github&lt;/a&gt; or magically dive into the code and open a PR. &lt;/p&gt;

&lt;p&gt;I'd love to collaborate!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>webcomponents</category>
    </item>
  </channel>
</rss>
