<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Becoming A Software Developer</title>
      <author>Kira McLean</author>
      <pubDate>Tue, 19 Jan 2021 15:25:54 +0000</pubDate>
      <link>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</link>
      <guid>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</guid>
      <description>&lt;p&gt;I get asked a lot for advice on becoming a software developer. I didn't study anything related to software in university, but now it's what I do for a living. I also spent about 3.5 years mentoring with &lt;a href="https://www.lighthouselabs.ca"&gt;Lighthouse Labs&lt;/a&gt;, a local web development bootcamp, and watched (and would like to believe at least in some cases, helped) hundreds of people of every age from wildly diverse backgrounds get jobs as software developers.&lt;/p&gt;

&lt;p&gt;This is my advice for people with no technical experience who want to land their first job writing software. It's based on my experience as both a person who did it myself and as a mentor to other people who did it. There's no single right way to go about this, and no matter how you do it's a lot of work. But these are some things that have worked for other people, myself included. These suggestions are arranged roughly in order, but of course many overlap and kind of happen at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-what-youre-getting-yourself-into" class="anchor"&gt;
  &lt;/a&gt;
  Know what you're getting yourself into
&lt;/h2&gt;

&lt;p&gt;Software engineering is nothing like I expected it to be. All the hard parts involve dealing with people. Part of my original motivation for choosing a career in software was thinking I wouldn't have to deal much with people. I wasn't very good at it and didn't enjoy it, but my fantasy of just sitting in front of my computer all day and watching my bank account fill up was totally delusional.&lt;/p&gt;

&lt;p&gt;The reality of writing code for a living, in my experience, includes dealing with a lot of office politics, entitled middle managers, stressed out co-workers, and yes, condescencion and occasional harassment (especially if you're not male). I find the culture of the tech industry generally toxic and abusive and it has very nearly broken my spirit on multiple occasions.&lt;/p&gt;

&lt;p&gt;You won't be alone dealing with this. Your co-workers and countless people across the industry share the experience. And it is ultimately bearable.&lt;/p&gt;

&lt;p&gt;I don't say this to discourage anyone from getting into software, but just to highlight that the stuff you hear from recruiters is bullshit. It's not all free trips and fancy perks and big paycheques. It is those things, sure, but the reality is much less glamorous than they make it sound.&lt;/p&gt;

&lt;p&gt;Being a software developer means getting paid to solve other people's problems. The rest is fluff. This makes it a solid career path, though, because other people have a lot of problems.&lt;/p&gt;

&lt;p&gt;It is still an empowering and lucrative career. Despite my generally negative view of the industry, I still highly recommend and help people into a career in software regularly. Most individual software developers, like most people, are genuine and kind. And I can't speak to problems in other industries first hand, but I gather most high-paying, male-dominated industries are pretty similar anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-lots-of-people" class="anchor"&gt;
  &lt;/a&gt;
  Meet lots of people
&lt;/h2&gt;

&lt;p&gt;I was referred to three of the four programming jobs I've had so far through friends. I made friends with those people who were already programmers at meetups. I didn't ask them to get me a job, but a lot of companies are pretty much always looking for new software engineers, so when your friend hears you're looking for that kind of job, they can bring it up at work. I still did interviews, but it makes an enormous difference when someone the boss already knows and trusts can vouch for you.&lt;/p&gt;

&lt;p&gt;A word on meeting strangers. I, like many people who are into nerd things like software, am the most introverted person I know. I found hanging out in groups of new people excruciating at first, but honestly learning how to not be awkward around strangers is just as important as learning how to code if you want to do well in your career. I just went to the meetups and stood off to the side, awkwardly making eye contact with a few random people. Eventually a friendly extrovert would come up and initiate a conversation, and before I knew it I could hold my own in a crowd.&lt;/p&gt;

&lt;p&gt;Check out meetups for programming languages you're interested in, or if there aren't those kinds of groups where you live, join online communities. Most programming languages have a slack or discord server where people hang out, and in my experience people are usually very welcoming and kind to newbies (at least in the Ruby, Elixir, and Clojure communities; all of which I highly recommend).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-code-in-public" class="anchor"&gt;
  &lt;/a&gt;
  Learn how to code, in public
&lt;/h2&gt;

&lt;p&gt;Without any formal education in software development, you have to offer something else to prove you actually know how to write code. I did this by building a bunch of crappy side projects. The very first thing I ever did was replicate the Google landing page with HTML and CSS. The first actual app I made was a blackjack game with Sinatra. I also made Twitter and Reddit clones with Rails, and little browser games like Pacman with different JavaScript frameworks. Some of that code still exists in my &lt;a href="https://github.com/kmclean-old"&gt;GitHub graveyard&lt;/a&gt; if you want to see what I mean by crappy. Other common toy projects include link shorteners, photo galleries, e-commerce stores, time trackers, or clones of whatever software you normally use, like spreadsheets, workflow management, calendars, etc. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Look for tutorials online that walk through how to build the kinds of things you're interested in. If you don't know where to start, &lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org"&gt;Free Code Camp&lt;/a&gt; are two free programs that offer very realistic learning roadmaps. I did parts of both of those but never finished either. I also did several free courses on &lt;a href="https://www.coursera.org/browse/computer-science"&gt;Coursera&lt;/a&gt; and &lt;a href="https://www.edx.org/course/subject/computer-science"&gt;edX&lt;/a&gt;, which are both amazing but you have to be careful not to end up in a rabbit hole. Those two mostly have actual university courses, which are super interesting, but not very relevant to things you'll do in a real job.&lt;/p&gt;

&lt;p&gt;If your goal is to get from nothing to making money as a developer as fast as possible I recommend sticking to a more targeted learning roadmap like the two above. There are also countless paid ones which vary wildly in price and quality. Be weary about shelling out huge amounts of money for bootcamps. I did pay for a few months of &lt;a href="https://launchschool.com"&gt;Launch School&lt;/a&gt; (which at the time was called "Tea Leaf Academy"), and it was the best career move I ever made. I highly recommend them because they're in a sweet spot of offering a robust and relevant curriculum without costing a fortune. It's not free ($200/month), but a few hundred dollars is a very small investment in the scheme of your career. Apparently they also offer a deferred payment option now, too.&lt;/p&gt;

&lt;p&gt;The career-oriented bootcamps will also teach you loads of useful practical things they don't teach in the free university courses, like version control (git), testing, and how to collaborate with other developers on one project.&lt;/p&gt;

&lt;p&gt;It took me 6 months of studying, meeting people, and building crappy software full time before I got my first internship. &lt;a href="https://www.lighthouselabs.ca/student-outcomes"&gt;95% of Lighthouse Labs graduates&lt;/a&gt; are employed as software developers in that timeframe. Launch School delivers &lt;a href="https://launchschool.com/results"&gt;impressive, concrete results&lt;/a&gt; for many of their students, too. I never finished most of the courses or programs I started. I funded that time off by living like a peasant on money I made running one of those student painting businesses the previous summer. Learning to code can feel like a slog at times, but just stick with it and you're very likely to be among the vast majority who succeed at this self-educated developer thing. It is a totally achievable and realistic goal and you're in good company.&lt;/p&gt;

&lt;p&gt;Other than doing free online courses and building apps from tutorials, other ways I learned in public during this time included blogging about my learning journey, making myself a portfolio website to showcase my little projects, and volunteering with some local tech communities. Do what works for you, but focus on ending up with at least a few medium sized projects you can show someone to prove you know how to make software that works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Learn best practices
&lt;/h2&gt;

&lt;p&gt;A surprising number of experienced developers still write really horrible code. Spend some time learning about software design and software engineering best practices to avoid becoming one of them. How you do that depends a lot on how you learn. (BTW, you should figure that out before you embark upon a journey of self-re-education for a career change). I absorb a lot from reading and prefer to learn by studying theory over trial and error, so reading and watching talks works really well for me. YMMV and you do ultimately just need experience to really get this stuff, but you don't have to start from scratch.&lt;/p&gt;

&lt;p&gt;Read "The Pragmatic Programmer" by Dave Thomas and Andrew Hunt, and anything by Sandi Metz. Watch Rich Hickey's talks, especially "&lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simple Made Easy&lt;/a&gt;", and Sarah Mei's "&lt;a href="https://brightonruby.com/2017/livable-code-sarah-mei/"&gt;Livable Code&lt;/a&gt;". Other classics include Eric Evans' "Domain Driven Design" and Martin Fowler's "Refactoring". There are countless others and everyone has their opinion about what should be included in the software engineering canon, but these are my recommendations. They'll provide a solid foundation and ample fodder for further reading and watching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pour-your-heart-out" class="anchor"&gt;
  &lt;/a&gt;
  Pour your heart out
&lt;/h2&gt;

&lt;p&gt;Once you can write code that mostly works, start looking for a job. Put the word out that you're seeking your first role writing software. Hopefully one of your programmer friends will know about an open position, but you can still apply to random jobs on the internet, too. This has a very low success rate, but it's possible. I got one of my four jobs by firing my resume into the abyss. I included a very long and heartfelt cover letter about how I loved programming so much and really wanted to work for this specific company (which I did), and how I learn fast and really believed I could do the job if they'd give me a chance.&lt;/p&gt;

&lt;p&gt;It worked. The hiring manager said my letter caught his attention. I had one year of experience at that time and had never worked remotely before, but I got the job.&lt;/p&gt;

&lt;p&gt;Don't be afraid to be authentic. Don't lie and say you know more than you do, but don't sell yourself short, either. Bootstrapping a career in software is no small feat and there are many teams out there who would love to hire the kinds of self-starting fast learners who do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-too-picky-at-first" class="anchor"&gt;
  &lt;/a&gt;
  Don't be too picky (at first!)
&lt;/h2&gt;

&lt;p&gt;The reality is that your first job or two will probably be pretty crappy and underpaid. At this point you're trying to convince someone to take a chance on you, and it's a trade off between your dignity and your future career. In the very beginning, you should prioritize gaining experience over almost everything else. Obviously never put up with anything you're uncomfortable with, but if you can stick it out it's worth setting the bar pretty low just to get your first few months of real job experience, IMHO.&lt;/p&gt;

&lt;p&gt;I lucked out and worked with the most amazing team in the world for my first job as a developer, but I discovered from the students I mentored that that is very much not the norm.&lt;/p&gt;

&lt;p&gt;There are pros and cons to every kind of company, so don't worry too much about finding the perfect fit right away. Focus on gaining experience at first so you can have the freedom to focus on finding the perfect fit later. I've worked with a few different kinds of companies and there are pros and cons no matter where you go.&lt;/p&gt;

&lt;p&gt;Big corporations usually have a lot of experienced developers and lethargic processes, so there's more opportunity to take your time and get help from people more advanced than you. The pressure is often pretty low because people have such low expectations for new developers, which honestly is fair. You have a lot of room to screw up because you're such a tiny cog in a massive machine. The downsides depend on your personality. For me it was that I find most large tech companies to be evil and didn't like the soul-crushing feeling of helping to build something I hated.&lt;/p&gt;

&lt;p&gt;Startups usually have fewer people available to be mentors, but more opportunity to take on disproportionate responsibility for your level, which can be an amazing learning experience in a different way. You also have a lot of room to screw up, but it's more because your screw ups just blend in with the overall culture of moving fast and breaking things. I now believe that's a ridiculous way to run a business, but when there's widespread acceptance of breaking even important things, you have a lot freedom to experiment and learn by trial and error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-a-good-student" class="anchor"&gt;
  &lt;/a&gt;
  Be a good student
&lt;/h2&gt;

&lt;p&gt;Lastly, once you finally land your first job, be a good student. Treat your first year or two on the job like paid education, not your chance to go in and show everyone how it's done. You know way less than you think, and you have no idea what it takes to build functioning software systems, let alone to deploy or maintain them. Always be humble and eager to learn. Soak up every minute of attention you get from more experienced developers around you and learn from them. Not everything they say is wise or true, but pay attention and copy the things that work whilst ignoring the things that clearly don't.&lt;/p&gt;

&lt;p&gt;Learn how to ask good questions. Don't be afraid to ask for help, but before you do, at least try to figure out the problem yourself. Write down what you tried, and explain why you're surprised your attempt didn't work.&lt;/p&gt;

&lt;p&gt;There are certain things you can only really learn from experience on a real world project, so see what opportunities there are to learn those things, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;securing and backing up actual important customer data&lt;/li&gt;
&lt;li&gt;deploying a huge app with no downtime&lt;/li&gt;
&lt;li&gt;refactoring large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;adding new features to large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;fixing obscure bugs with no instructions to reproduce them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few examples of things you won't run into on your little demo projects. Pay attention to the problems you're dealing with at work that you don't run into on side projects and learn how to fix those. That's your pathway to levelling up. Most importantly, never stop learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all" class="anchor"&gt;
  &lt;/a&gt;
  That's all
&lt;/h2&gt;

&lt;p&gt;Software development is a great career. It's allowed me to be financially independent and stable, travel the world, meet cool people, and lots more. My path won't work for everyone. There are as many different ways to become a software developer as there are people, but I've seen countless aspiring software engineers go through their own journeys and many of them touch on these points, so see how they fit in to your own path. And let me know how it goes 🙂&lt;/p&gt;

</description>
      <category>education</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Why visual novel game development matters to me</title>
      <author>Diana Chin</author>
      <pubDate>Tue, 19 Jan 2021 15:23:17 +0000</pubDate>
      <link>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</link>
      <guid>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</guid>
      <description>&lt;p&gt;Hello friends and welcome to the New Year! It’s been a while since my last post as I’ve been managing a busy schedule between my full-time job as a support engineer and helping my son with his remote learning.&lt;/p&gt;

&lt;p&gt;For this article, I’m focusing on visual novel game development and why it matters to me tremendously. Since 2018, I was introduced to visual novel programming when I wanted to make a simple game featuring my cow character from my webcomics. Though my art style has changed throughout the years, I’m happy that I’ve managed to keep on learning new techniques. The satisfaction behind combining code and art makes it worthwhile to share my projects. &lt;/p&gt;

&lt;p&gt;I’ve played a good amount of visual novel games, and I can tell you that it amazes me to see so many different interactive stories. I enjoy supporting other visual novel developers who are creating their unique games. &lt;/p&gt;

&lt;p&gt;I’ll be honest - I’ve had some folks who berated my projects since they believe that visual novel game development isn’t real development. And that’s because it falls under the assumed notion that anytime we think of game development, it’s easy and shouldn’t require a lot of brainpower. &lt;/p&gt;

&lt;p&gt;I’m here to tell you that it’s not the case. Game development, just like any other development field, requires the ability to plan and develop your project through phases. No matter the language/framework involved, you’re building a functional piece of software. It’ll require testing, rewriting code, testing it again, maybe refactor to keep the code neat and tidy, and the cycle pretty much repeats itself until you’re satisfied with the end result. &lt;/p&gt;

&lt;p&gt;Visual novel games, to me, is a beautiful marriage of code and storytelling. As I’ve to use Ren’Py for developing my games, I can incorporate some Python scripts, if needed. I’m also utilizing my own writings and art assets in creating my story. To me, it’s a labor of love and I’m in awe of how the pieces interact with each other to make the game come to life. &lt;/p&gt;

&lt;p&gt;My end goal for creating visual novel games is simple - to make others smile. Money isn’t a motivator when I build my games. I just love creating them. &lt;/p&gt;

&lt;p&gt;If you're an aspiring visual novel game developer and don't know where to start, you can check out my series on  &lt;a href="https://hashnode.com/series/lets-build-a-simple-visual-novel-game-using-renpy-ckfe5jbdn018k65s1fj0r30gp"&gt;creating a simple visual novel game using Ren'Py&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading my article! If you happen to like it, I appreciate your thoughts in the comments section. Lastly, don't forget to follow me on my visual novel game development, test automation adventures, and webcomics via &lt;a href="http://twitter.com/redlotusdesignz"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>devjournal</category>
      <category>python</category>
    </item>
    <item>
      <title>Customizing the scrollbar with CSS</title>
      <author>Nikki</author>
      <pubDate>Tue, 19 Jan 2021 15:17:15 +0000</pubDate>
      <link>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</link>
      <guid>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</guid>
      <description>&lt;p&gt;Have you ever noticed the intricacies of the websites you visit? You can style just about every pixel of it, including the scrollbar. I was curious about how to go about this and found that it could be accomplished with just a few lines of CSS. &lt;/p&gt;

&lt;p&gt;Here's what we'll build in Codepen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the final project: &lt;a href="https://codepen.io/nikki-peel/pen/oNzmEMa"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three boxes containing overflowing text content will all be scrollable but styled differently. The first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have content be scrollable while the scrollbar itself is hidden. The second &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar that is always visible. The third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar but only display it when the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is focused upon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-three-sections-with-text-content" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create the three sections with text content&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First, create three &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements and within those sections create a paragraph containing a long string of text (I used 4 paragraphs of dummy text, enough to create overflow). I also chose to label each &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-base-styles-with-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create base styles with CSS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Next, you'll want to create some basic styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I decided to use custom properties for the colors in this project and declared them first at the top of the file (this is optional of course). Next, we'll use Flexbox to style the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; using display: flex and space the sections evenly using &lt;code&gt;justify-content: space-evenly&lt;/code&gt;. I also added margin to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; so that the sections would be centered horizontally with a bit of space on top and bottom as well: &lt;code&gt;margin: 2rem auto&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The sections each have a &lt;code&gt;height&lt;/code&gt; of 60vh with a &lt;code&gt;border-radius&lt;/code&gt; of 5px for rounded corners. I added some padding to the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; as well so that there is a nice amount of whitespace. You want to make sure you declare &lt;code&gt;overflow-y: auto&lt;/code&gt; when styling your sections so that they are scrollable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section {
  display: block;
  background-color: var(--white);
  border: 3px solid #121212;
  height: 60vh;
  border-radius: 5px;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only styling I chose for the paragraph elements was a line-height of 1.35 and changing the font-family to sans-serif:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-the-scrollbar-component" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Styling the scrollbar component&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now it's time for the fun part! In order to select the scrollbar, we'll use the pseudo-element &lt;code&gt;::webkit-scrollbar&lt;/code&gt; on our &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element to indicate that we want to use a custom scrollbar and assign it a &lt;code&gt;width&lt;/code&gt; of 1.25em:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: if you plan to use a horizontal scroll bar instead (or in addition to) you'll need to declare a &lt;code&gt;height&lt;/code&gt; for the scrollbar&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar {
width: 1.25em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we can style the 'track' of the scrollbar using &lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I added a small &lt;code&gt;border-radius&lt;/code&gt; because the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; container has rounded corners as well. You may also create an inner-shadow for the track using &lt;code&gt;box-shadow&lt;/code&gt; and the keyword 'inset'.&lt;/p&gt;

&lt;p&gt;Now that the &lt;code&gt;sidebar&lt;/code&gt; and &lt;code&gt;sidebar-track&lt;/code&gt; have been made we can add custom styling to the &lt;code&gt;sidebar-thumb&lt;/code&gt; (this is the element that moves along the track):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once again, we've added &lt;code&gt;border-radius&lt;/code&gt; for rounded corners and an inner-shadow on the element. Adding an explicit height here was also necessary because the height of the &lt;code&gt;scrollbar-thumb&lt;/code&gt; adapts to screen size and becomes too small of a target on mobile devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remember, we want to hide the scrollbar on the first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; while still maintaining scroll. To do this, simply target the element by its ID (&lt;code&gt;#hidden&lt;/code&gt;) and write &lt;code&gt;display: none;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#hidden::-webkit-scrollbar {  
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar-until-focused" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar until focused&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Styling the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; was a bit trickier. We don't want the scrollbar to show unless the section has been focused upon. First, you must target the element by its ID (&lt;code&gt;#inactive&lt;/code&gt;) and hide the overflowing content (this also hides the scrollbar!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive {
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, target the element's &lt;code&gt;:focus&lt;/code&gt; state and change the overflow of the y axis to &lt;code&gt;auto&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive:focus {
  overflow-y: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you click or tap on the third section, you should now see our custom scrollbar appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-sections-tabbable-and-adding-raw-focus-endraw-styling" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making the sections tabbable and adding &lt;code&gt;:focus&lt;/code&gt; styling&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These next few steps are implemented so that the sections can be focused upon by keyboard users as well. The &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element is not tabbable by default as is the case with input elements, buttons, and anchor tags. In order to fix this, I added a &lt;code&gt;tabindex&lt;/code&gt; to each of the sections within the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section tabindex="2"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section id="inactive" tabindex="3"&amp;gt;&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, custom styling can be used to indicate more clearly whether an element has been focused upon. For this project, I applied &lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; styles globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finishing-touches" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Finishing touches&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You may also wish to add a short note as I have to the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; indicating that the user must tap to view the content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In our CSS file, we can hide this element on large screens using a media query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we should add another media query so that our content collapses when viewed on small screens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we update our &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element to use &lt;code&gt;flex-direction: column&lt;/code&gt;. Next, adjust the margin on the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements so that there is a vertical gap between them and they are centered horizontally: &lt;code&gt;margin: 1rem auto;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-html" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final HTML:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section tabindex="2"&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section id="inactive" tabindex="3"&amp;gt;
  &amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final CSS:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 

section::-webkit-scrollbar {
    width: 1.25em;
} 

section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}

section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}


/* hiding the scrollbar for the first &amp;lt;section&amp;gt; */
#hidden::-webkit-scrollbar {
  display: none;
}

#inactive {
  overflow: hidden;
}

#inactive:focus {
  overflow-y: auto;
}

/* use hidden-scrollbar type for 'body' */
body::-webkit-scrollbar {
  display: none;
}

@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}

em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We now have three scrollable sections each with custom styling 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-things-up" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Wrapping things up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is just the beginning of what you can do to style the scrollbars for your projects. There are a variety of pseudo-elements that can be used to customize each part of the scrollbar:&lt;/p&gt;

&lt;p&gt;*&lt;code&gt;::-webkit-scrollbar&lt;/code&gt; — the entire scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-button&lt;/code&gt; — the buttons on the scrollbar (arrows pointing upwards and downwards).&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-thumb&lt;/code&gt; — the draggable scrolling handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt; — the track (progress bar) of the scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track-piece&lt;/code&gt; — the part of the track (progress bar) not covered by the handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-corner&lt;/code&gt; — the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet.&lt;br&gt;
*&lt;code&gt;::-webkit-resizer&lt;/code&gt; — the draggable resizing handle that appears at the bottom corner of some elements.&lt;/p&gt;

&lt;p&gt;One important factor to keep in mind is accessibility. According to MDN, it is not suggested to be used in production due to its incompatibility with some browsers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar"&gt;MDN Docs - webkit-scrollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also another method being developed which I think is important to point out: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scrollbars"&gt;MDN Docs - CSS Scrollbars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example from MDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scroller {
  width: 300px;
  height: 100px;
  overflow-y: scroll;
  scrollbar-color: rebeccapurple green;
  scrollbar-width: thin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we're using green for the color of our thumb and purple for our scrollbar's track (both declared using &lt;code&gt;scrollbar-color&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="scroller"&amp;gt;
Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi
welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.
Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette
tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato.
Dandelion cucumber earthnut pea peanut soko zucchini.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Current browser compatibility for scrollbar-color and scrollbar-width:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you know of any other methods that can be used for customizing the scrollbar, please share in the comments. Thank you for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WishList Feature for eCommerce App using Java and Spring Boot</title>
      <author>Nil Madhab</author>
      <pubDate>Tue, 19 Jan 2021 15:08:47 +0000</pubDate>
      <link>https://dev.to/nilmadhabmondal/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-2gei</link>
      <guid>https://dev.to/nilmadhabmondal/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-2gei</guid>
      <description>&lt;p&gt;We will create a back-end of a very important feature in every e-Commerce site — &lt;strong&gt;Wishlist&lt;/strong&gt;, using Java and Spring Boot&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brlzUFLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brlzUFLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A Wishlist is an eCommerce feature that allows shoppers to create personalized collections of products they want to buy and save them in their user account. It is a must-have feature for eCommerce applications.&lt;br&gt;
We will first develop the back-end API using Java &amp;amp; Spring Boot (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end and Android front-end (in other tutorials).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#youtube-discussion" class="anchor"&gt;
  &lt;/a&gt;
  Youtube Discussion
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hYpp3MukGqc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Discussion about Wishlist feature of E-commerce app



&lt;h2&gt;
  &lt;a href="#live-demo" class="anchor"&gt;
  &lt;/a&gt;
  Live Demo
&lt;/h2&gt;

&lt;p&gt;You can test the API at the following swagger link. You will find the wishlist API in &lt;code&gt;wish-list-controller&lt;/code&gt; section.&lt;br&gt;
&lt;a href="http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller"&gt;Swagger UI&lt;/a&gt;&lt;br&gt;
You can find the complete code at &lt;a href="https://github.com/webtutsplus/ecommerce-backend"&gt;Github.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Knowledge of Java, &lt;a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733"&gt;OOP&lt;/a&gt; &amp;amp; Spring Boot Framework&lt;/li&gt;
&lt;li&gt;Java Development Kit (JDK)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA Ultimate&lt;/a&gt; — open-source (Recommended)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f"&gt;MySQL&lt;/a&gt;/MariaDB Database&lt;/li&gt;
&lt;li&gt;A good browser (Chrome — recommended)
This tutorial is part of our series on &lt;a href="https://nilmadhab.medium.com/"&gt;Back-end Development with Java&lt;/a&gt;. We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.
## Project Structure
If you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.
Following is the project structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTBO4ZLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aofaf0wgmu86k79wr7ad.png" alt="Alt Text"&gt;Project Structure of the API

We will now describe the following directories:-

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;controller&lt;/code&gt;— contains the controllers for various API endpoints&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dto&lt;/code&gt; — contains the Data Transfer Objects (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the database, it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Wishlist DTO in this tutorial.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;model&lt;/code&gt; — contains the data models (and entities)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repository&lt;/code&gt; — contains the methods for CRUD operations in corresponding tables of the database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;service&lt;/code&gt; — contains the class files with &lt;code&gt;@service&lt;/code&gt; annotations. These class files are used to write business logic in a different layer, separated from &lt;code&gt;@RestController&lt;/code&gt; class files. &lt;a href="http://en.wikipedia.org/wiki/Business_logic"&gt;Business logic&lt;/a&gt; or domain logic is that part of the program which &lt;strong&gt;encodes the real-world business rules&lt;/strong&gt; that determine how data can be created, stored, and changed inside the database.
## API Design
Before we begin to code, we must spend some time to think about the API design and the &lt;a href="https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e"&gt;database design.&lt;/a&gt; Let’s begin with the API design.
Currently, we need only two API endpoints:-&lt;/li&gt;
&lt;li&gt;Adding to wishlist&lt;/li&gt;
&lt;li&gt;Getting wishlist
Also, we had already added the token-based authorization in our eCommerce backend. So, instead of user id, we will pass the token to every endpoint of the API. Hence, we decide to have the following endpoints.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8qQyCiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8baray2ominano8zbwqh.png" alt="Alt Text"&gt;
Also, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6ECYfPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/051wyg8pkj2kjv13n48a.png" alt="Alt Text"&gt;
Now, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEmj63Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xh4cb58tdw464mno5q7x.png" alt="Alt Text"&gt;
## Table Design
Now, let’s discuss the table design. We had already created the &lt;code&gt;ecommerce&lt;/code&gt; database in previous tutorials. In this database, we will create a new table called &lt;code&gt;wishlist.&lt;/code&gt; We will keep the design simple.
The database should have three columns — &lt;code&gt;id, user_id, product_id,created_date&lt;/code&gt;. Here,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; is the primary key and will be auto-generated&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;user_id&lt;/code&gt; — stores userId&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;product_id&lt;/code&gt; — stores the product id&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;created_date&lt;/code&gt; — stores the data &amp;amp; time at which the entry was created
The schema of the database looks like the following:-
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

Ideally, each user’s wishlist should have a particular product only once. But for simplicity, we are not considering such cases.
## Let’s Code
We will now begin to write code.
## Model (Entity)
Let’s begin with writing the code for the Model class of each entry in the wishlist table. If you are familiar with &lt;a href="https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------"&gt;Spring Boot&lt;/a&gt; or any other MVC framework, you would know that Model class is used to store each entry of the table. In &lt;a href="https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc"&gt;Spring Boot&lt;/a&gt;, we use Annotations to map the columns of the table with the class members.
To create the model class, create a new class inside the &lt;code&gt;Model&lt;/code&gt; directory. We will call this class — &lt;code&gt;WishList&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.&lt;/li&gt;
&lt;li&gt;We will also create one class object of &lt;code&gt;Product&lt;/code&gt; class. This object will store all the details of the product like name, price, description etc.&lt;/li&gt;
&lt;li&gt;Also, note that the column &lt;code&gt;created_date&lt;/code&gt; should be filled with the current date and time. For this, we will use the &lt;code&gt;java.util.Date&lt;/code&gt; class.
Following is the complete code of &lt;code&gt;WishList.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Repository
It is time to create the &lt;code&gt;repository interface&lt;/code&gt; for the &lt;code&gt;wishlist&lt;/code&gt; table. Create a new file called &lt;code&gt;WishListRepository.java&lt;/code&gt; inside the Repository directory.
If you are familiar with &lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;Spring Boot&lt;/a&gt;, you would know that &lt;code&gt;Repository&lt;/code&gt; the interface contains methods to fetch data from the table.
Creating CRUD methods manually means writing a lot of boilerplate code unless you let the &lt;code&gt;JPARepository&lt;/code&gt; interface carry about routine implementations for you. So, we will extend the &lt;code&gt;JPARepository&lt;/code&gt; and create the interface &lt;code&gt;WishListRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Extending &lt;code&gt;JPARepository&lt;/code&gt; will automatically create and implement methods for the basic CRUD operations.&lt;/li&gt;
&lt;li&gt;We will define a method &lt;code&gt;findAllByUserIdOrderByCreatedDateDesc()&lt;/code&gt; to fetch the wishlist of a user and order the list by created the date of each entry in the wishlist. The implementation of this method will be managed automatically by the &lt;code&gt;JPARepository&lt;/code&gt;.
Following is the complete code of &lt;code&gt;WishListRepository.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Service
Now, let's implement the &lt;code&gt;Service&lt;/code&gt; class to interact with the &lt;code&gt;wishlist&lt;/code&gt; table. In the &lt;code&gt;WishListRepository&lt;/code&gt; interface, we defined the methods to interact with the database.
In the &lt;code&gt;Service&lt;/code&gt; class, we will call these methods and implement the so-called business logic. To keep things simple, we do not have any business logic, i.e. business constraints or rules defined. So, we will simply create two methods &lt;code&gt;createWishlist()&lt;/code&gt; and &lt;code&gt;readWishlist()&lt;/code&gt; . Inside these methods, we will call the methods defined in the WishListRepository interface.
Following is the complete code of &lt;code&gt;WishListService.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Controller
Now, Let’s begin with writing code for the controller. If you are familiar with &lt;a href="https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;Spring Boot&lt;/a&gt; or any other &lt;a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82"&gt;MVC framework&lt;/a&gt;, you would already know that controller defines the endpoints of the API.
Create a new file inside the Controller directory with the name &lt;code&gt;WishlistController.java&lt;/code&gt; . Since we have two endpoints, we will create two methods in the &lt;code&gt;WishlistController&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;To use the &lt;code&gt;WishListService&lt;/code&gt; and &lt;code&gt;AuthenticationService&lt;/code&gt; , we will create the two objects of respective types. We have already created the &lt;code&gt;WishListService&lt;/code&gt; in the previous section and is used to interact with the database. We created &lt;code&gt;AuthenticationService&lt;/code&gt; in a previous tutorial and is used to fetch user id of the corresponding token&lt;/li&gt;
&lt;li&gt;We will create one method with &lt;code&gt;@GetMapping&lt;/code&gt; for the GET request and &lt;code&gt;@PostMapping&lt;/code&gt; for the POST request.&lt;/li&gt;
&lt;li&gt;Now, each table entry contains the &lt;code&gt;created_date&lt;/code&gt; value also. We do not want to send that with the response. So, here comes the use of DTO. Using the &lt;code&gt;getDtoFromProduct()&lt;/code&gt; method of the &lt;code&gt;ProductService&lt;/code&gt; Class, we will store only that information about each product which we want to send as response. Hence, we create a list of &lt;code&gt;ProductDto&lt;/code&gt; object and store only the required details. We will send this list in the response.
The following is the complete code of &lt;code&gt;WishlistController.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Congratulations!!!
Congratulations, we have now added the wishlist feature to our backend.
## Suggested PRs
If you wish to contribute to our eCommerce-backend, you clone this Github repository and work on the following features related to the wishlist&lt;/li&gt;
&lt;li&gt;Create an API end-point for Deleting a Product from Wishlist
After you have implemented the feature, send us a PR. We will review and merge it into our master branch
## Reference
&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Develop an E-Commerce Application From Scratch Using Java and Spring | by Nil Madhab | Javarevisited | Dec, 2020 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 19, 2021&lt;/time&gt; ・ 6 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Build Signup, SignIn, and Role-Based Access in Our E-Commerce App | by Nil Madhab | Javarevisited | Jan, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 18, 2021&lt;/time&gt; ・ 8 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Add Products for our eCommerce App with Vue.js | by Nil Madhab | JavaScript In Plain English | Dec, 2020 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 12, 2021&lt;/time&gt; ・ 10 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>webdev</category>
      <category>sql</category>
    </item>
    <item>
      <title>Fixing Cumulative Layout Shift</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 19 Jan 2021 13:45:55 +0000</pubDate>
      <link>https://dev.to/ben/fixing-cumulative-layout-shift-41ja</link>
      <guid>https://dev.to/ben/fixing-cumulative-layout-shift-41ja</guid>
      <description>&lt;p&gt;Cumulative layout shift is the term that refers to content that jumps after initial load.&lt;/p&gt;

&lt;p&gt;Not only is CLS frustrating for users, it will also become more important for SEO purposes this year. Of course those things are connected. &lt;em&gt;Because&lt;/em&gt; it is such a big user experience problem, Google Search rankings &lt;a href="https://www.searchenginejournal.com/cumulative-layout-shift/371946/"&gt;will be cracking down on this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3i6DixSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-3705195221ca.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3i6DixSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-3705195221ca.gif" alt="cls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a few CLS issues within Forems. Google shows us about this through the Search Console within the Core Web Vitals tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZsXNCuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3102842/104930605-5d846180-5973-11eb-9a55-93e9daafd44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZsXNCuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3102842/104930605-5d846180-5973-11eb-9a55-93e9daafd44d.png" alt="Google dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yellow in this graph represents pages that need work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is what they were talking about:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGQ2ThAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-eadf62779b94.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGQ2ThAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-eadf62779b94.gif" alt="blip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happens because we load the comment reaction number &lt;em&gt;asynchronously&lt;/em&gt; so we can cache the underlying HTML.&lt;/p&gt;

&lt;p&gt;... And this was the fix...&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/12309"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Improve cumulative layout shift on comment reactions + optimizations
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#12309&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeETGNZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars0.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/12309"&gt;&lt;time&gt;Jan 16, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Refactor&lt;/li&gt;
&lt;li&gt;[ ] Feature&lt;/li&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;li&gt;[x] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Cumulative layout shift refers the sudden jump of elements on a page when any change happens after initial render.&lt;/p&gt;
&lt;p&gt;Details here: &lt;a href="https://web.dev/cls/" rel="nofollow"&gt;https://web.dev/cls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not only a bad experience for users, Google has warned that this will become a bigger ranking factor:&lt;/p&gt;
&lt;p&gt;Details here:
&lt;a href="https://www.searchenginejournal.com/cumulative-layout-shift/371946/" rel="nofollow"&gt;https://www.searchenginejournal.com/cumulative-layout-shift/371946/&lt;/a&gt;
&lt;a href="https://www.popwebdesign.net/popart_blog/en/2020/09/cumulative-layout-shift-how-to-rank-on-google-in-2021/" rel="nofollow"&gt;https://www.popwebdesign.net/popart_blog/en/2020/09/cumulative-layout-shift-how-to-rank-on-google-in-2021/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm not sure it is covered in that post, but I believe Google announced they will step up how much this matters in May 2021.&lt;/p&gt;
&lt;p&gt;In general this is &lt;em&gt;a great thing&lt;/em&gt; for Forem because we already prioritize user experience and have minimal CLS issues, however, we do have some.&lt;/p&gt;
&lt;p&gt;This PR addresses this one:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3102842/104824544-a24bb380-5820-11eb-8362-8e48dd8ed405.mov" rel="nofollow"&gt;https://user-images.githubusercontent.com/3102842/104824544-a24bb380-5820-11eb-8362-8e48dd8ed405.mov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Upon loading the page, we asynchronously fetch the number of reactions in the comment trees. This is nice so that we don't have to bust the whole page every time a reaction is made, however as currently implemented, it causes a CLS.&lt;/p&gt;
&lt;p&gt;In examining the ways to address this, I believe the best route is what I have chosen to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We include the current public reactions count inline, knowing it may be cached, and use the async fetch as a way to &lt;em&gt;adjust&lt;/em&gt; the reactions. This will improve UX, as most of the time there will be no jump at all, and if the reaction count has changed recently it will act as a small &lt;em&gt;adjustment&lt;/em&gt;, say from 7 to 8 reactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As Forems grow (like DEV), they have great potential to become a &lt;em&gt;knowledge base&lt;/em&gt;. That means that some old threads can stick around to be useful for a long time. However, over time, posts are less likely to have new reactions popping up every few minutes.&lt;/p&gt;
&lt;p&gt;This PR takes advantage of this and reduces that async query we make when there has been no new comment activity for a week. That is to say: We do not fetch new &lt;em&gt;async&lt;/em&gt; reaction numbers for posts nobody is commenting on anymore. This will reduce one request for &lt;em&gt;many&lt;/em&gt; posts.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/forem/forem/issues/12310"&gt;https://github.com/forem/forem/issues/12310&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Please replace this line with instructions on how to test your changes, as well
as any relevant images for UI changes.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-ui-accessibility-concerns" class="anchor" href="#ui-accessibility-concerns"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;UI accessibility concerns?&lt;/h3&gt;
&lt;p&gt;This should only improve possible issues.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-added-tests" class="anchor" href="#added-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Yes&lt;/li&gt;
&lt;li&gt;[ ] No, and this is why: &lt;em&gt;please replace this line with details on why tests
have not been included&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I need help with writing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-added-to-documentation" class="anchor" href="#added-to-documentation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added to documentation?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] &lt;a href="https://docs.forem.com" rel="nofollow"&gt;Developer Docs&lt;/a&gt; and/or
&lt;a href="https://forem.gitbook.io/forem-admin-guide/" rel="nofollow"&gt;Admin Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] README&lt;/li&gt;
&lt;li&gt;[ ] No documentation needed&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/12309"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Generally the way to deal with CLS is to make space for content that may load asynchronously before it loads. There are a few ways this could have been dealt with. In this case I deemed that it was reasonable to first include the &lt;em&gt;cached&lt;/em&gt; number instead of &lt;em&gt;nothing&lt;/em&gt;, and then if the number updates a few milliseconds after load.&lt;/p&gt;

&lt;p&gt;If it was not possible to modify the code such that we could include the number, it would likely suffice to include a blank HTML element that takes up the approximate space for most &lt;em&gt;like&lt;/em&gt; numbers.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Why You Should Try Theme UI</title>
      <author>Luís Eduardo </author>
      <pubDate>Tue, 19 Jan 2021 12:30:17 +0000</pubDate>
      <link>https://dev.to/luisrondow/why-you-should-try-theme-ui-39dc</link>
      <guid>https://dev.to/luisrondow/why-you-should-try-theme-ui-39dc</guid>
      <description>&lt;p&gt;Today, we have a bunch of technologies to create interactive UI in React. But, the library that I work recently open my eyes to a easy way of UI engineering and Design management, Theme UI.&lt;/p&gt;

&lt;p&gt;In my case, I mostly used it with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and Typescript, but it's possible to use with CRA and &lt;a href="https://theme-ui.com/packages/gatsby-plugin/"&gt;Gatsby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Theme UI provide us components, theming and the &lt;strong&gt;sx&lt;/strong&gt;  prop.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theming" class="anchor"&gt;
  &lt;/a&gt;
  Theming
&lt;/h1&gt;

&lt;p&gt;Theme UI works with &lt;strong&gt;ThemeProvider&lt;/strong&gt;. It's possible to use a different provider anywhere we want, but in the mostly case there's a global ThemeProvider that wrap the entire App.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;ThemeProvider&lt;/strong&gt;  has a required prop, &lt;strong&gt;theme&lt;/strong&gt;. That prop expect an object that you can include custom colors, typography, layout values and custom style variants, (e.g &lt;strong&gt;button.primary&lt;/strong&gt;, &lt;strong&gt;input.error&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// example theme.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;system-ui, sans-serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"Avenir Next", sans-serif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Menlo, monospace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#33e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e1c539&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#262626&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;lightGray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#e8e8e8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;mediumGray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#c2c4c4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;darkGray&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#50515F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mediumGray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A great way to architect that is encapsulate the &lt;strong&gt;ThemeProvider&lt;/strong&gt; in a provider file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./theme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProviderProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ProviderProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, just wrap your app in that provider. In Next.js, it's necessary to wrap the &lt;strong&gt;Component&lt;/strong&gt; prop of  &lt;strong&gt;_app&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/provider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppPropsType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/dist/next-server/lib/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppPropsType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For complete how-to-implement the theme object, take a look at  &lt;a href="https://theme-ui.com/theming"&gt;Theming Doc&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h1&gt;

&lt;p&gt;Theme UI provide a lot of built-in UI components. That is, an abstraction of components necessary for the construction of a UI. Forgot about HTML tags, the Theme UI purpose is make you think that your page is a canvas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"highlight"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Components&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;ml&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Beep&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Flex&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The components accepts layout props (e.g &lt;strong&gt;padding or p&lt;/strong&gt;, &lt;strong&gt;margin or m&lt;/strong&gt;, &lt;strong&gt;color&lt;/strong&gt;, etc) and the default props: &lt;strong&gt;as&lt;/strong&gt; (used for set the underlying HTML tag), &lt;strong&gt;variant&lt;/strong&gt; (set the a predefined style) and &lt;strong&gt;sx&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-sx-prop" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;strong&gt;sx&lt;/strong&gt; Prop
&lt;/h1&gt;

&lt;p&gt;That's the Golden eggs chicken. The &lt;strong&gt;sx&lt;/strong&gt; Prop let you style inline any JSX element you want. &lt;/p&gt;

&lt;p&gt;Unlike React default inline &lt;strong&gt;style&lt;/strong&gt; prop, with the &lt;strong&gt;sx&lt;/strong&gt; it is possible to use values from your theme, reponsive values (&lt;strong&gt;width: ['100%', '50%', '25%']&lt;/strong&gt;), media queries and CSS pseudo-class (e.g &lt;strong&gt;:hover&lt;/strong&gt;, &lt;strong&gt;:active&lt;/strong&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;
      &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;:hover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pointer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;
        &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h1"&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Hello
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dark-mode" class="anchor"&gt;
  &lt;/a&gt;
  Dark mode
&lt;/h1&gt;

&lt;p&gt;Dark mode it's the most expected feature from every UI that is used, in Theme UI was not different. &lt;/p&gt;

&lt;p&gt;To apply the dark mode it is quite simple and fast, just add Dark Mode colors on mode objects, in the style:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// style.ts&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#07c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;modes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#0cf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...and set with Color Modes hook provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useColorMode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme-ui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colorMode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setColorMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useColorMode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setColorMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorMode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Dark Mode &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;colorMode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Theme UI is a great alternative for your CSS-in-JS. I like it because I can do everything I want without work with any native CSS or other UI lib that is too much opinative.&lt;/p&gt;

&lt;p&gt;With the sx prop, it's no more necessary to use Styled Components and that makes the code cleaner and more understandable. Also, the components purpose makes build the UI quick and easy.&lt;/p&gt;

&lt;p&gt;Because all that, I really think you should try Theme UI.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;cya :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://theme-ui.com/"&gt;Theme UI Documentation&lt;br&gt;
&lt;/a&gt; &lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>typescript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Build and deploy .NET 5 app with GitHub Actions</title>
      <author>Mickaël Mottet</author>
      <pubDate>Tue, 19 Jan 2021 09:47:18 +0000</pubDate>
      <link>https://dev.to/mcklmt/build-and-deploy-net-5-app-with-github-actions-1de</link>
      <guid>https://dev.to/mcklmt/build-and-deploy-net-5-app-with-github-actions-1de</guid>
      <description>&lt;p&gt;As a personal project, I'm learning about GitHub Actions and DevOps in general. I'm a former .NET developer so it's my prefered technology to work with. &lt;br&gt;
My goal on this post, is to deploy a sample .NET 5 application to Azure App Service as a container with GitHub Actions. I will author the ARM template using Bicep.&lt;br&gt;
I work on MacOS but the same process can be achieved on Windows or Linux.&lt;/p&gt;

&lt;p&gt;Let's start.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tooling" class="anchor"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h1&gt;

&lt;p&gt;Few tools used on this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Azure Subscription to deploy resources&lt;/li&gt;
&lt;li&gt;A GitHub repository to store the source code and use GitHub Actions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/azure-cli"&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/bicep"&gt;Bicep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I recommend &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0"&gt;Dotnet 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A terminal to execute commands&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#create-new-net-5-project" class="anchor"&gt;
  &lt;/a&gt;
  Create new .NET 5 project
&lt;/h1&gt;

&lt;p&gt;First, we have to create a new project.&lt;br&gt;
In my case I created a repository called &lt;em&gt;demoaspnet5container&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The command to clone the repository to local folder is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/MCKLMT/demoaspnet5container.git
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a copy of our repository locally.&lt;br&gt;
We will create a new .NET 5 project.&lt;br&gt;
Go in the cloned folder and execute the following command. In my case, my project will be called &lt;em&gt;WebApp&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new project WebApp
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our new project has been created and you can run it locally using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now, you can browse the web site locally using your browser at &lt;em&gt;&lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can create a .gitignore file to avoid to push build artetifacts to GitHub with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Author the Docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have our application, we want to containerize it.&lt;br&gt;
To do so, we create a Dockerfile file in the same folder than the application.&lt;br&gt;
The Dockerfile looks like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/sdk:5.0 AS build-env&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet &lt;span class="nt"&gt;--version&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; *.csproj ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet restore

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;dotnet publish &lt;span class="nt"&gt;-c&lt;/span&gt; Release &lt;span class="nt"&gt;-o&lt;/span&gt; out

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; mcr.microsoft.com/dotnet/aspnet:5.0&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build-env /app/out .&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["dotnet", "WebApp.dll"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This file is pretty simple.&lt;br&gt;
First, we use a build image to restore dependencies and publish the content of the web site and secondly, we copy the resulting of the build to a new image.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#using-bicep-to-author-arm-template" class="anchor"&gt;
  &lt;/a&gt;
  Using Bicep to author ARM template
&lt;/h1&gt;

&lt;p&gt;Bicep is a recent open source project which aims to simplify the authoring of Azure Resource Manager templates.&lt;br&gt;
Once the template is created, you have to run the following command to build the ARM file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bicep build main.bicep
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command will output the ARM file you can deploy using Azure CLI for instance.&lt;/p&gt;

&lt;p&gt;I would like to share few things about it.&lt;/p&gt;

&lt;p&gt;First, in my case, I want to use Azure App Service on Linux to host the container I built previously. The container image will be built and stored with Azure Container registry. To do so, Azure App Service will need to have the rights to pull the image from Azure Container Registry. To achieve this goal, I will create a user managed identity and affect this identity to App Service. Afterwards, I assign the permission to pull the registry to the identity. Voilà, our App Service can safely access the registry.&lt;/p&gt;

&lt;p&gt;The bicep code of user managed identity and the role assignment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: 'webAppIdentity'
  location: location
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2020-04-01-preview' = {
  name: roleAssignmentName
  scope: containerRegistry
  properties: {
    roleDefinitionId: roleDefinitionId
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The complete bicep file is &lt;a href="https://github.com/MCKLMT/demoaspnet5container/blob/master/Infrastructure/main.bicep"&gt;available on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-our-github-workflow" class="anchor"&gt;
  &lt;/a&gt;
  Create our GitHub workflow
&lt;/h1&gt;

&lt;p&gt;We have all the code to be deployed on Azure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The bicep file which will be converted to ARM template&lt;/li&gt;
&lt;li&gt;The Docker image to deploy to App Service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will create a &lt;em&gt;.github/workflows/dotnet-core.yaml&lt;/em&gt; file. This file will contain all the steps needed and will be executed at each commit push on the master branch.&lt;/p&gt;

&lt;p&gt;First, we will deploy the infrastructure. We have to build our bicep file, connect to Azure and deploy the resulting template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Bicep build&lt;/span&gt;
&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aliencube/bicep-build-actions@v0.1&lt;/span&gt;
&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Infrastructure/main.bicep&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to Azure&lt;/span&gt;
&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/login@v1&lt;/span&gt;
&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;

&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Azure Resource Manager (ARM) Template&lt;/span&gt;
&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/arm-deploy@v1&lt;/span&gt;
&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy&lt;/span&gt;
&lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;resourcegroup&lt;/span&gt;
    &lt;span class="na"&gt;subscriptionId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SUBSCRIPTION_ID }}&lt;/span&gt;
    &lt;span class="na"&gt;resourceGroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;demoaspnet5container-rg&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./Infrastructure/main.json&lt;/span&gt;
    &lt;span class="na"&gt;deploymentMode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Incremental&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Secondly, we will build the container using Azure Container Registry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build image with ACR&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/CLI@v1&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;azcliversion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
    &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;az acr build --registry ${{ steps.deploy.outputs.registryNameOutput }} --image aspnet5webapp:${{ env.COMMIT_REF }} ./WebApp/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The source code will be zipped, uploaded to Azure Container Registry and built in the cloud.&lt;/p&gt;

&lt;p&gt;The final step is to tell to App Service where to get the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy the image to App Service&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/CLI@v1&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;azcliversion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
    &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;az webapp config container set --name ${{ steps.deploy.outputs.webAppNameOutput }} --resource-group ${{ steps.deploy.outputs.resourceGroupOutput }} &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Congratulations, your website should be up and running!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZCOOUo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6acghi8dv137iimi554.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZCOOUo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v6acghi8dv137iimi554.png" alt="Capture d’écran 2021-01-19 à 10.35.57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you liked this post and feel free to contact me on Twitter if you want to discuss about it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;p&gt;The complete source code is &lt;a href="https://github.com/MCKLMT/demoaspnet5container/"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Few resources to go deep on this topic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-quick-task"&gt;Tutorial: Build and deploy container images in the cloud with Azure Container Registry Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/app-service/tutorial-custom-container?pivots=container-linux"&gt;Migrate custom software to Azure App Service using a custom container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Azure/actions"&gt;GitHub Actions for deploying to Azure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>azure</category>
      <category>dotnet</category>
      <category>docker</category>
      <category>bicep</category>
    </item>
    <item>
      <title>Enough JavaScript to get you Started : #13 OOP in JS Practical Guide 👩‍💻👨‍💻</title>
      <author>Adarsh Pandya</author>
      <pubDate>Tue, 19 Jan 2021 09:07:13 +0000</pubDate>
      <link>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-13-oop-in-js-practical-guide-2ffg</link>
      <guid>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-13-oop-in-js-practical-guide-2ffg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4txyhzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610080617418/PTPhskNA4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4txyhzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610080617418/PTPhskNA4.png" alt="tutorial-cover.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#classes-and-objects" class="anchor"&gt;
  &lt;/a&gt;
  Classes and Objects
&lt;/h3&gt;

&lt;p&gt;👉 To summarize previous article , classes are nothing but a template or blue print which decides how object will look and behave with different props/methods.&lt;/p&gt;

&lt;p&gt;👉 We're Using OOP concepts because it provides us Encapsulation and Abstraction. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enough-time-to-open-vs-code" class="anchor"&gt;
  &lt;/a&gt;
  Enough ! Time to open VS code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--daC29iWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610078108814/-Gt4QAFi5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daC29iWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610078108814/-Gt4QAFi5.jpeg" alt="GettyImages-119721301-0718585.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉 Start a new project , and go to &lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👉 Let's make a Speedometer class &lt;/p&gt;

&lt;p&gt;👉 Speedometer have properties like speed and type&lt;/p&gt;

&lt;p&gt;👉 Speedometer will be having methods like increase and decrease speed&lt;/p&gt;

&lt;p&gt;👉 in &lt;code&gt;app.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Speedometer {
  speed = 0;
  type = "km/h";
  constructor(speed, type) {
    this.speed = speed;
    this.type = type;
  }
  increaseSpeed() {
    this.speed += 10;
  }
  decreaseSpeed() {
    this.speed -= 10;
  }
  getInfo() {
    console.log(this.speed);
    console.log(this.type);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 If we decode our class there are two methods for increasing and decreasing speed of speedometer , and one method for showing information to user.&lt;/p&gt;

&lt;p&gt;👉 Constructor is special function called automatically while creating object. we've used it to initialize initial speed and type of object.&lt;/p&gt;

&lt;p&gt;👉 As of now class don't consume any resources but when we make objects they will surely occupy resources.&lt;/p&gt;

&lt;p&gt;👉 Notice that by convention class names are always written in Pascal case&lt;/p&gt;

&lt;p&gt;👉 Notice we haven't typed &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; and even &lt;code&gt;function&lt;/code&gt; to specify in class. we don't need to specify that in class&lt;/p&gt;

&lt;p&gt;👉 Currently(and even by default) we haven't specified and member access specifiers so our methods and props are accessible inside as well as outside the class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-object" class="anchor"&gt;
  &lt;/a&gt;
  Making Object 🌚
&lt;/h3&gt;

&lt;p&gt;👉 Making Object of respective class simply means creating variable of that class. &lt;/p&gt;

&lt;p&gt;👉 we'll use &lt;code&gt;new&lt;/code&gt; keyword to allot resources to new object which we're creating.🏠&lt;/p&gt;

&lt;p&gt;👉 The parentheses takes arguments specified in constructor parameters to initialize starter object 😁&lt;/p&gt;

&lt;p&gt;👉 in &lt;code&gt;app.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var speedoMeter = new Speedmeter(0,"km/h");
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 now &lt;code&gt;speedoMeter&lt;/code&gt; is object of class Speedometer with initial value of &lt;code&gt;speed:0&lt;/code&gt; and &lt;code&gt;type : "km/h"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👉&lt;code&gt;speedoMeter&lt;/code&gt; can now access props and methods like increase and decrease speed&lt;/p&gt;

&lt;p&gt;👉 Go ahead and try calling different methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;object1.getInfo();
object1.increaseSpeed();
object1.increaseSpeed();
object1.getInfo();
object1.decreaseSpeed();
object1.getInfo();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 this will output in console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0
km/h
20
km/h
10
km/h
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-raw-this-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;this&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;👉 this keyword in JavaScript refers to current running object &lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 it's like we're addressing speedoMeter object with &lt;code&gt;this&lt;/code&gt;, so &lt;code&gt;this&lt;/code&gt; refers to the instance which is in execution now.&lt;/p&gt;

&lt;p&gt;👉 in speedoMeter object we can say like &lt;code&gt;this&lt;/code&gt; object have intial &lt;code&gt;speed of 0 and type of "km/h"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;👉 Notice if in class we want to refer the current running object (which is not there at the moment of creation of class) we'll use &lt;code&gt;this&lt;/code&gt; to access props of current running object.&lt;/p&gt;

&lt;p&gt;👉 so if we write like &lt;code&gt;this.speed&lt;/code&gt; it will refer to speedoMeter object which we have created afterwards.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-member-access-specifiers" class="anchor"&gt;
  &lt;/a&gt;
  Using member access specifiers
&lt;/h3&gt;

&lt;p&gt;👉 '#' is used to make any property or method of the class private.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 Private methods or props are only accessed inside class&lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 Accessing private members outside class will result in error&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Speedometer {
  #speed = 0;
  #type = "km/h";

  increaseSpeed() {
    this.#speed += 10;
  }
  #decreaseSpeed() {
    this.#speed -= 10;
  }
  getInfo() {
    console.log(this.#speed);
    console.log(this.#type);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 Notice that now if we create object of Speedometer the object can now only access increaseSpeed() and getInfo() because other members are private&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(object1.speed) ❌
console.log(object1.type) ❌
object1.getInfo(); ✅
object1.increaseSpeed(); ✅
object1.increaseSpeed(); ✅
object1.getInfo(); ✅
object1.decreaseSpeed(); ❌
object1.getInfo(); ✅
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#inheritance" class="anchor"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;👉 Inheritance refers to deriving methods and props of parent class or super class to it's child class or sub class.&lt;/p&gt;

&lt;p&gt;👉 Inheritance increases code reusability in our code&lt;/p&gt;

&lt;p&gt;👉 now , think in terms of animals all animals have &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt;, so what we can do is rather specifying this properties each and every time in new animal we can make a parent class with all these properties and a greet method which serves purpose of greeting.&lt;/p&gt;

&lt;p&gt;👉 Syntax : &lt;code&gt;class SubClass extends ParentClass&lt;/code&gt;  that's it 😎 now we can use parent class's props and methods in child class 🎉&lt;/p&gt;

&lt;p&gt;👉 Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Animal {
  color;
  name;

  greet() {
    console.log("hey i'm " + this.name);
    console.log("my color is " + this.color);
  }
}

class Dog extends Animal {
  constructor(name, color) {
    super();
    this.name = name;
    this.color = color;
  }
}

var dog = new Dog("tommy", "brown");
dog.greet();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hey i'm tommy
my color is brown
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;👉 Notice if we call constructor of sub class it's compulsory to call parent class's constructor regardless of constructor is having params or not.&lt;/p&gt;

&lt;p&gt;👉 Using a reserved keyword known as super we can call parent class's constructor like =&amp;gt; &lt;strong&gt;super();&lt;/strong&gt; or &lt;strong&gt;super(name,color)&lt;/strong&gt; [if constructor is having params]&lt;/p&gt;

&lt;p&gt;👉 Something looks strange? we are using &lt;code&gt;color&lt;/code&gt;,&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;greet()&lt;/code&gt; inside as well as outside Dog class even though these props and methods wasn't declared in Dog class.&lt;/p&gt;

&lt;p&gt;👉 That's how inheritance works, it simple words it will copy all the public and protected methods and props in child class which result in code reusability😀&lt;/p&gt;

&lt;p&gt;Let me know in comment section if you have any doubt or feedback. it's always worth to give time to thriving developer community :) &lt;br&gt;
&lt;br&gt;
Keep Coding ❤
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hey-let-connect" class="anchor"&gt;
  &lt;/a&gt;
  Hey , Let' Connect👋
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://twitter.com/codarsh"&gt;Twitter&lt;/a&gt; / &lt;a href="https://github.com/WhoAdarshPandya/"&gt;Github&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Semantics, what does it mean?</title>
      <author>Erik Kroes</author>
      <pubDate>Tue, 19 Jan 2021 08:10:10 +0000</pubDate>
      <link>https://dev.to/erikkroes/semantics-what-does-it-mean-1pe3</link>
      <guid>https://dev.to/erikkroes/semantics-what-does-it-mean-1pe3</guid>
      <description>&lt;p&gt;When people talk about the quality of HTML code, it is often about semantics. But what are semantics? What is semantic HTML, and why should you care about it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href="#what-is"&gt;What is Semantic HTML?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#what-do"&gt;Wat do semantics do?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
&lt;a href="#how-should-i-do-it"&gt;How should I do it?&lt;/a&gt;
    &lt;ol&gt;
       &lt;li&gt;&lt;a href="#what-do-i-want-to-communicate"&gt;What do I want to communicate?&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href="#is-my-page-structure-clear"&gt;Is my page structure clear?&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="#is-that-it"&gt;Is that it?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="what-is"&gt;What is Semantic HTML?&lt;/h2&gt;

&lt;p&gt;Semantics is communicating your intention through your chosen HTML. This does not guarantee the correct outcome, but if you communicate a different intention than the outcome, then it is not correct anyway.&lt;br&gt;
A well-known HTML tag is, for example, the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;. This tag is often used for the most important heading (heading 1) on a page.&lt;br&gt;
&lt;code&gt;&amp;lt;h1&amp;gt; Semantics, what does it mean? &amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The tag or element communicates the intention: this is the main heading, this is what the page is about. If (for example due to an error in the CMS) there is an entire article in a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; then the result does not match the intention.&lt;br&gt;
In the same way, you can create a link (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) that goes nowhere, or a button (&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;) that does nothing. With semantic HTML you indicate your intention. That is the first step. The next step is to match the result.&lt;br&gt;
You can compare it with TypeScript or other languages ​​that contain typing. These can not only contain data, but also say something about the data they contain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXFPzeyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/reclni2g4kef3uexyhsm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXFPzeyQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/reclni2g4kef3uexyhsm.jpeg" alt="A power socket in a wall with water streaming out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="what-do"&gt;What do semantics do?&lt;/h2&gt;

&lt;p&gt;As indicated, semantics express the intention of an element. If tools can rely on this intention (the semantics indeed say something about the data in the elements) then they can use the content of the elements for all kinds of purposes.&lt;br&gt;
Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Readability tools&lt;/strong&gt; - There are now many ways to read texts in a more readable format. Sometimes they are stand alone like Pocket and Instapaper. In Firefox and Safari there are tools built in. You can present an existing web page in a different (more readable) way.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Translation tools&lt;/strong&gt; - Tools like Google Translate can make use of the context that you communicate as a developer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Assistive technology&lt;/strong&gt; - Software such as screen readers inform their users of the semantic value of the HTML they are reading. This way a user can understand whether something is important or only secondary, and whether something is a paragraph or a list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;People Reading Your Code&lt;/strong&gt; - It may sound obvious, but readable code is nice code to work with. You often write HTML code not only for yourself but for others, or even for yourself at a different time. Clearly written HTML is more readable and more future-proof.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Custom CSS, adblocking, etc&lt;/strong&gt; - Basically anything that "hooks" into your code benefits from readable, resilient and robust code. If a visitor has Custom CSS for readable headings, then there need to be headings first!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SEO&lt;/strong&gt; - Search engines are like actual people sometimes. They also want to know what information you provide and what the context of that information is.
By creating structure in your code you do not end up with something disjointed. It provides guidance for everyone who has to work with it: developers, visitors and automated tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="how-should-i-do-it"&gt;How should I do it?&lt;/h2&gt;

&lt;p&gt;Does this mean you need to memorize &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;all HTML elements&lt;/a&gt;? No, thankfully. Even though there aren’t really that many. &lt;br&gt;
It is nice to find out which elements you know though! Have you tried the &lt;a href="https://codepen.io/plfstr/full/zYqQeRw"&gt;HTML Tags Memory Test&lt;/a&gt; yet?&lt;/p&gt;

&lt;h3 id="what-do-i-want-to-communicate"&gt;What do I want to communicate?&lt;/h3&gt;

&lt;p&gt;This question is very valuable in many situations. If you are writing HTML and you add an element, ask yourself if the element represents your intention correctly. Are you writing a paragraph? Then it makes sense to use a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;. Are you doing something for purely visual reasons, without wanting to communicate a specific intention? Then you might be fine with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; (these elements don't communicate any intention).&lt;br&gt;
On the other hand, do you use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; while you want to convey a specific intention? Maybe you want to check the list of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;all HTML elements&lt;/a&gt; whether there is a suitable alternative.&lt;/p&gt;

&lt;h3 id="is-my-page-structure-clear"&gt;Is my page structure clear?&lt;/h3&gt;

&lt;p&gt;Every page benefits from a good structure. A newspaper relies on sections, columns and clear headlines. A page on the web (and the underlying HTML) aren’t very different from that.&lt;br&gt;
See if you can organize your page with clear HTML landmarks such as &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;. A landmark works just like a landmark in real life. If a village has five church towers it becomes difficult to say "go left at the church tower".&lt;br&gt;
You can also use headings (just like with a newspaper). The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the main page header; this indicates what the whole page is about. Technically, all content is covered. If you want to use a heading under the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, use the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;. Everything that falls under the &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; in the code should logically also fall under this in the content. You create a hierarchy with your headings. Do not skip headings (don't go from &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt;) and only place something under a heading if it logically falls under it.&lt;/p&gt;

&lt;h2 id="is-that-it"&gt;Is that it?&lt;/h2&gt;

&lt;p&gt;Yes, kind of actually. Communicate as clearly as possible what the intention of your code is (meta data) and do not let your intention be an empty promise.&lt;/p&gt;

</description>
      <category>html</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Server-Side Rendering from zero to hero</title>
      <author>Sergey</author>
      <pubDate>Tue, 19 Jan 2021 07:45:40 +0000</pubDate>
      <link>https://dev.to/alexsergey/server-side-rendering-from-zero-to-hero-2610</link>
      <guid>https://dev.to/alexsergey/server-side-rendering-from-zero-to-hero-2610</guid>
      <description>&lt;ul&gt;
&lt;li&gt;In this article, we will analyze the impact of SSR on SEO optimization of the application.&lt;/li&gt;
&lt;li&gt;We will walk with you through the way of porting a regular &lt;strong&gt;React&lt;/strong&gt; application to SSR.&lt;/li&gt;
&lt;li&gt;We will look at the processing of asynchronous operations in SSR applications.&lt;/li&gt;
&lt;li&gt;We will see how to do SSR in applications with &lt;strong&gt;Redux Saga&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We will configure &lt;strong&gt;Webpack 5&lt;/strong&gt; to work with an SSR application.&lt;/li&gt;
&lt;li&gt;We will also consider the intricacies of SSR: Generating &lt;strong&gt;HTML Meta Tags&lt;/strong&gt;, &lt;strong&gt;Dynamic Imports&lt;/strong&gt;, working with &lt;strong&gt;LocalStorage&lt;/strong&gt;, &lt;strong&gt;debugging&lt;/strong&gt;, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of years ago, while working on our &lt;a href="https://www.cleverbrush.com/"&gt;Cleverbrush&lt;/a&gt; product, a friend of mine and I faced an SEO optimization problem. We created the website, which in theory, was supposed to sell our product, and it was a regular Single Page React Application, hasn't appeared in Google search results! In the course of several detailed analyses, the &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; library was born, and our site finally appeared on the first page of Google search results. So let us work this out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The main problem with Single Page applications is that the server gives back a blank HTML page to the client. Its formation occurs only after all JS has been downloaded (this is all your code, libraries, framework). In most cases, this is more than 2 megabytes in size + code processing delays.&lt;/p&gt;

&lt;p&gt;Even if a Google-bot knows how to execute JS, it only receives content after some time, which is critical for the site's ranking. Google-bot simply sees a blank page for a few seconds! This is a bad thing!&lt;/p&gt;

&lt;p&gt;Google starts issuing red cards if your site takes more than 3 seconds to render. First Contentful Paint, Time to Interactive are metrics that will be underestimated with Single Page Application. Read more &lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web?hl=en"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also less advanced search engines that simply do not know how to work with JS. They will not index the Single Page Application.&lt;/p&gt;

&lt;p&gt;Many factors still affect the ranking rate of a site, some of which we will analyze later in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering" class="anchor"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h2&gt;

&lt;p&gt;There are several ways to solve the problem of a blank page when loading, consider a few of them:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site Generation (SSG)&lt;/strong&gt;. Make a pre-render of the site before uploading it to the server. A very simple and effective solution. Great for simple web pages, no backend API interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server-Side Rendering (SSR)&lt;/strong&gt;. Render content at runtime on the server. With this approach, we can make backend API requests and serve HTML along with the necessary content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverside-rendering-ssr" class="anchor"&gt;
  &lt;/a&gt;
  Server-Side Rendering (SSR)
&lt;/h2&gt;

&lt;p&gt;Let's take a closer look at how SSR works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need to have a server that executes our application exactly as a user would do in a browser. Making requests for the necessary resources, rendering all the necessary HTML, filling in the state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server gives the client the full HTML, the full state, and also gives all the necessary JS, CSS, and other resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The client receives HTML and resources, synchronizes the state, and works with the application as with a normal Single Page Application. The important point here is that the state must be synchronized.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A schematic SSR application looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SkBX4m3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://natrube.net/issr/schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SkBX4m3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://natrube.net/issr/schema.png" alt="iSSR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From previously described SSR work, we can highlight the following &lt;strong&gt;problems&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The application is divided into the server and client sides. That is, we essentially get 2 applications. This separation should be minimal, otherwise, support for such application will be difficult.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server should be able to handle API requests with data. These operations are asynchronous and are called &lt;strong&gt;Side Effects&lt;/strong&gt;. By default, React's &lt;strong&gt;renderToString&lt;/strong&gt; server-side method is synchronous and cannot handle asynchronous operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the client, the application must sync state and continue to work as a normal SPA application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#issr" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This is a small library that can solve the problems of asynchronous processing of requests for data and synchronization of state from the server to client. This is not another &lt;strong&gt;Next.JS&lt;/strong&gt; killer, no! &lt;strong&gt;Next.JS&lt;/strong&gt; is a great framework with many features, but in order to use it, you will need to completely rewrite your application and follow the rules of &lt;strong&gt;Next.JS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at the example of how easy it is to port a regular SPA application to SSR.&lt;/p&gt;

&lt;p&gt;For example, we have a simple application with asynchronous logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;line-through&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This code renders a list of completed tasks using the &lt;a href="https://jsonplaceholder.typicode.com/"&gt;jsonplaceholder&lt;/a&gt; service to emulate API interaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-move-the-application-to-ssr" class="anchor"&gt;
  &lt;/a&gt;
  Let's move the application to SSR!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Install dependencies
&lt;/h3&gt;

&lt;p&gt;To install &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; you need to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @issr/core &lt;span class="nt"&gt;--save&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; @issr/babel-plugin &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Install dependencies for the webpack 5 build system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @babel/core @babel/preset-react babel-loader webpack webpack-cli nodemon-webpack-plugin &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;One of the non-obvious aspects of SSR application development is that some APIs and libraries can work on the client but not on the server. One such API is **fetch&lt;/em&gt;&lt;em&gt;. This method is absent in **nodejs&lt;/em&gt;* where the server logic of our application will be executed. In order to work the same here, install the package:*&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;node-fetch &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We will use &lt;strong&gt;express&lt;/strong&gt; for the server, but it doesn't matter, you can use any other framework:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's add a module for serializing the application state on the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;serialize-javascript &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-configuring-webpackconfigjs" class="anchor"&gt;
  &lt;/a&gt;
  Step 2. Configuring webpack.config.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NodemonPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodemon-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commonConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;jsx$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;],&lt;/span&gt;
              &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/babel-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
              &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;commonConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/server.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodemonPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;commonConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/client.jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To compile an SSR application, the &lt;strong&gt;webpack&lt;/strong&gt; config file must consist of two configurations (MultiCompilation). One for building the server, the other for building the client. We are passing an array to &lt;em&gt;module.exports&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To configure the server, we need to set &lt;em&gt;target: 'node'&lt;/em&gt;. Target is an optional for the client. By default, webpack config has target: ‘web’. target: 'node' allows webpack to handle server code, default modules such as path, child_process, and more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;const commonConfig&lt;/em&gt; - common part of the settings. Since the server and client code share the same application structure, they must handle JS the same way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to add a plugin to babel-loader:&lt;br&gt;
&lt;em&gt;@issr/babel-plugin&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a helper &lt;em&gt;@issr/babel-plugin&lt;/em&gt; that allows you to track asynchronous operations in your application. Works great with &lt;strong&gt;babel/typescript-preset&lt;/strong&gt;, and other babel plugins.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-3-modification-of-the-code" class="anchor"&gt;
  &lt;/a&gt;
  Step 3. Modification of the code.
&lt;/h3&gt;

&lt;p&gt;Let's move the general logic of our application into a separate file &lt;strong&gt;App.jsx&lt;/strong&gt;. This is necessary so that only the rendering logic remains in the &lt;strong&gt;client.jsx&lt;/strong&gt; and &lt;strong&gt;server.jsx&lt;/strong&gt; files, nothing else. Thus, we will have the entire application code in common.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.jsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSsrState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSsrState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;line-through&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;client.jsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hydrate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We changed the default React &lt;strong&gt;render&lt;/strong&gt; method to &lt;strong&gt;hydrate&lt;/strong&gt;, which works for SSR applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server.jsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;renderToString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom/server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderToString&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="root"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening on port 4000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the server code, note that we have to share the folder with the built SPA webpack application:&lt;br&gt;
&lt;em&gt;app.use (express.static ('public'));&lt;/em&gt;&lt;br&gt;
Thus, the HTML received from the server will continue to work as a regular SPA&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-4-handling-asynchronous-functions" class="anchor"&gt;
  &lt;/a&gt;
  Step 4. Handling asynchronous functions.
&lt;/h3&gt;

&lt;p&gt;We have separated the common part of the application, connected the compiler for the client and server parts of the application. And now let's solve the rest of the problems associated with asynchronous calls and state.&lt;/p&gt;

&lt;p&gt;To handle asynchronous functions, you need to wrap them in the &lt;strong&gt;useSsrEffect&lt;/strong&gt; hook from the &lt;a href="https://github.com/AlexSergey/issr"&gt;@issr/core&lt;/a&gt; package:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.jsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;line-through&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In server.jsx, replace the standard &lt;strong&gt;renderToString&lt;/strong&gt; with the &lt;strong&gt;serverRender&lt;/strong&gt; from the &lt;a href="https://github.com/AlexSergey/issr"&gt;@issr/core&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serverRender&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialize-javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serverRender&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="root"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="/index.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening on port 4000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you run the application straight away, nothing will happen! &lt;strong&gt;We will not see the result of executing the getTodos asynchronous function&lt;/strong&gt;. Why not? We forgot to sync state. Let's fix this.&lt;/p&gt;

&lt;p&gt;In App.jsx, replace the standard &lt;strong&gt;setState&lt;/strong&gt; with &lt;strong&gt;useSsrState&lt;/strong&gt; from the &lt;a href="https://github.com/AlexSergey/issr"&gt;@issr/core&lt;/a&gt; package :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.jsx&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSsrState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSsrState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useSsrEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTodos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;line-through&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's make changes to client.jsx to synchronize the state transferred from the server to the client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hydrate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSsr&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SSR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSsr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SSR_DATA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;hydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SSR&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SSR&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;window.SSR_DATA&lt;/strong&gt; is an object passed from the server with a cached state for synchronization on the client.&lt;/p&gt;

&lt;p&gt;Let's make the transfer state on the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;serverRender&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@issr/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;serialize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serialize-javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serverRender&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
      window.SSR_DATA = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;isJSON&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="s2"&gt;
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="root"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="/index.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening on port 4000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please note that the &lt;strong&gt;serverRender&lt;/strong&gt; function passes not only HTML but also the state that passed through &lt;strong&gt;useSsrState&lt;/strong&gt;, we pass it to the client as a global variable &lt;strong&gt;SSR_DATA&lt;/strong&gt;. On the client, this state will be automatically synchronized.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-build-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Step 5. Build scripts
&lt;/h3&gt;

&lt;p&gt;It remains to add scripts to &lt;strong&gt;package.json&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack -w --mode development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#redux-and-other-state-management-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Redux and other State Management libraries
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; perfectly supports various state management libraries. While working on &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt;, I noticed that React State Management libraries are divided into 2 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Implements working with Side Effects on a React layer. For example, &lt;strong&gt;Redux Thunk&lt;/strong&gt; turns the Redux dispatch call into an asynchronous method, which means we can implement SSR as in the example above for setState. The example of redux-thunk is available &lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/10.1-redux-thunk"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement working with Side Effects on a separate layer from React. For example, &lt;strong&gt;Redux Saga&lt;/strong&gt; brings work with asynchronous operations to Sagas.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at the example of SSR implementation for an application with &lt;strong&gt;Redux Saga&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We will not consider this example in as much detail as the previous one. The complete code can be found &lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/10-redux-sagas"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-saga" class="anchor"&gt;
  &lt;/a&gt;
  Redux Saga
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For a better understanding of what is happening, read the previous chapter&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The server runs our application through &lt;strong&gt;serverRender&lt;/strong&gt;, the code is executed sequentially, performing all the &lt;strong&gt;useSsrEffect&lt;/strong&gt; operations.&lt;/p&gt;

&lt;p&gt;Conceptually, &lt;strong&gt;Redux&lt;/strong&gt; does not perform any asynchronous operations when working with sagas. Our task is to send an action to start an asynchronous operation in the Cag layer, separate from our react-flow. In the example from the link above, in the &lt;strong&gt;Redux&lt;/strong&gt; container, we execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useSsrEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchImage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is not an asynchronous operation! But &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; realizes that something has happened in the system. &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; will go through the rest of the React components doing all the &lt;strong&gt;useSsrEffect&lt;/strong&gt; and upon completion of the &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt; will call the callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;serverRender&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;store&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;rootSaga&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPromise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thus, we can process asynchronous operations not only on the React level but on other levels too, in this case, firstly we put the sagas we need to execute, then which we started the &lt;strong&gt;serverRender&lt;/strong&gt; callback and wait for them to end.&lt;/p&gt;

&lt;p&gt;I have prepared many examples of using &lt;a href="https://github.com/AlexSergey/issr"&gt;iSSR&lt;/a&gt;, you can find them &lt;a href="https://github.com/AlexSergey/issr/tree/master/examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssr-tricks" class="anchor"&gt;
  &lt;/a&gt;
  SSR tricks
&lt;/h2&gt;

&lt;p&gt;There are many challenges along the way in developing SSR applications. The problem of asynchronous operations is just one of them. Let's take a look at other common problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-meta-tags-for-ssr" class="anchor"&gt;
  &lt;/a&gt;
  HTML Meta Tags for SSR
&lt;/h3&gt;

&lt;p&gt;An important aspect of SSR development is using correct &lt;a href="https://www.w3schools.com/tags/tag_meta.asp"&gt;HTML meta tags&lt;/a&gt;. They tell the search bot the key information on the page.&lt;br&gt;
To accomplish this task, I recommend you to use one of the modules:&lt;br&gt;
&lt;a href="https://github.com/staylor/react-helmet-async"&gt;React-Helmet-Async&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/s-yadav/react-meta-tags"&gt;React-Meta-Tags&lt;/a&gt;&lt;br&gt;
I have prepared some examples:&lt;br&gt;
&lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/5.1-meta-tags-helmet"&gt;React-Helmet-Async&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/5-meta-tags"&gt;React-Meta-Tags&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dynamic-imports" class="anchor"&gt;
  &lt;/a&gt;
  Dynamic Imports
&lt;/h3&gt;

&lt;p&gt;To reduce the size of the final application bundle, the application can be divided into parts. For example, &lt;strong&gt;dynamic imports webpack&lt;/strong&gt; allows you to automatically split your application. We can move individual pages into chunks. With SSR, we need to be able to handle the data pieces of the application as a whole. To do this, I recommend using the wonderful &lt;a href="https://loadable-components.com/docs/server-side-rendering/"&gt;@loadable&lt;/a&gt; module.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dummies" class="anchor"&gt;
  &lt;/a&gt;
  Dummies
&lt;/h3&gt;

&lt;p&gt;Some components may not be rendered on the server. For example, if you have a post and comments, it is not advisable to handle both asynchronous operations. Post data takes precedence over comments to it, it is this data that forms the SEO load of your application. Therefore, we can exclude unimportant parts using type checks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;windows&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#localstorage-data-storage" class="anchor"&gt;
  &lt;/a&gt;
  localStorage, data storage
&lt;/h3&gt;

&lt;p&gt;NodeJS doesn't support localStorage. We use cookies instead of localStorage to store session data. Cookies are sent automatically on every request. Cookies have limitations, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cookies are an old way of storing data, they have a limit of 4096 bytes (actually 4095) per cookie.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;localStorage is an implementation of the storage interface. It stores data without an expiration date and is only cleared by JavaScript or clearing browser cache/locally stored data - as opposed to cookie expiration.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some data needs to be passed in the URL. For example, if we use localization on the site, then the current language will be part of the URL. This approach will improve SEO as we will have different URLs for different localizations of the application and provide data transfer on demand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-server-components" class="anchor"&gt;
  &lt;/a&gt;
  React Server Components
&lt;/h3&gt;

&lt;p&gt;React Server Components might be a good addition to SSR. Its idea is to reduce the load on the Bundle by executing the components on the server and issuing a ready-made JSON React tree. We saw something similar in &lt;strong&gt;Next.JS&lt;/strong&gt;. Read more at the &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing" class="anchor"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;React Router&lt;/strong&gt; supports SSR out of the box. The difference is that on the server the &lt;strong&gt;StaticRouter&lt;/strong&gt; is used with the current URL passed, and on the client &lt;strong&gt;Router&lt;/strong&gt; determines the URL automatically using the location API. &lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/4-koa-react-router"&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debugging" class="anchor"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;Debugging on the server can be performed just like any debugging of node.js applications via &lt;a href="https://nodejs.org/en/docs/guides/debugging-getting-started/"&gt;inpsect&lt;/a&gt;.&lt;br&gt;
To do this, add to the &lt;strong&gt;webpack.config&lt;/strong&gt; for the nodejs application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;devtool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source-map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in the &lt;strong&gt;NodemonPlugin&lt;/strong&gt; settings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NodemonPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;nodeArgs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--inspect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, to improve work with the source map, you can add the module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;source-map-support &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;nodeArgs&lt;/em&gt; of &lt;strong&gt;NodemonPlugin&lt;/strong&gt; options add:&lt;br&gt;
&lt;em&gt;‘--Require =“ source-map-support / register ”’&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/AlexSergey/issr/tree/master/examples/18-debugging"&gt;Example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs" class="anchor"&gt;
  &lt;/a&gt;
  Next.JS
&lt;/h3&gt;

&lt;p&gt;If you are building an application from scratch, I recommend you to pay attention to this framework. It is currently the most popular solution for building SSR-enabled applications from scratch. One of the advantages is that everything comes out of the box (build system, router). The minus - it is necessary to rewrite the existing application, use the &lt;strong&gt;Next.JS&lt;/strong&gt; approaches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-isnt-just-about-ssr" class="anchor"&gt;
  &lt;/a&gt;
  SEO isn't just about SSR!
&lt;/h3&gt;

&lt;p&gt;Google bot SEO criteria include many metrics. Renders data, gets the first byte, etc. this is just a part of the metrics! When SEO optimization of the application, it is necessary to minimize image sizes, bundles, use HTML tags and HTML meta tags correctly, and so on.&lt;br&gt;
To check your site for SEO optimization, you can use:&lt;br&gt;
&lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;lighthouse&lt;/a&gt;&lt;br&gt;
&lt;a href="https://sitechecker.pro/"&gt;sitechecker&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;pagespeed&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, I have described the main problems, but not all of developing SSR applications. But the purpose of this article is to show you that SSR is not that bad. With this approach, we can live and make great apps! I wish everyone who has read to the end successful and interesting projects, fewer bugs, and good health at this difficult time for all of us!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to remove tab bar border in React Navigation</title>
      <author>Aman Mittal</author>
      <pubDate>Tue, 19 Jan 2021 06:11:46 +0000</pubDate>
      <link>https://dev.to/amanhimself/how-to-remove-tab-bar-border-in-react-navigation-1mm5</link>
      <guid>https://dev.to/amanhimself/how-to-remove-tab-bar-border-in-react-navigation-1mm5</guid>
      <description>&lt;p&gt;Navigation plays an important role in mobile applications and the React Navigation library does an awesome job in providing a completely customizable interface for utilizing different navigation patterns to React Native apps.&lt;/p&gt;

&lt;p&gt;Having the liberty to customize tab bars with React Navigation, one of my favorite customizable options (depending on the UI design of an app) is to remove the border from the Tab bar.&lt;/p&gt;

&lt;p&gt;Here is an example of the border that is the default when the React Navigation Bottom Tabs library is utilized to create a tab bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9Hsd4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ttIMI5V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9Hsd4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ttIMI5V.png" alt="ss1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the demonstration purpose, I am using an Expo project created using the &lt;code&gt;expo-cli&lt;/code&gt; command-line tool. To create a similar new Expo project, you can execute the command and choose the &lt;code&gt;tabs&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;expo init yourProjectName

&lt;span class="c"&gt;# when prompted, choose the tabs option&lt;/span&gt;
&lt;span class="c"&gt;# in managed workflow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This expo project comes with a default bottom tab navigator whose configuration can be found in the file &lt;code&gt;navigation/BottomTabNavigator.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-the-tabbar" class="anchor"&gt;
  &lt;/a&gt;
  Customize the TabBar
&lt;/h2&gt;

&lt;p&gt;The Bottom Tab Bar React Navigation library gives an object called &lt;code&gt;tabBarOptions&lt;/code&gt; to customize a tab bar. This object contains props that can be used to apply custom styles and one of the generic property it has is called &lt;code&gt;style&lt;/code&gt;. This property is commonly used to change the styles of the tab bar, for example, by applying the &lt;code&gt;backgroundColor&lt;/code&gt; styles' property.&lt;/p&gt;

&lt;p&gt;To remove the border, add the &lt;code&gt;tabBarOptions&lt;/code&gt; prop and inside it, add a style property called &lt;code&gt;borderTopWidth&lt;/code&gt; with a value &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BottomTab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Navigator&lt;/span&gt;
  &lt;span class="nx"&gt;initialRouteName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TabOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="nx"&gt;tabBarOptions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;borderTopWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here is the output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Kmk0sSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WqR3X9I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Kmk0sSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WqR3X9I.png" alt="ss2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do note that this property can also be used to increase the width of the top border.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#removing-shadow-on-android-device" class="anchor"&gt;
  &lt;/a&gt;
  Removing shadow on Android Device
&lt;/h2&gt;

&lt;p&gt;After applying this &lt;code&gt;style&lt;/code&gt; property, the width of the top border is removed from an Android device. However, there is a shadow at the top border of the tab bar that remains.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8PLNN8dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ofnBBis.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PLNN8dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ofnBBis.jpg" alt="ss3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To remove this shadow, set the &lt;code&gt;elevation&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;borderTopWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;elevation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0IeZ1e9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3TEx5ib.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0IeZ1e9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3TEx5ib.jpg" alt="ss4"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://amanhimself.dev/blog/"&gt;🔥 More React Native posts&lt;/a&gt; | &lt;a href="https://twitter.com/amanhimself"&gt;👋 Twitter&lt;/a&gt; | &lt;a href="https://amanhimself.substack.com/"&gt;💌 Weekly Newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Python Features You Should Know (That can Save you A Lot of Time !)</title>
      <author>Jordan Williams</author>
      <pubDate>Tue, 19 Jan 2021 05:45:33 +0000</pubDate>
      <link>https://dev.to/platinumcoder/python-features-you-should-know-that-can-save-you-a-lot-of-time-33mf</link>
      <guid>https://dev.to/platinumcoder/python-features-you-should-know-that-can-save-you-a-lot-of-time-33mf</guid>
      <description>&lt;p&gt;Using python over the years, I came across some useful features that would have saved me a lot of time if I had known about them a little bit earlier. These little python gems can help keep your code more DRY( &lt;strong&gt;&lt;em&gt;D&lt;/em&gt;&lt;/strong&gt;o Not &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt;epeat &lt;strong&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/strong&gt;ourself) and clean.&lt;/p&gt;

&lt;p&gt;By the time you are finished with this article, I can guarantee you that you will be using some of these features in your very own python programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: You can use any IDE or text editor that you are familiar with ( python’s default IDE is known as “IDLE” and that can also be used). For these features, I will be demonstrating using Visual Studio Code (VS Code) with a python extension.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For maximum appreciation, it would be best if you’ve had some experience in using python. However, even if you have never used python before, this article will help you on your python journey. So sit back, relax and enjoy !&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enumerate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Enumerate&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s first start off with Enumerate.&lt;/p&gt;

&lt;p&gt;Let’s say you had a list of fruits. You also wanted to loop through all the fruits that are in that list and also keep a track of the position(index) of each fruit in that list using a for-loop.&lt;/p&gt;

&lt;p&gt;The following code is an example of this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qU_kDPXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXso_Vf1ELO0FY2G5hgf1Mw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qU_kDPXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AXso_Vf1ELO0FY2G5hgf1Mw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 apple
1 banana
2 mango
3 melon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see we got each fruit in the list with its corresponding index. You could also use a while loop to complete this task but it would also lead to the same issue — a lengthy code .&lt;/p&gt;

&lt;p&gt;A better way to solve this issue is to use enumerate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OJUVW_Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AlDMG_XIiLh2hrvpbtcZucw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OJUVW_Tm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AlDMG_XIiLh2hrvpbtcZucw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 apple
1 banana
2 mango
3 melon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;See, the output is the same!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We were able to do the same task with less lines of code. But how?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;enumerate(fruit_lst)&lt;/code&gt;. This is where enumerate comes in. Inside our for-loop, &lt;code&gt;enumerate(fruit_lst)&lt;/code&gt; allows us to keep track of the index of each element (fruit). Each iteration in the loop returns a tuple with the first element being the index and the second element being the current element in the list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;count,fruit&lt;/code&gt; breaks apart that tuple which contains two elements, assigning the first and second element to them respectively.&lt;/p&gt;

&lt;p&gt;It is only fair to imagine that &lt;code&gt;enumerate&lt;/code&gt; turned &lt;code&gt;fruit_lst&lt;/code&gt; into a list of tuples as seen below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[(0,"apple"),(1,"banana"),(2,"mango"),(3,"melon")]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#easier-printing-to-the-console" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Easier Printing to the Console&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Too many times I have seen developers over complicate printing. Instead of using the typical concatenation or &lt;code&gt;.format()&lt;/code&gt; method of a string, there is a much easier way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXZcmlg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AHBtbWAZKNayPruudTBwrhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXZcmlg1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AHBtbWAZKNayPruudTBwrhw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look how clean and simple the code snippet above is. All it requires is an &lt;code&gt;f&lt;/code&gt; before any string.&lt;/p&gt;

&lt;p&gt;Any variable that needs to be in the string can be encased in-between the double curly braces &lt;code&gt;{ }&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10 + 20 = 30
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#keyword-arguments-kwargs-and-nonkeyword-argumentsargs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keyword Arguments (**kwargs) and Non-Keyword Arguments(*args)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You might have come across these two in python’s documentation. A lot of functions in python libraries are implemented using keyword and non-keyword arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The terms parameters and arguments will be used quite frequently throughout this section and onwards in this article. From a function’s perspective:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A parameter is a variable that is listed within the parentheses in a function’s definition. However, an argument is a value that is sent to the function whenever it is called.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YikfIwCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AnU5M6nPXbPZlRzXsmQPYaQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YikfIwCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AnU5M6nPXbPZlRzXsmQPYaQ.png" alt="parameters vs arguments"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;parameters vs arguments&lt;/p&gt;

&lt;p&gt;Let’s Begin.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#nonkeyword-argumentsargs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Non-Keyword Arguments(*args)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Normally when declaring a function, we have to explicitly declare the number of arguments that are needed for that function.&lt;/p&gt;

&lt;p&gt;The function below adds 3 numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HsS8-pxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A4KujYblHRnBBeYD9dVVq8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsS8-pxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A4KujYblHRnBBeYD9dVVq8w.png" alt="function to add 3 numbers"&gt;&lt;/a&gt;&lt;em&gt;function to add 3 numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The function above explicitly declares three arguments &lt;strong&gt;a&lt;/strong&gt;, &lt;strong&gt;b&lt;/strong&gt; and &lt;strong&gt;c&lt;/strong&gt;. No arguments apart from those three can be placed within the function.&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;60
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Our output is obvious !&lt;/p&gt;

&lt;p&gt;However, let’s say you had no idea how many numbers you wanted to add. It could have been four numbers, maybe two or even one hundred numbers. We therefore want a multi-purpose function that can handle any number of arguments.&lt;/p&gt;

&lt;p&gt;This is where the non keyword arguments come in (&lt;code&gt;*args&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKoTpeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AvgsHOUshSx4mWy7k_x3dgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWKoTpeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AvgsHOUshSx4mWy7k_x3dgw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6
10
15
21
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the function was was able to handle various amounts of numbers that were thrown at it. This works because of the &lt;code&gt;*args&lt;/code&gt; declaration. By placing an asterisk(*) to the left of any variable in a function’s parameters you can achieve this goal.&lt;/p&gt;

&lt;p&gt;It works by storing all the arguments in a tuple that is assigned to a variable defined in the parameters. In this case &lt;code&gt;args&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;args&lt;/code&gt; is an arbitrary name that was given to the variable. Any name could have been used.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you were to print out &lt;code&gt;args&lt;/code&gt; in the console, the final print statement would have be seen as below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(1, 2, 3, 4, 5, 6)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#keyword-arguments" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keyword Arguments&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Up next we have keyword arguments. Keyword arguments can be denoted by key-value pairs inside the function arguments.&lt;/p&gt;

&lt;p&gt;Keyword arguments are similar to non-keyword arguments. However, the only difference found between them is that keyword arguments use double asterisks(**) to the left of the variable name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The function below uses keyword arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ApeTg_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ad1AD9rtgksONDhJJpIDZ_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ApeTg_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ad1AD9rtgksONDhJJpIDZ_g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'name': 'jordan', 'age': 10, 'height': 20}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Keyword arguments are supplied with a key and a value that are separated by an equal sign. Similarly to what is shown in the code snippet above. The corresponding key and value are then stored in a dictionary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decorators" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Decorators&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Python Decorators. These allow you to add functionalities to an existing function. Decorators allow you to take and modify any function by placing the name of the decorator directly above the function declaration.&lt;/p&gt;

&lt;p&gt;Below is a decorator we named &lt;code&gt;deco&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@deco
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And this is our normal function:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def task1():
    print("task 2")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Running the function above will produce the output seen below:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;task 2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Decorators are placed on top of the function. The code snippet below shows how decorators are activated:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@deco
def task1():
    print("task 2")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;If we were to use this function as is, you will notice something quite interesting.&lt;/p&gt;

&lt;p&gt;The function above will produce the following:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adding functionality before
task 2
adding functionality after
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Therefore, in adding that decorator we were able to modify the output of the function. But how did this happen?&lt;/p&gt;

&lt;p&gt;Let’s look at how we created this decorator:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pDG9wxnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A8ODFf5WqdTL8Tz7oqgV9pg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDG9wxnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A8ODFf5WqdTL8Tz7oqgV9pg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let’s start off with the concept that functions in python are “first class objects’’. This is a fancy term that means that functions can basically work like variables. They can be assigned to and provide a return value. You might think that this is the same across each programming language but it is not. Many programming languages such as Java and C cannot do this.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Okay, so with that premise in mind. Let’s look at the function above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The function name &lt;code&gt;deco&lt;/code&gt; is what we will be calling our decorator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whatever function the decorator is attached to it will be stored in the &lt;code&gt;f&lt;/code&gt; variable in the function’s parameters. (Remember, functions in python are first class objects).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;inner&lt;/code&gt; function located inside the &lt;code&gt;deco&lt;/code&gt; function is how we modify the &lt;code&gt;f&lt;/code&gt; function that was passed into the decorator. You can see in the &lt;code&gt;inner&lt;/code&gt; function where we produced two &lt;code&gt;print&lt;/code&gt; statements before and after the function call.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;f()&lt;/code&gt; will call the existing function that was passed into the decorator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then return the &lt;code&gt;inner&lt;/code&gt; function. Again, functions are objects so we can return them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see the decorator modified the function and created a new one than performs additional tasks.&lt;/p&gt;

&lt;p&gt;Full code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxQXGrOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A87FmjqwVeL6DAwquC1lZsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxQXGrOr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A87FmjqwVeL6DAwquC1lZsQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In reality, a decorator is what we call &lt;strong&gt;&lt;em&gt;syntactic sugar&lt;/em&gt;&lt;/strong&gt;. This just means that it is a simpler( and sweeter) way of expressing a piece of code. Let’s look at what decorators really are.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9akv2yfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1R_lWNw-GwjKy3jEsSEnA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9akv2yfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1R_lWNw-GwjKy3jEsSEnA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code above does the same task as our code before. However, instead of adding our &lt;code&gt;@deco&lt;/code&gt; to &lt;code&gt;task1()&lt;/code&gt; , we’ve added the &lt;code&gt;task1&lt;/code&gt; function as an argument to our &lt;code&gt;deco&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Decorators are just a cleaner way of achieving the same functionalities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-parameters-to-decorators" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Adding Parameters to Decorators&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Here’s the thing. Many times functions have parameters. But how do we handle these functions with parameters?&lt;/p&gt;

&lt;p&gt;Let’s add a parameter to our function as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjHF574V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdR4QRgDGZ7Bwr7LO1SlmUQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjHF574V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdR4QRgDGZ7Bwr7LO1SlmUQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How do we handle this in our decorator ?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2kdH_cN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ayrt11YovnxmKDtxAydpcQw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2kdH_cN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ayrt11YovnxmKDtxAydpcQw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Due to the fact that we are outputting a new function, the new function that we output would need to have the same number of parameters as the function that was inputted. Hence, the &lt;code&gt;inner&lt;/code&gt; function needs to have the same parameters as the function that was inputted.&lt;/p&gt;

&lt;p&gt;The full code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2n06h_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AWwY_W4HN0UQenC_vMbheDg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2n06h_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AWwY_W4HN0UQenC_vMbheDg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adding functionality before
task 10
adding functionality after
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can add parameters. We should be finished, right? Well, one of the points of a decorator and also in every aspect of coding is to ensure reusability. In using and defining strict parameters to the &lt;code&gt;inner&lt;/code&gt; function, we’ve forced the decorator to only accept functions with one parameter. This is not very DRY (&lt;strong&gt;&lt;em&gt;D&lt;/em&gt;&lt;/strong&gt;o Not &lt;strong&gt;&lt;em&gt;R&lt;/em&gt;&lt;/strong&gt;epeat &lt;strong&gt;&lt;em&gt;Y&lt;/em&gt;&lt;/strong&gt;ourself ) of our code.&lt;/p&gt;

&lt;p&gt;To achieve a decorator that will accept various numbers of parameters we will revisit one of the tools we recently just learnt. Our keyword and non-keyword arguments.&lt;/p&gt;

&lt;p&gt;With the combination of these two, this will allow the decorator to not be limited by any number of parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5KFRrED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbugMjG4nqkKH_2sGq3ixEA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5KFRrED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbugMjG4nqkKH_2sGq3ixEA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we fixed our dilemma by adding &lt;code&gt;(*args,**kwargs)&lt;/code&gt; to both our &lt;code&gt;inner&lt;/code&gt; function declaration and our f function call. We then added &lt;code&gt;*args&lt;/code&gt; to allow the function to have multiple parameters and &lt;code&gt;**kwargs&lt;/code&gt; for if and when we decided on using any default parameters or key-value pairs.&lt;/p&gt;

&lt;p&gt;Now let’s try our decorator with two functions that contain different parameters:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwdUsB5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVKG1wDKsAzISdOC1rlM5ig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwdUsB5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AVKG1wDKsAzISdOC1rlM5ig.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adding functionality before
task 1
adding functionality after
adding functionality before
task 3
adding functionality after
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Thank You For Reading 😃 | Hope you learned something&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/PlatinumCoder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#simplicity-at-its-best-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Simplicity at its best !&lt;/strong&gt;
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often times in coding, a complex task can be broken down into simpler ones — you just have to look ! It’s the same thing with these python gems as they are coding hacks to help you on your coding journey to make your code easier to read as well as to be more DRY. I definitely encourage you to try these out whenever you’re writing your own python programs.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
