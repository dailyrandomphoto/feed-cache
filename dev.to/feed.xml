<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Do you want more üìà views / shares on your dev.to articles‚ùì How I created a "click to tweet" button generator for my posts!</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 20 Jun 2021 16:40:53 +0000</pubDate>
      <link>https://dev.to/inhuofficial/do-you-want-more-views-shares-on-your-dev-to-articles-how-i-created-a-click-to-tweet-button-for-my-posts-20ng</link>
      <guid>https://dev.to/inhuofficial/do-you-want-more-views-shares-on-your-dev-to-articles-how-i-created-a-click-to-tweet-button-for-my-posts-20ng</guid>
      <description>&lt;p&gt;I was recently thinking about how low my share rate on twitter is for my dev.to articles.&lt;/p&gt;

&lt;p&gt;Now it could just be that I write rubbish articles that nobody wants to share...but I would hope that isn't the case!&lt;/p&gt;

&lt;p&gt;After some thought I realised that because the share buttons are hidden away people might not get the prompt they need to share to social media and instead just rely on hearts, unicorns and comments.&lt;/p&gt;

&lt;p&gt;One thing that a lot of sites use to increase social media sharing is a "click to tweet" button. &lt;/p&gt;

&lt;p&gt;We can link this to a piece of content that would make a good quote and let people post effortlessly.&lt;/p&gt;

&lt;p&gt;So I set about coming up with a way to make that work on dev.to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-click-to-tweet-button-for-devto"&gt;
  &lt;/a&gt;
  Creating a click to tweet button for dev.to
&lt;/h2&gt;

&lt;p&gt;First thing was first, I couldn't use JavaScript on the page, so I had to prebuild my click to tweet button in Markdown that results in standard HTML elements.&lt;/p&gt;

&lt;p&gt;The second issue was that I am lazy and don't want to have to copy URLs etc. in order to create the button, I just want to be able to select some text in my article and have it all done for me.&lt;/p&gt;

&lt;p&gt;The third issue was that I wanted something more than just a boring hyperlink, I wanted something that would stand out within my articles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-markdown"&gt;
  &lt;/a&gt;
  Creating the markdown
&lt;/h3&gt;

&lt;p&gt;I decided that the best way to achieve my end goal would be a custom image with the link text within it. I would then wrap that image in a hyperlink in order to make the "button" function.&lt;/p&gt;

&lt;p&gt;The url for the hyperlink would be a "tweet intent" URL - more on that in a little bit.&lt;/p&gt;

&lt;p&gt;The markdown to create that is along the lines of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//create a link
[link content / text / image](link URL)

//create an image
![alt text for image](image source URL)

//nesting the image within the link
[![Alt Text](&amp;lt;image-url&amp;gt;)](&amp;lt;tweet-intent-url&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So immediately I realised that I need to generate 3 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The image itself with the quote text within it&lt;/li&gt;
&lt;li&gt;The alt text - it should read &lt;code&gt;Click to tweet:&lt;/code&gt;`, this way people who use a screen reader will get the same information so they know what the hyperlink is for.&lt;/li&gt;
&lt;li&gt;The tweet intent URL - this is a URL in a certain format that twitter understands so that we pre-populate the twitter card for somebody.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-background-image"&gt;
  &lt;/a&gt;
  Creating the background image
&lt;/h3&gt;

&lt;p&gt;I fired up illustrator, fiddled around for a bit and came up with a nice image to contain my link text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AamDL5oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/dev_to/experiments/click-to-tweet/background-click-to-tweet.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AamDL5oj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://inhu.co/dev_to/experiments/click-to-tweet/background-click-to-tweet.jpg" alt='background image for tweets with InHu logo and a fake button at the bottom that says "tweet quote"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By adding a fake button to the bottom and giving it a subtle shadow it meant that it both stood out and drew attention to the fact that an action can be performed.&lt;/p&gt;

&lt;p&gt;Then I just uploaded the image to my server so that I could reference it when I needed it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-alt-text"&gt;
  &lt;/a&gt;
  The Alt Text
&lt;/h3&gt;

&lt;p&gt;This was really simple, once I had the quote text I just had to build a string that read "Click to Tweet: [the text used in the image]". I then stored this in a variable for later use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tweet-intent-url"&gt;
  &lt;/a&gt;
  The tweet intent URL
&lt;/h3&gt;

&lt;p&gt;This is also straight forward.&lt;/p&gt;

&lt;p&gt;A tweet intent URL is in the format:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;twitter.com/intent/tweet?url=&lt;strong&gt;article-url&lt;/strong&gt;&amp;amp;text=&lt;strong&gt;uri-encoded-tweet-text&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing I had to remember to do was use &lt;code&gt;encodeURI&lt;/code&gt; on the quote text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-hard-parts"&gt;
  &lt;/a&gt;
  The hard parts
&lt;/h3&gt;

&lt;p&gt;All seems easy so far?&lt;/p&gt;

&lt;p&gt;Now comes the fun part. I had to find a way to grab the selected text in the editor, create the image on the fly with word wrapping etc, find a way of uploading the image to dev.to, grab the URL of the image and then put that URL into our markdown we designed earlier. &lt;/p&gt;

&lt;p&gt;Now the astute among you may notice something here. I am interacting with a page that I do not control!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bookmarklets-to-the-rescue"&gt;
  &lt;/a&gt;
  Bookmarklets to the rescue
&lt;/h4&gt;

&lt;p&gt;Luckily there is an easy cheat for this - something called Bookmarklets (I wrote about them before in my &lt;a href="https://dev.to/inhuofficial/dev-to-markdown-editor-part-deux-massive-improvements-hack-2-continued-5mp"&gt;dev.to WYSIWYG article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Essentially we host a script on a server we control, then create a browser bookmark that inserts that script into a page. &lt;/p&gt;

&lt;p&gt;This can be done by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;creating a bookmark and giving it a name.&lt;/li&gt;
&lt;li&gt;Editing that bookmark and replacing the URL with the code to load our script.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you want to do this yourself with a script of your own here is the code to replace the URL with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript&lt;br&gt;
javascript:(function (){document.getElementsByTagName('head')[0].appendChild(document.createElement('script')).src='&amp;lt;full-url-of-your-script&amp;gt;?'+Math.random();}());&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just replace the &lt;code&gt;&amp;lt;full-url-of-your-script&amp;gt;&lt;/code&gt; part with the URL of your script!&lt;/p&gt;

&lt;p&gt;Now that we have a way of running a custom script we can tackle some other issues:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-the-text-to-the-image"&gt;
  &lt;/a&gt;
  Adding the text to the image
&lt;/h4&gt;

&lt;p&gt;Adding text to the image would be straight forward using &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; if it wasn't for one thing....text wrapping.&lt;/p&gt;

&lt;p&gt;So we have to add a function that calculates where the line breaks should be on any text that is too wide to fit.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;` javascript&lt;br&gt;
function getLines(ctx, text, maxWidth) {&lt;br&gt;
    var words = text.split(" ");&lt;br&gt;
    var lines = [];&lt;br&gt;
    var currentLine = words[0];&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 1; i &amp;lt; words.length; i++) {
    var word = words[i];
    var width = ctx.measureText(currentLine + " " + word).width;
    if (width &amp;lt; maxWidth) {
        currentLine += " " + word;
    } else {
        lines.push(currentLine);
        currentLine = word;
    }
}
lines.push(currentLine);
return lines;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We pass in the 2d context of the canvas, the text we want to add and the maximum width of our text area.&lt;/p&gt;

&lt;p&gt;This then works out where the line breaks should be and returns an array of all the lines for us to add later.&lt;/p&gt;

&lt;p&gt;The important thing about this function is that it will use the current font size set on the canvas, so make sure you set that first with &lt;code&gt;ctx.font = "XXpx Font Family"&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uploading-the-final-image-to-devto"&gt;
  &lt;/a&gt;
  Uploading the final image to dev.to
&lt;/h4&gt;

&lt;p&gt;This is actually quite simple once you understand how they do it.&lt;/p&gt;

&lt;p&gt;There is a variable &lt;code&gt;window.csrfToken&lt;/code&gt; that you need to post to the endpoint &lt;code&gt;https://dev.to/image_uploads&lt;/code&gt;, along with your image data.&lt;/p&gt;

&lt;p&gt;One big "gotchya" I had here was I was converting the canvas to an image and trying to upload it. I kept getting a 422 error.&lt;/p&gt;

&lt;p&gt;This is because that endpoint is expecting an image to be sent via a file input. As such it expects our image to have a file name.&lt;/p&gt;

&lt;p&gt;To fix this was simple (once I worked out what the problem was), we just pass a third parameter to our formData entry:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript&lt;br&gt;
let formData = new FormData();&lt;br&gt;
// the third parameter allows us to give a name to our image&lt;br&gt;
formData.append("image", image, "myImage.jpg");&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;As with any of these experiments of mine it is a whole load of spaghetti! I build a bit, hack a bit in, change a bit, take shortcuts etc. &lt;/p&gt;

&lt;p&gt;At the end of the day it gets the job done.&lt;/p&gt;

&lt;p&gt;But hopefully the naming makes it clear enough what is done when.&lt;/p&gt;

&lt;p&gt;If you want any particular part explaining just let me know in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;` javascript&lt;br&gt;
function init(config) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var canvas = document.createElement('canvas');
canvas.width = 1400;
canvas.height = 950;
document.querySelector('main').appendChild(canvas);


config = config || [];
config.userName = config.userName || "InHuOfficial";
config.backgroundImageURL = config.backgroundImageURL || 'https://inhu.co/dev_to/experiments/click-to-tweet/background-click-to-tweet.jpg';
config.quoteText = config.quoteText || "Standard Text if you don't select anything";
config.articleURL = config.articleURL || "https://dev.to/inhuofficial/click-to-tweet-a-great-way-to-increase-traffic-generator-for-dev-to-5h49";
config.fontSize = config.fontSize || 44;
config.fontFamily = config.fontFamily || "Century Gothic";
config.lineHeightAdjust = config.lineHeightAdjust || 1.2;
config.lineHeight = config.lineHeight || config.fontSize * config.lineHeightAdjust;
config.url = config.url || "https://twitter.com/intent/tweet?url=";
config.textX = config.textX || 240;
config.textY = config.textY || 340;
config.textMaxWidth = config.textMaxWidth || 1040;
config.textMaxHeight = config.textMaxHeight || 370;
config.textMaxCharCount = config.textMaxCharCount || 320;
config.canvasIdentifier = config.canvasIdentifier || "canvas";
config.canvas = document.querySelector(config.canvasIdentifier);
config.ctx = config.canvas.getContext('2d');
config.width = config.width || config.canvas.width;
config.height = config.height || config.canvas.height;
config.adjustFontSize = config.adjustFontSize || true;
config.textAreaName = 'article_body_markdown';
config.textArea = document.querySelector('#' + config.textAreaName);
config.grabCurrentURL = config.grabCurrentURL || true;
return config;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;var c = init();&lt;/p&gt;

&lt;p&gt;var image = new Image();&lt;br&gt;
make_bg();&lt;/p&gt;

&lt;p&gt;function make_bg()&lt;br&gt;
{&lt;br&gt;
    var selectedText = getSelectedText();&lt;br&gt;
    if (selectedText.length &amp;gt; 0) {&lt;br&gt;
        c.quoteText = '"' + selectedText + '"';&lt;br&gt;
    }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var charCount = c.quoteText.length + c.articleURL.length + c.userName.length + 10;
if (charCount &amp;gt; c.textMaxCharCount) {
    alert("max character count exceeded by " + (charCount - c.textMaxCharCount) + " characters");
    return;
}

c.ctx.save();
c.ctx.clearRect(0, 0, c.width, c.height);
base_image = new Image();
base_image.crossOrigin = '*';
base_image.src = c.backgroundImageURL;
base_image.onload = function () {
    console.log("drawing");
    c.ctx.drawImage(base_image, 0, 0, c.width, c.height);
    draw();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function calcFontSize(quoteText) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (quoteText.length &amp;lt; 100) {
    return c.fontSize * 1.5;
}
if (quoteText.length &amp;lt; 200) {
    return c.fontSize * 1.25;
}
return c.fontSize;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function draw() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (c.adjustFontSize) {
    c.fontSize = calcFontSize(c.quoteText);
    c.lineHeight = c.fontSize * c.lineHeightAdjust;
}

if (c.grabCurrentURL) {
    c.articleURL = window.location.href.replace("/edit", "");
}

c.ctx.font = c.fontSize + 'px ' + c.fontFamily;
var lines = getLines(c.ctx, c.quoteText, c.textMaxWidth);
c.linesHeightTotal = lines.length * c.lineHeight;
c.ctx.fillStyle = "#222222";
c.ctx.textAlign = "start";
c.ctx.font = c.fontSize + 'px ' + c.fontFamily;
var y = c.textY + (c.textMaxHeight / 2) - (c.linesHeightTotal / 2);

for (a = 0; a &amp;lt; lines.length; a++) {
    c.ctx.fillText(lines[a], c.textX, y);
    y += c.lineHeight;
}

c.ctx.restore();

image.crossOrigin = '*';
c.canvas.toBlob(function (img) {
    image = img;
    uploadImage();
}, 'image/jpg');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function getLines(ctx, text, maxWidth) {&lt;br&gt;
    var words = text.split(" ");&lt;br&gt;
    var lines = [];&lt;br&gt;
    var currentLine = words[0];&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 1; i &amp;lt; words.length; i++) {
    var word = words[i];
    var width = ctx.measureText(currentLine + " " + word).width;
    if (width &amp;lt; maxWidth) {
        currentLine += " " + word;
    } else {
        lines.push(currentLine);
        currentLine = word;
    }
}
lines.push(currentLine);
return lines;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function getSelectedText() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var start = c.textArea.selectionStart;
var finish = c.textArea.selectionEnd;  
return c.textArea.value.substring(start, finish);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function copyToClipboard(str) {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var el = document.createElement('textarea');
el.value = str;
el.setAttribute('readonly', '');
el.style.position = 'absolute';
el.style.left = '-9999px';
document.body.appendChild(el);
el.select();
document.execCommand('copy');
document.body.removeChild(el);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;function uploadImage() {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let auth_token = window.csrfToken;
let formData = new FormData();
formData.append("image", image, "myImage.jpg");
formData.append("authenticity_token", auth_token);

fetch('https://dev.to/image_uploads', {method: 'POST', body: formData})
        .then(function (response) {
            return response.json();
        })
        .then(function (json) {
            if (json.length !== 0) {

                c.url = c.url + c.articleURL;
                c.url = c.url + "&amp;amp;text=";
                c.url = c.url + encodeURI(c.quoteText + " - @" + c.userName + " ");

                var markdown = "[![Click to Tweet: " + c.quoteText + "](" + json.links[0] + ")](" + c.url + ")";

                copyToClipboard(markdown);

                alert("copied to clipboard");

            }
        })
        .catch(function (err) {
            alert("something went wrong!");
            console.log("error", err);
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;};&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
If you want to use it yourself the &lt;code&gt;init&lt;/code&gt; function can have a load of parameters passed to it to customise the output. &lt;/p&gt;

&lt;p&gt;I would probably suggest you use it for inspiration and write your own version if you want to use it yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-so-what-does-an-end-quote-card-look-like"&gt;
  &lt;/a&gt;
  OK so what does an end quote card look like?
&lt;/h2&gt;

&lt;p&gt;So here it is, the final "click to tweet button" in all its glory!&lt;/p&gt;

&lt;p&gt;Now I just need something for you to tweet:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Twitter cards now on dev.to to help boost your engagement. How much extra engagement could your posts get with this simple bookmarklet?" &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/do-you-want-more-views-shares-on-your-dev-to-articles-how-i-created-a-click-to-tweet-button-for-my-posts-20ng&amp;amp;text=%22Twitter%20cards%20now%20on%20dev.to%20to%20help%20boost%20your%20engagement.%20How%20much%20extra%20engagement%20could%20your%20posts%20get%20with%20this%20simple%20bookmarklet?%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3x9U66r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxyyvp8ctvld1vtodmn4.jpg" alt='Click to Tweet: "Twitter cards now on dev.to to help boost your engagement. How much extra engagement could your posts get with this simple bookmarklet?"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ok-that-is-pretty-cool-how-do-i-get-it-to-work-then"&gt;
  &lt;/a&gt;
  Ok that is pretty cool, how do I get it to work then?
&lt;/h3&gt;

&lt;p&gt;A few simple steps (looks like a lot but they are all reasonably straight forward):-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create and upload a background image to your domain and note down the path. &lt;/li&gt;
&lt;li&gt;If using apache, create a &lt;code&gt;.htaccess&lt;/code&gt; file in the same folder as your image that has the line &lt;code&gt;Header set Access-Control-Allow-Origin "*"&lt;/code&gt;. Same principle for other environments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="#theCode"&gt;Copy the code&lt;/a&gt; to a &lt;code&gt;.js&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Make any changes to the "config" section that match your needs (or create your own config &lt;code&gt;yourConfig&lt;/code&gt; and adjust the line the 38th line to &lt;code&gt;var c = init(yourConfig);&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Don't forget to change the path to your background image you created &lt;code&gt;config.backgroundImageURL&lt;/code&gt; and set the &lt;code&gt;config.userName&lt;/code&gt; to your dev.to username as a bear minimum.&lt;/li&gt;
&lt;li&gt;Upload the modified config to your domain and not down the script path. &lt;/li&gt;
&lt;li&gt;Note down the full URL of the file.&lt;/li&gt;
&lt;li&gt;Create a bookmark with a name that makes sense to you, don't worry about the page you create it on yet.&lt;/li&gt;
&lt;li&gt;Edit that bookmark and enter the following code (replacing the &lt;code&gt;&amp;lt;full-url-of-your-script&amp;gt;&lt;/code&gt; with the path to your modified script:
&lt;code&gt;&lt;/code&gt;&lt;code&gt;javascript
javascript:(function (){document.getElementsByTagName('head')[0].appendChild(document.createElement('script')).src='&amp;lt;full-url-of-your-script&amp;gt;?'+Math.random();}());
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;
Phew, all done! Now the fun part!&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#actually-using-the-bookmarklet"&gt;
  &lt;/a&gt;
  Actually using the bookmarklet!
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create your article and get it ready for publishing &lt;/li&gt;
&lt;li&gt;Publish your article, immediately edit it. (unfortunately the URL changes from drafts so you have to publish then quickly edit).&lt;/li&gt;
&lt;li&gt;Find the text you want to create a quote from, select it.&lt;/li&gt;
&lt;li&gt;Click on your bookmarklet.&lt;/li&gt;
&lt;li&gt;An alert will show after a short while (if you have done everything correctly) saying "copied to clipboard".&lt;/li&gt;
&lt;li&gt;place your cursor where you want your "click to tweet" and paste!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Yeah I doubt many people will actually use this bookmarklet, but I thought I would give you the option.&lt;/p&gt;

&lt;p&gt;Here is a quick GIF showing it in action once it is set up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYWrtopp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg1d4omug4mplh4xyh2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYWrtopp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajg1d4omug4mplh4xyh2.gif" alt="select some text, press the bookmarklet and then paste the resulting code into your editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-on-try-it-out"&gt;
  &lt;/a&gt;
  Go on, try it out!
&lt;/h3&gt;

&lt;p&gt;I converted the following quote into a click to tweet button:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I sent this tweet via a brand new 'click to tweet' bookmarklet on dev.to, check out the article and code if your articles could benefit from more shares on twitter!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/do-you-want-more-views-shares-on-your-dev-to-articles-how-i-created-a-click-to-tweet-button-for-my-posts-20ng&amp;amp;text=%22I%20sent%20this%20tweet%20via%20a%20brand%20new%20'click%20to%20tweet'%20bookmarklet%20on%20dev.to,%20check%20out%20the%20article%20and%20code%20if%20your%20articles%20could%20benefit%20from%20more%20shares%20on%20twitter!%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9YzoAUuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38o3n38suqblmuvsvdbi.jpg" alt="Click to Tweet: &amp;quot;I sent this tweet via a brand new 'click to tweet' bookmarklet on dev.to, check out the article and code if your articles could benefit from more shares on twitter!&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go on, press the button, share this article! üòÅ&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Live Stream Logs to Browser with Rails</title>
      <author>Prabin Poudel</author>
      <pubDate>Sun, 20 Jun 2021 15:55:03 +0000</pubDate>
      <link>https://dev.to/truemark/live-stream-logs-to-browser-with-rails-32hd</link>
      <guid>https://dev.to/truemark/live-stream-logs-to-browser-with-rails-32hd</guid>
      <description>&lt;p&gt;Live streaming log files have fascinated me for a long time now. I saw the use of live streaming log when I deployed an app in &lt;a href="https://www.netlify.com/" rel="noopener"&gt;Netlify&lt;/a&gt; for the first time. While deploying, Netlify displays the server log right in the browser so that as a user, we know what's happening in the background.&lt;/p&gt;

&lt;p&gt;If you are confused on what I am talking about right now, you can also replicate that behavior if you open the log file with the command &lt;code&gt;tail -f&lt;/code&gt; prepended to the file name like this: &lt;code&gt;tail -f log/development.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you fire the rails server and access any route, that changes will be appended to the file and shown in the bash where we have opened &lt;code&gt;log/development.log&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;In one of the projects I am working on, we have invoicing module and we can create invoices with one click from the browser. Invoicing can take a long time to complete and user will have to wait there without knowing what's going in the background. That was when I began to wonder, what if we also try same thing like Netlify and show the logs to user as it happens in our Rails app server, that will be so cool.&lt;/p&gt;

&lt;p&gt;Then I began my research and found this gem of a &lt;a href="https://tenderlovemaking.com/2012/07/30/is-it-live.html" rel="noopener"&gt;tutorial&lt;/a&gt; from &lt;a href="https://twitter.com/tenderlove" rel="noopener"&gt;Aaron Patterson&lt;/a&gt; himself. &lt;/p&gt;

&lt;p&gt;It was a 9 years old tutorial but had what we needed to start with. He streams some static code and not the actual file content but that was the start to know more about streaming in Rails. After a day of more research and trial and error, I got the live streaming for the log file to the browser from Rails app working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Let's see step by step how I implemented live log streaming in the browser from Rails App.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-new-rails-app"&gt;
  &lt;/a&gt;
  Step 1: Create a new Rails app
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rails new file-streaming-app&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-generate-a-controller-for-streaming-files-manually"&gt;
  &lt;/a&gt;
  Step 2: Generate a controller for streaming files manually
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;touch live_file_streams_controller.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the following code inside&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiveFileStreamsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are not using rails generator because it also generates view and helpers; which we don't need in this tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-add-route-for-rendering-the-view"&gt;
  &lt;/a&gt;
  Step 3: Add route for rendering the view
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:live_streams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;:log_file&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-stream-with-responsestream"&gt;
  &lt;/a&gt;
  Step 4: Stream with "response.stream"
&lt;/h3&gt;

&lt;p&gt;To enable streaming in our Rails app, we will be using &lt;code&gt;response.stream&lt;/code&gt; from &lt;code&gt;ActionController::Streaming&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiveStreamsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_file&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"hello world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about response streaming in &lt;a href="https://api.rubyonrails.org/classes/ActionController/Streaming.html" rel="noopener"&gt;official Rails documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-view-response-in-browser"&gt;
  &lt;/a&gt;
  Step 5: View response in browser
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fire rails server &lt;code&gt;rails s&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;localhost:3000/live_streams/log_file&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You will see "hello world" printed 5 times in the browser&lt;/li&gt;
&lt;li&gt;Response is printed at the same time, even though we used sleep function in between &lt;code&gt;response.write&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-i1FRR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwazgg9j30z3y9vwv6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-i1FRR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwazgg9j30z3y9vwv6e.png" alt='"hello world" is printed 5 times in the browser'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's print them one by one next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-include-raw-actioncontrollerlive-endraw-for-live-streaming-response"&gt;
  &lt;/a&gt;
  Step 6: Include &lt;code&gt;ActionController::Live&lt;/code&gt; for live streaming response
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiveStreamsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Live&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_file&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"hello world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

      &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ActionController::Live&lt;/code&gt; adds streaming functionality to all actions inside the controller. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-response-stays-the-same-what-happened"&gt;
  &lt;/a&gt;
  Step 7: Response stays the same. What happened?
&lt;/h3&gt;

&lt;p&gt;There is a bug inside the rack gem which is sending response at once instead of live streaming. You can find the issue discussion &lt;a href="https://github.com/rack/rack/issues/1619" rel="noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As suggested in one of the &lt;a href="https://github.com/rack/rack/issues/1619#issuecomment-848460528" rel="noopener"&gt;comments&lt;/a&gt; in the discussion, let's add "Last-Modified" in &lt;code&gt;response.headers&lt;/code&gt; with current time.&lt;/p&gt;

&lt;p&gt;Let's also add "Content-Type" to &lt;code&gt;response.headers&lt;/code&gt; with "text/event-stream" so that our response are actually streamed and displayed one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_file&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt;

  &lt;span class="c1"&gt;# hack due to new version of rack not supporting sse and sending all response at once: https://github.com/rack/rack/issues/1619#issuecomment-848460528&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Last-Modified'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;httpdate&lt;/span&gt;

  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"hello world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be able to see "hello world" printed one by one like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTiFQaDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq0kcg3bxpha0snfdawt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTiFQaDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hq0kcg3bxpha0snfdawt.gif" alt='Stream "hello world" 5 times'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow! We live streamed something! ü§©&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-8-server-side-events"&gt;
  &lt;/a&gt;
  Step 8: Server side events
&lt;/h3&gt;

&lt;p&gt;From Aaron's blog:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you‚Äôve never heard of Server-Sent Events (from here on we will be calling them SSEs), it‚Äôs a feature of HTML5 that allows long polling, but is built in to the browser. Basically, the browser keeps a connection open to the server, and fires an event in JavaScript every time the server sends data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read further about it &lt;a href="https://www.html5rocks.com/en/tutorials/eventsource/basics/" rel="noopener"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-9-create-filestreamingappsserb"&gt;
  &lt;/a&gt;
  Step 9: Create "file_streaming_app/sse.rb"
&lt;/h3&gt;

&lt;p&gt;To emit events and format the response instead of inside controller, we will be creating a new class called &lt;code&gt;file_streaming_app/sse&lt;/code&gt; inside &lt;code&gt;lib&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Create the file with: &lt;code&gt;touch lib/file_streaming_app/sse.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add following to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FileStreamingApp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SSE&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;
      &lt;span class="vi"&gt;@io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-10-use-sse-class-inside-the-controller"&gt;
  &lt;/a&gt;
  Step 10: Use "SSE" class inside the controller
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'file_streaming_app/sse'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LiveStreamsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_file&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt;

    &lt;span class="c1"&gt;# hack due to new version of rack not supporting sse and sending all response at once: https://github.com/rack/rack/issues/1619#issuecomment-848460528&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Last-Modified'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;httpdate&lt;/span&gt;

    &lt;span class="n"&gt;sse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FileStreamingApp&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;sse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hello world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;ensure&lt;/span&gt;
    &lt;span class="n"&gt;sse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response shouldn't have much different apart from &lt;code&gt;hello world&lt;/code&gt; changed to &lt;code&gt;"hello world"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Only copy changed lines (Don't override the controller)&lt;/p&gt;

&lt;p&gt;Next, we will stream our actual log file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-11-add-filewatcher-gem-to-watch-changes-in-file"&gt;
  &lt;/a&gt;
  Step 11: Add "filewatcher" gem to watch changes in file
&lt;/h3&gt;

&lt;p&gt;To know when file is changed, we will be using file watcher gem. &lt;a href="https://github.com/filewatcher/filewatcher" rel="noopener"&gt;File watcher&lt;/a&gt; gem watches the files for different events (or changes) like create, update, delete. It was the best gem I could find for our purpose, I tried other gems like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;rb-fsevent&lt;/strong&gt; doesn't fire the event when file is modified in background by rails, had to do &lt;code&gt;touch log/development.log&lt;/code&gt; every time to run the code inside watcher. Also, it didn't support file path, instead we had to always provide folder path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ruby-filewatch&lt;/strong&gt; was working flawlessly but the project was not maintained actively&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;listen&lt;/strong&gt; rails uses this gem to auto load files after change so we don't have to reload server after every change to file. This also acted in the same way as rb-fsevent
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'filewatcher'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 1.1.1'&lt;/span&gt; &lt;span class="c1"&gt;# specify latest version here and not 1.1.1, this was the latest at the time of writing this tutorial&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to install gem with &lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-12-create-filestreamingapplogfilerb"&gt;
  &lt;/a&gt;
  Step 12: Create "file_streaming_app/log_file.rb"
&lt;/h3&gt;

&lt;p&gt;To get all lines inside the file in array, we will be creating a new class called &lt;code&gt;file_streaming_app/log_file&lt;/code&gt; inside &lt;code&gt;lib&lt;/code&gt; folder. This should normally have been a util, but to show only newly added lines, we need instance variable to store the last line position, hence we will be creating new class.&lt;/p&gt;

&lt;p&gt;Create the file with: &lt;code&gt;touch lib/file_streaming_app/log_file.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add following code to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FileStreamingApp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LogFile&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;added_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;file_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;readlines&lt;/span&gt;

      &lt;span class="n"&gt;file_content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;File.open(file_path).readlines&lt;/code&gt; returns all array of all lines inside the file.&lt;/p&gt;

&lt;p&gt;For now, we will only print last 20 lines of the file when it is modified, hence &lt;code&gt;added_lines&lt;/code&gt; is doing what we want with &lt;code&gt;.last(20)&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-13-stream-file-content-when-it-is-modified"&gt;
  &lt;/a&gt;
  Step 13: Stream file content when it is modified
&lt;/h3&gt;

&lt;p&gt;Update controller with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_file&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'text/event-stream'&lt;/span&gt;

    &lt;span class="c1"&gt;# hack due to new version of rack not supporting sse and sending all response at once: https://github.com/rack/rack/issues/1619#issuecomment-848460528&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Last-Modified'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;httpdate&lt;/span&gt;

    &lt;span class="n"&gt;sse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FileStreamingApp&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SSE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;log_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'log/development.log'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;

    &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FileStreamingApp&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LogFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

    &lt;span class="c1"&gt;# watch development.log file for changes&lt;/span&gt;
    &lt;span class="no"&gt;Filewatcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;log_file_path&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;watch&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'updated'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;file_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;sse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;ensure&lt;/span&gt;
    &lt;span class="n"&gt;sse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are using &lt;code&gt;FileWatcher&lt;/code&gt; to watch for changes in the file given in the &lt;code&gt;log_file_path&lt;/code&gt; i.e. we are watching changes inside &lt;code&gt;log/development.log&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;We only want to stream the content of file when something is added to it, so we are ignoring other event types with &lt;code&gt;next unless event_type.to_s.eql?('updated')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally, we are sending array of lines inside the file to write to browser with &lt;code&gt;sse.write(file_lines)&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-15-update-sse-to-print-array-of-file-lines"&gt;
  &lt;/a&gt;
  Step 15: Update "SSE" to print array of file lines
&lt;/h3&gt;

&lt;p&gt;Previously, we were just rendering string and using JSON to dump that data and print to browser. But now, we have array of lines from the file and we need to print them line by line in the browser.&lt;/p&gt;

&lt;p&gt;Let's update the SSE class with following code to reflect the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;file_lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="vi"&gt;@io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-16-view-changes-in-file-in-the-browser"&gt;
  &lt;/a&gt;
  Step 16: View changes in file in the browser
&lt;/h3&gt;

&lt;p&gt;To emit the event and print the content of file to the browser we will first need to find a way to modify the &lt;code&gt;development.log&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reload the browser where streaming url is open&lt;/li&gt;
&lt;li&gt;In new tab, open rails default view: &lt;code&gt;localhost:3000&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;When this page loads, log file will be modified and streaming api will be called, which then renders the last 20 lines from the file to the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkHe1k7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m3b15t9xg84w6q3b0ex.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkHe1k7F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2m3b15t9xg84w6q3b0ex.gif" alt="Live stream last 20 lines of log file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now streamed the file content every time the file is modified, next step for us will be to stream only added lines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-17-parallel-requests"&gt;
  &lt;/a&gt;
  Step 17: Parallel Requests
&lt;/h3&gt;

&lt;p&gt;By default, in Rails development environment, requests are not served parallelly and you may be facing the issue of browser just hanging when trying to open two urls at the same time.&lt;/p&gt;

&lt;p&gt;To resolve that, let's add a little hack from &lt;a href="https://stackoverflow.com/a/23607885/9359123" rel="noopener"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following to your &lt;code&gt;config/environments/development.rb&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# other configurations&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Lock&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-18-stream-only-changed-lines-in-the-log-file"&gt;
  &lt;/a&gt;
  Step 18: Stream only changed lines in the log file
&lt;/h3&gt;

&lt;p&gt;For streaming only changed lines, "LogFile" will need to remember the position of the last line in the log file before the change and render lines after that position only.&lt;/p&gt;

&lt;p&gt;Let's update the &lt;code&gt;LogFile&lt;/code&gt; to make that possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LogFile&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;added_lines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;readlines&lt;/span&gt;
    &lt;span class="n"&gt;total_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file_content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;

    &lt;span class="vi"&gt;@last_known_line_position&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;initial_line_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;start_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@last_known_line_position&lt;/span&gt;

    &lt;span class="vi"&gt;@last_known_line_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total_lines&lt;/span&gt;

    &lt;span class="n"&gt;file_content&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start_position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_lines&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initial_line_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_lines&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;total_lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zero?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;total_lines&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

    &lt;span class="c1"&gt;# print last 20 lines from the file if event is emitted for the first time&lt;/span&gt;
    &lt;span class="n"&gt;total_lines&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;initial_line_position&lt;/code&gt; returns the start position of the line in the file to display in the browser when the event is emitted for the first time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@last_known_line_position ||= initial_line_position(total_lines)&lt;/code&gt; sets the position of the line in the file during previous event. If the &lt;code&gt;@last_known_line_position&lt;/code&gt; is empty, &lt;code&gt;initial_line_position&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;file_content[start_position, total_lines]&lt;/code&gt; gets array items from the given start and end position and we get lines that were added recently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VH0gJwLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0028pywnclcq4ot2e75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VH0gJwLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0028pywnclcq4ot2e75.gif" alt="Stream only changed lines from log file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you have reached this section, we have come far together. Congratulations!&lt;/p&gt;

&lt;p&gt;Though in this tutorial, we only streamed log file; this implementation applies for streaming any files.&lt;/p&gt;

&lt;p&gt;Code of this blog is available at &lt;a href="https://github.com/coolprobn/log-file-live-streamer" rel="noopener"&gt;Log File Live Streamer [Github]&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thank you for reading. Happy live streaming!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tenderlovemaking.com/2012/07/30/is-it-live.html" rel="noopener"&gt;Is it live? [Aaron Patterson's Blog]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#image-credits"&gt;
  &lt;/a&gt;
  Image Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover Image by &lt;a href="https://unsplash.com/@depthcontroller?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" rel="noopener"&gt;Nadjib BR&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/netflix?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText" rel="noopener"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Phaser.io Game Development  (Learning  Phaser.io in 2 weeks). Making a platformer game.</title>
      <author>FRADAR</author>
      <pubDate>Sun, 20 Jun 2021 15:51:43 +0000</pubDate>
      <link>https://dev.to/fradar/phaser-io-game-development-learning-phaser-io-in-2-weeks-making-a-platformer-game-ghn</link>
      <guid>https://dev.to/fradar/phaser-io-game-development-learning-phaser-io-in-2-weeks-making-a-platformer-game-ghn</guid>
      <description>&lt;p&gt;I have been learning phaser.io game development for the past 2 weeks. My goal is to make a full fledged platformer game in phaser only. &lt;/p&gt;

&lt;p&gt;Here is a sneak peek of how it will look like:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/YzZaarP"&gt;https://codepen.io/FRADAR/full/YzZaarP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the full collection of all my phaser.io games/tests.&lt;br&gt;
&lt;a href="https://codepen.io/collection/qOOQVr"&gt;https://codepen.io/collection/qOOQVr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any tips about phaser, please tell me about in the comments!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>phaser</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Mock Â∑•ÂÖ∑‰ªãÁ¥π ‚Äî Mockoon</title>
      <author>Dian</author>
      <pubDate>Sun, 20 Jun 2021 15:35:23 +0000</pubDate>
      <link>https://dev.to/dianwu/mock-mockoon-5ebo</link>
      <guid>https://dev.to/dianwu/mock-mockoon-5ebo</guid>
      <description>&lt;p&gt;Mockoon ÊòØ‰∏ÄÊ¨æÂÖ∑Êúâ UI Èö®Ë£ùÂç≥ÁöÑ Mock API Â∑•ÂÖ∑„ÄÇÊú¨Ë∫´Â∞±ÂåÖÂê´‰∫Ü Proxy Âèä Mock ÁöÑÂäüËÉΩÔºåÂú®ÂÅöÂâçÁ´ØÊ∏¨Ë©¶ÊôÇÊòØÂæàÊñπ‰æøÁöÑÂ∑•ÂÖ∑„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxy"&gt;
  &lt;/a&gt;
  Proxy
&lt;/h2&gt;

&lt;p&gt;Âú®ÈñãÁôºÊñ∞ÂäüËÉΩÊôÇÔºåÈúÄË¶Å Mockoon ÁöÑÂè™ÊúâÊñ∞ API ËÄåÂ∑≤ÔºåÊâÄ‰ª• Mockoon Êú¨Ë∫´Â∏∂Êúâ Proxy ÂäüËÉΩÂ∞±ÊòØÂæàÊñπ‰æøÁöÑÂ∑•ÂÖ∑„ÄÇ&lt;br&gt;
ÈªûÊìäÂè≥‰∏ä [ÈΩíËº™] ÂèØ‰ª•ÈñãÂïü Proxy mode Ë®≠ÂÆö‰ªãÈù¢„ÄÇÂè™Ë¶Å‰∏çÊòØÊàëÂÄëË¶Å mock ÁöÑÁõÆÊ®ôÂ∞±ÊòØ‰∏üÂõûÂéüÊú¨ÁöÑ server ËôïÁêÜ„ÄÇ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-k0Ixxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3k9wpydmrcbo7cnv2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-k0Ixxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb3k9wpydmrcbo7cnv2z.png" alt="Proxy Config"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mock"&gt;
  &lt;/a&gt;
  Mock
&lt;/h2&gt;

&lt;p&gt;Mock ÂõûÂÇ≥ÂÖßÂÆπÈô§‰∫ÜÂèØ‰ª•Âú® UI ‰∏äÁõ¥Êé•Ëº∏ÂÖ•È†êÊúüË¶ÅÂõûÂÇ≥ÁöÑÂÖßÂÆπÔºåÁï∂ÂõûÂÇ≥ÁöÑÂÖßÂÆπÂæàÂ§ßÊôÇÔºå‰πüÂèØ‰ª•‰ΩøÁî®ËÆÄÂèñÊú¨Âú∞Ê™îÊ°àÁöÑÊñπÂºèÂõûÂÇ≥ÂõûÂÆπ„ÄÇÂõûÂÇ≥Ê™îÊ°àÁöÑÂäüËÉΩÁâπÂà•ÈÅ©ÂêàÂâçÁ´ØÁöÑ JS/CSS ÈÇÑÂú®ÈñãÁôºÈöéÊÆµÊôÇ‰ΩøÁî®„ÄÇ&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rule"&gt;
  &lt;/a&gt;
  Rule
&lt;/h2&gt;

&lt;p&gt;Mock ÁöÑ Rule ÁöÑÊ¢ù‰ª∂ÂèØ‰ª•Áî® Request ÁöÑ Query string„ÄÅBody„ÄÅHeader„ÄÅRouter params ÊàñÊòØ Request Number Ë®≠ÂÆöÊèê‰æõÂæàÂ§ßÁöÑÂΩàÊÄß„ÄÇ&lt;/p&gt;

&lt;p&gt;Rule ÁöÑÊØîÂ∞çÊñπÂºèÊòØÂè™Ë¶ÅÂêàÁ¨¶Â∞±‰∏çÊúÉÂÜçÂæÄ‰∏ãÊØîÂ∞çÔºåÊâÄ‰ª•Âú®Ë®≠ÂÆöÂ§öÁµÑ Rule ÊôÇÊáâË©≤Â∞áÊ¢ù‰ª∂ËºÉÂö¥Ê†ºÁöÑ Rule ÊîæÂú®Ê¢ù‰ª∂ÂØ¨È¨ÜÁöÑ Rule ‰πãÂâç„ÄÇ&lt;/p&gt;

&lt;p&gt;‰æãÂ¶ÇÊàëÊÉ≥Ë¶ÅÂú® Create user ÊôÇ‰æùÊìöÊúâÊ≤íÊúâ‰ΩøÁî® refer code ‰æÜÂõûÂÇ≥‰∏çÂêåÁöÑÂÖßÂÆπÔºåÂ∞±ÂèØ‰ª•Ë®≠ÂÆöÂÖ©ÁµÑ‰∏çÂêåÁöÑ Rule ÂõûÂÇ≥‰∏çÂêåÁöÑÂÖßÂÆπ„ÄÇ&lt;/p&gt;

&lt;p&gt;Rule: Create user with refer&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RUmlKQhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smdy4zsolvql2imgox4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RUmlKQhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smdy4zsolvql2imgox4e.png" alt="Create user with refer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rule: Create user without refer&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wIacEgqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pidul91solwzibv0eby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIacEgqV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pidul91solwzibv0eby.png" alt="Create user without refer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create user with refer ÊáâË©≤ÊéíÂú® Create user without refer ‰πãÂâçÔºåÁõ¥Êé•Áî®ÊªëÈº†ÊãñÊãâÂ∞±ÂèØ‰ª•ÊîπËÆäÈ†ÜÂ∫è&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VcBParz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffnehom4k9zv4ci2wm2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VcBParz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffnehom4k9zv4ci2wm2b.png" alt="Áî®ÊªëÈº†ÊãñÊãâÂ∞±ÂèØ‰ª•ÊîπËÆäÈ†ÜÂ∫è"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Templating&lt;br&gt;
ÈÄèÈÅé Templating ÂèØ‰ª•Â∞á Response ‰∏≠ÊåáÂÆöÁöÑÊÆµËêΩÁî® Request ÁöÑÂÖßÂÆπÂèñ‰ª£ÂÅöÂá∫ÂãïÊÖãÊîπËÆäÂõûÂÇ≥ÂÖßÂÆπÔºå‰πüÂèØ‰ª•ÊîπÂõûÂÇ≥Êú¨Âú∞Ê™îÊ°àÁöÑÊ™îÊ°àË∑ØÂæë„ÄÇ&lt;br&gt;
‰∏ãÈù¢ÁØÑ‰æãÁÇ∫ÔºåÁî® Request ‰∏≠ÁöÑ username Âèä refer ÊõøÊèõÊéâ Response ÂÖßÂÆπÁöÑÂÅöÊ≥ï„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "index": 0,
    "username": {{body 'username'}},
    "refer": {{body 'refer' ''}}
  },
  "error_code": 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Êê≠ÈÖçÁöÑRequestÔºö&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST /api/v1/users
Content-Type: application/json

{
  "username": "John", 
  "refer": "XDCJJU8"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Templating Â•óÁî®Âú®ËÆÄÂèñÊú¨Âú∞Á´ØÊ™îÊ°à&lt;br&gt;
‰ΩøÁî® url ËÆÄÂèñÂ∞çÊáâÁöÑÊú¨Âú∞Á´ØÊ™îÊ°àÔºåÂú®ÂéüÊú¨ url ‰∏≠Ê™îÊ°àÂêçÁ®±ÁöÑ‰ΩçÁΩÆ‰∏äÂä†‰∏ä &lt;code&gt;:jsFile&lt;/code&gt; ‰∏¶Âú® File ÁöÑË∑ØÂæë‰∏≠‰ΩøÁî® &lt;code&gt;{{urlParam 'jsFileF'}}&lt;/code&gt; ÊîπËÆäËÆÄÂèñÁöÑÊ™îÊ°àË∑ØÂæë„ÄÇ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYk2t4YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ievhgcgxyhjwe3ifrifd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYk2t4YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ievhgcgxyhjwe3ifrifd.png" alt="Path Templating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ÁµêË™û&lt;br&gt;
Mockoon Âú®Ë®≠ÂÆö‰∏äÂçÅÂàÜÁ∞°ÂñÆÔºåÂäüËÉΩ‰πüÁõ∏ÂÆåÊï¥ÔºåÂæàÂÄºÂæóÂâçÁ´ØÁöÑÈñãÁôºËÄÖÂ∞éÂÖ•ÈñãÁôºÊµÅÁ®ã‰πã‰∏≠„ÄÇ&lt;/p&gt;

&lt;p&gt;ÂèÉËÄÉË≥áÊñôÔºö&lt;br&gt;
Mockoon ÂÆòÁ∂≤&lt;/p&gt;

</description>
      <category>testing</category>
      <category>mock</category>
    </item>
    <item>
      <title>WASD knight | A 2d sidescroller rage game.</title>
      <author>FRADAR</author>
      <pubDate>Sun, 20 Jun 2021 15:33:06 +0000</pubDate>
      <link>https://dev.to/fradar/wasd-knight-a-2d-sidescroller-rage-game-12lo</link>
      <guid>https://dev.to/fradar/wasd-knight-a-2d-sidescroller-rage-game-12lo</guid>
      <description>&lt;p&gt;A 2D rage game.&lt;/p&gt;

&lt;p&gt;I dare you to take up the challenge to finish it.&lt;/p&gt;

&lt;p&gt;HOW TO PLAY:&lt;br&gt;
  Movement&lt;br&gt;
    W-Up&lt;br&gt;
    A-Left&lt;br&gt;
    D-Right&lt;br&gt;
    S-Down&lt;br&gt;
  Blocks&lt;br&gt;
    Walls(grey)-Walls are solid blocks that you cannot go through&lt;br&gt;
    Water(blue)-Water slows you down&lt;br&gt;
    Lava(red)-Lava will kill you if you touch it&lt;br&gt;
    Portal(blue-purple)-The portal will end the game if you touch it; you win!&lt;br&gt;
  Enemies&lt;br&gt;
    Green Slime-A green slime moves back and forth and will kill you if you touch it&lt;br&gt;
    Red Slime-A red slime does not kill you but it will stretch to push you&lt;br&gt;
    Summoned-A summoned will slowly move up and down many blocks and will kill you if you touch it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S&lt;/em&gt; This is not my best work :)&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/WNpWvZN"&gt;https://codepen.io/FRADAR/full/WNpWvZN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Wanna see more?&lt;br&gt;
Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>javascript</category>
      <category>platformer</category>
    </item>
    <item>
      <title>A post title</title>
      <author>dibalikpohon</author>
      <pubDate>Sun, 20 Jun 2021 15:30:03 +0000</pubDate>
      <link>https://dev.to/dibalikpohon/a-post-title-5hk6</link>
      <guid>https://dev.to/dibalikpohon/a-post-title-5hk6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-is-a-heading"&gt;
  &lt;/a&gt;
  This is a heading
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I like singing and dancing
Hello world!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;End of text.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>c</category>
    </item>
    <item>
      <title>Kubernetes Cluster Autoscaler With IRSA</title>
      <author>Vu Dao</author>
      <pubDate>Sun, 20 Jun 2021 15:23:14 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/kubernetes-cluster-autoscaler-with-irsa-3bg5</link>
      <guid>https://dev.to/awscommunity-asean/kubernetes-cluster-autoscaler-with-irsa-3bg5</guid>
      <description>&lt;p&gt;TL,DR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#irsa-is-iam-role-for-service-account-this-post-shows-you-how-to-deploy-cluster-autoscaler-as-a-deployment-and-assign-irsa-for-it-to-provide-proper-permissions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;IRSA is IAM Role for service account. This post shows you how to deploy Cluster Autoscaler as a deployment and assign IRSA for it to provide proper permissions.&lt;/strong&gt;
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-the-kubernetes-cluster-autoscaler"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why do we need The Kubernetes Cluster Autoscaler?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Kubernetes Cluster Autoscaler (CA) is a popular Cluster Autoscaling solution maintained by SIG Autoscaling. While the HPA and VPA allow you to scale pods, CA is responsible for ensuring that your cluster has enough nodes to schedule your pods without wasting resources. It watches for pods that fail to schedule and for nodes that are underutilized. It then simulates the addition or removal of nodes before applying the change to your cluster. The AWS Cloud Provider implementation within Cluster Autoscaler controls the &lt;code&gt;.DesiredReplicas&lt;/code&gt; field of your EC2 Auto Scaling Groups.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPYcFXox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling/img/architecture.png%3Fraw%3Dtrue"&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What‚Äôs In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-What-is-Cluster-Autoscaler"&gt;What is Cluster Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Apply-cluster-autoscaler-deployment-in-kube-system"&gt;Apply cluster autoscaler deployment in kube-system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Create-IAM-role-for-service-account"&gt;Create IAM role for service account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Annotate-the-EKS-service-account"&gt;Annotate the EKS service account)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Restart-the-cluster-autoscaler-pod-to-take-effect"&gt;Restart the cluster autoscaler pod to take effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Undestand-some-Parameters-in-Autoscaler"&gt;Undestand some Parameters in Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Basic-Test-the-cluster-autoscaler"&gt;Basic Test the cluster-autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-is-cluster-autoscaler"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-What-is-Cluster-Autoscaler"&gt;What is Cluster Autoscaler&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Cluster Autoscaler is a tool that automatically adjusts the size of the Kubernetes cluster when one of the following conditions is true:

&lt;ul&gt;
&lt;li&gt;There are pods that failed to run in the cluster due to insufficient resources. Whenever this occurs, the Cluster Autoscaler will update the Amazon EC2 Auto Scaling group to increase the desired count, resulting in additional nodes in the cluster.&lt;/li&gt;
&lt;li&gt;There are nodes in the cluster that have been underutilized for an extended period of time and their pods can be placed on other existing nodes. Cluster Autoscaler will then decrease the desired count for the Auto Scaling group to scale in the number of nodes.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#apply-cluster-autoscaler-deployment-in-kubesystem"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Apply-cluster-autoscaler-deployment-in-kube-system"&gt;Apply cluster autoscaler deployment in kube-system&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On AWS, Cluster Autoscaler utilizes Amazon EC2 Auto Scaling Groups to manage node groups. Cluster Autoscaler typically runs as a Deployment in your cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download &lt;code&gt;cluster-autoscaler-autodiscover.yaml&lt;/code&gt; file to update the command point to your EKS cluster and customize expected parameters such as Optimizing for Cost and Availability, Prevent Scale Down Eviction&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Edit the cluster-autoscaler container command to replace  (including &amp;lt;&amp;gt;) with your cluster's name, and add the following options.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  --balance-similar-node-groups
  --skip-nodes-with-system-pods=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to run a cluster with nodes in multiples zones for HA. The flag &lt;code&gt;balance-similar-node-groups&lt;/code&gt; is intended to support this use case&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;skip-nodes-with-system-pods&lt;/code&gt; If true cluster autoscaler will never delete nodes with pods from kube-system (except for DaemonSet or mirror pods) we should avoid this for cost optimization.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Check the files at some important fields

&lt;ul&gt;
&lt;li&gt;ServiceAccount&lt;/li&gt;
&lt;li&gt;Version of cluster autoscaler: &lt;code&gt;cluster-autoscaler:v1.17.3&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Command
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;            command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --expander=least-waste
            - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/sel-eks-dev
            - --balance-similar-node-groups
            - --skip-nodes-with-system-pods=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then we apply the yaml file and move to next step to create IRSA (IAM Role for service account) for the autoscaler deployment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pod -n kube-system |grep autoscaler
cluster-autoscaler-68857f6759-cwd8b   1/1     Running   0          2d10h
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#create-iam-role-for-service-account"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Create-IAM-role-for-service-account"&gt;Create IAM role for service account&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pre-requisite: EKS cluster with OpenID connect, IAM identity provider (Ref to &lt;a href="https://dev.to/vumdao/using-iam-service-account-instead-of-instance-profile-for-eks-pods-262p"&gt;Using IAM Service Account Instead Of Instance Profile For EKS Pods&lt;br&gt;
&lt;/a&gt; for how to)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cluster Autoscaler requires the ability to examine and modify EC2 Auto Scaling Groups. We recommend using IAM roles for Service Accounts to associate the Service Account that the Cluster Autoscaler Deployment runs as with an IAM role that is able to perform these functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First create the IAM role which is federated by IAM identiy provider and assumed by &lt;code&gt;sts:AssumeRoleWithWebIdentity&lt;/code&gt;, then attach policy to provide permission of autoscaling group for the role. Brief of CDK code in python3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;iam_oic&lt;/code&gt; is the stack of creating IAM identity provider which is used OIDC as provider, &lt;code&gt;open_id_connect_provider_arn&lt;/code&gt; is its attribute from the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
  sel-eks-oic-autoscaler-sa&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    autoscaler_role = iam.Role(
        self, 'AutoScalerRole',
        role_name='sel-eks-oic-autoscaler-sa',
        assumed_by=iam.FederatedPrincipal(
            federated=f'{iam_oic.open_id_connect_provider_arn}',
            conditions={'StringEquals': string_like('kube-system', 'cluster-autoscaler')},
            assume_role_action='sts:AssumeRoleWithWebIdentity'
        )
    )

    asg_statement = iam.PolicyStatement(
        effect=iam.Effect.ALLOW,
        actions=[
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeTags",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "ec2:DescribeLaunchTemplateVersions"
        ],
        resources=['*'],
        conditions={'StringEquals': {"aws:RequestedRegion": "ap-northeast-2"}}
    )

    autoscaler_role.add_to_policy(asg_statement)
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;


Trust relationships looks like:


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::123456789012:oidc-provider/oidc.eks.ap-northeast-2.amazonaws.com/id/&amp;lt;OIDC_PROVIDER_ID&amp;gt;"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "oidc.eks.ap-northeast-2.amazonaws.com/id/&amp;lt;OIDC_PROVIDER_ID&amp;gt;:sub": "system:serviceaccount:kube-system:cluster-autoscaler",
          "oidc.eks.ap-northeast-2.amazonaws.com/id/&amp;lt;OIDC_PROVIDER_ID&amp;gt;:aud": "sts.amazonaws.com"
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;





&lt;ul&gt;
&lt;li&gt;Next step we annotate the EKS service account &lt;code&gt;cluster-autoscaler&lt;/code&gt; with this role&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#annotate-the-eks-service-account"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Annotate-the-EKS-service-account"&gt;Annotate the EKS service account&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run the &lt;code&gt;kubectl&lt;/code&gt; command
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl annotate serviceaccounts -n kube-system cluster-autoscaler eks.amazonaws.com/role-arn=&amp;lt;IAM_role_arn_which_created_above&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check the SA
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl describe sa cluster-autoscaler -n kube-system
Name:                cluster-autoscaler
Namespace:           kube-system
Labels:              k8s-addon=cluster-autoscaler.addons.k8s.io
                     k8s-app=cluster-autoscaler
Annotations:         eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/sel-eks-oic-autoscaler-sa
                     kubectl.kubernetes.io/last-applied-configuration:
                       {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{},"labels":{"k8s-addon":"cluster-autoscaler.addons.k8s.io","k8s-app"...
Image pull secrets:  &amp;lt;none&amp;gt;
Mountable secrets:   cluster-autoscaler-token-xxxxx
Tokens:              cluster-autoscaler-token-xxxxx
Events:              &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#restart-the-cluster-autoscaler-pod-to-take-effect"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Restart-the-cluster-autoscaler-pod-to-take-effect"&gt;Restart the cluster autoscaler pod to take effect&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl rollout restart deploy cluster-autoscaler -n kube-system
deployment.apps/cluster-autoscaler restarted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#weve-done-setting-up-the-cluster-autoscaler-but-we-need-to-understand-some-parameters-in-autoscaler-for-better-choices-of-scalability-performance-availability-and-cost-optimization"&gt;
  &lt;/a&gt;
  We've done setting up the cluster autoscaler but we need to understand some parameters in autoscaler for better choices of Scalability, performance, availability and cost optimization.
&lt;/h2&gt;


&lt;h3&gt;
  &lt;a href="#undestand-some-parameters-in-autoscaler"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Undestand-some-Parameters-in-Autoscaler"&gt;Undestand some Parameters in Autoscaler&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Spot instance:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save up to 90% off the on-demand price, with the trade-off the Spot Instances can be interrupted at any time when EC2 needs the capacity back.&lt;/li&gt;
&lt;li&gt;To solve that we should select as many instance families as possible eg. M4, M5, M5a, and M5n instances all have similar amounts of CPU and Memory.&lt;/li&gt;
&lt;li&gt;The strategy --expander=least-waste is a good general purpose default, and if you're going to use multiple node groups for Spot Instance diversification (Read more &lt;a href="https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders"&gt;Expanders&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HdZ1t9lI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/spot_mix_instance_policy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdZ1t9lI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/spot_mix_instance_policy.jpg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Prevent Scale Down Eviction:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some workloads are expensive to evict such as schedule running reports, cronjob to clear caches or doing backup. The Cluster Autoscaler will attempt to scale down any node under the scale-down-utilization-threshold, which will interrupt any remaining pods on the node. This can be prevented by ensuring that pods that are expensive to evict are protected by a label recognized by the Cluster Autoscaler.&lt;/li&gt;
&lt;li&gt;Ensure that: Expensive to evict pods have the annotation &lt;code&gt;cluster-autoscaler.kubernetes.io/safe-to-evict=false&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. EBS Volumes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stateful applications such as database or cache which need high availability if sharded across multiple AZs using a separate EBS Volume for each AZ.&lt;/li&gt;
&lt;li&gt;Ensure that:

&lt;ul&gt;
&lt;li&gt;Node group balancing is enabled by setting balance-similar-node-groups=true.&lt;/li&gt;
&lt;li&gt;Node Groups are configured with identical settings except for different availability zones and EBS Volumes.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#basic-test-the-clusterautoscaler"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Basic-Test-the-cluster-autoscaler"&gt;Basic Test the cluster-autoscaler&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;- Cluster Autoscaler will respect the minimum and maximum values of each Auto Scaling Group. It will only adjust the desired value.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Cluster Autoscaler will attempt to determine the CPU, memory, and GPU resources provided by an Auto Scaling Group based on the instance type specified in its Launch Configuration or Launch Template. It will also examine any overrides provided in an ASG's Mixed Instances Policy. If any such overrides are found, only the first instance type found will be used&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- In my cluster, I setup the node groud capacity with max_size=2, min_size=1 and desized_size=1, combine with instance types (family type) which ensure the usage of CPU and MEM (r5a.xlarge and r5.xlarge)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;


add_nodegroup_capacity


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        eks_cluster.add_nodegroup_capacity(
            id="SelEksNodeGroup",
            capacity_type=eks.CapacityType.SPOT,
            desired_size=1,
            disk_size=20,
            instance_types=[ec2.InstanceType("r5a.xlarge"), ec2.InstanceType("r5.xlarge")],
            labels={'role': 'worker', 'type': 'stateless'},
            max_size=2,
            min_size=1,
            nodegroup_name='sel-eks-node-group',
            node_role=worker_role,
            subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE)
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;





&lt;h3&gt;
  &lt;a href="#1-test-scaleup-node-when-scaling-out-all-services-by-setting-their-replicas-gt-0-the-clusterautoscaler-detects-the-need-of-more-node-to-add-more-worker"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Test scaleup node: When scaling out all services by setting their replicas &amp;gt; 0 , the cluster-autoscaler detects the need of more node to add more worker.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;See its log&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  I0619 05:56:03.541547       1 scale_up.go:271] Pod dev/stream-58495b5bd6-xjnqk is unschedulable
  I0619 05:56:03.541564       1 scale_up.go:271] Pod dev/index-7b747bc884-7zgwh is unschedulable
  I0619 05:56:03.541570       1 scale_up.go:271] Pod dev/app-58565d7fbf-ptfpr is unschedulable
  I0619 05:56:03.541591       1 scale_up.go:271] Pod dev/nginx-5bbb4f5975-2tg2s is unschedulable
  I0619 05:56:03.541596       1 scale_up.go:271] Pod dev/react-index-sink-797f864767-d9tjg is unschedulable
  I0619 05:56:03.541643       1 scale_up.go:310] Upcoming 0 nodes
  I0619 05:56:03.547721       1 waste.go:57] Expanding Node Group eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx would waste 37.50% CPU, 79.46% Memory, 58.48% Blended
  I0619 05:56:03.547751       1 scale_up.go:431] Best option to resize: eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx
  I0619 05:56:03.547760       1 scale_up.go:435] Estimated 1 nodes needed in eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx
  I0619 05:56:03.550690       1 scale_up.go:539] Final scale-up plan: [{eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx 1-&amp;amp;gt;2 (max: 2)}]
  I0619 05:56:03.550716       1 scale_up.go:700] Scale-up: setting group eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx size to 2
  I0619 05:56:03.550746       1 auto_scaling_groups.go:219] Setting asg eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx size to 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-test-scale-down-node-by-scaling-down-all-services-ca-will-gradually-check-the-cluster-and-then-scaledown-the-node-by-set-the-node-to-raw-schedulingdisabled-endraw-and-update-auto-scaling-group"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Test scale down node by scaling down all services. CA will gradually check the cluster and then scaledown the node by set the node to &lt;code&gt;SchedulingDisabled&lt;/code&gt; and update auto scaling group.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;See the logs&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  I0619 07:11:46.774322       1 scale_down.go:462] Node ip-10-1-2-3.ap-northeast-2.compute.internal - cpu utilization 0.135204
  I0619 07:30:56.486073       1 static_autoscaler.go:428] ip-10-1-2-3.ap-northeast-2.compute.internal is unneeded since 2021-06-19 07:28:35.924053695 +0000 UTC m=+43.074848047 duration 2m20.561420527s
  I0619 07:38:38.637225       1 scale_down.go:716] ip-10-1-2-3.ap-northeast-2.compute.internal was unneeded for 10m2.712507047s
  I0619 07:38:38.637267       1 scale_down.go:944] Scale-down: removing empty node ip-10-1-2-3.ap-northeast-2.compute.internal
  I0619 07:38:38.637418       1 event.go:281] Event(v1.ObjectReference{Kind:"ConfigMap", Namespace:"kube-system", Name:"cluster-autoscaler-status", UID:"78191f9d-4d47-4caa-aa27-xxxxxxxx", APIVersion:"v1", ResourceVersion:"11189392", FieldPath:""}): type: 'Normal' reason: 'ScaleDownEmpty' Scale-down: removing empty node ip-10-1-2-3.ap-northeast-2.compute.internal
  I0619 07:38:38.648522       1 delete.go:102] Successfully added ToBeDeletedTaint on node ip-10-1-2-3.ap-northeast-2.compute.internal
  I0619 07:38:38.845888       1 auto_scaling_groups.go:277] Terminating EC2 instance: i-00744ddf549ac10f4
  I0619 07:38:38.845900       1 aws_manager.go:297] Some ASG instances might have been deleted, forcing ASG list refresh
  I0619 07:38:38.931723       1 auto_scaling_groups.go:351] Regenerating instance to ASG map for ASGs: [eks-78bcedd4-7ade-c33a-yyyy-xxxxxxxx]
  I0619 07:38:38.995577       1 event.go:281] Event(v1.ObjectReference{Kind:"ConfigMap", Namespace:"kube-system", Name:"cluster-autoscaler-status", UID:"78191f9d-4d47-4caa-aa27-xxxxxxxx", APIVersion:"v1", ResourceVersion:"11189433", FieldPath:""}): type: 'Normal' reason: 'ScaleDownEmpty' Scale-down: empty node ip-10-1-2-3.ap-northeast-2.compute.internal removed
  I0619 07:38:38.995605       1 event.go:281] Event(v1.ObjectReference{Kind:"Node", Namespace:"", Name:"ip-10-1-2-3.ap-northeast-2.compute.internal", UID:"e395f5bc-0dd0-4dac-825c-ae7cc5e6cd7e", APIVersion:"v1"
  , ResourceVersion:"11189391", FieldPath:""}): type: 'Normal' reason: 'ScaleDown' node removed by cluster autoscaler
  I0619 07:38:48.662382       1 pre_filtering_processor.go:66] Skipping ip-10-1-2-3.ap-northeast-2.compute.internal - node group min size reached
  I0619 07:38:48.662395       1 pre_filtering_processor.go:66] Skipping ip-10-3-153-87.ap-northeast-2.compute.internal - node group min size reached
  I0619 07:39:52.080232       1 node_tree.go:100] Removed node "ip-10-1-2-3.ap-northeast-2.compute.internal" in group "ap-northeast-2:\x00:ap-northeast-2b" from NodeTree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check the fleet for canceling the spot instance after scaling down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzGTdzcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling/img/fleet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzGTdzcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling/img/fleet.png%3Fraw%3Dtrue" alt="Alt-Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#how-to-remove-spot-instance-from-cluster-manually"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;How to remove spot instance from cluster manually&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some time cluster autoscaler cannot scale down the node due to eg.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I0619 07:11:46.774431       1 cluster.go:107] Fast evaluation: node ip-10-1-2-3.ap-northeast-2.compute.internal cannot be removed: non-daemonset, non-mirrored, non-pdb-assigned kube-system pod present: aws-load-balancer-controller-597c675c8f-d79h5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To scaledown the node we can cordon the node and rollout restart all deployment/daemonset assign on the node, then let the cluster-autoscaler scaledonw the node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you would like to replace a spot instance, flowing reference will help&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ec2spotworkshops.com/launching_ec2_spot_instances/cleanup.html"&gt;https://ec2spotworkshops.com/launching_ec2_spot_instances/cleanup.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ap-northeast-2.console.aws.amazon.com/ec2sp/v2/home?region=ap-northeast-2#/spot"&gt;https://ap-northeast-2.console.aws.amazon.com/ec2sp/v2/home?region=ap-northeast-2#/spot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  üöÄ &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using Cluster Autoscaler is the best practice in your EKS cluster, one of the most benifit is COST.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iMnjTiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling/img/reduce_bill.jpg%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iMnjTiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling/img/reduce_bill.jpg%3Fraw%3Dtrue"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;- Refs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html"&gt;https://docs.aws.amazon.com/eks/latest/userguide/cluster-autoscaler.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/cluster-autoscaling/"&gt;https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/cluster-autoscaling/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;üå† Blog&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling"&gt;Github&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; ¬∑ &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter üå†&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>eks</category>
      <category>k8s</category>
      <category>cdk</category>
      <category>cdk8s</category>
    </item>
    <item>
      <title>Memory management using Smart Pointers in C++ - Part 1</title>
      <author>Pratik Parvati</author>
      <pubDate>Sun, 20 Jun 2021 15:22:24 +0000</pubDate>
      <link>https://dev.to/pratikparvati/memory-management-using-smart-pointers-in-c-part-1-4j2k</link>
      <guid>https://dev.to/pratikparvati/memory-management-using-smart-pointers-in-c-part-1-4j2k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#memory-management-using-smart-pointers-in-c-part-1"&gt;
  &lt;/a&gt;
  Memory management using Smart Pointers in C++ - Part 1
&lt;/h1&gt;

&lt;p&gt;One of the major strengths and weaknesses of both C and C++ are pointers. C++ has many benefits of pointers but also several pitfalls if memory management is not performed correctly. Pointers require explicit management of the resources to which they refer.  For example, a pointer that holds the address of dynamically allocated memory retrieved using &lt;code&gt;new&lt;/code&gt; requires the programmer to release that memory using &lt;code&gt;delete&lt;/code&gt;; failing to do so results in dangling pointers or memory leaks which are difficult to find.&lt;/p&gt;

&lt;p&gt;A smart pointer provides a mechanism that automates the explicit management of a resource. A smart pointer, as opposed to a raw pointer, can manage the memory of the resource to which it points. It is a proxy for a raw pointer to the resource, and it looks and feels like a raw pointer. It supports the dereferencing &lt;code&gt;(*)&lt;/code&gt; and member by pointer &lt;code&gt;(-&amp;gt;)&lt;/code&gt; operators. A smart pointer resides on the stack; when it goes out of scope, its destructor deallocates the dynamic memory to which it points to. &lt;/p&gt;

&lt;p&gt;Smart pointers implement the object-oriented language idiom Resource Acquisition Is Initialization (&lt;a href="https://en.cppreference.com/w/cpp/language/raii"&gt;RAII&lt;/a&gt;). This idiom states that the resource is acquired at initialization time, i.e, when the memory for the pointer is created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-we-use-smart-pointers"&gt;
  &lt;/a&gt;
  Why should we use Smart Pointers?
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs look at this very simple piece of code that causes a memory leak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Oops forgot to delete ptr&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When I use &lt;a href="https://valgrind.org/"&gt;Valgrind&lt;/a&gt; to check the binary for memory leaks; I got the following results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; LEAK SUMMARY:
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;    definitely lost: 80 bytes &lt;span class="k"&gt;in &lt;/span&gt;1 blocks
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;    indirectly lost: 0 bytes &lt;span class="k"&gt;in &lt;/span&gt;0 blocks
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;      possibly lost: 0 bytes &lt;span class="k"&gt;in &lt;/span&gt;0 blocks
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;    still reachable: 0 bytes &lt;span class="k"&gt;in &lt;/span&gt;0 blocks
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;         suppressed: 0 bytes &lt;span class="k"&gt;in &lt;/span&gt;0 blocks
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; For lists of detected and suppressed errors, rerun with: &lt;span class="nt"&gt;-s&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;1562402&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; ERROR SUMMARY: 1 errors from 1 contexts &lt;span class="o"&gt;(&lt;/span&gt;suppressed: 0 from 0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can clearly see that we leaked 80 bytes (4 bytes x 20) of memory because we did not run &lt;code&gt;delete&lt;/code&gt; on &lt;code&gt;ptr&lt;/code&gt; and it is quit difficult to manually keep track of all allocations and &lt;code&gt;delete&lt;/code&gt; them at the right time; especially when we have sufficiently large C++ project where objects are copied, moved and passed everywhere in the code.&lt;/p&gt;

&lt;p&gt;Let's look at another scenario of memory leak using raw pointers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// memory leak&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;// ....&lt;/span&gt;

     &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;someOtherFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming the function &lt;code&gt;someFunction()&lt;/code&gt; is getting called infinite times and the &lt;code&gt;obj&lt;/code&gt; validation fails every time. This leads to the situations when programmers keep allocating new memory and do not lose any pointers to it, but keep pointers to objects that the program is not going to use anymore (dangling pointer). This is not formally a memory leak but leads to the same situation: &lt;em&gt;a program running out of memory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Even if we use &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; pairs correctly we may encounter a scenario of memory leak. Lets look at the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SomeMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;SomeOtherMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;      &lt;span class="c1"&gt;// it can throw an exception&lt;/span&gt;
   &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If an exception is thrown, the &lt;code&gt;obj&lt;/code&gt; object is never deleted. No matter how much we try, it is very difficult to free all dynamically allocated memory. Even if we can do that, it is often not safe from exceptions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deleting an Array With &lt;code&gt;delete&lt;/code&gt;&lt;/strong&gt; &lt;br&gt;
Creating temporary arrays of dynamic size is often necessary. After they are not required anymore, it is important to free the allocated memory. The C++ requires special &lt;code&gt;delete&lt;/code&gt; operator with &lt;code&gt;[]&lt;/code&gt; brackets, which is forgotten very easily. The &lt;code&gt;delete[]&lt;/code&gt; operator call destructors of all objects from an array along with deleting the memory allocated for an array. It is also incorrect to use the &lt;code&gt;delete&lt;/code&gt; operator without &lt;code&gt;[]&lt;/code&gt; brackets for an array, which results in undefined behaviour.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#we-should-avoid-using-heap-memory-as-much-as-possible"&gt;
  &lt;/a&gt;
  We should avoid using heap memory as much as possible
&lt;/h4&gt;

&lt;p&gt;And for these reasons, modern C++ avoids using heap memory as much as possible by declaring objects on the stack; when a resource-owning stack object goes out of scope, its destructor is automatically invoked.&lt;/p&gt;

&lt;p&gt;The following example shows a simple object &lt;code&gt;e&lt;/code&gt;. It is declared on the stack at function scope, and is destroyed at the end of the function block. The object &lt;code&gt;e&lt;/code&gt; owns no resources (such as heap-allocated memory) and hence no special code is needed in the &lt;code&gt;Entity&lt;/code&gt; destructor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Entity&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="k"&gt;explicit&lt;/span&gt; &lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// acquire&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// release&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;functionUsingEntity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Entity&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// lifetime automatically tied to enclosing scope&lt;/span&gt;

    &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// automatic destruction and deallocation for e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since C++11, there is a better way to write the previous example: by using a smart pointer from the standard library. The smart pointer manages the allocation and deletion of memory that it owns. The use of a smart pointer eliminates the need for an explicit destructor in the &lt;code&gt;Entity&lt;/code&gt; class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-smart-pointers"&gt;
  &lt;/a&gt;
  Types of Smart Pointers
&lt;/h3&gt;

&lt;p&gt;There are 3 types of smart pointers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unique Pointer (&lt;code&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exclusive ownership&lt;/li&gt;
&lt;li&gt;Lightweight pointers&lt;/li&gt;
&lt;li&gt;Destroys the object when goes out of scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shared Pointer (&lt;code&gt;std::shared_ptr&amp;lt;&amp;gt;&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared ownership&lt;/li&gt;
&lt;li&gt;Destroys the object when last reference is released&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Weak Pointer (&lt;code&gt;std::weak_ptr&amp;lt;&amp;gt;&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Breaks cyclic references&lt;/li&gt;
&lt;li&gt;used with &lt;code&gt;shared_ptr&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt;  auto pointer (&lt;code&gt;std::auto_ptr&lt;/code&gt;) has been depreciated after the inclusion of move semantics in C++11. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#unique-pointers-raw-stduniqueptrltgt-endraw-"&gt;
  &lt;/a&gt;
  Unique Pointers (&lt;code&gt;std::unique_ptr&amp;lt;&amp;gt;&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;With a &lt;code&gt;unique_ptr&lt;/code&gt;, you can point to an allocated object, and when the &lt;code&gt;unique_ptr&lt;/code&gt; goes out of scope, the pointed-to object gets deleted,and this happens regardless of how we leave the function, either by a return or an exception being thrown somewhere. &lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;functionWithUniquePointer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ptr owns the MyClass resource&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;               &lt;span class="c1"&gt;// tell the object to do something&lt;/span&gt;
    &lt;span class="n"&gt;do_somethingelse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                &lt;span class="c1"&gt;// might throw an exception&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// ptr gets destroyed; destructor deletes the MyClass object resource&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-raw-uniqueptr-endraw-like-a-raw-pointers"&gt;
  &lt;/a&gt;
  using &lt;code&gt;unique_ptr&lt;/code&gt; like a raw pointers
&lt;/h4&gt;

&lt;p&gt;Since the dereferencing &lt;code&gt;(*)&lt;/code&gt; and member by pointer &lt;code&gt;(-&amp;gt;)&lt;/code&gt; operators are overloaded in &lt;code&gt;unique_ptr&lt;/code&gt; class, we can use &lt;code&gt;unique_ptr&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// used arrow operator similar to raw pointers&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// used dereferencing operator similar to raw pointers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also check the null-ness of the pointer similar to raw pointers as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Freeing the memory sets the &lt;code&gt;unique_ptr&lt;/code&gt; to &lt;code&gt;nullptr&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;
&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#exclusive-ownership-of-object-for-raw-uniqueptr-endraw-"&gt;
  &lt;/a&gt;
  Exclusive ownership of object for &lt;code&gt;unique_ptr&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;To be the only owner of a resource means that only the respective &lt;code&gt;unique_ptr&lt;/code&gt; pointers are responsible for deleting the object when it is no longer needed (i.e, responsible about the lifetime of the object). This implies that nobody else can use the object after its lifetime ended and for the same reason the &lt;code&gt;std::unique_ptr&lt;/code&gt; has practically no overhead and has very predictable behavior.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;unique_ptr&lt;/code&gt; maintains sole ownership of the resource, one can not make a copy of it and for the type safety reasons the copy constructor and copy assignment operators are deleted. Instead we can transfer/move ownership of the pointer from the one pointer object to another using &lt;strong&gt;move semantics&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// p1 owns the Thing&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error - copy construction is not allowed.&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// an empty unique_ptr;&lt;/span&gt;
&lt;span class="n"&gt;p3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// error, copy assignment is not allowed.&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;up1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;up2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;up1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ownership transfer using move semantics is allowed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#passing-raw-stduniqueptr-endraw-as-function-argument"&gt;
  &lt;/a&gt;
  Passing &lt;code&gt;std::unique_ptr&lt;/code&gt; as function argument
&lt;/h5&gt;

&lt;p&gt;A &lt;code&gt;unique_ptr&lt;/code&gt; has to be moved while passing it to a function that takes a &lt;code&gt;unique_ptr&lt;/code&gt; by value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//call foo&lt;/span&gt;

&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_unique&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some string"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//!ERROR. No copy allowed.&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//OK. Explicit move&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;make_unique&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some string"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//OK. Implicit move&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-stduniqueptr-endraw-with-standard-containers"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;std::unique_ptr&lt;/code&gt; with Standard Containers
&lt;/h3&gt;

&lt;p&gt;We can fill a Standard Container with &lt;code&gt;unique_ptr&lt;/code&gt;s that own objects, and the ownership then effectively resides in the container.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You must fill the container by supplying &lt;em&gt;rvalue&lt;/em&gt; &lt;code&gt;unique_ptr&lt;/code&gt;s, so the ownership transfers into the&lt;br&gt;
&lt;code&gt;unique_ptr&lt;/code&gt; in the container&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you erase an item in the container, you are destroying the &lt;code&gt;unique_ptr&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you transfer ownership out of container items, the empty &lt;code&gt;unique_ptr&lt;/code&gt;s stay in the container.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#custom-deleters-for-raw-stduniqueptr-endraw-"&gt;
  &lt;/a&gt;
  Custom deleters for &lt;code&gt;std::unique_ptr&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The complete type of &lt;code&gt;std::unique_ptr&lt;/code&gt; has a second template parameter, its deleter that has a default type &lt;code&gt;std::default_delete&amp;lt;T&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Deleter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;default_delete&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;unique_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;unique_ptr&lt;/code&gt; can be declared and initialized with a user-provided custom deleter that is called to destroy the object resource.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomDeleter&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"freeing memory using 'delete'...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;U&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"freeing memory using 'delete[]'...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;upi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt; &lt;span class="c1"&gt;// using unique_ptr with raw pointer is discouraged&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="n"&gt;CustomDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;upari&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CustomDeleter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CustomDeleter is passed as an argument to constructor and stored as a member of a &lt;code&gt;unique_ptr&lt;/code&gt; object. A deleter can be a function object, a function pointer, or a Lambda. The above example uses function object as second parameter.&lt;/p&gt;

&lt;p&gt;Very simple example for customer deleter using function pointer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Function pointer deleter&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;up_fptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deleter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;custom deleter using lambda&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// With a capture-less lambda. &lt;/span&gt;
     &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Lambda deleter&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
     &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;unique_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;decltype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;up_lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common use of &lt;code&gt;unique_ptr&lt;/code&gt; is as a pretty fool-proof way of making sure an object allocated in function gets deleted. However, there are situations in which ownership of objects needs to be transferred around but always remains in one place at a time; &lt;code&gt;unique_ptr&lt;/code&gt; gives you way to represent this concept directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h3&gt;

&lt;p&gt;In the next article, I will write about &lt;code&gt;std::shared_ptr&lt;/code&gt; and &lt;code&gt;std::weak_ptr&lt;/code&gt; in detail; also, I will talk about these smart pointers in terms of performance.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>smartpointers</category>
    </item>
    <item>
      <title>7 Awesome GitHub Repositories for JavaScript developers.  A Thread üëá</title>
      <author>Manitej ‚ö°</author>
      <pubDate>Sun, 20 Jun 2021 15:13:51 +0000</pubDate>
      <link>https://dev.to/manitej/7-awesome-github-repositories-for-javascript-developers-a-thread-1nkk</link>
      <guid>https://dev.to/manitej/7-awesome-github-repositories-for-javascript-developers-a-thread-1nkk</guid>
      <description>&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      7 Awesome GitHub Repositories for JavaScript developers.&lt;br&gt;&lt;br&gt;A Thread üëá
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603632422707208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603632422707208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603632422707208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sW7PhWZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VCjghUcAgSpSE.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      1Ô∏è‚É£ JavaScript30&lt;br&gt;&lt;br&gt;This repository is a collection of 30 awesome JavaScript vanilla projects created by Wes Bos. Build 30 things in 30 days and enhance your JavaScript skills. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603638085091331" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603638085091331" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603638085091331" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XsbSVbo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VCj4PVoAEUM8V.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2Ô∏è‚É£ wtfjs&lt;br&gt;&lt;br&gt;A list of funny and tricky JavaScript examples. If you are a beginner, you can use these notes to get a deeper dive into JavaScript. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603644732985345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603644732985345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603644732985345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1iobgZ1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VCkQDVUAQsAp5.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      3Ô∏è‚É£ front-end-interview-handbook&lt;br&gt;&lt;br&gt;Almost complete answers to "Front-end Job Interview Questions" which you can use to interview potential candidates, test yourself. Go from zero to front end interview hero with this handbook. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603651171295237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603651171295237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603651171295237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jo2oUcqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VCknfVEAsTGDd.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      4Ô∏è‚É£ javascript-questions&lt;br&gt;&lt;br&gt;A long list of (advanced) JavaScript questions, and their explanations. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603657844383746" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603657844383746" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603657844383746" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HmB8Cc_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VClAxVgAEKoxV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5Ô∏è‚É£ es6-cheatsheet&lt;br&gt;&lt;br&gt;This repository contains [ES6] cheat sheet containing tips, tricks, best practices and code snippets. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603664102330368" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603664102330368" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603664102330368" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF59f3Eh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4VClYaVUAYvXVR.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7k_spQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1395959712168824833/Y8lcLyJZ_normal.jpg" alt="Insha profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Insha
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @insharamin
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      6Ô∏è‚É£ 33-js-concepts&lt;br&gt;&lt;br&gt;This repository was created with the intention of helping developers master their concepts in JavaScript. 33 JavaScript concepts every developer should know. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:23 PM - 20 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1406603670267985924" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1406603670267985924" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1406603670267985924" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;this article is generated using &lt;a href="https://github.com/Manitej66/twlog"&gt;https://github.com/Manitej66/twlog&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Build NGINX from Source Code on Ubuntu 20.04</title>
      <author>Arman ali</author>
      <pubDate>Sun, 20 Jun 2021 15:12:11 +0000</pubDate>
      <link>https://dev.to/armanism24/how-to-build-nginx-from-source-code-on-ubuntu-20-04-31e5</link>
      <guid>https://dev.to/armanism24/how-to-build-nginx-from-source-code-on-ubuntu-20-04-31e5</guid>
      <description>&lt;p&gt;By &lt;a href="https://www.armanism.com"&gt;Arman Ali&lt;/a&gt;&lt;br&gt;
NGINX was created in 2004 by Russian developer Igor Sysoev as he was frustrated with Apache and wanted to build a replacement capable of handling 10,000 concurrent connections with a focus on performance, high concurrency, and low memory usages.&lt;/p&gt;

&lt;p&gt;Today NGINX servers the majority of the world's top 1000 websites and while this growth is largely due to, it's also because NGINX is relatively easy to get started with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There are two methods of installing NGINX on Ubuntu 20.04.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via the operating system's build-in packages manager.&lt;/li&gt;
&lt;li&gt;Via building NGINX from the source.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this guide, we‚Äôll build NGINX from the source on Ubuntu 20.04.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To complete this tutorial, you will need to have an Ubuntu 20.04 server. for the sake of simplicity, we'll be working as root during this guide.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-update-and-install-dependencies-for-nginx"&gt;
  &lt;/a&gt;
  Step 1 - Update and Install Dependencies for NGINX
&lt;/h3&gt;

&lt;p&gt;In order to build NGINX from the source first, we need to install a couple of dependencies for NGINX.&lt;/p&gt;

&lt;p&gt;Login to your server via SSH terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh username@you-IP-address
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update the Ubuntu‚Äôs package manager&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, install development libraries along with source code compilers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev libgd-dev libxml2 libxml2-dev uuid-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Press &lt;code&gt;Y&lt;/code&gt; for yes&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-download-nginx-source-code-and-configure"&gt;
  &lt;/a&gt;
  Step 2 - Download NGINX Source Code and Configure
&lt;/h3&gt;

&lt;p&gt;We Now have all the necessary tools to compile NGINX.&lt;/p&gt;

&lt;p&gt;Now, we need to download the NGINX source from their Official website.&lt;/p&gt;

&lt;p&gt;Run the following command to download the source code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget  http://nginx.org/download/nginx-1.20.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now NGINX source code in tarball format extract it by using this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tar -zxvf nginx-1.20.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to the extracted directory by using this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nginx-1.20.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to use configure flag for configuring Nginx by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure --prefix=/var/www/html --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --with-pcre  --lock-path=/var/lock/nginx.lock --pid-path=/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module=dynamic --modules-path=/etc/nginx/modules --with-http_v2_module --with-stream=dynamic --with-http_addition_module --with-http_mp4_module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above command, we configured our custom path for the NGINX configuration file, access, and Error Log path with some NGINX's module.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-build-nginx-amp-adding-modules"&gt;
  &lt;/a&gt;
  Step 3 - Build NGINX &amp;amp; Adding Modules
&lt;/h3&gt;

&lt;p&gt;There are many configuration options available in NGINX. you can use it as per your need. To find all the configuration options available in NGINX&lt;br&gt;
you can visit &lt;a href="http://nginx.org/en/download.html"&gt;nginx.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some modules that come pre-installed in NGINX.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modules Built by Default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you do not need a module that is built by default, you can disable it by naming it with the &lt;code&gt;--without-&amp;lt;MODULE-NAME&amp;gt;&lt;/code&gt; option on the configure script, as in this example which disables the Empty GIF module (should be typed as a single line):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure --without-http_empty_gif_module
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two types of Modules in NGINX that you can use.&lt;br&gt;
Statically Linked Modules&lt;br&gt;
Dynamically Linked Modules&lt;/p&gt;

&lt;p&gt;1- Statically Linked Modules&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These modules load by default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most modules built into NGINX are statically linked: they are built into NGINX at compile time and are linked to the NGINX binary statically. These modules can be disabled only by recompiling NGINX.&lt;/p&gt;

&lt;p&gt;To compile NGINX with a statically linked third‚Äëparty module, include the &lt;code&gt;--add-module=&amp;lt;PATH&amp;gt;&lt;/code&gt; option on the configure command, where &lt;code&gt;&amp;lt;PATH&amp;gt;&lt;/code&gt; is the path to the source code (this example is for the RTMP module):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure ... --add-module=/usr/build/nginx-rtmp-module 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2  - Dynamically Linked Modules&lt;/p&gt;

&lt;p&gt;These modules are not loaded by default you have to load them in the NGINX configuration file &lt;/p&gt;

&lt;p&gt;For example - &lt;code&gt;load_module modules/ngx_mail_module.so;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NGINX modules can also be compiled as a shared object (*.so file) and then dynamically loaded into NGINX Open Source at runtime. This provides more flexibility, as the module can be loaded or unloaded at any time by adding or removing the associated load_module directive in the NGINX configuration file and reloading the configuration. Note that the module itself must support dynamic linking.&lt;/p&gt;

&lt;p&gt;To compile NGINX Open Source with a dynamically loaded third‚Äëparty module, include the &lt;code&gt;--add-dynamic-module=&amp;lt;PATH&amp;gt;&lt;/code&gt; option on the configure command, where &lt;code&gt;&amp;lt;PATH&amp;gt;&lt;/code&gt; is the path to the source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure ... --add-dynamic-module=&amp;lt;PATH&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Compiling the NGINX source&lt;/p&gt;

&lt;p&gt;After custom configuration complete we can now compile NGINX source code by using this command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;make 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be taking quite a bit of time and once that's done install the complied source code by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;make install

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start NGINX by using this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have successfully installed NGINX. To verify this check the NGINX version by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx -V
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can visit your IP to see the holding page NGINX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://your-IP-address 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-adding-an-nginx-service"&gt;
  &lt;/a&gt;
  Step 4 - Adding an NGINX Service
&lt;/h3&gt;

&lt;p&gt;With our custom-built of NGINX working and listening on HTTP Port 80, the next step is configuring system service for NGINX.&lt;/p&gt;

&lt;p&gt;More specifically will be adding NGINX as a systemd service the newer and more popular standard for services.&lt;/p&gt;

&lt;p&gt;Now, before we continue to note that systemd is only available since Ubuntu 15.04.&lt;/p&gt;

&lt;p&gt;Creating an NGINX service will not only allow us to manage starting stopping and reloading NGINX in a more standardized way but also make starting NGINX on boot much simpler.&lt;/p&gt;

&lt;p&gt;Standard NGINX command-line tools&lt;/p&gt;

&lt;p&gt;Before we start, however, let's quickly see how to use the standard NGINX command-line tools to execute service signals.&lt;/p&gt;

&lt;p&gt;We can confirm that NGINX is running by checking for the process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ps aux | grep nginx 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see here the master and worker process.&lt;/p&gt;

&lt;p&gt;So with NGINX running in the background, let's see how to send it a stop signal. Using the standard command-line tools.&lt;/p&gt;

&lt;p&gt;For example, with NGINX running, we can send the stop signal with NGINX by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx -s stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the NGINX status by visiting your IP address you will not see any holding page as NGINX is now stopped or more accurately terminated.&lt;/p&gt;

&lt;p&gt;You can again start NGINX by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nginx -s start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So next, let's add that systemd service.&lt;/p&gt;

&lt;p&gt;To enable the service, we're going to have to add a small script, which is the same across operating systems.&lt;/p&gt;

&lt;p&gt;Create an Nginx systemd unit file by using nano editor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano /lib/systemd/system/nginx.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and paste this script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/var/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can change the PIDfile location as per your custom configuration path.&lt;/p&gt;

&lt;p&gt;Now, save the file by pressing key &lt;code&gt;CLR+X, Y,&lt;/code&gt; and Enter to save this file.&lt;/p&gt;

&lt;p&gt;Now you can manage your NGINX by using Systemd for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also check the status of NGINX whether it is running or not by using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl status nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us a really informative printout of the NGINX server status.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-enable-nginx-on-boot"&gt;
  &lt;/a&gt;
  Step 5 - Enable NGINX on Boot
&lt;/h3&gt;

&lt;p&gt;Now, as we mentioned, the other very useful feature of a systemd service is enabling NGINX to start automatically when the system Boots at the moment, when this machine is shut down or rebooted NGINX will no longer be running.&lt;/p&gt;

&lt;p&gt;Obviously not good for a web server in particular.&lt;/p&gt;

&lt;p&gt;So to enable start-up on boot run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we get confirmation of a start-up, symlink being created for this service.&lt;/p&gt;

&lt;p&gt;We can test this by rebooting the machine reboot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this guide, we have build NGINX from source on Ubuntu 20.04. if you have any question regarding this please let me know in the comment section.&lt;/p&gt;

</description>
      <category>nginx</category>
      <category>ubuntu</category>
      <category>linux</category>
    </item>
    <item>
      <title>Beginner JavaScript - 8 - Strings </title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 20 Jun 2021 15:06:50 +0000</pubDate>
      <link>https://dev.to/thenerdydev/beginner-javascript-8-strings-2788</link>
      <guid>https://dev.to/thenerdydev/beginner-javascript-8-strings-2788</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us discuss about the Strings in JavaScript. This is the eighth part of my &lt;strong&gt;Beginner JavaScript Series&lt;/strong&gt; on Dev.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strings-in-javascript-a-complete-picture"&gt;
  &lt;/a&gt;
  Strings in JavaScript - A complete picture
&lt;/h2&gt;

&lt;p&gt;In JavaScript, the textual data stored in form of a series of characters is known as a string. Here in JavaScript, we don't have a separate type for a single character. &lt;/p&gt;

&lt;p&gt;For example, if you have a sentence then that sentence is a series of characters so in the programming language, it is referred as a string of characters. A word itself is a string as well because it is composed of several characters like 'cricket', 'javascript' etc. &lt;/p&gt;

&lt;p&gt;Let us now see how we can define strings using different types of quotes. &lt;/p&gt;

&lt;p&gt;So we can use three types of quotes to define strings : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Single Quotes &lt;/li&gt;
&lt;li&gt;Double Quotes &lt;/li&gt;
&lt;li&gt;Backticks &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let us see an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// String in single quotes &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordInSingleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is some string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// String in double quotes &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordInDoubleQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is string enclosed in double quotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// String in template strings (backticks)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wishMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Good morning, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// interpolating name using template strings syntax. &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wishMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// logs Good morning, Alex&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-length-of-strings"&gt;
  &lt;/a&gt;
  Getting the length of strings
&lt;/h2&gt;

&lt;p&gt;In JavaScript, to get the length of the string we can make use of the length property. Let us see an example for same :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript is my favorite programming language&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someVariable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#accessing-characters"&gt;
  &lt;/a&gt;
  Accessing characters
&lt;/h2&gt;

&lt;p&gt;To extract a character at some position, say, position, use square brace notation like this :  [position]. &lt;br&gt;
As an alternative we can also call the &lt;strong&gt;charAt&lt;/strong&gt; method to extract a character sitting at some specific position. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : The first character starts from the zero position. &lt;/p&gt;

&lt;p&gt;Let us see an example to understand how we can access characters in JavaScript.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 1. Using the square brace notation (indexing)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The first character of our string is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// H&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Using the charAt method to get the first character of our string &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// H&lt;/span&gt;

&lt;span class="c1"&gt;// 3. Using the charAt method to get the last character of our string &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// t &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#iterating-over-characters-using-forof"&gt;
  &lt;/a&gt;
  Iterating over characters using for...of
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#the-immutability-of-strings"&gt;
  &lt;/a&gt;
  The Immutability of Strings
&lt;/h3&gt;

&lt;p&gt;Strings can‚Äôt be changed/mutated in JavaScript. It is impossible to change a character though you can definitely access it but you cannot set it to some other value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// does not work&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// H (does not work)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#let-us-see-a-couple-of-other-methods-in-action"&gt;
  &lt;/a&gt;
  Let us see a couple of other methods in action:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// 1. Change the string to lowercase completely. &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// monday&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Change the string to uppercase completely. &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// MONDAY&lt;/span&gt;

&lt;span class="c1"&gt;// 2. To find the index of a character in the string, &lt;/span&gt;
&lt;span class="c1"&gt;// we can make use of the indexOf method. If the character that we&lt;/span&gt;
&lt;span class="c1"&gt;// looking for does exists in the string, then we get the index for it else we get -1. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channelName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;the nerdy dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channelName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// 0 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channelName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;O&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// -1 &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So this is it for this one. If you want to learn about Strings, check out my video where I talk about Strings : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tpWejTUdlpA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üëâüèª Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üëâüèª Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Monitoring Systems with Canaries</title>
      <author>memattchung</author>
      <pubDate>Sun, 20 Jun 2021 14:57:24 +0000</pubDate>
      <link>https://dev.to/memattchung/monitoring-systems-with-canaries-5fjh</link>
      <guid>https://dev.to/memattchung/monitoring-systems-with-canaries-5fjh</guid>
      <description>&lt;p&gt;You launched your service and rapidly onboarding customers. You're moving fast, repeatedly deploying one new feature after another. But with the uptick in releases, bugs are creeping in and you're finding yourself having to troubleshoot, rollback, squash bugs, and then redeploy changes. Moving fast but breaking things. What can you do to quickly detect issues ‚Äî before your customers report them?&lt;/p&gt;

&lt;p&gt;Canaries.&lt;/p&gt;

&lt;p&gt;In this post, you'll learn about the concept of canaries, example code, best practices, and other considerations including both maintenance and financial implications with running them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-canary"&gt;
  &lt;/a&gt;
  What is a canary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fib1soaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdhi6m30jgb3ppx5zmec.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fib1soaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdhi6m30jgb3ppx5zmec.jpg" alt="Source: grass-lifeisgood/Shutterstock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back in early 1900s, canaries were used by miners for &lt;a href="https://www.smithsonianmag.com/smart-news/story-real-canary-coal-mine-180961570/"&gt;detecting carbon monoxide and other dangerous gases&lt;/a&gt;. Miners would bring their canaries down with them to the coalmine and when their canary stopped chirping, it was time for the everyone to immediately evacuate. &lt;/p&gt;

&lt;p&gt;In the context of computing systems, canaries perform end-to-end testing, aiming to exercise the entire software stack of your application: they behave like your end-users, emulating customer behavior. Canaries are just pieces of software that are always running and constantly monitoring the state of your system; they emit metrics into your monitoring system (more discussion on monitoring in a separate post), which then triggers an alarm when some defined threshold breaches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-canaries-offer"&gt;
  &lt;/a&gt;
  What do canaries offer?
&lt;/h3&gt;

&lt;p&gt;Canaries answer the question: "Is my service running?" More sophisticated canaries can offer a deeper look into your service. Instead of canaries just emitting a binary 1 or 0 ‚Äî up or down ‚Äî they can be designed such that they emit more meaningful metrics that measure latency from the client's perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps-with-building-your-canary"&gt;
  &lt;/a&gt;
  First steps with building your canary
&lt;/h2&gt;

&lt;p&gt;If you don't have any canaries running that monitor your system, you don't necessarily have to start with rolling your own. Your first canary can require little to no code. One way to gain immediate visibility into your system would be to use synthetic monitoring services such as &lt;a href="https://www.smithsonianmag.com/smart-news/story-real-canary-coal-mine-180961570/"&gt;BetterUptime&lt;/a&gt; or PingDom or StatusCake. These services offer a web interface, allowing you to configure HTTP(s) endpoints that their canaries will periodically poll. When their systems detect an issue (e.g. TCP connection failing, bad HTTP response), they can send you email or text notifications.&lt;/p&gt;

&lt;p&gt;Or if your systems are deployed in Amazon Web Services, you can write Python or Node scripts that integrate with CloudWatch (&lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Create.html"&gt;click here&lt;/a&gt; for Amazon CloudWatch documentation).&lt;/p&gt;

&lt;p&gt;But if you are interested in developing your own custom canaries that do more than a simple probe, read on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-begin"&gt;
  &lt;/a&gt;
  Where to begin
&lt;/h3&gt;

&lt;p&gt;Remember, canaries should behave just like real customers. Your customer might be a real human being or another piece of software. Regardless of the type of customer, you'll want to start simple.&lt;/p&gt;

&lt;p&gt;Similar to the managed services describe above, your first canary should start with emitting a simple metric into your monitoring system, indicating whether the endpoint is up or down. For example, if you have a web service, perform a vanilla HTTP GET. When successful, the canary will emit &lt;code&gt;http_get_homepage_success=1&lt;/code&gt;  and under failure, &lt;code&gt;http_get_homepage_success=0&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-canary-monitoring-cache-layer"&gt;
  &lt;/a&gt;
  Example canary - monitoring cache layer
&lt;/h3&gt;

&lt;p&gt;Imagine you have a simple key/value store system that serves as a caching layer. To monitor this layer, every minute our canary will: 1) perform a write 2) perform a read 3) validate the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;successful_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;put_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;write_successful&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;put_response&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'OK'&lt;/span&gt;
        &lt;span class="n"&gt;Publish_metric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cache_engine_successful_write'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;write_successful&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;successful_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'bar'&lt;/span&gt;
        &lt;span class="n"&gt;publish_metric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cache_engine_successful_read'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_successful_read&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canary_successful_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;Except&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Canary failed due to error: %s"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Publish_metric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cache_engine_canary_successful_run'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;successful_run&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;sleep_for_in_seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep_for_in_seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#cache-engine-failure-during-deployment"&gt;
  &lt;/a&gt;
  Cache Engine failure during deployment
&lt;/h4&gt;

&lt;p&gt;With this canary in place emitting metrics, we might then choose to integrate the canary with our code deployment pipeline. In the example below, I triggered a code deployment (riddled with bugs) and the canary detected an issue, triggering an automatic rollback:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lr893iwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953w7dxvwboqj8f6usve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lr893iwa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/953w7dxvwboqj8f6usve.png" alt="Canary detecting failures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;The above code example was very unsophisticated and you'll want to keep the following best practices in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The canaries should NOT interfere with real user experience&lt;/strong&gt;. Although a good canary should test different behaviors/states of your system, they should in no way interfere with the real user experience. That is, their side effects should be self contained.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;They should always be on, always running, and should be testing at a regular intervals&lt;/strong&gt;. Ideally, the canary runs frequently (e.g. every 15 seconds, every 1 minute).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The alarms that you create when your canary reports an issue should only trigger off more than one datapoint&lt;/strong&gt;. If your alarms fire off on a single data point, you increase the likelihood of false alarms, engaging your service teams unnecessarily. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrate the canary into your continuous integration/continuous deployment pipeline&lt;/strong&gt;. Essentially, the deployment system should monitor the metrics that the canary emits and if an error is detected for more then N minutes, the deployment should automatically roll back (more of safety of automated rollbacks in a separate post)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When rolling your own canary, do more than just inspect the HTTP headers&lt;/strong&gt;. Success criteria should be more than verifying that the HTTP status code is a 200 OK. If your web services returns payload in the form of JSON, analyze the payload and verify that it's both syntactically and semantically correct.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cost-of-canaries"&gt;
  &lt;/a&gt;
  Cost of canaries
&lt;/h2&gt;

&lt;p&gt;Of course, canaries are not free. Regardless of whether or not you rely on a third party service or roll your own, you'll need to be aware of the maintenance and financial costs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintenance"&gt;
  &lt;/a&gt;
  Maintenance
&lt;/h3&gt;

&lt;p&gt;A canary is just another piece of software. The underlying implementation may be just few bash scripts cobbled together or full blown client application. In either case, you need to maintain them just like any other code package.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#financial-costs"&gt;
  &lt;/a&gt;
  Financial Costs
&lt;/h3&gt;

&lt;p&gt;How often is the canary running? How many instances of the canary are running? Are they geographically distributed to test from different locations? These are some of the questions that you must ask since they impact the cost of running them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-canaries"&gt;
  &lt;/a&gt;
  Beyond canaries
&lt;/h2&gt;

&lt;p&gt;When building systems, you want a canary that behaves like your customer, one that allows you to quickly detect issues as soon as your service(s) chokes. If you are vending an API, then your canary should exercise the different URIs. If you testing the front end, then your canary can be programmed mimic a customer using a browser using libraries such as selenium.&lt;/p&gt;

&lt;p&gt;Canaries are a great place to start if you are just launching a service. But there's a lot more work required to create an operationally robust service. You'll want to inject failures into your system. You'll want a crystal clear understanding of how your system should behave when its dependencies fail. These are some of the topics that I'll cover in the next series of blog posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's Connect
&lt;/h2&gt;

&lt;p&gt;Let's connect and talk more about software and devops. Follow me on Twitter: &lt;a href="https://twitter.com/memattchung"&gt;@memattchung&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
