<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Docker Tips And Best Practices</title>
      <author>Meir Gabay</author>
      <pubDate>Thu, 11 Feb 2021 21:19:31 +0000</pubDate>
      <link>https://dev.to/unfor19/docker-tips-and-best-practices-n9</link>
      <guid>https://dev.to/unfor19/docker-tips-and-best-practices-n9</guid>
      <description>&lt;p&gt;Curious about &lt;a href="https://www.docker.com/why-docker"&gt;Docker&lt;/a&gt;? Eager to strengthen your skills with containers?&lt;/p&gt;

&lt;p&gt;In this blog-post, I'll share five (5) tips, tricks, and best practices for using Docker. Let's start with a short analogy for everything that will be covered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analogy" class="anchor"&gt;
  &lt;/a&gt;
  Analogy
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile&lt;/a&gt; is a recipe for creating &lt;a href="https://docs.docker.com/get-started/overview/#docker-objects"&gt;Docker images&lt;/a&gt;. Hence it should be treated as if it's the recipe for your favorite cake üç∞. It should be concise, readable, and easy to follow; this will make the whole baking (development) process easier.&lt;/p&gt;

&lt;p&gt;As part of writing an "easy" recipe (Dockerfile), it's important to enable baking (building) the cake (Docker image) in any kitchen (machine and any &lt;a href="https://geek-university.com/linux/uid-user-identifier-gid-group-identifier/"&gt;UID:GID&lt;/a&gt;). After all, if the cake is so good, we'll want to bake (build) the same cake (Docker image) over and over again, anywhere, and speed up üöÄ the baking (build) process over time by memorizing parts of the recipe (&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#minimize-the-number-of-layers"&gt;layers&lt;/a&gt;) in our heads (&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache"&gt;cache&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It's best to split ‚úÇÔ∏è the baking (building) process into steps (&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;multi-stage build&lt;/a&gt;), where the final product (Docker image) includes only the relevant contents. We don't want to serve (publish) the cake (Docker image) with a bag of sugar (source-code) or with an oven (build packages/compilers) as it might be embarrassing (and heavy). üôÑ&lt;/p&gt;

&lt;p&gt;Other than that, keeping the cake (Docker image/container) secured and safe üîí from unwanted people or animals üêà (hackers) should be taken care of as part of the process of baking the cake (writing a Dockerfile).&lt;/p&gt;

&lt;p&gt;And finally, if the cake's recipe (Dockerfile) contains reusable keywords (&lt;a href="https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact"&gt;ARG&lt;/a&gt;) such as "double sweet" üç´ for "2 sugar", and it is used repeatedly in the recipe (Dockerfile), it should be declared once at the top of the recipe (Dockerfile Global ARGs) which will make it possible to use it as a reference ($MY_ARG).&lt;/p&gt;

&lt;p&gt;Enough with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlloaiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lean.org/LeanPost/Images/156_large.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlloaiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lean.org/LeanPost/Images/156_large.jpg" alt="show-me-the-money"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics" class="anchor"&gt;
  &lt;/a&gt;
  Topics
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Order Of Commands&lt;/li&gt;
&lt;li&gt;Multi-Stage Build&lt;/li&gt;
&lt;li&gt;Run As A Non-Root User&lt;/li&gt;
&lt;li&gt;Mind The UID GID&lt;/li&gt;
&lt;li&gt;Global ARGs&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#order-of-commands" class="anchor"&gt;
  &lt;/a&gt;
  Order Of Commands
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://docs.docker.com/engine/reference/builder/#from"&gt;Docker command&lt;/a&gt; (ARG, ENV, RUN, etc.) that is not supposed to be executed when the source-code is changing, should be pushed to the top as much as possible. When comparing to cakes, the base of the cake is the bottom layer, while in a Dockerfile the base of the image is at the top of the file.&lt;/p&gt;

&lt;p&gt;The cache of the "requirements packages" should be purged only if a package was added, removed, or its version was changed, but not when something in the code was changed because that happens a lot.&lt;/p&gt;

&lt;p&gt;In the following code snippet, the source-code is copied to the image, followed by the installation of requirements (packages). This means that every time one of the source-code files was modified, all the "requirements packages" will be installed. This results in purging the cache of the "requirements packages" on any change in the source-code, which is &lt;strong&gt;bad&lt;/strong&gt; since we want to cache them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;

&lt;span class="c"&gt;# Install packages - on any change in the source-code&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;good example&lt;/strong&gt; for caching the requirements layer would be first copying the &lt;code&gt;requirements.txt&lt;/code&gt; file, or any other lock-file (&lt;a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-lock-json"&gt;package-lock.json&lt;/a&gt;, &lt;a href="https://classic.yarnpkg.com/en/docs/yarn-lock/"&gt;yarn.lock&lt;/a&gt;, &lt;a href="https://blog.golang.org/using-go-modules"&gt;go.mod&lt;/a&gt;, etc.) followed by the installation of the &lt;code&gt;requirements.txt&lt;/code&gt;, and only then to copy the source-code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="c"&gt;# Copy and install requirements - only if requirements.txt was changed&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; requirements.txt /code/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, there's an "extra" command (&lt;code&gt;COPY&lt;/code&gt;) that copies the &lt;code&gt;requirements.txt&lt;/code&gt; twice. This might look like a bad thing if you see it for the first time. Its beauty is that it caches the installation of the "requirements packages" and only then copies the source-code. Amazing!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: Docker will cache commands that haven't affected the file-system during the build process. This is why the order of  &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt;, and &lt;code&gt;COPY&lt;/code&gt; is crucial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#multistage-build" class="anchor"&gt;
  &lt;/a&gt;
  Multi-Stage Build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;Multi-Stage Build&lt;/a&gt; enables releasing slim images, including only packages and artifacts the application needs.&lt;/p&gt;

&lt;p&gt;Let's investigate the following Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD - Not that bad, but it could be better&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim&lt;/span&gt;

&lt;span class="c"&gt;# Upgrade pip and then install build tools&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; wheel setuptools wheel check-wheel-contents

&lt;span class="c"&gt;# Copy and install requirements - better caching&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; requirements.txt /code/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--user&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"requirements.txt"&lt;/span&gt;

&lt;span class="c"&gt;# Copy everything from the build context&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /code/&lt;/span&gt;

&lt;span class="c"&gt;### Build the application&lt;/span&gt;
&lt;span class="c"&gt;### COMMANDS ...&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A few things about this solution&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Includes packages that are used only during the build stage, for example, &lt;code&gt;setup&lt;/code&gt;, &lt;code&gt;wheel&lt;/code&gt;, and &lt;code&gt;check-wheel-contents&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The source code is included in the image&lt;/li&gt;
&lt;li&gt;The container will run as the &lt;code&gt;root&lt;/code&gt; user; I'll cover it in the next topic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With Multi-Stage Build, it's possible to create an intermediate image, let's call it &lt;code&gt;build&lt;/code&gt;, including the source-code and required packages for &lt;strong&gt;building&lt;/strong&gt;. The &lt;code&gt;build&lt;/code&gt; stage is followed by the &lt;code&gt;app&lt;/code&gt; stage, which is the "final image" that will be published to the Docker registry (&lt;a href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt;, &lt;a href="https://aws.amazon.com/ecr/"&gt;ECR&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/container-registry/"&gt;ACR&lt;/a&gt;, &lt;a href="https://cloud.google.com/container-registry"&gt;GCR&lt;/a&gt;, etc.) and eventually deployed to the Cloud or On-Premise infrastructure.&lt;/p&gt;

&lt;p&gt;Now let's break the above snippet into a Multi-Stage Build pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as build&lt;/span&gt;

&lt;span class="c"&gt;# Upgrade pip and then install build tools&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; pip &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--upgrade&lt;/span&gt; wheel setuptools wheel check-wheel-contents

&lt;span class="c"&gt;### Consider the comments as commands&lt;/span&gt;
&lt;span class="c"&gt;# Copy and install requirements - better caching&lt;/span&gt;
&lt;span class="c"&gt;# Copy the application from Docker build context to WORKDIR&lt;/span&gt;
&lt;span class="c"&gt;# Build the application, validate wheel contents and install the application&lt;/span&gt;


&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /myapp/&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /dist/ /myapp/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In general, the last &lt;code&gt;FROM&lt;/code&gt; command in a Dockerfile indicates that this is the final image. This is how we know to name it &lt;code&gt;app&lt;/code&gt; (or &lt;code&gt;prod&lt;/code&gt;) and make sure that it contains only the relevant contents. I called it &lt;code&gt;app&lt;/code&gt; even though it's not used anywhere else in the code; this is just for brevity and better documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you're curious why I didn't need to install anything in the final image, it's because the build process includes all the packages in the &lt;code&gt;/dist/lib&lt;/code&gt; directory. This is by design, and I totally recommend adopting this practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#run-as-a-nonroot-user" class="anchor"&gt;
  &lt;/a&gt;
  Run As A Non-Root User
&lt;/h2&gt;

&lt;p&gt;The code snippets above didn't mention anything about which user is running the commands. The default user is &lt;code&gt;root&lt;/code&gt;, so all the commands to build the application are executed with superuser permissions, which is okay since this stage is done behind the scenes. What troubles me is - why should I allow the user to run the application (container) to execute everything as a superuser (root)?&lt;/p&gt;

&lt;p&gt;Picture this - your application is running in the cloud, and you haven't followed the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege"&gt;principle of least privilege&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;John, the nifty hacker, was able to hack into your application. Do you realize that John can execute &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;? If John is really good at what he's doing, he can access any back-end service exposed to your application. Let's take some "negligible" service, such as your database, where John can install &lt;code&gt;mysql&lt;/code&gt; and communicate with your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExOqZP6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0jujqwgkjswwazr6uyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExOqZP6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0jujqwgkjswwazr6uyr.png" alt="docker-tips-and-best-practices-john-happy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve this problem, you can use the &lt;code&gt;USER&lt;/code&gt; command in the Dockerfile to switch the user from &lt;code&gt;root&lt;/code&gt; to some &lt;code&gt;appuser&lt;/code&gt; whose sole purpose (and permission) is to execute the application, nothing more.&lt;/p&gt;

&lt;p&gt;Omitting the build stage, let's focus on the app stage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /myapp/&lt;/span&gt;

&lt;span class="c"&gt;# Creates `appuser` and `appgroup` and sets permissions on the app`s directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup appgroup &lt;span class="nt"&gt;--gid&lt;/span&gt; 1000 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    useradd appuser &lt;span class="nt"&gt;--uid&lt;/span&gt; 1000 &lt;span class="nt"&gt;--gid&lt;/span&gt; appgroup &lt;span class="nt"&gt;--home-dir&lt;/span&gt; /myapp/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; appuser:appgroup /myapp/


&lt;span class="c"&gt;# All the following commands will be executed by `appuser`, instead of `root`&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; appuser&lt;/span&gt;

&lt;span class="c"&gt;# Copy artifacts from the build stage and set `appuser` as the owner&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build --chown=appuser:appgroup /myapp/&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Back to John, the nifty hacker; John tries to execute &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;, and fails, since &lt;code&gt;apt-get&lt;/code&gt; requires super-user permissions. John tries to write malicious code in &lt;code&gt;/root/&lt;/code&gt; and gets &lt;code&gt;permission denied&lt;/code&gt; because this directory's permissions set is &lt;code&gt;700&lt;/code&gt; - read, write and execute by the owner (&lt;code&gt;root:&lt;/code&gt;) or group (&lt;code&gt;:root&lt;/code&gt;) and nothing more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_yw6rkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utoxbuhbvgta1eh55vzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_yw6rkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/utoxbuhbvgta1eh55vzp.png" alt="docker-tips-and-best-practices-john-frustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm sure that if John is very talented, he'll still be able to do some harm, but still, it's best to minimize the collateral damage and isolate applications as much as possible. We also don't want John to laugh about the fact that we could've prevented him from using &lt;code&gt;apt-get install ANYTHING&lt;/code&gt;, and we simply didn't do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mind-the-uid-gid" class="anchor"&gt;
  &lt;/a&gt;
  Mind The UID GID
&lt;/h2&gt;

&lt;p&gt;As you can see in the code snippet above, I used &lt;code&gt;--uid 1000&lt;/code&gt; and &lt;code&gt;--gid 1000&lt;/code&gt;. The values &lt;code&gt;1000:1000&lt;/code&gt; are the default values for creating a new user or group in Ubuntu, and I used &lt;code&gt;1000:1000&lt;/code&gt; because I'm on &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;WSL2 Ubuntu:20.04&lt;/a&gt;, so I could've just omitted those arguments. Here's how my user looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/passwd | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;whoami&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
myuser:x:1000:1000:,,,:/home/myuser:/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the numbers are not the same as those on your machine, then adjusting them with &lt;code&gt;--uid UID&lt;/code&gt; and &lt;code&gt;--gid GID&lt;/code&gt; will ease the development process. Sounds interesting, right? ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8u1fuLhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/84712300.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8u1fuLhS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://memegenerator.net/img/instances/84712300.jpg" alt="put-their-names-to-the-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll use a real containerized Python application; here's the Dockerfile of &lt;a href="https://github.com/unfor19/frigga/blob/master/Dockerfile"&gt;unfor19/frigga/Dockerfile&lt;/a&gt; (yes, yes, I wrote it). Imagine that I hadn't used the &lt;code&gt;USER&lt;/code&gt; command in the Dockerfile; let's imagine it together by enforcing the container to run as &lt;code&gt;root&lt;/code&gt; with &lt;code&gt;docker run --user=root ...&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD&lt;/span&gt;
&lt;span class="c"&gt;# Reminder - My machine's UID:GID is 1000:1000&lt;/span&gt;

&lt;span class="c"&gt;# root UID:GID is 0:0&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/:/code/ &lt;span class="nt"&gt;--user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="nt"&gt;--workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/code/ &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash unfor19/frigga

root@987c5784a52e:/code# &lt;span class="nb"&gt;cat&lt;/span&gt; /etc/passwd | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;whoami&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
root:x:0:0:root:/root:/bin/bash
&lt;span class="c"&gt;# UID:GID = 0:0&lt;/span&gt;

root@987c5784a52e:/code# &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"root contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; root-file.txt
root@987c5784a52e:/code# &lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# -rw-r--r-- 1 root root 14 Feb 12 14:03 root-file.txt&lt;/span&gt;
root@987c5784a52e:/code# &lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="c"&gt;# Local machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; root-file.txt 
&lt;span class="c"&gt;# -rw-r--r-- 1 root root 14 Feb 12 14:04 root-file.txt&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# bash: root-file.txt: Permission denied&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above could be resolved by adding &lt;code&gt;sudo&lt;/code&gt; before the &lt;code&gt;echo&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; root-file.txt
&lt;span class="c"&gt;# success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But do we really want to use &lt;code&gt;sudo&lt;/code&gt; for editing files? What about our IDE? Do we need to run it with &lt;code&gt;sudo&lt;/code&gt; to edit files? I hope not. A better approach would be adjusting the application's (container) UID:GID according to the local machine's UID:GID. In my case, I didn't have to use &lt;code&gt;--uid&lt;/code&gt; and &lt;code&gt;--gid&lt;/code&gt; in the Dockerfile, since I'm using the same IDs as my application (container) uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD&lt;/span&gt;
&lt;span class="c"&gt;# Reminder - My machine's UID:GID is 1000:1000&lt;/span&gt;

&lt;span class="c"&gt;# frigga's user UID:GID - 1000:1000&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/:/code/ &lt;span class="nt"&gt;--workdir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/code/ &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash unfor19/frigga

appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"file contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; some-file.txt
appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; some-file.txt
&lt;span class="c"&gt;# -rw-r--r-- 1 appuser appgroup 28 Feb 12 14:15 some-file.txt&lt;/span&gt;
appuser@52ad885a9ad5:/code&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="c"&gt;# Local machine&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt; some-file.txt 
&lt;span class="c"&gt;# -rw-r--r-- 1 meir meir 14 Feb 12 14:16 some-file.txt&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"more contents"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; some-file.txt
&lt;span class="c"&gt;# success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The file &lt;code&gt;some-file.txt&lt;/code&gt; is set with the following permissions &lt;code&gt;rw-r-r&lt;/code&gt; (644), so only the file owner can edit this file. Luckily (or is it?), my UID and GID are also 1000, so I'm able to edit the file with my current user, without adding &lt;code&gt;sudo&lt;/code&gt; every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-args" class="anchor"&gt;
  &lt;/a&gt;
  Global ARGs
&lt;/h2&gt;

&lt;p&gt;Going back to the Dockerfile - it's possible to declare global ARGs and pass them along to the Stages. This helps with following the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself (DRY) principle&lt;/a&gt;. For example, providing the &lt;code&gt;PYTHON_VERSION&lt;/code&gt; as a global argument, instead of hardcoding for each Stage is superb! Let's see how it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# BAD - 3.9.1 is hardcoded&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as build&lt;/span&gt;
&lt;span class="c"&gt;# Build stage commands&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.1-slim as app&lt;/span&gt;
&lt;span class="c"&gt;# App stage commands&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Consider this instead-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# GOOD - 3.9.1 is declared once at the top of the file&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; PYTHON_VERSION="3.9.1"&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:"$PYTHON_VERSION"-slim as build&lt;/span&gt;
&lt;span class="c"&gt;# Build stage commands&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:"$PYTHON_VERSION"-slim as app&lt;/span&gt;
&lt;span class="c"&gt;# App stage commands&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["app"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;If you are here, then it means you're really into it. See a full example of a containerized Python application, essentially a CLI, see &lt;a href="https://github.com/unfor19/frigga"&gt;unfor19/frigga&lt;/a&gt;. I've implemented all the best practices I could think of in this project, and to take it even further check the &lt;a href="https://github.com/unfor19/frigga/actions"&gt;GitHub Actions (CI/CD)&lt;/a&gt; of this project, I added a fully blown test-suite to make sure that frigga can run on both docker-compose and Kubernetes, so you might find it handy. &lt;/p&gt;

&lt;p&gt;That would be all. Feel free to ask questions or leave a comment with your best practices for using Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k42k7zlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://30nevermind.files.wordpress.com/2014/02/memegen.jpg%3Fw%3D358%26h%3D202" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k42k7zlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://30nevermind.files.wordpress.com/2014/02/memegen.jpg%3Fw%3D358%26h%3D202" alt="thank-you"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>tips</category>
      <category>tutorial</category>
      <category>bestpractice</category>
    </item>
    <item>
      <title>Getting in the FlowState with Standing Desks</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Thu, 11 Feb 2021 21:16:40 +0000</pubDate>
      <link>https://dev.to/devteam/getting-in-the-flowstate-with-standing-desks-3kid</link>
      <guid>https://dev.to/devteam/getting-in-the-flowstate-with-standing-desks-3kid</guid>
      <description>&lt;p&gt;&lt;a href="https://www.flowstate.to/"&gt;FlowState&lt;/a&gt; is a community of health, fitness, and wellbeing enthusiasts. It‚Äôs built on Forem and is definitely worth checking out if you're looking for some great fitness conversations and advice! &lt;/p&gt;

&lt;p&gt;With more and more developers working from home due to a combination of personal preference, the COVID-19 pandemic, and shifting work cultures, many of us are pushing code into production while pulling nerves in our back ‚Äî it's &lt;em&gt;hard&lt;/em&gt; to maintain proper ergonomics outside of the traditional office environment. &lt;/p&gt;

&lt;p&gt;This FlowState convo is full of opinions on the merits of standing desks! And when it comes to office setups, I don't need to tell &lt;em&gt;you&lt;/em&gt; that we developers are an opinionated lot üôÉ&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-thoughts-about-the-benefits-of-standing-desks-by-ildi-on-dev-and-flowstate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.flowstate.to/ildi/what-are-your-thoughts-about-the-benefits-of-standing-desks-13nh"&gt;"What are your thoughts about the benefits of standing desks?"&lt;/a&gt; by ildi (on &lt;a href="https://www.dev.to/ildi"&gt;DEV&lt;/a&gt; and &lt;a href="https://www.flowstate.to/ildi"&gt;FlowState&lt;/a&gt;)&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you‚Äôve been thinking about investing in a standing desk or you already have one and want to share advice on using one, don‚Äôt miss this discussion on FlowState! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  üå±
&lt;/h4&gt;

</description>
      <category>discuss</category>
      <category>meta</category>
      <category>productivity</category>
      <category>wellness</category>
    </item>
    <item>
      <title>Replacing query-string with Native URLSearchParams</title>
      <author>nerdyman</author>
      <pubDate>Thu, 11 Feb 2021 19:33:29 +0000</pubDate>
      <link>https://dev.to/nerdyman/replacing-query-string-with-native-urlsearchparams-4kdg</link>
      <guid>https://dev.to/nerdyman/replacing-query-string-with-native-urlsearchparams-4kdg</guid>
      <description>&lt;p&gt;&lt;a href="https://www.npmjs.com/package/query-string"&gt;&lt;code&gt;query-string&lt;/code&gt;&lt;/a&gt; is an awesome package which allows you to parse URL parameters, however, you may not need it anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; is a &lt;strong&gt;native&lt;/strong&gt; interface to easily parse and construct URL parameters in both Node and the browser!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;The syntax is &lt;em&gt;slightly&lt;/em&gt; more verbose than &lt;code&gt;query-string&lt;/code&gt; in places, however, the benefit of a native solution to that of an external dependency outweighs the verbosity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Setting Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters can be set both at and after instantiation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "" }&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "", hello: "world" }&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "bar", hello: "world" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Getting Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; returns an &lt;code&gt;iterator&lt;/code&gt; to get values.&lt;/p&gt;

&lt;p&gt;The simplest way to get the parameters as an Object is to use &lt;code&gt;Object.FromEntries&lt;/code&gt; with &lt;code&gt;.entries&lt;/code&gt; on the interface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?one&amp;amp;foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get all values.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// { one: "", foo: "bar" }&lt;/span&gt;

&lt;span class="c1"&gt;// Get a specific value.&lt;/span&gt;
&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "bar"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#differences-in-implementation" class="anchor"&gt;
  &lt;/a&gt;
  Differences in Implementation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#symbols" class="anchor"&gt;
  &lt;/a&gt;
  Symbols
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;query-string&lt;/code&gt; removes leading &lt;code&gt;#&lt;/code&gt; symbols - &lt;code&gt;URLSearchParams&lt;/code&gt; does not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: "bar" } &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo=bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { #foo: "bar" } &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#implicit-parameter-values" class="anchor"&gt;
  &lt;/a&gt;
  Implicit Parameter Values
&lt;/h4&gt;

&lt;p&gt;Implicit parameters (parameters without &lt;code&gt;=&lt;/code&gt;) will evaluate to  &lt;code&gt;null&lt;/code&gt; with &lt;code&gt;query-string&lt;/code&gt; and an empty string with &lt;code&gt;URLSearchParams&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?implicit&amp;amp;explicit=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { implicit: null, explicit: "" }&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?implicit&amp;amp;explicit=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { implicit: "", explicit: "" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#array-values" class="anchor"&gt;
  &lt;/a&gt;
  Array Values
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;query-string&lt;/code&gt; has advanced utilities to parse array values, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;queryString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;arrayFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bracket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; {foo: ['1', '2', '3']}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; doesn't ship with array utilities so you need to roll your own function to get the full values back from arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Convert `URLSearchParams` `[]` properties to array objects.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// { foo: ["bar", "baz"] } &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Otherwise, you'll end up with a single &lt;code&gt;[]&lt;/code&gt; property with the first value supplied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// { foo[]: "bar" }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you only need to get a specific value you can use the &lt;code&gt;.getAll&lt;/code&gt; method directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;?foo[]=bar&amp;amp;foo[]=baz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["bar", "baz"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#node-and-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Node and Browser Support
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; is supported by Node 10+ and browser support is prettay prettay prettay pretty good - It works with Edge 17+ and all evergreen browsers have supported it since 2016~2017.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://www.npmjs.com/package/@ungap/url-search-params"&gt;polyfill&lt;/a&gt; is also available for the unfortunate souls who need to support legacy browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOQZbD0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4pdbae0pbcbacabylg9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOQZbD0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4pdbae0pbcbacabylg9l.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-example" class="anchor"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/urlsearchparams-vs-query-string-tflmb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The native &lt;code&gt;URLSearchParams&lt;/code&gt; interface removes the need for &lt;code&gt;query-string&lt;/code&gt;. One fewer dependency ü•≥&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams"&gt;URLSearchParams on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/urlsearchparams"&gt;URLSearchParams on Can I Use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>npm</category>
    </item>
    <item>
      <title>What's the difference between Typescript, Babel, and Coffeescript?</title>
      <author>LeviathanProgramming</author>
      <pubDate>Thu, 11 Feb 2021 16:34:15 +0000</pubDate>
      <link>https://dev.to/conner1115/what-s-the-difference-between-typescript-babel-and-coffeescript-2jo</link>
      <guid>https://dev.to/conner1115/what-s-the-difference-between-typescript-babel-and-coffeescript-2jo</guid>
      <description>&lt;p&gt;I now that babel, typescript, and I &lt;em&gt;think&lt;/em&gt; coffeescript are different than javascript in some ways in allowing more ES6 usage.  I don't know the exact differences between them all and would like an explanation.&lt;/p&gt;

&lt;p&gt;Can you please explain what each one is and how they differ from Javascript and each other?&lt;br&gt;
Thanks for reading.&lt;br&gt;
Happy Coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>babel</category>
      <category>typescript</category>
      <category>explainlikeimfive</category>
    </item>
    <item>
      <title>How to build a Dice Roller in Python</title>
      <author>Rishabh Singh ‚ö°</author>
      <pubDate>Thu, 11 Feb 2021 15:45:52 +0000</pubDate>
      <link>https://dev.to/mindninjax/how-to-build-a-dice-roller-in-python-18j3</link>
      <guid>https://dev.to/mindninjax/how-to-build-a-dice-roller-in-python-18j3</guid>
      <description>&lt;p&gt;Hello everyone, today we are going to create a &lt;strong&gt;Dice Roller in Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEnvef6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9qf728jshctdnouta10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEnvef6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m9qf728jshctdnouta10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;In the real world, we use dice to get a random number ranging from 1- 6 so we can proceed with the game accordingly. Our program is going to work similarly. Every time we will run our program, it will return us a random number between 1 &amp;amp; 6. Now let's jump to coding and make this project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code" class="anchor"&gt;
  &lt;/a&gt;
  Let's Code
&lt;/h2&gt;

&lt;p&gt;The first thing we are gonna do is import the required modules. &lt;/p&gt;

&lt;p&gt;For this project, we need only one module which is &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module which helps us to generate random values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We have successfully imported &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module.&lt;/p&gt;

&lt;p&gt;Now we may need to use the Dice Roller multiple times hence it will be a good idea to use an &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop in order to keep our code running for as long as user wishes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we go! Here is the basic syntax of the &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop. We will substitute that &lt;strong&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/strong&gt; keyword with our remaining code.&lt;/p&gt;

&lt;p&gt;Now let's give our code the ability to generate a random number between 1 to 6.&lt;/p&gt;

&lt;p&gt;Here we will make use of one of the functions of our &lt;strong&gt;&lt;code&gt;random&lt;/code&gt;&lt;/strong&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The value is "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;code&gt;random.randint(START_VALUE, END_VALUE)&lt;/code&gt;&lt;/strong&gt; is the function we are going to use.&lt;/p&gt;

&lt;p&gt;As previously mentioned, this function will take an &lt;strong&gt;&lt;code&gt;START_VALUE&lt;/code&gt;&lt;/strong&gt; &amp;amp; an &lt;strong&gt;&lt;code&gt;END_VALUE&lt;/code&gt;&lt;/strong&gt; which will be &lt;strong&gt;&lt;code&gt;1&lt;/code&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;code&gt;6&lt;/code&gt;&lt;/strong&gt; in our case, since we need a value between 1 &amp;amp; 6.&lt;/p&gt;

&lt;p&gt;We are also using an &lt;strong&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/strong&gt; function along with &lt;strong&gt;&lt;code&gt;f-string&lt;/code&gt;&lt;/strong&gt; to directly print the output on the console, rather than storing it in a variable.&lt;/p&gt;

&lt;p&gt;We are almost done!&lt;/p&gt;

&lt;p&gt;Now let's add one line to ask the user if he/she wishes to roll the dice again or would like the end the program instead. This is pretty simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Roll Dice again? 'y' for yes &amp;amp; 'n' for no: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are simply using input() function to ask the user and the user can reply in either &lt;strong&gt;yes&lt;/strong&gt; or &lt;strong&gt;no&lt;/strong&gt;. And we are using an &lt;strong&gt;&lt;code&gt;if&lt;/code&gt;&lt;/strong&gt; statement so that if the user replies &lt;strong&gt;no&lt;/strong&gt;, then the loop will terminate otherwise the loop will continue to run forever.&lt;/p&gt;

&lt;p&gt;Finally here's how our &lt;strong&gt;&lt;code&gt;while&lt;/code&gt;&lt;/strong&gt; loop will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rolling Dice..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The value is "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Roll Dice again? 'y' for yes &amp;amp; 'n' for no: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have also added an optional &lt;strong&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/strong&gt; function to indicate the rolling of the dice.&lt;/p&gt;

&lt;p&gt;You did it! ü§©&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-code" class="anchor"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;You can find the complete source code of this project here -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mindninjaX/Python-Projects-for-Beginners/tree/master/Dice%20Roller"&gt;mindninjaX/Python-Projects-for-Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support" class="anchor"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you found this beginner project useful. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 JavaScript Projects You Should Consider To Build As A Frontend Dev.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Thu, 11 Feb 2021 15:22:06 +0000</pubDate>
      <link>https://dev.to/tyaga001/5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev-3jpd</link>
      <guid>https://dev.to/tyaga001/5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev-3jpd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Side projects are a great way to show your skills to land your first job as Front-end Developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#5-javascript-projects-you-should-consider-to-build-as-a-frontend-dev" class="anchor"&gt;
  &lt;/a&gt;
  5 JavaScript Projects You Should Consider To Build as a Frontend Dev.
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-build-a-tictactoe-game-with-pure-javascript" class="anchor"&gt;
  &lt;/a&gt;
  1. Build a Tic-tac-toe game with Pure JavaScript
&lt;/h3&gt;

&lt;p&gt;Building a game in a browser can be a great exercise to test your JavaScript skills. You will have to react to user events, interact with DOM, and store game data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-a-blog-template-with-html-and-css" class="anchor"&gt;
  &lt;/a&gt;
  2. Build a Blog Template with HTML and CSS
&lt;/h3&gt;

&lt;p&gt;When you just start learning front-end development it‚Äôs important to consolidate your knowledge about HTML and CSS. Building a Blog Template is a good idea for your first bigger project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-location-sharing-with-pure-javascript-and-maps-service" class="anchor"&gt;
  &lt;/a&gt;
  3. Location sharing with Pure JavaScript and Maps Service
&lt;/h3&gt;

&lt;p&gt;A simple app where you can share location with your friend can be both a demanding project. In this project, you will use JavaScript to interact with external services for maps (ex. Google Maps or OpenStreetMap).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-build-tv-series-tracker-with-js-framework-react-vue-angular-or-other" class="anchor"&gt;
  &lt;/a&gt;
  4. Build TV Series Tracker with JS Framework (React, Vue, Angular or other)
&lt;/h3&gt;

&lt;p&gt;This project will help every TV Series fan, track premieres new episodes. It will be a great opportunity to use a JavaScript framework you are comfortable with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-home-budget-app-with-js-framework-react-vue-angular-or-other" class="anchor"&gt;
  &lt;/a&gt;
  5. Home Budget App with JS Framework (React, Vue, Angular or other)
&lt;/h3&gt;

&lt;p&gt;Creating a home budget App will be an ultimate check for your skills as a Junior Front-end Developer. It will check your ability to create forms and store information, but it can also help you save money!&lt;/p&gt;

&lt;p&gt;Remember, you don‚Äôt have to mimic the above examples 1-to-1.&lt;/p&gt;

&lt;p&gt;Feel free to change, add or remove any detail you like.&lt;/p&gt;

&lt;p&gt;If you have older projects you used for learning new skills you can always refactor them and put them in your portfolio. &lt;/p&gt;

&lt;p&gt;Good Luck!&lt;/p&gt;

&lt;p&gt;That's it for today, If you like my recommendations, then I encourage you to sign up for my weekly ‚Äú2-1-1‚Äù Friday newsletter&lt;/p&gt;

&lt;p&gt;And don't forget to follow me for more killer content in 2021.&lt;/p&gt;

&lt;p&gt;Sign up üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codelifefitness.com/"&gt;2-1-1 Friday Newsletter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Don't just code</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 11 Feb 2021 14:41:35 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/don-t-just-practice-coding-n0d</link>
      <guid>https://dev.to/alvaromontoro/don-t-just-practice-coding-n0d</guid>
      <description>&lt;p&gt;You are preparing to become a Software Developer. And you are coding, practicing, completing exercises, following tutorials online, learning JavaScript, algorithms, React, loops, Java, variables... and that is great, but you may be missing something along your path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p86TAaCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/737w26mhkxkbjykbpg8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p86TAaCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/737w26mhkxkbjykbpg8q.png" alt="Cartoon of a man and a woman looking confused at a dotted line that represents the path to a software dev position, it has many stops (algorithms, variables, classes...) a big question mark over their heads"&gt;&lt;/a&gt;&lt;/p&gt;

This path seems solid, but something's missing




&lt;h2&gt;
  &lt;a href="#soft-skills" class="anchor"&gt;
  &lt;/a&gt;
  Soft skills
&lt;/h2&gt;

&lt;p&gt;Coding is fundamental for a developer, but there's more to it than just that: &lt;strong&gt;soft skills are essential too!&lt;/strong&gt; Actually, social and communication skills are almost as critical and not as easy to master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anyone can get to a Junior Developer level in a matter of weeks or months&lt;/strong&gt; and, with some time and experience, master their coding skills... but coding is not everything.&lt;/p&gt;

&lt;p&gt;Empathy, creativity, open-mindedness, good communication, critical thinking, teamwork mentality... they complement the technical knowledge and will take you to the next level.&lt;/p&gt;

&lt;p&gt;The good news is you may have those soft skills already! And trust me, we need them in our industry. We really do.&lt;/p&gt;

&lt;p&gt;Some people have these skills naturally. Some others need to practice them a little (...or a lot). But we must work on them to grow as developers (and as people in general).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdr3cB1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71gsaj056c9sfv48yz7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pdr3cB1C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71gsaj056c9sfv48yz7v.png" alt="Cartoon of a smiling man and woman looking at a dotted line that represents the path to a software dev position, it has many stops (algorithms, variables, classes...), and it also had some other handwritten steps in between (empathy, critical thinking, communication skills...)"&gt;&lt;/a&gt;&lt;/p&gt;

This path leads to better results and success




&lt;p&gt;Here's a little &lt;em&gt;secret&lt;/em&gt;: you are not being evaluated just for your technical knowledge in a technical interview. By the time you make it to the technical interview, you should have passed a technical screening, and we have a general idea of your coding abilities.&lt;/p&gt;

&lt;p&gt;We also want to make sure that you'd be a good fit for the team and organization, and look for other types of skills: communication, creativity, critical thinking... do they ring a bell?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listening" class="anchor"&gt;
  &lt;/a&gt;
  Listening
&lt;/h2&gt;

&lt;p&gt;While the soft skills are very different among them, there is a common factor that can help improve many of them at once: &lt;strong&gt;Listening&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Notice that I use listening in a wider sense, which includes listening, reading, observing, and even writing (which is really useful for solidifying knowledge and improving communication skills.)&lt;/p&gt;

&lt;p&gt;Seriously. &lt;strong&gt;Do you...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;...want better communication skills?&lt;/strong&gt; Listen to people. It will help following the conversation better, will make you more secure and able to answer. Even if they are not talking to you: listen and pay attention to how senior coworkers present the topics and learn from how they do it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to boost empathy?&lt;/strong&gt; Listen to people. Understand how they feel, what they are going through, what they think. It will help you understand their needs better, and it will improve the team mentality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to be more creative?&lt;/strong&gt; Listen to (creative) people. Get ideas, inspiration, challenges... Every artist has been influenced by previous artists. To improve your creativity, search for and listen to other creative people.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;...want to improve teamwork skills?&lt;/strong&gt; Listen to your teammates! Not only to what they have to say but also to how they present things: read their tickets carefully, make sure that you have all requirements... more listening later translates into fewer bugs and missing features and faster review cycles.&lt;/li&gt;
&lt;li&gt;...want to...?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do you see the pattern?&lt;/p&gt;

&lt;p&gt;Of course, there are many other ways to improve soft skills, but I find that a good one is following Vanilla Ice's advice: "&lt;em&gt;Alright: stop, collaborate, and listen&lt;/em&gt;." :P&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Technologies come and go. Programming languages rise and fall. The same language/library changes from one version to the next... but being assertive, having empathy, knowing how to present ideas... those are things that will be with you always. And they will open many doors.&lt;/p&gt;

&lt;p&gt;While you prepare for your Software Developer career, don't just focus on coding and also set some time to invest in your soft skills. It will go a long way.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Amazing image placeholders with blurhash</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Thu, 11 Feb 2021 13:25:49 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/amazing-image-placeholders-with-blurhash-11ok</link>
      <guid>https://dev.to/karanpratapsingh/amazing-image-placeholders-with-blurhash-11ok</guid>
      <description>&lt;p&gt;Few weeks ago I was playing around with &lt;a href="https://wolt.com/en"&gt;Wolt&lt;/a&gt; iOS app, I was really impressed by how the app handled image load and placeholders. After looking around I finally found &lt;a href="https://blurha.sh"&gt;Blurhash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-i-need-it" class="anchor"&gt;
  &lt;/a&gt;
  Why would I need it?
&lt;/h2&gt;

&lt;p&gt;Blurhash can help with transforming boring image placeholders into something more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lm2FMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxy902cd021lo5tdv32i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lm2FMS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oxy902cd021lo5tdv32i.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&lt;a href="https://blurha.sh/"&gt;source&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-with-typescript-and-react" class="anchor"&gt;
  &lt;/a&gt;
  Using with TypeScript and React
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#install" class="anchor"&gt;
  &lt;/a&gt;
  Install
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add blurhash
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#encode-an-image" class="anchor"&gt;
  &lt;/a&gt;
  Encode an image
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blurhash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getImageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ImageData&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encodeImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#store-blurhash-alongside-your-images" class="anchor"&gt;
  &lt;/a&gt;
  Store blurhash alongside your images
&lt;/h4&gt;

&lt;p&gt;When storing images to S3 bucket, I usually run encode function on the image from S3 and store it alongside the image url in the database so that it's easier. &lt;/p&gt;

&lt;p&gt;Personally I store image in it's own object representation as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://project-uploads.s3.amazonaws.com/i/..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"blurhash"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"LKO2?U%2Tw=w]~RBVZRi};RPxuwH"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-with-react" class="anchor"&gt;
  &lt;/a&gt;
  Using with React
&lt;/h4&gt;

&lt;p&gt;After storing the hash on the server, it's quite easier to use it with React without any manual decoding with &lt;a href="https://github.com/woltapp/react-blurhash"&gt;react-blurhash&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BlurhashCanvas&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-blurhash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Blurhash&lt;/span&gt;
  &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;image_hash&amp;gt;'&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;resolutionX&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;resolutionY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;i&gt;Note: you can also decode the hash manually, checkout &lt;a href="https://github.com/woltapp/blurhash"&gt;blurhash docs&lt;/a&gt; for more details&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experiment-online" class="anchor"&gt;
  &lt;/a&gt;
  Experiment online!
&lt;/h2&gt;

&lt;p&gt;There's an online generator available if would like to try it out yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-1wKVxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bww7xkxb2izzt56nu6vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-1wKVxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bww7xkxb2izzt56nu6vw.png" alt="generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding üéâ &lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Deploy a Docker App to AWS using ECS</title>
      <author>Raphael MANSUY</author>
      <pubDate>Thu, 11 Feb 2021 13:02:58 +0000</pubDate>
      <link>https://dev.to/raphaelmansuy/deploy-a-docker-app-to-aws-using-ecs-3i1g</link>
      <guid>https://dev.to/raphaelmansuy/deploy-a-docker-app-to-aws-using-ecs-3i1g</guid>
      <description>&lt;h1&gt;
  &lt;a href="#deploy-a-docker-app-to-aws-using-ecs" class="anchor"&gt;
  &lt;/a&gt;
  Deploy a Docker App to AWS using ECS
&lt;/h1&gt;

&lt;p&gt;AWS proposes two container orchestrations services: &lt;strong&gt;ECS&lt;/strong&gt; and &lt;strong&gt;Kubernete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Well integrated with the AWS ecosystem, ECS is the proprietary version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-will-build" class="anchor"&gt;
  &lt;/a&gt;
  What we will build
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will explain how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Package and build a node application and package a simple node application with Docker&lt;/li&gt;
&lt;li&gt;Create an ECR repository to store our Docker Image&lt;/li&gt;
&lt;li&gt;Upload the Docker image to the repository&lt;/li&gt;
&lt;li&gt;Create and launch an Elastic Container Cluster (ECR)&lt;/li&gt;
&lt;li&gt;Launch our application as a task within the Elastic Container Cluster&lt;/li&gt;
&lt;li&gt;Expose and open this application on the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9ifaFwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/schema01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9ifaFwd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/schema01.png" alt="Workflow Shema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; is a technology that helps to package and ship applications easily in production.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/ecs/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cards.sort-order=desc&amp;amp;ecs-blogs.sort-by=item.additionalFields.createdDate&amp;amp;ecs-blogs.sort-order=desc"&gt;ECS&lt;/a&gt; stands for Elastic Container Service. It is a fully managed container orchestration service&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html"&gt;ECR&lt;/a&gt; stands for Elastic Container Repository. ECR allows storage of Docker Images on AWS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A cluster is a logical grouping of hardware resources.&lt;/li&gt;
&lt;li&gt;A task is a set of metadata (memory, CPU, port mapping, environmental variables, etc) that describes how a container should be deployed.&lt;/li&gt;
&lt;li&gt;Services are responsible for managing advanced configurations such as load balancing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-nodejs-application-to-deploy" class="anchor"&gt;
  &lt;/a&gt;
  The &lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt; application to deploy
&lt;/h2&gt;

&lt;p&gt;We want to deploy a basic express node application that displays the current time each time the index page is refreshed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-packagejson-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;package.json&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"docker_web_app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Node.js on Docker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Rapha√´l MANSUY raphael.mansuy+contact@gmail.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-serverjs-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;server.js&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Constants&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// App&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello World - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/"&gt;https://nodejs.org/en/docs/guides/nodejs-docker-webapp/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-the-nodejs-application-with-a-docker-file" class="anchor"&gt;
  &lt;/a&gt;
  Package the node.js application with a Docker file
&lt;/h2&gt;

&lt;p&gt;In the same directory of this application, we can create a &lt;code&gt;Dockerfile&lt;/code&gt; that explains how to build a container with this application:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-dockerfile-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14&lt;/span&gt;
&lt;span class="c"&gt;# Create app directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;span class="c"&gt;# Install app dependencies&lt;/span&gt;
&lt;span class="c"&gt;# A wildcard is used to ensure both package.json AND package-lock.json are copied&lt;/span&gt;
&lt;span class="c"&gt;# where available (npm@5+)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# If you are building your code for production&lt;/span&gt;
&lt;span class="c"&gt;# RUN npm ci --only=production&lt;/span&gt;

&lt;span class="c"&gt;# Bundle app source&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "server.js" ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This file defines the following steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;start from the node:14 image&lt;/li&gt;
&lt;li&gt;create a directory &lt;code&gt;/usr/src/ap&lt;/code&gt; inside the container&lt;/li&gt;
&lt;li&gt;copy the local file with pattern &lt;code&gt;package*.json&lt;/code&gt; in the container&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;copy all the local files to the container&lt;/li&gt;
&lt;li&gt;expose the port &lt;code&gt;8080&lt;/code&gt; inside the container&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;node&lt;/code&gt; with the file &lt;code&gt;server.js&lt;/code&gt; when the container starts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Building the image
&lt;/h2&gt;

&lt;p&gt;Run the following command to build an image with the tag &lt;code&gt;node-web-app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; node-web-app &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-image" class="anchor"&gt;
  &lt;/a&gt;
  Running the image
&lt;/h2&gt;

&lt;p&gt;Run the following command to start the application in detached mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 80:8080 &lt;span class="nt"&gt;-d&lt;/span&gt; node-web-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The container is now running and the 8080 port within the container is exposed as the 80 port on your local machine.&lt;/p&gt;

&lt;p&gt;We can now test the application with the &lt;a href="https://curl.se/"&gt;CURL command&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:80
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Hello World - 2021-02-11T05:06:12.739Z
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are now ready to deploy this container to the cloud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-to-amazonecr" class="anchor"&gt;
  &lt;/a&gt;
  Connect to AmazonECR
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/cli/"&gt;&lt;code&gt;aws cli&lt;/code&gt;&lt;/a&gt; must be installed&lt;/li&gt;
&lt;li&gt;your &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html"&gt;aws profile&lt;/a&gt; must be configured and have ECS admin rights enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 | docker login
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have access, you should have this displayed on the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Authenticating with existing credentials...
Login Succeeded

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-your-amazonecr-in-the-aws-console" class="anchor"&gt;
  &lt;/a&gt;
  Create your AmazonECR in the AWS Console
&lt;/h2&gt;

&lt;p&gt;Connect to the AWS Console and to the ECS Administration screen to create a new repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R6_sjJun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R6_sjJun--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr1.png" alt="ECR Step1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Repository&lt;/strong&gt; and choose &lt;code&gt;testrepository&lt;/code&gt; as a name for your repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nl5DghnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nl5DghnB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr2.png" alt="ECR Step2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ECR repository is now created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgtT0h6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgtT0h6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr3.png" alt="ECR Step3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-the-image-on-aws-ecr" class="anchor"&gt;
  &lt;/a&gt;
  Upload the image on AWS ECR
&lt;/h2&gt;

&lt;p&gt;Click now on the &lt;code&gt;push commands button&lt;/code&gt; on the repository screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tln0ogAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tln0ogAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr4.png" alt="ECR Step4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy and execute each command on your machine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iE3Jc7Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iE3Jc7Dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr5.png" alt="ECR Step5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;connect&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws ecr get-login-password &lt;span class="nt"&gt;--region&lt;/span&gt; us-west-2 | docker login &lt;span class="nt"&gt;--username&lt;/span&gt; AWS &lt;span class="nt"&gt;--password-stdin&lt;/span&gt; 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; testrepository &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;build&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker tag testrepository:latest 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;push to ECR&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker push 3680199100XXX.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The image is now published and available on ECR ready to be deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IgZ0tQyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IgZ0tQyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6.png" alt="ECR Step6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at AmazonECR, repositories we can see the newly created image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6kFjHiOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kFjHiOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_1.png" alt="ECR Step6-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NsiuM5nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NsiuM5nw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr6_2.png" alt="ECR Step6-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the image URI: we need to keep this to create a task definition for the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;368019910004.dkr.ecr.us-west-2.amazonaws.com/testrepository:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-an-ecs-cluster" class="anchor"&gt;
  &lt;/a&gt;
  Create an ECS Cluster
&lt;/h2&gt;

&lt;p&gt;Go to the ECS home page and click on the &lt;code&gt;create cluster&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NclFE-k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NclFE-k_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr7.png" alt="ECR Step7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;EC2 Linux + Networking&lt;/code&gt; and then click next:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtcI5WSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtcI5WSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr8.png" alt="ECR Step8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then enter the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name of the cluster: &lt;code&gt;ecs01&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;EC2 instance type: &lt;code&gt;t3-micro&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Number of instances: &lt;code&gt;1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGk4IPxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGk4IPxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr9.png" alt="ECR Step9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Default VPC&lt;/li&gt;
&lt;li&gt;Auto assign IP: &lt;code&gt;Enabled&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Security group: &lt;code&gt;default&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Choose one of the subnet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEOu826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEOu826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr10.png" alt="ECR Step10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then next press &lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-task-definition" class="anchor"&gt;
  &lt;/a&gt;
  Create a new Task definition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A task a set of metadata (memory, cpu, port mappings, environment variables, etc) that describes how a container should be deployed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Click on new &lt;code&gt;Task definition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6qglrsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6qglrsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr11.png" alt="ECR Step11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;EC2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcmyU_8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcmyU_8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr12.png" alt="ECR Step12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;next&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Choose &lt;code&gt;NodeWebAppTask&lt;/code&gt; for the name of the task definition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KShWCyht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KShWCyht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr13.png" alt="ECR Step13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;128&lt;/code&gt;for memory size.&lt;/p&gt;

&lt;p&gt;Click Add Container:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPaYELPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPaYELPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr14.png" alt="ECR Step14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the name of the container: &lt;code&gt;NodeWebApp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Set the image URI that we have saved add the end of the &lt;code&gt;add image&lt;/code&gt; step&lt;/li&gt;
&lt;li&gt;Set the port mappings 80:8080&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKZDyrcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKZDyrcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr15.png" alt="ECR Step15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AJnfvHsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AJnfvHsW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr16.png" alt="ECR Step16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to &lt;code&gt;Run Task&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-l0ZVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-l0ZVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr17.png" alt="ECR Step17"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24hei4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24hei4db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr18.png" alt="ECR Step18"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The task is now running:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cY81Vaa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cY81Vaa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr19.png" alt="ECR Step19"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we click on the container instance:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gzYTTX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gzYTTX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr20.png" alt="ECR Step20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can modify the security group associated with instance to open the port &lt;code&gt;80&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bakrtxj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bakrtxj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr21.png" alt="ECR Step21"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2dKQnCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2dKQnCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr22.png" alt="ECR Step22"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add 80 in the inbound rule to the security group:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSj_zbM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSj_zbM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr23.png" alt="ECR Step23"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try now to open the url: &lt;code&gt;http://ec2-52-38-113-251.us-west-2.compute.amazonaws.com&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CxH4_eA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CxH4_eA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/raphaelmansuy/til/raw/main/docker/images/ecr24.png" alt="ECR Step24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#et-voil%C3%A0" class="anchor"&gt;
  &lt;/a&gt;
  Et voil√†
&lt;/h2&gt;

&lt;p&gt;Our cluster and node application is now deployed.&lt;/p&gt;

&lt;p&gt;üéâ üéâ üéâ&lt;/p&gt;

</description>
      <category>docker</category>
      <category>node</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>A Post-Mortem in 5 Acts, of How Microsoft Privatized Open Source, killing JavaScript in the¬†Process</title>
      <author>Alex Kleydints</author>
      <pubDate>Thu, 11 Feb 2021 12:46:00 +0000</pubDate>
      <link>https://dev.to/kleydints/a-post-mortem-in-5-acts-of-how-microsoft-privatized-open-source-killing-javascript-in-the-process-20ea</link>
      <guid>https://dev.to/kleydints/a-post-mortem-in-5-acts-of-how-microsoft-privatized-open-source-killing-javascript-in-the-process-20ea</guid>
      <description>&lt;p&gt;After Microsoft‚Äôs blitzkrieg take-over, the Open Source JavaScript community, as we know it, is coming to an end.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All things said and done, you must stand in awe, at how Microsoft, executed this takeover, with very little to no resistance from a community of hundreds of thousands of active JavaScript developers, even introducing the use of TypeScript in React, Angular, and Node, while cornering both source-control and distribution of code. It's strategically perfect in all dimensions. Kudos to Nadella and his team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I started coding, I really loved the Open Source JavaScript community. It did always feel weird, that people would write code, and share it for free. But people did, and still do, and it felt amazing and crazy at the same time.&lt;br&gt;
There was Github to manage our sources, and npm, which indexed the open-source libraries and made it super-easy to search, find, and import functionalities, and to create, update and share libraries ourselves. And on sites like Stackoverflow, you could even get free support and advice. JavaScript was improving year after year with every ECMAScript release. It wasn't perfect, but it all worked. The future seemed bright.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Although Open Source grew inside capitalism, it's values weirdly weren't part of that capitalistic world-view. That's why, from day one, it was bound for destruction at some point or¬†another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then one day Microsoft came in and took control of the two core tools, which were the gateways to the whole Open Source community; npm and Github. I don't think people saw this coming, and it's clear that the majority of developers, even today, don't realize what happened and how it will affect them very shortly.&lt;/p&gt;

&lt;p&gt;Once the take-over was complete, a massive propaganda onslaught began to fully convert the idealistic open source community towards the capitalistic Microsoft mantra. It's a 'secret' war, with high-tech propaganda, which over time will silently destroy and remove independence, kill-off non-Microsoft-owned editors, tools, libraries, even JavaScript itself. All of this is inevitable because Microsoft is a for-profit corporation. It's in its DNA to take over whole industries and turn them into profit-generating monopolies for its shareholders.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Microsoft's mission is to turn every JavaScript developer into a Microsoft TypeScript money-generating drone, one way or¬†another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below I'll describe the multi-dimensional blitzkrieg of Microsoft in 5 simple steps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#act-1-microsoft-kills-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Act 1: Microsoft Kills JavaScript
&lt;/h1&gt;

&lt;p&gt;Microsoft may not be able to innovate on products, and they usually fail miserably. But it is shockingly good at marketing, propaganda, and take-overs.&lt;/p&gt;

&lt;p&gt;Microsoft has essentially deprecated JavaScript and the non-profit foundation, which governed it, by TypeScript, which is governed and controlled by the for-profit Microsoft Corporation. If Microsoft was truly interested in improving JavaScript it could have done that through the non-profit foundation. But instead, it took the 'Evil Corp' approach of making the foundation and JavaScript slowly irrelevant, so it could guarantee that it could monopolize and monetize the whole industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-propaganda" class="anchor"&gt;
  &lt;/a&gt;
  Understanding the Propaganda
&lt;/h2&gt;

&lt;p&gt;The 'JavaScript at Scale' narrative is aimed mostly at the business decision-makers, positioning TypeScript as the reliable and robust choice versus the bug-prone and unreliable vanilla JavaScript. Over time this will deprecate JavaScript as a language in business environments. It will become the new PHP.&lt;/p&gt;

&lt;p&gt;And so as not to offend JavaScript developers too much, the 'TypeScript is a superset of JavaScript' narrative was introduced, which for obvious reasons is naively erroneous at best. TypeScript does use JavaScript constructs but has a lot more in common with C#.&lt;/p&gt;

&lt;p&gt;So although TypeScript has its benefits, you should be aware, it is not what Microsoft wants you to believe it is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's fairer to say that TypeScript is a C# superset, with some JavaScript limitations, which compiles to JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#proprietary-open%C2%A0source" class="anchor"&gt;
  &lt;/a&gt;
  Proprietary Open¬†Source
&lt;/h2&gt;

&lt;p&gt;JavaScript is not controlled or owned by one profit-driven corporation. It's an open-source, non-profit, effort driven by many independent actors and corporations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeScript, on the other hand, is Proprietary Open Source, because it is owned, financed and fully controlled by the profit-driven Microsoft corporation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#piggybacking-the-community" class="anchor"&gt;
  &lt;/a&gt;
  Piggy-backing the Community
&lt;/h2&gt;

&lt;p&gt;Infusing JavaScript and open-source in its propaganda Microsoft was able to piggy-back on the disorganized and leaderless open-source community and did this without any noticeable resistance. The whole community welcomes TypeScript whole-heartedly, or at least it seems so.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#act-2-microsoft-acquires%C2%A0github" class="anchor"&gt;
  &lt;/a&gt;
  Act 2: Microsoft Acquires¬†Github
&lt;/h1&gt;

&lt;p&gt;Although Github stayed independent for a long time, it was a for-profit company from day one. It's an almost perfect product-market fit for developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers can store, and manage source-control, and share your code-base.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers have profiles, with an overview of what code-bases the developer contributed to. This profile is almost always requested when developers apply for a job.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers can report bugs and do pull requests to open source repositories.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any developer, who is fine with sharing this code publicly, can use Github for free. The up-sell to a subscription model starts when you don't want to share your code publicly, and want to use private repositories. This feature is mostly used by companies or start-ups. But even then you could use these features free for small teams.&lt;/p&gt;

&lt;p&gt;Github's first-mover advantage, its freemium model, and the close inter-connection with npm, turned it into a monopoly.&lt;br&gt;
Today, authors, educators, speakers, and developers, when referring to creating or downloading a repository always mention Github. It's become synonymous with source control.&lt;/p&gt;

&lt;p&gt;And since Github was funded by Venture Capital, there was always an exit planned, from day one. So it shouldn't be a surprise that a corporation, interested to own the user-base and code-bases of those users, would one day come in, and provide a return on investment for the hard work of its founders and investors. No surprise there.&lt;/p&gt;

&lt;p&gt;After the acquisition by Microsoft, its integration with VSCode, further strengthened its monopoly position as the go-to source code repository service.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#act-3-microsoft-acquires%C2%A0npm" class="anchor"&gt;
  &lt;/a&gt;
  Act 3: Microsoft Acquires¬†npm
&lt;/h1&gt;

&lt;p&gt;Now that Microsoft owned Github, the next logical step was to acquire npm. Npm is not only the JavaScript package manager, it is also the directory of open source libraries in the community. Just like Github, npm was a for-profit company from day one.&lt;/p&gt;

&lt;p&gt;Its' monopoly position was based on having been chosen as the package manager for NodeJS. In 2021 it's close to impossible for the JavaScript community to unlink from npm. It's part of the DNA.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using npm alongside github has become just as a routine for a developer as breathing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#act-4-microsoft-pushes-vscode-as-the-goto-and-only-editor-for-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Act 4: Microsoft pushes VSCode as the go-to (and only) Editor for TypeScript
&lt;/h1&gt;

&lt;p&gt;When I started coding, I watched hundreds of tutorials, followed courses and read many coding books, and continue to do so. And 99 out of 100 times, you hear people continuously advise VSCode as the best of the best editor on the planet. &lt;/p&gt;

&lt;p&gt;It's very rare that someone even mentions Vim or WebStorm.&lt;br&gt;
And for a long time, I actually drank the cool-aid and used only VSCode. But once I started seriously coding, I got annoyed by all the bloatware, spyware, and marketing inside VSCode. It's not like you don't notice. I felt like being used instead of being a user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is no such thing as free in capitalism. If a for-profit corporation, like Microsoft, gives you something free, be prepared to become raped at some¬†point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I moved on from VSCode to WebStorm, via Vim. But the majority of developers, who use Github and npm as part of their routine, will eventually switch to VSCode, if they haven't already. Microsoft's propaganda machine is very efficient (if you are blind).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#act-5-airbnb-for-open-source-libraries-the-business%C2%A0model" class="anchor"&gt;
  &lt;/a&gt;
  Act 5: Airbnb for Open Source Libraries, the business¬†model
&lt;/h1&gt;

&lt;p&gt;The message is clear, open source is about to be monetized by corporations and Venture Capitalist driven companies. And just like Airbnb makes more money on renting out properties, without owning any, parasites like TideLift, OpenCollective, and others, will apply the same Silicon-Valley mantra to Open Source.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Airbnb model is coming to the Open Source Community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most popular open-source libraries will slowly start having 'premium' versions, which will have less, or no bugs, and better support. They'll keep the open-source available, but it will become filled with continuous up-sells and bugs forcing you to pay. This is simply inevitable. Venture Capitalists wouldn't invest hundreds of millions of dollars into something just out of their good heart:).&lt;/p&gt;

&lt;p&gt;And then after some time, Microsoft will buy one or all of the players, and own the whole industry from top to bottom, start to finish.&lt;/p&gt;

&lt;p&gt;Game over.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-conclusion-what-should-you-do-as-a-javascript-developer-in%C2%A02021" class="anchor"&gt;
  &lt;/a&gt;
  In conclusion: What should you do as a JavaScript Developer in¬†2021?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#learn-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Learn TypeScript
&lt;/h2&gt;

&lt;p&gt;If you are a JavaScript developer, learn TypeScript immediately, as most if not all employers will require you to have TypeScript as part of your stack. That is not a bad thing in itself, as you will become more efficient and productive. &lt;/p&gt;

&lt;p&gt;And it will be a lot easier for you to learn other statically typed languages, which is a nice side-effect.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TypeScript is a gateway 'drug' to a world of statically typed languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#be-flexible-and-open-to-learn-anything%C2%A0new" class="anchor"&gt;
  &lt;/a&gt;
  Be Flexible and Open to Learn Anything¬†New
&lt;/h2&gt;

&lt;p&gt;Well, you need to change and definitely be aware of all the new risks and demands on your career. Some of it may save you, and some of it may kill you and it's not very clear what is what.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The modern software developer, continuously learns new practices, patterns, and technologies, and is flexible enough to change, unlearn and drop, and replace, refactor anything, at the drop of the hat, even learning and switching to a new language all together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am not a purist, which means that I will continue to take advantage of the open-source community. I could even say use and abuse, just like Microsoft did and does. It would be stupid, and not productive to stop using libraries. But I have become even more aware of the dangers, and I am decreasing my dependency on third-party convenience libraries, and patterns. &lt;/p&gt;

&lt;p&gt;As a result, I am coding more low-level, which for me at least, is a lot more fun, because it requires me to exercise my brains, and learn new skills. And at the end of the day, that is how you become a better software engineer.&lt;/p&gt;

&lt;p&gt;Today, when I do decide to use a certain technology, library, or framework, I don't just do it blindly on a whim, gobbling up all the direct and indirect propaganda, from the corporations or the venture capitalists behind it. I approach each new technology with an open mind and an objective pragmatism. I actually go through an internal assessment process, just as if I was still an engineer at some large corporation.&lt;/p&gt;

&lt;p&gt;Does it really do things better? Is it faster, cleaner, less prone to bugs? Will it increase my productivity? What are the short-, middle- and long-term costs of using it? Will it make me too dependent on one corporation or toolkit? These are important questions, and you should ask them continuously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-examples" class="anchor"&gt;
  &lt;/a&gt;
  Some Examples
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I didn't move instantly from a REST API model to GraphQL, even though I learned it, understand its concepts, and the reasoning behind it. I could switch anytime if I needed to. But I haven't, because although it solves a lot of issues, it creates a bunch of others at the same time.&lt;/li&gt;
&lt;li&gt;Even though I use the NextJS framework for my React front-end, I am not creating API's inside it, and I am not deploying it on Vercel either.&lt;/li&gt;
&lt;li&gt;Although I switched from JavaScript to TypeScript, I don't use VSCode, Github or Azure, because there are other better solutions and tools for that.&lt;/li&gt;
&lt;li&gt;When React hooks came out, I almost immediately dropped class-based components and switched to hooks-functional components. As a result, I was able to remove my dependency on Redux.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;This oped will in many cases clash with the mainstream narrative and opinions, and that's fine. Our group-think is not as independent or correct as we may think. We often revert to techno-framework-tribalism, aggravated by the constant attack by weapons of mass propaganda.&lt;/p&gt;

&lt;p&gt;But it is important to find out about different views, and opinions and stay vigilant. This is an important soft-skill for the modern developer.&lt;/p&gt;

&lt;p&gt;And it's not all doom and gloom. Learning TypeScript is a good introduction to statically typed languages. So go learn it. But use it as a stepping stone to learning more statically typed languages, not as a final destination.&lt;/p&gt;

&lt;p&gt;Good luck with your TypeScript journey.&lt;/p&gt;

&lt;p&gt;Alex Kleydints&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>opensource</category>
      <category>javascript</category>
      <category>discuss</category>
    </item>
    <item>
      <title>The Breakpoint CSS-JS "Hack" - do not define breakpoints in JS</title>
      <author>David Lorenz</author>
      <pubDate>Thu, 11 Feb 2021 10:21:40 +0000</pubDate>
      <link>https://dev.to/activenode/the-breakpoint-css-js-hack-do-not-define-breakpoints-in-js-1c11</link>
      <guid>https://dev.to/activenode/the-breakpoint-css-js-hack-do-not-define-breakpoints-in-js-1c11</guid>
      <description>&lt;p&gt;This trick is a best practice trick. Knowing that this is a best practice I thought this is a common thing but apparently it is not as widespread as I thought it would be.&lt;/p&gt;

&lt;p&gt;So let me share it with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-not-redefine-your-breakpoints-in-javascripttypescript" class="anchor"&gt;
  &lt;/a&gt;
  Do not redefine your breakpoints in JavaScript/TypeScript
&lt;/h2&gt;

&lt;p&gt;I am assuming you are using either native CSS or SASS for your development so let's use SASS for my code snippets now.&lt;/p&gt;

&lt;p&gt;Assume your breakpoints are defined as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mobile =&amp;gt; max-width: 599.99px
tablet =&amp;gt; min-width: 600px
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now what some people do is redefining those values in JS. But you can simply read the current breakpoint directly from CSS. Also you can pass all breakpoints through CSS as Single Source of Truth for UI ‚ô•Ô∏è&lt;/p&gt;

&lt;p&gt;The trick is to use the &lt;code&gt;:before&lt;/code&gt; in combination with &lt;code&gt;content&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;599&lt;/span&gt;&lt;span class="mi"&gt;.99px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"mobile"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"tablet"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can access this in JS via &lt;code&gt;getComputedStyle(document.body, 'before').content&lt;/code&gt; and it would give you e.g. &lt;code&gt;"mobile"&lt;/code&gt; or &lt;code&gt;"tablet"&lt;/code&gt; here. So the only thing left to do is to remove the quotes like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breakpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nx"&gt;getComputedStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;before&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/"/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now if you want to have all definitions from CSS you could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;media-queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"mobile=(max-width: 599.99px);tablet=(min-width: 600px)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can read that content and use actually &lt;code&gt;matchMedia&lt;/code&gt; or whatever you want but the important part is to always have the Design in CSS and not duplicated in JS.&lt;/p&gt;

&lt;p&gt;Here is an actual demo you can check out: &lt;br&gt;
&lt;a href="https://codesandbox.io/s/reading-media-queries-bps-from-css-06zjh?file=/index.html"&gt;https://codesandbox.io/s/reading-media-queries-bps-from-css-06zjh?file=/index.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>breakpoints</category>
      <category>typescript</category>
    </item>
    <item>
      <title>12 MUST watch videos! #WomenInSTEM Day edition</title>
      <author>Ania Kubow</author>
      <pubDate>Thu, 11 Feb 2021 10:02:31 +0000</pubDate>
      <link>https://dev.to/ania_kubow/12-must-watch-videos-womeninstem-day-edition-3kkp</link>
      <guid>https://dev.to/ania_kubow/12-must-watch-videos-womeninstem-day-edition-3kkp</guid>
      <description>&lt;p&gt;Today, which is the 11th of February, is according to the United Nations General Assembly the International Day of Women and Girls in Science and technology, or Women in STEM for short! So I thought what better way to celebrate, but to showcase some of my favourite videos from YouTubes amazing women, or people who relate to as such.&lt;/p&gt;

&lt;p&gt;On a serious note, The International Day of Women and Girls in Science is implemented by UNESCO and UN Women, in collaboration with intergovernmental agencies and institutions, as well as civil society partners, that aim to promote women and girls in science. The days purpose is to promote full and equal access to participation in science for women and girls, an area where we are currently lacking, so let's change that!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UBcDJD-0LxA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As promised, here are the video links from my video:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚ÄòHow I learned to Code and landed a job‚Äô by Coder Coder     : &lt;a href="https://www.youtube.com/watch?v=jA14r2ujQ7s"&gt;https://www.youtube.com/watch?v=jA14r2ujQ7s&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚ÄòWhy is Burnout so common in Tech‚Äô from Mayuko: &lt;a href="https://www.youtube.com/watch?v=hQX-BtFp-Rc"&gt;https://www.youtube.com/watch?v=hQX-BtFp-Rc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;'What is Abstract Algebra' by Socratica: &lt;a href="https://www.youtube.com/watch?v=IP7nW_hKB7I"&gt;https://www.youtube.com/watch?v=IP7nW_hKB7I&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;'Automate Good Morning Texts with Python in 5 mins' by The Come Up: &lt;a href="https://www.youtube.com/watch?v=GKsCitAEKow"&gt;https://www.youtube.com/watch?v=GKsCitAEKow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚ÄòThe Resume that got me my dream job‚Äô by The BlackFemale Engineer: &lt;a href="https://www.youtube.com/watch?v=erpFaQM_lXA"&gt;https://www.youtube.com/watch?v=erpFaQM_lXA&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; ‚ÄòUI vs UX, what is the difference‚Äô from Coding Blone: &lt;a href="https://www.youtube.com/watch?v=3Ui6y1jXWFs"&gt;https://www.youtube.com/watch?v=3Ui6y1jXWFs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚ÄòBuilding a Fullstack GraphQL and JavaScript App: Getting Started with AWS Amplify‚Äô by Ali Spittel: &lt;a href="https://www.youtube.com/watch?v=86zrndR-AIA"&gt;https://www.youtube.com/watch?v=86zrndR-AIA&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; ‚ÄòServer Side Rendering with NextJS to Hide API Keys‚Äô by  Ijemma Onwuzulike: &lt;a href="https://www.youtube.com/watch?v=NbXwP1oBym8"&gt;https://www.youtube.com/watch?v=NbXwP1oBym8&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;'C++ FOR BEGINNERS (2020) Hello World' by CodeBeauty: &lt;a href="https://www.youtube.com/watch?v=iBG0fN8lY8Y"&gt;https://www.youtube.com/watch?v=iBG0fN8lY8Y&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;'What is Bootstap?' by Thirus: &lt;a href="https://www.youtube.com/watch?v=qj9OlUxvW48"&gt;https://www.youtube.com/watch?v=qj9OlUxvW48&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;'Conways Game of Life in Python' by Faraday Academy: &lt;a href="https://www.youtube.com/watch?v=xpR-YUy4-V4"&gt;https://www.youtube.com/watch?v=xpR-YUy4-V4&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;‚ÄòHow I Landed A Front-End Developer Role in 8 Months' by  TaelurAlexis: &lt;a href="https://www.youtube.com/watch?v=849U_2e7HUI"&gt;https://www.youtube.com/watch?v=849U_2e7HUI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips%E2%80%8B"&gt;https://bit.ly/JS-tips‚Äã&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow%E2%80%8B%E2%80%8B"&gt;https://twitter.com/ania_kubow‚Äã‚Äã&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow%E2%80%8B%E2%80%8B"&gt;https://instagram.com/aniakubow‚Äã‚Äã&lt;/a&gt;&lt;br&gt;
Youtube: &lt;a href="https://youtube.com/aniakubow%E2%80%8B%E2%80%8B"&gt;https://youtube.com/aniakubow‚Äã‚Äã&lt;/a&gt;&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>javascript</category>
      <category>python</category>
      <category>vue</category>
    </item>
  </channel>
</rss>
