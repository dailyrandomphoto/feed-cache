<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>31 single DIV illustration — the DIVtober collection </title>
      <author>Temani Afif</author>
      <pubDate>Sun, 31 Oct 2021 12:21:42 +0000</pubDate>
      <link>https://dev.to/afif/31-single-div-illustration-the-divtober-collection-aik</link>
      <guid>https://dev.to/afif/31-single-div-illustration-the-divtober-collection-aik</guid>
      <description>&lt;p&gt;After &lt;a href="https://dev.to/afif/rate-my-first-css-drawing-51m5"&gt;my first CSS drawing&lt;/a&gt; here I am with more CSS art. This time I spent 31 days with the CSS master &lt;a href="https://twitter.com/lynnandtonic"&gt;Lynn Fisher&lt;/a&gt; in order to acquire some ancestral powers around the single DIV.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/109epNnxnLTMha/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/109epNnxnLTMha/giphy-downsized.gif" alt="san goku" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The challenge was to follow a prompt and create a CSS illustration each day during the whole month of October. Say hello to &lt;strong&gt;#divtober&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPMmW31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAYwc-VVQAgNCNo.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5hMq5Se--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1429641617850339333/mow6F24g_normal.jpg" alt="Lynn Fisher profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Lynn Fisher
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @lynnandtonic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      October is already going to be busy busy, but let’s do this! 😅&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/divtober"&gt;#divtober&lt;/a&gt; 2021: &lt;a href="https://t.co/LjXN92wxoZ"&gt;a.singlediv.com/divtober2021/&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:52 PM - 28 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1442895061000155136" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;PS: click on &lt;strong&gt;rerun&lt;/strong&gt; at the bottom right to run the pen again. Not all of the demos have an infinite animation.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-fan"&gt;
  &lt;/a&gt;
  1. Fan
&lt;/h2&gt;

&lt;p&gt;Let's start with a Japan style hand fan&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjJVrPj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-watch"&gt;
  &lt;/a&gt;
  2. Watch
&lt;/h2&gt;

&lt;p&gt;You missed the last keynote of Apple? Don't worry, find below the full replay:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/xxreJGd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-quick"&gt;
  &lt;/a&gt;
  3. Quick
&lt;/h2&gt;

&lt;p&gt;A quick sword slash! 👀👀&lt;br&gt;
Roronoa is preparing for the next fight.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gORyyPO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-loop"&gt;
  &lt;/a&gt;
  4. Loop
&lt;/h2&gt;

&lt;p&gt;An infinite loop animation. Will they touch each other?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gORJbyL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-tired"&gt;
  &lt;/a&gt;
  5. Tired
&lt;/h2&gt;

&lt;p&gt;I am already tired after only 4 days...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/xxrowbV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-hungry"&gt;
  &lt;/a&gt;
  6. Hungry
&lt;/h2&gt;

&lt;p&gt;Hurry up and grab a slice!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoMLGP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-toxic"&gt;
  &lt;/a&gt;
  7. Toxic
&lt;/h2&gt;

&lt;p&gt;Warning!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYzgbYQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-growing"&gt;
  &lt;/a&gt;
  8. Growing
&lt;/h2&gt;

&lt;p&gt;Let's take care of the nature&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjyPXoB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-homonym"&gt;
  &lt;/a&gt;
  9. Homonym
&lt;/h2&gt;

&lt;p&gt;I choose the word "bat" so here is a bat with a bat&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwZbLeP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-organized"&gt;
  &lt;/a&gt;
  10. Organized
&lt;/h2&gt;

&lt;p&gt;We are already at day 10. Let's take a look at the calendar. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/wvqvJgY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Still 21 to go 🥵🥵&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-slice"&gt;
  &lt;/a&gt;
  11. Slice
&lt;/h2&gt;

&lt;p&gt;You like cheese, don't you?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/vYJYVrM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-squeak"&gt;
  &lt;/a&gt;
  12. Squeak
&lt;/h2&gt;

&lt;p&gt;I don't know the word "squeak" but it's seems to be the sound produced by a mouse.&lt;/p&gt;

&lt;p&gt;It's not the case of mine 🤔 (🤭)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRvgExq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-camouflage"&gt;
  &lt;/a&gt;
  13. Camouflage
&lt;/h2&gt;

&lt;p&gt;Someone is hidden here. Find him!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/wvqapzr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-fancy"&gt;
  &lt;/a&gt;
  14. Fancy
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBXOroE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-float"&gt;
  &lt;/a&gt;
  15. Float
&lt;/h2&gt;

&lt;p&gt;Oh! a letter from my parents. Yes, I am doing this challenge on a lost island.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWamQQL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-snow"&gt;
  &lt;/a&gt;
  16. Snow
&lt;/h2&gt;

&lt;p&gt;An island where there is no snow...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BadjOJQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-stack"&gt;
  &lt;/a&gt;
  17. Stack
&lt;/h2&gt;

&lt;p&gt;When the stack overflow.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNzxgjE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-shine"&gt;
  &lt;/a&gt;
  18. Shine
&lt;/h2&gt;

&lt;p&gt;Say hello to my friend Sunny.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExvKQqP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-nostalgia"&gt;
  &lt;/a&gt;
  19. Nostalgia
&lt;/h2&gt;

&lt;p&gt;Some nostalgia with Mario. Hover the box to earn coins! Sorry Firefox users, you cannot play the game.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOxMwXY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-journey"&gt;
  &lt;/a&gt;
  20. Journey
&lt;/h2&gt;

&lt;p&gt;The road to success is hard, long and — responsive 😛 (yes, yes! Adjust your screen size and see the result)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOxwOLo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-magic"&gt;
  &lt;/a&gt;
  21. Magic
&lt;/h2&gt;

&lt;p&gt;Hover the hat and TADA!!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/wvqzLMp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Oops, where did the rabbit go again?! And what the hell is that animal 😩&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-critter"&gt;
  &lt;/a&gt;
  22. Critter
&lt;/h2&gt;

&lt;p&gt;Hey, Duo here! Let’s learn some Japanese?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/oNeYBJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;Duolingo will not pay me for this ad&lt;/sup&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-loud"&gt;
  &lt;/a&gt;
  23. Loud
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNERGbY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#24-smelly"&gt;
  &lt;/a&gt;
  24. Smelly
&lt;/h2&gt;

&lt;p&gt;A wild Koffing appeared!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwZKYqJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-dip"&gt;
  &lt;/a&gt;
  25. Dip
&lt;/h2&gt;

&lt;p&gt;A deep friendship. I meant, a "dip" friendship 😜&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYjWbLm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#26-spice"&gt;
  &lt;/a&gt;
  26. Spice
&lt;/h2&gt;

&lt;p&gt;I don't think the below are friends...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExvmgWY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#27-film"&gt;
  &lt;/a&gt;
  27. Film
&lt;/h2&gt;

&lt;p&gt;The Star Wars famous scene like you have never seen!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJjmqZM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;For this one I picked one of my old illustration from here: &lt;a href="https://dev.to/afif/still-100-css-loaders-for-your-next-project-57hp#the-famous"&gt;https://dev.to/afif/still-100-css-loaders-for-your-next-project-57hp#the-famous&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#28-dots"&gt;
  &lt;/a&gt;
  28. Dots
&lt;/h2&gt;

&lt;p&gt;Meet the Daldots! the new CSS villains&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abyWEBe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you don't know the original cartoon, &lt;a href="https://www.google.com/search?q=the+daltons&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ved=2ahUKEwiC9Pmsp-3zAhWPkhQKHX-YDdgQ_AUoAXoECAEQAw&amp;amp;biw=1600&amp;amp;bih=747&amp;amp;dpr=1"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#29-fruit"&gt;
  &lt;/a&gt;
  29. Fruit
&lt;/h2&gt;

&lt;p&gt;What smoothie are you? select your fruit!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEJJxgX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#30-contrast"&gt;
  &lt;/a&gt;
  30. Contrast
&lt;/h2&gt;

&lt;p&gt;Tailwind developer VS CSS developer. Choose your road!&lt;br&gt;
Both lead to the same destination but ...&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNzzraL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I won't tell which one is which because I am pretty sure not everyone will see it the same way 😜&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#31-spooky"&gt;
  &lt;/a&gt;
  31. Spooky
&lt;/h2&gt;

&lt;p&gt;It's finally over! it was fun but exhausting 😵&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExvvJPR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;




&lt;p&gt;Don't forget to tell me your favorite one 👇. Follow this link if you want to see what the others have made: &lt;a href="https://twitter.com/hashtag/divtober?src=hashtag_click&amp;amp;f=live"&gt;https://twitter.com/hashtag/divtober?src=hashtag_click&amp;amp;f=live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait for more crazier and funny CSS art! I will get back with more superpowers!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LdzYJipCrdJqU/giphy-downsized.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LdzYJipCrdJqU/giphy-downsized.gif" alt="" width="512" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me on twitter if you don't want to miss some cool stuff I share there: &lt;a href="https://twitter.com/ChallengesCss"&gt;https://twitter.com/ChallengesCss&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-want-to-support-me"&gt;
  &lt;/a&gt;
  &lt;center&gt;You want to support me?&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/afif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="buy me a coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/temani"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3jtgy2i5l4w8slkps5.png" alt="Become a patron" width="499" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Day 23 of 100 Days of Code &amp; Scrum: Rammina's Happy Halloween Scheming</title>
      <author>Rammina</author>
      <pubDate>Sun, 31 Oct 2021 12:14:52 +0000</pubDate>
      <link>https://dev.to/rammina/day-23-of-100-days-of-code-scrum-ramminas-happy-halloween-scheming-2ni8</link>
      <guid>https://dev.to/rammina/day-23-of-100-days-of-code-scrum-ramminas-happy-halloween-scheming-2ni8</guid>
      <description>&lt;p&gt;Happy Halloween, everyone!&lt;/p&gt;

&lt;p&gt;Today's a special occasion, so I didn't code that much. I only did like 2-3 hours of productive work to respect the challenge, then the rest was pretty chill. Glad to finally have a chance to unwind from constant daily routine!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#halloween-not-for-me"&gt;
  &lt;/a&gt;
  Halloween? Not for me.
&lt;/h3&gt;

&lt;p&gt;We don't really do trick or treat where I live, and I'm not too interested in going out to celebrate. Instead, I just chilled and watched anime, gaming streams, and played FF14. I'm such a geek, I know. It's what makes me happy so I don't really feel pressured to go to horror houses or put on costumes.&lt;/p&gt;

&lt;p&gt;That said, I do hope that everyone had a fun Halloween!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSnX7FH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgu5hztbqmvv1pfsnne1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSnX7FH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgu5hztbqmvv1pfsnne1.jpg" alt="Halloween Corgi" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;Like I usually do every week. I did my Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Just as like every new week, I planned out what I should be doing and established my new &lt;strong&gt;Sprint Goals&lt;/strong&gt;. My focus for this week will be &lt;strong&gt;Next.js&lt;/strong&gt; as I would like to build my company's website soon. I will still be studying &lt;strong&gt;Scrum&lt;/strong&gt; and continue writing my guides!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;learn and review Next.js.&lt;/li&gt;
&lt;li&gt;lay out my plans for my company's website.&lt;/li&gt;
&lt;li&gt;write user stories for my website, so I can plan ahead and prioritize what features I will really need right away and what might be desirable in the future.&lt;/li&gt;
&lt;li&gt;finish my beginner Scrum guide.&lt;/li&gt;
&lt;li&gt;finish reading &lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;finish my guides about Scrum.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trick or treat! Have fun, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTUETMOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9dd6zelfb0pagv2n55m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTUETMOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9dd6zelfb0pagv2n55m.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/minibooks/scrum-xp-from-the-trenches-2/"&gt;Scrum and XP from the Trenches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#my-super-secret-scheme"&gt;
  &lt;/a&gt;
  My Super Secret Scheme
&lt;/h3&gt;

&lt;p&gt;Some of you already know what I'm planning in secret... It will be interesting and hilarious once we see what happens. I can't wait for the reaction of "that man."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzxFEwPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8tlnf7oi89exhmpi86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzxFEwPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd8tlnf7oi89exhmpi86.png" alt="Bernkastel" width="355" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a custom video player in React 📽️</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Sun, 31 Oct 2021 11:41:48 +0000</pubDate>
      <link>https://dev.to/avneesh0612/create-a-custom-video-player-in-react-4bbo</link>
      <guid>https://dev.to/avneesh0612/create-a-custom-video-player-in-react-4bbo</guid>
      <description>&lt;p&gt;Wassup guys, in this tutorial we are going to see how to build a custom video player in React. Let's jump straight into it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GMCPeKtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZuUyAjVssKoAAAAC/so-lets-just-get-right-into-it-hannah-fawcett.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GMCPeKtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/ZuUyAjVssKoAAAAC/so-lets-just-get-right-into-it-hannah-fawcett.gif" alt="jump right in" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-react-app"&gt;
  &lt;/a&gt;
  Create a new react app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-video-app custom-video-player
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  Cleanup
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Delete everything in the app div in &lt;code&gt;App.js&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./App.css";

function App() {
  return &amp;lt;div className="app"&amp;gt;&amp;lt;/div&amp;gt;;
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delete everything in &lt;code&gt;App.css&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;in &lt;code&gt;index.css&lt;/code&gt; add-&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  margin: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-the-ui-for-our-video-player"&gt;
  &lt;/a&gt;
  Create the UI for our Video player
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-video"&gt;
  &lt;/a&gt;
  Adding the Video
&lt;/h3&gt;

&lt;p&gt;Inside the app div add a video tag with the src of your video, I am also going to add a className for styling-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;video
    className="video"
    src="https://res.cloudinary.com/dssvrf9oz/video/upload/v1635662987/pexels-pavel-danilyuk-5359634_1_gmixla.mp4"
 &amp;gt;&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-controls-of-the-videos"&gt;
  &lt;/a&gt;
  Adding the controls of the videos
&lt;/h3&gt;

&lt;p&gt;Below the video component, I will add this div which has some Svgs as icons. You can use direct Svgs like me or use an icon library for the icons :).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div className="controlsContainer"&amp;gt;
        &amp;lt;div className="controls"&amp;gt;
          &amp;lt;img className="controlsIcon" alt="" src="/backward-5.svg" /&amp;gt;
          &amp;lt;img className="controlsIcon--small" alt="" src="/play.svg" /&amp;gt;
          &amp;lt;img className="controlsIcon" alt="" src="/forward-5.svg" /&amp;gt;
        &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-the-progress-bar-for-time"&gt;
  &lt;/a&gt;
  Adding the progress bar for time
&lt;/h3&gt;

&lt;p&gt;We are also going to create a progress bar that shows the current time and total time of the video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;div className="timecontrols"&amp;gt;
        &amp;lt;p className="controlsTime"&amp;gt;1:02&amp;lt;/p&amp;gt;
        &amp;lt;div className="time_progressbarContainer"&amp;gt;
          &amp;lt;div style={{ width: "40%" }} className="time_progressBar"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;p className="controlsTime"&amp;gt;2:05&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Forgive me for not having very good naming conventions in classes. &lt;em&gt;I have forgotten how to name my classes because of Tailwind :P&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#styling-the-ui"&gt;
  &lt;/a&gt;
  Styling the UI
&lt;/h2&gt;

&lt;p&gt;The video player looks very ugly right now, so let's style it. In &lt;em&gt;App.css&lt;/em&gt; I am going to add some stylings-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* Main Container */

.app {
  display: flex;
  flex-direction: column;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
}

/* Video */

.video {
  width: 100vw;
  height: 100vh;
}

/* Controls */

.controlsContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100vw;
  background-color: transparent;
  margin-top: -50vw;
  padding: 0 40px;
  z-index: 20;
}

.controls {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  padding-top: 18rem;
  margin: auto;
}

.controlsIcon {
  width: 40px;
  height: 40px;
  cursor: pointer;
  margin-left: 10rem;
  margin-right: 10rem;
}

.controlsIcon--small {
  width: 32px;
  height: 32px;
  cursor: pointer;
  margin-left: 10rem;
  margin-right: 10rem;
}

/* The time controls section */

.timecontrols {
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  position: absolute;
  bottom: 4rem;
  margin-left: 10vw;
}

.time_progressbarContainer {
  background-color: gray;
  border-radius: 15px;
  width: 75vw;
  height: 5px;
  z-index: 30;
  position: relative;
  margin: 0 20px;
}

.time_progressBar {
  border-radius: 15px;
  background-color: indigo;
  height: 100%;
}

.controlsTime {
  color: white;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our video player would look like this-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egNcuVcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635672034793/swelNl_sp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egNcuVcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635672034793/swelNl_sp.png" alt="image.png" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-logic-to-the-player"&gt;
  &lt;/a&gt;
  Adding the logic to the player
&lt;/h2&gt;

&lt;p&gt;To work on the functionalities we first need to attach a ref to the video with the useRef hook. So follow the steps given below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a ref like this-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const videoRef = useRef(null);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Import the useRef hook from react
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useRef } from "react";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Attach it to the video
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;video
    ref={videoRef}
    className="video"
    src="https://res.cloudinary.com/dssvrf9oz/video/upload/v1635662987/pexels-pavel-danilyuk-5359634_1_gmixla.mp4"
 &amp;gt;&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#play-and-pause-functionality"&gt;
  &lt;/a&gt;
  Play and Pause functionality
&lt;/h3&gt;

&lt;p&gt;For play and pause create a simple function, which takes an argument of control and based on the control it will play or pause the video-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const videoHandler = (control) =&amp;gt; {
    if (control === "play") {
      videoRef.current.play();
    } else if (control === "pause") {
      videoRef.current.pause();
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the play.svg image, we will add an onClick function to start the video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;img
     onClick={() =&amp;gt; videoHandler("play")}
     className="controlsIcon--small"
     alt=""
     src="/play.svg"
     /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you click on the icon the video will play!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Changing the icon based on the playing/paused state&lt;/strong&gt;&lt;br&gt;
To achieve this I am going to use the useState hook. Create a playing state like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [playing, setPlaying] = useState(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the const video handler function, we need to change the value onClick of them like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const videoHandler = (control) =&amp;gt; {
    if (control === "play") {
      videoRef.current.play();
      setPlaying(true);
    } else if (control === "pause") {
      videoRef.current.pause();
      setPlaying(false);
    }
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Changing the icon&lt;/strong&gt;&lt;br&gt;
Where we have the play icon, now we will render it based on a condition with the help of a ternary operator -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {playing ? (
            &amp;lt;img
              onClick={() =&amp;gt; videoHandler("pause")}
              className="controlsIcon--small"
              alt=""
              src="/pause.svg"
            /&amp;gt;
          ) : (
            &amp;lt;img
              onClick={() =&amp;gt; videoHandler("play")}
              className="controlsIcon--small"
              alt=""
              src="/play.svg"
            /&amp;gt;
          )}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can play and pause the video 🥳&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forwarding-and-reverting-the-video"&gt;
  &lt;/a&gt;
  Forwarding and reverting the video
&lt;/h3&gt;

&lt;p&gt;I am going to create very simple functions for this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const fastForward = () =&amp;gt; {
    videoRef.current.currentTime += 5;
  };

  const revert = () =&amp;gt; {
    videoRef.current.currentTime -= 5;
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will add these functions as onClick of the respective buttons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forward&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img
  onClick={fastForward}
  className="controlsIcon"
  alt=""
  src="/forward-5.svg"
     /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Revert&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img
  onClick={revert}
  className="controlsIcon"
  alt=""
  src="/backward-5.svg"
     /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-progress-bar"&gt;
  &lt;/a&gt;
  Time progress bar
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Get the length of the video&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the length of the video, follow the following steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give an id to the video component
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;video
    id="video1"
    ref={videoRef}
    className="video"
    src="https://res.cloudinary.com/dssvrf9oz/video/upload/v1635662987/pexels-pavel-danilyuk-5359634_1_gmixla.mp4"
 &amp;gt;&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create a state to store the video length
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [videoTime, setVideoTime] = useState(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Set the video time like this on the play of the video
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (control === "play") {
      videoRef.current.play();
      setPlaying(true);
      var vid = document.getElementById("video1");
      setVideoTime(vid.duration);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use the videoTime variable instead of hardcoded time. This string manipulation will make the time in a format like- 1:05&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;p className="controlsTime"&amp;gt;
    {Math.floor(videoTime / 60) + ":" + ("0" + Math.floor(videoTime % 60)).slice(-2)}
 &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Getting the current time of the video&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To get the current time of video we will need to use a function that runs every second, so I am going to use window.setInterval for the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.setInterval(function () {
    setCurrentTime(videoRef.current?.currentTime);
  }, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now as always, we need to create a state to store the value-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [currentTime, setCurrentTime] = useState(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of the hard code value, we will use the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p className="controlsTime"&amp;gt;
    {Math.floor(currentTime / 60) + ":" + ("0" + Math.floor(currentTime % 60)).slice(-2)}
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Getting the progress and setting it to the progress bar&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create another state for progress-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [progress, setProgress] = useState(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now inside the window.setInterval function that we created, add another line-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setProgress((videoRef.current?.currentTime / videoTime) * 100);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function would look like this now-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.setInterval(function () {
    setCurrentTime(videoRef.current?.currentTime);
    setProgress((videoRef.current?.currentTime / videoTime) * 100);
  }, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Our custom video player is now ready 🎉🎊&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/custom-video-player"&gt;GitHub repository&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;ReactJS docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>video</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to get the first job</title>
      <author>Thiago Marinho</author>
      <pubDate>Sun, 31 Oct 2021 11:38:34 +0000</pubDate>
      <link>https://dev.to/tgmarinhodev/how-to-get-the-first-job-18ib</link>
      <guid>https://dev.to/tgmarinhodev/how-to-get-the-first-job-18ib</guid>
      <description>

&lt;p&gt;What I tell to my mentees - Tips to getting a Job&lt;/p&gt;

&lt;p&gt;tags: first job, software developer, junior developer&lt;/p&gt;

&lt;p&gt;All you need to do is expose yourself. Alert cliche sentence: Who is not seen is not remembered.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create a blog on &lt;a href="http://dev.to/"&gt;dev.to&lt;/a&gt; and create content;&lt;/li&gt;
&lt;li&gt;Keep your Github active and with information;&lt;/li&gt;
&lt;li&gt;Learn how to use Google effectively, and search for: GitHub roadmap "some technology here";&lt;/li&gt;
&lt;li&gt;LinkedIn - create posts, talk with people;&lt;/li&gt;
&lt;li&gt;Participe of communities - slack, discord, telegram;&lt;/li&gt;
&lt;li&gt;Use well Twitter and social networks to follow the right people and consume good content.&lt;/li&gt;
&lt;li&gt;Apply for the jobs, get indications, find mentors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to well explain version:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-is-not-seen-is-not-remembered-how-to-be-seen"&gt;
  &lt;/a&gt;
  Who is not seen is not remembered - How to be seen?
&lt;/h3&gt;

&lt;p&gt;The answer is SEO (Search Engine Optimization), what happens when you type on Google: "React Software Engineer Thiago Marinho" I hope that you will see some references for myself, my LinkedIn, Twitter, personal website, old pictures also 💁‍♂️&lt;/p&gt;

&lt;p&gt;So my tip for someone that needs the first job or relocate, is to create some portfolio and show yourself for the world. Don't be shy.&lt;/p&gt;

&lt;p&gt;You can do it using &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@tgmarinho/"&gt;medium&lt;/a&gt;, &lt;a href="https://sibelius.substack.com/"&gt;substack&lt;/a&gt;, or code your own &lt;a href="https://tgmarinho.com/"&gt;website&lt;/a&gt;. It's better to use the first alternative for now.&lt;/p&gt;

&lt;p&gt;Your Github should contain information and links to your LinkedIn, professional email, and the bio should have info about what are you doing right now.&lt;/p&gt;

&lt;p&gt;e.g: "Passionate Software Developer 💻 React · React Native · Node.js 🚀 GraphQL and Relay enthusiast"&lt;/p&gt;

&lt;p&gt;Those who see my GitHub will understand that I'm coding and what I'm interested in.&lt;/p&gt;

&lt;p&gt;You should have a portfolio in your GitHub profile, with a Good readme explaining the project:&lt;/p&gt;

&lt;p&gt;eg:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tgmarinho/README-ecoleta"&gt;https://github.com/tgmarinho/README-ecoleta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tgmarinho/members"&gt;https://github.com/tgmarinho/members&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way you can get experience without experience.&lt;/p&gt;

&lt;p&gt;Show this project to someone that is hiring you is a great way to impress, it's very nice when you're trying to get a job and the company uses the same stack of your portfolio, it's already happened with me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-keep-updated-with-technologies-and-how-to-know-what-i-should-learn"&gt;
  &lt;/a&gt;
  How to keep updated with technologies and how to know what I should learn?
&lt;/h3&gt;

&lt;p&gt;Both are great questions, the first one, the Seniors developers go to the information source: If you want to see how to create a good application with React, then you need to see what Facebook developers are doing with this technology and read about their experiences and see others players like: Airbnb, Netflix, Uber, Nubank, and the list is long.&lt;/p&gt;

&lt;p&gt;Read their tech blogs, GitHub repositories, etc.&lt;/p&gt;

&lt;p&gt;If you are beginning, so your questions already were answered in some place like StackOverflow or GitHub issues of the npm package that you are using.&lt;/p&gt;

&lt;p&gt;And the second question the answer is, search for: GitHub react roadmap, GitHub data science roadmap, GitHub javascript roadmap, search also for GitHub awesome react, GitHub awesome python, GitHub awesome blockchain, you will find great resources created by the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-how-to-search-things"&gt;
  &lt;/a&gt;
  Learn how to search things:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.pcmag.com/how-to/23-google-search-tips-youll-want-to-learn"&gt;Learning how to search&lt;/a&gt; is a great way to fix issues and get the best content. Use How to ...., and the magic happens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-linkedin"&gt;
  &lt;/a&gt;
  use the LinkedIn
&lt;/h3&gt;

&lt;p&gt;If you don't know anybody, it's nice to have a LinkedIn.&lt;/p&gt;

&lt;p&gt;Create some posts, use nice keywords, be honest but be confident positioning for getting your first job, create your authority in your stack, telling for the world what you are doing, learning, reading, etc, be proactive.&lt;br&gt;
You don't want a job, you want to work, to make your best, to do something great. Give value to receive value.&lt;/p&gt;

&lt;p&gt;Do not use LinkedIn superficially, try to make two or three direct contacts, search for who is working with React, and try to talk with them, asking some tips, jobs, feedbacks in your portfolio, there is a bunch of nice people that like to help others.&lt;/p&gt;

&lt;p&gt;I suggest reading my &lt;a href="https://www.tgmarinho.com/posts/2020-09-14-expansion_week_na_rocketseat"&gt;blog post pt-br&lt;/a&gt; here you will find some other insights for your career.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-community"&gt;
  &lt;/a&gt;
  Join Community
&lt;/h3&gt;

&lt;p&gt;You will work with people, you'll need them. Today you need help, tomorrow you'll help others.&lt;/p&gt;

&lt;p&gt;Use discord, telegram, slack, WhatsApp, forums. You should participate in at least one community and be active, asking and answering, be direct with your doubts.&lt;/p&gt;

&lt;p&gt;never ask: Someone already worked with React useCallback?&lt;/p&gt;

&lt;p&gt;Instead, ask: I'm working with React useCallback, and I'm facing an issue with rerender, look the code below, look the log, someone can help with that?&lt;/p&gt;

&lt;p&gt;If you do this question: Someone already worked with React useCallback?&lt;br&gt;
The people will answer: yes | no, and you will type your problem, that's waste of time, you need to improve your async communication.&lt;br&gt;
In a community, there are a lot of people trying to help others just for free and friendly.&lt;br&gt;
You don't need to participate in a lot of community, you can't follow all topics. It's better to participate of one or three in the maximum than participate of 20 and not talk, ask, answer.&lt;br&gt;
Leave from the community that you are not interacting with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitter-social-networking"&gt;
  &lt;/a&gt;
  Twitter, Social networking
&lt;/h3&gt;

&lt;p&gt;I recommend following some nice guys that tweet about what you want to work with, this way you will update about technology, market jobs.&lt;br&gt;
Sometimes will appear some cutties cats in your timeline, but make the part.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.swyx.io/learn-in-public/"&gt;Learn in public&lt;/a&gt;. You don't know anything!&lt;br&gt;
Share what you are doing, learning... on Twitter, and receive feedback about it. Process what matters, ignore the bullshits.&lt;/p&gt;

&lt;p&gt;If you don't like Twitter, LinkedIn, ok do it just until you get your first job, then, you can leave, but I recommend interacting with people always you can do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Never stop learning, you always will have things to learn and apply. Learn on-demand, when you have a new project then you can learn and code about it instead of doing a course without goals or evident opportunity.&lt;br&gt;
use social media Twitter/LinkedIn with wisdom.&lt;br&gt;
Make friends on this platform, find mentors to grow fast.&lt;br&gt;
Take your time, enjoy and learn with the process.&lt;/p&gt;

&lt;p&gt;Good luck, see you at the next level 🚀&lt;/p&gt;

</description>
      <category>job</category>
      <category>software</category>
      <category>developer</category>
      <category>junior</category>
    </item>
    <item>
      <title>SQL Basics for Beginners</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Sun, 31 Oct 2021 10:56:33 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/sql-basics-for-beginners-4n74</link>
      <guid>https://dev.to/vadimkolobanov/sql-basics-for-beginners-4n74</guid>
      <description>&lt;p&gt;Hello everyone Let's take a brief look at the basics of SQL. Let's find out what SQL is, what commands, methods and features there are.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#basic-terminology"&gt;
  &lt;/a&gt;
  Basic terminology
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt; - is some organized set of information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relational database&lt;/strong&gt; - is a database built on a relational data model (according to the mathematical theory of relations).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database management system (DBMS)&lt;/strong&gt; - is a set of programs that allows you to manage the creation and use of a database.&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#sql-language"&gt;
  &lt;/a&gt;
  SQL Language
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;SQL (structured query language)&lt;/strong&gt; - is a programming language designed to work with relational databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The peculiarity of SQL&lt;/strong&gt; - is a declarative programming language, we describe what we want to get, not how&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#types-of-sql-statements"&gt;
  &lt;/a&gt;
  Types of SQL statements
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#groups-of-sql-statements"&gt;
  &lt;/a&gt;
  Groups of SQL statements:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Operators for working with database objects.&lt;/li&gt;
&lt;li&gt;Data manipulation operators.&lt;/li&gt;
&lt;li&gt;Transaction Management Commands&lt;/li&gt;
&lt;li&gt;Data protection and management operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will consider only data manipulation operators, because it is with them that you will most often meet in the course of your work.&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#select-request-basic-syntax"&gt;
  &lt;/a&gt;
  SELECT request. Basic syntax
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Minimum query:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;"Separate" and "order by" operators:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Graph operator:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;QUANTITY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#subqueries"&gt;
  &lt;/a&gt;
  Subqueries
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; print the count of different values in the "f1" field of the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The subquery is written in parentheses, the result of its work is a table.&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#the-exists-operator"&gt;
  &lt;/a&gt;
  The exists operator
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;A quick way to check if a query returns at least one value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;smth&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes it is convenient to use aliases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;field1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;first_table&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;second_table&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;second_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#group-by-operator"&gt;
  &lt;/a&gt;
  Group by operator
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="n"&gt;having_condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the HAVING operator, unlike where, aggregating functions can be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some aggregating functions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUM&lt;/li&gt;
&lt;li&gt;COUNT&lt;/li&gt;
&lt;li&gt;MIN&lt;/li&gt;
&lt;li&gt;MAX&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#merging-tables"&gt;
  &lt;/a&gt;
  Merging tables
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#keys"&gt;
  &lt;/a&gt;
  Keys
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Types of key relationships:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 to 1&lt;/li&gt;
&lt;li&gt;1 to many&lt;/li&gt;
&lt;li&gt;many to 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gDTGU5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jurcwhfm9rol4lasui59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gDTGU5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jurcwhfm9rol4lasui59.png" alt="Keys" width="396" height="218"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#many-to-many-relationship"&gt;
  &lt;/a&gt;
  Many to many relationship
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQOR23yX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry1buby71rb4x9s3i0mj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQOR23yX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry1buby71rb4x9s3i0mj.png" alt="ManyToMany" width="512" height="170"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#join-operator"&gt;
  &lt;/a&gt;
  JOIN operator
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYHuM9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qluyhpjr7b903gonkk1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYHuM9jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qluyhpjr7b903gonkk1u.png" alt="Join operator" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#changing-the-contents-of-tables"&gt;
  &lt;/a&gt;
  Changing the contents of tables
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Adding an element:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;values&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Updating an element:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;col1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Deleting an element:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I hope my efforts will help someone to deal with such a topic as SQL.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-wish-you-good-luck"&gt;
  &lt;/a&gt;
  I wish you good luck!
&lt;/h4&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>EXP: Random Color Poster v.1</title>
      <author>sparklingman</author>
      <pubDate>Sun, 31 Oct 2021 10:42:15 +0000</pubDate>
      <link>https://dev.to/sparklingman/exp-random-color-poster-v1-4g4i</link>
      <guid>https://dev.to/sparklingman/exp-random-color-poster-v1-4g4i</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSWlshAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k12cco7oiahkm2inuke7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSWlshAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k12cco7oiahkm2inuke7.png" alt="Image description" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sparklingman/embed/KKvXgyv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>animation</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Crossposting with a single script: Crossposter.sh</title>
      <author>Meet Gor</author>
      <pubDate>Sun, 31 Oct 2021 10:30:24 +0000</pubDate>
      <link>https://dev.to/mr_destructive/crossposting-with-a-single-script-crosspostersh-21oc</link>
      <guid>https://dev.to/mr_destructive/crossposting-with-a-single-script-crosspostersh-21oc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you have been writing articles you know the pain to get some attention, if you have already been cross-posting your articles it usually takes some time to do that. This task can be automated with a shellscript. If you have been cross-posting articles on &lt;code&gt;medium.com&lt;/code&gt;, &lt;code&gt;dev.to&lt;/code&gt; and at &lt;code&gt;hashnode.com&lt;/code&gt;, then I have a treat for you. &lt;/p&gt;

&lt;p&gt;Introducing &lt;strong&gt;crossposter.sh&lt;/strong&gt;!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-crosspostersh"&gt;
  &lt;/a&gt;
  What is Crossposter.sh?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#crosspost-to-devtohahsnodemedium-from-the-command-line"&gt;
  &lt;/a&gt;
  Crosspost to dev.to/hahsnode/medium from the command line.
&lt;/h3&gt;

&lt;p&gt;Crossposter.sh is a shellscript(BASH) to automate crossposting to platforms like dev.to, medium.com and hashnode.com. The script takes in markdown version of your post with a few inputs from you and posts it to those platforms. You would require a token/key for each of those platforms to post it from the command line. You can check out the official repository of &lt;a href="https://github.com/Mr-Destructive/crossposter"&gt;Crossposter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The actual script is still not perfect (has a few bugs). Though it posts on &lt;code&gt;dev.to&lt;/code&gt; and &lt;code&gt;medium.com&lt;/code&gt; easily, the &lt;code&gt;hashnode.com&lt;/code&gt; is buggy as it parses the raw markdown into the post and doesn't render as desired. So, &lt;strong&gt;its a under-development script&lt;/strong&gt;, fell free to raise any issues or PRs on the official GitHub repo.   &lt;/p&gt;

&lt;p&gt;Run the script on a bash interpreter with the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bash crosspost.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For posting the article you need to provide the following details:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontmatter"&gt;
  &lt;/a&gt;
  Front-Matter
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#meta-data-about-the-post"&gt;
  &lt;/a&gt;
  Meta data about the post
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Title of Post&lt;/li&gt;
&lt;li&gt;Subtitle of Post&lt;/li&gt;
&lt;li&gt;Publish status of post(&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Tags for the post (comma separated values)&lt;/li&gt;
&lt;li&gt;Canonical Url (original url of the post)&lt;/li&gt;
&lt;li&gt;Cover Image (URL of the post's image/thumbnail)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This information is a must for &lt;code&gt;dev.to&lt;/code&gt; especially the &lt;code&gt;title&lt;/code&gt;. This should be provide in the same order as given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
--------
title: The title of the post
subtitle: The description of your article
published: true
tags: programming, anythingelse
canonical url: url of your original blog
cover_image: coverimage_url
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no need to enclose any of them with quotation marks. &lt;code&gt;Published&lt;/code&gt; argument will be &lt;code&gt;true&lt;/code&gt; if you want to publish it and &lt;code&gt;false&lt;/code&gt; if you want to keep it in your Drafts.&lt;/p&gt;

&lt;p&gt;In the demonstrations, we just need to enter the tokens once. The tokens will be stored locally in the &lt;code&gt;keys.txt&lt;/code&gt; file and retrieved later within the script.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#posting-on-devto"&gt;
  &lt;/a&gt;
  Posting on &lt;strong&gt;dev.to&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Posting on dev.to requires their &lt;code&gt;API key&lt;/code&gt; which can be generated by going on the &lt;a href="https://dev.to/settings/account/"&gt;Dev Community API Keys&lt;/a&gt;. From there you can generate a new key with any name you like. You just need to enter the key to CLI once or manually enter in the &lt;code&gt;keys.txt&lt;/code&gt; file with the format &lt;code&gt;dev.to:key&lt;/code&gt; on the first line. This will be used for the future cross-posting whenever you execute the shell script(&lt;code&gt;bash crosspost.sh&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;You can provide the &lt;a href="#front-matter"&gt;front matter&lt;/a&gt; manually in your markdown file or you will be prompted for the input. So, that is all you will require for posting on dev.to from the Command line.  &lt;/p&gt;

&lt;p&gt;Lets see the script in action &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCR47n8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/devto.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCR47n8C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/devto.gif" alt="dev.to" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to add in more stuff to the post, you can check out the &lt;a href="https://developers.forem.com/api#operation/createArticle"&gt;DEV.to API docs&lt;/a&gt; which is powered by &lt;a href="https://www.forem.com/"&gt;Forem&lt;/a&gt;, there a ton of options you can hook to the front-matter in the shellscript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: There is a limit of 10 requests per 30 seconds, so keep in mind while testing the script and don't try to spam&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#posting-on-hashnodecom"&gt;
  &lt;/a&gt;
  Posting on &lt;strong&gt;hashnode.com&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;This part is still under development as it only displays the raw markdown in the post, also the &lt;code&gt;tags&lt;/code&gt; are too heavy to implement from the API as &lt;code&gt;id&lt;/code&gt; of every tag is required along with the &lt;code&gt;slug&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Still it serves some purpose at least. For posting on &lt;code&gt;hashnode.com&lt;/code&gt;, we need &lt;code&gt;Personal Access Token&lt;/code&gt;. This can be generated by going to &lt;a href="https://hashnode.com/settings/developer"&gt;Developer Settings&lt;/a&gt;. You will also require the user-id of your &lt;code&gt;hashnode&lt;/code&gt; account. You can get your user-id/username from the &lt;a href="https://hashnode.com/settings"&gt;settings&lt;/a&gt; tab under profile information. We require Username for posting to the Publication Blog if any. As usual, the &lt;code&gt;Personal Access Token&lt;/code&gt; for interacting with the &lt;a href="https://api.hashnode.com/"&gt;Hashnodes' GraphQL API&lt;/a&gt;. The API is quite user friendly and provides everything in one place. There are docs for running each and every &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;mutations&lt;/code&gt; present in the API. &lt;/p&gt;

&lt;p&gt;You can paste the token when prompted from the script or manually type in the &lt;code&gt;keys.txt&lt;/code&gt; text file as &lt;code&gt;hashnode:token&lt;/code&gt; on the 4th line. Yes, that should be on the &lt;code&gt;4th&lt;/code&gt; line, thats make retrieving much more easier and safe. Next also input in the &lt;code&gt;username&lt;/code&gt; when the script asks for the input or again type in on the &lt;code&gt;5th&lt;/code&gt; line, &lt;code&gt;hashnode_id:username&lt;/code&gt; in the text file &lt;code&gt;keys.txt&lt;/code&gt;. Please enter the credentials from the script prompt so as to avoid errors and misconfigurations when doing manually&lt;/p&gt;

&lt;p&gt;This will create the Post on hashnode with the title, subtitle, cover image correctly but will mess up the content. I tried hard but its just not happening. There needs to be some character for newline as the API rejects the &lt;code&gt;rn&lt;/code&gt; characters passed in, so I have substited them with &lt;code&gt;br&lt;/code&gt; and the result is raw markdown. &lt;strong&gt;As the Hashnode API is still under development and they are bringing changes and new features in, the API should improve in its core functionality and make it much easier for creating some common queries&lt;/strong&gt;. So, I'll create issue on GitHub for posting the actual content via the script.&lt;/p&gt;

&lt;p&gt;So, this is the demonstration of posting on hashnode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/hashnode.gif"&gt;hashnode&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#posting-on-mediumcom"&gt;
  &lt;/a&gt;
  Posting on &lt;strong&gt;medium.com&lt;/strong&gt;:
&lt;/h2&gt;

&lt;p&gt;Medium API is much more versatile and markdown friendly, though it has some limitation on the number of posts you can make in a day. For posting on &lt;code&gt;Medium.com&lt;/code&gt;, we will require the &lt;code&gt;Integration Token&lt;/code&gt; which can be generated on the &lt;a href="https://medium.com/me/settings"&gt;settings tab&lt;/a&gt;. As similar to &lt;code&gt;hashnode&lt;/code&gt;, you can name the token whatever you like and then get the token. Paste the token when prompted from the script or manually type in the &lt;code&gt;keys.txt&lt;/code&gt; text file as &lt;code&gt;medium:token&lt;/code&gt; on the &lt;code&gt;2nd&lt;/code&gt; line. We also require the Medium_id, but we can get that from the token itself, so inside the script once the token is obtained, the curl command is executed to fetch in the &lt;code&gt;id&lt;/code&gt; and it is stored on the next(&lt;code&gt;3rd&lt;/code&gt;) line in the &lt;code&gt;keys.txt&lt;/code&gt; file for actually posting on &lt;code&gt;medium.com&lt;/code&gt;. So that is all the configuration you need for posting on &lt;code&gt;medium.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is some documentation on &lt;a href="https://github.com/Medium/medium-api-docs"&gt;Medium API&lt;/a&gt;, we can even post to a Publication, that shall be created in future. Also the cover images can be posted on medium, it is not currently done but that can again be a #TODO. &lt;strong&gt;The tags are not rendered on Medium yet with the script.&lt;/strong&gt; The way we can parse  strings is limited in BASH, so this might still be a doable thing later. Most of the checkboxes are ticked like title, subtitle, cover-image, canonical url, and importantly the content.&lt;/p&gt;

&lt;p&gt;Let's look at post on medium from the script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/medium.gif"&gt;medium&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-platforms"&gt;
  &lt;/a&gt;
  All platforms:
&lt;/h2&gt;

&lt;p&gt;Now, once you have configured every thing, you can opt for the &lt;code&gt;4&lt;/code&gt; choice that is post on all platforms(dev.to, hashnode and medium), but as hashnode is not looking a good option right now, so there is the &lt;code&gt;5&lt;/code&gt; option for only &lt;code&gt;dev.to&lt;/code&gt; and &lt;code&gt;medium&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://gitlab.com/MR_DESTRUCTIVE/tblog-img/-/raw/main/crossposter.gif"&gt;allplatforms&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-crosspostersh"&gt;
  &lt;/a&gt;
  Why use Crossposter.sh?
&lt;/h2&gt;

&lt;p&gt;This can be not so big of an issue for most of the people but it was a good side project to work and learn more about how APIs work and get some ideas on the design of the platform. Though it is quite time saving to cross post on 3 different platforms within a minute or two. You can tailor your own script as per your sppecifications and desire.   &lt;/p&gt;

&lt;p&gt;So, if you are an author on all of the mentioned platforms, please give it a try. Other Platforms are welcome for contributions. If you found any unexpected things, please hit them in the &lt;code&gt;issues&lt;/code&gt; tab. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script"&gt;
  &lt;/a&gt;
  Script
&lt;/h2&gt;

&lt;p&gt;The script mostly leverages &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt; and some other basic utilities in BASH. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-curl-endraw-for-posting-the-article-from-apis"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;curl&lt;/code&gt; for posting the article from APIs
&lt;/h3&gt;

&lt;p&gt;Curl is a life saver command for this project, without this tool, the project might not be as great and efficient. Let's see some quick commands used in the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -H 'Content-Type: application/json' -H 'api-key': $key -d '{'content':$body}' '$url'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the above command is quite basic, some more additions are also added as per the specifications of the Platform. But, let us understand the structure of the command we are sending to the APIs. The first part is the Header (&lt;code&gt;-H&lt;/code&gt;), in here we specify the content that is going to get parsed and the api-keys to access the API. Next, we have the body or the data (&lt;code&gt;-d&lt;/code&gt;), here we parse in the actual contents, it might be the front matter along with the markdown content. Finally we have the &lt;code&gt;url&lt;/code&gt; where we send the &lt;code&gt;POST&lt;/code&gt; request i.e. the &lt;code&gt;API endpoint&lt;/code&gt;. The is the escape character that is used to preserve the literal value of the next character and in short we can shorten the command to fit in the next line.&lt;/p&gt;

&lt;p&gt;The wired &lt;code&gt;$body&lt;/code&gt; is used to parse the value of the variable &lt;code&gt;body&lt;/code&gt; inside of single quotes as in BASH, we can only access the variables' value in double quotes. We are using single quotes as we have to pass the &lt;code&gt;json&lt;/code&gt; object and which has already double quotes in it.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-sed-endraw-for-editing-text"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;sed&lt;/code&gt; for editing text
&lt;/h3&gt;

&lt;p&gt;Sed is a super-powerful stream editor, its somewhat similar to Vim without an interface, only commands. We use this tool to manipulate the front-matter for posting on the platforms by parsing them to variables in BASH. We also use to enter the api keys inputted by user from variables into the file at a specific position to retrieve later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -i '1a title: $title' file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are appending(&lt;code&gt;a&lt;/code&gt;) to the 1st line, text &lt;code&gt;title: $title&lt;/code&gt;, here &lt;code&gt;$title&lt;/code&gt; is the variable, so we are technically parsing the value of the variable &lt;code&gt;title&lt;/code&gt;. We are editing the file &lt;code&gt;file.txt&lt;/code&gt; in-place &lt;code&gt;-i&lt;/code&gt; i.e. we are editing it live without creating any temp or backup files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sed -n -e 's/dev.to://p' keys.txt'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are essentially getting the text after a particular pattern. In this case we are searching in &lt;code&gt;keys.txt&lt;/code&gt; file for the string &lt;code&gt;dev.to:&lt;/code&gt; and anything after that till the end of line is returned, we can further store it in the variable and do all sorts of operation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-awk-endraw-for-programmatic-editing"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;awk&lt;/code&gt; for programmatic editing
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;awk '{print $0'\r\n'}' temp.txt &amp;gt;file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AWK is a command-line utility for manipulating or writing certain operations/patterns programmatically. We use this tool so as to add &lt;code&gt;4r4n&lt;/code&gt; to the end of each line, the APIs can't parse the file contents directly so we have to add certain characters before the end of line and do further operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat temp.md | tr -d '\r\n' &amp;gt; temp.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have added the &lt;code&gt;\r\n&lt;/code&gt; characters to the end of the file, we simply can use &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;tr&lt;/code&gt; to merge all the lines into a single line. This is how we parse the contents to the API more safely and concisely, of course we need to parse them in a variable by reading the file.       &lt;/p&gt;

&lt;p&gt;OK, I won't bore anyone with more BASH but that were some of the quite important commands in the script that form the backbone of the cross-posting and handling text with the APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, we can see &lt;code&gt;crosspost.sh&lt;/code&gt; is a BASH script that cross-posts markdown articles with a bit of inputs to 3 different platforms within a couple of minutes. This article was basically to demonstrate the project and its capabilities also highlighting the issues present. I hope you liked the project, please do try it and comment the feedback please. Thank you for reading, Until next time, Happy Coding :) &lt;/p&gt;

</description>
      <category>bash</category>
      <category>api</category>
      <category>shellscript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a Responsive Navbar using React and Tailwind</title>
      <author>Francisco Mendes</author>
      <pubDate>Sun, 31 Oct 2021 10:22:10 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/create-a-responsive-navbar-using-react-and-tailwind-3768</link>
      <guid>https://dev.to/franciscomendes10866/create-a-responsive-navbar-using-react-and-tailwind-3768</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Even though we are at the end of 2021 and taking all that care to ensure that the app is responsive from mobile to desktop. The applications still have a web slant.&lt;/p&gt;

&lt;p&gt;What I mean by this is that even knowing what types of components or what kind of behavior we should adopt to have a better adoption of our applications on the mobile platform, we continue to do the same.&lt;/p&gt;

&lt;p&gt;Giving the example of a top navbar, as soon as we reach the resolution of the mobile we will have the famous hamburger menu, then in order to interact with each of the navigation elements we will have a dropdown or a full screen menu. When in fact in most cases just one tabbar was enough.&lt;/p&gt;

&lt;p&gt;One of the sources I recommend reading is the &lt;a href="https://material.io/components/bottom-navigation#usage"&gt;Material Design&lt;/a&gt; documentation, in my opinion it's the best place to get knowledge through examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-example"&gt;
  &lt;/a&gt;
  Today's example
&lt;/h2&gt;

&lt;p&gt;The one I had for today's article is the creation of two navigation components, one of which will be a navigation bar at the top of the page as soon as we have resolutions higher than the tablet. But if the resolution is lower than Desktop we will have a Tabbar.&lt;/p&gt;

&lt;p&gt;So that we have an idea of what I'm saying, at the end of this article I hope you get this final result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LA6ElMin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1635674140/Kapture_2021-10-31_at_09.50.08-min_libm7c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LA6ElMin--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1635674140/Kapture_2021-10-31_at_09.50.08-min_libm7c.gif" alt="final result" width="880" height="579"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may have noticed, in both components we ensure the navigation of the page where the user is, by adding a border to the element plus a very subtle gradient at the bottom of the element.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;The framework we are going to use today is Tailwind CSS and along with this framework we are going to use other tools such as classnames and react-icons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;classnames react-icons
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we will create a file with the name of the navigation elements that we are going to have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/data/navigation.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that let's create our hook (just to abstract the logic from the selected navigation elements). Where the home page will be "Home" and then we will have a role responsible for changing the current route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/hooks/useNavigation.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useNavigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRoute&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectAction&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useNavigation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start working on our components. Let's start by working on our navbar. These are the styles of our Navbar component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* @src/components/Navbar/Navbar.module.css */&lt;/span&gt;

&lt;span class="nc"&gt;.navbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;hidden&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="n"&gt;flex-row&lt;/span&gt; &lt;span class="n"&gt;items-center&lt;/span&gt; &lt;span class="n"&gt;justify-between&lt;/span&gt; &lt;span class="n"&gt;px-8&lt;/span&gt; &lt;span class="n"&gt;h-18&lt;/span&gt; &lt;span class="n"&gt;rounded-b-3xl&lt;/span&gt; &lt;span class="n"&gt;bg-white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-5xl&lt;/span&gt; &lt;span class="err"&gt;text-gray-800&lt;/span&gt; &lt;span class="err"&gt;-mb-1;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.navItems&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;flex-row&lt;/span&gt; &lt;span class="err"&gt;self-end&lt;/span&gt; &lt;span class="err"&gt;h-12;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.navItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;w-22&lt;/span&gt; &lt;span class="err"&gt;text-gray-400&lt;/span&gt; &lt;span class="py"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;text-gray-700&lt;/span&gt; &lt;span class="n"&gt;cursor-pointer&lt;/span&gt; &lt;span class="n"&gt;font-medium&lt;/span&gt; &lt;span class="n"&gt;tracking-wide&lt;/span&gt; &lt;span class="n"&gt;text-sm&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="n"&gt;items-start&lt;/span&gt; &lt;span class="n"&gt;justify-center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.selectedNavItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-gray-700&lt;/span&gt; &lt;span class="err"&gt;border-b-3&lt;/span&gt; &lt;span class="err"&gt;border-gray-700&lt;/span&gt; &lt;span class="err"&gt;bg-gradient-to-b&lt;/span&gt; &lt;span class="err"&gt;from-white&lt;/span&gt; &lt;span class="err"&gt;to-gray-100;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.actions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-white&lt;/span&gt; &lt;span class="py"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;bg-gray-50&lt;/span&gt; &lt;span class="n"&gt;border-2&lt;/span&gt; &lt;span class="n"&gt;border-gray-900&lt;/span&gt; &lt;span class="n"&gt;text-sm&lt;/span&gt; &lt;span class="n"&gt;text-gray-900&lt;/span&gt; &lt;span class="n"&gt;py-3&lt;/span&gt; &lt;span class="n"&gt;px-5&lt;/span&gt; &lt;span class="n"&gt;rounded-lg&lt;/span&gt; &lt;span class="n"&gt;font-medium&lt;/span&gt; &lt;span class="n"&gt;tracking-wide&lt;/span&gt; &lt;span class="n"&gt;leading-none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our component will receive three props, the navigation elements, the current route and the function to define the current route. Then we will map the array elements to have each of the navigation elements present in our navbar as well as apply some conditional rendering using classNames so that we can join the classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/Navbar/index.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CgMonday&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/cg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Navbar.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CgMonday&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navItems&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
              &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;navItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="nx"&gt;currentRoute&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedNavItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;])}&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Logout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with the Navbar finished we can start working on our Tabbar. The styles are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* @src/components/Tabbar/Tabbar.module.css */&lt;/span&gt;

&lt;span class="nc"&gt;.tabbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;hidden&lt;/span&gt; &lt;span class="n"&gt;flex-row&lt;/span&gt; &lt;span class="n"&gt;items-center&lt;/span&gt; &lt;span class="n"&gt;justify-around&lt;/span&gt; &lt;span class="n"&gt;px-8&lt;/span&gt; &lt;span class="n"&gt;h-18&lt;/span&gt; &lt;span class="n"&gt;bg-white&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;invisible&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt; &lt;span class="n"&gt;bottom-0&lt;/span&gt; &lt;span class="n"&gt;w-full&lt;/span&gt; &lt;span class="n"&gt;rounded-t-3xl&lt;/span&gt; &lt;span class="n"&gt;text-2xl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tabItem&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;text-gray-400&lt;/span&gt; &lt;span class="py"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;text-gray-700&lt;/span&gt; &lt;span class="n"&gt;cursor-pointer&lt;/span&gt; &lt;span class="n"&gt;w-18&lt;/span&gt; &lt;span class="n"&gt;h-full&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="n"&gt;items-center&lt;/span&gt; &lt;span class="n"&gt;justify-center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tabItemActive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-gradient-to-t&lt;/span&gt; &lt;span class="err"&gt;from-white&lt;/span&gt; &lt;span class="err"&gt;to-gray-100&lt;/span&gt; &lt;span class="err"&gt;border-t-3&lt;/span&gt; &lt;span class="err"&gt;border-gray-700&lt;/span&gt; &lt;span class="err"&gt;text-gray-700;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;-mb-1;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component will receive exactly the same props as the Navbar but this time we have to make a pretty simple conditional rendering. In the mapping of array elements we have to render the icon indicated to the route so we will create a function with a switch that will be responsible for returning the icon according to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/components/Tabbar/index.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classNames&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AiFillHome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AiFillCompass&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/ai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BsFillBagFill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BsFillPersonFill&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/bs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CgInbox&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/cg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Tabbar.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Tabbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTabIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AiFillHome&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AiFillCompass&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BsFillBagFill&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CgInbox&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BsFillPersonFill&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabbar&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classNames&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;currentRoute&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabItemActive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;])}&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getTabIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Tabbar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least we have to go to our input file (which in this case is App.jsx) and we will have the following styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* @src/App.module.css */&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;bg-gray-200&lt;/span&gt; &lt;span class="err"&gt;h-screen;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.devLogo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;flex&lt;/span&gt; &lt;span class="err"&gt;items-center&lt;/span&gt; &lt;span class="err"&gt;justify-center&lt;/span&gt; &lt;span class="err"&gt;text-5xl&lt;/span&gt; &lt;span class="err"&gt;text-gray-300&lt;/span&gt; &lt;span class="err"&gt;h-5/6;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our App.jsx we will import our navigation data, our hook and each of the components that we create later, we will pass the indicated props to each one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @src/App.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VFC&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FaDev&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/fa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useNavigation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./hooks/useNavigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;navigationData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data/navigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Navbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Tabbar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Tabbar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VFC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useNavigation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt;
        &lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tabbar&lt;/span&gt;
        &lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navigationData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setCurrentRoute&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;devLogo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FaDev&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As always, I hope you found it interesting. If you noticed any errors in this article, please mention them in the comments. 🧑🏻‍💻&lt;/p&gt;

&lt;p&gt;Hope you have a great day! 👋&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Este Lorien Eskişehir | İpek Kirpik ve Merak Edilenler</title>
      <author>Este Lorien Güzellik | Lazer Epilasyon | Eskişehir</author>
      <pubDate>Sun, 31 Oct 2021 10:03:02 +0000</pubDate>
      <link>https://dev.to/este_lazer/este-lorien-eskisehir-ipek-kirpik-ve-merak-edilenler-fnm</link>
      <guid>https://dev.to/este_lazer/este-lorien-eskisehir-ipek-kirpik-ve-merak-edilenler-fnm</guid>
      <description>&lt;p&gt;Este Lorien Güzellik Stüdyosu olarak uzun yıllardır elde ettiğimiz deneyim neticesinde şunu gördük ki; daha önce hiç ipek kirpik yaptırmamış, ancak şu anda yaptırmayı düşünen pek çok kadın bu alanda tavsiyelere ihtiyaç duymaktadır.&lt;/p&gt;

&lt;p&gt;Dolayısıyla güzellik sektöründe uzun yıllardır hizmet veren bir salon olarak Eskişehir ipek kirpik uygulamaları hakkında bu tavsiye yazısını kaleme almaya karar verdik.&lt;/p&gt;

&lt;p&gt;Sonuçta misyonumuz gereği sadece güzellik ve kişisel bakım hizmetleri vermenin ötesine işlem öncesi ve sonrasında tam zamanlı olarak uzman desteği vermek noktasında hareket eden bir güzellik salonuyuz. Devam eden bölümlerde Eskişehir ipek kirpik işlemlerine ilişkin sıkça sorulan soruları cevaplamaya çalıştık. Tüm danışanlarımıza şimdiden keyifli okumalar dileriz.&lt;/p&gt;

&lt;p&gt;İpek Kirpik Hakkında Sıkça Sorulan Sorular&lt;br&gt;
Bu bölümde ipek kirpik ile ilgili sıklıkla sorulan ve merak edilen konuları sizler için ele aldık.&lt;/p&gt;

&lt;p&gt;Nedir Bu İpek Kirpik?&lt;/p&gt;

&lt;p&gt;İpek kirpik işlemi, yapay kirpiklerin kendi kirpiklerinize eklenmesi ile dilediğiniz kirpik şekline kavuşmanızı sağlayan bir güzellik işlemidir.&lt;/p&gt;

&lt;p&gt;İpek Kirpik Ne Kadar Kalıcıdır?&lt;/p&gt;

&lt;p&gt;İpek kirpik işleminin kalıcılığı kişiye gör değişiklik gösterebilir dersek sanıyoruz yanlış bir ifade kullanmış olmayız. Çünkü kişinin kirpiklerinin mevcut durumu (zayıf, kısa, hacimli, yıpranmış vb.), kullanılan ürünlerin kalitesi, işlemi yapan kişinin tecrübesi, işlem yapılan kişinin kirpiklerine işlem sonrasında gerekli bakımı ne şekilde yaptığı gibi konular ipek kirpik işleminin kalıcılık süresine etki etmektedir. Ancak uygun kirpik yapısı ve doğru ürünlerde doğru teknikler kullanıldığında ortalama olarak 4 haftalık bir kalıcılık süresi elde edilebilmektedir.&lt;/p&gt;

&lt;p&gt;İşlem Kirpiklere Zarar Verir Mi?&lt;/p&gt;

&lt;p&gt;Bu işlemin normal şartlar altında kirpiklere herhangi bir zararı yoktur. Ancak burada dikkat edilmesi gereken bazı önemli konular vardır. Uygulayan güzellik uzmanının gerekli tecrübe ve bilgiye sahip olması, yüksek kaliteli ve sağlıklı içeriğe sahip ürünlerin kullanılması ve kişinin işlem sonrasında kendisine söylenen kurallar çerçevesinde kirpiklere bakım yapması şartı ile kirpikler zarar görmeyecektir.&lt;/p&gt;

&lt;p&gt;İpek Kirpik İşlemini Evde Kendi Kendime Yapabilir Miyim?&lt;/p&gt;

&lt;p&gt;Gerekli eğitimi almadan ve ihtiyaç duyulan deneyimi kazanmadan kendi kendinize doğru ve sağlıklı bir ipek kirpik işlemi yapmanız olanaksızdır. Bu noktada önerimiz profesyonel hizmet veren yerlerden destek alınması yönündedir.&lt;/p&gt;

&lt;p&gt;İpek Kirpik Hizmeti Fiyatları Nedir?&lt;/p&gt;

&lt;p&gt;Eskişehir ipek kirpik hizmetleri özelinde ifade etmek gerekirse fiyatların 100 TL gibi bir seviyeden başladığı ve 500-600 TL civarında fiyatlara kadar yükseldiği söylenebilir.&lt;/p&gt;

&lt;p&gt;Fiyatlar Neden Bu Kadar Değişkenlik Gösteriyor?&lt;/p&gt;

&lt;p&gt;Genel olarak sunulan hizmet kalitesi, hijyen düzeyi ve işlem esnasında kullanılan ürün kalitesi gibi konular Eskişehir ipek kirpik fiyat düzeyini değişken kılmaktadır.&lt;/p&gt;

&lt;p&gt;Eskişehir İpek Kirpik Hizmetleri | Este Lorien&lt;/p&gt;

&lt;p&gt;Makalemizde Eskişehir ipek kirpik hizmeti, fiyatları ve bu işlemi yapan yerler hakkında bilgiler vermeye çalıştık. Eskişehir en iyi ipek kirpik hizmeti verme noktasında gerekli tüm çabayı sarf eden Este Lorien Güzellik Stüdyosu web sitesini inceleyerek detaylı bilgi sahibi olabilirsiniz.&lt;/p&gt;

&lt;p&gt;Este Lorien | Eskişehir ipek kirpik &lt;a href="https://www.estelorien.com.tr/ipek-kirpik-uygulamasi/"&gt;https://www.estelorien.com.tr/ipek-kirpik-uygulamasi/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A short note on database design process </title>
      <author>Ditikrushna Giri</author>
      <pubDate>Sun, 31 Oct 2021 09:54:37 +0000</pubDate>
      <link>https://dev.to/ditikrushna/short-note-on-database-design-process-1bh1</link>
      <guid>https://dev.to/ditikrushna/short-note-on-database-design-process-1bh1</guid>
      <description>&lt;p&gt;Step - 1&lt;br&gt;
&lt;strong&gt;Requirements Gathering&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Understanding what you want to do, and what you have is essential before you can dive into designing a database. &lt;/p&gt;

&lt;p&gt;Step - 2 &lt;br&gt;
&lt;strong&gt;Conceptual Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We specify the entities, columns, and their relationship. We may use an entity relationship (ER) diagram to visualize the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The output is:&lt;/strong&gt; A conceptual schema (described using a conceptual data model like ER model). &lt;/p&gt;

&lt;p&gt;Step - 3 &lt;br&gt;
&lt;strong&gt;Logical Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s concerned about data model mapping; mapping a conceptual schema (like ER model) into logical schema to provide a much detail description. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The output is:&lt;/strong&gt; A logical schema (described using a logical data model specific to the DBMS like relational model).&lt;/p&gt;

&lt;p&gt;Step - 4 &lt;br&gt;
&lt;strong&gt;Physical Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It describes the details of how data is stored. You start by defining (already modeled) tables, how the data is stored, define relationships, … in DBMS.&lt;br&gt;
This requires dealing with the DBMS, and could involve SQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The output is:&lt;/strong&gt; An internal (physical) schema (described using a physical data model).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>LeetCode - Subsets</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Sun, 31 Oct 2021 09:37:09 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-subsets-86m</link>
      <guid>https://dev.to/_alkesh26/leetcode-subsets-86m</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given an integer array &lt;em&gt;nums&lt;/em&gt; of &lt;strong&gt;unique&lt;/strong&gt; elements, return &lt;em&gt;all possible subsets (the power set)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The solution set &lt;strong&gt;must not&lt;/strong&gt; contain duplicate subsets. Return the solution in &lt;strong&gt;any order&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/subsets"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/subsets"&gt;https://leetcode.com/problems/subsets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 2, 3]
Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [0]
Output: [[], [0]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- 1 &amp;lt;= nums.length &amp;lt;= 10
- -10 &amp;lt;= nums[i] &amp;lt;= 10
- All the numbers of nums are unique.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#backtracking"&gt;
  &lt;/a&gt;
  Backtracking
&lt;/h4&gt;

&lt;p&gt;The general strategy in backtracking is either to include the current element or exclude it. We follow similar approach here. When running the recursive call we either include the current element or we exclude it.&lt;/p&gt;

&lt;p&gt;Let's check the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main function
- initialize subset vector: vector&amp;lt;int&amp;gt; subset
- initialize result vector: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result

- call subsetsUtil(nums, result, subset, 0)

- return result

// subsetsUtil function
- res.push_back(subset)

- loop for i = index; i &amp;lt; nums.size(); i++
  - subset.push_back(nums[i])

  - subsetsUtil(nums, result, subset, i + 1)

  - subset.pop_back()

- return
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;subsetsUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="n"&gt;subsetsUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop_back&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subsets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;subsetsUtil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;subsets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;subsetsUtils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;subsetsUtils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;subsetsUtils&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;subsets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findSubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="nx"&gt;findSubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="nx"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;findSubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: nums = [1, 2, 3]

Step 1: vector&amp;lt;int&amp;gt; subset
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result

Step 2: subsetsUtil(nums, res, subset, 0)

// in subsetsUtils function
Step 3: result.push_back(subset)
        result.push_back([])

        result = [[]]

        loop for i = index, i &amp;lt; nums.size()
        i = 0
        0 &amp;lt; 3
        true

        subset.push_back(nums[i])
        subset.push_back(nums[0])
        subset.push_back(1)

        subset = [1]

        subsetsUtil(nums, res, subset, i + 1)
        subsetsUtil([1, 2, 3], [[]], [1], 0 + 1)
        subsetsUtil([1, 2, 3], [[]], [1], 1)

Step 4: result.push_back(subset)
        result.push_back([1])

        result = [[], [1]]

        loop for i = index, i &amp;lt; nums.size()
        i = 1
        1 &amp;lt; 3
        true

        subset.push_back(nums[i])
        subset.push_back(nums[1])
        subset.push_back(2)

        subset = [1, 2]

        subsetsUtil(nums, res, subset, i + 1)
        subsetsUtil([1, 2, 3], [[], [1]], [1, 2], 1 + 1)
        subsetsUtil([1, 2, 3], [[], [1]], [1, 2], 2)

Step 5: result.push_back(subset)
        result.push_back([1, 2])

        result = [[], [1], [1, 2]]

        loop for i = index, i &amp;lt; nums.size()
        i = 2
        2 &amp;lt; 3
        true

        subset.push_back(nums[i])
        subset.push_back(nums[2])
        subset.push_back(3)

        subset = [1, 2, 3]

        subsetsUtil(nums, res, subset, i + 1)
        subsetsUtil([1, 2, 3], [[], [1], [1, 2]], [1, 2, 3], 2 + 1)
        subsetsUtil([1, 2, 3], [[], [1], [1, 2]], [1, 2, 3], 3)

Step 6: result.push_back(subset)
        result.push_back([1, 2, 3])

        result = [[], [1], [1, 2], [1, 2, 3]]

        loop for i = index, i &amp;lt; nums.size()
        i = 3
        3 &amp;lt; 3
        false

Step 7: Here we backtrack to last line of Step 5 where
        i = 2
        subset = [1, 2, 3]

        We execute the next line
        subset.pop()

        subset = [1, 2]

Step 8: We backtrack to last line of Step 4 where
        i = 1
        subset = [1, 2]

        We execute the next line
        subset.pop()

        subset = [1]

Step 9: For loop continues where we execute
        loop for i = index, i &amp;lt; nums.size()
        i = 2
        i &amp;lt; nums.size()
        2 &amp;lt; 3
        true

        subset.push_back(nums[i])
        subset.push_back(nums[2])
        subset.push_back(3)

        subset = [1, 3]

        subsetsUtil(nums, res, subset, i + 1)
        subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3]], [1, 3], 2 + 1)
        subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3]], [1, 3], 3)

Step 10: result.push_back(subset)
         result.push_back([1, 3])

         result = [[], [1], [1, 2], [1, 2, 3], [1, 3]]

         loop for i = index, i &amp;lt; nums.size()
         i = 3
         3 &amp;lt; 3
         false

Step 11: Here we backtrack to last line of Step 3 where
         i = 0
         subset = [1]

         We execute the next line
         subset.pop()

         subset = []

Step 12: For loop continues where we execute
         loop for i = index, i &amp;lt; nums.size()
         i = 1
         i &amp;lt; nums.size()
         1 &amp;lt; 3
         true

         subset.push_back(nums[i])
         subset.push_back(nums[1])
         subset.push_back(2)

         subset = [2]

         subsetsUtil(nums, res, subset, i + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3]], [2], 1 + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3]], [2], 2)

Step 13: result.push_back(subset)
         result.push_back([2])

         result = [[], [1], [1, 2], [1, 2, 3], [1, 3], [2]]

         loop for i = index, i &amp;lt; nums.size()
         i = 2
         2 &amp;lt; 3
         true

         subset.push_back(nums[i])
         subset.push_back(nums[2])
         subset.push_back(3)

         subset = [2, 3]

         subsetsUtil(nums, res, subset, i + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3], [2]], [2, 3], 2 + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3], [2]], [2, 3], 3)

Step 14: result.push_back(subset)
         result.push_back([2, 3])

         result = [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3]]

         loop for i = index, i &amp;lt; nums.size()
         i = 3
         3 &amp;lt; 3
         false

Step 15: Here we backtrack to last line of Step 13 where
         i = 2
         subset = [2, 3]

         We execute the next line
         subset.pop()

         subset = [2]

Step 16: Here we backtrack to last line of Step 12 where
         i = 1
         subset = [2]

         We execute the next line
         subset.pop()

         subset = []

Step 17: For loop continues where we execute
         loop for i = index, i &amp;lt; nums.size()
         i = 2
         i &amp;lt; nums.size()
         2 &amp;lt; 3
         true

         subset.push_back(nums[i])
         subset.push_back(nums[2])
         subset.push_back(3)

         subset = [3]

         subsetsUtil(nums, res, subset, i + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3]], [3], 2 + 1)
         subsetsUtil([1, 2, 3], [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3]], [3], 3)

Step 18: result.push_back(subset)
         result.push_back([3])

         result = [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]

         loop for i = index, i &amp;lt; nums.size()
         i = 3
         3 &amp;lt; 3
         false

Step 19: We have no more stack entries left. We return to main function.

Step 20: return result

So the result we return is [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]].
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Mine Decentraland MANA on Your Laptop in 2021</title>
      <author>Course Probe</author>
      <pubDate>Sun, 31 Oct 2021 09:25:51 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-decentraland-mana-on-your-laptop-in-2021-2gmk</link>
      <guid>https://dev.to/courseprobe/how-to-mine-decentraland-mana-on-your-laptop-in-2021-2gmk</guid>
      <description>&lt;p&gt;&lt;strong&gt;Breaking News:&lt;/strong&gt; Decentraland users can now mine MANA on their Laptops and Desktops.&lt;/p&gt;

&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and MANA in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining Decentraland MANA with any laptop in under 5 minutes using this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining MANA with your CPU and GPU today!!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Decentraland is a decentralised 3D virtual reality platform which uses the Ethereum blockchain. It was opened to the public in February 2020, and is overseen by the nonprofit Decentraland Foundation.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Now let's get you started !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;I recommend getting a wallent with ERC20 support for Mana, good candidates might included Trust wallet, Atomic Wallet or Exodus.&lt;/p&gt;

&lt;p&gt;From the wallet get your Public Receive address, this is the address the pool needs in order to transfer your coins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download the Unmineable Miner Software&lt;/p&gt;

&lt;p&gt;Before downloading the file, set some folder exclusions on Windows Defender, in your antivirus and also in your browser so you can download the file without being bothered with notifications of dangerous files.&lt;/p&gt;

&lt;p&gt;Official Unmineable software can be downloaded from this site: &lt;a href="https://www.unmineable.com/miner"&gt;Unmineable Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the MFI version (Miners files included).&lt;/p&gt;

&lt;p&gt;The unmineable software is just one executable file, it already contains all the configurations so it is the best and easiest way to mine MANA.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file as an Administrator in windows.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It looks exactly like this when you run it: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" alt="Unmineable Start Screen" width="407" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can select GPU cards or CPU.&lt;/p&gt;

&lt;p&gt;It will take you to the second screen where you will enter your Decentraland MANA Address and also &lt;strong&gt;the code which will allow you to drop your Dev Fee from 1% to 0.75%&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Use the code: &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; to drop your Dev Fee from 1% to 0.75% (it makes a difference).&lt;/p&gt;

&lt;p&gt;Your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uOTjdzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usjwit36krcytnul7w9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uOTjdzL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usjwit36krcytnul7w9s.png" alt="Unmineable Mana" width="414" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on the Start button, you should see a similar screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" alt="Unmineable Mining Screen" width="409" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point I would recommend you to click the option at the bottom to display the logs (Looks like a sheet of paper), here click Force Stop. &lt;/p&gt;

&lt;p&gt;Then click the Settings Icon (Looks like a cog wheel), in the screen that pops up you want to double check a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the algorithm selected is ETCHASH if you are mining with 4GB cards, use ETHASH for cards with 6GB or more, if you selected CPU everything is ready to start mining no need to select anything.&lt;/li&gt;
&lt;li&gt;Make sure the Code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; is showing in the referral box (Recommended, not mandatory).&lt;/li&gt;
&lt;li&gt;Set a name for your worker (The computer you are mining from).&lt;/li&gt;
&lt;li&gt;Set your mining Intensity at the top, I would recommend High for those periods when you are not using the computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It looks similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" alt="Unmineable Settings" width="409" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the Save &amp;amp; Restart button to start mining !!&lt;/p&gt;

&lt;p&gt;Once it starts you can check the speed of your Graphic card which shows as the Current Hashrate.&lt;/p&gt;

&lt;p&gt;Also you can click on the stats button on the top right to go directly to the Unmineable website where you can check your balance and request a manual payment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; it is recommended you change a few settings in Windows, there's people that disable the Updates and also disable sleeping mode, hibernation or anything that could turn off the computer while it is not in use.&lt;/p&gt;

&lt;p&gt;When using a Laptop, make sure it has some battery or is plugged so it won't shut down.&lt;/p&gt;

&lt;p&gt;Congrats, if you are using Unmineable you are now a miner !!&lt;/p&gt;




&lt;p&gt;If you want a bit more of control over the mining software and configurations then you can download the miners and manually set them up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you mining with CPU then you could follow below:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the xmrig site to download the latest version (MSVC) or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.cmd" or "start.cmd" or "start.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if the file doesn't exists you would have to create it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u MANA:0xe7bfdcafc4d7135364bd173503070537cc592a61.wrkID#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the MANA: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you mining with GPU:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would recommend you to get: Teamredminer (AMD cards), Phoenixminer (AMD/NVIDIA) or Trex (Nvidia).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download these miner from the oficial sites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Phoenix miner: &lt;a href="https://bitcointalk.org/index.php?topic=2647654.0"&gt;Bitcoin Talk forum&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Teamred miner: &lt;a href="https://github.com/todxx/teamredminer/releases"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trex: &lt;a href="https://github.com/trexminer/T-Rex/releases"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then set them up with a smilar Start.bat file as mentioned in the CPU section above. &lt;/p&gt;

&lt;p&gt;Pay attention to some changes you would need to implement: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if you are mining with 4gb cards you need to set the algo on the miner to ETCHASH and the coin to ETC. (check for miner CLI parameters)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you are mining with 6gb cards or more then you need to set the algo on the miner to ETHAS and the coin to ETH. (check for miner CLI parameters)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to also set the pool url accordingly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ETCHASH: etchash.unmineable.com:3333&lt;/li&gt;
&lt;li&gt;ETHASH:  ethash.unmineable.com:3333&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once done, run the file as administrator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you can Log into Unmineable to check your stats:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX or GPUS using Etchash or Ethash and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the Miner starter file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example MANA and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, Decentraland Mana.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX or ETCHAS or ETHASH depending on your algo, and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU and GPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU and GPUs. &lt;/p&gt;

&lt;p&gt;For GPUS download MSI Afterburner and set the appropriate Overclocking profile so you can get higher hashrates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;If you are having any difficulties, please join me on discord so I can help you further&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/sPbV8kcK"&gt;https://discord.gg/sPbV8kcK&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you are looking for more information into CPU mining, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU" width="320" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/how-to-start-mining-crypto-with-cpu/"&gt;Mining Crypto with CPU&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Referral Disclosure:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Please read the Unmineable Referral Policy at the following link to better understand How the referral code works in detail &lt;a href="https://www.unmineable.com/referrals"&gt;Unmineable Referrals&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>crypto</category>
      <category>cryptomining</category>
    </item>
  </channel>
</rss>
