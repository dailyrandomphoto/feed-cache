<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Debootstrap ile Pardus Chroot Oluşturmak</title>
      <author>Suleyman Poyraz</author>
      <pubDate>Thu, 23 Sep 2021 09:51:01 +0000</pubDate>
      <link>https://dev.to/zaryob/debootstrap-ile-pardus-chroot-olusturmak-581l</link>
      <guid>https://dev.to/zaryob/debootstrap-ile-pardus-chroot-olusturmak-581l</guid>
      <description>&lt;p&gt;&lt;strong&gt;debootstrap&lt;/strong&gt;, bir Debian temel sistemini girilen paket deposunu kullanarak önceden kurulmuş başka bir sistemin alt dizinine kurarak chroot ortamı oluşturmak için kullanılan bir araçtır. &lt;strong&gt;debootstrap&lt;/strong&gt; sayesinde kurulum CD'si kullanmaya gerek kalmadan, debian chroot'u oluşturmayı sağlar. &lt;br&gt;
&lt;strong&gt;debootstrap&lt;/strong&gt; ile kurulum için stabil bir internet bağlantısı gerekir, çünkü paketler bir Debian deposundan getirilir. Ayrıca bu araç &lt;strong&gt;dpkg&lt;/strong&gt; paket kurucusunu içeren başka bir işletim sisteminden kurulabilir ve çalıştırılabilir, bu nedenle, örneğin, Debian'ı çalışan bir Gentoo sisteminden kullanılmayan bir bölüme kurmak için debootstrap'ı kullanabilirsiniz. "Çapraz debootstrapping" olarak bilinen farklı bir mimariye sahip bir makine için bir rootfs oluşturmak için de kullanılabilir.&lt;/p&gt;

&lt;p&gt;Debootstrap, paketleri için yalnızca bir depo kullanabilir. Bir rootfs oluşturmak için farklı depolardaki paketleri birleştirmeniz gerekiyorsa (apt'nin yaptığı gibi) veya rootfs'yi otomatik olarak özelleştirmeniz gerekiyorsa, Multistrap gibi bir araç kullanmak mantıklıdır.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#her-iki-ad%C4%B1m-i%C3%A7in-gerekli-olan-bir-not"&gt;
  &lt;/a&gt;
  Her iki adım için gerekli olan bir not
&lt;/h2&gt;

&lt;p&gt;Başlamadan önce bir kurulum betiği symlink'i oluşturmamız lazım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ln -s sid /usr/share/debootstrap/scripts/yirmibir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Böylece daha doğru bir kurulum sağlamış olacağız&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pardus-chroot-olu%C5%9Fturmak"&gt;
  &lt;/a&gt;
  Pardus Chroot Oluşturmak
&lt;/h2&gt;

&lt;p&gt;Bu adımları superkullanıcı olarak işleyeceğiz. İlk olarak bir dizin oluşturalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# mkdir /pardus-chroot/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi chroot ortamı oluşturalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# debootstrap yirmibir /pardus-chroot https://depo.pardus.org.tr/pardus/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#debootstrapt-ile-pardus-kurulumu"&gt;
  &lt;/a&gt;
  Debootstrapt ile Pardus kurulumu
&lt;/h2&gt;

&lt;p&gt;Bu adımları da superkullanıcı olarak işleyeceğiz. Bu adımlarla bir disk üzerine Pardus 21 kurabiliriz. İlk olarak &lt;code&gt;root&lt;/code&gt; diskimizi belirleyelim. Benim için &lt;code&gt;/dev/sda3&lt;/code&gt; olacak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# mkdir /pardus-chroot/&lt;/span&gt;
main &lt;span class="c"&gt;# mount /dev/sda3 /pardus-chroot&lt;/span&gt;
main &lt;span class="c"&gt;# export MY_CHROOT=/pardus-chroot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi Chroot çekelim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# cd / &lt;/span&gt;
main &lt;span class="c"&gt;# mkdir $MY_CHROOT&lt;/span&gt;
main &lt;span class="c"&gt;# debootstrap --arch i386 sid $MY_CHROOT http://deb.debian.org/debian/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi fstab yazalım. Fstab içerisine &lt;code&gt;proc&lt;/code&gt; ve &lt;code&gt;sysfs&lt;/code&gt; yazacağız ve bunları bağlayacağız:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# echo "proc $MY_CHROOT/proc proc defaults 0 0" &amp;gt;&amp;gt; /etc/fstab&lt;/span&gt;
main &lt;span class="c"&gt;# mount proc $MY_CHROOT/proc -t proc&lt;/span&gt;
main &lt;span class="c"&gt;# echo "sysfs $MY_CHROOT/sys sysfs defaults 0 0" &amp;gt;&amp;gt; /etc/fstab&lt;/span&gt;
main &lt;span class="c"&gt;# mount sysfs $MY_CHROOT/sys -t sysfs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;İnternet bağlantısı sağlamak için &lt;code&gt;hosts&lt;/code&gt; dosyasını kopyalayalım. Ayrıca bağlı disk listesi için &lt;code&gt;mtab&lt;/code&gt; dosyasını da kopyalayalım.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# cp /etc/hosts $MY_CHROOT/etc/hosts&lt;/span&gt;
main &lt;span class="c"&gt;# cp /proc/mounts $MY_CHROOT/etc/mtab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi chroot içerisine girelim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;main &lt;span class="c"&gt;# chroot $MY_CHROOT /bin/bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi &lt;code&gt;dselect&lt;/code&gt; ile gerekli olan paketleri kuralım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chroot&lt;/span&gt; &lt;span class="c"&gt;# dselect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şu methodları kullanarak herhangi bir kurulum yapabiliriz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     dselect - list of access methods
       Abbrev.        Description
       cdrom          Install from a CD-ROM.
     * multi_cd       Install from a CD-ROM set.
       nfs            Install from an NFS server (not yet mounted).
       multi_nfs      Install from an NFS server (using the CD-ROM set) (not yet mounted).
       harddisk       Install from a hard disk partition (not yet mounted).
       mounted        Install from a filesystem which is already mounted.
       multi_mount    Install from a mounted partition with changing contents.
       floppy         Install from a pile of floppy disks.
       apt            APT Acquisition [file,http,ftp]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şimdi login için öntanımlı bir tty belirleyelim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chroot&lt;/span&gt; &lt;span class="c"&gt;# mknod tty8 c 4 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ve root için bir şifre belirleyelim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chroot&lt;/span&gt; &lt;span class="c"&gt;# passwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Şifreyi belirttikten sonra &lt;code&gt;chroot&lt;/code&gt;dan çıkalım. Artık hazırız.&lt;/p&gt;

</description>
      <category>debootstrapt</category>
      <category>pardus</category>
      <category>linux</category>
      <category>debian</category>
    </item>
    <item>
      <title>Rate my first CSS drawing</title>
      <author>Temani Afif</author>
      <pubDate>Thu, 23 Sep 2021 09:38:16 +0000</pubDate>
      <link>https://dev.to/afif/rate-my-first-css-drawing-51m5</link>
      <guid>https://dev.to/afif/rate-my-first-css-drawing-51m5</guid>
      <description>&lt;p&gt;I have been hacking with CSS for a long period but I never made any CSS drawing or CSS art. I think it's time for another CSS hacker to join the club!&lt;/p&gt;

&lt;p&gt;I took one of my favorite anime character and I tried to do something in one day to see my level before spending more time.&lt;/p&gt;

&lt;p&gt;I came up with this &lt;/p&gt;

&lt;p&gt;&lt;sup&gt;It will not work on Safari, scroll down to the embed tweet to see a screenshot&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoXXRd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Not that perfect but quite good for a &lt;code&gt;6h&lt;/code&gt; work. I would have done better if I considered an easier illustration but I took a complex one as a reference 😳 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRZfn1nC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/15/3a/be/153abee445a48e98bc10d8a29d6b7a16.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRZfn1nC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/15/3a/be/153abee445a48e98bc10d8a29d6b7a16.jpg" alt="Livai ackerman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's responsive.&lt;/li&gt;
&lt;li&gt;I used a lot of &lt;code&gt;clip-path&lt;/code&gt;. A good technique for responsive but a pain to handle. &lt;/li&gt;
&lt;li&gt;I tried to keep a reduced HTML code&lt;/li&gt;
&lt;li&gt;I used an SVG filter to smooth up a few edges (related post: &lt;a href="https://dev.to/afif/css-shapes-with-rounded-corners-56h"&gt;https://dev.to/afif/css-shapes-with-rounded-corners-56h&lt;/a&gt;). I am not proud of this one but I wanted a fast solution to end my drawing before midnight. Next time it will be a CSS-only solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tweeted about it yesterday in case you want to retweet it or draw the attention of a CSS artist 🧐&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9IzKM4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_7dYPiVcAUo3bu.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmlYTCXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1384162618290540551/jtuQodsv_normal.png" alt="CSS Challenges profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        CSS Challenges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @challengescss
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My first &lt;a href="https://twitter.com/hashtag/CSS"&gt;#CSS&lt;/a&gt; art ☺️&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/idrinkcss"&gt;@idrinkcss&lt;/a&gt; made "Uchiha Itachi" so here I am with a "Livai Ackerman" &lt;a href="https://twitter.com/hashtag/AttackOnTitan"&gt;#AttackOnTitan&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/ShingekiNoKyojin"&gt;#ShingekiNoKyojin&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/WaDjxZhPoV"&gt;codepen.io/t_afif/pen/MWo…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; &lt;a href="https://t.co/OWj6JF6GOY"&gt;twitter.com/idrinkcss/stat…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:28 AM - 23 Sep 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Ronnie Lee
          &lt;/span&gt;
          &lt;a class="mentioned-user" href="https://dev.to/idrinkcss"&gt;@idrinkcss&lt;/a&gt;

        &lt;/div&gt;
        'Uchiha Itachi' Made with #CSS 

This one took me quite a long time, was a bit complicated than expected.

*I'll be sharing the Codepen link in a while in the replies.*

RETWEETS ARE APPRECIATED! https://t.co/TIziBB1t4L
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1440835309801918464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1440835309801918464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1440835309801918464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Let me know what do you think 👇👇&lt;/p&gt;

&lt;p&gt;✔️ This is amazing, we want more like this!&lt;br&gt;
❌ Don't do this anymore 🤮 we want more tutorials and funny collections but no more drawing please!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: If you will choose the ❌, I will haunt your dreams for the rest of your life 👹&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Setting up new project</title>
      <author>Ilyos Olimov</author>
      <pubDate>Thu, 23 Sep 2021 09:36:43 +0000</pubDate>
      <link>https://dev.to/ilyosdev/setting-up-new-project-57h8</link>
      <guid>https://dev.to/ilyosdev/setting-up-new-project-57h8</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzFCkUh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovaem45ea3lmxe4josic.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzFCkUh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovaem45ea3lmxe4josic.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you know about solid, kiss and bunch of other things?&lt;br&gt;
Fug them.&lt;br&gt;
When you are writing any kind of code. Just write and see the result. You do not like it? Go change it. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not forget one thing, Rome is not built in one day or night 😉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let`s assume we all have nodejs installed. Create folder named like boilerplate and open that folder in your code editor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;initiate - &lt;code&gt;npm init -y&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like MVC, like a lot. So create bunch of folders such as controllers, models, services, middlewares, database(migrations, seeds), utils&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZQp9yyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrw1jcl75r2m5mexeza2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZQp9yyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrw1jcl75r2m5mexeza2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#install-necessary-packages"&gt;
  &lt;/a&gt;
  Install necessary packages
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install knex -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install objection knex mysql --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install express dotenv --save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go grab the code from &lt;a href="https://github.com/ilyosdev/boilerplate"&gt;here&lt;/a&gt;&lt;br&gt;
and continue.&lt;/p&gt;

&lt;p&gt;First of all check the codebase, if you like it you are more than welcome to use it. If no, what the hell are you doing here then? Go leave my blog. Kidding 😁.&lt;/p&gt;

&lt;p&gt;Let me show you some things here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npx knex migrate:make posts&lt;/code&gt; - this will create migration file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npx knex migrate:latest&lt;/code&gt; - this will create tables in your db&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npx knex migrate:rollback&lt;/code&gt; - if you forgot something to add in your latest migration and you change it, try this then you are good to migrate again, without this your terminal spits right in your face.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npx knex seed:make posts&lt;/code&gt; - this creates file which you can populate with good old friend faker then you can insert it with &lt;code&gt;npx knex seed:run&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>expressjs</category>
      <category>knex</category>
      <category>objection</category>
    </item>
    <item>
      <title>How to add a class to the element?</title>
      <author>101samovar</author>
      <pubDate>Thu, 23 Sep 2021 09:25:03 +0000</pubDate>
      <link>https://dev.to/101samovar/how-to-add-a-class-to-the-element-896</link>
      <guid>https://dev.to/101samovar/how-to-add-a-class-to-the-element-896</guid>
      <description>&lt;p&gt;There’s some site.&lt;br&gt;
There’s an element on that site.&lt;br&gt;
There’s a class named ‘orange’.&lt;br&gt;
We need to set the className property of the object.&lt;br&gt;
That’s all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.orange&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have got an element with added class.&lt;/p&gt;




&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating a Continuous Deployment workflow using Github Actions to deploy your application to ECS</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 23 Sep 2021 09:16:34 +0000</pubDate>
      <link>https://dev.to/alichherawalla/creating-a-continuous-deployment-workflow-using-github-actions-to-deploy-your-application-to-ecs-4l78</link>
      <guid>https://dev.to/alichherawalla/creating-a-continuous-deployment-workflow-using-github-actions-to-deploy-your-application-to-ecs-4l78</guid>
      <description>&lt;p&gt;A well-written Continuous Deployment (CD) pipeline ensures that on every merge to a release branch, an artifact is created and deployed to the correct environment.  &lt;/p&gt;

&lt;p&gt;While working with containerized applications the CD pipeline needs to contain the following steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code checkout&lt;/li&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Build the image&lt;/li&gt;
&lt;li&gt;Push to a container registry&lt;/li&gt;
&lt;li&gt;Use the latest image for the next deployment&lt;/li&gt;
&lt;li&gt;Trigger a new deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, we will write a CD pipeline that does all of the above tasks using Github Actions. We will deploy our application using AWS ECS.&lt;/p&gt;

&lt;p&gt;AWS ECS is a fully managed container orchestration service from AWS. It helps you easily deploy, manage and scale containerized applications. &lt;/p&gt;

&lt;p&gt;This tutorial assumes that you have a solid understanding of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/ecs/index.html"&gt;AWS ECS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;Github Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also makes the implicit assumption that your application is already deployed on ECS. At the end of this tutorial you will be able automate your deployments on merge to a release branch. &lt;/p&gt;

&lt;p&gt;In this tutorial I will take you through how to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trigger a workflow on merge to a release branch.&lt;/li&gt;
&lt;li&gt;Build and push the image to the Elastic Container Registry&lt;/li&gt;
&lt;li&gt;Update the task-definition using the newly created image&lt;/li&gt;
&lt;li&gt;Deploy your application to the new environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h2&gt;

&lt;p&gt;Please clone the following repository: &lt;a href="https://github.com/wednesday-solutions/ecs-cd-starter"&gt;https://github.com/wednesday-solutions/ecs-cd-starter&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-database-connection"&gt;
  &lt;/a&gt;
  Setup database connection
&lt;/h2&gt;

&lt;p&gt;Update the relevant database connection details in the &lt;code&gt;.env.development&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;DB_URI&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;postgres&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;role&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;db&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;POSTGRES_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_DB=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_USER=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
POSTGRES_PASSWORD=&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-secrets"&gt;
  &lt;/a&gt;
  Add secrets
&lt;/h2&gt;

&lt;p&gt;We need to add the following secrets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS_ACCESS_KEY_ID
ACCESS_KEY_ID with access to deploy&lt;/li&gt;
&lt;li&gt;AWS_SECRET_ACCESS_KEY
Associated SECRET_ACCESS_KEY&lt;/li&gt;
&lt;li&gt;AWS_REGION
Region in which the cluster is deployed&lt;/li&gt;
&lt;li&gt;AWS_ECR_REPOSITORY
Name of the ECR repository that we will push the image to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;strong&gt;AWS_ACCESS_KEY_ID&lt;/strong&gt; and &lt;strong&gt;AWS_SECRET_ACCESS_KEY&lt;/strong&gt; secrets*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c5cG6tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vyl3yoir82nqem9dfbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c5cG6tes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vyl3yoir82nqem9dfbh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggg9sYDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqwi4pi8btgoicr4zwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggg9sYDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/soqwi4pi8btgoicr4zwi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the AWS deployment region&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leAgRS54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adihop4emv6sbu5dl5mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leAgRS54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adihop4emv6sbu5dl5mm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the repository name from the AWS console and add it as a secret.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd72ezVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzj2j7wp1e1rnlr9qym9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd72ezVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzj2j7wp1e1rnlr9qym9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have omitted the &lt;code&gt;-dev&lt;/code&gt; since that represents the stage. We will be using the same workflow to deploy to multiple environments and will hence infer the stage at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2_65GOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22lguy96a0p7ngwcg9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2_65GOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22lguy96a0p7ngwcg9f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-taskdefinitionjson-for-all-the-environments"&gt;
  &lt;/a&gt;
  Create the task-definition.json for all the environments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the following URL: &lt;a href="https://ap-south-1.console.aws.amazon.com/ecs/home?region=ap-south-1#/taskDefinitions"&gt;https://ap-south-1.console.aws.amazon.com/ecs/home?region=ap-south-1#/taskDefinitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm using &lt;code&gt;ap-south-1&lt;/code&gt; as the AWS region. Please change the URL according to the region you are in&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pajiDCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6lgw6zmi7brd1qkbpcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pajiDCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6lgw6zmi7brd1qkbpcd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Select the task definition for your environment and project. In my case its the &lt;code&gt;ecs-cd-starter-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MCglExRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uizly9279e64gl3pt0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MCglExRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uizly9279e64gl3pt0q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select the latest revision and go to the &lt;code&gt;JSON&lt;/code&gt; tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6KnRfWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqwo6yku9aceijhaza0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6KnRfWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cqwo6yku9aceijhaza0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy the JSON.&lt;br&gt;
Run the following snippet in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;mkdir&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;
&lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the JSON from the AWS console into the newly created file.&lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;dev.json&lt;/code&gt; since &lt;code&gt;dev&lt;/code&gt; is my default branch name. I want the code that is pushed to this branch deployed to the &lt;code&gt;dev&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;You will need to repeat this step for the &lt;code&gt;qa&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt;  environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trigger-the-workflow-to-run-on-merge-to-a-release-branch"&gt;
  &lt;/a&gt;
  Trigger  the workflow to run on merge to a release branch
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1 - Create workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new workflow for continuous deployment in the &lt;code&gt;.github/workflows&lt;/code&gt; folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;workflows&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2 - Setup triggers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Identify your release branches. The first release branch will be your default branch which should also be the branch that the team typically raises a pull request to when they want to add a new feature.&lt;/p&gt;

&lt;p&gt;In my case this is the &lt;code&gt;dev&lt;/code&gt; branch. Typically you would have 2 more environments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;qa&lt;/li&gt;
&lt;li&gt;production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's trigger this workflow whenever there is a push on one of these branches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ECS&lt;/span&gt; &lt;span class="nx"&gt;Starter&lt;/span&gt; &lt;span class="nx"&gt;CD&lt;/span&gt; &lt;span class="nx"&gt;Develop&lt;/span&gt;

&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;qa&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;master&lt;/span&gt;
&lt;span class="nx"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nx"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Docker&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;deploy&lt;/span&gt;
    &lt;span class="nx"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;latest&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the above code into the newly created &lt;code&gt;cd.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3 - Checkout code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step pulls the latest code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4 - Get branch name&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the current branch name. This step will fetch the current git branch name and store it. It can now be accessed like so: &lt;code&gt;${{steps.vars.outputs.stage}}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vars&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_REF&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="cm"&gt;/*/}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5 - Configure AWS Credentials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure AWS Credentials and region. Use the values from Github secrets to configure the AWS Credentials.&lt;br&gt;
To get a better understanding of all of the configuration options please go through the documentation here: &lt;a href="https://github.com/aws-actions/configure-aws-credentials#usage"&gt;https://github.com/aws-actions/configure-aws-credentials#usage&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Configure&lt;/span&gt; &lt;span class="nx"&gt;AWS&lt;/span&gt; &lt;span class="nx"&gt;credentials&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
        &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_REGION&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6 - Login to ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use the aws-actions/amazon-ecr action to log in to AWS ECR. &lt;/p&gt;

&lt;p&gt;To get a better understanding of all of the configuration options please go through the documentation here: &lt;a href="https://github.com/aws-actions/configure-aws-credentials#usage"&gt;https://github.com/aws-actions/amazon-ecr-login#usage&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;amazon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 7 - Build tag and push image to ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now need to build the docker image,. tag and push it to AWS ECR. Use the commit hash to tag the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;ECR_REGISTRY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_ECR_REPOSITORY&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;AWS_REGION&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AWS_REGION&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nl"&gt;IMAGE_TAG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nl"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="nx"&gt;$ECR_REGISTRY&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$IMAGE_TAG&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
          &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;$ECR_REGISTRY&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$ECR_REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;$IMAGE_TAG3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 8 - Render the task definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We create a new task-definition revision by updating the value of image. We will point to the image that we just pushed to ECR.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Render&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECS&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;
        &lt;span class="nx"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;amazon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;v1&lt;/span&gt;
        &lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ecs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;starter&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
          &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/${{ secrets.AWS_ECR_REPOSITORY }}-${{steps.vars.outputs.stage}}:${{ github.sha }&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;the task-definition folder will contain task-definitions for all of the environments. I create json files with the name of the environment and access it using &lt;code&gt;${{steps.vars.outputs.stage}}.json&lt;/code&gt;  in the workflow&lt;/li&gt;
&lt;li&gt;I name my containers with the stage as the suffix. I reference it using &lt;code&gt;&amp;lt;container-name&amp;gt;${{steps.vars.outputs.stage}}.json&lt;/code&gt; in the workflow. &lt;/li&gt;
&lt;li&gt;We reference the image that we just pushed to the ECR registry.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 9 - Deploy to ECS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We use the latest revision of the task-definition that we just created to deploy the application to ECS. I use the same &lt;code&gt;-branchName&lt;/code&gt; suffix when naming my service and cluster&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 10 - Logout of ECR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once the deployment is done logout of ECR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Amazon&lt;/span&gt; &lt;span class="nx"&gt;ECR&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;always&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;docker&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ecr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registry&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;Now that you have setup a CD pipeline to deploy your application to ECS I would recommend reading our article on &lt;a href="https://www.wednesday.is/writing-tutorials/part-1-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express"&gt;"how to execute batch jobs in a multi-container environment"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this tutorial on how to create a CD pipeline to deploy your ECS application. If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>docker</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>TimeLy- An app that every student must have</title>
      <author>Android Club - VITC</author>
      <pubDate>Thu, 23 Sep 2021 09:15:49 +0000</pubDate>
      <link>https://dev.to/androidvitc/timely-an-app-that-every-student-must-have-47n6</link>
      <guid>https://dev.to/androidvitc/timely-an-app-that-every-student-must-have-47n6</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="/erbmu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvPSZyw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lVonU9td--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/696887/21510bc4-9edb-4cf3-a07a-973f3c7e54fd.png" alt="erbmu"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erbmu/timely-3pk3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;TimeLy&lt;/h2&gt;
      &lt;h3&gt;Atharva Umbre ・ Sep 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#androidclubvit&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>productivity</category>
      <category>android</category>
      <category>androidclub</category>
    </item>
    <item>
      <title>Choosing a Rad Web Hosting KVM VPS Hosting</title>
      <author>Larry Johnson</author>
      <pubDate>Thu, 23 Sep 2021 09:13:35 +0000</pubDate>
      <link>https://dev.to/sitedata/choosing-a-rad-web-hosting-kvm-vps-hosting-1ipb</link>
      <guid>https://dev.to/sitedata/choosing-a-rad-web-hosting-kvm-vps-hosting-1ipb</guid>
      <description>&lt;p&gt;RAD WEB HOSTING is a leading provider of website hosting, reseller hosting, VPS Servers, performance cloud solutions, and dedicated server hosting in Dallas, TX. RAD WEB HOSTING provides a platform for clients to register and manage their domain names, as well as protect their websites and visitors with FREE Domain Privacy and SSL Certificates. Headquartered in the former Federal Reserve Bank of Dallas, all hosting services benefit from enhanced security and multi-homed network up streams for redundancy and faster connection speeds. RAD WEB HOSTING’s core service offering revolves around providing hosting solutions for small to medium businesses, but also providing customized scalable hosting solutions for Growing and Enterprise clients.&lt;/p&gt;

&lt;p&gt;Why Rad Web Hosting&lt;br&gt;
&lt;a href="https://radwebhosting.com/kvm-vps-servers"&gt;KVM VPS&lt;/a&gt; in which Premium Intel Server Hardware, SSD storage, and KVM hypervisors are standard Features of Linux VPS Servers. KVM VPS Servers are Fully Customizable and Provide a Reliable, High-Availability Hosting Platform for Your Needs.&lt;/p&gt;

&lt;p&gt;Windows VPS Hosting in which Windows VPS Servers are instantly upgradeable, DDoS protected, and backed by our premium network and 24/7 Support. Manage your Windows VPS directly from your Hosting Dashboard with on-demand OS reloads, power control, reverse DNS management, IPMI and more. Windows VPS Servers feature KVM virtualization with RAID 10 SSD.&lt;/p&gt;

</description>
      <category>vpshosting</category>
      <category>vps</category>
      <category>kvm</category>
      <category>vpsserver</category>
    </item>
    <item>
      <title>TimeLy</title>
      <author>Atharva Umbre</author>
      <pubDate>Thu, 23 Sep 2021 09:04:36 +0000</pubDate>
      <link>https://dev.to/erbmu/timely-3pk3</link>
      <guid>https://dev.to/erbmu/timely-3pk3</guid>
      <description>&lt;p&gt;Ever got tired of remembering which class you have? Constantly having the urge to check the class hours?&lt;br&gt;
What if I told you - you could have your timetable in your pocket? No more fussing over it again?&lt;/p&gt;

&lt;p&gt;TimeLy, an app developed by Android Club VITC, is designed to fulfil the same and make life easier for every student!&lt;/p&gt;

&lt;p&gt;Let’s have a quick glance at some of the prominent features of this app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Simple UI:&lt;/strong&gt;&lt;br&gt;
The Graphical User Interface of this app is simple and easy on the eyes. With a minimalistic background and the absence of unnecessary features, this makes the app extremely user friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.No Signup:&lt;/strong&gt;&lt;br&gt;
No registration is required. One does not have to go through any hustle of providing personal details. TimeLy is a one of a sort, straight to the point app, directly catering to your needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.No ads:&lt;/strong&gt;&lt;br&gt;
With no annoying ads to waste your time, TimeLy ensures you get to check your timetable without any disturbances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Radiant Colors:&lt;/strong&gt;&lt;br&gt;
TimeLy also allows the user to use various colors for particular classes. With a range of modest colors, your entire experience is made much more comfortable and pleasant.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tutorial"&gt;
  &lt;/a&gt;
  Tutorial:
&lt;/h1&gt;

&lt;p&gt;Let’s now have a quick look on how to use this app:&lt;/p&gt;

&lt;p&gt;To start off simply click on the ‘+’ sign on the top right corner of your screen.&lt;/p&gt;

&lt;p&gt;Let’s say I have a Lab class of Cyber Security with a C2 slot. Adding in these details with the timings and day of the class (along with your preferred color choice), click on the ‘Add’ button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoitz19k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neo5rlq7xiz1kn19uy75.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoitz19k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neo5rlq7xiz1kn19uy75.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--37INtr7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6t3v0carrdwicea6x4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--37INtr7a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6t3v0carrdwicea6x4.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s literally all there was to it! Your class has been added to your timetable. Now all that remains is adding the rest of your classes, and all your timetable worries have been solved!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxzOsT66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx7043tp22tjb8af7m1v.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxzOsT66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx7043tp22tjb8af7m1v.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Couldn’t have asked for anything better huh?&lt;/p&gt;

&lt;p&gt;TimeLy is as Barney Stinson would say -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--as5NN8Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyyhhpefegdqia4mvqa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--as5NN8Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyyhhpefegdqia4mvqa7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>androidclubvit</category>
      <category>android</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Have you tried GitHub Copilot?</title>
      <author>Madza</author>
      <pubDate>Thu, 23 Sep 2021 09:03:39 +0000</pubDate>
      <link>https://dev.to/madza/have-you-tried-github-copilot-1lgh</link>
      <guid>https://dev.to/madza/have-you-tried-github-copilot-1lgh</guid>
      <description>&lt;p&gt;&lt;a href="https://copilot.github.com/"&gt;GitHub Copilot&lt;/a&gt; is an AI tool developed by &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; and &lt;a href="https://openai.com/"&gt;OpenAI&lt;/a&gt; to assist users of &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; by autocompleting code. &lt;/p&gt;

&lt;p&gt;It was first &lt;a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/"&gt;announced&lt;/a&gt; on 29 June 2021. It got quite a &lt;a href="https://twitter.com/search?q=github%20copilot&amp;amp;src=typed_query"&gt;buzz&lt;/a&gt; on the launch. &lt;/p&gt;

&lt;p&gt;Three months has since passed and I was wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have you tried it and what are your impressions/thoughts?&lt;/li&gt;
&lt;li&gt;Do you see it as a must-have tool in your stack?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>github</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>public bath room script
</title>
      <author>joinmoin0002</author>
      <pubDate>Thu, 23 Sep 2021 08:41:31 +0000</pubDate>
      <link>https://dev.to/joinmoin0002/public-bath-room-script-34dg</link>
      <guid>https://dev.to/joinmoin0002/public-bath-room-script-34dg</guid>
      <description>&lt;p&gt;-- Gui to Lua&lt;br&gt;
-- Version: 3.2&lt;/p&gt;

&lt;p&gt;-- Instances:&lt;/p&gt;

&lt;p&gt;local Choose = Instance.new("ScreenGui")&lt;br&gt;
local Main = Instance.new("ImageLabel")&lt;br&gt;
local DropShadow = Instance.new("ImageLabel")&lt;br&gt;
local UseToilet = Instance.new("TextButton")&lt;br&gt;
local UseCola = Instance.new("TextButton")&lt;br&gt;
local GetCola = Instance.new("TextButton")&lt;br&gt;
local Val = Instance.new("TextBox")&lt;br&gt;
local Note = Instance.new("TextLabel")&lt;br&gt;
local Note2 = Instance.new("TextLabel")&lt;br&gt;
local Sit = Instance.new("TextButton")&lt;/p&gt;

&lt;p&gt;--Properties:&lt;/p&gt;

&lt;p&gt;Choose.Name = "Choose"&lt;br&gt;
Choose.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")&lt;br&gt;
Choose.ResetOnSpawn = false&lt;/p&gt;

&lt;p&gt;Main.Name = "Main"&lt;br&gt;
Main.Parent = Choose&lt;br&gt;
Main.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Main.BackgroundTransparency = 1.000&lt;br&gt;
Main.Position = UDim2.new(0.206022188, 0, 0.0853242353, 0)&lt;br&gt;
Main.Size = UDim2.new(0, 583, 0, 562)&lt;br&gt;
Main.ZIndex = 2&lt;br&gt;
Main.Image = "rbxassetid://3570695787"&lt;br&gt;
Main.ImageColor3 = Color3.fromRGB(39, 39, 39)&lt;br&gt;
Main.ScaleType = Enum.ScaleType.Slice&lt;br&gt;
Main.SliceCenter = Rect.new(100, 100, 100, 100)&lt;br&gt;
Main.Active = true&lt;br&gt;
Main.Draggable = true&lt;/p&gt;

&lt;p&gt;DropShadow.Name = "DropShadow"&lt;br&gt;
DropShadow.Parent = Main&lt;br&gt;
DropShadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)&lt;br&gt;
DropShadow.BackgroundTransparency = 1.000&lt;br&gt;
DropShadow.BorderSizePixel = 0&lt;br&gt;
DropShadow.Position = UDim2.new(0, 1, 0, 1)&lt;br&gt;
DropShadow.Size = UDim2.new(1.01372218, 0, 1.0142349, 0)&lt;br&gt;
DropShadow.Image = "rbxassetid://3570695787"&lt;br&gt;
DropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)&lt;br&gt;
DropShadow.ScaleType = Enum.ScaleType.Slice&lt;br&gt;
DropShadow.SliceCenter = Rect.new(100, 100, 100, 100)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://higherlogicdownload.substack.com/p/get-150000-free-tiktok-followers"&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Val.Name = "Val"&lt;br&gt;
Val.Parent = Main&lt;br&gt;
Val.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Val.BackgroundTransparency = 1.000&lt;br&gt;
Val.Position = UDim2.new(0.327615768, 0, 0.67615658, 0)&lt;br&gt;
Val.Size = UDim2.new(0, 200, 0, 50)&lt;br&gt;
Val.ZIndex = 2&lt;br&gt;
Val.Font = Enum.Font.SciFi&lt;br&gt;
Val.PlaceholderText = "Value"&lt;br&gt;
Val.Text = ""&lt;br&gt;
Val.TextColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Val.TextScaled = true&lt;br&gt;
Val.TextSize = 14.000&lt;br&gt;
Val.TextWrapped = true&lt;/p&gt;

&lt;p&gt;Note.Name = "Note"&lt;br&gt;
Note.Parent = Main&lt;br&gt;
Note.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Note.BackgroundTransparency = 1.000&lt;br&gt;
Note.Position = UDim2.new(0.00171521353, 0, 0.129893243, 0)&lt;br&gt;
Note.Size = UDim2.new(0, 591, 0, 50)&lt;br&gt;
Note.ZIndex = 2&lt;br&gt;
Note.Font = Enum.Font.RobotoMono&lt;br&gt;
Note.Text = "If u want to stop type :sit or touch puddle or just click that button"&lt;br&gt;
Note.TextColor3 = Color3.fromRGB(255, 0, 4)&lt;br&gt;
Note.TextScaled = true&lt;br&gt;
Note.TextSize = 14.000&lt;br&gt;
Note.TextWrapped = true&lt;/p&gt;

&lt;p&gt;Note2.Name = "Note2"&lt;br&gt;
Note2.Parent = Main&lt;br&gt;
Note2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Note2.BackgroundTransparency = 1.000&lt;br&gt;
Note2.Position = UDim2.new(0.00171521353, 0, 0.199288264, 0)&lt;br&gt;
Note2.Size = UDim2.new(0, 591, 0, 50)&lt;br&gt;
Note2.ZIndex = 2&lt;br&gt;
Note2.Font = Enum.Font.Oswald&lt;br&gt;
Note2.Text = "V"&lt;br&gt;
Note2.TextColor3 = Color3.fromRGB(255, 0, 4)&lt;br&gt;
Note2.TextScaled = true&lt;br&gt;
Note2.TextSize = 14.000&lt;br&gt;
Note2.TextWrapped = true&lt;/p&gt;

&lt;p&gt;Sit.Name = "Sit"&lt;br&gt;
Sit.Parent = Main&lt;br&gt;
Sit.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Sit.BackgroundTransparency = 1.000&lt;br&gt;
Sit.Position = UDim2.new(0.435924917, 0, 0.301039726, 0)&lt;br&gt;
Sit.Size = UDim2.new(0, 84, 0, 50)&lt;br&gt;
Sit.ZIndex = 2&lt;br&gt;
Sit.Font = Enum.Font.SciFi&lt;br&gt;
Sit.Text = "End"&lt;br&gt;
Sit.TextColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
Sit.TextScaled = true&lt;br&gt;
Sit.TextSize = 14.000&lt;br&gt;
Sit.TextWrapped = true&lt;br&gt;
Sit.MouseButton1Click:Connect(function()&lt;br&gt;
    game.Players.LocalPlayer.Character.Humanoid.Sit = true&lt;br&gt;
end)&lt;/p&gt;

&lt;p&gt;GetCola.Name = "GetCola"&lt;br&gt;
GetCola.Parent = Main&lt;br&gt;
GetCola.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
GetCola.BackgroundTransparency = 1.000&lt;br&gt;
GetCola.Position = UDim2.new(0.336439461, 0, 0.516342163, 0)&lt;br&gt;
GetCola.Size = UDim2.new(0, 200, 0, 50)&lt;br&gt;
GetCola.ZIndex = 2&lt;br&gt;
GetCola.Font = Enum.Font.SciFi&lt;br&gt;
GetCola.Text = "Get DirtyBloxy Cola"&lt;br&gt;
GetCola.TextColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
GetCola.TextScaled = true&lt;br&gt;
GetCola.TextSize = 14.000&lt;br&gt;
GetCola.TextWrapped = true&lt;br&gt;
GetCola.MouseButton1Click:Connect(function()&lt;br&gt;
    for i = 1,Val.Text do&lt;br&gt;
        fireclickdetector(game:GetService("Workspace")["Trash can"].Trash.Can.ClickDetector)&lt;br&gt;
    end&lt;br&gt;
end)&lt;/p&gt;

&lt;p&gt;UseCola.Name = "UseCola"&lt;br&gt;
UseCola.Parent = Main&lt;br&gt;
UseCola.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
UseCola.BackgroundTransparency = 1.000&lt;br&gt;
UseCola.Position = UDim2.new(0.655478954, 0, 0.425594866, 0)&lt;br&gt;
UseCola.Size = UDim2.new(0, 200, 0, 50)&lt;br&gt;
UseCola.ZIndex = 2&lt;br&gt;
UseCola.Font = Enum.Font.SciFi&lt;br&gt;
UseCola.Text = "DirtyBloxy Cola"&lt;br&gt;
UseCola.TextColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
UseCola.TextScaled = true&lt;br&gt;
UseCola.TextSize = 14.000&lt;br&gt;
UseCola.TextWrapped = true&lt;br&gt;
UseCola.MouseButton1Click:Connect(function()&lt;br&gt;
    for i,v in pairs (game.Players.LocalPlayer.Backpack:GetChildren()) do&lt;br&gt;
        if v.Name == 'TrashCola' then&lt;br&gt;
            v.Parent = game.Players.LocalPlayer.Character&lt;br&gt;
        end&lt;br&gt;
    end&lt;br&gt;
    wait(0.5)&lt;br&gt;
    while true do&lt;br&gt;
        wait(0.3)&lt;br&gt;
        if game.Players.LocalPlayer.Character.Humanoid.Sit == true then&lt;br&gt;
            break&lt;br&gt;
        end&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i,v in pairs (game.Players.LocalPlayer.Character:GetChildren()) do
        if v.Name == 'TrashCola' then
            v:Activate()
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end)&lt;/p&gt;

&lt;p&gt;UseToilet.Name = "UseToilet"&lt;br&gt;
UseToilet.Parent = Main&lt;br&gt;
UseToilet.BackgroundColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
UseToilet.BackgroundTransparency = 1.000&lt;br&gt;
UseToilet.Position = UDim2.new(-0.00661368668, 0, 0.425594866, 0)&lt;br&gt;
UseToilet.Size = UDim2.new(0, 200, 0, 50)&lt;br&gt;
UseToilet.ZIndex = 2&lt;br&gt;
UseToilet.Font = Enum.Font.SciFi&lt;br&gt;
UseToilet.Text = "Toilet Paper"&lt;br&gt;
UseToilet.TextColor3 = Color3.fromRGB(255, 255, 255)&lt;br&gt;
UseToilet.TextScaled = true&lt;br&gt;
UseToilet.TextSize = 14.000&lt;br&gt;
UseToilet.TextWrapped = true&lt;br&gt;
UseToilet.MouseButton1Click:Connect(function()&lt;br&gt;
    for i,v in pairs (game.Players.LocalPlayer.Backpack:GetChildren()) do&lt;br&gt;
        if v.Name == 'TpRoll' then&lt;br&gt;
            v.Parent = game.Players.LocalPlayer.Character&lt;br&gt;
        end&lt;br&gt;
    end&lt;br&gt;
    wait(0.5)&lt;br&gt;
    while true do&lt;br&gt;
        wait(0.3)&lt;br&gt;
        if game.Players.LocalPlayer.Character.Humanoid.Sit == true then&lt;br&gt;
            break&lt;br&gt;
        end&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i,v in pairs (game.Players.LocalPlayer.Character:GetChildren()) do
        if v.Name == 'TpRoll' then
            v:Activate()
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;end)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My blogging platform on ProductHunt</title>
      <author>Rotimi</author>
      <pubDate>Thu, 23 Sep 2021 08:34:31 +0000</pubDate>
      <link>https://dev.to/rotimi_je_suis/my-blogging-platform-on-producthunt-ggl</link>
      <guid>https://dev.to/rotimi_je_suis/my-blogging-platform-on-producthunt-ggl</guid>
      <description>&lt;p&gt;Hi everyone. My blogging platform, QuickPublisher (&lt;a href="https://www.quickpublisher.online"&gt;https://www.quickpublisher.online&lt;/a&gt;) is now live on ProductHunt. The link is &lt;a href="https://www.producthunt.com/posts/quickpublisher-3"&gt;https://www.producthunt.com/posts/quickpublisher-3&lt;/a&gt; please leave a feedback. Thank you&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How do you manage your emails?</title>
      <author>Madza</author>
      <pubDate>Thu, 23 Sep 2021 08:23:38 +0000</pubDate>
      <link>https://dev.to/madza/how-do-you-manage-your-emails-3o4j</link>
      <guid>https://dev.to/madza/how-do-you-manage-your-emails-3o4j</guid>
      <description>&lt;p&gt;Keeping track of the emails and organizing them effectively is a crucial part of any successful business. The more control you have, the more you can focus on actually building stuff.&lt;/p&gt;

&lt;p&gt;Most of developers actively use multiple email addresses, so it is important to create an efficient workflow to stay productive.&lt;/p&gt;

&lt;p&gt;Could you elaborate on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many emails do you get daily (approx.)?&lt;/li&gt;
&lt;li&gt;What email client/extensions do you use?&lt;/li&gt;
&lt;li&gt;What are your tips to get them easily tracked and organized (notifications, tags, etc.)?&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
