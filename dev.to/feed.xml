<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Just JavaScript things‚Ä¶</title>
      <author>Vishwa.R</author>
      <pubDate>Tue, 10 Aug 2021 18:40:43 +0000</pubDate>
      <link>https://dev.to/codereaper08/just-javascript-things-2klc</link>
      <guid>https://dev.to/codereaper08/just-javascript-things-2klc</guid>
      <description>&lt;p&gt;Hello again, my dear &lt;strong&gt;readers&lt;/strong&gt; and &lt;strong&gt;followers&lt;/strong&gt;üëã. Here I am back with another blog on JavaScript. This time it's going to be much more like a knowledge sharing than a technical thing. So, let's begin with today's topic, ‚ÄúJust JS things‚Äù.&lt;/p&gt;

&lt;p&gt;We are going to discuss some peculiar features of JavaScript which, most of us, don't know. These peculiar things make JS a great language to learn, and for me, it's the most fun thing to do. So, let's &lt;strong&gt;BEGIN&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#undefined-and-null-"&gt;
  &lt;/a&gt;
  undefined and null :
&lt;/h2&gt;

&lt;p&gt;Most of us would have come across the JS data types&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;. But we don't know the real difference between both of them. Let's start with &lt;code&gt;undefined&lt;/code&gt;,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undefined-"&gt;
  &lt;/a&gt;
  undefined :
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;undefined&lt;/code&gt; type is an object, which represents that the  declaration of the variable done, but it is not assigned. This comes under the &lt;code&gt;undefined&lt;/code&gt;, as its name suggests. This is literally &lt;strong&gt;lack of value for the variable&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-"&gt;
  &lt;/a&gt;
  null :
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;null&lt;/code&gt; is a value assigned to a variable. Unlike &lt;code&gt;undefined&lt;/code&gt; it's not the lack of value, as we know that &lt;code&gt;null&lt;/code&gt; by itself is a value. &lt;code&gt;null&lt;/code&gt; is voluntary absence of the value for the variable.&lt;/p&gt;

&lt;p&gt;The below picture clearly explains the difference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xGtkeX0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/T9M2J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGtkeX0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/T9M2J.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll see how they compare with each other in the below gist, where we use a simple conditional statement to know how &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; work.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/em&gt;: Line numbers referred as L below.&lt;/p&gt;

&lt;p&gt;Here, we only get to run L4 and L8 in our code. Which means that the variable &lt;code&gt;a&lt;/code&gt; is not assigned a value and thus gives &lt;code&gt;undefined&lt;/code&gt;, whereas variable &lt;code&gt;b&lt;/code&gt; is assigned the value of &lt;code&gt;null&lt;/code&gt; which make the L8 to execute.&lt;/p&gt;

&lt;p&gt;You can also use this JSFiddle &lt;a href="https://jsfiddle.net/Vishwa_R/ha8tqL69/5/"&gt;https://jsfiddle.net/Vishwa_R/ha8tqL69/5/&lt;/a&gt; for execution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-class-citizens-functions"&gt;
  &lt;/a&gt;
  First class citizens, FUNCTIONS!
&lt;/h2&gt;

&lt;p&gt;In the JavaScript world, functions enjoy many privileges as first class objects. We can pass one function as an argument for another function and can also return the same if needed for later execution. YES! That's possible in JS. These are called as &lt;strong&gt;‚ÄúCallback functions‚Äù.&lt;/strong&gt; They are commonly used in JS world. We use callback functions in asynchronous programming, to wait for execution until a previous function gets its job done.&lt;/p&gt;

&lt;p&gt;Let's see a simple example, let us take the operation of reading a file and displaying its size. Here we have two functions to perform, they are,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reading a file.&lt;/li&gt;
&lt;li&gt;Displaying size.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This must be done in sequence, we cannot display the size first without reading the file. Scenarios like this, make Callback functions ‚Äú&lt;strong&gt;HEROES&lt;/strong&gt;‚Äù.&lt;/p&gt;

&lt;p&gt;We'll see an example where we mimic the above operation (we are not going to actually read a file and display the size). Let us take a look at the below gist.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So here in this example, we have two functions, namely &lt;code&gt;Readfile&lt;/code&gt; and &lt;code&gt;sizefinder&lt;/code&gt;. As per our sequence of execution, we want &lt;code&gt;Readfile&lt;/code&gt; to be first executed, So, we call the &lt;code&gt;sizefinder&lt;/code&gt; inside the &lt;code&gt;Readfile&lt;/code&gt; function as an argument. Finally, we can asynchronously do two functions using callbacks. This makes Callback functions to be widely used.&lt;/p&gt;

&lt;p&gt;You can also use this JSFiddle &lt;a href="https://jsfiddle.net/Vishwa_R/hce58f39/9/"&gt;https://jsfiddle.net/Vishwa_R/hce58f39/9/&lt;/a&gt; to have a look at execution.&lt;/p&gt;

&lt;p&gt;And that's it for today, I think these two things are great in JavaScript and that's why folks like us LOVE JS üìú‚ú®. JavaScript dominates all the possible domains of technology, from Web to Native (A big thanks to NodeJS), and reigns as the most famous programming language. Let us love JS, as we all do every time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-and-give-a-if-you-liked-the-content-have-some-feedbacks-put-them-down-in-the-comments-have-a-great-time"&gt;
  &lt;/a&gt;
  Thanks for reading and give a üíñ if you liked the content, have some feedbacks? Put them down in the comments. Have a great timeüòÑüéâ
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions:
&lt;/h3&gt;

&lt;p&gt;Cover image : &lt;a href="https://wallpaperaccess.com/javascript"&gt;https://wallpaperaccess.com/javascript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build a Desktop App with Wails &amp; Vue</title>
      <author>Lucas Neves Pereira</author>
      <pubDate>Tue, 10 Aug 2021 18:23:14 +0000</pubDate>
      <link>https://dev.to/lucasnevespereira/build-a-desktop-app-with-wails-vue-251d</link>
      <guid>https://dev.to/lucasnevespereira/build-a-desktop-app-with-wails-vue-251d</guid>
      <description>&lt;p&gt;Hi everyone! &lt;br&gt;
In this post I want to show how to quickly setup a desktop app using this amazing Go library &lt;a href="https://github.com/wailsapp/wails"&gt;&lt;strong&gt;Wails&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, Wails allows to write desktop softwares using web technologies like Angular, React, Vue, Svelte..&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-wails"&gt;
  &lt;/a&gt;
  Installing Wails
&lt;/h2&gt;

&lt;p&gt;Getting started with this library is quite easy, if you have all the &lt;a href=""&gt;prerequesites&lt;/a&gt; you just need to run a &lt;em&gt;go get&lt;/em&gt; to install it in your local machine, if you need details this is going to add wails to the &lt;strong&gt;pkg&lt;/strong&gt; directory of your &lt;strong&gt;GOPATH&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Go ahead and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get -u github.com/wailsapp/wails/cmd/wails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've installed it you can run &lt;code&gt;wails init&lt;/code&gt; to create a new wails application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-wails-work"&gt;
  &lt;/a&gt;
  How Wails work
&lt;/h2&gt;

&lt;p&gt;Normally, the &lt;code&gt;wails init&lt;/code&gt; command prompt you some questions like the name of your app but also the front end tecnhologie you want to use. &lt;/p&gt;

&lt;p&gt;I've named my app &lt;code&gt;randomapp&lt;/code&gt; and I am choosing &lt;em&gt;VueJS&lt;/em&gt; as a frontend framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYEW1_vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl4261aqdieeu3099aqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYEW1_vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl4261aqdieeu3099aqb.png" alt="Screenshot 2021-08-06 at 17.43.31"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is going to generate all the files you need to get started. &lt;/p&gt;

&lt;p&gt;What I found very cool is the way that &lt;em&gt;wails&lt;/em&gt; allows you to connect your backend logic to your frontend. &lt;/p&gt;

&lt;p&gt;There is a wails function named &lt;code&gt;bind&lt;/code&gt; that does all the work for you as you can see in their example when you open &lt;code&gt;main.go&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1dBkgF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w54hnen856pofc1b5l5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1dBkgF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w54hnen856pofc1b5l5j.png" alt="Screenshot 2021-08-10 at 19.08.26"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;app.bind(basic)&lt;/code&gt; is binding the &lt;code&gt;basic&lt;/code&gt; function, and we can access it from the frontend. &lt;/p&gt;

&lt;p&gt;Let's serve the application so I can show you how, for development the best way to serve this app is by open two terminal windows.&lt;/p&gt;

&lt;p&gt;One placed in the root of the project to run the backend with the following command: &lt;code&gt;wails serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CN0TA0G---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltxfzrrgblaif8oj2fo5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CN0TA0G---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltxfzrrgblaif8oj2fo5.png" alt="Screenshot 2021-08-10 at 19.14.26"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And a second one placed in the frontend directory to run the frontend with the following command: &lt;code&gt;npm run serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AP8VIgjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv7ap4bx578023yd9jsb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AP8VIgjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qv7ap4bx578023yd9jsb.png" alt="Screenshot 2021-08-10 at 19.15.24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we visit &lt;code&gt;http://localhost:8080&lt;/code&gt;, we can see our application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxT4LsnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yw8bcnpib6qpq3dvi57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxT4LsnM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yw8bcnpib6qpq3dvi57.png" alt="Screenshot 2021-08-10 at 19.18.45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good! Let's open a console in our browser to fetch that backend data by simply calling &lt;code&gt;backend.basic()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7DK4MVg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkmt6eos2xeei60bu77f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7DK4MVg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkmt6eos2xeei60bu77f.png" alt="Screenshot 2021-08-10 at 19.22.37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that we have access to our basic function binded from the backend that returns a "Hello, World!" string.&lt;/p&gt;

&lt;p&gt;That's basically how things work with Wails. Now let's put all of this in practice and build a random application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-the-actual-application"&gt;
  &lt;/a&gt;
  Build the actual application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;Starting from the backend I'll get rid of the &lt;code&gt;basic&lt;/code&gt; bind and function. Also I'll add a resizable option set to true in &lt;code&gt;wails.CreateApp&lt;/code&gt; config so that our window later can be, well, resizable üôÇ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5T9p4di7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb440et0fqq0yhezfata.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5T9p4di7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eb440et0fqq0yhezfata.png" alt="Screenshot 2021-08-10 at 19.29.47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, instead of that basic function I'll create a very simple package that I will name &lt;code&gt;server&lt;/code&gt; with a &lt;code&gt;server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fj58alkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhg97q1w1zcs4i2hl2tn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fj58alkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhg97q1w1zcs4i2hl2tn.png" alt="Screenshot 2021-08-10 at 19.31.55"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There I'll create a &lt;code&gt;struct&lt;/code&gt; and a &lt;code&gt;New&lt;/code&gt; function to return an instance of my &lt;code&gt;server&lt;/code&gt; struct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2hDGtQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veleygt7v6rrcfzxjeik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2hDGtQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veleygt7v6rrcfzxjeik.png" alt="Screenshot 2021-08-10 at 19.34.56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, I'll add to that a receiver function of Server that will just return some random data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8RfVdma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cybm4yiavwxd2pp7a2vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8RfVdma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cybm4yiavwxd2pp7a2vz.png" alt="Screenshot 2021-08-10 at 19.35.54"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the last step is to bind this using &lt;code&gt;app.Bind&lt;/code&gt; in our &lt;code&gt;main.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9En6I75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8xe3ak6885nysja0zgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9En6I75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8xe3ak6885nysja0zgj.png" alt="Screenshot 2021-08-10 at 19.39.02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all we have to do for the backend data, we have kept it simple. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;Let's jump now to our frontend directory that is a VueJs app with some components already in place, we have a Home and an About page.&lt;/p&gt;

&lt;p&gt;I want to keep it simple so I'll delete the &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;store&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; folders. We only need the &lt;code&gt;App.vue&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to remove the unnecessary html tags from &lt;code&gt;App.vue&lt;/code&gt; and to remove the &lt;code&gt;use(store)&lt;/code&gt; and &lt;code&gt;use(router)&lt;/code&gt; from the create app mount function in the &lt;code&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaEax7f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c32nula6kax9muo7zza1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaEax7f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c32nula6kax9muo7zza1.png" alt="Screenshot 2021-08-10 at 19.49.43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXVzs6LU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijlu0xryzgcnbhro0hb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXVzs6LU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijlu0xryzgcnbhro0hb9.png" alt="Screenshot 2021-08-10 at 19.45.11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, next let's add a button to our template with a click event binded to a &lt;code&gt;fetchData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znWT0ALg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el0vij5o7y0p7nocwcnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znWT0ALg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/el0vij5o7y0p7nocwcnb.png" alt="Screenshot 2021-08-10 at 19.54.15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That &lt;code&gt;fetchData&lt;/code&gt; method will call our backend as we did in the browser console previously. To the that we use &lt;code&gt;window.backend&lt;/code&gt; and the we have access to our &lt;code&gt;Server&lt;/code&gt; (because we bind it üí™üèª) and it's &lt;code&gt;GetRandomData()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The result from &lt;code&gt;GetRandomData&lt;/code&gt; will be assigned to a template variable and the work is done!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLMJ8fOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4siqoiku68nd12l4c0ib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLMJ8fOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4siqoiku68nd12l4c0ib.png" alt="Screenshot 2021-08-10 at 20.00.56"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's package of our code to test this out as a desktop app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-the-final-application"&gt;
  &lt;/a&gt;
  Package the final application
&lt;/h2&gt;

&lt;p&gt;The final step is to simply package the application, or build the desktop app ready to use.&lt;/p&gt;

&lt;p&gt;For that we can stop the process running in our terminal windows for development and instead run the following command in the root of our project:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wails build -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJakWZfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogts7l0e130sblx2sgh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJakWZfR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogts7l0e130sblx2sgh0.png" alt="Screenshot 2021-08-10 at 20.05.05"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you go to the &lt;code&gt;build&lt;/code&gt; directory of your project you have a &lt;code&gt;.app&lt;/code&gt; or &lt;code&gt;.exe&lt;/code&gt; depends on what operating system you are using. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Os0ohgim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsvm474sdl29ewk3nhpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Os0ohgim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsvm474sdl29ewk3nhpn.png" alt="Screenshot 2021-08-10 at 20.05.46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You just have to open it and test our application!!&lt;/p&gt;

&lt;p&gt;*Quick Note: * I've change the colour property in &lt;code&gt;main.go&lt;/code&gt; to have a white background and then run &lt;code&gt;wails build -p&lt;/code&gt; again üôÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6jygPP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c140iwncfh81rrf8cp9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6jygPP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c140iwncfh81rrf8cp9.png" alt="Screenshot 2021-08-10 at 20.25.10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z6Jab7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ukdz221ii0ldus1ert.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Z6Jab7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8ukdz221ii0ldus1ert.png" alt="Screenshot 2021-08-10 at 20.25.14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems to work just fine üëçüèº&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for this post, you now have an idea on how you can build your next desktop application using this &lt;em&gt;Golang&lt;/em&gt; framework.&lt;/p&gt;

&lt;p&gt;Hope this will be helpful üòÄ&lt;/p&gt;

&lt;p&gt;See you soon üëãüèº&lt;/p&gt;

</description>
      <category>go</category>
      <category>vue</category>
      <category>wails</category>
      <category>desktop</category>
    </item>
    <item>
      <title>Learn CSS by Playing Games - No Nightmares </title>
      <author>Akshay R</author>
      <pubDate>Tue, 10 Aug 2021 18:15:24 +0000</pubDate>
      <link>https://dev.to/akshayrak/learn-css-by-playing-games-no-nightmares-2841</link>
      <guid>https://dev.to/akshayrak/learn-css-by-playing-games-no-nightmares-2841</guid>
      <description>&lt;p&gt;Everyone frontend developers nightmare is not able to positioning or align an element where it needs to be and when you try to do something UI starts to break.&lt;/p&gt;

&lt;p&gt;Flexbox and CSS Grid Layout are really good and easy way to solve the issues related to aligning, position and bringing responsiveness to the webpage.&lt;/p&gt;

&lt;p&gt;But the problem is we humans can't remember all the properties of Flexbox and Grid, but we can train ourselves to remember by doing it again and again. But it is no fun and we often get bored and google each and every time to figure out how a text is aligned.&lt;/p&gt;

&lt;p&gt;What if there is a way to master CSS in a fun way, what if it was a game. Most of the developers faced same issue when it comes to tutorials, they are no fun. So some of the smart developers came up with some of the following Games to master CSS.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Here is the list:&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt; &lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt; - Game to master Flexbox&lt;/li&gt;
&lt;li&gt; &lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox Defense&lt;/a&gt; - Game to master Flexbox&lt;/li&gt;
&lt;li&gt; &lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt; - Game to master CSS selectors&lt;/li&gt;
&lt;li&gt; &lt;a&gt;Flexbox Zombies&lt;/a&gt; - Game to master Flexbox (Must Try)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://cssgridgarden.com/"&gt;Grid Garden&lt;/a&gt; - Game to master CSS Grid Layout&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is one more game to master CSS Grid but I didn't try since was little bit priced high&lt;/p&gt;

&lt;ol start="6"&gt;
&lt;li&gt; &lt;a href="https://gridcritters.com/"&gt; Grid Critters&lt;/a&gt; - Game to master CSS Grid&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
These are some of the quick list of CSS games, there are lot of such games to master many of the technology.
&lt;br&gt;
Let me know if I missed any.
&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@pankajpatel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pankaj Patel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/css?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Data Science Complete Roadmap</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 18:10:21 +0000</pubDate>
      <link>https://dev.to/zainsaiff/data-science-complete-roadmap-4kn7</link>
      <guid>https://dev.to/zainsaiff/data-science-complete-roadmap-4kn7</guid>
      <description>&lt;p id="2998"&gt;Around three years ago, I did an undergraduate degree in computer science. I chose to major in data science since it was so hyped up at that time.&lt;/p&gt;
&lt;p id="d6d8"&gt;I realized one year back that my degree did not equip me with the skills necessary to become a data scientist.&lt;/p&gt;
&lt;p id="b99f"&gt;And it cost my parents approximately $25K.&lt;/p&gt;
&lt;p id="9466"&gt;This was before I knew about online learning platforms like edX and Coursera.&lt;/p&gt;
&lt;p id="1ca5"&gt;I taught myself all the skills required to become a data scientist. And I learnt it all outside my degree ‚Äî I learnt it online.&lt;/p&gt;
&lt;p id="e31a"&gt;Now, I&lt;span id="rmm"&gt;‚Äô&lt;/span&gt;m working as a data scientist for a data and AI company.&lt;/p&gt;
&lt;p id="c563"&gt;In an¬†article¬†I wrote last year, I provided a list of courses you could take to break into the data science industry.&lt;/p&gt;
&lt;p id="7681"&gt;I will refresh that list here, and provide you with a few more learning resources that will help you break into data science in 2021.&lt;/p&gt;
&lt;p id="7681"&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/a-complete-data-science-roadmap-in-2021/"&gt;Data Science Complete Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;




</description>
    </item>
    <item>
      <title>App Developer Roadmap 2021</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 18:09:25 +0000</pubDate>
      <link>https://dev.to/zainsaiff/app-developer-roadmap-2021-3h27</link>
      <guid>https://dev.to/zainsaiff/app-developer-roadmap-2021-3h27</guid>
      <description>&lt;h2&gt;What is App Development?&lt;/h2&gt;
&lt;p&gt;App Development refers to the creation of computer applications for use on mobile devices such as tablets, smartphones and smart watches. Mobile device features such as cameras, motion and location awareness can be used to create unique and inventive mobile-only applications for things such as taxi and bike sharing.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mobile devices typically have popular apps for searching, browsing and social media preinstalled and users can download and install additional apps&lt;/p&gt;From Google Play (Android) and the Apple App Store (iOS). Mobile applications are designed and built for different operating systems and developers will want to learn how to build for both the Android operating system and Apple‚Äôs iOS.
&lt;p&gt;&lt;span&gt;To learn android development from starting to become pro. You can follow these steps:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Originally Published: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/app-developer-roadmap/"&gt;App development roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bug Smash is Back ‚Äî Join the Challenge! üêõ</title>
      <author>Christina Gorton</author>
      <pubDate>Tue, 10 Aug 2021 18:04:51 +0000</pubDate>
      <link>https://dev.to/devteam/bug-smash-is-back-join-the-challenge-g41</link>
      <guid>https://dev.to/devteam/bug-smash-is-back-join-the-challenge-g41</guid>
      <description>&lt;h3&gt;
  &lt;a href="#announcing-our-second-dev-community-bug-smash"&gt;
  &lt;/a&gt;
  Announcing Our Second DEV Community Bug Smash!
&lt;/h3&gt;

&lt;p&gt;You might remember that a few months back, we announced a fun new opportunity to collaborate with other developers, participate in open source, and help maintainers make Forem a better place. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJmDooVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--w_vOeX_E--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129358/dbf5ae52-7042-4e48-b69d-519eaee20e07.jpeg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/join-us-for-the-first-dev-community-bug-smash-3plm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Join Us For the First DEV Community Bug Smash!&lt;/h2&gt;
      &lt;h3&gt;Christina Gorton for The DEV Team „Éª May 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devbugsmash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#contributorswanted&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 

&lt;p&gt;We saw such fantastic collaboration between all participants and merged so many helpful fixes during the first DEV Community Bug Smash that we decided to bring it back for another month! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#heres-everything-you-need-to-know-about-the-dev-community-bug-smash-this-time-around"&gt;
  &lt;/a&gt;
  Here‚Äôs everything you need to know about the DEV Community Bug Smash this time around.
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Rules have been updated since the first Bug Smash. Even if you participated last time, please read them!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#details"&gt;
  &lt;/a&gt;
  Details
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#what-is-bug-smash"&gt;
  &lt;/a&gt;
  What is Bug Smash?
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;The DEV Community Bug Smash challenges members of our community to resolve one (or several!) of our predetermined bugs in the Forem codebase &lt;a href="https://github.com/forem/forem/labels/Bug%20Smash"&gt;here&lt;/a&gt; in exchange for open source community involvement, a limited-edition profile badge for eligible contributions, and a sticker pack!&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#when-is-bug-smash"&gt;
  &lt;/a&gt;
  When is Bug Smash?
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bug Smash will be running from August 10th through September 3rd, 2021. &lt;/p&gt;

&lt;p&gt;Please note that anyone actively working on Pull Requests can go over the September 3rd deadline.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#who-can-participate"&gt;
  &lt;/a&gt;
  Who can participate?
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bug Smash is open to anyone in our community who would like to participate. We added the general &lt;code&gt;bug smash&lt;/code&gt; label to all eligible issues but please consider your comfort and experience level when selecting a bug to tackle.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#where-will-i-be-smashing-bugs"&gt;
  &lt;/a&gt;
  Where will I be smashing bugs?
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;In the Forem repository!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;For Bug Smash, you‚Äôll be tackling issues labeled with (you guessed it,) &lt;code&gt;bug smash&lt;/code&gt; in our repo (click &lt;a href="https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3A%22bug+smash%22+no%3Aassignee"&gt;here&lt;/a&gt; to see the full list). Any issue not labeled with &lt;code&gt;bug smash&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; part of the DEV Community Bug Smash. &lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#why-should-i-participate"&gt;
  &lt;/a&gt;
  Why should I participate?
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;So many reasons! The DEV Community Bug Smash is a great way for you to get more practice with tackling issues in GitHub if you‚Äôre a newer developer. If you have more experience, this initiative is a fantastic opportunity to help a community you know and love (DEV!) while lending a hand to the Forem engineering team on issues that they might not have the capacity to work on at the moment. &lt;/p&gt;

&lt;p&gt;The best part? We‚Äôll be awarding limited-edition DEV profile badges and a sticker pack to anyone who submits a &lt;code&gt;bug smash&lt;/code&gt; PR that gets approved. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Greener GitHub contribution history, community camaraderie, and cool rewards&lt;/strong&gt; üòé&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#how-to-participate-stepbystep"&gt;
  &lt;/a&gt;
  How to Participate, Step-by-Step
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Please read our &lt;a href="https://docs.forem.com/contributing/forem/"&gt;Contributing to Forem&lt;/a&gt; guide for contribution guidelines, rules, and etiquette related to working in our codebase. Also, please revisit our &lt;a href="https://dev.to/code-of-conduct"&gt;Code of Conduct&lt;/a&gt; for overall expectations on how to treat one another.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Claim an &lt;a href="https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3A%22bug+smash%22+no%3Aassignee"&gt;issue labeled &lt;code&gt;bug smash&lt;/code&gt;&lt;/a&gt;, based on your experience level by commenting on it.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;You will be notified by our team with a confirmation if you‚Äôve been assigned to that issue. If the issue is already taken, we reply with a suggestion of a different one for you to tackle&lt;/li&gt;
&lt;li&gt;Once you are assigned a bug, create a pull request (PR) (&lt;a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue"&gt;don‚Äôt forget to link to the original issue!&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;After you‚Äôve submitted a pull request (PR) for your assigned bug, you‚Äôll be notified by our team if it was approved. &lt;/li&gt;
&lt;li&gt;Once it‚Äôs approved (üéâ) please use &lt;a href="//dev.to/new/devbugsmash"&gt;this template&lt;/a&gt; to write a reflection post about the bug you smashed, right here on DEV! &lt;/li&gt;
&lt;li&gt;Find another post on DEV labeled &lt;a href="//dev.to/t/devbugsmash"&gt;devbugsmash&lt;/a&gt; and leave a comment or a question! Keep it encouraging, kind, and collaborative.&lt;/li&gt;
&lt;li&gt;After you‚Äôve completed steps 1-7, we‚Äôll reach out with details on getting your sticker pack. We will also award badges at this time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: We will only be awarding one badge and one sticker pack per participant, regardless of how many bugs you smash. &lt;strong&gt;We determine who to award prizes to based on reflection posts shared on DEV&lt;/strong&gt; and the validity of their smashed bugs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thanks in advance for your patience following the publication of your Bug Smash post on DEV. The Forem engineering team is small but mighty and it will take focused time on their behalf to review Bug Smash PRs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the list of Bug Smash-eligible issues, click &lt;a href="https://github.com/forem/forem/issues?q=is%3Aissue+is%3Aopen+label%3A%22bug+smash%22+no%3Aassignee"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;We hope you enjoy round two of the DEV Community Bug Smash! Remember, the goals here are to have fun and collaborate with your peers while helping to improve the Forem repository. Please keep basic &lt;a href="%E2%80%8B%E2%80%8Bhttps://dev.to/azure/contributing-to-open-source-projects-contributors-etiquette-1bdm"&gt;open source contribution etiquette&lt;/a&gt; in mind and abide by our &lt;a href="https://dev.to/code-of-conduct"&gt;Code of Conduct&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;From all of us at &lt;a href="https://dev.to/about"&gt;Team Forem&lt;/a&gt;, thank you for your community spirit and dedication to improving our code for everyone‚Äôs benefit. üíñ&lt;/p&gt;

</description>
      <category>devbugsmash</category>
      <category>opensource</category>
      <category>forem</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>10 Magical JavaScript Tips For EVERY Frontend Developer</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:49:49 +0000</pubDate>
      <link>https://dev.to/zainsaiff/10-magical-javascript-tips-for-every-frontend-developer-1cig</link>
      <guid>https://dev.to/zainsaiff/10-magical-javascript-tips-for-every-frontend-developer-1cig</guid>
      <description>&lt;p id="f6cc"&gt;In this article, we will discuss the 15 useful JavaScript tips for every web developer to save their valuable and precious time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p id="e1bb"&gt;I am always ready to learn although I do not always like being taught&lt;/p&gt;

&lt;p id="0fe5"&gt;‚Äî Winston Churchill&lt;/p&gt;


&lt;/blockquote&gt;
&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;h1 id="fa85"&gt;Tip 1. Flatten the array of the array&lt;/h1&gt;
&lt;p id="4e31"&gt;This tip will help you to flatten a deeply nested array of arrays by using¬†&lt;code&gt;Infinity&lt;/code&gt;¬†in¬†&lt;code&gt;flat&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;span id="e3aa"&gt;var array = [123, 500, [1, 2, [34, 56, 67, [234, 1245], 900]], 845, [30257]]&lt;/span&gt;&lt;span id="16da"&gt;//flatten array of array&lt;br&gt;array.flat(Infinity)&lt;/span&gt;&lt;span id="b0d8"&gt;// output:&lt;br&gt;// [123, 500, 1, 2, 34, 56, 67, 234, 1245, 900, 845, 30257]&lt;/span&gt;&lt;/pre&gt;
&lt;h1 id="902c"&gt;Tip 2. Easy Exchange Variables&lt;/h1&gt;
&lt;p id="ebf9"&gt;You probably swap the two variables using a third variable¬†&lt;code&gt;temp&lt;/code&gt;. But this tip will show you a new way to exchange variables using destructuring.&lt;/p&gt;
&lt;pre&gt;&lt;span id="298c"&gt;//example 1&lt;/span&gt;&lt;span id="3316"&gt;var a = 6;&lt;br&gt;var b = 7;&lt;/span&gt;&lt;span id="b133"&gt;[a,b] = [b,a]&lt;/span&gt;&lt;span id="aa36"&gt;console.log(a,b) // 7 6&lt;/span&gt;&lt;/pre&gt;
&lt;br&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/magical-javascript-tips-for-every-web-developer/"&gt;10 Magical JavaScript Tips for Every Web Developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;

</description>
    </item>
    <item>
      <title>String Manipulation in JavaScript</title>
      <author>Swarnali Roy</author>
      <pubDate>Tue, 10 Aug 2021 17:34:51 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/javascript-string-manipulation-1pb0</link>
      <guid>https://dev.to/swarnaliroy94/javascript-string-manipulation-1pb0</guid>
      <description>&lt;p&gt;In JavaScript, when we want to define any string we must start and end with either a &lt;em&gt;single (' ')&lt;/em&gt; or &lt;em&gt;double quote(" ")&lt;/em&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My name is Swarnali Roy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is Swarnali Roy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to manipulate strings in our codes often and for that we have various ways. Today's post is all about &lt;em&gt;String Manipulation in JavaScript&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#largeorangediamond-escaping-literal-quotes-with-backslash-"&gt;
  &lt;/a&gt;
  üî∂ Escaping Literal Quotes with Backslash ( \ )
&lt;/h3&gt;

&lt;p&gt;Sometimes, if we want to include a &lt;em&gt;literal quote&lt;/em&gt;: " or ' inside of the string, then how will we manipulate the string? The following two examples will show how it works.&lt;/p&gt;

&lt;p&gt;üîπ Example 1: Using a literal quote: &lt;em&gt;double quote (" ")&lt;/em&gt; inside of the string which is also started with a double quote("") üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She said, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Swarnali&lt;/span&gt; &lt;span class="nx"&gt;Roy&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/*output : let myName = "She said, " My name is Swarnali Roy ".";
                                     ^^
SyntaxError: Unexpected identifier */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;output&lt;/em&gt; shows a SyntaxError, as the starting quotation(") is looking for it's closing quotation which is found after &lt;em&gt;"She said, "&lt;/em&gt;. So it takes &lt;em&gt;"She said, "&lt;/em&gt; as a string. But the other part &lt;em&gt;My name is Swarnali Roy&lt;/em&gt; is neither a &lt;em&gt;string&lt;/em&gt; nor any &lt;em&gt;syntax&lt;/em&gt; because it is outside of the "" and again find the &lt;em&gt;full stop/period(.)&lt;/em&gt; within the "". &lt;/p&gt;

&lt;p&gt;üîπ Example 2: Using a literal quote: &lt;em&gt;single quote (' ')&lt;/em&gt; within a string that is started and ended with "" üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She said, ' My name is Swarnali Roy '.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//output: She said, ' My name is Swarnali Roy '.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the output shows the expected syntax as we have used single quotation inside double quotation and there is no confusion in starting and ending quotation marks. &lt;/p&gt;

&lt;p&gt;This was a simple example, but in a complex string it is not so easy to manipulate a string like this. There comes a concept of &lt;em&gt;escaping literal quotes&lt;/em&gt; using a &lt;em&gt;backslash ( \ )&lt;/em&gt; in front of the quote. This signals to &lt;em&gt;JavaScript&lt;/em&gt; that the following quote is not the &lt;em&gt;end of the string&lt;/em&gt;, but should instead appear &lt;em&gt;inside the string&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's solve the SyntaxError of the &lt;em&gt;Example 1&lt;/em&gt; using this process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She said, &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; My name is Swarnali Roy &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//output: She said, " My name is Swarnali Roy ".&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the backslash is separating the literal quote and the quote is appearing inside the string. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#largeorangediamond-escape-sequences-in-strings"&gt;
  &lt;/a&gt;
  üî∂ Escape Sequences in Strings
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Quotes&lt;/em&gt; are not the only characters that can be &lt;em&gt;escaped&lt;/em&gt; inside a string. There are two reasons to use escaping characters:&lt;/p&gt;

&lt;p&gt;‚óΩ It allows us to use &lt;em&gt;characters&lt;/em&gt; that may not otherwise be able to type out, such as a &lt;em&gt;newline&lt;/em&gt; or &lt;em&gt;tab&lt;/em&gt;.&lt;br&gt;
‚óΩ To allow us to represent &lt;em&gt;multiple quotes&lt;/em&gt; in a string without &lt;em&gt;JavaScript&lt;/em&gt; misinterpreting what we actually mean.&lt;/p&gt;

&lt;p&gt;Some important &lt;em&gt;syntax&lt;/em&gt; are: &lt;br&gt;
üîπSingle Quote : &lt;code&gt;\'&lt;/code&gt;&lt;br&gt;
üîπDouble Quote : &lt;code&gt;\"&lt;/code&gt;&lt;br&gt;
üîπnewline : &lt;code&gt;\n&lt;/code&gt;&lt;br&gt;
üîπtab : &lt;code&gt;\t&lt;/code&gt;&lt;br&gt;
üîπbackslash: &lt;code&gt;\\&lt;/code&gt;&lt;br&gt;
üîπcarriage return : &lt;code&gt;\r&lt;/code&gt;&lt;br&gt;
üîπword boundary : &lt;code&gt;\b&lt;/code&gt;&lt;br&gt;
üîπform feed: &lt;code&gt;\f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A simple example is üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She said,&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s2"&gt;'My name is&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Swarnali Roy'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* output: She said,
               'My name is
           Swarnali Roy'. */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#largeorangediamond-concatenating-strings-with-operator"&gt;
  &lt;/a&gt;
  üî∂ Concatenating Strings with + Operator
&lt;/h3&gt;

&lt;p&gt;üîπ When we use the + operator with a &lt;em&gt;string&lt;/em&gt;, it is called the &lt;em&gt;concatenation operator&lt;/em&gt;. With this, we can &lt;em&gt;merge/concatenate&lt;/em&gt; more than one string and build a &lt;em&gt;new string&lt;/em&gt; out of those strings. &lt;br&gt;
Following is an &lt;em&gt;example&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Swarnali Roy. &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am an Engineer.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//op: My name is Swarnali Roy. I am an Engineer.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üîπ We can also use the * += operator * to concatenate a string onto the end of an &lt;em&gt;existing string variable&lt;/em&gt;. This can be very helpful for breaking a long string over several lines. For &lt;em&gt;example&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is Swarnali Roy &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;and I am a Software Engineer.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//output: My name is Swarnali Roy and I am a Software Engineer.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üîπ By using the &lt;em&gt;concatenation operator&lt;/em&gt;, we can also insert &lt;em&gt;one or more variables&lt;/em&gt; into a string that we want to build. A simple &lt;em&gt;example&lt;/em&gt; is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Swarnali Roy &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;passion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;to code.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;and I love &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;passion&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//output: My name is Swarnali Roy and I love to code.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üîπ We can also &lt;em&gt;append variables&lt;/em&gt; to a string using the &lt;em&gt;plus equals (+=)&lt;/em&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nameStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Swarnali &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;passion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;and I love programming.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nameStr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;passion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//op: I am Swarnali and I love programming.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#an-important-thing-to-notice-is-concatenation-does-not-add-spaces-between-concatenated-strings-so-well-need-to-add-them-ourselves"&gt;
  &lt;/a&gt;
  An important thing to notice is, &lt;em&gt;concatenation&lt;/em&gt; does not add &lt;em&gt;spaces&lt;/em&gt; between concatenated strings, so we'll need to add them ourselves.
&lt;/h6&gt;

&lt;p&gt;To make the process compact, JavaScript ES6 has introduced &lt;em&gt;Template Literals&lt;/em&gt;. They were called "Template Strings" in prior editions of the ES2015 specification.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#largeorangediamond-creating-strings-using-template-literals"&gt;
  &lt;/a&gt;
  üî∂ Creating Strings using Template Literals
&lt;/h3&gt;

&lt;p&gt;üîπ Template literals allow us to create multi-line strings and to use &lt;em&gt;string interpolation&lt;/em&gt; features to create &lt;br&gt;
strings.&lt;br&gt;
üîπ Generally if we want to solve any problem with normal string manipulation, we need to &lt;em&gt;concatenate&lt;/em&gt; the value with the string with + operator as we have seen till now. But &lt;em&gt;template literals&lt;/em&gt; make it simpler and remove the complications of using &lt;em&gt;single or *double quotes&lt;/em&gt;, &lt;em&gt;backslashes&lt;/em&gt; and &lt;em&gt;concatenation operators&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;em&gt;basic syntax&lt;/em&gt; is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="s2"&gt;`string text &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; string text`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see an &lt;em&gt;example&lt;/em&gt; of &lt;em&gt;Template Literals&lt;/em&gt; below and then get into the explanation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;weather&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cloudy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;when it rains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Today's weather is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;weather&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.
I love &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;myFav&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Today's weather is cloudy.
I love when it rains. /
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we see the &lt;em&gt;example&lt;/em&gt;, a lot of things can be noticed.&lt;/p&gt;

&lt;p&gt;üîπ First of all, &lt;em&gt;back-ticks&lt;/em&gt; are used to wrap the string, not &lt;em&gt;quotes (' or ")&lt;/em&gt;.&lt;br&gt;
üîπ Secondly, it is a &lt;em&gt;multi-line string&lt;/em&gt;, both in the code and the output. This saves inserting &lt;em&gt;newline ( \n )&lt;/em&gt; within strings.&lt;br&gt;
üîπ The ${variable} syntax used in the &lt;em&gt;example&lt;/em&gt; is a  basically a &lt;em&gt;placeholder&lt;/em&gt;. So we don't need to concatenate the &lt;em&gt;variables&lt;/em&gt; with the + operator anymore. We can simply put the variable in a &lt;em&gt;template literal&lt;/em&gt; and wrap it with ${ }, to add it to strings. &lt;br&gt;
üîπ Also, we can include other &lt;em&gt;expressions&lt;/em&gt;, for example ${a + b} directly to the template literal. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#hence-this-process-of-building-strings-gives-us-more-flexibility-to-create-robust-and-complex-strings"&gt;
  &lt;/a&gt;
  Hence, this process of building strings gives us more flexibility to create robust and complex strings.
&lt;/h4&gt;
&lt;h3&gt;
  &lt;a href="#immutability-of-strings"&gt;
  &lt;/a&gt;
  Immutability of Strings
&lt;/h3&gt;

&lt;p&gt;In JavaScript, string values are &lt;em&gt;immutable&lt;/em&gt;, which means that they cannot be changed once they're created. At first, let's create a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output : Cat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We cannot change the value of &lt;em&gt;animal&lt;/em&gt; to Bat, using &lt;em&gt;bracket notation [ ]&lt;/em&gt;, because the contents of the string cannot be altered by changing the value of their indices. The &lt;em&gt;individual characters&lt;/em&gt; of a string literal &lt;em&gt;cannot&lt;/em&gt; be changed.&lt;/p&gt;

&lt;p&gt;However, we can still &lt;em&gt;change&lt;/em&gt; the string value of &lt;em&gt;animal&lt;/em&gt; to &lt;em&gt;Bat&lt;/em&gt;. The only way to change it would be to &lt;em&gt;assign&lt;/em&gt; it with a new string value, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output : Bat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, I have some problems for my readers to solve. You can answer them in the discussion section. Any kind of questions are always welcome. &lt;/p&gt;

&lt;p&gt;1Ô∏è‚É£ Assign the following lines of text into a &lt;em&gt;single variable&lt;/em&gt; using &lt;em&gt;escape sequences&lt;/em&gt;. Expected output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Today&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Sunday&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;Tomorrow&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Monday&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="nx"&gt;What&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;yesterday&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2Ô∏è‚É£ Correct the code using backslash. &lt;br&gt;
Expected output: Anna said, "let's go on a trip."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Anna said, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s go on a trip.";
console.log(str);

//output: SyntaxError: Unexpected identifier
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3Ô∏è‚É£ Using "Template Literals" change the following code. The output will be the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;realName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Robert Pattinson &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reelName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edward Cullen &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;movieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Twilight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fullStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;realName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;played the role of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;reelName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in the movie &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;movieName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//output: Robert Pattinson played the role of Edward Cullen in the movie Twilight.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>11 Git Command I Use Everyday</title>
      <author>Zain Souif</author>
      <pubDate>Tue, 10 Aug 2021 17:24:18 +0000</pubDate>
      <link>https://dev.to/zainsaiff/11-git-command-i-use-everyday-38a5</link>
      <guid>https://dev.to/zainsaiff/11-git-command-i-use-everyday-38a5</guid>
      <description>&lt;p&gt;When I started my career, I was always afraid of losing my code changes. Sometimes, I would copy the code to text files just to be sure that I won't miss something.&lt;/p&gt;
&lt;p&gt;That's not a great practice. If you know how to use git properly, you won't have these doubts.&lt;/p&gt;
&lt;p&gt;Git has everything you need to make you safe. And much more.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/11-git-commands-i-use-every-day/"&gt;11 Git Command i use Everyday&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS Certified Developer - Associate Resources</title>
      <author>Niharika Pujari</author>
      <pubDate>Tue, 10 Aug 2021 17:21:43 +0000</pubDate>
      <link>https://dev.to/niharikapujari/aws-certified-developer-associate-resources-4fp3</link>
      <guid>https://dev.to/niharikapujari/aws-certified-developer-associate-resources-4fp3</guid>
      <description>&lt;p&gt;Hello Again! I started researching on how I can achieve my next milestone.. Yes, the &lt;strong&gt;AWS Certified Developer&lt;/strong&gt; certification. Here is what I got:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exam-details"&gt;
  &lt;/a&gt;
  Exam Details
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Registration:&lt;/code&gt; &lt;a href="https://aws.amazon.com/certification/certified-developer-associate/"&gt;Schedule an exam&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Format:&lt;/code&gt; 65 questions; either multiple choice or multiple response&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Time:&lt;/code&gt; 130 mins to complete the exam&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cost:&lt;/code&gt; 150 USD (Practice exam: 20 USD)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Exam guide:&lt;/code&gt; &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf"&gt;https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://acloudguru.com/course/aws-certified-developer-associate"&gt;ACloudGuru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/WYPG6Sdx1os"&gt;AWS Certified Developer Associate (FIRST 6 HOURS)&lt;/a&gt; by Ranga Karanam&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/RrKRN9zRBWs"&gt;freeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/certification/certification-prep/"&gt;AWS Certification Prep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aws.training/Details/Curriculum?id=19185"&gt;Exam Readiness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#recommeneded-whitepapers"&gt;
  &lt;/a&gt;
  Recommeneded whitepapers:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;AWS Well-Architected Framework &lt;/li&gt;
&lt;li&gt;Practicing Continuous Integration and Continuous Delivery on AWS Accelerating Software Delivery with DevOps&lt;/li&gt;
&lt;li&gt;Microservices on AWS &lt;/li&gt;
&lt;li&gt;Serverless Architectures with AWS Lambda&lt;/li&gt;
&lt;li&gt;Optimizing Enterprise Economics with Serverless &lt;/li&gt;
&lt;li&gt;Architectures Running Containerized Microservices on AWS 
Blue/Green Deployments on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;Hope this resources help you to get started; help you to complete your AWS Certified Developer certification study and prepare you for the exam. &lt;/p&gt;

&lt;p&gt;P.S: &lt;br&gt;
I will update this post as and when I come across some interesting content. Stay Tuned!!&lt;/p&gt;

&lt;p&gt;If you are looking to complete the &lt;strong&gt;AWS Cloud Practitioner&lt;/strong&gt; certification, please refer my previous posts to help you getting started.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/niharikapujari/aws-cloud-practitioner-certification-resources-12ef"&gt;AWS Cloud Practitioner Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/niharikapujari/how-i-cleared-my-aws-cloud-practitioner-exam-in-3-weeks-24a1"&gt;How I cleared my AWS cloud practitioner exam in 3 weeks?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's all folks! üòé&lt;/p&gt;

</description>
      <category>aws</category>
      <category>career</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React Material Dashboard - Full-stack Version</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 10 Aug 2021 17:21:12 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-material-dashboard-full-stack-version-3i8f</link>
      <guid>https://dev.to/sm0ke/react-material-dashboard-full-stack-version-3i8f</guid>
      <description>&lt;p&gt;Hello coders, &lt;/p&gt;

&lt;p&gt;This article presents the &lt;strong&gt;Full-stack&lt;/strong&gt; version of &lt;strong&gt;&lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;React Material Dashboard&lt;/a&gt;&lt;/strong&gt;, a premium design crafted by Creative-Tim now usable with multiple API Backend Servers: Node JS, Flask, Django. The UI comes with pre-configured JWT authentication powered by a &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/api-unified-definition"&gt;Unified API Interface&lt;/a&gt; that makes this product compliant with more than one backend: Node JS, Flask, Django (FASTapi and Laravel coming soon).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;Full-stack React Material PRO&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fullstack-react-material-dashboard.appseed-srv1.com/"&gt;Full-stack React Material PRO&lt;/a&gt; - product page&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpwMqtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twotn95m9i6291vrxu6q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FQpwMqtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twotn95m9i6291vrxu6q.jpg" alt="Full-stack React Material Dashboard - The widgets page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  Product Features
&lt;/h2&gt;

&lt;p&gt;The product aims to help developers skip over the basics and start faster a new full-stack product already enhanced with authentication, a pixel-perfect UI powered by production-ready backends. The fact that makes this full-stack product unique is the JSON-API compliance over multiple servers: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;Node JS API&lt;/a&gt;: Typescript, Flexible persistence (SQLite, Mongo), TypeORM, Validation &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/django"&gt;Django API&lt;/a&gt;: JWT Authentication over DRF, SQLite, Docker &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/boilerplate-code/api-server/flask"&gt;Flask API&lt;/a&gt;: powered by Flask-JWT-extended, SQL-Alchemy, Docker&lt;/li&gt;
&lt;li&gt;Coming soon APIs: FASTapi, Laravel API &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the UI redirects the guest users to the login page. Once the user is authenticated, all private pages are unlocked. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implemented JWT Authentication Flow: Login, Logout, Register. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VMn0dwy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iueaggig5lt9ojaz4hjl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VMn0dwy8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iueaggig5lt9ojaz4hjl.jpg" alt="Full-stack React Material Dashboard - The login page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  How to use the product
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Full-stack React Material Dashboard&lt;/strong&gt; is built using a two-tier architecture where the UI is decoupled from the backend API server and communicates using requests secured by JWT tokens. The recommended way to start using this full-stack product is to follow a simple setup: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step #1&lt;/strong&gt; - Build and start the backend server&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step #2&lt;/strong&gt; - Build and start the UI&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a new user&lt;/strong&gt; via the registration page&lt;/li&gt;
&lt;li&gt;Authenticate and access the private pages&lt;/li&gt;
&lt;li&gt;Add your magic on top of the existing codebase. &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#start-the-backend-server"&gt;
  &lt;/a&gt;
  Start the backend server
&lt;/h2&gt;

&lt;p&gt;As mentioned before, the UI is configured to work with many backend servers that share a common API interface: Django, Node JS, Flask. Based on your license (free or commercial) the access is granted to the requested API Server. On this page, we will compile and start the free version of &lt;a href="https://docs.appseed.us/boilerplate-code/api-server/node-js"&gt;Node JS API&lt;/a&gt; (open-source product). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the sources&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-nodejs.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or Yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Run the SQLite migration and create the required tables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn typeorm migration:run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the API server - development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm dev
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The API interface used by the API is a simple JWT authentication layer that exposes the following methods: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USERS API:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/api/users/register&lt;/code&gt;: create a new user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/login&lt;/code&gt;: authenticate an existing user&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/logout&lt;/code&gt;: delete the associated JWT token&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/checkSession&lt;/code&gt;: check an existing JWT Token for validity&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/api/users/edit&lt;/code&gt; - update the information associated with a registered user &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, the backend API should be &amp;amp; and running on address: &lt;code&gt;http://localhost:5000&lt;/code&gt; and we can move on with the setup and build the React UI.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  Start the React UI
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;React Material Dashboard&lt;/strong&gt; being a commercial product, a license is required before getting access to the source code. In case you don't have a license, please access the &lt;a href="https://appseed.us/full-stack/react-material-dashboard"&gt;product page&lt;/a&gt; and purchase one. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/priv-react-material-dashboard-pro.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;priv-react-material-dashboard-pro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install dependencies via NPM or yarn&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Start in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Template Page - Pricing cards&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpQiV7TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0gfj6opcowrz4qvi6tw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpQiV7TP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0gfj6opcowrz4qvi6tw.jpg" alt="Full-stack React Material Dashboard - Pricing cards page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backend-integration"&gt;
  &lt;/a&gt;
  Backend Integration
&lt;/h2&gt;

&lt;p&gt;The backend API server address is saved in &lt;code&gt;src/config/constant.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;API_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Frontend api has been created at &lt;code&gt;src/api/auth.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;At this point this simple &lt;code&gt;full-stack&lt;/code&gt; product should be up &amp;amp; usable to create and authenticate new users. For more resources and support, please access:&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Get assistance via &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; page&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; - 24/7 LIVE assistance (registered users)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - free and commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/bundles/campaign"&gt;React Bundle&lt;/a&gt; - a discounted multi-product bundle &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>fullstack</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Quick start! getting started with flask, python3.</title>
      <author>chrisMurimi</author>
      <pubDate>Tue, 10 Aug 2021 17:14:05 +0000</pubDate>
      <link>https://dev.to/chris_murimi/quick-start-getting-started-with-flask-python3-40lp</link>
      <guid>https://dev.to/chris_murimi/quick-start-getting-started-with-flask-python3-40lp</guid>
      <description>&lt;p&gt;Python is a cool and beautiful programing language. It is beginner friendly, easy to learn and its syntax is very clear and concise. Python is yet powerful enough to be used by global tech giants in their products and applications. One area where Python shines is web development. Python offers many frameworks from which to choose from including bottle.py, Flask, Fast API, CherryPy, Pyramid, Django and web2py. This frameworks have been used is some of the most world applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flask"&gt;
  &lt;/a&gt;
  What is flask.
&lt;/h2&gt;

&lt;p&gt;Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. It has no database abstraction layer, form validation, or any other components where pre-existing third-party libraries provide common functions. However, Flask supports extensions that can add application features as if they were implemented in Flask itself. Extensions exist for object-relational mappers, form validation, upload handling, various open authentication technologies and several common framework related tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-flask"&gt;
  &lt;/a&gt;
  Setting up Flask.
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#python-virtual-environment"&gt;
  &lt;/a&gt;
  Python Virtual environment.
&lt;/h4&gt;

&lt;p&gt;A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a ‚Äúsystem‚Äù Python, i.e., one which is installed as part of your operating system.&lt;br&gt;
virtual environment is used to manage Python packages for different projects. Using virtual environment allows you to avoid installing Python packages globally which could break system tools or other projects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-install-virtual-environment-using-pip-use-this-code-in-windows-i-recommend-using-git-bash-than-the-windows-cmd"&gt;
  &lt;/a&gt;
  You can install virtual environment using pip. Use this code in windows (I recommend using git bash than the windows CMD):
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#create-the-virtual-environment"&gt;
  &lt;/a&gt;
  Create the virtual environment.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="n"&gt;my_env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;my_env is the name of the virtual environment we have created.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#activate-the-virtual-environment"&gt;
  &lt;/a&gt;
  Activate the virtual environment.
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;my_env&lt;/span&gt;\&lt;span class="n"&gt;Scripts&lt;/span&gt;\&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we have a virtual environment let install flask.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-flask"&gt;
  &lt;/a&gt;
  Installing flask.
&lt;/h2&gt;

&lt;p&gt;Flask is easy to set up. Use pip install flask to install both Flask and all of its dependencies including the Jinja2 templating system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-basic-flask-app"&gt;
  &lt;/a&gt;
  A basic Flask app.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This app doesn‚Äôt do much ‚Äî it just creates a website with a single route that displays ‚ÄúHello, world‚Äù in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routes-in-flask"&gt;
  &lt;/a&gt;
  Routes in flask.
&lt;/h2&gt;

&lt;p&gt;Routes in a Flask app can be created by defining a view function and associating a URL with it using the route() decorator. Routes specify how the Flask app handles requests it receives, such as what to display on the webpage at a certain URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#flask-app-object"&gt;
  &lt;/a&gt;
  Flask App Object.
&lt;/h2&gt;

&lt;p&gt;The Python flask module contains all the classes and functions needed for building a Flask app. The Flask class can be imported to create the main application object. It takes the name of the app as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-flask-app"&gt;
  &lt;/a&gt;
  Running Flask App.
&lt;/h2&gt;

&lt;p&gt;A Flask app can be run by exporting the FLASK_APP environment variable and running flask run in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>flask</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
