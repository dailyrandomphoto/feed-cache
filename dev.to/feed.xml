<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 20+ vue.js frameworks and libraries for your next project</title>
      <author>oyedeletemitope</author>
      <pubDate>Wed, 04 Aug 2021 01:23:14 +0000</pubDate>
      <link>https://dev.to/oyedeletemitope/top-20-vue-js-frameworks-and-libraries-for-your-next-project-2o4d</link>
      <guid>https://dev.to/oyedeletemitope/top-20-vue-js-frameworks-and-libraries-for-your-next-project-2o4d</guid>
      <description>&lt;p&gt;Vue is a progressive framework for building user interfaces. Unlike other monolithic frameworks, It offers a functionality-driven structure, in-detail documentation, and an easy learning curve to make it a favorable choice for beginners and experienced developers. It is an opportunity to move from other JavaScript frameworks to Vue.js&lt;br&gt;
In this article, we will be exploring over 20 vue frameworks and libraries that you might find useful for your next vue based projects.&lt;br&gt;
And also, each frameworks and libraries are spitted into three categories for easier navigation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SSR/SPA : In this category, we will be listing vue most popular spa (single page application) and ssr (server side rendered) application generators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component-based : From ui library to helpful custom component necessary for the success of your project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Miscellaneous:  All other important library that does not fall between the two categories above.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here we go!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ssrspa-generator"&gt;
  &lt;/a&gt;
  SSR/SPA Generator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1nuxt"&gt;
  &lt;/a&gt;
  1.Nuxt
&lt;/h3&gt;

&lt;p&gt;Server-Side Rendering is one of the most popular techniques to render SPAs on the server instead of the browser. It allows the website to have a faster page load time, and that is the key to a good user experience. Nuxt.js is built on SSR features, and with Nuxt, you can create SSR apps, PWAs, and SPAs, or you can use it as a static site generator. To get started &lt;a href="https://nuxtjs.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2vuepress"&gt;
  &lt;/a&gt;
  2.VuePress
&lt;/h3&gt;

&lt;p&gt;In layman’s terms, VuePress is a big player in Vue’s ecosystem that is widely used as a Vue-powered static site generator tool. It was presented for writing technical documentation, however, now it is used as a powerful headless CMS and the significant benefit of VuePress is that it lets you include Vue components into your Markdown files. VuePress provides extra power and flexibility to build your website like a regular Vue app. To get started &lt;a href="https://vuepress.vuejs.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3gridsome"&gt;
  &lt;/a&gt;
  3.Gridsome
&lt;/h3&gt;

&lt;p&gt;Gridsome is a modern website development framework for creating fast and secure websites and deploy it to Netlify or Amazon s3 – CDN. Through it has been lately introduced; however, it has gained immense popularity and followers amongst Vue developers. Gridsome creators were influenced by Gatsby.js – a site generator for React. Gridsome generates SEO-friendly HTML files based on the data source. The data source can be JSON, Markdown, CSV, Drupal, WordPress, MongoDB or Airtable, etc. Once the content is loaded, it turns into a single GraphQL Data Layer for centralized data management, and then you can extract it to build and deploy your Vue application. To get started &lt;a href="https://gridsome.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#componentbased-framework"&gt;
  &lt;/a&gt;
  Component-based framework
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1primevue"&gt;
  &lt;/a&gt;
  1.Primevue
&lt;/h3&gt;

&lt;p&gt;A Vue Component Library for amazing user interface design. Primevue is also available for Angular, Java, and React. To get started&lt;a href="https://madewithvuejs.com/primevue"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2vuestic"&gt;
  &lt;/a&gt;
  2.Vuestic
&lt;/h3&gt;

&lt;p&gt;Vuestic is a Vue component library to build responsive dashboards using the functionality of Material Forms, i18n, Bootstrap 4, Webpack, and Google maps. Vasili Savitski designed this library and Epicmax developed it. To get started&lt;a href="https://vuestic.dev/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-vee-validate"&gt;
  &lt;/a&gt;
  3. Vee Validate
&lt;/h3&gt;

&lt;p&gt;Another validation library for Vue that keeps a check on input and displaying errors. The PHP Framework Laravel’s validation inspired Vue to come up with this library. It is template-based, has zero dependencies, and has support from 40+ locales. It is one of the vue best practices to include Vue Validation while developing your web application. To get started&lt;a href="https://vee-validate.logaretm.com/v4/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4weex"&gt;
  &lt;/a&gt;
  4.Weex
&lt;/h3&gt;

&lt;p&gt;This one is a UI framework for Vue mobile applications for building modern and lightweight apps. Vue Developers will experience a new and vibrant mobile development experience when using Weex. To get started&lt;a href="http://emas.weex.io/guide/use-vue-in-weex.html#runtime-only-build"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5filepond"&gt;
  &lt;/a&gt;
  5.Filepond
&lt;/h3&gt;

&lt;p&gt;Filepond is a JS component library that is available for Angular, Vue, React, Svelte, and jQuery which can help you upload anything from anywhere. It offers amazing flexibility, easy optimization of images before uploading, and a flawless UX. To get started&lt;a href="https://pqina.nl/filepond/docs/getting-started/installation/vue/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6mint-ui"&gt;
  &lt;/a&gt;
  6.Mint UI
&lt;/h3&gt;

&lt;p&gt;Mint UI is a lightweight library that enables using varied CSS and JS components such that you can build mobile apps and cohesive web pages at a much faster rate. It provides an iOS-like theme for your mobile application components and it is loaded on demand, hence no file-size issues. To get started&lt;a href="https://madewithvuejs.com/mint-ui"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7vux"&gt;
  &lt;/a&gt;
  7.Vux
&lt;/h3&gt;

&lt;p&gt;Vux is a Vue Component library having Chinese origin and it has various mobile UI components as well as WeUI components from the company WeChat. The Vux workflow + Vue-loader + Webpack are supporting the Vux. Though most of the documentation of this library is in Chinese and very little English translation is available, but you can get help from the community. To get started&lt;a href="https://madewithvuejs.com/vux"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8iview"&gt;
  &lt;/a&gt;
  8.iView
&lt;/h3&gt;

&lt;p&gt;Based on Vue.js 2, iView is a popular UI toolkit providing several widgets and UI components having a clean and elegant design. The component library comes with its offline documentation and CLI tool to visualize projects. To get started&lt;a href="https://www.iviewui.com"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9vuelidate"&gt;
  &lt;/a&gt;
  9.Vuelidate
&lt;/h3&gt;

&lt;p&gt;A minimalistic validation component library for Vue, which is lightweight, simple, and is model-based. Vuelidate is decoupled from templates and has support from nested models, function composition, and collection validations. It helps you validate data from varied sources like computed values, Vuex getters, etc.&lt;br&gt;
To get started&lt;a href="https://vuelidate.js.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10eaglejs"&gt;
  &lt;/a&gt;
  10.Eagle.js
&lt;/h3&gt;

&lt;p&gt;Eagle is a Vue framework that presents a cool web-based slideshow and supports interactive widgets, themes, animations, reusable components, and more. You can easily customize the Eagle API for your Vue project. To get started&lt;a href="https://www.vuescript.com/hackable-slideshow-framework-built-vue-js-eagle-js/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11bootstrap-vue"&gt;
  &lt;/a&gt;
  11.Bootstrap Vue
&lt;/h3&gt;

&lt;p&gt;Bootstrap Vue is a frontend CSS and Vue component library that simply eliminates the JavaScript in the routine bootstrap components with Vue code. With Bootstrap Vue, you can build mobile-first and responsive, projects making use of frontend CSS library — Bootstrap v4. Bootstrap Vue is one of the fastest ways to build interactive interfaces using Vue and bootstrap as it provides a lot of resources, starter kits, and themes to startup quickly. To get started&lt;a href="https://bootstrap-vue.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12quasar"&gt;
  &lt;/a&gt;
  12.Quasar
&lt;/h3&gt;

&lt;p&gt;Quasar is a high performance, material design two and feature-complete node.js based collection of tools for building reliable, fast and engaging progressive web-app, developing and publishing a website; a secure way to make native apps for macOS, Linux, and Windows with Electron and a system for building cross-platform apps with Cordova. It’s an innovative solution for web developers derived from innovative ideas and concepts to alleviate the pain of managing the project with babel, eslinet, web pack, and more in a single framework. Quasar eliminates the use of additional libraries like Bootstrap, Hammerjs, or Momentjs as it has got that covered too. To get started&lt;a href="https://quasar.dev/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13vuetify"&gt;
  &lt;/a&gt;
  13.Vuetify
&lt;/h3&gt;

&lt;p&gt;Vuetify is a large set of 80+ crafted component libraries based on Material Design such as banners, badges, form inputs and controls, buttons, progress widgets, and many more such things that are sufficient for any application’s requirements. Whether you want to start a new application or looking for assistance to add them to the existing app, you can use it to build SSR apps, mobile apps, SPAs, and PWAs. To get started&lt;a href="https://vuetifyjs.com/en/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14element-ui"&gt;
  &lt;/a&gt;
  14.Element UI
&lt;/h3&gt;

&lt;p&gt;Element UI is a Vue component library with an active set of 500+ maintainers that are widely used by developers, designers, and product managers. Element UI is mostly used to create desktop applications, as its components are not responsive. It is one of the most popular component-based libraries of Vue.js. This library is based on a design system, so it precisely thought out down even the smallest detail. It provides lots of valuable information to assist you with components and several of its valuable resources. So, for the desktop application, without a doubt, it is one of the best libraries to take into consideration. To get started&lt;a href="https://madewithvuejs.com/element-ui"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15vue-tailwind"&gt;
  &lt;/a&gt;
  15.Vue Tailwind
&lt;/h3&gt;

&lt;p&gt;A Vue component library for lightweight and customizable components for your application. It is based on Tailwind-CSS. To get started&lt;a href="https://madewithvuejs.com/vue-tailwind"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16vue-multiselect"&gt;
  &lt;/a&gt;
  16.Vue Multiselect
&lt;/h3&gt;

&lt;p&gt;This Vue library component is for using the selections in your application. Multiselect offers no dependencies, single &amp;amp; multiple selections, tagging, filtering, drop-downs, search suggestions, and so much more.  To get started&lt;a href="https://vue-multiselect.js.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17buefy"&gt;
  &lt;/a&gt;
  17.Buefy
&lt;/h3&gt;

&lt;p&gt;Buefy is another lightweight Vue JS Component library that is based on Bulma. It helps you simplify your app UI by adding a JS layer of the interface created with BulmaCSS. You’ll see your Vue components following Material Design UX and Bulma designs.  To get started&lt;a href="https://buefy.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18keen-ui"&gt;
  &lt;/a&gt;
  18.Keen UI
&lt;/h3&gt;

&lt;p&gt;Keen UI helps you build interactive javascript components for page layout, CSS framework, and structure. It has a simple API, but it doesn’t support typogra[hy styles or grid-system.  To get started&lt;a href="https://madewithvuejs.com/keen-ui"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19cube-ui"&gt;
  &lt;/a&gt;
  19.Cube UI
&lt;/h3&gt;

&lt;p&gt;A Vue library for fantastic mobile user-interface design. It offers design scalability, keeps a uniform standard, and an interactive experience. To get started&lt;a href="https://www.vuescript.com/mobile-ui-library-vue-cube-ui/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1vue-cli"&gt;
  &lt;/a&gt;
  1.Vue CLI
&lt;/h3&gt;

&lt;p&gt;Vue CLI is a fully-featured set of tools with installed npm packages that allows you to create project structures and deploy boilerplates rapidly in your terminal. With the use of Vue CLI, you can experiment with new ideas to create instant prototypes to demonstrate new features. Moreover, Vue CLI offers support for web development tools like Babel, ESLint, PostCSS, TypeScript, Unit Testing, PWA Mocha, Cypress, Nightwatch, and end-to-end testing. However, the apple of the eye is Graphical UI – Vue UI that comes along with the CLI that lets you create new projects and manage them accordingly.  To get started&lt;a href="https://cli.vuejs.org/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2vuerouter"&gt;
  &lt;/a&gt;
  2.Vue-router
&lt;/h3&gt;

&lt;p&gt;If you are already familiar with other JavaScript frameworks, the concept of routing shouldn’t be new to you. The use of a router is to map the applications, and the Vue router supports component-based router configuration. Vue-router also supports wildcards, params, and querying to perform complex routing and the possibility to choose between hash mode or HTML5 history. To get started&lt;a href="https://router.vuejs.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3vuex"&gt;
  &lt;/a&gt;
  3.VueX
&lt;/h3&gt;

&lt;p&gt;vuex is a state management system that you can use as a centralized store to solve all the state management functions and to make sure that states are mutated predictably. To get started&lt;a href="https://vuex.vuejs.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4vue-apollo"&gt;
  &lt;/a&gt;
  4.Vue Apollo
&lt;/h3&gt;

&lt;p&gt;You might have heard lots of buzz around GraphQL, and if you are interested in integrating it with Vue.js, then I would like to suggest you try Vue Apollo. The library makes use of Vue in the combination of GraphQL/Apollo for a smooth as well as a pleasant experience. To get started&lt;a href="https://apollo.vuejs.org"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5vue-resource"&gt;
  &lt;/a&gt;
  5.Vue Resource
&lt;/h3&gt;

&lt;p&gt;Vue Resource is a Vue component library for handling web requests and responses. It either uses JSONP or XMLHttpRequest to undertake the procedure. It supports interceptors, Promise API, and URI templates. Web browsers like IE9+, Chrome, Firefox, Safari, Opera, etc. are supporting this Vue plugin. To get started&lt;a href="https://www.npmjs.com/package/vue-resource"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-poi"&gt;
  &lt;/a&gt;
  6. Poi
&lt;/h3&gt;

&lt;p&gt;Poi is a pre-configuration bundler for the web, and is popularly called a zero-config bundler. You can also avail Poi as a plugin so that you can use the extra features and options of the Poi library. To get started&lt;a href="https://poi.js.org/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conclusion&lt;br&gt;
There are tons of vue components out there, and this article has been able to help filter out the noise by listing the ones that are super important for your next project. If you find this useful, you should definitely share with your friends.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>100daysofcode</category>
      <category>vue</category>
    </item>
    <item>
      <title>Why NaN === NaN returns false in JavaScript ?!</title>
      <author>Sekab</author>
      <pubDate>Wed, 04 Aug 2021 01:01:06 +0000</pubDate>
      <link>https://dev.to/amrtaher1234/why-nan-nan-returns-false-in-javascript-14o6</link>
      <guid>https://dev.to/amrtaher1234/why-nan-nan-returns-false-in-javascript-14o6</guid>
      <description>&lt;p&gt;When people start exploring topics about JavaScript they get to feel a little weird sometimes and they also start to wonder why the heck do JavaScript act in such a manner, there have been even Github Repos like &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You Don't Know JS&lt;/a&gt; that explains how JavaScript works and so.&lt;/p&gt;

&lt;p&gt;Today I wanted to explain a gotcha topic that people usually post memes about and hate on JavaScript because of such a topic ( Which I kinda understand why they do so ), I will be explaining why &lt;code&gt;NaN === NaN&lt;/code&gt; results in a &lt;strong&gt;Falsy&lt;/strong&gt; expression. Let us get started with some basics first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-raw-endraw-and-raw-endraw-"&gt;
  &lt;/a&gt;
  What is the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Whenever we compare two variables using the double equal operator we compare them using only their values, meaning if a variable A contains some value and variable B contains some other value and we did &lt;code&gt;A == B&lt;/code&gt; what will happen is that JavaScript will check their current values and return &lt;code&gt;true&lt;/code&gt; if they are equal.&lt;/p&gt;

&lt;p&gt;but what if we did something like this: &lt;code&gt;"1" == 1&lt;/code&gt;, what would be the result of such expression? &lt;/p&gt;

&lt;p&gt;A normal person with some logical understanding would definitely guess that the output would be &lt;code&gt;false&lt;/code&gt; because we are comparing a string to a number even if they have the same characters.&lt;/p&gt;

&lt;p&gt;What will actually happen is that this output will be expressed as &lt;code&gt;true&lt;/code&gt;. Why is that? When we use the double equal operator JavaScript will attempt to convert and compare operands of different types, meaning that they both would be converted to the same type and in case of comparing a  number to a string JavaScript will try and convert the string to a number type like this: &lt;code&gt;Number("1") == 1&lt;/code&gt; which will output in that case &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What if we have a case in which we actually want to compare the types of the variables we have and then compare their values without attempting any conversion? &lt;br&gt;
In that case, using the triple equal operators or the &lt;strong&gt;Strict equality&lt;/strong&gt; would come in handy, what the strict equality operator simply does is checking if the operands are of the same type and then checks if they have the same value or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could simply imagine that JavaScript under the hood does something like this when using the strict equality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// in case of doing a === b;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-raw-nan-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;NaN&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;According to the MDN documentation &lt;code&gt;NaN&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NaN is a property of the global object. In other words, it is a variable in global scope.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically &lt;code&gt;NaN&lt;/code&gt; is simply a global object that describes what a not number is or whenever we have a variable that we are attempting to convert to a number and we fail it simply gives us &lt;code&gt;NaN&lt;/code&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;convertedToNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;convertedToNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// NaN;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-raw-typeof-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;typeof&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt; is simply a JavaScript operator that returns a string that indicates the type of an operand.&lt;/p&gt;

&lt;p&gt;There are basically 9 types in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Undefined "undefined"&lt;/li&gt;
&lt;li&gt;Null  "object" (see below)&lt;/li&gt;
&lt;li&gt;Boolean   "boolean"&lt;/li&gt;
&lt;li&gt;Number    "number"&lt;/li&gt;
&lt;li&gt;BigInt "bigint"&lt;/li&gt;
&lt;li&gt;String    "string"&lt;/li&gt;
&lt;li&gt;Symbol "symbol"&lt;/li&gt;
&lt;li&gt;Function object (implements [[Call]] in ECMA-262 terms)   "function"&lt;/li&gt;
&lt;li&gt;object    "object"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whenever &lt;code&gt;typeof&lt;/code&gt; is used one of these types would be the result, an example for that would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="c1"&gt;// string;&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// number;&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// function;&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// boolean;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-raw-nan-nan-endraw-returns-raw-false-endraw-"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;NaN === NaN&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;And finally, let us get into the core of this article, why when we explained how strict equality works and what is NaN does this expression provide us with a falsy value?&lt;/p&gt;

&lt;p&gt;let us simplify the answer by looking into the strict equality comparison algorithm:&lt;/p&gt;

&lt;p&gt;let us define the following two operands: x, and y. &lt;/p&gt;

&lt;p&gt;according to the JavaScript documentation ( This is a snippet from the docs ), the comparison algorithm works in the following matter:&lt;/p&gt;

&lt;p&gt;The comparison x === y, where x and y are values, produces true or false. Such a comparison is performed as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If Type(x) is Number, then&lt;br&gt;
If x is NaN, return false.&lt;br&gt;
If y is NaN, return false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that the algorithm first checks if one of the operands is &lt;code&gt;NaN&lt;/code&gt; before even checking their types and if so it will return &lt;code&gt;false&lt;/code&gt; anyways.&lt;/p&gt;

&lt;p&gt;This may be a weird implementation of the comparison algorithm but there are some workarounds for this, we could use built-in functions like &lt;code&gt;Number.isNaN()&lt;/code&gt; to check whether the giving parameter is a &lt;code&gt;NaN&lt;/code&gt; or not instead of comparing it with &lt;code&gt;NaN&lt;/code&gt; directly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;invalidNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asdasdasd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// NaN;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resultOfNormalComparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;invalidNumber&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;resultOfBuiltInComparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invalidNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You could somehow disagree on the implementation of the comparison algorithm but there are workarounds to check if a given variable or parameter is a &lt;code&gt;NaN&lt;/code&gt; or not as shown above.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://es5.github.io/#x11.9.6"&gt;Comparison algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"&gt;Typeof guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN"&gt;NaN guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>Linux Terminal Cheat Sheet (Useful for Beginners)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 03 Aug 2021 23:55:18 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/linux-terminal-cheat-sheet-useful-for-beginners-2e6c</link>
      <guid>https://dev.to/cleancodestudio/linux-terminal-cheat-sheet-useful-for-beginners-2e6c</guid>
      <description>&lt;p&gt;A Linux cheat sheet for beginners (short, sweet, and to the point)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#linux-useful-commands-terminal-cheat-sheet"&gt;
  &lt;/a&gt;
  Linux (Useful Commands) Terminal Cheat Sheet
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Navigation Commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;passwd&lt;/code&gt; - change password&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; - list directory (Can point at any point on the machine)

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-la&lt;/code&gt; a flag that lists all + permissions and hidden files&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pwd&lt;/code&gt; - print working directory - check where you're at&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd&lt;/code&gt; - change directory (Can address at any point in the machine file system)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir&lt;/code&gt; - make directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rmdir&lt;/code&gt; - remove director&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm&lt;/code&gt; - remove files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;echo&lt;/code&gt; - sends data (if no destination is given than data is sent as output to the terminal)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cp&lt;/code&gt; copy a file (&lt;code&gt;cp [source] [desintation]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv&lt;/code&gt; - mv a file (&lt;code&gt;mv [source] [desintation]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;locate&lt;/code&gt; - locate a file on the machine (&lt;code&gt;locate [filename]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;updatedb&lt;/code&gt; - updates the directory database (must run before running locate)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;man&lt;/code&gt; - manual page of any command&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep&lt;/code&gt; - search for the following words (can be used to check if a file contains specific info)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux is case sensitive so be aware of your capital letters!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;./&lt;/code&gt; - your directory right now&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;../&lt;/code&gt; - previous folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;~&lt;/code&gt; - the users root folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;|&lt;/code&gt; - pipe the output of one command into another&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt; - use command on the following file (overwrite)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; - use command on following file (appends)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Privilege's and user commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cat&lt;/code&gt; - reads a file to the terminal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;chmod&lt;/code&gt; - changes permissions for a file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;adduser&lt;/code&gt; - make a new user &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sudo&lt;/code&gt; - give root permissions for the following command being executed &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;su&lt;/code&gt; - switch user &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Network Commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ifconfig&lt;/code&gt; - print network information&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;iwconfig&lt;/code&gt; - wireless network information&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ping&lt;/code&gt; - ping an ip address (&lt;code&gt;-c&lt;/code&gt; flag lets you define how many times you wish to ping the given ip address)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arp -a&lt;/code&gt; - send out an arp request to check for machines on the network&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;netstat -a&lt;/code&gt; - shows all open ports and what is connected to these ports&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;route&lt;/code&gt; - shows a routing table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Viewing, creating, and editing commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;history&lt;/code&gt; - lists the 15 commands you entered (&lt;code&gt;history | grep [command]&lt;/code&gt; shows all the times you run a command on the machine (including specific syntax))&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;touch&lt;/code&gt; - create a file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nano&lt;/code&gt; - use the nano text editor&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apt-get&lt;/code&gt; - install [program name] - install a program on the machine (can be run without the install)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apt install&lt;/code&gt; - install a file from the system / kali - server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;apt purge&lt;/code&gt; - program name - (You have to use the * *)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pip install&lt;/code&gt; - run an installer for local files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git clone&lt;/code&gt; - clone a github repository (This is a plugin and does not come preinstalled on most linux distributions!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Webserver Commands:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;service apache2 start&lt;/code&gt; - start a webserver&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;service ssh start&lt;/code&gt; - start an ssh server&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;service postgresql start&lt;/code&gt; - a service that starts with metasploit &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;service apache2 stop&lt;/code&gt; - stops the webserver&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;systemctl enable [program name]&lt;/code&gt; - start the service when the machine turns on&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Important files/directories in Linux:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/etc/passwd&lt;/code&gt; - a file that stores all of the users in the system&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/etc/shadow&lt;/code&gt; - stores all of the passwords in the system&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/var/log/auth.log&lt;/code&gt; - authentication reports&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading and feel free to follow Clean Code Studio for more! &lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/design-patterns"&gt;Java Script Design Patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
[JavaScript Algorithm Examples]&lt;/p&gt;

</description>
      <category>linux</category>
      <category>commands</category>
      <category>terminal</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to create server files with Flask</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Tue, 03 Aug 2021 23:38:39 +0000</pubDate>
      <link>https://dev.to/nelsoncode/how-to-create-server-files-with-flask-4hdp</link>
      <guid>https://dev.to/nelsoncode/how-to-create-server-files-with-flask-4hdp</guid>
      <description>&lt;p&gt;In this example I will show you how to upload, download, delete and obtain files with Flask&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-upload-multiple-files-by-form-data-using-flask"&gt;
  &lt;/a&gt;
  How to upload multiple files by Form Data using Flask
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_image&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/images/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Imagen saved"&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Folder not found"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-download-files-using-flask"&gt;
  &lt;/a&gt;
  How to download files using Flask
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/download/file/&amp;lt;string:filename&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/images/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-get-files-using-flask"&gt;
  &lt;/a&gt;
  How to get files using Flask
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/file/&amp;lt;string:filename&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/images/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_attachment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-delete-files-using-flask-with-form-data"&gt;
  &lt;/a&gt;
  How to delete files using Flask with Form Data
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/delete'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_image&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# CHECK IF EXISTS FILE
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/images/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Esto no es un archivo"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/images/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;OSError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Error :(("&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"File deleted"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>flask</category>
      <category>backend</category>
      <category>python</category>
      <category>nelsoncode</category>
    </item>
    <item>
      <title>HTML 5 - Best Practice</title>
      <author>DevCronin</author>
      <pubDate>Tue, 03 Aug 2021 23:26:40 +0000</pubDate>
      <link>https://dev.to/devcronin/html-5-best-practice-3idp</link>
      <guid>https://dev.to/devcronin/html-5-best-practice-3idp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#with-html-5-it-can-be-difficult-to-know-what-is-best-practice-and-still-relevant"&gt;
  &lt;/a&gt;
  With HTML 5, it can be difficult to know what is best practice and still relevant.
&lt;/h2&gt;

&lt;p&gt;Some features were used before the HTML 5 standard, but they continue to emerge through developers' habits. In this case, these features no longer serve a purpose.&lt;/p&gt;

&lt;p&gt;Other features are examples of implementations that made it into the HTML 5 standard but are no longer considered best practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-why-would-these-lingering-features-still-exist"&gt;
  &lt;/a&gt;
  So why would these lingering features still exist?
&lt;/h2&gt;

&lt;p&gt;My take on it is: &lt;strong&gt;change is difficult&lt;/strong&gt;. Developers have to adapt and constantly be learning because the field changes often.&lt;/p&gt;

&lt;p&gt;Sometimes there are still instances where some of these features are used even if they are not common. &lt;/p&gt;

&lt;p&gt;Additionally, it can be to support backward compatibility to previous HTML versions.&lt;/p&gt;

&lt;p&gt;## What are HTML 5 best practices?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declare-the-doctype-first-and-as-raw-ltdoctype-htmlgt-endraw-"&gt;
  &lt;/a&gt;
  Declare the doctype first and as &lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is the current document type and it should be the first line of your document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#external-css-link-in-the-raw-ltheadgt-endraw-tag"&gt;
  &lt;/a&gt;
  External CSS link in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag
&lt;/h3&gt;

&lt;p&gt;Although there are use cases for both inline and internal styling, the best practice is to use an external CSS link. &lt;/p&gt;

&lt;p&gt;One reason is that browsers can cache an externally linked style sheet and therefore load faster after the initial visit. Another reason for this is inline and internal styles are harder to maintain and organize. &lt;/p&gt;

&lt;p&gt;Links located in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section will improve load time. If necessary, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; should be last.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#close-your-tags"&gt;
  &lt;/a&gt;
  Close your tags
&lt;/h3&gt;

&lt;p&gt;Every tag should be followed with a corresponding closing tag. This will prevent validation errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mark-up-should-be-in-the-lower-case-only"&gt;
  &lt;/a&gt;
  Mark up should be in the lower case only
&lt;/h3&gt;

&lt;p&gt;It is a developer standard to use the lower case; web development is no exception. This will make for easier reading and writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-appropriate-and-descriptive-tags"&gt;
  &lt;/a&gt;
  Use appropriate and descriptive tags
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is fine when there is not a better tag such as &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&lt;/code&gt;, &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#include-alt-tags-and-size-on-all-images"&gt;
  &lt;/a&gt;
  Include alt tags and size on all images
&lt;/h3&gt;

&lt;p&gt;The alt tag improves accessibility for screen readers. Defining image size helps the page load smoothly because it determines the page's structure while loading. This can be changed in CSS for responsiveness.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-raw-lth1gt-endraw-tag-only-once"&gt;
  &lt;/a&gt;
  Use the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag only once
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is used for the document's title or major heading. It should always be used and only one time for each document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-raw-lth2gt-endraw-through-raw-lth6gt-endraw-in-ascending-order"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; in ascending order
&lt;/h3&gt;

&lt;p&gt;The order should reflect the size and importance of each heading. The tag &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; being the largest and most important, and the &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; tag for the smallest. &lt;/p&gt;

&lt;p&gt;Do not skip any and only include as many as needed. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-correct-indentation"&gt;
  &lt;/a&gt;
  Use correct indentation
&lt;/h3&gt;

&lt;p&gt;Acceptable indentation is two or four spaces. It is best to avoid tabs because of the inconsistency between editors. Most editors have custom spacing to make this easier. &lt;/p&gt;

&lt;p&gt;Each nested element should be indented. Elements on the same level should be at the same indentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nest-inline-elements-inside-of-block-elements"&gt;
  &lt;/a&gt;
  Nest Inline elements inside of block elements
&lt;/h3&gt;

&lt;p&gt;Block elements such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; should contain the inline elements &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; etc...   Inline elements cannot contain block elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;This is not a comprehensive list of all HTML best practices. The best way to learn more about them is to look at other developers' documentation and practice.&lt;/p&gt;

&lt;p&gt;Happy coding and good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ZachCronin"&gt;&lt;strong&gt;Support and Buy me a Coffee&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Renovando git: bye bye, checkout
</title>
      <author>Franco Cuarterolo</author>
      <pubDate>Tue, 03 Aug 2021 23:09:58 +0000</pubDate>
      <link>https://dev.to/cuarte4/renovando-git-bye-bye-checkout-28f5</link>
      <guid>https://dev.to/cuarte4/renovando-git-bye-bye-checkout-28f5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#renovando-git-bye-bye-checkout"&gt;
  &lt;/a&gt;
  Renovando git: bye bye, checkout
&lt;/h1&gt;

&lt;p&gt;Hay una serie de comandos de git que nos sabemos de memoria, pero existe uno en particular que tiene múltiples usos: &lt;code&gt;git checkout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ah pero que tenga múltiples uso significa que es más practico. Si, y más probable que te equivoques&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; es un comando que podemos usar para crear y borrar branches, navegar entre ellas y eliminar cambios que no están en estado de stage.&lt;/p&gt;

&lt;p&gt;Ahora, la gente de git se despabiló y se dio cuenta de que sería mejor tener comandos más verbosos para las distintas acciones que hacemos con nuestro controlador de versiones.&lt;/p&gt;

&lt;p&gt;Cada uno de los siguientes comandos que te voy a mostrar realizan la misma acción que hacíamos antes con &lt;code&gt;git checkout&lt;/code&gt; pero escrito de una forma más amigable&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creando-ramas-git-branch"&gt;
  &lt;/a&gt;
  Creando ramas: git branch
&lt;/h2&gt;

&lt;p&gt;Cuando queremos crear una rama, es normal que nos encontremos usando el comando &lt;code&gt;git checkout mi-rama&lt;/code&gt;. Para hacerlo más entendible, lo vamos a cambiar por &lt;code&gt;git branch mi-rama&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navegando-entre-ramas-git-switch"&gt;
  &lt;/a&gt;
  Navegando entre ramas: git switch
&lt;/h2&gt;

&lt;p&gt;Es normal cambiar a una rama de un colega para revisar sus cambios o querer volver a &lt;code&gt;develop&lt;/code&gt; para tener los últimos cambios. Yo siempre usé para esto &lt;code&gt;git checkout rama-de-mi-colega&lt;/code&gt;. hasta que descubrí que existe un comando que es mucho más claro: &lt;code&gt;git switch rama-de-mi-colega&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#borrando-cambios-git-restore"&gt;
  &lt;/a&gt;
  Borrando cambios: git restore
&lt;/h2&gt;

&lt;p&gt;Cuando ya separé cuales son los cambios que van en el commit, lo demás se descarta, y para descartar recurrimos al &lt;code&gt;git checkout -- .&lt;/code&gt;. Hoy en día git te recomienda utilizar &lt;code&gt;git restore .&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;Utilizar el mismo comando para todo puede ser super practico, pero si recién estas empezando, puede que te provoque un par de USB (USB? ABC? ACV!). Nuestros comandos y nuestros procesos deben dejar claras nuestras intenciones, de esta manera podemos compartir un paso a paso y ser lo más claros posibles en nuestra comunicación técnica.&lt;/p&gt;

&lt;p&gt;Fuentes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-branch"&gt;git branch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-switch"&gt;git switch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-restore"&gt;git retore&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Reflections on 10,000 Hours of Programming</title>
      <author>mrick</author>
      <pubDate>Tue, 03 Aug 2021 23:00:26 +0000</pubDate>
      <link>https://dev.to/mrick/reflections-on-10-000-hours-of-programming-ge4</link>
      <guid>https://dev.to/mrick/reflections-on-10-000-hours-of-programming-ge4</guid>
      <description>&lt;p&gt;&lt;em&gt;This post originally appeared in my free daily newsletter on startups and engineering. &lt;br&gt;
You can join 200+ subscribers here: &lt;a href="https://matt-rickard.com/subscribe/"&gt;https://matt-rickard.com/subscribe/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key to achieving world-class expertise in any skill, is to a large extent, a matter of practicing the correct way, for a total of around 10,000 hours — Malcolm Gladwell in Outsiders&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I'm certainly not a world-class expert, but I have put my 10,000 hours of deliberate practice into programming. Here are 31 of my reflections on programming.&lt;/p&gt;

&lt;p&gt;These are reflections only about pure coding — no lessons sum up to "programming is about people" or "how to be a senior technical leader" (arguably more important to a career, but not the topic of this post).&lt;/p&gt;

&lt;p&gt;These reflections are just about deliberately writing code for 10,000 hours. Most don't apply to beginners. These reflections are not career advice. Think of them as lessons on being a technical guitarist, not about being a good band member. They are about becoming a better programmer for yourself.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Browsing the source is almost always faster than finding an answer on StackOverflow.&lt;/li&gt;
&lt;li&gt;In many cases, what you're working on doesn't have an answer on the internet. That usually means the problem is hard or important, or both.&lt;/li&gt;
&lt;li&gt;Delete as much code as you can.&lt;/li&gt;
&lt;li&gt;Syntactic sugar is usually bad.&lt;/li&gt;
&lt;li&gt;Simple is hard.&lt;/li&gt;
&lt;li&gt;Have a wide variety of tools and know which ones to use for the job.&lt;/li&gt;
&lt;li&gt;Know the internals of the most used ones like git and bash (I can get out of the most gnarly git rebase or merge).&lt;/li&gt;
&lt;li&gt;Build your own tools for repeated workflows. There is nothing faster than using a tool you made yourself (see: &lt;a href="https://matt-rickard.com/about/"&gt;software I wrote&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Only learn from the best. So when I was learning Go, I read the standard library.&lt;/li&gt;
&lt;li&gt;If it looks ugly, it is most likely a terrible mistake.&lt;/li&gt;
&lt;li&gt;If you have to write a comment that isn't a docstring, it should probably be refactored. Every new line of comments increases this probability.&lt;/li&gt;
&lt;li&gt;If you don't understand how your program runs in production, you don't understand the program itself. In my experience, the best engineers know how their program works in every environment.&lt;/li&gt;
&lt;li&gt;The above rule applies to the build pipeline as well.&lt;/li&gt;
&lt;li&gt;Use other people's code religiously.&lt;/li&gt;
&lt;li&gt;Corollary: Most code out there is terrible. Sometimes it's easier to write a better version yourself.&lt;/li&gt;
&lt;li&gt;A rough rule of thumb: never take a direct dependency on a small library that you could easily rewrite or a large library that should have been small.&lt;/li&gt;
&lt;li&gt;Know when to break the rules. For rules like "don't repeat yourself," sometimes a little repetition is better than a bit of dependency.
18.Organizing your code into modules, packages, and functions is important. Knowing where API boundaries will materialize is an art.&lt;/li&gt;
&lt;li&gt;Pick the most efficient tool most of the time, but also pick what you know. Is Arch Linux the most efficient operating system for the modern developer? For me, it is, but for most, probably not. Should you use acme? Only if you're Rob Pike.&lt;/li&gt;
&lt;li&gt;Avoid cyclomatic complexity. Novice coders don't even know that they've tangled the dependency graph until it's too late.&lt;/li&gt;
&lt;li&gt;Avoid nesting conditionals deeply. Have common sense about your conditional tests and naming convention.&lt;/li&gt;
&lt;li&gt;Name variables correctly. Again, an art.&lt;/li&gt;
&lt;li&gt;While rare, sometimes it's a problem with the compiler. Otherwise, it's always DNS.&lt;/li&gt;
&lt;li&gt;Use esoteric language features sparingly, but use them when you're supposed to, for that is the point.&lt;/li&gt;
&lt;li&gt;Technology does not diffuse equally. For example, there is a lot that frontend developers could learn from low-level engineers (especially now that everything is compiled). 26. Likewise, there are UX and usability features that JavaScript developers could teach cloud engineers.&lt;/li&gt;
&lt;li&gt;As a result, different kinds of engineers look at the world differently.&lt;/li&gt;
&lt;li&gt;Some programmers are 10x more efficient than others. I know because I've been both a 10x programmer and a -1x programmer.&lt;/li&gt;
&lt;li&gt;There's no correlation between being a 10x programmer and a 10x employee (maybe a negative one).&lt;/li&gt;
&lt;li&gt;Good APIs are easy to use and hard to misuse.
The configuration cycle goes from hardcoded values to environment variables, to CLI flags, to a configuration file, to a templated configuration file, to a DSL, to a generic bash script, and back to hardcoded values. Know where you are on this Heptagon of Configuration.&lt;/li&gt;
&lt;li&gt;All layers of abstraction are malleable. If you run into a fundamental wall, sometimes the answer is to go down a layer of abstraction. You aren't confined to the surface.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Where did I put in my 10,000 hours?&lt;/strong&gt; Well, I've been programming for about 15 years. Most recently, I worked as a professional software engineer at Google on Kubernetes and Blackstone, the private equity firm. Before that, I spent most of college in the library writing programs for my own projects instead of writing proofs (which I should have been doing as a math major). And before that, I was hacking away at all sorts of things — running a botnet on RuneScape, writing a Latin translation app for the iPhone (so I could do better on my Latin exams), creating a web clipper, or ricing up my desktop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What did I do for the 10,000 hours?&lt;/strong&gt; The most recent work was in distributed systems, but I've written code across the stack. Languages like PHP, JavaScript, Go, Ruby, Python, C#, Java, Swift. Frontend, backend, mobile, kernel, cloud, ops, and even some IT. I've worked on large-scale open-source projects like Kubernetes and maintained subprojects, which allowed me to have my code peer-reviewed by some of the best engineers.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>C# Loops - Part 3: Do..While and While Loops</title>
      <author>Grant</author>
      <pubDate>Tue, 03 Aug 2021 22:42:09 +0000</pubDate>
      <link>https://dev.to/gweaths/c-loops-part-3-do-while-and-while-loops-1idn</link>
      <guid>https://dev.to/gweaths/c-loops-part-3-do-while-and-while-loops-1idn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#dowhile-loops"&gt;
  &lt;/a&gt;
  Do...While loops
&lt;/h2&gt;

&lt;p&gt;Do while loops allow developers to repeat code execution as long as a condition is met. So whereas before we were instructing the code to run a number of times, or from beginning to end of an object. Now, we tailor it a little more and say only keep running this code "until" this condition is no longer valid. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-they-work-then-"&gt;
  &lt;/a&gt;
  How do they work then ?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//Code goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike the For and Foreach loop, the code is executed a minimum time of once. As the &lt;em&gt;do&lt;/em&gt; code is ran &lt;strong&gt;before&lt;/strong&gt; the &lt;em&gt;while&lt;/em&gt; check. &lt;/p&gt;

&lt;p&gt;Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Keep Going"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;++;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code will run once, check if counter is less than 10, if it is it will keep going. Once the counter is &amp;gt;=10 the loop will exit and no longer execute the &lt;em&gt;do&lt;/em&gt; code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While Loop
&lt;/h2&gt;

&lt;p&gt;Ok so the while loop works on a very similar concept to the &lt;em&gt;do while&lt;/em&gt;, however rather than running the code first then checking. The check is done first. Meaning the code will &lt;strong&gt;only&lt;/strong&gt; run whilst the condition is met. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-and-example"&gt;
  &lt;/a&gt;
  Syntax and Example:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dartsThrown&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;180&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;dartsThrown&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dartScore&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;61&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;dartScore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your score is "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There you go you've been introduced to the 4 ways of looping within C#. Each has there uses and are suited better for certain situations. &lt;/p&gt;

&lt;p&gt;After you've played around with them yourself , you'll see how easy they are to use, and which loop would suit your needs best. &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>csharp</category>
    </item>
    <item>
      <title>C# Loops - Part 2 : For Each Loops</title>
      <author>Grant</author>
      <pubDate>Tue, 03 Aug 2021 22:41:34 +0000</pubDate>
      <link>https://dev.to/gweaths/c-loops-part-2-for-each-loops-4n6h</link>
      <guid>https://dev.to/gweaths/c-loops-part-2-for-each-loops-4n6h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#for-each-loops"&gt;
  &lt;/a&gt;
  For Each Loops
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;For Each Loop&lt;/em&gt; in concept works like any other loop in that it iterates over an object a number of times. However in a Foreach loop it will go from the first item all the way through to end in sequence. Unless, you manipulate the sequence by skipping items using the &lt;em&gt;continue&lt;/em&gt; keyword. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work-"&gt;
  &lt;/a&gt;
  How does it work ?
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;foreach&lt;/em&gt; loop can iterate over any object that inherits from the IEnumerable class (e.g lists, collections). &lt;/p&gt;

&lt;p&gt;As already mentioned, it does this in order of the list, i.e order the items were loaded in / added to the list (or ordered). It does this because it iterates over the &lt;em&gt;instances&lt;/em&gt; of the list. An instance is a concrete occurrence of any object, existing usually during runtime, from memory. &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Grant"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Barry"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Jenny”,"&lt;/span&gt;&lt;span class="n"&gt;Shaun&lt;/span&gt;&lt;span class="s"&gt;");
&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="n"&gt;Grant&lt;/span&gt;
&lt;span class="n"&gt;Barry&lt;/span&gt;
&lt;span class="n"&gt;Jenny&lt;/span&gt;
&lt;span class="n"&gt;Shaun&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'll show you an example of a object with more properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddressBook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Tel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AddressBook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;addresses&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;AddressBook&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Grant"&lt;/span&gt;
       &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Developer Avenue, DevTown"&lt;/span&gt;
       &lt;span class="n"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"019286661"&lt;/span&gt;
     &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Terry"&lt;/span&gt;
       &lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"5 Developer Avenue, DevTown"&lt;/span&gt;
       &lt;span class="n"&gt;Telephone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"019286662"&lt;/span&gt;
     &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;addressBook&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="n"&gt;Grant&lt;/span&gt;
&lt;span class="m"&gt;019286661&lt;/span&gt;
&lt;span class="n"&gt;Terry&lt;/span&gt;
&lt;span class="m"&gt;019286662&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's how you can use the For Each loop. However there are some caveats. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can't access instances within an object using indexing like the previous for loop. You know the &lt;em&gt;list[1]&lt;/em&gt; syntax. This is because the IEnumerable class doesn't expose this functionality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thwre are some performance overheads with foreach loop, how it works behind the scenes. I won't get into it now but sometimes it can run slower than a for loop. But the pros can sometimes outweigh this.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Foreach loops make a copy od the object you're looping through. Therefore , amendments or assignments to the current item's properties is not feasible, i.e you cannot loop through a list and update all the values using a Foreach loop. You would need to use a &lt;em&gt;for loop&lt;/em&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well that's all I've got for now on foreach loops. Next up.. do while and while loops &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>csharp</category>
    </item>
    <item>
      <title>How to clean some disk space on a Linux instance ?</title>
      <author>Lucien Boix</author>
      <pubDate>Tue, 03 Aug 2021 22:38:57 +0000</pubDate>
      <link>https://dev.to/lboix/how-to-clean-some-disk-space-on-a-linux-instance-pjl</link>
      <guid>https://dev.to/lboix/how-to-clean-some-disk-space-on-a-linux-instance-pjl</guid>
      <description>&lt;p&gt;If you are lucky, the disk usage was already monitored and you have been warned on time. Otherwise it's already too late and some of your apps are simply not working anymore. To help you get back on track asap, here are some useful commands I found throughout the years to quickly and safely made room again on your instance / server.&lt;/p&gt;

&lt;p&gt;First connect to it via SSH of course and become root with &lt;code&gt;sudo su -&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then given your case, if you are using on it &lt;strong&gt;Docker&lt;/strong&gt; to run containers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if your app is still running, clean Docker resources smoothly
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker images -q | xargs docker rmi
docker container prune -f
docker image prune -a -f
docker system prune -a -f
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if you app is already down, clean all Docker resources in one shot
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker system prune
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if a container does not rotate its log, that may represent a huge file, go clean it
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /var/lib/docker/containers/&amp;lt;container_id&amp;gt;/ # a file &amp;lt;container_id&amp;gt;-json.log is supposed to be there
truncate -s 0 &amp;lt;container_id&amp;gt;-json.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using a Linux distribution with &lt;strong&gt;systemd&lt;/strong&gt;, you can clean its logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /var/log/journal # they are here
journalctl --disk-usage # have a look at how much you can reclaim
journalctl --vacuum-time=7d # reclaim it (7d = keep logs from last week only)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Look elsewhere on the instance if you still need more space :&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;du -sh * | grep "G" # travel around to find most imposant directories
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if it's a log file you can truncate it : &lt;code&gt;truncate -s 0 YOUR_LOGFILE.log&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if you find a directory containing old files that are not needed anymore:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pwd # DOUBLE CHECK that you are inside the right directory to clean
find * -type f -mtime +100 -exec rm -rf {} \; # remove files not modified since 100 days for example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be good now and your apps should be back and running again, maybe you will need to redeploy / restart them for that.&lt;/p&gt;

&lt;p&gt;Finally it's time now for continuous improvement :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make sure the disk space on this instance is well monitored and the threshold in place does leave you enough time to intervene &lt;/li&gt;
&lt;li&gt;your goal is to never do that again : find easy cleaning commands that you can put in the crontab of this instance for example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please let us know if this article helped you in some ways, I would love to hear your stories regarding this usecase (never funny) and your personal tips and suggestions too.&lt;/p&gt;

&lt;p&gt;I wish you a great day!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Hello Everyone,</title>
      <author>Ahmed Bounader</author>
      <pubDate>Tue, 03 Aug 2021 22:35:14 +0000</pubDate>
      <link>https://dev.to/ahmedbounadar/hello-everyone-4mnk</link>
      <guid>https://dev.to/ahmedbounadar/hello-everyone-4mnk</guid>
      <description>&lt;p&gt;I'm new in this platform. I hope I can help you, and you can help me. I really admired this website when I first discover it, It's a fun and informative platform, it'll help me to learn so many things about programming languages, coding and all the stuffs.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Machine Learning in everyday applications</title>
      <author>Markos Giannopoulos</author>
      <pubDate>Tue, 03 Aug 2021 22:30:50 +0000</pubDate>
      <link>https://dev.to/mgiannopoulos/machine-learning-in-everyday-applications-190j</link>
      <guid>https://dev.to/mgiannopoulos/machine-learning-in-everyday-applications-190j</guid>
      <description>&lt;p&gt;Machine Learning has been around for decades and is already used in a variety of applications such as spam filters, speech recognition and self-driving cars. It is defined as a subset of artificial intelligence (AI) that specifically deals with algorithms that can learn by themselves. It is estimated that today, 80% of all organizations use Machine Learning in some capacity even if that is not directly evident to the end user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-the-basics-of-machine-learning"&gt;
  &lt;/a&gt;
  Understanding the basics of Machine Learning
&lt;/h3&gt;

&lt;p&gt;Machine Learning is an integral part of the future of mobile and web applications. Software that can learn to aid the user intelligently will revolutionize the industry.&lt;/p&gt;

&lt;p&gt;Without a doubt, we are on the verge of a learning breakthrough that will make machines intelligent enough to do tasks for us that they can learn to do better than us, just like humans have done for other humans for centuries.&lt;/p&gt;

&lt;p&gt;There is a fascinating concept called the "intelligence explosion" that has been gaining traction in the scientific community. It's based on the theory that super intelligent AI will be created, and as it gets smarter, it will create new AIs, which will eventually lead to an event horizon (aka singularity) when the system becomes so intelligent that it's beyond human comprehension.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-machine-learning-is-important-for-every-software-app"&gt;
  &lt;/a&gt;
  Why Machine Learning is important for every software app?
&lt;/h3&gt;

&lt;p&gt;Machine learning is an important technology that enhances the performance of software and makes it faster and more efficient for the end-user.&lt;/p&gt;

&lt;p&gt;Simply put, ML is nothing but the process of a computer algorithm gaining insight into data by detecting patterns and extracting knowledge without being explicitly programmed. Machine learning techniques can be applied to various domains like classification, optimization, regression and clustering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cool-cases-of-machine-learning-in-everyday-applications"&gt;
  &lt;/a&gt;
  Cool cases of Machine Learning in everyday applications
&lt;/h3&gt;

&lt;p&gt;Machine learning is being used in a variety of industries to perform tasks from routine to complex. The following are a few examples of cool cases that demonstrate machine learning in everyday applications.&lt;/p&gt;

&lt;p&gt;1) With machine learning, you can optimize your advertising campaigns by understanding consumer behavior. A majority of marketers rely on Google Adwords to drive traffic to their website. However, there's a catch - it's difficult to identify which keywords will bring in the most conversions without spending a fortune on testing different variations. Machine learning can help with this process by "learning" from past advertising campaigns and delivering insights about which words, phrases, and landing pages are the most effective.&lt;/p&gt;

&lt;p&gt;2) You can also use it to classify images. In the medical field, machine learning has been used to aid medical diagnosis and treatment for decades. It can take hours for a radiologist to examine the X-rays of patients with brain tumors, but it only takes seconds for an AI algorithm to make the same assessment.&lt;/p&gt;

&lt;p&gt;3) The retail industry is also benefitting from machine learning as they are able to predict customer needs before they even make their purchase decision. With this knowledge, retailers can provide tailored deals for customers with specific product preferences or offer personalized recommendations based on previous purchases and browsing history.&lt;/p&gt;

&lt;p&gt;4) Memrise, the language learning application, uses ML to identify objects with the user's camera and provide the translation of what the respective word (not always fully successful of course, as shown in the screenshots below :))&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yrm0ruLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9t3abmbzd7znrwnq2ii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yrm0ruLx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9t3abmbzd7znrwnq2ii.png" alt="Memrise image classification"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) ML has further applications in education, for example in natural language processing or in grading essays. One could also use ML in an educational setting to identify bad habits from essay answers such as missing or incorrect punctuation. It could also be used to identify and correct mistakes made by students when writing essays, like switching between first and third person points of view.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-machine-learning-in-software-applications-what-to-expect"&gt;
  &lt;/a&gt;
  Future of Machine Learning in software applications - What to expect?
&lt;/h3&gt;

&lt;p&gt;As these technologies continue to grow, they will be able to assist humans in ways that they traditionally couldn't. In the future, we will be able to use the help of AI assistants for everything from programming (Github’s Copilot is a first example already) to marketing or business intelligence.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>discuss</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
