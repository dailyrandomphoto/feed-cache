<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How can I run natively 'Big Commerce Stencil CLI' on Apple Silicon M1 Chip</title>
      <author>Caglar</author>
      <pubDate>Mon, 12 Jul 2021 21:45:00 +0000</pubDate>
      <link>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</link>
      <guid>https://dev.to/caglaroptimum7/how-can-i-run-natively-big-commerce-stencil-cli-on-apple-silicon-m1-chip-3m1h</guid>
      <description>&lt;p&gt;I am a front-end engineer who mostly works on a Bigcommerce platform. &lt;strong&gt;Bigcommerce&lt;/strong&gt; uses a handlebar with the 'stencil command line interface' and it requires 'node version manager' (nvm).&lt;/p&gt;

&lt;p&gt;I switched my Intel Macbook Pro with &lt;strong&gt;M1 Chip Macbook Pro&lt;/strong&gt; then I couldn't realize this migration will be a little bit &lt;strong&gt;ticky.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I installed homebrew then node and nvm packages then I followed the steps on &lt;a href="https://developer.bigcommerce.com/stencil-docs/installing-stencil-cli/installing-stencil"&gt;bigcommerce developer website.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;However, almost every project gives different errors but all of them are related to the 'node' version. I've gotten few-hour research on Google but these were not about BigCommerce 'stencil-cli',&lt;/p&gt;

&lt;p&gt;Jump to 'TL;DR'&lt;br&gt;
Here is the perfect version of the NVM for your delicious Stencil Templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# For ARM based macs // for bash
arch -x86_64 /bin/zsh

# For ARM based macs // for Fish Shell
arch -x86_64 /usr/local/bin/fish

brew install node
brew install nvm

# which is LTS for v12
nvm install 12.13.0
nvm alias default 12.13.0
npm install -g @bigcommerce/stencil-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start your project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stencil start -o
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MZ8piFWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/cLqphHM/bigcommerce-stencil-apple-m1-chip-optimum7.png" alt="Current Version Of my NVM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please check out &lt;a href="https://optimum7.com"&gt;our website&lt;/a&gt; to get more information about BigCommerce Development and Marketing.&lt;/p&gt;

&lt;p&gt;Thanks for reading, Happy hacking üß°&lt;/p&gt;

</description>
      <category>bigcommerce</category>
      <category>stencil</category>
      <category>applesilicon</category>
      <category>m1chip</category>
    </item>
    <item>
      <title>How to change details label when open/closed without JavaScript</title>
      <author>John P. Rouillard</author>
      <pubDate>Mon, 12 Jul 2021 21:26:26 +0000</pubDate>
      <link>https://dev.to/rouilj/how-to-change-details-label-when-open-closed-without-javascript-1n3c</link>
      <guid>https://dev.to/rouilj/how-to-change-details-label-when-open-closed-without-javascript-1n3c</guid>
      <description>&lt;p&gt;I wish the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"&gt;details element&lt;/a&gt; would support different labels (provided by the summary tag) for its open and closed states.&lt;/p&gt;

&lt;p&gt;Consider a label of "Closed, click to open" when the details element is closed and "Open, click to close" when open:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WKFx4-D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6955uhrejxff5exayli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WKFx4-D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6955uhrejxff5exayli.png" alt="Open details element with label changed to indicate state."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sadly only one summary tag is supported by the details element. However you can use an empty summary with a ::before pseudo-element to implement this.&lt;/p&gt;

&lt;p&gt;Save the following to a file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;body&amp;gt;
  &amp;lt;style&amp;gt;
    #widget1 div { padding-inline-start: 1em; max-width: 20em;}
    #widget1 summary::before { content: "Closed, click to open";}
    #widget1[open] summary::before { content: "Open, click to close";}
    #widget1[open] summary { height: 2em;}
  &amp;lt;/style&amp;gt;

  &amp;lt;p&amp;gt; Text before details.&amp;lt;/p&amp;gt;
  &amp;lt;details id="widget1"&amp;gt;
    &amp;lt;summary&amp;gt;&amp;lt;/summary&amp;gt;
    &amp;lt;div&amp;gt;
    A widget can be in one of two states. The default closed
    state displays only the triangle and the label inside summary
    (or a user agent-defined default string if no summary).
    &amp;lt;/div&amp;gt;
  &amp;lt;/details&amp;gt;
  &amp;lt;p&amp;gt;Text after details.&amp;lt;/p&amp;gt;
  &amp;lt;body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to experiment.&lt;br&gt;
The second and third style lines are where the magic happens.&lt;/p&gt;

&lt;p&gt;Note that it might not be accessible. I didn't try to see if adding a live region aria label to the summary would cause the label change to be announced. I suspect it will not, but refining this is left as an exercise for the reader. Add your experimental findings to the comments below.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>What is AWS Infinidash?</title>
      <author>Mishi</author>
      <pubDate>Mon, 12 Jul 2021 21:25:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/what-is-aws-infinidash-a5k</link>
      <guid>https://dev.to/aws-builders/what-is-aws-infinidash-a5k</guid>
      <description>&lt;p&gt;As of today, AWS offers over 200 products and services with its own, unique name and functionality. Getting familiar with them is not an easy task and most AWS professionals only keep up to date with them in their respective fields. For example, if you are managing containers there are currently 17 ways to run them on AWS. This means 17 different services with their own and different pricing models.&lt;/p&gt;

&lt;p&gt;On June 30, 2021, Joe Nash raised the question on Twitter about what happens if a small and dedicated group of developers start tweeting about a made-up AWS product. Would it appear in job specifications within a week? He suggested the word Infinidash but was open to other suggestions. He made it clear that ‚Äúthe intended joke here was that AWS product brands are completely impenetrable and indistinguishable from eachother (sic), let alone reality, and not ‚Äúlol recruiters‚Äù‚Äù.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TovSXrn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1342401247522004992/QOCvBRO6_normal.jpg" alt="Joe Nash profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Joe Nash
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jna_sh
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I am convinced that a small and dedicated group of twitter devs could tweet hot takes about a completely made up AWS product, idk AWS Infinidash or something, and it would appear as a requirement on job specs within a week
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:10 AM - 30 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410178986978775040" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The name, Infinidash was so apt that it rapidly became a hit on Twitter and soon other people started using it. People started making videos describing the service that may sound real for the general public but clearly sounds fake for professionals.&lt;/p&gt;

&lt;p&gt;Hand-on AWS even updated the original AWS certification diagram, highlighting Infinidash as the highest level of professional certification available for AWS.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGlc0gJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5PM16pUYAACJYS.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycudAzkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1275912360180494338/Fob1vTOI_normal.jpg" alt="Hands-on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Hands-on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @handsonaws
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      New certification! &lt;br&gt;&lt;br&gt;Now in Beta. Coming 2021 Q5&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Infinidash"&gt;#Infinidash&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:27 PM - 01 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410696636590825473" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Soon AWS employees saw the potential in this hype and started to tweet about AWS Infinidash, including Jeff Barr Chief Evangelist for the Amazon Web Services.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIHXZAi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5Uaq1AUYAIs6Nw.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv16LiyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1368794503285383171/qoMhip1Z_normal.jpg" alt="Jeff Barr ‚òÅÔ∏è (@ üè† ) üíâ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeff Barr ‚òÅÔ∏è (@ üè† ) üíâ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jeffbarr
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Oddly enough not one request yet for &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; Infinidash support in CloudFormation. Share your use cases here and I'll pass them along to the team. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:45 PM - 02 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1411063383302934531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Only two days have passed since Joe‚Äôs original tweet and even Werner Vogels CTO of Amazon jumped on board:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4ATQc23--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E5SuBsjVUAExMeP.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLM_ot8g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/563188960394891264/z3-Rh11q_normal.jpeg" alt="Werner Vogels profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Werner Vogels
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/werner"&gt;@werner&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The official AWS &lt;a href="https://twitter.com/hashtag/Infinidash"&gt;#Infinidash&lt;/a&gt; GA event is tonight at half time during the &lt;a href="https://twitter.com/hashtag/BELITA"&gt;#BELITA&lt;/a&gt; game in the Allianz Arena in Munich. You can buy me a beer to celebrate our most important launch ever... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:50 PM - 02 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1410943935124447237" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As of the writing of this article, the Infinidash movement is only at its beginning and eventually will expand beyond Twitter. While I don‚Äôt completely agree with Joe‚Äôs take on AWS services I clearly find the movement interesting. I believe that AWS also saw an opportunity in this and we will be hearing more about AWS Infinidash in the near future. I am curious to see what comes out of this and what AWS does with such a unique and apt name.&lt;/p&gt;


&lt;p&gt;&lt;br&gt;
  Sources&lt;br&gt;
  &lt;ul&gt;
&lt;li&gt;AWS Infinidash logo by &lt;a href="https://twitter.com/kangadac"&gt;David Cuthbert&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Originally published at &lt;a href="https://roadtoaws.com/"&gt;Road to AWS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are the Interface predicate and Interface functions?</title>
      <author>Wagner Negr√£o</author>
      <pubDate>Mon, 12 Jul 2021 21:23:37 +0000</pubDate>
      <link>https://dev.to/wagnernegrao/what-are-the-interface-predicate-and-interface-functions-36o7</link>
      <guid>https://dev.to/wagnernegrao/what-are-the-interface-predicate-and-interface-functions-36o7</guid>
      <description>&lt;p&gt;Writing the post about &lt;a href="https://dev.to/wagnernegrao/what-is-the-consumer-in-a-lambda-function-528k"&gt;Consumer Interface&lt;/a&gt;, I thought it interesting to write about Predicate Interface and  Function Interface.&lt;/p&gt;

&lt;p&gt;We go to start with Predicate Interface, this interface is an interface functional a little different from Consumer Interface that receives a parameter and does not return anything. The Predicate interface receives a parameter and returns a value boolean. The function that an interface receives is primarily some comparison that can have with returns a boolean.&lt;/p&gt;

&lt;p&gt;see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;


&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, we have a creation of a list and after that is created a filter to know what the pair numbers are. I'm using this example because the method 'filter' receives an interface predicate and stays easier to explain the example.&lt;/p&gt;

&lt;p&gt;Thus to receive a Predicate, he needs to pass a condition of comparison, in the example we have that do 'c%2' to know the rest of division, if it equals 0, this will generate an answer of true or false, thus satisfy the conditions of use of Predicate Interface. When performing a filter he will pass forward only what is true and eliminate from the stream all that is false. It's good to highlight that the list will not modify the filter but the stream that was created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nl"&gt;Result:&lt;/span&gt;

&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results presented are the number pairs after being filtered.&lt;/p&gt;




&lt;p&gt;Now  I will speak a little about the Function interface.&lt;/p&gt;

&lt;p&gt;The Function Interface √© some more generics and well malleable to work with, which we see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;R&lt;/span&gt; &lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How we can see inside of the interface, he receives a type T and returns a type R. This return does not need to necessarily return a type that was passed, soon it can be used for transformation.&lt;/p&gt;

&lt;p&gt;See an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" - Type: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getSimpleName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

&lt;span class="nl"&gt;Result:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;Type:&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above we have a list of strings, after creating a stream and used the function 'Map' to convert the values of the string to Integer and a present in CLI the variable and the be the type.&lt;/p&gt;

&lt;p&gt;We used the method Map of stream because to operate it must receive the Functional Interface, that is why we were able to realize the transformation of string to Integer. We see step by step, the method 'Apply' of interface receives a parameter and has that execute an action and return something, that in we case would return an Integer, for this reason, the method Map is known for a method that if used to transform items of a stream.&lt;/p&gt;

&lt;p&gt;This example presented is well simple, but I believe that it suits to understand possible applications using the Function Interface or mainly the Map() that facilitate quiet work with the transformation of objects.&lt;/p&gt;

&lt;p&gt;I must emphasize that in we case map(), creating the new stream, all of them being integers, and this does not influence anything the stream principal, he continued being of String type.&lt;/p&gt;

&lt;p&gt;We can leave this code more elegant using methods reference, but this will be the subject of other posts.&lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
    <item>
      <title>Getting started with Terraform: State file</title>
      <author>Daniel Huerta</author>
      <pubDate>Mon, 12 Jul 2021 19:41:25 +0000</pubDate>
      <link>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</link>
      <guid>https://dev.to/danihuerta/getting-started-with-terraform-state-file-1l2f</guid>
      <description>&lt;p&gt;If you have started using Terraform as your &lt;em&gt;Infrastructure as Code&lt;/em&gt; tool you might wonder how does TF know which resources need to be created, deleted, or modified when you run your code. Well, let me tell you that it is not a magic stuff, the agent behind this is the &lt;strong&gt;state file&lt;/strong&gt; üòâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform-apply"&gt;
  &lt;/a&gt;
  Terraform apply
&lt;/h2&gt;

&lt;p&gt;Every time we deploy our Infrastructure with &lt;em&gt;terraform apply&lt;/em&gt;, a file named &lt;em&gt;terraform.tfstate&lt;/em&gt; is created, it includes all the information about the resources that are currently deployed in the cloud. &lt;/p&gt;

&lt;p&gt;You can navigate on it and you will see a key with the name of &lt;strong&gt;resources&lt;/strong&gt;, it is an array which lists all the elements that were created with the configuration file (after doing &lt;em&gt;terraform apply&lt;/em&gt;). &lt;/p&gt;

&lt;p&gt;If you create an EC2 instance in AWS, your tfstate file will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--440A8CAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tzx0w4lmg8tsxba0ihl.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand better how this works, it is important to talk about the &lt;strong&gt;&lt;em&gt;Current and Desired State&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current State
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;terraform.tfstate&lt;/em&gt; file is the responsible to store the current state of the infrastructure, it is to say all the information about the resources that are currently deployed in your Cloud Provider (after the &lt;em&gt;terraform apply&lt;/em&gt; command has been run).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desired-state"&gt;
  &lt;/a&gt;
  Desired State
&lt;/h2&gt;

&lt;p&gt;All the code that is set in the main.tf file corresponds to the desired state, on it you specify what resources you expect to be created in the Cloud, and here is where the magic occurs üòâ.&lt;/p&gt;

&lt;p&gt;Terraform is going to &lt;strong&gt;compare&lt;/strong&gt; both states (current and desired one), if there is an existing difference between both, it will make the changes that are necessary so that the current state is equal to the desired state.&lt;br&gt;
TF shows the result of the comparison when we execute the &lt;em&gt;terraform plan&lt;/em&gt; command in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refreshing-the-state"&gt;
  &lt;/a&gt;
  Refreshing the state
&lt;/h2&gt;

&lt;p&gt;But, what if we modify a resource directly in the Cloud Provider interface not using Terraform apply (AWS Console for instance), let's say that we changed the EC2 instance type from t2.micro to t2.large, how is our &lt;strong&gt;local&lt;/strong&gt; &lt;em&gt;terraform.tfstate&lt;/em&gt; be modified to match with those &lt;em&gt;remote&lt;/em&gt; changes? ü§î.&lt;/p&gt;

&lt;p&gt;Well, Terraform has the solution for that. We just need to run the command &lt;strong&gt;terraform refresh&lt;/strong&gt; and all the configuration that is currently running in the cloud provider will be updated in the local &lt;em&gt;terraform.tfstate&lt;/em&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h3&gt;

&lt;p&gt;Now that you understand the &lt;strong&gt;state&lt;/strong&gt; concepts in Terraform, we can start talking about how to manage it in a collaborative workflow, let's talk about the &lt;strong&gt;remote state&lt;/strong&gt; in a different post.&lt;/p&gt;

&lt;p&gt;Thanks for reading, any comments or suggestions are welcome. We are here to help each other üòâüíô.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>devops</category>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>The Most Productive Customization I've Made to My Computer This Year</title>
      <author>Self Teach me</author>
      <pubDate>Mon, 12 Jul 2021 19:13:13 +0000</pubDate>
      <link>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</link>
      <guid>https://dev.to/selfteachme/the-most-productive-customization-i-ve-made-to-my-computer-this-year-55j3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A few weeks ago I did it. I converted my &lt;strong&gt;Caps Lock&lt;/strong&gt; key into a "Hyper Key." Meaning, whenever I hit Caps Lock, it's the same as holding down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's be honest, its hard to hold down &lt;code&gt;Cmd + Ctrl + Option + Shift&lt;/code&gt;, at the same time. &lt;em&gt;But&lt;/em&gt;, that also means, I didn't have any keyboard shortcuts with that combination. This opened up a whole new world of commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-note"&gt;
  &lt;/a&gt;
  Quick Note
&lt;/h3&gt;

&lt;p&gt;If you're resistant to "loosing" your Caps Lock, like I was (because I actually use my Caps Lock key), I moved that functionality to my &lt;em&gt;right&lt;/em&gt; shift key. Already, I use my &lt;em&gt;left&lt;/em&gt; shift key exclusively, so I didn't feel like I was "loosing" anything.&lt;/p&gt;

&lt;p&gt;While I was making modifications, I also converted my right command to an extra escape key. I have the 15" Macbook Pro with the touch bar. When I'm working at my desk, I have an external keyboard. But, when I'm working directly on my laptop, I miss the tactile escape key. Plus, I'm running &lt;a href="https://folivora.ai/"&gt;Better Touch Tool&lt;/a&gt; to customize the touch bar, which shifts my escape key over, ruining my muscle memory&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--94UaLAlA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wieazhbxy2ow5gq2nym1.jpeg" alt="IMG_2850"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-your-hyper-key"&gt;
  &lt;/a&gt;
  How to Set up Your Hyper Key
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://karabiner-elements.pqrs.org/"&gt;Karabiner-Elements&lt;/a&gt; and download their software (it's free) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBSuVkM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq23je1rnbaje0oy86hq.png" alt="CleanShot_2020-09-16_at_20.19.082x"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once it's downloaded, double click on the .dmg to unpack and open it. Then, double click on the .pkg inside and go through the install process&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvB2JG2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gakzbe7sp3f43ork1wzm.png" alt="package-karabiner-elements"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Complex Modifications&lt;/strong&gt; tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_i403Su--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/litmcm4l4zqp3abqas1d.png" alt="complex-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Add Rule&lt;/strong&gt; button at the bottom left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGfBJMN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yshxsvj2od5uet6zdiz.png" alt="add-rule-button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Import more rules from the Internet (open a web browser)&lt;/strong&gt; button at the top. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5otaCKwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u57qmcb3v43zpu2amtr.png" alt="import-rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the button says, this will launch a web browser with a list of modifications you can import. There are plenty plenty of options there, to scroll through and give you inspiration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y70CZrM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4697p9f3as7v01q6t99f.png" alt="web-browser-with-modifications"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you've found one you like, click on the Import button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSLsTo-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pa1t6u8rol6iqrgsrjbz.png" alt="karabiner-elements-options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pop-up will come up asking if you want to &lt;strong&gt;Open Karabiner-Elements.app?&lt;/strong&gt; Click on the "Open" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03vHVxRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78u4t9muict4xff3d2zx.png" alt="open-karabiner-elements-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will launch Karabiner-Elements. It will show you a pop-up explaining the control you're importing. You can click &lt;strong&gt;Import&lt;/strong&gt; to confirm or &lt;strong&gt;Cancel&lt;/strong&gt;. Don't worry, you can always undo. &lt;/p&gt;

&lt;p&gt;As I mentioned earlier, I installed 3 different modifications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The caps lock key simulates hitting the Cmd + Ctrl + Shift + Option key&lt;/li&gt;
&lt;li&gt;The Right Shift key is the "new" caps lock key ‚Äî Interestingly enough, the light on the "real" caps lock key goes on and off whenever I hit the "new" shift key.&lt;/li&gt;
&lt;li&gt;The Right Command key is a second escape key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HITvt1Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fbl5143bvm6crh7vmt49.png" alt="complex-modifications-listed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts-ive-set-up"&gt;
  &lt;/a&gt;
  Shortcuts I've set up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#keyboard-maestro"&gt;
  &lt;/a&gt;
  Keyboard Maestro
&lt;/h3&gt;

&lt;p&gt;I set up all the keyboard shortcuts through a program called &lt;a href="https://www.keyboardmaestro.com/main/"&gt;Keyboard Maestro&lt;/a&gt;. Unfortunately, this program is not free and costs $36. ‚Äî but, definitely worth it. The options it provides seem endless.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-ENOH5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4e4r2l72rna60xuo1on.png" alt="keyboard-maestro2x"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click through the groups in the left panel, you'll find a bunch of "macros" that you can enable and pair with a keyboard shortcut. Of course, you can also create your own custom commands.&lt;/p&gt;

&lt;p&gt;Most of the commands I've created are designed to jump between my favorite applications. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + B&lt;/code&gt;: Opens Chrome&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + C&lt;/code&gt;: Opens VS Code&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + E&lt;/code&gt;: Opens AirMail (my email client of choice)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + F&lt;/code&gt;: Opens Finder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + M&lt;/code&gt;: Opens Messages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + N&lt;/code&gt;: Opens Notion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a few commands for navigating to my favorite directories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + P&lt;/code&gt;: jumps to the Projects directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + S&lt;/code&gt;: Opens the Vlog directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of miscellaneous items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;: Searches the Internet. This is great for a quick Google Search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + V&lt;/code&gt;: will paste whatever is in my clipboard without any styling. - You know when you copy something that's been formatted (bold / italics). This strips out all the formatting before pasting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#better-touch-tool"&gt;
  &lt;/a&gt;
  Better Touch Tool
&lt;/h3&gt;

&lt;p&gt;I mentioned earlier, that I have Better Touch Tool installed on my computer, as well. Unfortunately, this program isn't free either. $8.50 will give you updates for 2 years. $20.50 will give you lifetime updates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z352GkyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j716aqzk98wrw88r8rg5.png" alt="better-touch-tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Where this program really shines is extending the functionality your trackpad or customizing your touch bar.&lt;/p&gt;

&lt;p&gt;I set up some keyboard shortcuts here, too, since it has some great options for window management. Here are the commands I setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + D&lt;/code&gt;: Shows the Desktop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + 1&lt;/code&gt;:  Makes the current window 100% tall. I found that when I was plugging / unplugging from my external monitor, windows would resize. This allows me to resize my window quickly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + A&lt;/code&gt;: When I'm editing on my ultra-wide monitor, I have a particular window configuration I like to use. Now, when I hit this keyboard shortcut, my windows automatically rearrange for this workflow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + H&lt;/code&gt;: Hides all window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the next 3 commands together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + J&lt;/code&gt;: Snaps and fills the window to the left third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + K&lt;/code&gt;: Snaps and fills the window the center third of the screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + L&lt;/code&gt;: Snaps and fills the window to the right third of the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next 2 commands are similar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Left Arrow&lt;/code&gt;: Moves the current window one space to the left. ‚Äî This is great if you use Apple Spaces feature. I can quickly move windows from one space to the next with my keyboard.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Hyper + Right Arrow&lt;/code&gt;: Moves the current window one space to the right.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This all took a little bit of setup, but the ~30 minutes, hour set up has been well worth it and it has made moving around my computer with the keyboard faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-the-comments"&gt;
  &lt;/a&gt;
  In the Comments...
&lt;/h3&gt;

&lt;p&gt;What keyboard shortcuts do you have set up? Any I should add to the mix? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is AssemblyScript?</title>
      <author>Jairus Tanaka</author>
      <pubDate>Mon, 12 Jul 2021 18:34:40 +0000</pubDate>
      <link>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</link>
      <guid>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
  AssemblyScript ‚Äî a variant of TypeScript that compiles to WebAssembly. Since it is compiled, it outperforms JavaScript in some cases. AS follows the TypeScript syntax as closely as possible and even adds more features to it. AssemblyScript allows us to write fast WebAssembly for the Web and Server without learning another language.&lt;/p&gt;

&lt;p&gt;AssemblyScript is very easy to use. All you need to do is install it via NPM.&lt;/p&gt;

&lt;p&gt;Try it out online: &lt;a href="https://stackblitz.com/edit/node-quzm4z?devtoolsheight=33&amp;amp;file=test.js"&gt;Online editor&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm i assemblyscript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
~ npx asinit &lt;span class="nb"&gt;.&lt;/span&gt;
~ npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did that do? First of all, it installed both the loader and the compiler. Secondly, it made a template project with an add function. Now, we just need to compile it to WebAssembly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm run asbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, if you check out the /build folder, there are the .wasm files that were built. NodeJS and JavaScript both provide a way to run WebAssembly files and AssemblyScript provides its own loader to work with the code. To start our code, we need another file&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wasmModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// This works just like a normal module&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasmModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -- 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should have outputted the number 11.&lt;/p&gt;

&lt;p&gt;JavaScript code for the add function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssemblyScript code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar, right? When we compile it, we can require it just like a normal JavaScript file. Keep in mind that WebAssembly is sandboxed which means it can‚Äôt access the system, make HTTP requests, or log to the console. However, AssemblyScript supports both WASI and JS bindings (calling JS from AS).&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, feel free to comment or join the AssemblyScript Discord. Or, check out the website.üòâ&lt;/p&gt;

&lt;p&gt;P.S: There is a tutorial at &lt;a href="https://jtanaka.gitbook.io/guide/"&gt;https://jtanaka.gitbook.io/guide/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webassembly</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Those ‚ÄúPesky‚Äù Pull Requests are Totally Worth It</title>
      <author>LinearB</author>
      <pubDate>Mon, 12 Jul 2021 18:29:04 +0000</pubDate>
      <link>https://dev.to/linearb_inc/those-pesky-pull-requests-are-totally-worth-it-3mh6</link>
      <guid>https://dev.to/linearb_inc/those-pesky-pull-requests-are-totally-worth-it-3mh6</guid>
      <description>&lt;p&gt;Pretty much everyone does code reviews. They‚Äôve been around a long time. I remember back in my Borland days when the Chief Scientist would come in every morning and review all the code that had been checked into the Subversion(!) repository the previous day and send emails out to folks whose code wasn‚Äôt up to snuff. That‚Äôs old school.&lt;/p&gt;

&lt;p&gt;Slightly less old school? Saving all the check-ins up until Friday for the Dev Leads and/or Dev Managers to review and approve. Both of these techniques leave a lot to be desired -- the main thing being a complete lack of interaction between the developer, the code, and the reviewer. &lt;/p&gt;

&lt;p&gt;Code Reviews have a number of purposes. Probably the most important one is preserving the quality and integrity of the code in the repository. Even the two old-school ways above do that. &lt;/p&gt;

&lt;p&gt;But almost as important as the learning opportunity that code reviews can provide. If the only feedback a developer gets from a code review is mistakes in formatting or other trivial things like that, then nobody learns and gets better. The old school ways above provide for few opportunities for a developer to increase their skills.&lt;/p&gt;

&lt;p&gt;To provide learning opportunities, code reviews evolved into meetings where everyone looked at the code written that week and commented on it, criticized it, or otherwise ran it through the gauntlet. This did provide a learning opportunity for developers, but it took more time, as it was 100% synchronous and required all code to wait for the next scheduled meeting to be reviewed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---2NSmdQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jc19ripztvwvuxyo1wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---2NSmdQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jc19ripztvwvuxyo1wn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, almost no one is doing these old-school code reviews anymore. All the cool kids are doing pull requests. (Some folks call them ‚Äúmerge requests.‚Äù)  Pull requests have a number of advantages over the previously mentioned methods, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being done completely asynchronously, but in public, for all to see.&lt;/li&gt;
&lt;li&gt;No one needs to wait to review the code -- it can happen almost immediately after a pull request is issued. &lt;/li&gt;
&lt;li&gt;A history of all the comments stays with the code in a repository. This allows a developer to come back to the code a year later and see all the thought that went into writing it.&lt;/li&gt;
&lt;li&gt;Pull Requests can be tracked, monitored, and measured. &lt;a href="https://linearb.io/blog/three-git-pull-request-review-strategies"&gt;A whole lot of good things can come out of that&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-do-code-reviews-at-all"&gt;
  &lt;/a&gt;
  Should you do code reviews at all?
&lt;/h2&gt;

&lt;p&gt;Interestingly, some say no, you shouldn‚Äôt.&lt;/p&gt;

&lt;p&gt;Not only is Jessica Kerr a great speaker and a good Twitter follow, but she also has some interesting ideas about code reviews in her article of March 27 entitled "Those pesky pull request reviews." In fact, she doesn‚Äôt like pull requests, and argues that you should sidestep them by just working on a given task as a team so that everyone sees everything as the work gets done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9kG4aH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1otpdnt4gt871coe3c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9kG4aH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o1otpdnt4gt871coe3c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She believes that pull requests work great for open source projects where a ‚Äúteam‚Äù is really a set of individuals coordinating work together. For true development teams, she believes that if a team all works together on a single task, everyone learns and understands the code, and thus there is no task switching between coding and doing pull requests because the pull requests are unnecessary. &lt;/p&gt;

&lt;p&gt;Jessica‚Äôs idea is radical -- basically going beyond Pair Programming and moving into mob programming. Mob programming is the idea of having whole teams work together on projects in serial rather than individually in parallel. Mob programming can eliminate the need for pull requests by causing all of the communication and learning to take place during the coding phase, without any review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-a-fan"&gt;
  &lt;/a&gt;
  Not a Fan
&lt;/h2&gt;

&lt;p&gt;I‚Äôm having a hard time agreeing with her idea for a couple of reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The transaction costs are too high. It seems to me that having four people work on a project together makes for many communication channels, increases the likelihood of interruptions, and reduces the amount of code that will actually get written. It‚Äôs sort of a ‚ÄúToo many cooks spoil the broth‚Äù notion. &lt;/li&gt;
&lt;li&gt;It doesn‚Äôt capture the discussions and history that will remain long after the code is committed. One of the most important and powerful benefits of pull requests is the learning that can take place during and even long after code has been reviewed and deployed. &lt;/li&gt;
&lt;li&gt;Not all projects are conducive to multiple team members working together. Some are small and multiple people working together would be overkill. Some are esoteric and require the focus of one person. Some will match the team and can be worked on together. There‚Äôs no one size fits all solution for all projects.&lt;/li&gt;
&lt;li&gt;Finally, not doing pull requests pretty much eliminates all the benefits of metrics systems like LinearB. Tracking the progress of pull requests and code reviews through the pipeline is a critical process for knowing how your team is performing. Without that, you can measure things and if you can‚Äôt measure things, you can‚Äôt improve.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As part of a discussion about code reviews, Rob Kraft, one of the Development Leaders in our vibrant Dev Interrupted Discord Server (&lt;a href="https://discord.gg/devinterrupted"&gt;you should join!&lt;/a&gt;) made the following comment that I agree with:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QwUvti-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tptuaq56l6uvxzawbu9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QwUvti-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tptuaq56l6uvxzawbu9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that what Jessica needs is a good look at LinearB. &lt;/p&gt;

&lt;p&gt;Let me address some of her more specific objections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;‚ÄúLet‚Äôs face it: nobody wants to review pull requests.‚Äù&lt;/strong&gt; Well, I don‚Äôt think that is true. We here at LinearB see customers every day that are doing pull requests efficiently and effectively. Sure, pull requests can be hard and nobody wants to do them if you aren‚Äôt correctly incenting the team to create pull requests that are easy to review. No one likes a huge pull request. But through monitoring metrics like Pull Request Size, you can encourage your team to create small, easy-to-review pull requests. And voila! People don‚Äôt hate pull requests anymore.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;‚ÄúThey‚Äôre a social interaction minefield!‚Äù&lt;/strong&gt; People complain that code reviews can cause strife on a team. Well, so can conversations during Mob Programming. I‚Äôm not sure that I see a distinction, And if doing a code review causes strife, then you have a cultural problem that no development methodology is going to solve. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;‚ÄúWe could blame the people. We could nag them more. We could even automate the nagging!‚Äù&lt;/strong&gt; Well, if code reviews are small, concise, and easy to do, ‚Äúautomating the nagging‚Äù via our WorkerB product is usually more than enough to get the ball rolling and keep it rolling. Notifications and tracking of any reviews that do happen to languish keep things moving as well. LinearB customers have seen drastic improvements in code pipeline productivity as a result of this so-called ‚Äúnagging‚Äù.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;‚ÄúMaybe instead of trying to work a bit more together, we could work together.‚Äù&lt;/strong&gt; Well sure, but if you do that, checking in code without a process of pull requests and code reviews, well, then you aren‚Äôt getting all the benefits listed above, nor those of a metrics tool that can show you what your Cycle Time is doing. And I don‚Äôt believe that mob programming will prevent the cultural problems that can arise from code reviews. People will be people whether in a mob programming environment or in an asynchronous code review process.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom Line
&lt;/h2&gt;

&lt;p&gt;Okay -- so what rubber is hitting the road here?&lt;/p&gt;

&lt;p&gt;If pull requests and code reviews are hard and people don‚Äôt want to do them, then you are doing them wrong. So the trick is to make them easy to do.&lt;/p&gt;

&lt;p&gt;We here at LinearB see many, many customers improve their Cycle Time and their overall software development process by using and tracking pull requests. By combining metrics tracking around pull requests with tools like &lt;a href="https://linearb.io/developer-automation/"&gt;WorkerB&lt;/a&gt;, many, many development organizations have seen smaller pull requests, better reviews, shorter Cycle Times, and an overall sense that things are really humming. &lt;/p&gt;

&lt;p&gt;Monitoring things like the size of pull requests, when pull requests are assigned, picked up, and commented on, as well as monitoring the depth of reviews that take place all create an environment of small, discrete, easy to review pull requests. &lt;/p&gt;

&lt;p&gt;And of course, if you want to find out more about what our customers already know, &lt;a href="https://linearb.io/demo/"&gt;you can book a free demo of LinearB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the end, while her ideas are intriguing and thought-provoking,  I can‚Äôt say I agree with Jessica‚Äôs argument. There doesn‚Äôt seem to be any good reason not to do pull requests with code reviews.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jessica‚Äôs blog post &lt;a href="https://jessitron.com/2021/03/27/those-pesky-pull-request-reviews/"&gt;can be read on her Jessitron blog&lt;/a&gt; and you can follow her on Twitter at &lt;a href="https://twitter.com/jessitron"&gt;@jessitron&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>pullrequest</category>
      <category>softwaredevelopment</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Git - Um breve estudo.</title>
      <author>Jos√© L√°zaro</author>
      <pubDate>Mon, 12 Jul 2021 18:04:00 +0000</pubDate>
      <link>https://dev.to/lazarocontato/git-um-breve-estudo-9gl</link>
      <guid>https://dev.to/lazarocontato/git-um-breve-estudo-9gl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzQ0tWSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvtwxpf35ic622e22i4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzQ0tWSp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvtwxpf35ic622e22i4f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Desde que comecei a estudar programa√ß√£o com maior assiduidade procuro metodologias de documentar o que venho aprendendo de alguma forma. Um amigo recomendou utilizar o Dev.to e minha experi√™ncia tem sido bastante positiva. &lt;/p&gt;

&lt;p&gt;Sendo assim, irei documentar tudo que acabo estudando ou desenvolvendo, al√©m da solu√ß√£o de problemas que eventualmente venham a ser um percal√ßo no meu processo de aprendizado.&lt;/p&gt;

&lt;p&gt;Neste Post irei tratar da utiliza√ß√£o do Git. Abordando todos os pontos que estudei e desafios enfrentados durante o estudo. Sintam-se livres para comentar e adicionar dicas adicionais. Posteriormente poderei criar anexos com observa√ß√µes e dicas √∫teis que edifiquem o conte√∫do tratado. Ent√£o vamos l√°.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#%C3%ADndice"&gt;
  &lt;/a&gt;
  √çndice
&lt;/h1&gt;

&lt;p&gt;&lt;a href="#o-que-%C3%A9-git"&gt;1. O que √© Git&lt;/a&gt;&lt;br&gt;
&lt;a href="#como-configurar-o-git"&gt;2. Como configurar o git&lt;/a&gt;&lt;br&gt;
&lt;a href="#reposit%C3%B3rios"&gt;3. Reposit√≥rios&lt;/a&gt;&lt;br&gt;
&lt;a href="#ciclo-de-vida-de-arquivos"&gt;4. Ciclo de vida de arquivos&lt;/a&gt;&lt;br&gt;
&lt;a href="#o-que-%C3%A9%20um-commit"&gt;5. O que √© um commit&lt;/a&gt;&lt;br&gt;
&lt;a href="#visualizando-diferen%C3%A7as-entre-arquivos"&gt;6. Visualizando diferen√ßas entre arquivos&lt;/a&gt;&lt;br&gt;
&lt;a href="#branch"&gt;7. Branch&lt;/a&gt;&lt;br&gt;
&lt;a href="#visualizando-logs"&gt;8. Visualizando Logs&lt;/a&gt;&lt;br&gt;
&lt;a href="#manipulando-commits"&gt;9. Manipulando commits&lt;/a&gt;&lt;br&gt;
&lt;a href="#merge"&gt;10. Merge&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-git"&gt;
  &lt;/a&gt;
  O que √© Git
&lt;/h1&gt;

&lt;p&gt;Em resumo, o git √© um sistema de controle de versionamento. √â isso. &lt;/p&gt;

&lt;p&gt;Ok, a defini√ß√£o certamente √© mais complexa, mas foi a melhor frase que encontrei para definir a fun√ß√£o principal do Git. Ele certamente √© o sistema de controle de versionamento mais utilizado no mundo, e essa fama se d√° pela facilidade de uso, e principalmente no desempenho. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mas-o-que-s%C3%A3o-sistemas-de-controle-versionamento"&gt;
  &lt;/a&gt;
  Mas o que s√£o sistemas de controle versionamento?
&lt;/h4&gt;

&lt;p&gt;O controle de vers√£o √© a atividade de rastrear e gerenciar as mudan√ßas em um c√≥digo de software. Atrav√©s dele as equipes de desenvolvimento conseguem realizar m√∫ltiplas tarefas e modifica√ß√µes de c√≥digo com o intuito de adicionar funcionalidades, corrigir bugs entre outras atividades.&lt;/p&gt;

&lt;p&gt;Os sistemas de controle de vers√£o guardam as altera√ß√µes ao longo do tempo em um tipo de banco de dados especial que pode ser visualizado e chamado quando se deseja obter uma certa vers√£o espec√≠fica do c√≥digo. Geralmente essa solicita√ß√£o ocorre quando erros s√£o cometidos e se quer voltar numa vers√£o anterior do c√≥digo.&lt;/p&gt;

&lt;p&gt;Assim como todo software, necessitamos configurar suas op√ß√µes para que possamos utilizar com maior precis√£o e utilizar seus recursos com maestria. Desse modo, vamos come√ßar pelo b√°sico.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#como-configurar-o-git"&gt;
  &lt;/a&gt;
  Como configurar o Git
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#baixando-o-git"&gt;
  &lt;/a&gt;
  Baixando o Git
&lt;/h4&gt;

&lt;p&gt;Para come√ßarmos a utilizar o controle de vers√£o em nossos projetos devemos inicialmente instalar o Git no nossa m√°quina. Essa instala√ß√£o pode ser feita atrav√©s do download do Git atrav√©s do site oficial do &lt;a href="https://git-scm.com/downloads"&gt;Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No meu caso estou utilizando atualmente o Windows 10 Pro e a vers√£o mais atual do Git dispon√≠vel √© esta do dia 06/06/2021.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnfrkf0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4xlvhqwf74yloc57nwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnfrkf0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4xlvhqwf74yloc57nwp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#configurando-o-git"&gt;
  &lt;/a&gt;
  Configurando o Git
&lt;/h4&gt;

&lt;p&gt;Ap√≥s instalado o Git em nosso sistema, devemos fazer as primeiras configura√ß√µes para utilizarmos o controle de vers√£o adequadamente.&lt;/p&gt;

&lt;p&gt;As configura√ß√µes do utilizador podem ser visualizadas atrav√©s do comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Numa primeira instala√ß√£o, algumas informa√ß√µes como o nome do usu√°rio, e-mail e editor padr√£o por exemplo n√£o ter√£o sido definidas. Sendo assim, configuraremos cada informa√ß√£o.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#escopos-do-git"&gt;
  &lt;/a&gt;
  Escopos do Git
&lt;/h4&gt;

&lt;p&gt;Antes de nos aprofundarmos nas configura√ß√µes do Git, quero apenas explanar parcialmente sobre os escopos dos comandos.&lt;/p&gt;

&lt;p&gt;O Git guarda as informa√ß√µes em tr√™s lugares:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitConfig --system:
Altera as configura√ß√µes para todos os usu√°rios do seu sistema se utilizada a op√ß√£o &lt;code&gt;--system&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;GitConfig do usu√°rio --global:
Altera as configura√ß√µes apenas para o usu√°rio que est√° executando o projeto. &lt;code&gt;--global&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;GitConfig do projeto:
Altera as configura√ß√µes apenas do projeto que se est√° desenvolvendo. O comando para utilizar este escopo √©:
&lt;code&gt;git config&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#configura%C3%A7%C3%A3o-dos-dados"&gt;
  &lt;/a&gt;
  Configura√ß√£o dos dados
&lt;/h4&gt;

&lt;p&gt;Para definir informa√ß√µes que aplicaremos para todos os reposit√≥rios de um usu√°rio, utilizaremos a configura√ß√£o global.&lt;/p&gt;

&lt;p&gt;Configurando o user-name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "nomedousuario"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configurando o e-mail:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.email "seuemail"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voc√™ pode utilizar tamb√©m um editor padr√£o para o seu c√≥digo. Por padr√£o o Vim √© utilizado. No meu caso, quero definir meu editor de texto padr√£o para o VS Code. Voc√™ pode utilizar o seguinte comando para utiliza-lo tamb√©m:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global core.editor "code --wait"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caso voc√™ utilize outro editor de texto, sugiro procurar a documenta√ß√£o que trate desta tem√°tica.&lt;/p&gt;

&lt;p&gt;Essas s√£o as configura√ß√µes elementares do Git. Para visualizar as configura√ß√µes definidas, voc√™ pode chamar no control cada uma:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config user.name&lt;/code&gt; - No caso do nome do usu√°rio.&lt;br&gt;
&lt;code&gt;git config user.email&lt;/code&gt; - No caso do e-mail.&lt;/p&gt;

&lt;p&gt;Pronto, a configura√ß√£o mais b√°sica do git foi feita. Agora, quando realizamos altera√ß√µes em nosso c√≥digo e submete-las ao git, essas informa√ß√µes ser√£o levadas tamb√©m.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#reposit%C3%B3rios"&gt;
  &lt;/a&gt;
  Reposit√≥rios
&lt;/h1&gt;

&lt;p&gt;Obviamente todo mundo que est√° desenvolvendo um projeto precisa colocar esse projeto em algum lugar para administrar suas vers√µes, guardar de maneira segura seus dados, enfim, gerenciar todas as atividades desenvolvidas durante o processo de produ√ß√£o. Como eu j√° disse, o Git auxilia nisso, e para come√ßarmos a executar tais atividades necessitamos criar algo chamado reposit√≥rio.&lt;/p&gt;

&lt;p&gt;O reposit√≥rio Git armazena todas as altera√ß√µes feitas em um projeto dentro de uma pasta chamada &lt;code&gt;.git/&lt;/code&gt;. Aqui ele constr√≥i algo como uma linha do tempo que armazena cada altera√ß√£o enviada. Cada altera√ß√£o guarda um c√≥digo Hash √∫nico que poder√° ser chamado posteriormente para consulta dos dados armazenados. Vou detalhar tudo a seguir. Vamos partir para a inicializa√ß√£o e cada etapa ser√° explanada.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inicializando-reposit%C3%B3rios"&gt;
  &lt;/a&gt;
  Inicializando reposit√≥rios
&lt;/h3&gt;

&lt;p&gt;Para iniciarmos um reposit√≥rio devemos antes de qualquer coisa ter um projeto, neste caso vou criar um diret√≥rio atrav√©s do terminal do Win10.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir git-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois de criado o diret√≥rio, podemos adicionar um novo arquivo, no nosso caso irei criar um HTML para simular algumas altera√ß√µes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto, agora temos um reposit√≥rio chamado &lt;code&gt;git-project&lt;/code&gt; e dentro dele temos um arquivo chamado &lt;code&gt;index.html&lt;/code&gt;. Vamos imaginar que esse √© o nosso super projeto, iremos usa-lo por hora para explicar alguns conceitos.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#destrinchando-o-git-init"&gt;
  &lt;/a&gt;
  Destrinchando o Git Init
&lt;/h4&gt;

&lt;p&gt;Agora que j√° temos o m√≠nimo para iniciar o reposit√≥rio, podemos prosseguir com o estudo.&lt;/p&gt;

&lt;p&gt;Vamos inicializar um novo reposit√≥rio  para o diret√≥rio criado, a inicializa√ß√£o √© feita atrav√©s do seguinte comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando inicializamos um reposit√≥rio atrav√©s do comando supracitado, o Git cria um reposit√≥rio vazio o &lt;code&gt;.git/&lt;/code&gt; com subdiret√≥rios para &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt; arquivos e models. Al√©m disso, cria uma branch vazia sem nenhum commit. (Veremos mais sobre branches em breve).&lt;/p&gt;

&lt;p&gt;Bom citar que existem outros tipos de Git Init, n√£o pretendo me aprofundar muito, mas para efeito de informa√ß√£o temos:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt; Transforma o diret√≥rio atual num reposit√≥rio Git.&lt;br&gt;
&lt;code&gt;git init &amp;lt;directory&amp;gt;&lt;/code&gt; Transforma um diret√≥rio especificado num reposit√≥rio Git.&lt;br&gt;
&lt;code&gt;git init --bare&lt;/code&gt; Cria um novo reposit√≥rio vazio (um reposit√≥rio para ser usado apenas como um reposit√≥rio remoto). Esse tipo de &lt;em&gt;init&lt;/em&gt; √© utilizado em servidores e s√£o considerados apenas reposit√≥rios para armazenamento. Ele facilita a troca de informa√ß√µes entre os desenvolvedores. No link a seguir voc√™ pode ver um pouco sobre &lt;a href="https://pt.stackoverflow.com/questions/80182/qual-%C3%A9-a-diferen%C3%A7a-entre-git-init-e-git-init-bare"&gt;a diferen√ßa entre git init e git bare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Caso voc√™ inicialize um reposit√≥rio Git num diret√≥rio errado  voc√™ pode remover o reposit√≥rio muito facilmente. Basta utilizar o comando &lt;code&gt;$ rm -rf .git&lt;/code&gt; e pronto, seu reposit√≥rio local foi removido.&lt;/p&gt;

&lt;p&gt;Caso exista o &lt;code&gt;.gitignore/&lt;/code&gt; e &lt;code&gt;.gitmodules/&lt;/code&gt; voc√™ pode exclui-los tamb√©m utilizando o comando &lt;code&gt;$ rm -rf .git*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quando executar, sugiro visualizar se alguma pasta oculta ainda existe.&lt;/p&gt;

&lt;p&gt;Tudo pronto, aprendemos a iniciar um reposit√≥rio local no nosso Git. Agora podemos come√ßar a manipular arquivos livremente. A partir daqui somos capazes de realizar altera√ß√µes em nosso c√≥digo e transferi-los entre status. A seguir vamos entender o ciclo de vida de arquivos e como eles se comportam no Git.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#ciclo-de-vida-de-arquivos"&gt;
  &lt;/a&gt;
  Ciclo de vida de arquivos
&lt;/h1&gt;

&lt;p&gt;O ciclo de vida dos arquivos √© uma descri√ß√£o bem grosseira para referenciar os status que cada arquivo passa durante o processo de produ√ß√£o de um projeto.&lt;/p&gt;

&lt;p&gt;Quero explicar antes de tudo cada um dos status para melhor entendimento do assunto.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#status"&gt;
  &lt;/a&gt;
  Status
&lt;/h4&gt;

&lt;p&gt;Os status s√£o situa√ß√µes (num grosso modo) que os arquivos se encontram. Esses status s√£o:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Untracked - O arquivo acabou de ser adicionado mas ainda n√£o foi visto pelo Git&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unmodifier - Quando o arquivo foi visto pelo git mas n√£o foi modificado.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modified - O arquivo foi modificado.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Staged - √Årea onde ser√° criada a vers√£o.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6XiAfku4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz4o22zxp08nxnafpkdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6XiAfku4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz4o22zxp08nxnafpkdo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como vemos na imagem, existem regras que levam um arquivo de um status para outro. Seguindo o fluxo podemos definir como sendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Untracked -&amp;gt; Unmodified&lt;br&gt;
Quando adicionamos um arquivo e ele √© visto pelo Git e n√£o tem modifica√ß√µes, ele passa a ter o status de unmodified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unmodified -&amp;gt; Modified&lt;br&gt;
Quando qualquer altera√ß√£o no arquivo √© executada.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modified -&amp;gt; Staged&lt;br&gt;
Quando a modifica√ß√£o √© salva no Git. Neste momento ela ainda n√£o foi efetivada.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Staged -&amp;gt; Unmodified&lt;br&gt;
Essa altera√ß√£o se d√° quando realizamos um commit, aqui um c√≥digo hash da modifica√ß√£o √© gerada e nosso arquivo est√° apto a receber novas mudan√ßas do c√≥digo para um novo commit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unmodified -&amp;gt; Untracked&lt;br&gt;
Quando removemos um arquivo.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos visualizar o status de cada arquivo atr√°ves de um comando que o Git nos fornece, o &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Este comando exibe algumas informa√ß√µes relevantes sobre os status dos nossos arquivos, essas informa√ß√µes podem ser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Onde o arquivo est√°.&lt;/li&gt;
&lt;li&gt;Os commits realizados.&lt;/li&gt;
&lt;li&gt;Se existe algum commit pendente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aqui podemos ver alguns exemplos:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#untracked"&gt;
  &lt;/a&gt;
  Untracked
&lt;/h4&gt;

&lt;p&gt;Arquivo house.html foi criado mas n√£o foi visto pelo Git.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa0tsHEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v6wlaimted19mn679vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aa0tsHEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6v6wlaimted19mn679vn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#staged"&gt;
  &lt;/a&gt;
  Staged
&lt;/h4&gt;

&lt;p&gt;Aqui o arquivo foi adicionado atrav√©s do comando &lt;code&gt;git add house.html&lt;/code&gt;. Ele passa para o est√°gio stage e est√° pronto para ser commitado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFPM2j7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkjxj7k10qf3qf5it98t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ILFPM2j7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkjxj7k10qf3qf5it98t.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#staged-gt-unmodified"&gt;
  &lt;/a&gt;
  Staged -&amp;gt; Unmodified
&lt;/h4&gt;

&lt;p&gt;Aqui o arquivo foi commitado, ou seja, criamos uma snap (ou espelho) das modifica√ß√µes que estar√£o salvas num c√≥digo hash que podemos utilizar posteriormente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xj8tdMoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt5hb7mue48a8ge47j5p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xj8tdMoZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt5hb7mue48a8ge47j5p.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O commit √© feito atrav√©s do comando &lt;code&gt;git commit -m "First commit"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;-m = comando para passarmos uma mensagem.&lt;br&gt;
"" = A mensagem √© passada entre as aspas.&lt;/p&gt;

&lt;p&gt;A partir desse momento o arquivo tem o status de unmodified pois ele foi criado, adicionado e commitado. Agora o Git aguarda modifica√ß√µes do arquivo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92oDPSX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76f9ufie06bdaljhx5s1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92oDPSX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76f9ufie06bdaljhx5s1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando modifico o arquivo ele vai para o status de modified e aguarda ser transferido para o status staged. E o ciclo se inicia novamente.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fchrCJvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyujpbz4lhel5mapzyo5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fchrCJvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyujpbz4lhel5mapzyo5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver, entender os ciclos n√£o √© muito complexo. Caso voc√™ tenha alguma d√∫vida, existe um curso gratuito na udemy que pode te auxiliar em todo o contexto de entendimento b√°sico do Git.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/git-e-github-para-iniciantes/"&gt;https://www.udemy.com/course/git-e-github-para-iniciantes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pr√≥pria documenta√ß√£o do Git pode te auxiliar nisso tamb√©m. O link abaixo te direciona para um artigo que explica mais detalhadamente os status do Git.&lt;br&gt;
&lt;a href="https://git-scm.com/docs/git-status"&gt;https://git-scm.com/docs/git-status&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-um-commit"&gt;
  &lt;/a&gt;
  O que √© um commit
&lt;/h1&gt;

&lt;p&gt;Sei que j√° falei bastante de commits, que precisamos dele para subir altera√ß√µes num projeto e bla bla bla, mas n√£o cheguei a explicar ele muito bem. Vou fazer a boa e dar uma breve introdu√ß√£o sobre commits para ficamos alinhados a partir daqui.&lt;/p&gt;

&lt;p&gt;Bom, o &lt;code&gt;git commit&lt;/code&gt; √© usado para salvar altera√ß√µes num reposit√≥rio local. E esse comando s√≥ funciona quando arquivos s√£o inseridos para serem commitados, ou seja, quando passamos esses arquivos para o status staged atrav√©s do comando &lt;code&gt;git add&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quando commitamos informa√ß√µes de um arquivo criamos uma c√≥pia dos arquivos no que podemos chamar de espelho. Cada espelho guarda todas as informa√ß√µes do commit, como um c√≥digo hash por exemplo, que seria basicamente um ID √∫nico que nomeia aquele commit. Quando precisamos retornar as informa√ß√µes de um determinado commit, √© esse c√≥digo hash que utilizamos. Al√©m do hash, temos tamb√©m quem realizou o commit e quando foi feito. Posteriormente explicarei a estrutura de informa√ß√µes do commit quando estivermos estudando o &lt;code&gt;git log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Acho importante frisar que o commit adiciona no reposit√≥rio &lt;strong&gt;LOCAL&lt;/strong&gt; as altera√ß√µes realizadas, ou seja, para inserirmos num remoto, precisamos de outro comando que subiria para o GitHub por exemplo, mas nos limitaremos apenas a Git neste artigo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.git-tower.com/learn/git/commands/git-commit/"&gt;Aqui voc√™ pode ler um pouco tamb√©m sobre commits&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visualizando-diferen%C3%A7as-entre-arquivos"&gt;
  &lt;/a&gt;
  Visualizando diferen√ßas entre arquivos
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#diff-commit"&gt;
  &lt;/a&gt;
  Diff commit
&lt;/h4&gt;

&lt;p&gt;Quando vamos realizar commits, podemos comparar as altera√ß√µes entre os arquivos atrav√©s do comando &lt;code&gt;git diff&lt;/code&gt;. As altera√ß√µes s√£o listadas conforme a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qv1W_v9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sae7n6dfdfqwu9aunn3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qv1W_v9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sae7n6dfdfqwu9aunn3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#branch"&gt;
  &lt;/a&gt;
  Branch
&lt;/h1&gt;

&lt;p&gt;A partir desse ponto iremos falar muito sobre branches. √â um assunto bem recorrente quando come√ßamos a trabalhar em projetos com outras pessoas, sendo assim, √© um conceito que precisamos entender bem para manipular com mais efici√™ncia nosso processo de produ√ß√£o.&lt;/p&gt;

&lt;p&gt;Branch √© exatamente o que diz a palavra se traduzida, s√£o ramos. Esses ramos s√£o criados para que possamos trabalhar de maneira organizada em nossos projetos. Isso porque nossos reposit√≥rios s√£o como uma √°rvore, onde temos uma estrutura base(o tronco) e dela derivam todas as ramifica√ß√µes(os galhos).&lt;/p&gt;

&lt;p&gt;Quando criamos um reposit√≥rio, ele contem uma branch principal chamada branch master da qual derivam todas as outras branches. Na imagem abaixo √© exibida como √© a estrutura de ramos dos nossos reposit√≥rios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--palArZia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqzvq7hgy3aamkrib0wf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--palArZia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqzvq7hgy3aamkrib0wf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao criarmos uma nova branch temos agora duas linhas de trabalho diferentes, onde podemos executar modifica√ß√µes em nosso projeto sem impactar diretamente no funcionamento do mesmo. Isso permite para n√≥s desenvolvedores, criamos funcionalidades e testa-las sem impactar no projeto principal.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#manipulando-branches"&gt;
  &lt;/a&gt;
  Manipulando branches
&lt;/h2&gt;

&lt;p&gt;Como eu disse, quando criamos um projeto novo, ele j√° cont√©m uma branch, a branch master. Podemos verificar isso digitando:&lt;br&gt;
&lt;code&gt;git status&lt;/code&gt;. Ele exibir√° exatamente em qual branch estamos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SB_SffVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st460i8a2lfrf14u0cdn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SB_SffVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st460i8a2lfrf14u0cdn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
O caso acima nos mostra que estamos na branch master.&lt;/p&gt;

&lt;p&gt;Al√©m disso, podemos ver quais branches est√£o dispon√≠veis no nosso projeto a partir do comando &lt;code&gt;git branch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FdMEd4Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujfrbyiopec81vy4ua8v.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FdMEd4Y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujfrbyiopec81vy4ua8v.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O asterisco exibe em qual branch estamos no momento. Note que existe outra branch ativa chamada feature, nela poderemos desenvolver ferramentas para nosso projeto e depois vincular as altera√ß√µes a branch master.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#criando-nova-branch"&gt;
  &lt;/a&gt;
  Criando nova branch
&lt;/h4&gt;

&lt;p&gt;Para criarmos uma nova branch, basta executarmos o comando &lt;code&gt;git checkout -b nomedabranch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8lL3PG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlo68h7b8nce81ojof3f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8lL3PG1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlo68h7b8nce81ojof3f.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando criamos uma nova branch, automaticamente a branch ativa √© trocada. Acima o pr√≥prio git nos informa que "NovaBranch" √© a branch ativa no momento, sendo assim, as altera√ß√µes no c√≥digo que forem efetuadas, estar√£o vinculadas a essa branch espec√≠fica.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#deletando-branches"&gt;
  &lt;/a&gt;
  Deletando branches
&lt;/h4&gt;

&lt;p&gt;Para excluirmos uma branch criada, o comando que podemos executar √© &lt;code&gt;git checkout -D nomedabranch&lt;/code&gt;. Desse modo, a branch especificada ser√° removida do nosso projeto.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#alternando-entre-branches"&gt;
  &lt;/a&gt;
  Alternando entre branches
&lt;/h4&gt;

&lt;p&gt;Para mudarmos para outra branch existente basta digitarmos o comando &lt;code&gt;git checkout nomeDaBranch&lt;/code&gt;. Assim, iremos trocar a branch ativa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oxE2K6nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50grzhe3gku3hglhlutq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oxE2K6nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50grzhe3gku3hglhlutq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que ap√≥s executado o comando, o git nos informa que mudamos a branch ativa. Na imagem acima, fa√ßo a mudan√ßa para a branch master.&lt;/p&gt;

&lt;p&gt;Voc√™ pode acessar esse artigo do &lt;a href="https://medium.com/@Juliobguedes/entendendo-git-branches-parte-2-3778f4258843"&gt;medium&lt;/a&gt; para entender um pouco mais sobre branch e manipula√ß√£o.&lt;/p&gt;

&lt;p&gt;Sabendo disso, podemos partir para as pr√≥ximas partes do artigo. Lembrando que manipula√ß√£o de branches √© de extrema import√¢ncia caso queiramos trabalhar com grandes projetos.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visualizando-logs"&gt;
  &lt;/a&gt;
  Visualizando Logs
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#git-log"&gt;
  &lt;/a&gt;
  Git Log
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;O log tem rela√ß√£o direta com o seu significado em portugu√™s, registro. Com esse comando voc√™ pode visualizar as informa√ß√µes de registro de um commit realizado. Caso tenha interesse, voc√™ pode ler sobre esta fun√ß√£o &lt;a href="https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Vendo-o-hist%C3%B3rico-de-Commits"&gt;aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Supondo que temos um projeto j√° criado, o git j√° iniciado, e commits j√° executados, podemos visualizar os commits e as informa√ß√µes pertinentes a cada um apenas utilizando o comando &lt;code&gt;git log&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMMgR0qb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nsrdmwddd3dav9z88xh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMMgR0qb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nsrdmwddd3dav9z88xh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se executar o comando, poderemos ver algo bem semelhante a imagem acima. Para descrever melhor cada informa√ß√£o, temos ent√£o:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit - c√≥digo Hash √∫nico que nomeia o commit&lt;/li&gt;
&lt;li&gt;Author - Quem que executou o commit&lt;/li&gt;
&lt;li&gt;Date - Data que o commit foi realizado&lt;/li&gt;
&lt;li&gt;Mensagem - Por √∫ltimo a mensagem que foi passada atrav√©s do &lt;code&gt;git commit -m "sua mensagem"&lt;/code&gt;. √â importante descrever bem o que foi executado para que posteriormente possamos identificar com melhor precis√£o um commit em espec√≠fico.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#git-decorate"&gt;
  &lt;/a&gt;
  Git decorate
&lt;/h4&gt;

&lt;p&gt;Podemos visualizar as logs exibindo a rela√ß√£o entre as branches atrav√©s do seguinte comando &lt;code&gt;git log --decorate&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzd7WkjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0udigrvivbdn2ww3lf8e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzd7WkjD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0udigrvivbdn2ww3lf8e.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diferente do git log convecional, podemos ver agora as branches de cada commit realizado.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-log-author"&gt;
  &lt;/a&gt;
  Git Log Author
&lt;/h4&gt;

&lt;p&gt;Para visualizarmos apenas os commits realizados por um autor em espec√≠fico, podemos utilizar o comando &lt;code&gt;git log --author "Nome do Autor"&lt;/code&gt;. Veja o exemplo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ad6mI-bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyhdesm75aocyfi0u5nh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ad6mI-bV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyhdesm75aocyfi0u5nh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aqui o que se exibe s√£o as mesmas informa√ß√µes do git log s√≥ que filtradas por autor.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-log-graph"&gt;
  &lt;/a&gt;
  Git log graph
&lt;/h4&gt;

&lt;p&gt;Podemos visualizar de forma gr√°fica as branches dos commits realizados com o comando &lt;code&gt;git log --graph&lt;/code&gt;, √© bem √∫til caso queiramos ter uma melhor visualiza√ß√£o do fluxo de trabalho que estamos executando no projeto. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_yjx7on--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hbg2r48tzy139cf1eua.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_yjx7on--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hbg2r48tzy139cf1eua.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A linha lateral mostra o caminho que percorremos durante os commits. Note que todos os commits realizados neste caso ilustrado foram realizados diretamente na branch master, n√£o √© uma pr√°tica recomendada quando estamos trabalhando com mais pessoas e diversas outras funcionalidades. Existem metodologias de fluxo de trabalho que utilizam branches para melhor desenvolvimento de aplica√ß√µes. Vamos conhecer uma delas em breve.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-shortlog"&gt;
  &lt;/a&gt;
  Git Shortlog
&lt;/h4&gt;

&lt;p&gt;Caso desejemos visualizar a rela√ß√£o de commits realizada por autor, podemos visualizar com o comando &lt;code&gt;git log shortlog&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DN5rS--k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezbczor19v3ehbxj6o7h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DN5rS--k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezbczor19v3ehbxj6o7h.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lista de commits por autor exibida pelo shortlog nos mostra a quantidades de commits, e a mensagem passada em cada commit. √â bem √∫til caso queiramos visualizar quem executou determinada altera√ß√£o no c√≥digo.&lt;/p&gt;

&lt;p&gt;Caso queiramos visualizar as quantidade de commits sem exibir a mensagens, basta adicionar o comando &lt;code&gt;-sn&lt;/code&gt; na frente do c√≥digo. Sendo assim, &lt;code&gt;git log shortlog -sn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--da6D70-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbag6pv7dfuojhix0t34.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--da6D70-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbag6pv7dfuojhix0t34.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-show"&gt;
  &lt;/a&gt;
  Git show
&lt;/h4&gt;

&lt;p&gt;Como eu j√° disse, a hash de um commit serve para retornar dados referente a ele e fazer algumas altera√ß√µes quanto ao projeto. O &lt;code&gt;git show "c√≥digo hash da branch"&lt;/code&gt; mostra os detalhes de um commit espec√≠fico. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doD02vvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzq8k9xzerew2t8osbcm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doD02vvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzq8k9xzerew2t8osbcm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Existe uma documenta√ß√£o do pr√≥prio Git que trata do Git show. Voc√™ pode verificar aqui no link: &lt;a href="https://git-scm.com/docs/git-show"&gt;https://git-scm.com/docs/git-show&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#manipulando-commits"&gt;
  &lt;/a&gt;
  Manipulando commits
&lt;/h1&gt;

&lt;p&gt;Quando fazemos altera√ß√µes em arquivos √© bem natural que existam erros e bugs. Quando executamos altera√ß√µes que influenciam negativamente na usabilidade da ferramenta que estamos desenvolvendo muitas vezes necessitamos retornar para vers√µes antigas at√© que um problema seja corrigido. Para nos auxiliar no gerenciamento de vers√µes, podemos utilizar algumas fun√ß√µes espec√≠ficas do Git. Vamos conhecer algumas delas.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-checkout"&gt;
  &lt;/a&gt;
  Git checkout
&lt;/h2&gt;

&lt;p&gt;O comando &lt;code&gt;git checkout&lt;/code&gt; opera em tr√™s entidades distintas: os arquivos, os commits e as branches.&lt;/p&gt;

&lt;p&gt;Uma descri√ß√£o mais precisa da fun√ß√£o do checkout descrita pela &lt;a href="https://www.atlassian.com/br/git/tutorials/using-branches/git-checkout"&gt;Atlassian&lt;/a&gt; √©:&lt;br&gt;
O checkout pode ser utilizado para visualizar commits antigos al√©m de realizar opera√ß√µes nas branches criadas. A verifica√ß√£o das branches √© semelhante √† verifica√ß√£o de commits e arquivos antigos, e novas altera√ß√µes s√£o salvas no hist√≥rico do projeto ‚Äî ou seja, n√£o √© uma opera√ß√£o apenas de leitura.&lt;/p&gt;

&lt;p&gt;O git checkout permite a navega√ß√£o entre branches. A verifica√ß√£o de uma branch atualiza os arquivos no diret√≥rio atual para que fique igual √† vers√£o armazenada na branch referenciada e diz ao Git para gravar todos os novos commits nessa branch.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#retornando-status-de-arquivos"&gt;
  &lt;/a&gt;
  Retornando status de arquivos
&lt;/h4&gt;

&lt;p&gt;Quando estamos desenvolvendo, √© natural que alguns erros sejam cometidos, utilizar a linha do tempo do Git √© muito √∫til caso queiramos manipular arquivos ao bel prazer.&lt;/p&gt;

&lt;p&gt;Quando estamos editando arquivos e eles passam do status unmodified para modified, podemos retornar essas altera√ß√µes atrav√©s do comando &lt;code&gt;git checkout NomeDoArquivo&lt;/code&gt;. Veja o exemplo a seguir:&lt;/p&gt;

&lt;p&gt;Aqui existe um arquivo chamado &lt;code&gt;house.html&lt;/code&gt;, ele est√° com status unmodified. Farei uma pequena modifica√ß√£o para visualizarmos a fun√ß√£o do git checkout na pr√°tica.&lt;/p&gt;

&lt;p&gt;Arquivo sem nenhuma modifica√ß√£o:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3JZZk16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3o9ufwns18qhgwp2vad.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3JZZk16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3o9ufwns18qhgwp2vad.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Arquivo modificado:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--seR7IJ4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3osblqdzgwud0ofz6xkt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--seR7IJ4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3osblqdzgwud0ofz6xkt.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando executamos o comando &lt;code&gt;git checkout house.html&lt;/code&gt; ele retorna o arquivo do status modified para o status unmodified, sendo assim, as altera√ß√µes deixam de existir e o arquivo volta ao seu est√°gio inicial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AcmY3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b2v0uhzm9dw1xj3xgzv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AcmY3hO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b2v0uhzm9dw1xj3xgzv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar com o &lt;code&gt;git diff&lt;/code&gt; que n√£o existe nenhuma modifica√ß√£o. Sendo assim, o arquivo voltou ao seu est√°gio de unmodified.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-reset"&gt;
  &lt;/a&gt;
  Git reset
&lt;/h2&gt;

&lt;p&gt;Como vimos, o checkout retorna um arquivo do status modified para unmodified. Ou seja, n√£o tem influencia quando adicionamos um arquivo para staged ou quando ele √© commitado. Para suprir essa necessidade, podemos utilizar outros comandos bem comuns para nos auxiliar. O &lt;code&gt;git reset&lt;/code&gt; e suas op√ß√µes. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-reset-head"&gt;
  &lt;/a&gt;
  Git reset HEAD
&lt;/h4&gt;

&lt;p&gt;O comando &lt;code&gt;git reset HEAD NomeDoArquivo&lt;/code&gt; retorna um arquivo do status staged para o status modified, desse modo, podemos fazer alguma pequena altera√ß√£o antes de um commit ser realizado.&lt;/p&gt;

&lt;p&gt;Na imagem abaixo realizei uma altera√ß√£o no arquivo &lt;code&gt;house.html&lt;/code&gt; e o adicionei ao status staged atrav√©s do comando &lt;code&gt;git add *&lt;/code&gt; (o asterisco adiciona todos os arquivos modificados).&lt;br&gt;
Quando o arquivo passou para o status de staged utilizei o comando &lt;code&gt;git reset HEAD house.html&lt;/code&gt; para retornar o status do arquivo especificado &lt;code&gt;house.html&lt;/code&gt; para o status de modified. Podemos ver que ap√≥s executado o pr√≥prio git nos informa o que foi executado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Unstaged changes after reset:
M       house.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrwQihQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pv1o2xj5y3ekjwgyamq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrwQihQ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pv1o2xj5y3ekjwgyamq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Desse modo, podemos realizar altera√ß√µes em arquivos que est√£o no status staged facilmente.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#git-reset-e-suas-varia%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Git reset e suas varia√ß√µes
&lt;/h4&gt;

&lt;p&gt;Al√©m do &lt;code&gt;git reset HEAD&lt;/code&gt; temos outras 3 varia√ß√µes de reset que devem ser utilizadas em situa√ß√µes distintas. Cada um dos comandos altera de forma espec√≠fica o status de cada arquivo. As formas do &lt;code&gt;git reset&lt;/code&gt; que temos s√£o:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset --soft&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git reset --mixed&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git reset --hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;√â bom explanar que, quando queremos modificar um arquivo do comando reset, devemos sempre referenciar a hash do commit anterior ao que se est√° tentando dar reset. Para ilustrar posso usar os commits da imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqSNydlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a273bqgtdg3p9ezyvlx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqSNydlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a273bqgtdg3p9ezyvlx.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Caso eu queria realizar modifica√ß√µes no commit grifado com azul, eu devo utilizar o reset referenciando o √∫ltimo commit antes do alvo, neste caso, o hash grifado em vermelho. Sabendo disso, podemos seguir com a explica√ß√£o.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reset-soft"&gt;
  &lt;/a&gt;
  Reset Soft
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git reset --soft&lt;/code&gt;&lt;br&gt;
Retorna o commit para o status staged.&lt;/p&gt;

&lt;p&gt;Utilizamos este comando quando realizamos um commit num arquivo e desejamos corrigir ou adicionar algo. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMjvGQM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0bx3x5kritvzn6a91wn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMjvGQM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0bx3x5kritvzn6a91wn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
No caso acima, referenciei a hash de um commit anterior ao foco e utilizei o git status para mostrar que o arquivo house.html voltou para o status de staged, pronto para ser commitado.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reset-mixed"&gt;
  &lt;/a&gt;
  Reset Mixed
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git reset --mixed&lt;/code&gt;&lt;br&gt;
Retorna o commit para o status modified.&lt;/p&gt;

&lt;p&gt;Aqui o commit retorna para antes de ser adicionado, apenas para o momento que foi modificado. Sendo assim, o status modified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPD9bXM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxyb4dujqp0ezm0p8kd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPD9bXM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnxyb4dujqp0ezm0p8kd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#reset-hard"&gt;
  &lt;/a&gt;
  Reset Hard
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git reset --hard&lt;/code&gt;&lt;br&gt;
Este comando elimina totalmente o seu commit, e retorna para o commit do hash que voc√™ est√° referenciando. Tudo depois dele ser√° eliminado.&lt;/p&gt;

&lt;p&gt;Log antes do git reset. No comando iremos referenciar o segundo commit.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIOmypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kjdhutsksrofrkeidty.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIOmypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kjdhutsksrofrkeidty.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s o &lt;code&gt;git reset --hard&lt;/code&gt; podemos notar que os commits posteriores ao referenciado deixam de existir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TCgfXQ9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgffdi7h7kkfmwtn7hi5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TCgfXQ9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgffdi7h7kkfmwtn7hi5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;√â importante lembrar que quando fazemos alguma altera√ß√£o do tipo, essas altera√ß√µes s√£o feitas no reposit√≥rio local, quando se trata de reposit√≥rios remotos alguns problemas podem surgir, como conflito de informa√ß√µes entre arquivos por exemplo.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h1&gt;

&lt;p&gt;Quando estamos desenvolvendo aplica√ß√µes em times e precisamos realizar modifica√ß√µes em c√≥digos, adicionar novas funcionalidades ou corrigir bugs, utilizamos as branches do Git para trabalhar. &lt;/p&gt;

&lt;p&gt;Ao finalizamos as altera√ß√µes, precisamos mover essas altera√ß√µes para a branch principal (master) para que nossas funcionalidades sejam aplicadas ao projeto. Sendo assim, temos duas metodologias de fluxo de trabalho que podemos seguir para executarmos nossas altera√ß√µes devidamente. S√£o elas o Merge e o Rebase. &lt;/p&gt;

&lt;p&gt;Para explicar o processo de produ√ß√£o do Merge utilizarei a imagem a seguir. Ela exemplifica o mapa de commits num Merge. Os seus detalhes explicarei a seguir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C6vav2Vx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p59kvjxpyaou4bw42xn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C6vav2Vx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p59kvjxpyaou4bw42xn1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na ilustra√ß√£o acima podemos notar a presen√ßa de duas branches, a master e a feature. Em cada uma das branches s√£o executados commits de acordo com as modifica√ß√µes realizadas. Num determinado momento, os commits realizados na branch feature precisam ser enviados para a branch master. Desse modo, garantimos que a aplica√ß√£o receba o que foi desenvolvido em outras ramifica√ß√µes. &lt;/p&gt;

&lt;p&gt;Para melhor entendimento, deixe-me descrever melhor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C1 - O primeiro commit realizado na branch master&lt;/li&gt;
&lt;li&gt;C2 - Segundo commit realizado. Aqui foi criada a nova branch chamada feature. A partir daqui come√ßamos a dividir o nosso fluxo de trabalho para o desenvolvimento de uma nova funcionalidade.&lt;/li&gt;
&lt;li&gt;C3 - Na nova branch feature, come√ßamos a realizar commits que inserem as configura√ß√µes da funcionalidade que queremos implementar.&lt;/li&gt;
&lt;li&gt;C4 - Em paralelo ao desenvolvimento na branch feature, temos modifica√ß√µes executadas na pr√≥pria master. Essas altera√ß√µes s√£o exibidas no commit C4.&lt;/li&gt;
&lt;li&gt;C5 - As √∫ltimas modifica√ß√µes da feature s√£o efetuadas e a partir daqui precisamos unir nossas altera√ß√µes realizadas na branch feature, com nosso projeto da master.&lt;/li&gt;
&lt;li&gt;C6 - A uni√£o das duas branches acontece atrav√©s do commit C6, e temos agora todas as modifica√ß√µes do c√≥digo realizadas na feature pertencendo a branch master.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gostaria de fazer uma simula√ß√£o de um Merge na pr√°tica, desse modo sinto que visualizar o c√≥digo ser√° mais efetivo para concretizar o conhecimento. &lt;/p&gt;

&lt;p&gt;Configura√ß√µes do projeto&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diret√≥rio chamado merge&lt;/li&gt;
&lt;li&gt;Arquivo &lt;code&gt;index.html&lt;/code&gt; que ser√° modificado&lt;/li&gt;
&lt;li&gt;Duas branches presentes, a branch master e outra chamada feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O arquivo index.html foi iniciado e commitado na branch master. Alternamos agora para a branch Feature e criamos um novo arquivo chamado &lt;code&gt;index.js&lt;/code&gt;, iremos commita-lo na branch feature. Ap√≥s isso, realizamos um novo commit na branch master. Ap√≥s essas altera√ß√µes podemos realizar um Merge entre as branches, vinculando as altera√ß√µes da branch Feature com a branch Master.Desse modo temos a estrutura de commits das duas branches ilustrada a seguir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7YW8GU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2mt7vqaj0zanaxbgvay.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7YW8GU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2mt7vqaj0zanaxbgvay.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descrevendo o fluxo de commits de cada branch:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apenas o commit do &lt;code&gt;index.html&lt;/code&gt; que chamei de first commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrvMrq-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlhm52hmku8o0xisof3x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrvMrq-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlhm52hmku8o0xisof3x.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Criamos uma nova branch e commitamos um novo arquivo chamado &lt;code&gt;index.js&lt;/code&gt; na nova branch feature. Abaixo podemos verificar os commits realizados.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNHsj1ca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvcv52vp3xkfemdgbs0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNHsj1ca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvcv52vp3xkfemdgbs0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver, temos dois commits, o primeiro realizado na branch master e o o segundo na branch feature. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Master&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alternamos para a branch master e realizamos um novo commit, dessa vez alterando o conte√∫do do arquivo index.html.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwNzJxbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yac9veympv6opydtudx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwNzJxbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yac9veympv6opydtudx.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora precisamos unir as altera√ß√µes das branches atrav√©s do Merge. Para realizamos um merge, utilizamos o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git merge feature
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O comando acima junta a branch feature com a branch master. Lembrando que para o comando funcionar, voc√™ precisa estar na branch master, onde a feature ser√° mesclada. A imagem a seguir exibe a uni√£o das duas branches. O arquivo &lt;code&gt;index.js&lt;/code&gt; foi adicionado, logo tivemos uma nova inser√ß√£o.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FJFAn-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/781g1ete4eyecsfqw8vv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FJFAn-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/781g1ete4eyecsfqw8vv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora podemos verificar o hist√≥rico de commits em forma de gr√°fico com o comando &lt;code&gt;git log --graph&lt;/code&gt;. Ele exibe todo o fluxo de commits e nos mostra tamb√©m de onde surgiu determinado commit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ec2Lrha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lq018mfrxigc9lt0g3jm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ec2Lrha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lq018mfrxigc9lt0g3jm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pela ordem de commits temos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first commit realizado na branch master;&lt;/li&gt;
&lt;li&gt;add html document realizado na branch master;&lt;/li&gt;
&lt;li&gt;add js realizado na branch feature;&lt;/li&gt;
&lt;li&gt;merge, uni√£o entre as duas branches.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A branch master agora cont√©m todas as altera√ß√µes realizadas na branch feature e na pr√≥pria branch master.&lt;/p&gt;

&lt;p&gt;Com isso podemos finalizar essa breve introdu√ß√£o ao Git. Voc√™ pode utilizar este artigo para fins de consulta. Aprender a teoria de assuntos √© muito importante para nos aprofundarmos em algum estudo, mas n√£o se sinta pressionado a decorar cada um dos comandos, programar exige mais capacidade de aprender a consultar do que decorar m√©todos. &lt;br&gt;
Pretendo atualizar este guia inicial periodicamente, colocando dicas que voc√™s podem me mandar ou que eu posso acabar descobrindo, sintam-se livres para opinar nos coment√°rios. At√© a pr√≥xima.&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My blockchain üßë‚ÄçüöÄ</title>
      <author>ItsTheGuy</author>
      <pubDate>Mon, 12 Jul 2021 18:02:22 +0000</pubDate>
      <link>https://dev.to/itstheguy/my-blockchain-257c</link>
      <guid>https://dev.to/itstheguy/my-blockchain-257c</guid>
      <description>&lt;p&gt;Hello, what‚Äôs going on? Before you start reading more, I have to thank you about reading this post, this is my first one, and this makes me feel nervous üòØ&lt;/p&gt;

&lt;p&gt;4 months ago, I was bored in the free times of my free times, so I started reading articles about blockchain, and I found very interesting that concept. After finishing reading all the pages of Wikipedia related to blockchain, I started to feel bored again, so I decided to develop my own blockchain as experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-purpose"&gt;
  &lt;/a&gt;
  My purpose üöÄ
&lt;/h2&gt;

&lt;p&gt;I think that Singular (that‚Äôs the blockchain‚Äôs name) is a really cool project, but aside of that, it has a few purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make me learn more about blockchain technology and decentralized networks (I haven‚Äôt still implemented the distributed network because I‚Äôm on research of the best one! You can suggest one at the project‚Äôs discussions if you want!)&lt;/li&gt;
&lt;li&gt;The second one is to share my ideas, and contribute to the open source archive of the humanity üëΩ&lt;/li&gt;
&lt;li&gt;The third one is because is really cool üßë‚Äçüíª&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I‚Äôm so excited about it, and I hope that Singular could help other people find inspiration.&lt;br&gt;
By the way you could find &lt;a href="https://github.com/ItsTheGuy/Singular"&gt;Singular&lt;/a&gt; in my GitHub profile üêô&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>9 Neat JavaScript Snippets For Algorithms And More</title>
      <author>Mike Cronin</author>
      <pubDate>Mon, 12 Jul 2021 17:52:20 +0000</pubDate>
      <link>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</link>
      <guid>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</guid>
      <description>&lt;p&gt;Knowing certain JavaScript one liners can save you valuable time while developing or interviewing. Here are some of my favorite ‚Äúonce you know, you know‚Äù snippets that I have actually used while coding. Only one of them is a bit code golf-y, and unsurprisingly it uses reduce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-around-a-list"&gt;
  &lt;/a&gt;
  Wrap around a list
&lt;/h2&gt;

&lt;p&gt;Spinning is a neat trick, but so is wrapping. A lot of times in algorithms you will need to wrap around a list. Meaning move a number of spaces, and if you reach the end of the list, go back to the first index. So if a list is 8 values long, but you have to move 10, you would need to land on the second index. You could use a bunch of complicated if statements, OR‚Ä¶&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// b&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// c&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="c1"&gt;// etc ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can implement this differently based off steps, but the key thing to understand is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder"&gt;the modulo&lt;/a&gt;. It‚Äôs a handy little operator, keep it in mind when looking at ‚Äúoverflow‚Äù type problems like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-a-variable-with-its-name"&gt;
  &lt;/a&gt;
  Log a variable with its name
&lt;/h2&gt;

&lt;p&gt;This is such a great trick when debugging. Thanks to &lt;a href="https://alligator.io/js/object-property-shorthand-es6/"&gt;object shorthand notation&lt;/a&gt; we can log out variables with names by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// logs out { someVar: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you put in a bunch of logs (and you totally will when debugging), it can be hard to keep track of which is which with all the asyncs, fetches, and loops flying around. Instead of having to take the time to type multiple args like &lt;code&gt;console.log('some var', someVar)&lt;/code&gt;, toss in some curly brackets and call it a day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optional-properties-in-objects"&gt;
  &lt;/a&gt;
  Optional properties in objects
&lt;/h2&gt;

&lt;p&gt;If you don‚Äôt want properties pointing to undefined or null , you might use some if statements to optionally add properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it‚Äôs verbose and I‚Äôve always hated it. It may be clear, but it‚Äôs clunky. Well, thanks to object spreading, it‚Äôs a thing of the past:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;&amp;amp;&amp;amp; logical short circuiting&lt;/a&gt; to dynamically check whether or not to add the property by spreading it. This comes most in handy when you just want to return an object, and don‚Äôt want to create a temporary variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sleep-in-javascript"&gt;
  &lt;/a&gt;
  Sleep in JavaScript
&lt;/h2&gt;

&lt;p&gt;A few times I had to deal with a terrible API that was slow and didn‚Äôt have a hook to say when it finished. So, we just had to wait a second to make sure it loaded. We also wanted to use promises instead of setTimeout callbacks, so using a sleep function was ideal. We could simply await for a second and then move on. No need for callbacks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here‚Äôs how to &lt;a href="https://levelup.gitconnected.com/how-to-turn-settimeout-and-setinterval-into-promises-6a4977f0ace3?sk=80ad1ba261951e1a6cb422db1e51e6c0"&gt;promisify setInterval&lt;/a&gt; as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swap-variable-values"&gt;
  &lt;/a&gt;
  Swap variable values
&lt;/h2&gt;

&lt;p&gt;Before modern JS, if you wanted to switch the values of two variables, you‚Äôd have to introduce a 3rd ‚Äòtemp‚Äô value. Now that we have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;array destructuring and assignment&lt;/a&gt;, we can do it in one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// a is 5, b is 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#round-to-nearest-10-100-1000"&gt;
  &lt;/a&gt;
  Round to nearest 10, 100, 1000‚Ä¶
&lt;/h2&gt;

&lt;p&gt;This one is useful in algorithms if you need to rough out numbers to various levels. Basically, what you‚Äôre doing is dividing first to move the decimal up. With the ‚Äúuseless‚Äù numbers now decimals, you can round them off. To get the number back up to its desired size, you multiply it. The ignored numbers now become zeros. It‚Äôs a neat trick for dealing with money or logarithm-like scales where after a certain point, small numbers can be rounded off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1549&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1500&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15590&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 16000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-duplicates-with-set"&gt;
  &lt;/a&gt;
  Remove duplicates with Set
&lt;/h2&gt;

&lt;p&gt;I just wrote about &lt;a href="https://medium.com/geekculture/should-you-use-javascript-maps-and-sets-1660647b55da?sk=e558f84be27e19e91426e03750fd56ef"&gt;Sets&lt;/a&gt;, and apparently this is kind of their only use. If you have an array and you want to remove the duplicates, you can do so with a Set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;span class="c1"&gt;// [ 1, 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don‚Äôt forget to spread the new Set back into a regular array. Note: be careful with massive lists, as this may not be the most performant solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#count-character-instances"&gt;
  &lt;/a&gt;
  Count character instances
&lt;/h2&gt;

&lt;p&gt;If you have an array (or array from a string) and want to know how many times characters appear, there‚Äôs a super slick way to do this with reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charTotals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="nx"&gt;charTotals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// { H: 1, i: 1, ' ': 1, t: 1, h: 1, e: 2, r: 1, '!': 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one might not be all that useful, but there are 2 techniques that I want to make sure you know: &lt;a href="https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6/"&gt;dynamic object properties&lt;/a&gt; and implicit &lt;a href="https://mariusschulz.com/blog/returning-object-literals-from-arrow-functions-in-javascript"&gt;returns with an object&lt;/a&gt;. Both of those things are crucial knowledge, and if you don‚Äôt &lt;a href="https://levelup.gitconnected.com/javascript-has-a-reduce-method-you-should-use-it-ff4dd29d6c9d?sk=da559dd1a04170eb124f10e2f43cebae"&gt;understand reduce, then read this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#id-makercounter"&gt;
  &lt;/a&gt;
  ID maker/counter
&lt;/h2&gt;

&lt;p&gt;I think I needed to dynamically create non-db temp ids for react components and squished a &lt;a href="https://www.w3schools.com/js/js_function_closures.asp"&gt;classic counter&lt;/a&gt; into one line. Each time the function is called, the counter increases, and no other function can alter its internal state. It uses a &lt;a href="https://itnext.io/a-beginners-guide-to-understanding-javascript-closures-b5eb57fdbeb4?sk=921273adc0bc6e1f2d9dd87310913401"&gt;closure&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;Immediately Invoked Function Expression&lt;/a&gt;, and a default value to keep things tight.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also bonus tip to use default values in function parameters to avoid needing a new line. And you can stop making it an IIFE if you actually want to make the starting number dynamic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 101&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 102&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-word-on-readability"&gt;
  &lt;/a&gt;
  A word on readability
&lt;/h2&gt;

&lt;p&gt;Look, I‚Äôm all about &lt;a href="https://itnext.io/tips-for-writing-self-documenting-code-e54a15e9de2?sk=02d1d7a2f1bb798dc0227cb56485e98b"&gt;readable code&lt;/a&gt; and I‚Äôll be the first person to say that some of these snippets aren‚Äôt super straightforward. What you get in brevity you lose in readability. Now, personally, I don‚Äôt think any of these are too wild, but others might disagree. That‚Äôs why you should try to use small, named functions and descriptive variables. These pieces can be the crucial tip to help your code click for others. But, ultimately it comes down to what you and your team like, so feel free to modify or expand anything here. And if you have any clever one liners you love, please show them off in the comments!&lt;/p&gt;

&lt;p&gt;happy coding everyone,&lt;/p&gt;

&lt;p&gt;mike&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Getting Started with Git</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 12 Jul 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-git-524j</link>
      <guid>https://dev.to/cglikpo/getting-started-with-git-524j</guid>
      <description>&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; is an Open Source Distributed Version Control System.&lt;br&gt;
Let me break it down and explain the wording:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Control System: This basically means that &lt;code&gt;Git&lt;/code&gt; is a content tracker. So &lt;code&gt;Git&lt;/code&gt; can be used to store content ‚Äî it is mostly used to store code due to the other features it provides.&lt;/li&gt;
&lt;li&gt;Version Control System: The code which is stored in &lt;code&gt;Git&lt;/code&gt; keeps changing as more code is added. Also, many developers can add code in parallel. So &lt;code&gt;Version Control System&lt;/code&gt; helps in handling this by maintaining a history of what changes have happened. Also, &lt;code&gt;Git&lt;/code&gt; provides features like branches and merges, which I will be covering later.&lt;/li&gt;
&lt;li&gt;Distributed Version Control System: &lt;code&gt;Git&lt;/code&gt; has a remote repository which is stored in a server and a local repository which is stored in the computer of each developer. This means that the code is not just stored in a central server, but the full copy of the code is present in all the developers‚Äô computers. Git is a &lt;code&gt;Distributed Version Control System&lt;/code&gt; since the code is present in every developer‚Äôs computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#installation-of-git"&gt;
  &lt;/a&gt;
  Installation of Git
&lt;/h2&gt;

&lt;p&gt;Installation of Git is straightforward using the installer package available at Git official web site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the installer from &lt;a href="https://git-scm.com/"&gt;Git WebSite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Follow the installer steps, agree the license agreement and click the next button.&lt;/li&gt;
&lt;li&gt;Restart your system/machine&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NB:Mac users can install it with brew: &lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, test Git by printing its version using the following command in Command Prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
# git version 2.31.0.windows.1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-git"&gt;
  &lt;/a&gt;
  Configure Git
&lt;/h2&gt;

&lt;p&gt;Now let &lt;code&gt;Git&lt;/code&gt; know who you are. This is important for version control systems, as each &lt;code&gt;Git&lt;/code&gt; commit uses this information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "James Brown"
git config --global user.email "jamesbrown@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Use &lt;code&gt;global&lt;/code&gt; to set the username and e-mail for every repository on your computer.If you want to set the username/e-mail for just the current repo, you can remove &lt;code&gt;global&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see current global configuration with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-git-folder"&gt;
  &lt;/a&gt;
  Creating Git Folder
&lt;/h2&gt;

&lt;p&gt;Now, let's create a new folder for our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir myproject
cd myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; makes a new directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; changes the current working directory.&lt;/p&gt;

&lt;p&gt;Now that we are in the correct directory. We can start by initializing Git!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you already have a folder/directory you would like to use for Git: Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#initialize-git"&gt;
  &lt;/a&gt;
  Initialize Git
&lt;/h2&gt;

&lt;p&gt;Once you have navigated to the correct folder, you can initialize Git on that folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init 
Initialized empty Git repository in /Users/user/myproject/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just created your first Git Repository!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Git now knows that it should watch the folder you initiated it on.Git creates a hidden folder to keep track of changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git-adding-new-files"&gt;
  &lt;/a&gt;
  Git Adding New Files
&lt;/h2&gt;

&lt;p&gt;You just created your first local Git repo. But it is empty.&lt;/p&gt;

&lt;p&gt;So let's add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.&lt;/p&gt;

&lt;p&gt;For this example, I am going to use a simple HTML file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Getting Started with Git!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first file in my new Git Repo.&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And save it to our new folder as &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's go back to the terminal and list the files in our current working directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; will list the files in the directory. We can see that &lt;code&gt;index.html&lt;/code&gt; is there.&lt;/p&gt;

&lt;p&gt;Then we check the Git &lt;code&gt;status&lt;/code&gt; and see if it is a part of our repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Untracked files:
  (use "git add ..." to include in what will be committed)
    index.html

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Git is &lt;code&gt;aware&lt;/code&gt; of the file, but has not &lt;code&gt;added&lt;/code&gt; it to our repository!&lt;/p&gt;

&lt;p&gt;Files in your Git repository folder can be in one of 2 states:&lt;/p&gt;

&lt;p&gt;Tracked - files that Git knows about and are added to the repository&lt;br&gt;
Untracked - files that are in your working directory, but not added to the repository&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-staging-environment"&gt;
  &lt;/a&gt;
  Git Staging Environment
&lt;/h2&gt;

&lt;p&gt;The ideas of the Staging Environment and the Commit are two of Git's most important features.&lt;/p&gt;

&lt;p&gt;You may be adding, modifying, and deleting files while working. However, you should add the files to a Staging Environment whenever you reach a milestone or complete a section of the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Staged&lt;/code&gt; files are files that are ready to be &lt;code&gt;committed&lt;/code&gt; to the repository you are working on. You will learn more about &lt;code&gt;commit&lt;/code&gt; shortly.&lt;/p&gt;

&lt;p&gt;For now, we are done working with index.html. So we can add it to the Staging Environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file should be &lt;code&gt;Staged&lt;/code&gt;. Let's check the status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached ..." to unstage)
    new file: index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the file has been added to the Staging Environment.We are ready to do our first &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-commit"&gt;
  &lt;/a&gt;
  Git Commit
&lt;/h2&gt;

&lt;p&gt;We are ready to go from &lt;code&gt;stage&lt;/code&gt; to &lt;code&gt;commit&lt;/code&gt; for our repo(folder) now that we have completed our work.&lt;/p&gt;

&lt;p&gt;As we work, adding commits allows us to keep track of our progress and modifications. Each commit is treated as a "save point" by Git. It's a moment in the project where you can go back and fix an issue or make a modification.&lt;/p&gt;

&lt;p&gt;We should always provide a message when we commit.&lt;/p&gt;

&lt;p&gt;By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "My First git commit"
[master (root-commit) c7da65d] My first git commit
 1 file changed, 12 insertions(+)
 create mode 100644 index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; command performs a commit, and the &lt;code&gt;-m "message"&lt;/code&gt; adds a message.&lt;/p&gt;

&lt;p&gt;The Staging Environment has been committed to our repo, with the message:&lt;br&gt;
"My first git commit"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-commit-log"&gt;
  &lt;/a&gt;
  Git Commit Log
&lt;/h2&gt;

&lt;p&gt;To view the history of commits for a repository, you can use the log command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
commit c7da65d981ce205dfadbeedec4e36a5e1625c558 (HEAD -&amp;gt; master)
Author: jamesbrown &amp;lt;jamesbrown@gmail.com&amp;gt;
Date:   Mon Jul 12 17:34:54 2021 -0700

    My first git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
