<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>15 reasons why you should learn JavaScript right now</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 04:01:17 +0000</pubDate>
      <link>https://dev.to/codemaniaz/15-reasons-why-you-should-learn-javascript-right-now-5647</link>
      <guid>https://dev.to/codemaniaz/15-reasons-why-you-should-learn-javascript-right-now-5647</guid>
      <description>&lt;p&gt;There are two reasons why it‚Äôs sometimes hard to make a choice; either there are too few options to choose from, or there are too many. When it comes to programming languages, there is an embarrassment of riches, which in turn can cause mental gridlock. There‚Äôs Python, Java, JavaScript, C/CPP, PHP, Swift, C#, Ruby, Objective-C, and SQL, and that‚Äôs not even the full list! How do you choose?&lt;/p&gt;
&lt;p&gt;Now, bear in mind that as far as programmers go, there‚Äôs no such thing as knowing too many languages. A programmer with a grasp of many languages is a programmer who is highly marketable and very much in demand. Upskilling is always a smart way to go.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-reasons-why-you-should-learn-javascript-right-now/&amp;amp;ved=2ahUKEwjq3LetlNPzAhWCjeYKHXtzBaUQFnoECAQQBQ&amp;amp;usg=AOvVaw2jcX34baRnSUligpWiA29Q&amp;amp;cshid=1634532657525"&gt;15 reasons why you should learn JavaScript right now&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>20 Best Cyber Security Books For Beginners</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 03:33:07 +0000</pubDate>
      <link>https://dev.to/codemaniaz/20-best-cyber-security-books-for-beginners-387d</link>
      <guid>https://dev.to/codemaniaz/20-best-cyber-security-books-for-beginners-387d</guid>
      <description>&lt;p&gt;&lt;span&gt;Today, the field of¬†&lt;/span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/what-is-hacking-types-of-hackers/"&gt;cybersecurity&lt;/a&gt;&lt;/b&gt;&lt;span&gt;¬†is flourishing at an incredible speed. This is opening doors to plenty of new job opportunities in the cybersecurity field. If you are interested in learning cybersecurity, a few books can help you in making your learning journey fruitful. This article on ethical hacking + cybersecurity books will take you through the best books for cybersecurity.¬† These books will introduce you to new ideas and help you solve your questions on cybersecurity.¬† ¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-cyber-security-books-for-beginners/&amp;amp;ved=2ahUKEwi_gqnKyNrzAhXCmuYKHUMbBn84ChAWegQIHxAB&amp;amp;usg=AOvVaw0MGm6Gjn2dS7J7ieXXbRGH"&gt;20 Best Cyber Security Books For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Halloween Event! What's on your workspace?</title>
      <author>Abby</author>
      <pubDate>Thu, 21 Oct 2021 03:32:51 +0000</pubDate>
      <link>https://dev.to/abby06/halloween-event-whats-on-your-workspace-4639</link>
      <guid>https://dev.to/abby06/halloween-event-whats-on-your-workspace-4639</guid>
      <description>&lt;p&gt;Halloween Event! What's on your workspace?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a picture of your workspace&lt;/li&gt;
&lt;li&gt;Share the picture below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most liked comment counted on this Feed and &lt;a href="https://club.rt-thread.io/ask/question/88.html"&gt;RT-Thread Club&lt;/a&gt; Feed will receive a special Halloween Gift.&lt;/p&gt;

&lt;p&gt;The winner will be announced on November 1st.&lt;/p&gt;

&lt;p&gt;Make sure that you're following the open source RT-Thread &lt;a href="https://www.facebook.com/RT-Thread-IoT-OS-110395723808463"&gt;Facebook&lt;/a&gt;, &lt;a href="https://twitter.com/rt_thread"&gt;Twitter&lt;/a&gt;, or &lt;a href="https://www.linkedin.com/company/73004322"&gt;Linkedin&lt;/a&gt; so you'll be updated with the winner announcement!&lt;/p&gt;

&lt;p&gt;Happy Dev's Halloween!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6yzvSfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buarpl5ea2rs8bkpcmix.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6yzvSfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buarpl5ea2rs8bkpcmix.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>halloween</category>
      <category>workspace</category>
      <category>opensource</category>
      <category>embedded</category>
    </item>
    <item>
      <title>How I improved my GitHub profile?</title>
      <author>Rahul Jain</author>
      <pubDate>Thu, 21 Oct 2021 03:00:08 +0000</pubDate>
      <link>https://dev.to/rahuldkjain/how-i-improved-my-github-profile-480c</link>
      <guid>https://dev.to/rahuldkjain/how-i-improved-my-github-profile-480c</guid>
      <description>&lt;p&gt;Hey there, I am glad you landed here to learn more about how to improve your GitHub profile and build trust. A good GitHub profile behaves as an effective marketing tool in selling yourself to potential clients or employers. I will try to explain all the ins and outs of having a good GitHub profile from my own experience.&lt;/p&gt;

&lt;p&gt;First, I will walk you through my college journey so that you guys can easily relate, then I will try to answer all the related questions and inspirations that can come to your mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-journey"&gt;
  &lt;/a&gt;
  My Journey
&lt;/h2&gt;

&lt;p&gt;I am a 2020 graduate who didn't get the chance to attend the farewell and the convocation. My college started back in 2016. I had no clue of what I'll be doing in the next 4 years. I went there like a kora kagaz (blank sheet). I chose Physical Education in +2, so had no idea about programming. C, C++, Java &amp;amp; Python were just fancy creatures to me. As a result, I secured C grade in the C Programming course of 1st Semester üòù. Now you can picturize me as a young dumb kid who has no clue why he chose Computer Science &amp;amp; Engineering.&lt;/p&gt;

&lt;p&gt;I saw some fancy hostel videos of IIT Bombay FilmMaking Club before joining the college and got excited to join the FilmMaking club. When I joined the club, the dean stopped giving funds. Our club has no camera and no future of course. Then I realized the importance of money. Coming from a low middle class background and an underdeveloped town of Rajasthan, I dropped the fancy idea of pursuing filmmaking. Let's get some money in the bank first üí∞.&lt;/p&gt;

&lt;p&gt;Just like everybody else, I started learning programming to get an internship. During the 2nd year summer break, I applied to a lot of companies from Internshala. Didn't get even a single response from the recruiters. I hated the idea of competitive programming and got really scared about cracking interviews without any CP. Desperate, I opened my account on &lt;a href="https://freelancer.com"&gt;Freelancer&lt;/a&gt; to get any project of any domain. Developed &amp;amp; hosted a basic portfolio on GitHub pages and after struggling for about one week, I closed a deal to design a website for a US based client (\$3 per page). You can read the whole experience &lt;a href="https://dev.to/rahuldkjain/how-i-got-my-first-freelance-project-49c8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here onwards, I didn't stop exploring. I applied for Eklavya IIT Bombay program by completing the animation assignments using &lt;a href="https://threejs.org/"&gt;three.js&lt;/a&gt; , but didn't make it because of the pointers(grades).&lt;/p&gt;

&lt;p&gt;I participated in all the hackathons organized by college's programming club and that's how they went:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hackathon&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Experience&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vassar Lab's Hackathon&lt;/td&gt;
&lt;td&gt;2nd Year&lt;/td&gt;
&lt;td&gt;Registered only for the free Maggi &amp;amp; coffee.&lt;/td&gt;
&lt;td&gt;Participant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM Watson Hackathon&lt;/td&gt;
&lt;td&gt;3rd Year&lt;/td&gt;
&lt;td&gt;Participated along with 3 batch-mates, contributed in documentation&lt;/td&gt;
&lt;td&gt;1st Place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Chatbot Hackathon&lt;/td&gt;
&lt;td&gt;3rd Year&lt;/td&gt;
&lt;td&gt;All India Level Hackathon organized by &lt;a href="https://www.swaniti.com/"&gt;Swaniti&lt;/a&gt; on HackerEarth. Built a &lt;a href="https://github.com/jainsomya972/jaano-india-chatbot"&gt;chatbot&lt;/a&gt; with &lt;a href="https://github.com/jainsomya972"&gt;Somya&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;AIR 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IBM AI/ML Hackathon&lt;/td&gt;
&lt;td&gt;4th Year&lt;/td&gt;
&lt;td&gt;Registered with the mindset of winning&lt;/td&gt;
&lt;td&gt;Runner Up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I was able to secure an on-campus internship offer from &lt;a href="https://www.quinbay.com/"&gt;Coviam&lt;/a&gt; (now Quinbay). This happened because of the confidence in myself that I can grab the offer without doing any competitive programming. That confidence came from doing projects, and exploring different things.&lt;/p&gt;

&lt;p&gt;I cracked the on-campus placements while working in Coviam (7th semester) and got the full time offer from &lt;a href="https://zolostays.com/"&gt;Zolo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then lockdown happened. All the big plans of hanging out with friends in the last semester didn't happen.&lt;/p&gt;

&lt;p&gt;I graduated in May 2020 and my joining was from September 2020. The period from May to September was where the magic happened.&lt;/p&gt;

&lt;p&gt;I started learning React.js and became a regular user of twitter. I followed all the famous personalities on tech twitter whom I admire and started reading their tweets on a day to day basis.&lt;/p&gt;

&lt;p&gt;On one fine day in the second-last week of May 2020, GitHub launched a new feature of creating your profiles in markdown like &lt;a href="https://github.com/rahuldkjain"&gt;this&lt;/a&gt;. I saw several developers made some really cool addons like adding github-stats, visitors count etc. &lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub Readme Stats&lt;/a&gt; developed by &lt;a href="https://github.com/anuraghazra"&gt;Anurag Hazra&lt;/a&gt; went viral in just couple of days. Then the idea of creating &lt;a href="https://github.com/rahuldkjain/github-profile-readme-generator"&gt;GitHub Profile README Generator&lt;/a&gt; came to my mind.&lt;/p&gt;

&lt;p&gt;I started working on the MVP(Minimum Viable Product) without even thinking about how good or bad the idea is.&lt;/p&gt;

&lt;p&gt;I coded the project in just 2 days and hosted it on GitHub pages. I started writing articles on how to use the amazing tool to create beautiful GitHub profile READMEs in few minutes with cool addons. In just couple of weeks, people started noticing and liking the project. I didn't stop. I cross-linked the repository on various popular articles in the comments. You can learn more about how to promote your open-source project &lt;a href="https://rahuldkjain.github.io/blog/how-github-profile-readme-generator-reached-200+-stars-on-github/"&gt;here&lt;/a&gt;. My post on Linkedin about this project gained a lot of tractions and in just couple of weeks, the project had 1000+ stars.&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6xYxtAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rahuldkjain.github.io/blog/static/aba0d373cb69251b03a10ae095bf9891/c83ae/linkedin-marketing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6xYxtAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rahuldkjain.github.io/blog/static/aba0d373cb69251b03a10ae095bf9891/c83ae/linkedin-marketing.png" alt="rahuldkjain linkedin"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;I didn't stop.&lt;/p&gt;

&lt;p&gt;I subscribed to free 6 months &lt;a href="https://frontendmasters.com/"&gt;FrontendMasters&lt;/a&gt; courses using GitHub pro. Learned "SVG Animations" from &lt;a href="https://twitter.com/sarah_edo"&gt;Sarah Drasner's&lt;/a&gt; course and wrote a few articles about GSAP Animations on my blog and dev[.]to .&lt;/p&gt;

&lt;p&gt;I created an account on Fiverr to sell &lt;code&gt;SVG Animations&lt;/code&gt;. I researched about this particular keyword on Fiverr and found out a huge potential in the gigs. So I created few gigs and started getting orders.&lt;br&gt;
From charging $10 per animation to $75 per animation, I became a level 2 seller in just couple of months. You can checkout some of my animations &lt;a href="https://rahuldkjain-animations.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a very good day, a client from Sweden reached out to me on Fiverr to create a website for his product (&lt;a href="https://dosemedbox.com/"&gt;DoseMedbox&lt;/a&gt;) to sell online. I closed the deal, worked for 1.5 months and launched it.&lt;/p&gt;

&lt;p&gt;I didn't stop.&lt;/p&gt;

&lt;p&gt;I realized that I need to &lt;code&gt;surround myself with people who are way better than me&lt;/code&gt; to grow rapidly. So here I am working as a Frontend Engineer at CRED who is known for their design, app-dev and marketing.&lt;/p&gt;

&lt;p&gt;Phew! That was a long story isn't it. Thanks for bearing me. Now I assume that you already have the answers to the perks of having a good GitHub profile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perks-of-a-good-github-profile"&gt;
  &lt;/a&gt;
  Perks of a good GitHub profile
&lt;/h2&gt;

&lt;p&gt;To simplify things, I am listing down the things again for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trust&lt;/li&gt;
&lt;li&gt;Freelance Projects&lt;/li&gt;
&lt;li&gt;Higher chances of landing a job interview&lt;/li&gt;
&lt;li&gt;Passive Income through GitHub sponsors, BuyMeACoffee, &amp;amp; Paypal etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-github-profile"&gt;
  &lt;/a&gt;
  How to improve GitHub profile?
&lt;/h2&gt;

&lt;p&gt;I hope you are convinced now to improve your GitHub profile that opens up a huge world of opportunities. So I am listing down the things that helped me improving my GitHub profile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good profile picture&lt;/strong&gt;: It gives a sense of authenticity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good bio&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Twitter handle&lt;/li&gt;
&lt;li&gt;Portfolio link&lt;/li&gt;
&lt;li&gt;Email (Optional)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good profile README&lt;/strong&gt;: You can use &lt;a href="https://github.com/rahuldkjain/github-profile-readme-generator"&gt;GitHub Profile README Generator&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good projects&lt;/strong&gt;: The most important part of the profile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Good contributions&lt;/strong&gt;: merge commits on popular projects work as wonder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create beautiful READMEs of your projects&lt;/li&gt;
&lt;li&gt;Lookout for issues on the open-source projects that you like&lt;/li&gt;
&lt;li&gt;Write and publish articles on your favourite topics&lt;/li&gt;
&lt;li&gt;Participate in hackathons and start building projects&lt;/li&gt;
&lt;li&gt;Participate in Hackoberfest ofcourse&lt;/li&gt;
&lt;li&gt;Join a community&lt;/li&gt;
&lt;li&gt;Follow good developers on GitHub&lt;/li&gt;
&lt;li&gt;Enhance your online presence&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h2&gt;

&lt;p&gt;I am sharing a list of resource that helped me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://javascript.info/"&gt;Javascript.info&lt;/a&gt;: best JS tutorials on the internet(opinion)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rahuldkjain/rahuldkjain.github.io"&gt;My Portfolio Source code&lt;/a&gt;: portfolio helped me landing a job at CRED&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rahuldkjain/awesome-frontendmasters"&gt;Awesome FrontendMasters List&lt;/a&gt;: best resources from great educators&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learngitbranching.js.org/"&gt;Learn Git&lt;/a&gt;: gamified git tutorials&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rahuldkjain.github.io/blog/promote-open-source-project/"&gt;How to market your open-source project?&lt;/a&gt;: to know more about how I marketed GitHub profile readme generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/poteto/hiring-without-whiteboards"&gt;hiring-without-whiteboards&lt;/a&gt;: very helpful while looking out for jobs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=pN6jk0uUrD8&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;amp;ab_channel=AkshaySaini"&gt;Namaste Javascript Playlist&lt;/a&gt;: to understand the fundamentals of JS and crack interviews&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;You are just a project away from your big break&lt;/code&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>webdev</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Best Coding app for beginners Developers</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 02:29:27 +0000</pubDate>
      <link>https://dev.to/codemaniaz/best-coding-app-for-beginners-developers-3l7b</link>
      <guid>https://dev.to/codemaniaz/best-coding-app-for-beginners-developers-3l7b</guid>
      <description>&lt;p&gt;Programming skills open doors to dozens of lucrative tech careers. And there‚Äôs never been a better or easier time to learn. Just like learning any other language, coding requires regular practice to master. But it‚Äôs not always easy for people to find time to practice in front of a computer. That‚Äôs why coding apps are so helpful. In this article, we‚Äôll cover the best coding apps on iOS and Android for those who want to learn to code.¬†&lt;/p&gt;
&lt;br&gt;Read More : &lt;b&gt;&lt;a href="https://www.codelivly.com/best-coding-apps-for-beginners/"&gt;Best Coding App For Beginners&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>25 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 01:59:43 +0000</pubDate>
      <link>https://dev.to/codemaniaz/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4lne</link>
      <guid>https://dev.to/codemaniaz/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-4lne</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference.¬†&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;25 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project</title>
      <author>Codemania</author>
      <pubDate>Thu, 21 Oct 2021 01:57:22 +0000</pubDate>
      <link>https://dev.to/codemaniaz/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3aeh</link>
      <guid>https://dev.to/codemaniaz/18-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-3aeh</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;18 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top VS Code Extensions For Web Developers</title>
      <author>Cess</author>
      <pubDate>Thu, 21 Oct 2021 00:45:07 +0000</pubDate>
      <link>https://dev.to/cesscode/top-vs-code-extensions-for-web-developers-1db5</link>
      <guid>https://dev.to/cesscode/top-vs-code-extensions-for-web-developers-1db5</guid>
      <description>&lt;p&gt;Hello everyone! üíô&lt;/p&gt;

&lt;p&gt;In this article, I will write about the Vs Code extensions that I find super useful as a web developer and you guys will find them interesting and useful as well.&lt;/p&gt;

&lt;p&gt;let's get started üíÉ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-vs-code-extension-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;what is vs code extension ?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;VS Code extensions let you add languages, debuggers, and tools to your installation to support your development workflow. VS Code's rich extensibility model lets extension authors plug directly into the VS Code UI and contribute functionality through the same APIs used by VS Code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-download-vs-code-extensions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to download Vs code extensions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can browse and install extensions from within VS Code. Bring up the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of VS Code or the View: Extensions command (Ctrl+Shift+X).&lt;/p&gt;

&lt;p&gt;Click on the extension icon on vs code: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldnClv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798551634/Mo9aXV_Vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldnClv2V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798551634/Mo9aXV_Vr.png" alt="extensions-view-icon.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show you a list of the most popular VS Code extensions, click the install button to download any vs code extension of your choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-list-of-some-of-the-vs-code-extensions-that-would-make-your-life-a-lot-easier-as-a-web-developer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Here‚Äôs a list of some of the Vs code extensions that would make your life a lot easier as a web developer:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;strong&gt;Live Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jPDap49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798935583/z_4ZJ7J1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jPDap49G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630798935583/z_4ZJ7J1h.png" alt="live server.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live server extension provides the live preview of your web application right within the editor. &lt;/p&gt;

&lt;p&gt;This is a  handy and useful extension for web developers as it enforces auto-reload and makes our work easier by displaying our code results immediately on Our web browser without refreshing the page and It prevents us from going through the stress of always saving our work in the editor and then refresh our browser every time before seeing changes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRntKIEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884099413/jqHLMBkap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRntKIEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884099413/jqHLMBkap.gif" alt="lives.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;strong&gt;JavaScript (ES6) Code Snippets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension contains code snippets for JavaScript in ES6 syntax for Vs Code editor. To speed up your javascript coding, use Javascript ES6 code snippets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lhuKXIek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630799797008/MYJHsSE_t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lhuKXIek--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630799797008/MYJHsSE_t.png" alt="javascript es6 code snippets.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;br&gt;
&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension performs the formatting of the javascript, CSS, and HTML and makes it readable. it automatically tidies up the code every time the changes are saved. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hoeBt0r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800339194/rLf0JlrY6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hoeBt0r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800339194/rLf0JlrY6.png" alt="prettier.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;br&gt;
&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colors. This extension helps you identify which closing bracket belongs to which functions when you have more than one or two closing brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8bBR-F4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800459137/FcuTgF85M.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bBR-F4Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630800459137/FcuTgF85M.png" alt="bracket pair colorizer.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;br&gt;
&lt;strong&gt;Path Intellisense&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension makes the development time faster by autocompleting file names. You type the name of the files in statements and it will search and give you suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcLtJlYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801018697/aei10C6qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcLtJlYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801018697/aei10C6qf.png" alt="path intelisense.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;br&gt;
&lt;strong&gt;Code time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75S2lomA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801203063/ISiNHbnSo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75S2lomA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801203063/ISiNHbnSo.png" alt="Code time.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Time is an open-source plugin for automatic programming metrics and time tracking in Visual Studio Code. it tracks your development time and provides you with useful stats such as how many hours you have code for that day, It‚Äôs useful to keep track and see the progress you are making.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTs0dPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801228452/gpAks2ed5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTs0dPj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630801228452/gpAks2ed5.png" alt="code time2.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;br&gt;
&lt;strong&gt;Polacode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtwLBLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630881865527/oLwoW8VgO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtwLBLyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630881865527/oLwoW8VgO.png" alt="polacode.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension helps you take beautiful screenshots of your code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To take a screenshot of your code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;open the command palette (ctrl + shift + p on windows) or (cmd + shift + p on mac)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;search for polacode and select polacode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;highlight the part you want to screenshot, copy and paste the code on the displayed polacode screen and press the polacode icon to save it on your device.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sesXek8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884183236/B7nAXgDZ8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sesXek8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884183236/B7nAXgDZ8.gif" alt="pola.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;br&gt;
&lt;strong&gt;Auto Rename Tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjmfU9UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884405835/W6pk0pQmI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjmfU9UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884405835/W6pk0pQmI.png" alt="autorename tag.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension makes it possible for us to rename both opening and closing tags at once. when you change the starting tag it will automatically change the closing tag as well, making the renaming of tags easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJEdBuir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884870994/riz3q7ypg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJEdBuir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884870994/riz3q7ypg.gif" alt="rename.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;br&gt;
&lt;strong&gt;Px to rem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9rxyf6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884997991/MHvmxydYF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9rxyf6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884997991/MHvmxydYF.png" alt="px to rem.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension helps us to convert px to rem, and rem to px. You don't need to do mathematical conversions all you need to do is highlight the 20px in  Font-size: 20px; for example and press alt + z keys to make the conversion from px to rem. press and hold the alt + z keys to also make the conversion from rem to px. ‚ò∫Ô∏è &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAiCWSuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884955349/h4h-aDtb8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAiCWSuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630884955349/h4h-aDtb8.gif" alt="px to .gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;br&gt;
&lt;strong&gt;VS Code Icons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saVi3xm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887197993/pX_HLhe-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saVi3xm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887197993/pX_HLhe-l.png" alt="vs code icons.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension adds a set of icons to each of the files and folders in the Explorer view, thereby making the editor look more colorful and also help to easily view all the different files quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEGEzjE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887537822/25X6sTx0o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEGEzjE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630887537822/25X6sTx0o.gif" alt="20210906_010837.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The above-mentioned Vs code extensions will make your life easier as a web developer. If you have any questions or there are any other extensions that help you a lot more than this, Post about it in the comment section below and I'll be happy to answer every single one.&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it ‚ù§Ô∏è.&lt;/p&gt;

&lt;p&gt;That's all for today! üòÅ You reached the end of the article üòç&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Async code in useEffect is dangerous, how do we deal with it?</title>
      <author>Jae Anne Bach Hardie</author>
      <pubDate>Wed, 20 Oct 2021 23:07:53 +0000</pubDate>
      <link>https://dev.to/dulcedejae/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</link>
      <guid>https://dev.to/dulcedejae/async-code-in-useeffect-is-dangerous-how-do-we-deal-with-it-3p9m</guid>
      <description>&lt;p&gt;The introduction of async/await to Javascript has made it easy to express complex workflows that string together multiple asynchronous tasks. Let's take a look at the following code, which is a generalized example of code I've seen in real projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's easy to look at that and think it's all rosy. When we are passed a user we create a client for them and then whenever a client is disposed of through the user changing or the component unmounting, we disconnect the client.&lt;/p&gt;

&lt;p&gt;However, we have not considered that the asynchronous workflow in the first &lt;code&gt;useEffect&lt;/code&gt; is running concurrently to the rest of the application, which is independently responding to other effects and user actions. Any one of those other effects could unmount our component at any point!  If the component is unmounted before &lt;code&gt;setClient&lt;/code&gt; is called the client will still be created ‚Äî Promises do not get cancelled just because their caller no longer exists ‚Äî but without a component to manage the state setting or cleanup it will never disconnect. This is usually quite bad.&lt;/p&gt;

&lt;p&gt;So what do we do about it? Well, it's complicated. At first glance it looks like we can do the following and things will be OK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if the client has been created it will disconnect, without it needing to be saved to component state. Right?&lt;/p&gt;

&lt;p&gt;Wrong, unfortunately. If the cleanup function runs before &lt;code&gt;createClient&lt;/code&gt; resolves there will be no client to clean up. However, the promise is still resolving and the client will be created, once again putting it outside our reach!&lt;/p&gt;

&lt;p&gt;If we really want to be able to safely use async workflows inside &lt;code&gt;useEffect&lt;/code&gt; we need to make our workflow cancellable at any point. We also need to reason through what needs to be cleaned up depending on what stage the workflow was in when the interruption arrived. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to creating resources&lt;/span&gt;
      &lt;span class="c1"&gt;// it's ok, just don't create them&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled before we get to the client, we need&lt;/span&gt;
      &lt;span class="c1"&gt;// to make sure our connection isn't left hanging&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// if cancelled after the client has been created, we&lt;/span&gt;
      &lt;span class="c1"&gt;// need to clean it up&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're struggling to understand where to put cancellation handlers, imagine you were writing this with promises instead of async/await. We have to handle cancellation at the beginning of every &lt;code&gt;.then&lt;/code&gt; callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;fetchClientToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;createWebsocketConnection&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientAuthToken&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancelled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="nx"&gt;setClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cancelled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above is why I sometimes shy away from async/await in UI code entirely. The async/await syntax blurs the line between synchronous (not interruptible) and asynchronous (interruptible) code. That's the point! It is very helpful in contexts where synchronous and asynchronous code should be treated similarly ‚Äî like in a backend server executing a linear workflow ‚Äî but dangerously misleading in contexts where interruptions are common and handling them explicitly becomes necessary.&lt;/p&gt;

&lt;p&gt;There are, of course, more sophisticated ways of dealing with the problem of resource management that make the implicit state machine above more explicit and controllable. I will leave an implementation in &lt;a href="https://xstate.js.org/"&gt;xstate&lt;/a&gt; as an exercise for the reader but it's one example of a useful tool to reason through and model these multi-step interruptible processes. However, it's good to have a barebones, just-React solution in your back pocket in case you find yourself unexpectedly facing a dangerous Promise in a foreign project.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>VS Code + Live Share: Putting the "We" back into "Web" IDE </title>
      <author>Jonathan Carter</author>
      <pubDate>Wed, 20 Oct 2021 23:02:31 +0000</pubDate>
      <link>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</link>
      <guid>https://dev.to/lostintangent/putting-the-we-back-in-web-1hc2</guid>
      <description>&lt;p&gt;When we first released &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt; three years ago, our goal was to enable developer collaboration to become more &lt;a href="https://twitter.com/LostInTangent/status/1450868941056720899"&gt;enjoyable&lt;/a&gt;, &lt;a href="https://aka.ms/vsls-modality"&gt;flexible&lt;/a&gt;, and &lt;a href="https://aka.ms/vsls-platform"&gt;extensible&lt;/a&gt;, across a diverse set of &lt;a href="https://aka.ms/vsls-usecases"&gt;use cases&lt;/a&gt;. Screen sharing had served us well, but as teams and classrooms were becoming more geo-distributed, it was clearly time for a fresh take on remote pair programming.&lt;/p&gt;

&lt;p&gt;Since then, Live Share has become a key part of many developer's workflow, and it's been amazing to build it alongside the community. However, in order for us to support collaboration to happen from anywhere, and on any device, we've been missing a fundamental part of the story: a web client.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6HqUz3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCJ3c67VkAAJfiV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p_8E6Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410632439370641409/Pt-7RucE_normal.jpg" alt="Visual Studio Code profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Visual Studio Code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Wanna see something cool? üòé Go to "&lt;a href="https://t.co/k0d9MtptVW"&gt;vscode.dev&lt;/a&gt;" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required üßë‚Äçüíªü™Ñ&lt;br&gt;Read the announcement üëâ &lt;a href="https://t.co/XpTxjfVENL"&gt;aka.ms/vscode-dev-blog&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:56 PM - 20 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450853494949244929" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With the introduction of &lt;a href="https://vscode.dev"&gt;Visual Studio Code for the Web&lt;/a&gt; (and &lt;a href="https://aka.ms/githubdev-fun"&gt;github.dev&lt;/a&gt;), developers now have a world-class editor, that's simply a URL away. And with this powerful foundation in place, we were able to port Live Share to run entirely in your browser, so that collaboration can be as opportunistic and lightweight as possible. Got an iPad? Sweet! Working on a new machine and don't want to install any tools? Awesome! VS Code and Live Share have got your back, no matter where/when you want to collaborate üî•&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyVCpDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCKC4arVIAcJ_mX.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Pcg9d-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/771496206/Twitter_normal.png" alt="Jonathan Carter profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jonathan Carter
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/lostintangent"&gt;@lostintangent&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üì£ To celebrate the release of &lt;a href="https://t.co/leLmoM8lLT"&gt;vscode.dev&lt;/a&gt;, we also shipped Live Share support for the web. Simply install the extension, start a session, and then co-edit, review and chat about code, entirely from the browser üî• Developer collaboration may never be the same! ü•∞ &lt;a href="https://t.co/vATZCblUgw"&gt;twitter.com/code/status/14‚Ä¶&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:58 PM - 20 Oct 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Visual Studio Code
          &lt;/span&gt;
          @code
        &lt;/div&gt;
        Wanna see something cool? üòé Go to "https://t.co/k0d9MtptVW" and start coding with Visual Studio Code entirely in your browser. Anywhere, anytime, on any device and tablet, with no install required üßë‚Äçüíªü™Ñ
Read the announcement üëâ https://t.co/XpTxjfVENL https://t.co/eOxK5gSoiE
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1450868941056720899" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Even cooler, the Live Share web client is fully interoperable with both Visual Studio and Visual Studio Code, which allows you to collaborate with other developers, and ensure that everyone can work in their most comfortable and convenient environment. At the moment, the Live Share web experience supports the majority of features that the desktop client does (e.g. co-editing, shared cursors, text chat, inline commenting), and we'll be iterating on it in the coming weeks to fill in some of the remaining gaps (e.g. notebooks).&lt;/p&gt;

&lt;p&gt;That said, we think that Live Share's new web support is complete enough for folks to start giving it a spin, and letting us know where and how we can improve. We're extremely excited to remove these setup and device barriers, and looking forward to hearing if/how it's making developer collaboration more enjoyable üíñ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Algo Logging: The nth Fibonacci Number in JavaScript</title>
      <author>Raquel Rom√°n-Rodriguez</author>
      <pubDate>Wed, 20 Oct 2021 22:47:41 +0000</pubDate>
      <link>https://dev.to/raquii/algo-logging-the-nth-fibonacci-number-9pl</link>
      <guid>https://dev.to/raquii/algo-logging-the-nth-fibonacci-number-9pl</guid>
      <description>&lt;p&gt;I vividly remember the first time I encountered the &lt;strong&gt;nth Fibonacci&lt;/strong&gt; algorithm. I had messaged a friend about starting to practice algorithms to which she responded:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yeah! I just did one on the Fibonacci Sequence today! So fun!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was immediately filled with flashbacks of my Masters program, sitting in a 500-level Music Theory course, checking for the Fibonacci sequence and the Golden Ratio in Sonatas by Mozart and Schubert.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93iZVKrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb7s3fw2jf4em30a7kbq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93iZVKrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cb7s3fw2jf4em30a7kbq.gif" alt="David Rose from Schitt's Creek saying &amp;quot;That's a real quick no&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luckily for all of us, this algorithm problem's solution isn't as complicated as music theory at 8am. This time, it's the computer's job to figure out the sequence, we're just going to tell it how.&lt;/p&gt;

&lt;p&gt;If you'd like to try the problem yourself first, you can find it here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/kata/553e6558e848c5a3180000bc"&gt;CodeWars&lt;/a&gt;&lt;br&gt;
&lt;a href="https://leetcode.com/problems/fibonacci-number/"&gt;LeetCode&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Fibonacci Number&lt;/strong&gt; algorithm problem is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Fibonacci sequence is derived of numbers where each number is the sum of the preceding numbers in the sequence. The sequence begins with 0 and 1.&lt;br&gt;
Write a function that takes a integer, &lt;code&gt;n&lt;/code&gt;, which represents an index in the sequence and return the Fibonacci Number held at that position.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Fibonacci Sequence:&lt;/em&gt; &lt;code&gt;0, 1, 1, 2, 3, 5, 8, 13...&lt;/code&gt;&lt;br&gt;
&lt;code&gt;n&lt;/code&gt; &lt;em&gt;=&lt;/em&gt; &lt;code&gt;4&lt;/code&gt;&lt;br&gt;
&lt;em&gt;output =&lt;/em&gt; &lt;code&gt;3&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#the-approach"&gt;
  &lt;/a&gt;
  The Approach
&lt;/h2&gt;

&lt;p&gt;We need a way to construct the Fibonacci sequence programmatically but we only need to construct it up to the &lt;code&gt;n&lt;/code&gt;th position, and then return the number we find there.&lt;/p&gt;

&lt;p&gt;It might be tempting to try this problem using recursion, where you call your function from within itself until you've reached the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//a recursive solution&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nthFib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nthFib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nthFib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this approach solves for the same number in the sequence multiple times, which problematic from an optimization standpoint, and that's the whole reason that you're here, is it not? &lt;/p&gt;

&lt;p&gt;You could clean this up a bit by using &lt;em&gt;memoization&lt;/em&gt; (storing the results from a function call to prevent recalculating the same results again), but it's still going to run up space complexity (the amount of memory an algorithm takes up) with the memoization, which is wasteful, since we don't care about retaining the entire sequence in our output.&lt;/p&gt;

&lt;p&gt;Instead, let's think about how &lt;em&gt;you&lt;/em&gt; might solve this problem with your regular, human brain, not the computer. I'm thinking it would go like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start with &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Sum the next number in the sequence by adding your previous two numbers: &lt;code&gt;0 + 1 = 1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Sum the second-to-last of your previous numbers with your new number: &lt;code&gt;1 + 1 = 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Repeat steps &lt;strong&gt;2-3&lt;/strong&gt; until you get to the &lt;code&gt;n&lt;/code&gt;th position of the sequence.&lt;/li&gt;
&lt;li&gt;Tell me the answer you got.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's try that instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables-used"&gt;
  &lt;/a&gt;
  Variables Used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;prevTwo&lt;/code&gt; - an array that holds the previous two numbers of the sequence&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;i&lt;/code&gt; - a counter variable in our &lt;code&gt;for&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sum&lt;/code&gt; - the sum of &lt;code&gt;prevTwo[0]&lt;/code&gt; and &lt;code&gt;prevTwo[1]&lt;/code&gt; in the loop&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#linebyline-walkthrough"&gt;
  &lt;/a&gt;
  Line-by-Line Walkthrough:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nthFib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initialize the variable &lt;code&gt;prevTwo&lt;/code&gt; with a value of &lt;code&gt;[0,1]&lt;/code&gt;, representing the start of the sequence 
  show
  &lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;for&lt;/code&gt; loop which will iterate until we've reached the &lt;code&gt;n&lt;/code&gt;th number in the sequence, initialize variable &lt;code&gt;i&lt;/code&gt; with value of &lt;code&gt;0&lt;/code&gt;. 
  show
  &lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inside of the loop, initialize a variable &lt;code&gt;sum&lt;/code&gt; that is equal to &lt;code&gt;prevTwo[0]&lt;/code&gt; + &lt;code&gt;prevTwo[1]&lt;/code&gt;. 
  show
  &lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Still inside the loop, set the values held in &lt;code&gt;prevTwo&lt;/code&gt; to be our &lt;em&gt;new&lt;/em&gt; previous two numbers in the sequence, the number held at &lt;code&gt;prevTwo[1]&lt;/code&gt; and our new &lt;code&gt;sum&lt;/code&gt;. 
  show
  &lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the loop is finished, return &lt;code&gt;prevTwo[1]&lt;/code&gt;. This is our &lt;code&gt;n&lt;/code&gt;th Fibonacci Number 
  show
  &lt;br&gt;

&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#show-me-the-logs"&gt;
  &lt;/a&gt;
  Show Me The Logs
&lt;/h2&gt;

&lt;p&gt;Here are my console.logs for this problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the best experience, view them on &lt;a href="https://replit.com/@raquii/nth-fibonacci?v=1"&gt;replit&lt;/a&gt;, where you can fork it and feed your own string into the function!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;üöÄ&lt;/span&gt; &lt;span class="err"&gt;üöÄ&lt;/span&gt; &lt;span class="err"&gt;üöÄ&lt;/span&gt; &lt;span class="nx"&gt;Nth&lt;/span&gt; &lt;span class="nx"&gt;FIBONACCI&lt;/span&gt; &lt;span class="nx"&gt;NUMBER&lt;/span&gt; &lt;span class="nx"&gt;STARTING&lt;/span&gt; &lt;span class="nx"&gt;NOW&lt;/span&gt; &lt;span class="err"&gt;üöÄ&lt;/span&gt; &lt;span class="err"&gt;üöÄ&lt;/span&gt; &lt;span class="err"&gt;üöÄ&lt;/span&gt;

                &lt;span class="err"&gt;üì•&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="o"&gt;=================&lt;/span&gt; &lt;span class="nx"&gt;FOR&lt;/span&gt; &lt;span class="nx"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;OF&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=================&lt;/span&gt;

    &lt;span class="nx"&gt;Fibonacci&lt;/span&gt; &lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="err"&gt;üßÆ&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;calculating&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;üßÆ&lt;/span&gt;

            &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=================&lt;/span&gt; &lt;span class="nx"&gt;FOR&lt;/span&gt; &lt;span class="nx"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;OF&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=================&lt;/span&gt;

    &lt;span class="nx"&gt;Fibonacci&lt;/span&gt; &lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="err"&gt;üßÆ&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;calculating&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;üßÆ&lt;/span&gt;

            &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=================&lt;/span&gt; &lt;span class="nx"&gt;FOR&lt;/span&gt; &lt;span class="nx"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;OF&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=================&lt;/span&gt;

    &lt;span class="nx"&gt;Fibonacci&lt;/span&gt; &lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="err"&gt;üßÆ&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;calculating&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;üßÆ&lt;/span&gt;

            &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;=================&lt;/span&gt; &lt;span class="nx"&gt;FOR&lt;/span&gt; &lt;span class="nx"&gt;LOOP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nx"&gt;OF&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=================&lt;/span&gt;

    &lt;span class="nx"&gt;Fibonacci&lt;/span&gt; &lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;so&lt;/span&gt; &lt;span class="nx"&gt;far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
        &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

        &lt;span class="err"&gt;üßÆ&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;calculating&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="err"&gt;üßÆ&lt;/span&gt;

            &lt;span class="err"&gt;üî∏&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="err"&gt;‚Üí&lt;/span&gt; &lt;span class="nx"&gt;Moving&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;===============&lt;/span&gt; &lt;span class="err"&gt;üèÅ&lt;/span&gt; &lt;span class="nx"&gt;Finished&lt;/span&gt; &lt;span class="nx"&gt;Looping&lt;/span&gt; &lt;span class="err"&gt;üèÅ&lt;/span&gt; &lt;span class="o"&gt;===============&lt;/span&gt;

        &lt;span class="err"&gt;üåü&lt;/span&gt; &lt;span class="err"&gt;üåü&lt;/span&gt; &lt;span class="err"&gt;üåü&lt;/span&gt; &lt;span class="nx"&gt;Final&lt;/span&gt; &lt;span class="nx"&gt;Solution&lt;/span&gt; &lt;span class="err"&gt;üåü&lt;/span&gt; &lt;span class="err"&gt;üåü&lt;/span&gt; &lt;span class="err"&gt;üåü&lt;/span&gt;

 &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;th&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Fibinacci&lt;/span&gt; &lt;span class="nx"&gt;Sequence&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Finally, if you'd like to see a clean, log-free version of the solution, here it is:&lt;/p&gt;

&lt;p&gt;
  View Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nthFib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;prevTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prevTwo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Thanks for reading and I wish you luck on whatever algorithmic endeavor brought you to this post. ‚ô•&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Introducing xrpl.js</title>
      <author>Mayukha Vadari</author>
      <pubDate>Wed, 20 Oct 2021 22:02:18 +0000</pubDate>
      <link>https://dev.to/ripplexdev/introducing-xrpljs-37p7</link>
      <guid>https://dev.to/ripplexdev/introducing-xrpljs-37p7</guid>
      <description>&lt;p&gt;&lt;a href="https://ripple.com/ripplex/"&gt;RippleX&lt;/a&gt; and the &lt;a href="https://xrplf.org/"&gt;XRP Ledger Foundation (XRPLF)&lt;/a&gt; are excited to announce xrpl.js &lt;strong&gt;version 2.0.0&lt;/strong&gt;, a JavaScript/TypeScript library for interacting with the XRP Ledger (XRPL). Formerly known as ripple-lib, the library was renamed to better represent its role in the XRPL ecosystem and overhauled to take advantage of modern JavaScript features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;JavaScript is one of the most widely-used programming languages, and as such has a massive community of active developers. Maintaining a JavaScript SDK enables these developers to seamlessly interact with the XRP Ledger, both in the browser and in Node.js. In addition, the JavaScript libraries (xrpl.js, ripple-binary-codec, ripple-keypairs, and ripple-address-codec) power many &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/APPLICATIONS.md"&gt;apps&lt;/a&gt; in the XRPL ecosystem, as well as &lt;a href="https://www.npmjs.com/browse/depended/ripple-lib"&gt;packages&lt;/a&gt; from companies such as BitGo and Ledger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changes"&gt;
  &lt;/a&gt;
  Changes
&lt;/h2&gt;

&lt;p&gt;With this release of xrpl.js, the JavaScript, &lt;a href="https://github.com/XRPLF/xrpl4j"&gt;Java&lt;/a&gt;, and &lt;a href="https://github.com/XRPLF/xrpl-py/"&gt;Python&lt;/a&gt; libraries provided by the XRPLF now have parallel structures and systems. This enables developers to easily work with their preferred programming language depending on their specific needs, without having to learn an entirely new interface.&lt;/p&gt;

&lt;p&gt;xrpl.js will continue to support all ripple-lib features, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serializing, signing, and submitting transactions to the XRPL&lt;/li&gt;
&lt;li&gt;Retrieving information from the XRPL&lt;/li&gt;
&lt;li&gt;Helpful utility functions (such as converting between &lt;a href="https://xrpl.org/xrp.html#xrp-properties"&gt;drops&lt;/a&gt; and XRP)&lt;/li&gt;
&lt;li&gt;Support for Node.js, web browsers, and React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also introduces a number of new features, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript types for all transaction types and WebSocket requests&lt;/li&gt;
&lt;li&gt;A Wallet class to make it easier to work with key pairs&lt;/li&gt;
&lt;li&gt;Protections against the &lt;a href="https://xrpl.org/partial-payments.html#partial-payments-exploit"&gt;partial payment attack vector&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An additional submit implementation that returns the transaction's final outcome after validation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In version 2.0, the library is now much more aligned with the core XRP Ledger interface. This means XRPL developers‚Äîwhether new or experienced‚Äîcan refer to multiple sources of documentation instead of needing to rely solely on the library-specific documentation. There are also a number of general architecture improvements, such as simplifying code, making user interfaces more intuitive (especially in relation to the core ledger), and revamping the testing structure. For a detailed list of changes, visit the &lt;a href="https://github.com/XRPLF/xrpl.js/blob/develop/HISTORY.md"&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-building"&gt;
  &lt;/a&gt;
  Start Building
&lt;/h2&gt;

&lt;p&gt;To get started using xrpl.js, see &lt;a href="https://xrpl.org/get-started-using-javascript.html"&gt;this tutorial on xrpl.org&lt;/a&gt;, or check out the &lt;a href="https://github.com/XRPLF/xrpl.js"&gt;project repo&lt;/a&gt; or &lt;a href="https://js.xrpl.org/"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you already have a project that uses ripple-lib, migrate today! We have a &lt;a href="https://xrpl.org/xrpljs2-migration-guide.html"&gt;migration guide for moving your code from ripple-lib v1.10 to xrpl.js v2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We hope you enjoy building the Internet of Value, and feel welcome to reach out to the XRP Ledger developer community if you have any questions!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>blockchain</category>
      <category>xrpl</category>
    </item>
  </channel>
</rss>
