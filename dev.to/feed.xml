<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to view a Website (Create-React-App) hosted on port 3000 in your phone's browser😳</title>
      <author>Akosile Oluwatayo Samuel</author>
      <pubDate>Sun, 13 Jun 2021 14:41:50 +0000</pubDate>
      <link>https://dev.to/tboss09/how-to-view-a-website-create-react-app-hosted-on-port-3000-in-your-phone-s-browser-nm8</link>
      <guid>https://dev.to/tboss09/how-to-view-a-website-create-react-app-hosted-on-port-3000-in-your-phone-s-browser-nm8</guid>
      <description>&lt;p&gt;Almost every developers want to have a feel on how some animations, positioning of some element or the whole website would look on Mobile devices,Tablets and so on.Luckily for us, we have &lt;em&gt;DevTools&lt;/em&gt; &lt;em&gt;(&lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;F12&lt;/code&gt; to activate)&lt;/em&gt; built in on all browsers in which we could view our websites in different resolutions..&lt;/p&gt;

&lt;p&gt;The thing is &lt;em&gt;DevTools&lt;/em&gt; isn't always 100% accurate and sometimes a website perfectly built and tested with &lt;code&gt;Chrome&lt;/code&gt; &lt;em&gt;DevTools&lt;/em&gt; could look way worse on &lt;code&gt;Firefox&lt;/code&gt; not to go close to the almighty &lt;code&gt;Internet Explorer&lt;/code&gt;. I once faced this and it left me depressed for days..&lt;/p&gt;

&lt;p&gt;That was when i made some research and found about Chrome Remote Debugging and trust me its been fun ever since.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#so-for-this-project-we-will-need-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;So for this project we will need :&lt;/strong&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;A USB Cord&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://google-chrome-canary.en.softonic.com/"&gt;Chrome Canary&lt;/a&gt;
installed on your desktop&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.chrome.beta"&gt;Chrome Beta&lt;/a&gt;
installed on your phone

First off we need to configure our Phone( by enabling it for USB debugging)&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 :
Search for &lt;code&gt;build number&lt;/code&gt; in your settings. You can find it if you go to :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Settings &amp;gt; About Phone &amp;gt; Build Number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and click on the &lt;code&gt;Build number&lt;/code&gt; 7 times or infinitely till you see the&lt;br&gt;
notification&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are now a developer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;to make the &lt;code&gt;Developer Options&lt;/code&gt; accessible on your mobile device&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVlOO1po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/FotoJet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVlOO1po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/FotoJet.png%3Fraw%3Dtrue" alt="Accessibility" title="Steps to getting  developer options accessible on your phone"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Settings &amp;gt; System &amp;gt; advanced &amp;gt; Developer Options
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or alternatively Search for &lt;code&gt;Developer Options&lt;/code&gt;, Turn it on, Scroll to&lt;br&gt;
&lt;code&gt;USB Debugging&lt;/code&gt; and switch it on...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wC_yqILw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/devOptions1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wC_yqILw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/devOptions1.png%3Fraw%3Dtrue" alt="Dev options" title="Switching on Developer Options"&gt;&lt;/a&gt;&lt;/p&gt;


  &lt;small&gt; NOW WE ARE DONE WITH THE PHONE CONFIGURATION 
  &lt;/small&gt;





  &lt;p&gt;
Lets Move to Desktop Configuration:
  &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Step 1 :
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Connect Your USB Cord to the Desktop then to your mobile Device
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;
Make Sure you have Chrome Beta opened on your mobile device
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open Chrome Canary then type in address bar, type in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chrome://inspect
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
You would receive a Notification
on your mobile device
&lt;/h3&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATsari26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/Capture3.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATsari26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/Capture3.png%3Fraw%3Dtrue" alt="Capture four" title="Accept USb Debugging Options"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;h4&gt;You should see something like this on Chrome Canary&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OjeY0AVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/Capture4.PNG%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OjeY0AVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Tboss09/blogsInMarkdown/blob/master/img/Capture4.PNG%3Fraw%3Dtrue" alt="Chrome Canary View" title="Chrome Canary View"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now your phone Browser &lt;em&gt;(Chrome Beta)&lt;/em&gt; is connected to &lt;em&gt;Chrome Canary&lt;/em&gt;, Any tab you open on your phone's Browser (Chrome Beta) would show automatically on this page&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOn3_KTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/snapshot.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOn3_KTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/snapshot.png%3Fraw%3Dtrue" alt="Snapshot of your screen on Chrome Canary" title="Snapshot of your screen on Chrome Canary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
 A cool feature i like about this is the
 &lt;code&gt;inspect&lt;/code&gt; option which takes a snapshot
of your phone and syncs every activity you do on Chrome Beta with Chrome Canary
&lt;/p&gt;


&lt;h4&gt;
&lt;br&gt;
Here is where the fun begins

&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a34BEZoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/PortGrid.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a34BEZoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/PortGrid.jpg" alt="Port grid" title="Snapshot of your screen on Chrome Canary"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#you-would-see-a-button-with-the-word-raw-port-forwading-endraw-"&gt;
  &lt;/a&gt;
  You would see a button with the word &lt;code&gt;Port Forwading&lt;/code&gt;,
&lt;/h4&gt;



&lt;p&gt;Click on it Then a dialog pops up with heading&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port Forwading Settings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you see two input fields&lt;/p&gt;

&lt;p&gt;The First has a placeholder of &lt;code&gt;Port&lt;/code&gt;, Type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Second has a placeholder of &lt;code&gt;IP ADDRESS AND PORT&lt;/code&gt;, type in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then click on &lt;em&gt;&lt;code&gt;Enable Port forwarding button at the End of the dialog&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After that click &lt;em&gt;Done&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Wait don't tell me thats all😨, But yes, That is all 😜.&lt;/p&gt;

&lt;p&gt;Now type in&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in your Phone's Browser (&lt;em&gt;Chrome Canary&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNR-rxhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/screen.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNR-rxhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Tboss09/blogsInMarkdown/master/img/screen.gif" alt="Picture of React app working on mobile" title="Snapshot Of Localhost on browser"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>chrome</category>
      <category>debugging</category>
    </item>
    <item>
      <title>How to install Android SDK without Android Studio</title>
      <author>Shivam Sharma</author>
      <pubDate>Sun, 13 Jun 2021 14:24:54 +0000</pubDate>
      <link>https://dev.to/shivams136/how-to-install-android-sdk-without-android-studio-ff2</link>
      <guid>https://dev.to/shivams136/how-to-install-android-sdk-without-android-studio-ff2</guid>
      <description>&lt;p&gt;This article is about installing Android SDK in Windows system and run React Native App without Android Studio. Android SDK is required to build, run and debug Android Apps on your machine. So I needed it too to build and run React Native app for android in my windows system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;But Android SDK comes with Android Studio!!!&lt;/em&gt;&lt;/strong&gt; Yes, you are right but not every system can handle &lt;a href="https://developer.android.com/studio#system-requirements-a-namerequirementsa"&gt;Android Studio&lt;/a&gt; :) My system is also behind the minimum system requirements so I had to go for Android SDK separately.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-1-install-chocolatey"&gt;
  &lt;/a&gt;
  Step 1: Install Chocolatey
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://reactnative.dev/docs/environment-setup"&gt;official React Native Documentation&lt;/a&gt;, &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; is recommended for downloading Node and Java. If you already have that downloaded and configured then you can skip this step.&lt;/p&gt;

&lt;p&gt;You can either follow the complete &lt;a href="https://chocolatey.org/install"&gt;Chocolatey Installation Doc&lt;/a&gt; or just run below command in your &lt;strong&gt;&lt;em&gt;Windows Powershell Window&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Set-ExecutionPolicy Bypass &lt;span class="nt"&gt;-Scope&lt;/span&gt; Process &lt;span class="nt"&gt;-Force&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;System.Net.ServicePointManager]::SecurityProtocol &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;System.Net.ServicePointManager]::SecurityProtocol &lt;span class="nt"&gt;-bor&lt;/span&gt; 3072&lt;span class="p"&gt;;&lt;/span&gt; iex &lt;span class="o"&gt;((&lt;/span&gt;New-Object System.Net.WebClient&lt;span class="o"&gt;)&lt;/span&gt;.DownloadString&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://chocolatey.org/install.ps1'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get Chocolatey installed and Environment Variables set.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2-install-java"&gt;
  &lt;/a&gt;
  Step 2: Install Java
&lt;/h2&gt;

&lt;p&gt;As per the &lt;a href="https://reactnative.dev/docs/environment-setup"&gt;official React Native Documentation&lt;/a&gt;,  You can use Chocolatey to install Java. If you already have that, skip this step. Just run below command in command prompt to install Node and Java. You can skip the package you have already installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;choco &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; nodejs.install openjdk8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you must have &lt;code&gt;JAVA_HOME&lt;/code&gt; set in your environment variables, if not then you can set. To go to environment variable you can follow below steps:&lt;/p&gt;

&lt;p&gt;1: Go To &lt;em&gt;Properties&lt;/em&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYj8h_25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e86gd3vhtu2pzcp4dti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYj8h_25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9e86gd3vhtu2pzcp4dti.png" alt="Properties"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;2: Go to Advance System Settings&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eqc26fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69c10q8gz6b71rrvv0bv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eqc26fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69c10q8gz6b71rrvv0bv.png" alt="AdSySt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3: Go to Environment Variables&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYXivmY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4yu6idd01cf38xc80m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYXivmY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4yu6idd01cf38xc80m2.png" alt="EV"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4: List of Environment Variables can be accessed here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---3Ic3iZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tchcvv9u4i4cphye6sab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3Ic3iZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tchcvv9u4i4cphye6sab.png" alt="EV"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#step-3-install-sdk-manager"&gt;
  &lt;/a&gt;
  Step 3: Install SDK Manager
&lt;/h2&gt;

&lt;p&gt;Now firstly we need to install &lt;a href="https://developer.android.com/studio/command-line/sdkmanager"&gt;Android SDK Manager&lt;/a&gt; to install Android SDK and other tools. For that &lt;a href="https://developer.android.com/studio#span-idcommand-toolsa-namecmdline-toolsacommand-line-tools-onlyspan"&gt;visit the official site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Download &lt;code&gt;sdkmanager&lt;/code&gt; compressed file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_20VyzA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfrq4nq7jbqyi44lau6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_20VyzA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfrq4nq7jbqyi44lau6g.png" alt="CLT"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Now you need to create a folder, where you want to keep your all SDK packages. I created &lt;code&gt;C:\Android&lt;/code&gt; for my case. Unzip the downloaded folder in this directory. Now I'm having the folder structure as &lt;code&gt;C:\Android\cmdline-tools\&amp;lt;unzipped files&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;IMPORTANT:&lt;/em&gt;&lt;/strong&gt; Now, we need to move all the unzipped files in a single folder. the name of the folder will be determined by the &lt;code&gt;source.properties&lt;/code&gt; file's content, which is one of these unzipped files. Open this file and It'll be looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pkg.Revision=4.0
Pkg.Path=cmdline-tools;4.0
Pkg.Desc=Android SDK Command-line Tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the first line, the value &lt;code&gt;4.0&lt;/code&gt; is going to be our folder name.&lt;/p&gt;

&lt;p&gt;So create a folder named as &lt;code&gt;4.0&lt;/code&gt;  inside &lt;code&gt;C:\Android\cmdline-tools\&lt;/code&gt; and move all other files into this folder. So now full directory structure will be &lt;code&gt;C:\Android\cmdline-tools\4.0\&amp;lt;bin | lib&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Now we'll set 2 Environment variables: &lt;code&gt;ANDROID_HOME&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt; for &lt;code&gt;cmdline-tools&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set &lt;code&gt;ANDROID_HOME&lt;/code&gt; to the path of the directory you made in above point 2, in my case it's &lt;code&gt;C:\Android&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIQpSQmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux3wi951lhq2u42ahmfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIQpSQmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux3wi951lhq2u42ahmfp.png" alt="Android_HOME"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add &lt;code&gt;C:\Android\cmdline-tools\4.0\bin&lt;/code&gt; and &lt;code&gt;C:\Android\cmdline-tools\4.0&lt;/code&gt; in &lt;code&gt;Path&lt;/code&gt; Variable.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5InyOji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qldrcbpnt6ke2dyicmgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5InyOji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qldrcbpnt6ke2dyicmgx.png" alt="cmdline_tools"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#step-4-install-android-sdk-packages"&gt;
  &lt;/a&gt;
  Step 4: Install Android SDK packages
&lt;/h2&gt;

&lt;p&gt;We'll now install the required packages via &lt;code&gt;sdkmanager&lt;/code&gt;. For that, open Command Prompt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-install-platform-tools-adb-amp-fastboot"&gt;
  &lt;/a&gt;
  1. Install Platform Tools (ADB &amp;amp; Fastboot)
&lt;/h3&gt;

&lt;p&gt;Firstly we need to install &lt;a href="https://developer.android.com/studio/command-line/adb"&gt;&lt;code&gt;adb&lt;/code&gt;&lt;/a&gt;, for that we can install &lt;code&gt;platform-tools&lt;/code&gt; pkg via &lt;code&gt;sdkmanager&lt;/code&gt;. Run below command or get it from &lt;a href="https://developer.android.com/studio/releases/platform-tools"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="s2"&gt;"platform-tools"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add path of &lt;code&gt;platform-tools&lt;/code&gt; in Environment Variable &lt;code&gt;Path&lt;/code&gt; which is &lt;code&gt;C:\Android\platform-tools&lt;/code&gt; in my case.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-install-platform"&gt;
  &lt;/a&gt;
  2. Install Platform
&lt;/h3&gt;

&lt;p&gt;Use the below command to install the Android 10 (API level 30) using the SDK manager. You can download any API level by changing the name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="s2"&gt;"platforms;android-30"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aceept T&amp;amp;C and it'll be installed.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-add-system-image"&gt;
  &lt;/a&gt;
  3. Add System Image
&lt;/h3&gt;

&lt;p&gt;I am adding the most recent default 64-bit system image by running below command. Accept T&amp;amp;C and it'll be installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="s2"&gt;"system-images;android-30;google_apis;x86_64"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some projects which need Google Play Services. We need system image specific to Google Play Services. We can add that via command as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="s2"&gt;"system-images;android-30;google_apis_playstore;x86_64"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-install-build-tools"&gt;
  &lt;/a&gt;
  4. Install Build Tools
&lt;/h3&gt;

&lt;p&gt;I am adding the most recent &lt;code&gt;build-tools&lt;/code&gt; &lt;code&gt;30.0.3&lt;/code&gt; via below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="s2"&gt;"build-tools;30.0.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-install-emulator-optional"&gt;
  &lt;/a&gt;
  5. Install Emulator (Optional)
&lt;/h3&gt;

&lt;p&gt;If you want to run your apps inside emulator instead of physical device then you can install emulator and system images to run that. But obviously, it requires good system specs. We'll cover this in very short, please comment if you want detailed article on that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Install Emulator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdkmanager &lt;span class="nt"&gt;--channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3 emulator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Create emulator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Create the emulator with name em30 using default system image
avdmanager create avd &lt;span class="nt"&gt;-n&lt;/span&gt; em30 &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="s2"&gt;"system-images;android-30;google_apis;x86_64"&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; &lt;span class="s2"&gt;"google_apis"&lt;/span&gt;

// Create emulator with name em30ps using Google Play Services system image
avdmanager create avd &lt;span class="nt"&gt;-n&lt;/span&gt; em30ps &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="s2"&gt;"system-images;android-30;google_apis_playstore;x86_64"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will ask many questions, answer as per yoyr need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Add emulator path in &lt;code&gt;Path&lt;/code&gt; environment variable, in my case it's &lt;code&gt;C:\Android\emulator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; List emulator devices installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;emulator &lt;span class="nt"&gt;-list-avds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Run emulator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// Run Emulator named em30
emulator &lt;span class="nt"&gt;-avd&lt;/span&gt; em30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#6-how-to-use-my-device-instead-of-emulator"&gt;
  &lt;/a&gt;
  6. How to use my device instead of emulator
&lt;/h3&gt;

&lt;p&gt;I'll add article for the same soon.&lt;/p&gt;




&lt;p&gt;So everything is set now and you'll be having Android SDK set up in your system. Below are some other related and useful commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;// list all packages available &lt;span class="k"&gt;in &lt;/span&gt;sdkmanager
sdkmanager &lt;span class="nt"&gt;--list&lt;/span&gt;

// list installed packages via sdkmanager
sdkmanager &lt;span class="nt"&gt;--list_installed&lt;/span&gt;

// Update installed packages
sdkmanager &lt;span class="nt"&gt;--update&lt;/span&gt;

// Uninstall packages
sdkmanager &lt;span class="nt"&gt;--uninstall&lt;/span&gt; &amp;lt;package name&amp;gt;

// Delete Emulator
avdmanager delete avd &lt;span class="nt"&gt;-n&lt;/span&gt; &amp;lt;emulator name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@redaquamedia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Denny Müller&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/android?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>reactnative</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>useEffect : A simple explanation ❤</title>
      <author>ali</author>
      <pubDate>Sun, 13 Jun 2021 12:52:04 +0000</pubDate>
      <link>https://dev.to/_ali_/useeffect-a-simple-explanation-36n4</link>
      <guid>https://dev.to/_ali_/useeffect-a-simple-explanation-36n4</guid>
      <description>&lt;p&gt;Hi all 👋&lt;br&gt;
React Hooks are an integral part of react and is easy to get confused with their usage. Today I will explain one of the common React hook used, i.e &lt;strong&gt;useEffect()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;React documentation defines that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The useEffect accepts a function that contains imperative, possibly effectful code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take an example&lt;/p&gt;

&lt;p&gt;Imagine a scenario where you are opening a web app displaying all the recent news. Now when you are opening the application, you aren't triggering any action. You aren't clicking any button or entering any data. But the app automatically fetches the news for you. This is a simple example where you would use the useEffect hook. A useEffect hook can be used for data fetching, setting up a subscription, and manually changing the DOM in React components (usually called as side effects). We can also control the execution of the same.&lt;/p&gt;

&lt;p&gt;Let me start with the syntax 😞&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-syntax"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h2&gt;

&lt;p&gt;Basically useEffect takes in two parameters. Effect and an optional dependencies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Effect is an imperative function that can return a cleanup function. ( )&lt;/li&gt;
&lt;li&gt;Dependency is an array which if present, will enable the hook to run only if the values in the list change. 📃&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the basic syntax of useEffect will be as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do remember that the dependency is an optional parameter. So it is possible to use useEffect as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-an-effect-"&gt;
  &lt;/a&gt;
  What is an effect ?
&lt;/h2&gt;

&lt;p&gt;As stated above , it as a function. Lets see the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inside useEffect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you guess the number of times the console.log('') is gonna print. By default useEffect runs after the first render and after every update. So as long as there are re renders happening, this hook keeps on executing console log.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-dependency-"&gt;
  &lt;/a&gt;
  What is a dependency ?
&lt;/h2&gt;

&lt;p&gt;The second parameter is an optional parameter which is an array. Now why do we need that ? Well remember how I told you that the useEffect runs on every re renders ? In order to restrict this , we can actually pass an array of dependencies.&lt;/p&gt;

&lt;p&gt;Suppose you only want the useEffect to execute when you change a value, say a fruit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RENDER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code would execute on every update, as useEffect runs on every change. To avoid this we could actually pass fruit as a dependency in the second argument as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RENDER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would only run when the value of fruit changes. Easy right ?&lt;/p&gt;

&lt;p&gt;Suppose you would only want to run some code , but only at the beginning, i.e when the component mounts. How do you achieve that ? Well its more easy, you only have to pass an empty dependency array as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;🥭&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope everything till now is clear...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useeffect-with-cleanup"&gt;
  &lt;/a&gt;
  useEffect with cleanup
&lt;/h2&gt;

&lt;p&gt;While developing a react application, you might have come across an error called 'Memory Leak'. Well, this is where the cleanup function comes into the picture. I'll give you an example a developer can come across while developing a react app.&lt;/p&gt;

&lt;p&gt;Suppose you are making an axios call. What would happen if you navigate to another route ? Ideally the axios call irrespective of it's status should cancel the request. But that wont happen automatically, rather would show you an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as React suggests, we should cleanup the effect before the component unmounts. In class based components, we used to write this cleanup function in componentWillUnMount lifecycle method. In functional based component, we don't have such methods. So we write the cleanup code and return it as a function from useEffect&lt;/p&gt;

&lt;p&gt;See the following example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;setFruit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;🍎&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideally you should not update the state, when the component unmounts. But how do react know when to stop the state updation ? Notice the returning function from useEffect in the above code. This function tells react what to do, when the component unmounts which in our case is to stop updating our state. Here the value of isMounted is returned as false when the component unmounts, and we controll the flow using simple if condition. &lt;/p&gt;

&lt;p&gt;Let me show you another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CancelToken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET REQUEST SUCCESS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET REQUEST CANCELLED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET REQUEST FAILED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Operation canceled by the user.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Axios provides a way to cancel a request using a cancel token &lt;a href="https://github.com/axios/axios#cancellation"&gt;Axios Cancellation&lt;/a&gt;. A cancel token can be created using the CancelToken.source factory as shown above. This token is then passed into the axios.get method. We also control the execution of the code by using simple if conditions as shown above.&lt;/p&gt;

&lt;p&gt;You can also use the same with a post request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;cancelToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also possible to pass in different values in the returning function of useEffect as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Operation canceled by the user.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly we can write all sort of code that should happen while the component unmounts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-exercise-using-useeffect-hook"&gt;
  &lt;/a&gt;
  A simple exercise using useEffect hook
&lt;/h2&gt;

&lt;p&gt;Q. Increment a value in each second using useEffect code ⏱&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;⏱&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we have passed in count as a dependency. This would enable react to run the effect function as long as count changes. Thus the counter keeps on incrementing and updates the state. Also notice the returning function. The cleanup code will clear the interval using the clearInterval method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To brief, useEffect hook accepts a function that contains imperative, possibly effectful code. You can control the execution using the second param which is dependency array. It is also important to write the cleanup code while working with useEffect using the return function. Hope I could explain each aspects of useEffect properly. Until next time. ❤&lt;/p&gt;

</description>
      <category>react</category>
      <category>ux</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Deep Learning Projects (Beginner &amp; Advanced)</title>
      <author>Patrick Loeber</author>
      <pubDate>Sun, 13 Jun 2021 12:41:15 +0000</pubDate>
      <link>https://dev.to/python_engineer/10-deep-learning-projects-beginner-advanced-1ad2</link>
      <guid>https://dev.to/python_engineer/10-deep-learning-projects-beginner-advanced-1ad2</guid>
      <description>&lt;p&gt;Here are 10 deep learning projects from beginner to advanced that you can do with &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; or &lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt;. For each project the links to the datasets are included.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aU8OF0htbTo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-mnist"&gt;
  &lt;/a&gt;
  1 MNIST
&lt;/h2&gt;

&lt;p&gt;The MNIST dataset is a large set of handwritten digits and the goal is to recognize the correct digit. This project is fairly easy, it should make you comfortable with your deep learning framework and you should learn how you can implement and train your first &lt;strong&gt;Artificial Neural Network&lt;/strong&gt;. It also teaches you how to do multiclass classification problems instead of just binary problems.&lt;/p&gt;

&lt;p&gt;MNIST can be loaded directly from within TensorFlow and PyTorch.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;http://yann.lecun.com/exdb/mnist/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cifar10"&gt;
  &lt;/a&gt;
  2 CIFAR-10
&lt;/h2&gt;

&lt;p&gt;This project is similar but a little bit more difficult than the first one. It contains color images of 10 different classes like airplanes, birds, dogs, and other objects. Here it’s a little bit harder to get a good classification model. Now instead of just using a simple neural net, you should implement a &lt;strong&gt;Convolutional Neural Net&lt;/strong&gt; and learn how they work.&lt;/p&gt;

&lt;p&gt;CIFAR-10 can be loaded directly from within TensorFlow and PyTorch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html"&gt;https://www.cs.toronto.edu/~kriz/cifar.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dogs-vs-cats"&gt;
  &lt;/a&gt;
  3 Dogs vs. Cats
&lt;/h2&gt;

&lt;p&gt;The third project is the Dogs vs. Cats challenge on Kaggle. As the name suggests, the dataset only contains images of either a dog or a cat. This classification task is actually a little bit simpler than in the previous task, because now we only deal with a binary classification problem. But the challenging part could be to learn how to download the data and load it with the correct format into your model. If you are ambitious you can then submit your results to Kaggle and compete with other people.&lt;/p&gt;

&lt;p&gt;To get a really good performance you could also have a look at a technique that is called &lt;strong&gt;Transfer Learning&lt;/strong&gt;. This is a very important concept that you should learn sooner or later, so now would be a good point to try this. If you want to learn more about this then I have a tutorial for you &lt;a href="https://www.python-engineer.com/courses/pytorchbeginner/15-transferlearning/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kaggle.com/c/dogs-vs-cats"&gt;Dogs vs. Cats | Kaggle&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-breast-cancer-classification"&gt;
  &lt;/a&gt;
  4 Breast Cancer Classification
&lt;/h2&gt;

&lt;p&gt;The medical field is one of the most common use cases of deep learning. There are many applications out there that help to detect diseases and help physicians to make their diagnosis. Here you can help to improve these applications and bring your knowledge to a good use. &lt;/p&gt;

&lt;p&gt;The particular project I selected for beginners is about Breast Cancer Classification. Here you have to train a model to classify cancer subtypes based on 2D Medical Histopathology images. Breast cancer is the most common form of cancer in women,  and accurately identifying and categorizing breast cancer subtypes is an important clinical task. If you can come up with a reliable automated method here then this can be used to save time and reduce errors in hospitals.&lt;/p&gt;

&lt;p&gt;Breast Cancer Classification: &lt;a href="https://www.kaggle.com/paultimothymooney/breast-histopathology-images/"&gt;Breast Histopathology Images | Kaggle&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-natural-language-processing-with-disaster-tweets"&gt;
  &lt;/a&gt;
  5 Natural Language Processing with Disaster Tweets
&lt;/h2&gt;

&lt;p&gt;Up until now we had four computer vision projects. Now let’s switch the field and have a look at Natural Language Processing - or short NLP. This is another field where deep learning is widely used. Here we don’t deal with images but instead with words and sentences. &lt;/p&gt;

&lt;p&gt;To get started I recommend the Disaster Tweet project. Again you find this on Kaggle in the NLP getting started category. You have to classify Twitter Tweets and predict if they are about real disasters or not.  &lt;/p&gt;

&lt;p&gt;This would be a nice time to learn about &lt;strong&gt;RNNs - Recurrent Neural Networks, and LSTMs - Long Short Term Memory&lt;/strong&gt;. These are two special types of neural networks that are extremely important when working with text data. You can find a tutorial about them &lt;a href="https://www.python-engineer.com/posts/pytorch-rnn/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kaggle.com/c/nlp-getting-started/overview"&gt;Natural Language Processing with Disaster Tweets | Kaggle&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-chatbot"&gt;
  &lt;/a&gt;
  6 Chatbot
&lt;/h2&gt;

&lt;p&gt;Next I suggest a project I think almost everyone will enjoy. And this is about chatbots. Build your own chatbot from scratch and put it to test with a simple chat application.  &lt;/p&gt;

&lt;p&gt;To get data for this task I can point you to two large open source datasets which should be enough for the beginning. &lt;br&gt;
The first is the Conversational Question Answering dataset provided by Stanford NLP,  and the other one is the Google Natural Questions dataset.&lt;/p&gt;

&lt;p&gt;If you don’t know how to get started then I can point you to my &lt;a href="https://dev.to/posts/chatbot-pytorch/"&gt;tutorial&lt;/a&gt; where we build a simple chatbot with an RNN together. Once you've understood the concepts of RNNs then creating a - maybe not advanced but decent - chatbot is not that hard anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ai.google.com/research/NaturalQuestions"&gt;Google’s Natural Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stanfordnlp.github.io/coqa/"&gt;CoQA: A Conversational Question Answering Challenge&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-recommender-system"&gt;
  &lt;/a&gt;
  7 Recommender System
&lt;/h2&gt;

&lt;p&gt;Now let’s go to a task almost every company needs. Have a look at Netflix, YouTube, Instagram, Spotify, and all the other big names. They all need Recommender Systems. Based on the information they collect on each user they want to recommend other content that the user might enjoy. &lt;/p&gt;

&lt;p&gt;To get started with this I suggest to build a movie recommender system, You can either use the MovieLens 100K Dataset or the official Netflix dataset on Kaggle.&lt;/p&gt;

&lt;p&gt;This is also a good time to learn about a technique that is called &lt;strong&gt;collaborative filtering&lt;/strong&gt;.  You could solve this with „classical“ Data Science techniques, but you can also build deep recommender systems using deep learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://grouplens.org/datasets/movielens/100k/"&gt;MovieLens 100K Dataset&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.kaggle.com/netflix-inc/netflix-prize-data"&gt;Netflix Prize data | Kaggle&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-forecasting"&gt;
  &lt;/a&gt;
  8 Forecasting
&lt;/h2&gt;

&lt;p&gt;Next let’s have a look at Forecasting. This is another interesting field where we deal with a time series and you can practice your knowledge about RNNs again. We want to predict the values of a time series in the future. A very popular example for this is stock price prediction. &lt;/p&gt;

&lt;p&gt;As dataset here I actually encourage you to scrape or download the stock data yourself from Yahoo! Finance. This should not be too hard and there is also a python package (&lt;em&gt;yfinance&lt;/em&gt;) that you can simply use.&lt;/p&gt;

&lt;p&gt;So get some stock data, use the time data only up to a certain point in the past to train your model, then see how it predicts the prices from the rest of the data up to the present time, and then build a system to predict the prices in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://finance.yahoo.com/"&gt;Yahoo! finance&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/yfinance/"&gt;yfinance Python Package&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-object-detection"&gt;
  &lt;/a&gt;
  9 Object Detection
&lt;/h2&gt;

&lt;p&gt;The last two projects are advanced Computer Vision tasks. First let’s have a look at Object Detection. The goal is to identify the specified objects and mark the positions in the image. So you have to check if there is an object, and then where it is, and also deal with possible multiple objects in an image. &lt;/p&gt;

&lt;p&gt;This is indeed a very advanced task, and you could try to recreate the popular &lt;a href="https://pjreddie.com/darknet/yolo/"&gt;YOLO object detection model&lt;/a&gt; from scratch, but I recommend to just use a pertained model.&lt;/p&gt;

&lt;p&gt;Then you still have to implement the whole object detection pipeline, and you should learn about &lt;a href="https://opencv.org/"&gt;OpenCV&lt;/a&gt; here. A very important Computer Vision library that is used here for example to draw the bounding boxes. &lt;/p&gt;

&lt;p&gt;As datasets I can point you to the Raccoon dataset or the Annotated Driving Dataset that is used for self driving cars.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/datitran/raccoon_dataset"&gt;Raccoon Dataset&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/udacity/self-driving-car/tree/master/annotations"&gt;Annotated Driving Dataset&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Helpful Articles:&lt;br&gt;&lt;br&gt;
&lt;a href="https://towardsdatascience.com/building-your-own-object-detector-pytorch-vs-tensorflow-and-how-to-even-get-started-1d314691d4ae"&gt;Towardsdatascience - Build Your Own Object Detector&lt;/a&gt;&lt;br&gt;
&lt;a href="https://towardsdatascience.com/how-to-train-your-own-object-detector-with-tensorflows-object-detector-api-bec72ecfe1d9"&gt;Towardsdatascience - Object Detection With TensorFlow Object Detector API&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-style-transfer"&gt;
  &lt;/a&gt;
  10 Style Transfer
&lt;/h2&gt;

&lt;p&gt;As last project I suggest to have a look at style transfer, a very interesting use of deep learning. You train a model and can then feed a style image to this model, and after training it is able to apply this style to any other given image you want. &lt;/p&gt;

&lt;p&gt;Here again you don’t have to implement this from scratch but can use an existing framework like the TensorFlow fast style transfer or the PyTorch fast neural style implementation. &lt;/p&gt;

&lt;p&gt;To retrain your model for your own style images you should use the COCO dataset. COCO is a large-scale object detection, segmentation, and captioning dataset, and it’s one of the most important deep learning datasets for computer vision that you should definitely check out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lengstrom/fast-style-transfer"&gt;TensorFlow Fast Style Transfer&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/pytorch/examples/tree/master/fast_neural_style"&gt;PyTorch Fast Neural Style&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cocodataset.org/"&gt;COCO dataset&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;I hope you will enjoy these projects! And if you need help you can always join our community in the Discord server: &lt;a href="https://discord.gg/FHMg9tKFSN"&gt;https://discord.gg/FHMg9tKFSN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Programming Rules</title>
      <author>Ritvik Dubey</author>
      <pubDate>Sun, 13 Jun 2021 12:30:39 +0000</pubDate>
      <link>https://dev.to/ritvikdubey27/programming-rules-2ong</link>
      <guid>https://dev.to/ritvikdubey27/programming-rules-2ong</guid>
      <description>&lt;p&gt;Hello People, In this short read I'll be writing about some basic programming rules that must be followed while programming in Java, one must know these rules before starting to code in Java. I did some research and haven't found any particular article where I can see all these rules framed together. Also I think most of these programming rules should be followed while programming any language. These rules will help in making your code more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's begin...
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZPbqywh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623586459644/WHQAMnWPI.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZPbqywh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623586459644/WHQAMnWPI.gif" alt="type-fast-gif.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rule1"&gt;
  &lt;/a&gt;
  Rule-1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Always write code from RHS to LHS&lt;/strong&gt; this one is little tricky this will be more clear from example.&lt;br&gt;
So suppose you are making reference object of Scanner class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you started typing from Scanner sc -&amp;gt; this is LHS to RHS&lt;/p&gt;

&lt;p&gt;Now if you start from Right Hand Side, that is starting from new Scanner(); it would be easy for you to decide what will be on the Left Hand Side because that is declaration part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rule2"&gt;
  &lt;/a&gt;
  Rule-2
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Deleting complete line&lt;/strong&gt; if you are a beginner or learning new language than you must follow this, while writing the line of code and there is some typing mistake then instead of correcting that mistake delete the complete line so when next time you will typing same thing then there will be less chances of you committing same mistake.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EhUWZjd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623579651197/WPTv5YO4f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EhUWZjd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623579651197/WPTv5YO4f.gif" alt="back.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rule3"&gt;
  &lt;/a&gt;
  Rule-3
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Semicolon&lt;/strong&gt; while programming in Java remember all operations in Java end with a semicolon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gCpa7Xa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623582078210/iTRjNexLw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gCpa7Xa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623582078210/iTRjNexLw.jpeg" alt="semi.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rule4"&gt;
  &lt;/a&gt;
  Rule-4
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Class name declaration&lt;/strong&gt; while declaring a class the first letter of the class name must be in uppercase and no numeric value or special symbol should be used. If there are two words in class name then also first letter of each word should be in uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//class body&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProjectManager&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//class body&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule5"&gt;
  &lt;/a&gt;
  Rule-5
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Method declaration&lt;/strong&gt; there are two styles to follow while declaring a method they are single word style or camel case(camelCase) style.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;camelCase style :- It is a combination of more than 2 words where first letter of first word must be in lowercase and remaining word first letter must be in uppercase. Remember there should be no space between words.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CoNkP7Xv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623580435630/52AfMNsab.png" alt="camal.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;showData&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Single word style :- If the method name consists single word then this style should be followed, in this style all the characters will be in lowercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule6"&gt;
  &lt;/a&gt;
  Rule-6
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Variable declaration&lt;/strong&gt; while declaring a variable you should ignore using single character, you should either follow single word style or camelCase style.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;studentName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule7"&gt;
  &lt;/a&gt;
  Rule-7
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Constant declaration&lt;/strong&gt; while declaring a constant all characters must be in uppercase and use underscore(_) if there are multiple words.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// value is not fixed&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// value is not fixed&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="no"&gt;MAX_AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// value is fixed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule8"&gt;
  &lt;/a&gt;
  Rule-8
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Package specification&lt;/strong&gt; while specifying a package then all the characters must be in lowercase except the first letter of the class specified by package. To read more about packages check my &lt;strong&gt;&lt;em&gt;&lt;a href="https://dev.to/ritvikdubey27/you-must-know-this-about-java-ii-1k21"&gt;last article&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule9"&gt;
  &lt;/a&gt;
  Rule-9
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Access level declaration&lt;/strong&gt; while declaring access levels all the characters of the access levels should be in lowercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rule10"&gt;
  &lt;/a&gt;
  Rule-10
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Object &amp;amp; reference object creation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an object in Java.&lt;/p&gt;

&lt;p&gt;Object creation follows these steps:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instantiation:- The new keyword is a Java operator that creates the object.&lt;/li&gt;
&lt;li&gt;Initialization:- The new operator is followed by a call to a constructor, which initializes the new object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;strong&gt;st&lt;/strong&gt; is the reference object in Java.&lt;/p&gt;

&lt;p&gt;It includes:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Declaration: A variable name with an object type. This variable is called reference object. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In Java we can access method outside class in 3 ways:-&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Way-1 :-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Way-2 :-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Way-3 :-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// if method is static&lt;/span&gt;
&lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// if method is static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#okay-so-thats-enough-for-now-follow-my-this-journey-to-learn-more-about-java"&gt;
  &lt;/a&gt;
  Okay so that's enough for now follow my this journey to learn more about Java.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  &lt;em&gt;Thank you for reading.&lt;/em&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#please-share-your-thoughts-about-it-and-correct-me-if-im-wrong"&gt;
  &lt;/a&gt;
  &lt;em&gt;Please share your thoughts about it and correct me if I'm wrong.&lt;/em&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#i-hope-you-liked-it-and-found-it-helpful"&gt;
  &lt;/a&gt;
  &lt;em&gt;I hope you liked it and found it helpful.&lt;/em&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#cover-rajat-gour"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Cover:- &lt;a href="https://twitter.com/rajatgour20"&gt;Rajat Gour&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#connect-with-me-on-twitter-or-linkedin"&gt;
  &lt;/a&gt;
  &lt;em&gt;Connect with me on &lt;a href="https://twitter.com/ritvikdubey27?s=09"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/ritvik-dubey-3bbb22169"&gt;LinkedIn&lt;/a&gt;&lt;/em&gt;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#my-personal-blog-blogritvikdubeycom"&gt;
  &lt;/a&gt;
  &lt;em&gt;My personal blog &lt;a href="https://blog.ritvikdubey.com/"&gt;blog.ritvikdubey.com&lt;/a&gt;&lt;/em&gt;
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>java</category>
      <category>javascript</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Clippy in VSCode 😱</title>
      <author>Adam Crockett</author>
      <pubDate>Sun, 13 Jun 2021 12:29:45 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/clippy-in-vscode-4291</link>
      <guid>https://dev.to/adam_cyclones/clippy-in-vscode-4291</guid>
      <description>&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=fleshywaffles.vs-code-clippy"&gt;run, run while you can&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Day 25/30 : Image Hover Effects using HTML and CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Sun, 13 Jun 2021 12:27:14 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/day-25-30-image-hover-effects-using-html-and-css-1foc</link>
      <guid>https://dev.to/somanathgoudar/day-25-30-image-hover-effects-using-html-and-css-1foc</guid>
      <description>&lt;p&gt;Welcome to Day 25 of this &lt;a href="https://dev.to/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1"&gt;Challenge&lt;/a&gt;. This is what I created today. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--32PfcVH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-cb-FoMcW0uw/YKoZ2XWnclI/AAAAAAAAAIA/iJbXwiJgfMslGvHnMKfqyyebfWdA8-JoQCLcBGAsYHQ/s600/p25.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--32PfcVH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-cb-FoMcW0uw/YKoZ2XWnclI/AAAAAAAAAIA/iJbXwiJgfMslGvHnMKfqyyebfWdA8-JoQCLcBGAsYHQ/s600/p25.gif" alt="Image Hover Effects using HTML and CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Video Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0hY0mwrQp1M"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;strong&gt;➜ Source Code :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.futurecodersweb.com/2021/06/css-image-hover-effects-using-html-and.html"&gt;https://www.futurecodersweb.com/2021/06/css-image-hover-effects-using-html-and.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Instagram Post and Reel for Day 25 :&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/future_coderss/"&gt;See Post and Reel&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Hey, If You don't know what is happening here. Don't Worry, I am doing a crazy challenge 😅. Read More about it from the post below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/30dayschallenge-30-days-extreme-html-css-challenge-50k1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤯 30DaysChallenge - 30 Days Extreme HTML &amp;amp; CSS CHALLENGE 🤯&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#30daysofcode&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Support Me :&lt;/strong&gt;&lt;br&gt;
👉 Buy me a Coffee: &lt;a href="https://www.buymeacoffee.com/somanathgoudar"&gt;https://www.buymeacoffee.com/somanathgoudar&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/somanath_goudar/"&gt;Follow Me on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.instagram.com/future_coderss/"&gt;Follow Future Coders on Instagram&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;Subscribe to My Main Channel&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://www.youtube.com/channel/UCzGSyMOf2jPt1MkNBB3SJ3g"&gt;Subscribe to Channel Created for this Challenge&lt;/a&gt;&lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PHP - Create your own PHP Options Resolver ( Like Symfony )</title>
      <author>F.R Michel</author>
      <pubDate>Sun, 13 Jun 2021 11:54:33 +0000</pubDate>
      <link>https://dev.to/fadymr/php-create-your-own-php-options-resolver-like-symfony-4n33</link>
      <guid>https://dev.to/fadymr/php-create-your-own-php-options-resolver-like-symfony-4n33</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-simple-options-resolver-to-processes-and-validates-option-array"&gt;
  &lt;/a&gt;
  A simple Options Resolver to processes and validates option array.
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;PHP version required 7.3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we create a OptionsResolver.php file contain the Resolver&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;DevCoder\Resolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @var \ArrayObject&amp;lt;Option&amp;gt;
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;ArrayObject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;checkDiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/**
         * @var Option $option
         */&lt;/span&gt;
        &lt;span class="nv"&gt;$optionsResolved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$optionName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The option "%s" with value %s is invalid.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;formatValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nv"&gt;$optionsResolved&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasDefaultValue&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$optionsResolved&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getDefaultValue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;'The required option "%s" is missing.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$optionName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$optionsResolved&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Option&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;self&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;offsetSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nv"&gt;$option&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;checkDiff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$defined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getArrayCopy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;array_diff_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$defined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s1"&gt;'The option(s) "%s" do(es) not exist. Defined options are: "%s".'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$diff&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                    &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'", "'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$defined&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;formatValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;is_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;get_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'"'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;gettype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a Option.php file defining a option&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;DevCoder\Resolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @var string
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @var mixed
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @var bool
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$hasDefaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @var \Closure|null
     */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Option constructor.
     * @param string $name
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @return mixed
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getDefaultValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @param mixed $defaultValue
     * @return Option
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$defaultValue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;self&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hasDefaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;defaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hasDefaultValue&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hasDefaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Closure&lt;/span&gt; &lt;span class="nv"&gt;$closure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$closure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Closure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How to use ?&lt;/strong&gt;&lt;br&gt;
Define required options&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\Option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'host'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'dbname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught InvalidArgumentException: The required option "username" is missing.&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'host'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'dbname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define default options&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\Option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="cd"&gt;/**
         * array(4) {
         * ["host"]=&amp;gt;
         * string(9) "localhost"
         * ["username"]=&amp;gt;
         * string(4) "root"
         * ["password"]=&amp;gt;
         * string(4) "root"
         * ["dbname"]=&amp;gt;
         * string(3) "app"
         * }
         */&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\Option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="cd"&gt;/**
         * array(4) {
         * ["host"]=&amp;gt;
         * string(9) "localhost"
         * ["username"]=&amp;gt;
         * string(4) "root"
         * ["password"]=&amp;gt;
         * string(4) "root"
         * ["dbname"]=&amp;gt;
         * string(3) "app-2"
         * }
         */&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'dbname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'app-2'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Non-existent options&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\Option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'mysql://root:root@localhost/app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught InvalidArgumentException: The option(s) "url" do(es) not exist. Defined options are: "host", "username", "password", "dbname"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Validate options values&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\Option&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;DevCoder\Resolver\OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OptionsResolver&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'host'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;is_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'driver'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'pdo_mysql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'pdo_pgsql'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setDefaultValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'pdo_mysql'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resolver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'host'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'192.168.1.200'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'dbname'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'my-app'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'driver'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'pdo_sqlite'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught InvalidArgumentException: The option "driver" with value "pdo_sqlite" is invalid.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ideal for small project&lt;br&gt;
Simple and easy!&lt;br&gt;
&lt;a href="https://github.com/devcoder-xyz/php-options-resolver"&gt;https://github.com/devcoder-xyz/php-options-resolver&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>codequality</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Use schemacrawler to generate Mermaid diagram</title>
      <author>Antoine</author>
      <pubDate>Sun, 13 Jun 2021 11:40:33 +0000</pubDate>
      <link>https://dev.to/antoinega/use-schemacrawler-to-generate-mermaid-diagram-bik</link>
      <guid>https://dev.to/antoinega/use-schemacrawler-to-generate-mermaid-diagram-bik</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@pinadventuremap"&gt;Pin Adventure Map&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/cartography"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mermaid is a fantastic tool to document your database. I discover you can use it to generate Mermaid diagram.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#schemacrawler"&gt;
  &lt;/a&gt;
  Schemacrawler
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.schemacrawler.com/"&gt;schemacrawler website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.katacoda.com/schemacrawler"&gt;Katacoda learning scenario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sualeh/how-to-generate-mermaid-diagrams-for-your-database-33bn"&gt;How to generate Mermaid Diagram with schemcrawler&lt;/a&gt; to generate diagram like &lt;a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZXJEaWFncmFtXG5cbiAgYXJ0aXN0cyB7XG4gICAgSU5URUdFUiBBcnRpc3RJZFxuICAgIE5WQVJDSEFSIE5hbWVcbiAgfVxuXG4gIGVtcGxveWVlcyB7XG4gICAgSU5URUdFUiBFbXBsb3llZUlkXG4gICAgTlZBUkNIQVIgTGFzdE5hbWVcbiAgICBOVkFSQ0hBUiBGaXJzdE5hbWVcbiAgICBOVkFSQ0hBUiBUaXRsZVxuICAgIElOVEVHRVIgUmVwb3J0c1RvXG4gICAgREFURVRJTUUgQmlydGhEYXRlXG4gICAgREFURVRJTUUgSGlyZURhdGVcbiAgICBOVkFSQ0hBUiBBZGRyZXNzXG4gICAgTlZBUkNIQVIgQ2l0eVxuICAgIE5WQVJDSEFSIFN0YXRlXG4gICAgTlZBUkNIQVIgQ291bnRyeVxuICAgIE5WQVJDSEFSIFBvc3RhbENvZGVcbiAgICBOVkFSQ0hBUiBQaG9uZVxuICAgIE5WQVJDSEFSIEZheFxuICAgIE5WQVJDSEFSIEVtYWlsXG4gIH1cblxuICBnZW5yZXMge1xuICAgIElOVEVHRVIgR2VucmVJZFxuICAgIE5WQVJDSEFSIE5hbWVcbiAgfVxuXG4gIG1lZGlhX3R5cGVzIHtcbiAgICBJTlRFR0VSIE1lZGlhVHlwZUlkXG4gICAgTlZBUkNIQVIgTmFtZVxuICB9XG5cbiAgcGxheWxpc3RzIHtcbiAgICBJTlRFR0VSIFBsYXlsaXN0SWRcbiAgICBOVkFSQ0hBUiBOYW1lXG4gIH1cblxuICBhbGJ1bXMge1xuICAgIElOVEVHRVIgQWxidW1JZFxuICAgIE5WQVJDSEFSIFRpdGxlXG4gICAgSU5URUdFUiBBcnRpc3RJZFxuICB9XG5cbiAgY3VzdG9tZXJzIHtcbiAgICBJTlRFR0VSIEN1c3RvbWVySWRcbiAgICBOVkFSQ0hBUiBGaXJzdE5hbWVcbiAgICBOVkFSQ0hBUiBMYXN0TmFtZVxuICAgIE5WQVJDSEFSIENvbXBhbnlcbiAgICBOVkFSQ0hBUiBBZGRyZXNzXG4gICAgTlZBUkNIQVIgQ2l0eVxuICAgIE5WQVJDSEFSIFN0YXRlXG4gICAgTlZBUkNIQVIgQ291bnRyeVxuICAgIE5WQVJDSEFSIFBvc3RhbENvZGVcbiAgICBOVkFSQ0hBUiBQaG9uZVxuICAgIE5WQVJDSEFSIEZheFxuICAgIE5WQVJDSEFSIEVtYWlsXG4gICAgSU5URUdFUiBTdXBwb3J0UmVwSWRcbiAgfVxuXG4gIGludm9pY2VzIHtcbiAgICBJTlRFR0VSIEludm9pY2VJZFxuICAgIElOVEVHRVIgQ3VzdG9tZXJJZFxuICAgIERBVEVUSU1FIEludm9pY2VEYXRlXG4gICAgTlZBUkNIQVIgQmlsbGluZ0FkZHJlc3NcbiAgICBOVkFSQ0hBUiBCaWxsaW5nQ2l0eVxuICAgIE5WQVJDSEFSIEJpbGxpbmdTdGF0ZVxuICAgIE5WQVJDSEFSIEJpbGxpbmdDb3VudHJ5XG4gICAgTlZBUkNIQVIgQmlsbGluZ1Bvc3RhbENvZGVcbiAgICBOVU1FUklDIFRvdGFsXG4gIH1cblxuICB0cmFja3Mge1xuICAgIElOVEVHRVIgVHJhY2tJZFxuICAgIE5WQVJDSEFSIE5hbWVcbiAgICBJTlRFR0VSIEFsYnVtSWRcbiAgICBJTlRFR0VSIE1lZGlhVHlwZUlkXG4gICAgSU5URUdFUiBHZW5yZUlkXG4gICAgTlZBUkNIQVIgQ29tcG9zZXJcbiAgICBJTlRFR0VSIE1pbGxpc2Vjb25kc1xuICAgIElOVEVHRVIgQnl0ZXNcbiAgICBOVU1FUklDIFVuaXRQcmljZVxuICB9XG5cbiAgaW52b2ljZV9pdGVtcyB7XG4gICAgSU5URUdFUiBJbnZvaWNlTGluZUlkXG4gICAgSU5URUdFUiBJbnZvaWNlSWRcbiAgICBJTlRFR0VSIFRyYWNrSWRcbiAgICBOVU1FUklDIFVuaXRQcmljZVxuICAgIElOVEVHRVIgUXVhbnRpdHlcbiAgfVxuXG4gIHBsYXlsaXN0X3RyYWNrIHtcbiAgICBJTlRFR0VSIFBsYXlsaXN0SWRcbiAgICBJTlRFR0VSIFRyYWNrSWRcbiAgfVxuXG4gIGFydGlzdHMgfHwtLW97IGFsYnVtcyA6IFwiZm9yZWlnbiBrZXlcIlxuXG4gIGVtcGxveWVlcyB8fC0tb3sgY3VzdG9tZXJzIDogXCJmb3JlaWduIGtleVwiXG4gIGVtcGxveWVlcyB8fC0tb3sgZW1wbG95ZWVzIDogXCJmb3JlaWduIGtleVwiXG5cbiAgZ2VucmVzIHx8LS1veyB0cmFja3MgOiBcImZvcmVpZ24ga2V5XCJcblxuICBtZWRpYV90eXBlcyB8fC0tb3sgdHJhY2tzIDogXCJmb3JlaWduIGtleVwiXG5cbiAgcGxheWxpc3RzIHx8LS1veyBwbGF5bGlzdF90cmFjayA6IFwiZm9yZWlnbiBrZXlcIlxuXG4gIGFsYnVtcyB8fC0tb3sgdHJhY2tzIDogXCJmb3JlaWduIGtleVwiXG5cbiAgY3VzdG9tZXJzIHx8LS1veyBpbnZvaWNlcyA6IFwiZm9yZWlnbiBrZXlcIlxuXG4gIGludm9pY2VzIHx8LS1veyBpbnZvaWNlX2l0ZW1zIDogXCJmb3JlaWduIGtleVwiXG5cbiAgdHJhY2tzIHx8LS1veyBpbnZvaWNlX2l0ZW1zIDogXCJmb3JlaWduIGtleVwiXG4gIHRyYWNrcyB8fC0tb3sgcGxheWxpc3RfdHJhY2sgOiBcImZvcmVpZ24ga2V5XCJcblxuXG5cbiIsIm1lcm1haWQiOnt9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"&gt;this one&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_S-4oNTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v6y3xxavxccoemdy8hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_S-4oNTf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7v6y3xxavxccoemdy8hc.png" alt="diagram"&gt;&lt;/a&gt;&lt;br&gt;
Hope this help !&lt;/p&gt;

</description>
    </item>
    <item>
      <title>roadmap for front-end development</title>
      <author>Souvik</author>
      <pubDate>Sun, 13 Jun 2021 11:11:36 +0000</pubDate>
      <link>https://dev.to/8bitsouvik/roadmap-for-front-end-development-4077</link>
      <guid>https://dev.to/8bitsouvik/roadmap-for-front-end-development-4077</guid>
      <description>&lt;p&gt;There are some great roadmaps for web developers out there. But some make you solve a "puzzle" before even getting started, as there are multiple choices that you have to make.&lt;/p&gt;

&lt;p&gt;When I started to learn Web Development, I wished that I could find an experienced developer who would tell me what they had done to become a Web Developer. Unfortunately, I couldn't find anyone.&lt;/p&gt;

&lt;p&gt;I will also be talking about some example projects that you can build to practice your skills.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tools-you-need-to-know-to-become-a-web-developer"&gt;
  &lt;/a&gt;
  Tools You Need to Know to Become a Web Developer
&lt;/h4&gt;

&lt;p&gt;I'll assume that you are a beginner. In that case, there are a few tools that you need to know before getting into programming.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#vs-code-or-other-code-editor"&gt;
  &lt;/a&gt;
  VS Code (or other code editor)
&lt;/h5&gt;

&lt;p&gt;First, you should learn how to use Visual Studio Code, which is a source code editor. It is a free and powerful tool.&lt;/p&gt;

&lt;p&gt;In the beginning, I recommend learning some of the basic shortcuts and installing some of the extensions like &lt;strong&gt;ESlint&lt;/strong&gt;, &lt;strong&gt;Prettier&lt;/strong&gt;, or &lt;strong&gt;Live Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's a free, full-length course on the freeCodeCamp YouTube channel to get you started.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-command-line"&gt;
  &lt;/a&gt;
  The Command Line
&lt;/h5&gt;

&lt;p&gt;Next, you need to know about the Command-Line. You should learn what it is, and some of the basic commands like how to move around directories, how to create a new directory, or how to create a new file.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#version-control-git-and-github"&gt;
  &lt;/a&gt;
  Version Control - Git and GitHub
&lt;/h5&gt;

&lt;p&gt;No matter what you do, as a developer, you need to know about Git. Git is a Version Control system used for tracking changes. It is usually used with GitHub, which is a code hosting platform.&lt;/p&gt;

&lt;p&gt;In the beginning, learning Git might be overwhelming, therefore you just need to know some of the basics like how to create a new Repository, how to clone a project, how to make a new commit, and how to pull and push the new changes.&lt;/p&gt;

&lt;p&gt;One of the best ways to practice Git is by working in a team. There, you need to know how to create a new branch, how to make pull requests, and how to resolve conflicts.&lt;/p&gt;

&lt;p&gt;Here's a great Git and GitHub crash course on the freeCodeCamp YouTube channel to get you going with version control.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#design-tools-figma"&gt;
  &lt;/a&gt;
  Design tools - Figma
&lt;/h5&gt;

&lt;p&gt;The last tool is Figma. Figma is a design tool and is free to use for individuals. But here I want to talk about how to use Figma as a developer.&lt;/p&gt;

&lt;p&gt;Alright, so these are the tools that you need to know of when getting started. You don't need to know everything, but be sure that you understand the basics so that you can improve while learning to code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8m6VtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzf76wnrr3ho1rkwh4n4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8m6VtAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzf76wnrr3ho1rkwh4n4.jpg" alt="rough idea for roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-and-css"&gt;
  &lt;/a&gt;
  HTML and CSS
&lt;/h4&gt;

&lt;p&gt;Next, let's continue with programming languages. And let's start off by talking about Responsive Websites.&lt;/p&gt;

&lt;p&gt;Responsive websites are sites that look good and are usable on all devices or screen sizes. You probably know how important it is to build a responsive website, as people use so many different devices these days.&lt;/p&gt;

&lt;p&gt;So let's jump to the first two languages that you need to know to build a website: HTML and CSS.&lt;/p&gt;

&lt;p&gt;HTML stands for Hypertext Markup Language. It it is used to build the skeleton for your website. HTML is not difficult to learn, but you might want to pay more attention to HTML forms as they will be fundamental in the future.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css-stands-for-cascading-style-sheets-this-is-a-markup-language-but-i-also-consider-it-to-be-a-programming-language-css-is-not-necessarily-difficult-to-learn-but-its-difficult-to-master"&gt;
  &lt;/a&gt;
  CSS stands for Cascading Style Sheets. This is a markup language but I also consider it to be a programming language. CSS is not necessarily difficult to learn but it's difficult to master.
&lt;/h6&gt;

&lt;p&gt;There are few topics that you want to pay more attention to like:&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Box model&lt;/strong&gt; - how margins, padding, and borders work together.&lt;br&gt;
• &lt;strong&gt;CSS units&lt;/strong&gt; - used for expressing lengths (e.g: rem, vh, and vw).&lt;br&gt;
• &lt;strong&gt;Position&lt;/strong&gt; - specifies the type of positioning method. It also confuses many people so make sure you spend some time on it.&lt;br&gt;
• &lt;strong&gt;Variables&lt;/strong&gt; - or Custom properties are entities that can be reused throughout a document. This is my favorite feature in CSS. They make working with CSS so enjoyable and you can create themes with just a few lines of code.&lt;br&gt;
• &lt;strong&gt;Media query&lt;/strong&gt; - decides what to show on different screen sizes. They are a key component of responsive design.&lt;br&gt;
• &lt;strong&gt;Animation&lt;/strong&gt; - lets an element change from one style to another. If you know how to use animation correctly, it makes your site stand out. Otherwise, it will make your website look unprofessional, so be careful.&lt;br&gt;
• &lt;strong&gt;Flexbox, CSS Grid&lt;/strong&gt; - used for building Responsive layouts (I forgot to mention this in the video).&lt;/p&gt;

&lt;p&gt;When you know the basics of HTML and CSS, the next step is to build some basic websites. For example, you can try a Homepage, a Form like a login page or a checkout page. You can even build a Portfolio. You can find example projects on DevChallenges.io.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#website-deployment"&gt;
  &lt;/a&gt;
  Website deployment
&lt;/h4&gt;

&lt;p&gt;Once you have your website, you need to put it on the internet, so people can see it. Deployment is the process of deploying your code to a hosting platform.&lt;/p&gt;

&lt;p&gt;Back in the day it was a lot more difficult to do. But now, it's super easy and you can use tools like GitHub Pages, Netlify, or Vercel.&lt;/p&gt;

&lt;p&gt;Here's a full YouTube course on how to get your site online that covers the entire process from start to finish.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#javascript-fundamentals"&gt;
  &lt;/a&gt;
  JavaScript - Fundamentals
&lt;/h5&gt;

&lt;p&gt;Alright, the next topic is JavaScript. JavaScript is a popular programming language and is widely used for Web Development, among other things.&lt;/p&gt;

&lt;p&gt;You will need to learn some of the basic features of the language like Data Types, Loops, and Conditionals.&lt;/p&gt;

&lt;p&gt;Then there are topics that you will want to dive deeper into.&lt;/p&gt;

&lt;p&gt;First, we have debugging. This is the process of finding and fixing errors. Here's a great in-depth guide to bug squashing to get you started.&lt;/p&gt;

&lt;p&gt;Then there are other topics like Objects, Primitives, and Arrays. Especially when working with Arrays, you need to know about Array methods as well.&lt;/p&gt;

&lt;p&gt;Functions are the main building blocks in your program. So make sure that you don't overlook them.&lt;/p&gt;

&lt;p&gt;One of my favorite features in JavaScript is &lt;strong&gt;de-structuring&lt;/strong&gt; – it is easy to write and makes the language super powerful.&lt;/p&gt;

&lt;p&gt;And no matter how good you are with programming, you will have errors in your scripts. This means you'll want to know about Error handling as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous programming&lt;/strong&gt; is important, especially when you need to communicate with the server. So spend some time learning about Promises and &lt;strong&gt;Async/Await&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#javascript-browser"&gt;
  &lt;/a&gt;
  JavaScript - Browser
&lt;/h5&gt;

&lt;p&gt;Let's move on to how JavaScript is used in the browser.&lt;/p&gt;

&lt;p&gt;First, you need to know what a Document Object Model or DOM is. Then you need to know how to get elements, how to change the classes, or how to change the style with JavaScript.&lt;/p&gt;

&lt;p&gt;After that you have to introduced with JS DOM (Document Object Model)&lt;/p&gt;

&lt;p&gt;You also need to learn about different User Interface Events like click, mouse over, mouse down, and so on.&lt;/p&gt;

&lt;p&gt;And, you'll also want to pay more attention to Forms in JavaScript as they have many events and properties&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript-other-features"&gt;
  &lt;/a&gt;
  JavaScript - Other features
&lt;/h4&gt;

&lt;p&gt;The Fetch API is an important topic. It lets you send network requests to servers. This is useful, for example, when we need to submit a form or get a user's information.&lt;/p&gt;

&lt;p&gt;Another important topic is Storing Data in the browser. Here you need to know what the differences are between &lt;strong&gt;Cookies&lt;/strong&gt;, &lt;strong&gt;LocalStorage&lt;/strong&gt;, and &lt;strong&gt;sessionStorage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other less important topics when you are just getting started are &lt;strong&gt;Regular expressions&lt;/strong&gt;, &lt;strong&gt;Web Components&lt;/strong&gt;, and &lt;strong&gt;Websockets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Regular expressions are used to search and replace text. Web Components, are a new thing but you should totally check them out.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#lastly-we-have-websockets-they-are-useful-when-you-need-to-have-continuous-data-exchanges-like-in-chat-applications"&gt;
  &lt;/a&gt;
  Lastly, we have Websockets. They are useful when you need to have continuous data exchanges like in chat applications.
&lt;/h6&gt;

&lt;p&gt;So after learning Javascript, you might want to spend some time to learn about TypeScript. I love TypeScript as it gives me a safe feeling while writing code.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#typescript-provides-static-typing-that-allows-you-to-catch-errors-earlier-in-the-debugging-process-it-also-saves-your-time-as-it-finds-bugs-before-the-code-runs"&gt;
  &lt;/a&gt;
  TypeScript provides static typing, that allows you to catch errors earlier in the debugging process. It also saves your time as it finds bugs before the code runs.
&lt;/h6&gt;

&lt;p&gt;Here's a helpful post on TypeScript types to help you think about them the right way.&lt;/p&gt;

&lt;p&gt;You can stop here and start working on some projects. But personally, I would continue by learning at least one framework. Then you can practice JavaScript at the same time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to publish packages to npm</title>
      <author>Clément Gaudinière</author>
      <pubDate>Sun, 13 Jun 2021 11:04:13 +0000</pubDate>
      <link>https://dev.to/clementgaudiniere/how-to-publish-packages-to-npm-dg</link>
      <guid>https://dev.to/clementgaudiniere/how-to-publish-packages-to-npm-dg</guid>
      <description>&lt;p&gt;Hello everyone, have you ever created a project that should be accessible to all and quickly ? Fortunately, thanks to the npm package system, you can download any package in one command line. Today in this tutorial I'm going to show you how to publish your package to npm, so that it's available to everyone. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The first thing you will need is to have Node.js installed on your machine. To do this, go to the official Node.js website, and download the &lt;a href="https://nodejs.org/en/"&gt;latest version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The second thing you will need is an npm account. If you don't have one, you can create one for free on this page: &lt;a href="https://www.npmjs.com/signup"&gt;https://www.npmjs.com/signup&lt;/a&gt;. This step is essential as you can only publish packages if you are logged in. Once you have created your account, and validated your email address (required), memorize your username and password.&lt;/p&gt;

&lt;p&gt;Once this is done, you are ready to go !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publish-to-npm"&gt;
  &lt;/a&gt;
  Publish to npm
&lt;/h2&gt;

&lt;p&gt;Often, when we publish a package on npm, it is on a GitHub repository. In our example, we will imagine that the GitHub package is called: example-package, and is available at this address : &lt;a href="https://github.com/user/exemple-package"&gt;https://github.com/user/exemple-package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go to your project folder, and open a command prompt. In this one, enter &lt;code&gt;npm login&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm login
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then enter your npm username (that's why you had to remember it) and your password. Don't worry, if you don't see the number of characters in the password, it's perfectly normal (linuxians know).&lt;/p&gt;

&lt;p&gt;Now you will have to create a file named package.json, to do this you can use the following command : &lt;code&gt;npm init&lt;/code&gt;. It allows you to fill in all the necessary fields from the command prompt.  Be careful though, the package name must be unique, so you may not be able to choose a package name that is already taken. Then enter the version or click on enter, then the description, etc.  For the git repository, you enter the url of your repository, in my case, it is &lt;a href="https://github.com/user/exemple-package"&gt;https://github.com/user/exemple-package&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm init
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this step is complete, you can check your package.json file to see if everything is in order.&lt;/p&gt;

&lt;p&gt;Now it's the big moment, you are ready to publish your package on the npm network with the magic command : &lt;code&gt;npm publish&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm publish
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test if your package is on the npm network, by going into an empty folder and running the command &lt;code&gt;npm install [name]&lt;/code&gt; in my case, this gives: &lt;code&gt;npm install example-package&lt;/code&gt;. If any files appear in your folder, it has worked. Packages are often found in a folder called &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope this tutorial has helped you publish your own package on the NPM network. If you have any questions, don't hesitate to ask them in the comments. See you next time for another tutorial. 👍&lt;/p&gt;

</description>
      <category>node</category>
      <category>github</category>
      <category>npm</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you need variable fonts?</title>
      <author>Julien Maury</author>
      <pubDate>Sun, 13 Jun 2021 11:03:16 +0000</pubDate>
      <link>https://dev.to/jmau111/do-you-need-variable-fonts-5dh4</link>
      <guid>https://dev.to/jmau111/do-you-need-variable-fonts-5dh4</guid>
      <description>&lt;p&gt;The history of fonts begins long before digital technology (centuries ago). At that time, people use several frames of metal letters to print long pages of text.&lt;/p&gt;

&lt;p&gt;With digital fonts, you have a large choice of free and paid resources to style your pages. The challenge is to choose the right fonts for the right design, though.&lt;/p&gt;

&lt;p&gt;In any case, without this wide variety of typefaces and fonts, the web would be the most boring place in the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Most people use terms such as "fonts" and "typefaces" interchangeably, and I'll do the same in this post, even if it's not the same thing. &lt;/p&gt;

&lt;p&gt;It makes sense, though, especially with variable typefaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digital-fonts-in-short"&gt;
  &lt;/a&gt;
  Digital fonts in short
&lt;/h2&gt;

&lt;p&gt;Anyone can use digital fonts. There are multiple ways to customize fonts, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.cssfontstack.com/"&gt;pre-installed fonts&lt;/a&gt; (via the operating system)&lt;/li&gt;
&lt;li&gt;self-hosted fonts via the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face"&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google font embeds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;N.B.: note that Google allows you now to download its fonts if you want to self-host them, and if you care about performances, you should consider this option&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-fontface-endraw-css-at-rule"&gt;
  &lt;/a&gt;
  The &lt;code&gt;@font-face&lt;/code&gt; CSS at rule
&lt;/h2&gt;

&lt;p&gt;The modern way to declare self-hosted fonts is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyFancyFont"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/fancyfont.woff2')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="sx"&gt;url('path/to/fancyfont.woff')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need support for ancient browsers, you can extend it with TrueType (ttf) and Embedded OpenType (eot) formats. The browser takes the first rule it understands. That's why we write the WOFF2 version first. WOFF is a format with a specific compression algorithm.&lt;/p&gt;

&lt;p&gt;Once you've done that, you can use &lt;code&gt;MyFancyFont&lt;/code&gt; in your CSS, for example, with the &lt;code&gt;font-family&lt;/code&gt; and the &lt;code&gt;font-weight&lt;/code&gt; properties to style HTML elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyFancyFont"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that your source files &lt;strong&gt;MUST be compatible&lt;/strong&gt; with all variations (fonts) you use in your CSS. Otherwise, you might get entire "unstyled" areas in your web pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-variable-fonts"&gt;
  &lt;/a&gt;
  What are variable fonts
&lt;/h2&gt;

&lt;p&gt;OpenType Variable fonts are now &lt;a href="https://caniuse.com/variable-fonts"&gt;supported in most browsers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While a classic font provides a specific variation only, a variable font can give all possible styles and weights in a single file.&lt;/p&gt;

&lt;p&gt;This approach is pretty convenient for styling as there's only one file to load, and everything works (styles, weights, sizes).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B.: after some researches for this post, I learned there could be two files actually, but it's not more than that&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I sometimes read it's excellent for performances. It does have an impact as loading one single file, even if it's larger than a classic font file, is still smaller than loading nine or ten classic font files.&lt;/p&gt;

&lt;p&gt;However, if you use HTTP2, you care less about the number of HTTP requests as all static files get loaded in parallel, and the expected performance gain might not happen.&lt;/p&gt;

&lt;p&gt;Anyway, it's beneficial if you use many variations (many fonts), but convenience and flexibility are stronger arguments in favor of variable fonts, IMHO.&lt;/p&gt;

&lt;p&gt;Variable fonts contain all possible permutations, so you get everything you need to style all HTML elements.&lt;/p&gt;

&lt;p&gt;Here is a CSS example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyVariableFont"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('path/to/myvariablefont.woff2')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff2'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
      &lt;span class="sx"&gt;url('path/to/myvariablefont.woff')&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"MyVariableFont"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;900&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.italic&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'ital'&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;font-variation-settings&lt;/code&gt; is not the only property you can use. You can visit &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide"&gt;MDN - variable fonts&lt;/a&gt; to get details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-of-axes"&gt;
  &lt;/a&gt;
  The concept of "axes"
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Axes&lt;/strong&gt; are ranges for specific aspects of the typeface. For example, weight, width, and optical size are called &lt;strong&gt;registered axes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the weight axis, you control the lightness or the heaviness. The width defines whether letters are condensed or extended. The optical size allows for varying the overall stroke thickness of letterforms based on physical size.&lt;/p&gt;

&lt;p&gt;There are slant and italic axes too. They allow for tuning the angle of the letterforms.&lt;/p&gt;

&lt;p&gt;The font developer can also define &lt;strong&gt;custom axes&lt;/strong&gt; with a four-letter identifier. This way, you can call this custom variation in your CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.myelement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*BIRD had no particular meaning here, it's just four letters*/&lt;/span&gt;
  &lt;span class="py"&gt;font-variation-settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'wght'&lt;/span&gt; &lt;span class="m"&gt;350&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;'BIRD'&lt;/span&gt; &lt;span class="m"&gt;777&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is to customize the typeface accurately to get the best result in terms of readability, legibility, and aesthetics, without the hassle of loading one file per each variation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide"&gt;Source: MDN - variable fonts&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h2&gt;

&lt;p&gt;Let's answer the central question: "Do you need it?"&lt;/p&gt;

&lt;p&gt;In short, if you don't have a complex design to code that needs many variations of the same typefaces, it makes less sense to use variable fonts. Besides, the performance gain in terms of loading is not guaranteed.&lt;/p&gt;

&lt;p&gt;It doesn't do evil, and it's quite an exciting feature, but be aware it only makes a difference when there are many variations involved.&lt;/p&gt;

&lt;p&gt;However, it could have a significant impact on accessibility. It's not something I read everywhere, but I think that's a critical point.&lt;/p&gt;

&lt;p&gt;Variable fonts allow for improving readability and legibility. In addition, it's easier to adjust the font size, weight, and many properties according to the screen size and the user's preferences.&lt;/p&gt;

&lt;p&gt;This way, it's easier to adjust information density too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As it's not uncommon to have complex designs nowadays and use more than ten different weight and width combinations in a typographic system, variable fonts can save considerable time. Moreover, it provides way more flexibility than classic fonts.&lt;/p&gt;

&lt;p&gt;It's beneficial for branding, and it can also improve accessibility for the web.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@charissek?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Charisse Kenion&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/font?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
  </channel>
</rss>
