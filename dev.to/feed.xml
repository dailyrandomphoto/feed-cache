<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Symlinks and Npm</title>
      <author>Laurie</author>
      <pubDate>Mon, 14 Dec 2020 14:23:55 +0000</pubDate>
      <link>https://dev.to/laurieontech/symlinks-and-npm-3o3j</link>
      <guid>https://dev.to/laurieontech/symlinks-and-npm-3o3j</guid>
      <description>&lt;p&gt;Symlink is a phrase you'll hear a lot in relation to local development. But it applies in a number of situations and it's a helpful JavaScript concept to understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-symlink" class="anchor"&gt;
  &lt;/a&gt;
  What is a symlink
&lt;/h2&gt;

&lt;p&gt;A symlink is a reference to a file or folder. Think of it like an alias. If I typically want to access &lt;code&gt;../../../dir/laurie.js&lt;/code&gt;, I can use a symlink so that I only have to reference &lt;code&gt;laurie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In most cases, a symlink is operating as a shortcut. But technically the name could be longer than the path, so alias is more accurate. Then again, if you're making the path longer I'm not entirely sure why!&lt;/p&gt;

&lt;p&gt;If that explanation doesn't work for you, &lt;a href="https://twitter.com/chrisbiscardi"&gt;@chrisbiscardi&lt;/a&gt; explains them as "symlinks make things look like they're in one place when they're actually in another", which is a good one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-works-on-my-machine" class="anchor"&gt;
  &lt;/a&gt;
  It works on my machine
&lt;/h2&gt;

&lt;p&gt;You can create a symlink in your local file system. So that you don't have to remember the file path to that random executable.&lt;/p&gt;

&lt;p&gt;You can do that by running the &lt;code&gt;ln&lt;/code&gt; command in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; /path/to/target.js linked-target.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can do the same thing with directories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; /this/is/a/nested/proj/ /proj/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you set a symbolic link, that information is available at that path in your filesystem.&lt;/p&gt;

&lt;p&gt;Note that the link can be &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;name.js&lt;/code&gt;, whatever you want. However, in most cases you'll see links set with the extension intact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packages" class="anchor"&gt;
  &lt;/a&gt;
  Packages
&lt;/h2&gt;

&lt;p&gt;Symlinks are incredibly powerful ways to provide shortcuts in your filesystem. So the question becomes, can you use them to alter other people's filesystem? The answer is, kinda!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm" class="anchor"&gt;
  &lt;/a&gt;
  Npm
&lt;/h3&gt;

&lt;p&gt;So how is this enabled? There are a few different ways. A &lt;code&gt;postinstall&lt;/code&gt; script, or the &lt;code&gt;bin&lt;/code&gt; field in your package.json file.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#postinstall" class="anchor"&gt;
  &lt;/a&gt;
  post-install
&lt;/h4&gt;

&lt;p&gt;If you've read my &lt;a href="https://laurieontech.com/posts/package-json/"&gt;package.json post&lt;/a&gt; you know that there are some reserved script keys. &lt;code&gt;postinstall&lt;/code&gt; is one of those keys.&lt;/p&gt;

&lt;p&gt;It's a lifecycle script and it runs after the package has been installed. Therefore, you could use it to define something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"postinstall"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ln -s ../ ./node_modules/my-thing"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this symlink, a user can &lt;code&gt;require(my-thing)&lt;/code&gt; and gain access to the root of the project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bin" class="anchor"&gt;
  &lt;/a&gt;
  bin
&lt;/h4&gt;

&lt;p&gt;Going back to that &lt;a href="https://laurieontech.com/posts/package-json/"&gt;package.json post&lt;/a&gt; again there is a section on &lt;code&gt;bin&lt;/code&gt;. I talk about how it facilitates commands users can run directly with &lt;code&gt;npx&lt;/code&gt;. And that's true! But it's all because of symlinks, which is the true power of the &lt;code&gt;bin&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;The commands defined in &lt;code&gt;bin&lt;/code&gt; are symlinks to executables. If a user runs the command using &lt;code&gt;npx&lt;/code&gt;, the executable runs without having to install the package. But what if the user does install the package?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#local-install" class="anchor"&gt;
  &lt;/a&gt;
  Local install
&lt;/h4&gt;

&lt;p&gt;If a user installs your package in a project, the package gets downloaded into their &lt;code&gt;node_modules&lt;/code&gt;. From then on, the symlink is pointing to a relative path inside &lt;code&gt;node_modules&lt;/code&gt;. That means that a user can run the executable it points to, or reference it as an import, as long as they're in the original directory.&lt;/p&gt;

&lt;p&gt;If they aren't, it won't work. Because &lt;code&gt;./node_modules&lt;/code&gt; will no longer resolve.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#global-install" class="anchor"&gt;
  &lt;/a&gt;
  Global install
&lt;/h4&gt;

&lt;p&gt;Conversely, some packages are meant to be installed globally in your operating system, using a &lt;code&gt;-g&lt;/code&gt; flag. When that happens, the symlinks are available globally, as they were in the &lt;code&gt;ln&lt;/code&gt; local machine example.&lt;/p&gt;

&lt;p&gt;This means that you can use the symlink to run that executable no matter where you are in the filesystem. It's globally available rather than being relative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-thats-it" class="anchor"&gt;
  &lt;/a&gt;
  And that's it
&lt;/h2&gt;

&lt;p&gt;Symlinks are a powerful tool and learning about them helps us understand a lot about the command line tools and import paths we use.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>All about Vue.js</title>
      <author>ABailey92</author>
      <pubDate>Mon, 14 Dec 2020 14:13:38 +0000</pubDate>
      <link>https://dev.to/abailey92/all-about-vue-js-2a35</link>
      <guid>https://dev.to/abailey92/all-about-vue-js-2a35</guid>
      <description>&lt;p&gt;If you've been studying JavaScript, chances are you've come across a few frameworks. Most people are familiar with Angular and React, in this blog I will tell you about the pros and cons of Vue.js&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-first-thing-first-what-is-vuejs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Okay, first thing first: What is Vue.js?&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;According to vuejs.org&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Vue.js is a progressive framework for JavaScript used to build web interfaces and single page applications&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vue was created by Evan You and uses "high decoupling", which allows developers to progressively create user interfaces. Vue is often called the "combination of React and Angular" because it uses concepts such as directives and components to control and show UIs. Once small advantage that Vue has over React is that Vue has the ability to control HTML that has already been rendered by the server. Anyway, I promised pros and cons so here are pros and cons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-pros" class="anchor"&gt;
  &lt;/a&gt;
  The Pros
&lt;/h4&gt;

&lt;p&gt;In 2019 Vue became the second most loved framework. The main reasons for this are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Size, because it is so small Vue is very fast to download and also positively impact your SEO and UX.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility, Vue is flexible and scalable. This means that it can be used for a huge SPA as well as used for a smaller component that will be integrated using a different technology such as React or Angular. Since the backend is build with JavaScript it can be added to existing applications with no problem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Useful conventions, Vue helps developers avoid writing a lot of boilerplate code by enforcing effort-saving conventions. These include native support for things like animations, state management, and composing components. It's important to note that even things like classnames are essentially built into Vue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Easy to learn, most developers say that the learning curve for Vue is not very steep, and for most developers it will be the easiest framework to learn. Vue has excellent documentation to fit every developer's needs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#the-cons" class="anchor"&gt;
  &lt;/a&gt;
  The Cons
&lt;/h4&gt;

&lt;p&gt;Like all good things in life, there are some cons to consider, especially some to consider if, like myself, you learned React first. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Templates, The biggest feature of Vue.js is by the template syntax to write interfaces. A lot of developers state that the template syntax adds a layer of abstraction between what is written and what is displayed in the browser. Having to keep in mind that Vue.js templates are not simply JavaScript does add a layer of complexity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Events, In Vue children must use events as a way to communicate to parent components. If you are used to react it's a lot different then just passing props down from the parent component to children.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smaller community, Because Vue is still relatively new and still evolving it's not as popular as React or angular. Since it is evolving so fast many tutorials you find online may be outdated and if you find yourself stuck on a problem it may take quite some time to find a solution. For smaller projects this isn't as much of an issue, but this problem rears its ugly head when working on larger projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#so-should-i-try-it" class="anchor"&gt;
  &lt;/a&gt;
  So should I try it?
&lt;/h3&gt;

&lt;p&gt;Vue is pretty popular when it comes to creating beautiful SPA's. There are plenty of other frameworks that can accomplish this as well. I would definitely suggest using Vue for smaller scale projects and since you can probably learn it in a weekend I would suggest that you look into it after reading this blog.&lt;/p&gt;

&lt;p&gt;Check it out here  &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How a single priority makes your tech team more productive</title>
      <author>Victoria Drake</author>
      <pubDate>Mon, 14 Dec 2020 13:01:25 +0000</pubDate>
      <link>https://dev.to/victoria/how-a-single-priority-makes-your-tech-team-more-productive-1dfk</link>
      <guid>https://dev.to/victoria/how-a-single-priority-makes-your-tech-team-more-productive-1dfk</guid>
      <description>&lt;p&gt;Whether you’re leading a team of people or leading yourself, it’s important to take account of all the important things that need doing in your organization. This does not mean that everything can be equally important.&lt;/p&gt;

&lt;p&gt;Logically, everything can’t be. Tasks are typically interdependent, and there’s always one task on which another depends. Tasks can be time-sensitive. Certain tasks might block a logical path towards a goal.&lt;/p&gt;

&lt;p&gt;It’s the duty of a leader to make hard calls and decide which tasks are most important out of everything that needs doing. This necessitates comparing one to another, which is much easier to do with a centralized to-do list.&lt;/p&gt;

&lt;p&gt;Here’s how this one simple change to your perspective on to-do lists can help to build happier and more productive teams.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-a-central-prioritized-todo-list" class="anchor"&gt;
  &lt;/a&gt;
  Keep a central prioritized to-do list
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GC90lcb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/prioritize.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GC90lcb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/prioritize.png" alt="A cartoon of a stick figure swinging on a rope ro plant a post-it note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Avoid working in silos. A single centralized list can make it easier for you and your team members to see what’s being worked on. With all tasks out in the open, it’s easier for people to spot opportunities for helping each other out and where they can contribute.&lt;/p&gt;

&lt;p&gt;Encouraging a culture of openness can help people feel more comfortable asking questions, asking for help, and proposing ideas and improvements. Tracking work in the open also means that no one is left wondering what status a task is currently in.&lt;/p&gt;

&lt;p&gt;For team leaders, a single list makes it easier to compare and prioritize tasks. This benefits team members by providing a completely unambiguous and transparent accounting of what needs doing next. Whichever task is most important, for the whole organization, is on top.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#priorities-with-autonomy" class="anchor"&gt;
  &lt;/a&gt;
  Priorities with autonomy
&lt;/h2&gt;

&lt;p&gt;A single priority doesn’t necessarily pigeonhole someone into doing a task they don’t feel cut out for. Each member of your team has different strengths, skill sets, and diverse ways of thinking. You can take full advantage of this by encouraging autonomy in task selection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RL3IcJMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/task-selection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RL3IcJMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/task-selection.png" alt="A cartoon of a stick figure climbing a ladder to reach a post-it note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have people choose whichever task is nearest to the top that they’d like to tackle. They might pick the highest priority task that’s in their wheelhouse, or experiment with a higher one that’s in a domain they’d like to improve their skills at.&lt;/p&gt;

&lt;p&gt;Embrace opportunities for cross-training. If tasks high up on the list fall in a category that only one or a few people on your team are experts in, have your experts partner up with another team member who’s taking on the task. By pooling your resources to cross-train across domains, you multiply the capabilities of each team member and your team as a result.&lt;/p&gt;

&lt;p&gt;When a task is especially time-sensitive, have several team members swarm on it and distribute the work according to their interests or strengths.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-yourself-redundant" class="anchor"&gt;
  &lt;/a&gt;
  Make yourself redundant
&lt;/h2&gt;

&lt;p&gt;Working off a single prioritized to-do list works best when your team members can take on tasks as independently as possible. This is especially important in remote teams where people work asynchronously.&lt;/p&gt;

&lt;p&gt;If you’re a leader and find that your team members frequently ask you what they should do next, you could be making your team dependent on you. Ask yourself if you’re unnecessarily gatekeeping information that would let your team be more autonomous.&lt;/p&gt;

&lt;p&gt;A team that overly depends on their leader is not an efficient one. Individual people, such as yourself, don’t scale. Don’t become a bottleneck to your team’s productivity. A successful leader should be able to take several days off on short notice without productivity grinding to a halt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoWejbIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/add-resources.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoWejbIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://victoria.dev/blog/how-a-single-priority-makes-your-tech-team-more-productive/add-resources.png" alt="A cartoon of a stick figure carrying books to a wall of post-it notes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To support your team’s ability to work without you, make your team, product, and company goals &lt;em&gt;painfully&lt;/em&gt; available. Put them where people hang out – your team’s message board, chat channel, or document repository, for example. No one should be at a loss when asked what the team wants to achieve next, and why.&lt;/p&gt;

&lt;p&gt;Make any applicable resources, style guides, product documents, or links to external documentation painfully available as well. If your team makes a decision about how something should be done, write it down. Don’t rely on yours or anyone else’s meat brain to remember an important decision, nor make yourself the only resource for recalling it.&lt;/p&gt;

&lt;p&gt;Make yourself redundant when it comes to day-to-day work. Doing so empowers your team members to do work without you, think through solutions on their own, and propose paths of action that you probably wouldn’t have thought of yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-happier-and-more-productive-teams" class="anchor"&gt;
  &lt;/a&gt;
  Build happier and more productive teams
&lt;/h2&gt;

&lt;p&gt;From first-hand experience as both a team member and leader, I’ve seen how encouraging a culture of openness, cross-training, and autonomy makes for happier team members and more productive teams. A single prioritized to-do list, coupled with available documentation and resources, opens the gates to let your technical team be maximally productive.&lt;/p&gt;

&lt;p&gt;By removing bottlenecks, you allow people to make more decisions on their own and take ownership of their work. That’s a technical team I’d be proud to lead.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I'd love to know. Join the thousands of people who learn along with me on &lt;a href="https://victoria.dev/"&gt;victoria.dev&lt;/a&gt;! Visit or &lt;a href="https://victoria.dev/index.xml"&gt;subscribe via RSS&lt;/a&gt; for more about building happy and productive technical teams.&lt;/p&gt;

</description>
      <category>leadership</category>
    </item>
    <item>
      <title>How to Improve Lighthouse Score - Performance</title>
      <author>Linda</author>
      <pubDate>Mon, 14 Dec 2020 12:54:38 +0000</pubDate>
      <link>https://dev.to/lindaojo/how-to-improve-lighthouse-score-performance-57cb</link>
      <guid>https://dev.to/lindaojo/how-to-improve-lighthouse-score-performance-57cb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3H174jKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1607603313/Performance_f1zvh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3H174jKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/lindaojo/image/upload/v1607603313/Performance_f1zvh8.png" alt="Lighthouse performance score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the final article of the lighthouse series, I hope you enjoyed this series as much as I did. You can check out other Lighthouse articles below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.lindaojo.com/blog/how-to-improve-lighthouse-score-search-engine-optimization-seo/" rel="noopener"&gt; How to Improve Lighthouse Score - Search Engine Optimization (SEO)&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.lindaojo.com/blog/how-to-improve-lighthouse-score-accessibility/" rel="noopener"&gt; How to Improve Lighthouse Score -Accessibility&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.lindaojo.com/blog/how-to-improve-lighthouse-score-best-practices/" rel="noopener"&gt; How to Improve Lighthouse Score - Best Practices &lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Don't know how to check your website's Lighthouse score? No problem, use this article &lt;a class="link" href="https://www.lindaojo.com/blog/how-to-check-lighthouse-scores-on-chrome-or-firefox/" rel="noopener"&gt;How to Check Lighthouse Scores using Chrome or Firefox&lt;/a&gt; as a guide.&lt;/p&gt;

&lt;h3&gt;Eliminate render-blocking resources&lt;/h3&gt;

&lt;p&gt;Render-blocking resources are either scripts or stylesheets.&lt;/p&gt;

&lt;p&gt;Use the Coverage tab in Chrome DevTools to identify non-critical CSS and JavaScript. When you load or run a page, the tab tells you how much code was used.&lt;/p&gt;

&lt;p&gt;Press &lt;strong&gt;Control+Shift+P&lt;/strong&gt; or &lt;strong&gt;Command+Shift+P (Mac)&lt;/strong&gt; and search "Show Coverage" to open the Coverage Tab shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--McyyL5m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2qu98lbu290y20jclf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--McyyL5m9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2qu98lbu290y20jclf.png" alt="Low Contrast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coverage measures the code used to render the present page, not the whole website. So just because a set of code is unused on your page does not mean it is totally useless.&lt;/p&gt;

&lt;h4&gt;- Remove render blocking scripts&lt;/h4&gt;

&lt;p&gt;Avoid importing scripts in the head section of your HTML.&lt;/p&gt;

&lt;p&gt;Place scripts that impact the render of the page at the end of the body (before the body closure).&lt;/p&gt;

&lt;p&gt;If a script is critical (marked partially or totally red) and must be placed in the head section, mark the script with async or defer attributes as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With async, the file gets downloaded asynchronously and then executed as soon as it’s downloaded.&lt;/p&gt;

&lt;p&gt;With defer, the file gets downloaded asynchronously but executed only when the document parsing is completed. Deferred scripts will execute in the same order as they are called.&lt;/p&gt;

&lt;h4&gt;- Remove render blocking stylesheets&lt;/h4&gt;

&lt;p&gt;Remove render-blocking stylesheets by preloading them. Suppose your page loads in the order below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;index.html
|--main.js
   |--styles.css
   |--animation.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Main.js runs then styles.css and animation.js are downloaded. The page doesn't appear complete until those last 2 resources are downloaded, parsed, and executed. The order can be changed by preloading links in your HTML. This instructs the browser to download key resources as soon as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"style"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"animation.js"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Avoid importing large 3rd party libraries within head tag&lt;/h3&gt;

&lt;p&gt;For instance instead of setting up font-awesome icons in the head of your html as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"path/to/font-awesome/css/font-awesome.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could use SVG icons instead, they are light and you don't have to install a library containing thousands of icons when you are just using 25. Font Awesome also lets you download the SVG versions of icons. It's a win-win situation.&lt;/p&gt;

&lt;h3&gt;Use CDNs for images to optimize images&lt;/h3&gt;

&lt;p&gt;CDN stands for Content Delivery Network. Using an image CDN, such as  &lt;a href="https://cloudinary.com/" rel="noopener" class="link"&gt;Cloudinary&lt;/a&gt; can significantly reduce the latency of your image delivery. Switching to an image CDN can yield a 40–80% savings in image file size.&lt;/p&gt;

&lt;p&gt;An image URL indicates not only which image to load, but also parameters like size, format, and quality. The code snippet below displays an image using a Cloudinary image link&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://res.cloudinary.com/lindaojo/image/upload/v1607603313/Performance_f1zvh8.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"lighthouse performance report"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Use improved image formats such as Webp&lt;/h3&gt;

&lt;p&gt;New image formats such as &lt;a href="https://developers.google.com/speed/webp" rel="noopener" class="link"&gt;Webp&lt;/a&gt; are lightweight yet of great quality. Even though it is not supported by all browsers yet. You could use Webp images along with a fallback image as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Angela's cat, Bandit"&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"images/cat.webp"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Angela's cat, Bandit"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/team/cat.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Remove unused CSS&lt;/h3&gt;

&lt;p&gt;Removing unused CSS from your production builds for maximum performance.&lt;br&gt;
When you are building a website, you might decide to use a CSS framework like TailwindCSS, Bootstrap, MaterializeCSS, etc... But you will only use a small set of the framework, and a lot of unused CSS styles will be included.&lt;/p&gt;

&lt;p&gt;You could use a tool like PurgeCSS to remove the excesses. PurgeCSS analyzes your content and your CSS files. Then it matches the selectors used in your files with the ones in your content files. It removes unused selectors from your CSS, resulting in smaller CSS files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://purgecss.com/#table-of-contents" rel="noopener" class="link"&gt;Get started with Purge CSS&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Minify CSS&lt;/h3&gt;

&lt;p&gt;Your CSS files usually contain unnecessary characters, such as whitespaces, comments, and indentation. In production, these characters can be removed to reduce CSS file size without changing how the browser processes the styles. This ensures that you are sending the smallest possible bundle to your users.&lt;/p&gt;

&lt;p&gt;You can minimise your CSS using &lt;a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin" rel="noopener" class="link"&gt;optimize-css-assets-webpack-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tips above will definitely give your lighthouse performance score the boost that it deserves.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>lighthouse</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Stop mutating in map, reduce and forEach</title>
      <author>Stephan Meijer</author>
      <pubDate>Mon, 14 Dec 2020 11:49:41 +0000</pubDate>
      <link>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</link>
      <guid>https://dev.to/smeijer/stop-mutating-in-map-reduce-and-foreach-58bf</guid>
      <description>&lt;p&gt;There are plenty of articles that will try to convince you that you should use the &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; methods. Less of them mention &lt;code&gt;forEach&lt;/code&gt;, and not many of them mention the more traditional for loops as serious alternative. Or when to use &lt;code&gt;map&lt;/code&gt; over &lt;code&gt;reduce&lt;/code&gt; or especially &lt;code&gt;forEach&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Programming is mostly about opinions and (maybe a bit too much) about something that we like to call "common sense". In this article, I'm sharing my opinion, and write about the functions and the problem of side effects (mutating). Triggered by &lt;a href="https://twitter.com/erikras/status/1338415676709605376?s=20"&gt;this tweet of Erik Rasmussen&lt;/a&gt; today, and experience from the past. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykWfu637--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EpMA69KXcAAWXqT.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--owyvu4UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1239587498344566784/1BxVOYSi_normal.jpg" alt="Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Erik Rasmussen 👨🏻‍💻🇺🇸🇪🇸
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/erikras"&gt;@erikras&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      'sup Opinionated Dev Twitter!&lt;br&gt;&lt;br&gt;I'm doing a code review and came across this structure. Mutating the items in a map() call feels very wrong. It feels like it should be a reduce(), but then you're creating another array. forEach() would require additional lines.&lt;br&gt;&lt;br&gt;What say you? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:28 AM - 14 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      3
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338415676709605376" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I still remember this change I requested during a code review. It grew among the team, and was even discussed during the next retrospective. PR #1069, July 18, 2019, author &lt;em&gt;unimportant&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// eslint-disable-line no-unused-expressions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;My request was to change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A little background, &lt;code&gt;path&lt;/code&gt; is a &lt;code&gt;string[]&lt;/code&gt;, and &lt;code&gt;checkID&lt;/code&gt; does some validations on that string to see if it's a id-like value. If not, it will throw an error.&lt;/p&gt;

&lt;p&gt;Why my change request, and why mention it in the retro? There is no law against calling methods in the map function, or throwing from within it. It was just that it doesn't match with my expectations. And I still believe I'm in my rights there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  Map
&lt;/h1&gt;

&lt;p&gt;My expectations for &lt;code&gt;map&lt;/code&gt; is that it "maps" one value to another. Like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is an input value (&lt;code&gt;[1, 2, 3]&lt;/code&gt;), map does something with it, and returns an entirely new value. &lt;code&gt;input !== output&lt;/code&gt; and my expectation is that whenever an array value changed, it doesn't match the previous value either. In other words I expect that at least for one element &lt;code&gt;input[n] !== output[n]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're also able to extract the callback function so that we end up with a pure, testable function. My expectation from a &lt;code&gt;map&lt;/code&gt; call, is always that it is side effect free. No exceptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expectations" class="anchor"&gt;
  &lt;/a&gt;
  Expectations
&lt;/h2&gt;

&lt;p&gt;Now let's take that example from Erik&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And build some code around this, so it get's a bit easier to work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How do you now feel about mutating the item objects inside that &lt;code&gt;map&lt;/code&gt;? When you look at the small snippet from Erik, you might be ok with it. But after extracting that callback function, I hope it starts to feel wrong. If you don't see the problem I'm trying to highlight, try answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what does &lt;code&gt;items[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;newItems[0]&lt;/code&gt; look like?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items === newItems&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;items[0] === newItems[0]&lt;/code&gt; return?&lt;/li&gt;
&lt;li&gt;do these answers match your expectations?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#foreach" class="anchor"&gt;
  &lt;/a&gt;
  forEach
&lt;/h1&gt;

&lt;p&gt;Not let's simply change that map call to a &lt;code&gt;forEach&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addUserId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What does this do with your expectations? Did it change anything?&lt;/p&gt;

&lt;p&gt;Whenever I see a &lt;code&gt;forEach&lt;/code&gt;, I expect side effects. Something is being done for (or to) each value in the array. The fact that forEach doesn't have a return value, strengthens this feeling.&lt;/p&gt;

&lt;p&gt;And this is entirely personal, but I stopped using the functional forEach calls to mutate the objects as well. I'm still okay with a &lt;code&gt;forEach(sideEffect)&lt;/code&gt; but I won't use it to mutate values. I'm using the &lt;code&gt;for of&lt;/code&gt; loops for that, as I find it easier to recognize them as causing mutations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please compare that to the original, and feel free to share your thoughts in the comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reduce" class="anchor"&gt;
  &lt;/a&gt;
  Reduce
&lt;/h1&gt;

&lt;p&gt;Some would say that &lt;code&gt;reduce&lt;/code&gt; is meant for mutating values. In my opinion, they're wrong. Reduce is meant for when the shape of the container changes. Think conversions between objects and arrays, or even collections to strings and numbers. Or a change of length of the array. Reduce is more about changing the shape of the entire collection, then it's about changing the shape of individual entries. For that, we have &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One clear purpose I see for reduce, is when you feel the need to use both &lt;code&gt;filter&lt;/code&gt; as well as &lt;code&gt;map&lt;/code&gt;. Reduce is able to combine those two, and spare you that extra iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The difference here is that &lt;code&gt;reduce&lt;/code&gt; only walks the array a single time, whereas the &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; combo walks the array two times. For 5 entries, this isn't a big deal. For larger lists, &lt;del&gt;it might&lt;/del&gt; it's no big deal either. &lt;em&gt;(I thought it was, but &lt;a href="https://dev.to/aprillion/comment/196j9"&gt;I was wrong&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That being said, for this specific example, I do feel that the &lt;code&gt;filter().map()&lt;/code&gt; is easier to read. And with that, we are back to the "common sense" issue. Programming isn't all black and white. We can't document, spec, or lint every single rule or choice that we have to make. Use what feels best and take your time to consider the alternatives.&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>development</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Ten Tips for How YOU Can Make Your Workplace Friendlier for Women</title>
      <author>Anna "Apero" McDougall 🏳️‍🌈</author>
      <pubDate>Mon, 14 Dec 2020 11:09:44 +0000</pubDate>
      <link>https://dev.to/annajmcdougall/ten-tips-for-how-you-can-make-your-workplace-friendlier-for-women-4pko</link>
      <guid>https://dev.to/annajmcdougall/ten-tips-for-how-you-can-make-your-workplace-friendlier-for-women-4pko</guid>
      <description>&lt;p&gt;Friends, let's talk. &lt;/p&gt;

&lt;p&gt;It has been a hard year for everyone, and something that happens in hard years is that we have less patience for little annoyances because all our energy is spent keeping... &lt;em&gt;/gestures at everything/&lt;/em&gt; at bay. &lt;/p&gt;

&lt;p&gt;So I've been seeing more and more women in tech, who normally put up with all kinds of little pieces of everyday sexism, start to crack. They're starting to wonder if tech is right for them, if everything companies say are just designed to keep them quiet, and to question how they can "be the change" while still keeping themselves sane in environments where they feel unwelcome and sometimes under active attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is not aimed at those women.&lt;/strong&gt; They've had enough of people telling them how they can adjust their attitudes, or (almost worse) pointless platitudes of how they've "got this". None of that solves the problem. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is also not aimed at any men looking for some feminist boogeyman to rail against.&lt;/strong&gt; Sorry to disappoint you, but I'm just trying to make everyone nicer to each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This piece is for the male colleagues and managers out there who want to help but don't know what they can do to make the workplace more friendly for women.&lt;/strong&gt; Let me help you help this industry to become better. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ten-tips-for-making-your-workplace-friendlier-to-women" class="anchor"&gt;
  &lt;/a&gt;
  Ten Tips for Making Your Workplace Friendlier to Women
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(P.S. Yes I will turn this into a talk for your next conference, just ask.)&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Don't interrupt:&lt;/strong&gt; So you think you don't interrupt women? OK, the next time you talk to a woman, especially in the workplace, try to be really conscious of it and see if you catch yourself about to do it. If you don't: great! Congratulations! Now, listen to others and if you notice a colleague doing the interrupting, maybe drop a "Hey I don't think Sarah was done just yet... sorry Sarah what were you saying?".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lift up women's voices and take an active interest in them:&lt;/strong&gt; Along similar lines, try to notice when women's opinions are being dismissed too soon or not considered in a way which would happen for a male counterpart. In some really bad workplace cultures, you might notice women not speaking up much at all: most likely, they have learned it is pointless. Make an effort to talk to them &lt;strong&gt;after&lt;/strong&gt; the meeting and pick their brains: Do they agree with the conclusion which was reached? Do they think there was anything missed? Sometimes a 1-on-1 chat with a friendly colleague is less intimidating than a room full of people who don't look like you and treat you as either a token or an annoyance (...or both). Doing this in a meeting could seem confrontational rather than friendly and interested, so these conversations are best had individually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Understand that you don't understand:&lt;/strong&gt; If are not a woman, then you don't understand what it's like to be a woman in the workplace. For one thing, most of us have developed an instinct for when someone is just a generally condescending person vs when they are being condescending because of our gender. It is hard to understand, especially if you're not a minority of any kind, because you haven't felt it. That's OK: you might not 'get it' and it might sound weird/paranoid to you, but that's because you haven't lived it. There is no shame in not understanding, but don't let that lack of understanding lead to a lack of believing. I don't know what it's like to be a man aiming your pee at a stain on the urinal, and it sounds ridiculous to me, but I believe y'all when you tell me it happens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't constantly bring up gender:&lt;/strong&gt; Did you know that reminding someone of negative stereotypes against them worsens their performance? It's a known phenomenon called &lt;a href="http://diversity.arizona.edu/sites/default/files/stereotype_threat_overview.pdf"&gt;stereotype threat&lt;/a&gt;. I know how it seems to you: "I'm lifting her up! Pointing out that she's got it, despite being the only woman on our team!". It is not lifting her up, it is reminding her that she is alone and that there is an implicit expectation that she will do poorly. Calling her a pioneer or a trailblazer is probably historically inaccurate, slightly patronising (she's just doing her job, after all...), and also puts a lot of pressure on her. Ever read &lt;a href="https://xkcd.com/385/"&gt;this xkcd comic&lt;/a&gt;? You're doing the same thing in reverse. The woman you work with is not responsible for representing all women everywhere, and putting that on her makes her less likely to be ready to admit mistakes, learn, and grow. At the same time, she's more likely to make those mistakes because she wants to be perfect so she can "prove" that women aren't shit at tech. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Actively compliment women's skills:&lt;/strong&gt; Anyone who has followed me for a while &lt;a href="https://dev.to/annajmcdougall/how-to-give-good-compliments-4ggl"&gt;knows that I'm a big fan of giving genuine compliments to &lt;em&gt;everyone&lt;/em&gt;&lt;/a&gt;, but it is especially important for women to know that they are being recognised for their skills, results, and technical knowledge, and not just for how they look. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Call out sexism when you see or hear it:&lt;/strong&gt; It is hard to be the party pooper, to be the awkward one to ruin the mood. Sorry, but you have to call out sexist talk when you hear it. It sucks. It's hard. It feels super awkward. But it is worth doing because it stamps out a culture that can fester into something truly putrid for your women colleagues. There are also many, many cases of women being pushed out of jobs for "lack of culture fit" when they speak up about these issues: so take the task off their hands. If you're not sure how, try: "Come on, you know better than that" or "Don't be that guy". If neither of these gets the point across, then try "How do you think that kind of talk makes our women colleagues feel?".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Talk openly about your salary:&lt;/strong&gt; So you're confident everyone in your workplace is being paid appropriately based on their experience? Great! Then there should be no problem talking openly about salaries. Honestly, this is a good thing for all workers regardless of gender, but if you keep this habit as you move up through the ranks you might be surprised at how different those numbers can be. Even if you believe that these differences come down to salary negotiation skills, you being open about your income could give a female colleague the push she needs to ask for what she's worth.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Give credit where credit is due, even if it hurts you:&lt;/strong&gt; I really, really hope this situation never happens to you, but if you are about to get praise for an idea that sprung from the mind of a female colleague, please do the honourable thing and say that to your manager, director, colleague, whoever is paying you the compliment. Too often, women's ideas are coopted by others and she doesn't receive the credit she's due. If somehow you end up being the benefactor, then you can be a good ally by owning up to it: even if that means your wallet might take a hit. Sure, it's not your fault someone got it wrong: but it is your fault if you don't set it right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Watch out for jokes that sting:&lt;/strong&gt; You know the kind of jokes I mean, and you can probably see the women around you tighten their lips, fidget awkwardly, or suddenly be distracted by their phones or something outside the window. Plenty of women won't say anything: that doesn't mean they're comfortable. You need to shut these jokes down. Not only is it the right thing to do, but it takes the pressure off the women in your workplace, because most likely they feel awkward about saying anything for fear of being branded a "bitch", a "nag", or "difficult". If you accidentally said a sexist joke or overstepped the lines of professionalism yourself, then the best thing you can do is to openly apologise (not just to the women, but to anyone present) and commit yourself to not doing the same again.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When you do these things, don't put it back on the women around you:&lt;/strong&gt; Listening to women's voices and opinions is not the same as forcing them to speak to others about issues of equality. Just because Miriam told you over coffee that she's sick of Jeff's jokes, that doesn't mean calling out Jeff's jokes and ending on "Right Miriam? I know you're sick of them!". Do your best not to put women into awkward positions professionally or socially. Your heart might be in the right place, but remember this is about making women feel &lt;em&gt;more&lt;/em&gt; comfortable in the workplace.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus tip: Follow women in tech on Twitter, LinkedIn, Instagram, blogs, etc.:&lt;/strong&gt; This is an easy one to do and let's face facts: you're doing it right now! Amazing! Go out of your way to find women to follow, ensure you're hearing their voices, try &lt;a href="https://us.macmillan.com/books/9781250074317"&gt;reading&lt;/a&gt; &lt;a href="https://www.penguin.co.uk/books/111/1113605/invisible-women/9781784706289.html"&gt;books&lt;/a&gt; &lt;a href="https://mitpress.mit.edu/books/data-feminism"&gt;about&lt;/a&gt; &lt;a href="https://wwnorton.com/books/Technically-Wrong/"&gt;these&lt;/a&gt; &lt;a href="https://www.penguinrandomhouse.com/books/547571/brotopia-by-emily-chang/"&gt;issues&lt;/a&gt;, and how tech is not an objective industry run by objective people working with objective data. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not sure where to find women in tech to follow on Twitter? Try starting with some of the women in this thread: &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMhZbbph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1331253167754010632/wK56ll0Y_normal.jpg" alt="Anna McDougall aka Apero profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anna McDougall aka Apero
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/annajmcdougall"&gt;@annajmcdougall&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      OK followers, it's that time again: Post your favourite &lt;a href="https://twitter.com/hashtag/WomenInTech"&gt;#WomenInTech&lt;/a&gt; and &lt;a href="https://twitter.com/hashtag/WomenWhoCode"&gt;#WomenWhoCode&lt;/a&gt; tweeters! 🥳&lt;br&gt;&lt;br&gt;I'm writing a blog post about lifting women up, and am going to refer to this thread so fire out as many as you like.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:34 PM - 13 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      28
      &lt;a href="https://twitter.com/intent/like?tweet_id=1338235894176882692" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      118
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#some-parting-words-you-have-power" class="anchor"&gt;
  &lt;/a&gt;
  Some parting words... You have power.
&lt;/h2&gt;

&lt;p&gt;If you are a man or a person of any gender in a position of power at a workplace, then your voice is going to be heard in a way that is different to a woman who is a junior developer, for example. You might say the exact same things, but where she's seen as a PITA, you're seen as 'woke' or a 'bleeding heart' or 'defending your colleagues' or similar, depending on who you ask. &lt;/p&gt;

&lt;p&gt;Please use this power for good. Back up your women colleagues, listen to them, ensure they are heard and valued for the right reasons. Don't put pressure on them to represent women everywhere. In the end, most women just want to do the work, have a good time with their colleagues, and not have to be bothered by reminders that they are still, in 2020, often stereotyped as less capable. &lt;/p&gt;

&lt;p&gt;The time has come for all of us, and particularly men, to stop saying it's all fair, and start &lt;em&gt;making sure&lt;/em&gt; it's all fair. &lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>career</category>
      <category>communication</category>
      <category>culture</category>
    </item>
    <item>
      <title>Understanding Docker: part 22 – Debugging/Troubleshooting Docker </title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 14 Dec 2020 08:33:38 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-part-22-debugging-troubleshooting-docker-5dbn</link>
      <guid>https://dev.to/aurelievache/understanding-docker-part-22-debugging-troubleshooting-docker-5dbn</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker. I think it could be a good way, more visual, to explain Docker (and other technologies like Kubernetes and Istio).&lt;/p&gt;

&lt;p&gt;We continue the series of Docker sketchnotes with a focus about how to debug and troubleshoot Docker issues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-tszoXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j33ss36uszs3pr4b2u68.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-tszoXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j33ss36uszs3pr4b2u68.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fjgoa8jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/567m4pt8xxzosy5wults.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjgoa8jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/567m4pt8xxzosy5wults.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0vFZTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdtcv6qnz3jayas4c0ym.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ss0vFZTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xdtcv6qnz3jayas4c0ym.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gOUmGJ3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/blvof49jdx9ncsak9kfu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gOUmGJ3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/blvof49jdx9ncsak9kfu.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39WuK9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da5vh8tan9ilo9ihy8kq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39WuK9Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da5vh8tan9ilo9ihy8kq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, if you like theses sketchnotes, you can follow me, and tell me what do you think. I will publish others sketchs shortly :-).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 120 pages: ["Understanding Kubernetes in a visual way"] and a sketchbook about Istio (&lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;https://gumroad.com/aurelievache#uCxcr&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Good and Bad Monolith</title>
      <author>Tomas Tulka</author>
      <pubDate>Mon, 14 Dec 2020 07:48:45 +0000</pubDate>
      <link>https://dev.to/ttulka/good-and-bad-monolith-13mh</link>
      <guid>https://dev.to/ttulka/good-and-bad-monolith-13mh</guid>
      <description>&lt;p&gt;After several years of the &lt;a href="https://blog.ttulka.com/you-are-not-gonna-need-microservices"&gt;microservice hype&lt;/a&gt;, &lt;a href="https://twitter.com/kelseyhightower/status/940259898331238402"&gt;now&lt;/a&gt; &lt;a href="https://blog.christianposta.com/microservices/istio-as-an-example-of-when-not-to-do-microservices/"&gt;it&lt;/a&gt; &lt;a href="https://www.infoq.com/news/2020/04/microservices-back-again/"&gt;seems&lt;/a&gt; monoliths are cool again! Does it mean, we have learned a lesson?&lt;/p&gt;

&lt;p&gt;I guess at least we accepted what Neal Ford stated in his book Building Evolutionary Architectures:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you can’t build a monolith, what makes you think microservices are the answer?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The disturbing question is: Why is monolith synonymous with a bad design for some and the right thing to do for others?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-kinds-of-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Two Kinds of Monolith
&lt;/h2&gt;

&lt;p&gt;The reason is, &lt;strong&gt;there are two different kinds of a monolith&lt;/strong&gt;: physical and logical. While one is mostly a good thing, the other is pure evil.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#physical-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Physical Monolith
&lt;/h3&gt;

&lt;p&gt;The first kind of monolith is what we usually picture under the word: a physical block of software, typically running as a single process.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;physically monolithic&lt;/em&gt; system is developed and built as a single artifact, deployed at once and falling down as a whole. Resources such as a database are often shared, communication is local, interprocess.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bjmcgtlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bitnxyeewfxa4zb31ac1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bjmcgtlU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bitnxyeewfxa4zb31ac1.png" alt="Monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Monolith



&lt;p&gt;The opposite is then a &lt;em&gt;distributed system&lt;/em&gt; composed of multiple physically independent components each running in its own process. Each component owns its resources and communication is done in a remote manner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BoLbxwny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6gzqi2cxnvwl6lpxk1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BoLbxwny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6gzqi2cxnvwl6lpxk1c.png" alt="Distributed system"&gt;&lt;/a&gt;&lt;/p&gt;
Distributed system



&lt;p&gt;A &lt;strong&gt;physical monolith is no anti-pattern&lt;/strong&gt;, it’s a good thing to start with as it’s easy to build, deploy, operate, and reason about.&lt;/p&gt;

&lt;p&gt;Physically monolithic applications are pretty performant as there are no additional overheads in communication. Cross-cutting aspects are much simpler because no special platform (such as a service mesh) is needed.&lt;/p&gt;

&lt;p&gt;As the system gets bigger, further partitioning is possible. A popular option is to apply a “satellite” architecture where bottleneck services are separated from the monolithic base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1W49hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgttcv26ep8x0g3sy1s5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri1W49hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mgttcv26ep8x0g3sy1s5.png" alt="Monolith with satellites"&gt;&lt;/a&gt;&lt;/p&gt;
Monolith with satellites



&lt;h3&gt;
  &lt;a href="#logical-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Logical Monolith
&lt;/h3&gt;

&lt;p&gt;The second kind is a &lt;em&gt;logically monolithic&lt;/em&gt; system. Other names are the Big ball of mud, Spaghetti code, etc. Logically monolithic codebases lack boundaries (technologies are not service boundaries!), everything is coupled to everything, no visible architecture is to be found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D54qOLJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olbyql5bzbf9zvbjgx20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D54qOLJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/olbyql5bzbf9zvbjgx20.png" alt="Logical monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Logical monolith



&lt;p&gt;&lt;strong&gt;Logical monoliths are evil&lt;/strong&gt; and dangerous constructs that cause high complexity and tight coupling of building blocks making development expensive and error-prone.&lt;/p&gt;

&lt;p&gt;Logically monolithic software is unmaintainable on a scale and exponentially corrodes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modular-and-distributed-monoliths" class="anchor"&gt;
  &lt;/a&gt;
  Modular and Distributed Monoliths
&lt;/h2&gt;

&lt;p&gt;Doing things right or very wrong, you can end up with two types of systems: modular or distributed monolith, respectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modular-monolith-modulith" class="anchor"&gt;
  &lt;/a&gt;
  Modular Monolith (Modulith)
&lt;/h3&gt;

&lt;p&gt;The opposite of a logical monolith is a &lt;em&gt;modular monolith&lt;/em&gt; (or, if you like, &lt;em&gt;modulith&lt;/em&gt;). In a modular codebase business capabilities are worked out by services with explicit logical (not necessarily physical) boundaries.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;modular monolith is probably the best architectural approach&lt;/strong&gt; for most applications. It's easy to extend, maintain, and reason about.&lt;/p&gt;

&lt;p&gt;That is, moduliths are really cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--is5fryYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe2oazeo9hi8ha5pd96c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--is5fryYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fe2oazeo9hi8ha5pd96c.png" alt="Modular monolith (modulith)"&gt;&lt;/a&gt;&lt;/p&gt;
Modular monolith (modulith)



&lt;p&gt;Although the logical and physical natures of monoliths are independent, they often come hand in hand. That’s why people easily confuse them with each other.&lt;/p&gt;

&lt;p&gt;As the boundaries in monolithic codebases are typically not physical it’s easy to cross them. A monolithic codebase, therefore, requires great discipline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distributed-monolith" class="anchor"&gt;
  &lt;/a&gt;
  Distributed Monolith
&lt;/h3&gt;

&lt;p&gt;A logically, but not physically, monolithic system is called a &lt;em&gt;distributed monolith&lt;/em&gt;. Distributed monoliths have all drawbacks of distributed systems with almost no benefits.&lt;/p&gt;

&lt;p&gt;While dealing with the Big ball of mud is pain, &lt;strong&gt;distributed monoliths are a real disaster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ela-BSuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5j0ndorua3fc6trt7lsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ela-BSuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5j0ndorua3fc6trt7lsk.png" alt="Distributed monolith"&gt;&lt;/a&gt;&lt;/p&gt;
Distributed monolith



&lt;p&gt;Systems often end up as distributed monoliths while adapting the microservices approach incorrectly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-microservices-to-monolith" class="anchor"&gt;
  &lt;/a&gt;
  From Microservices to Monolith
&lt;/h2&gt;

&lt;p&gt;The microservices movement in the last years promised us a lot. The catch is, &lt;strong&gt;microservices focus only on physical monoliths&lt;/strong&gt;, not the logical ones.&lt;/p&gt;

&lt;p&gt;To understand why we have to take a closer look at what microservices really attempt to solve.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;microservice&lt;/em&gt; is a service with some technical additions (independent development cycle). It is important to notice the word “technical” — as the logically monolithic design is obviously a logical, not technical, issue, there is nothing microservices could potentially do for us!&lt;/p&gt;

&lt;p&gt;Microservices propose a solution to tackle physical monoliths only. That’s the reason so many attempts to build microservices failed badly, simply because a wrong issue was addressed and the true problem got only bigger (and, even worse, distributed).&lt;/p&gt;

&lt;p&gt;With the logically monolithic design, microservices don’t come to the rescue, rather, to put down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services-first" class="anchor"&gt;
  &lt;/a&gt;
  Services First
&lt;/h2&gt;

&lt;p&gt;We can think of microservices as a specific approach to Service-oriented architecture (SOA).&lt;/p&gt;

&lt;p&gt;There are several definitions of SOA, but we will focus mainly on the concept of a service, because it is the most significant. I use this modified service definition from &lt;a href="http://udidahan.com/2010/11/15/the-known-unknowns-of-soa/"&gt;Udi Dahan&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A service is the autonomous unit of logic for a specific business capability.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, it is obvious why microservices as such can’t really help us with the logically monolithic design: monolithically designed microservices are no services at all, they are mere physical components!&lt;/p&gt;

&lt;p&gt;The business only has the key to &lt;a href="https://blog.ttulka.com/colored-services"&gt;defining our services&lt;/a&gt; correctly. And &lt;strong&gt;only well-designed services can tackle logical monoliths&lt;/strong&gt; and profit from the microservices approach.&lt;/p&gt;

&lt;p&gt;It’s a hard task, but Domain-driven design can help us a lot!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you struggle with your monolithic system, the problem may likely lie in its logically monolithic design.&lt;/p&gt;

&lt;p&gt;The physical nature of the monolith is usually a secondary problem, easy to solve after the proper service-oriented design has been applied.&lt;/p&gt;

&lt;p&gt;Once the logical monolith is resolved, microservices architecture is just one step further...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9x4QjpI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9opzmn8nlg59p8y49jor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9x4QjpI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9opzmn8nlg59p8y49jor.png" alt="Types of systems by physical and logical architecture"&gt;&lt;/a&gt;&lt;/p&gt;
Types of systems by physical and logical architecture






&lt;p&gt;Originally published on &lt;a href="https://blog.ttulka.com/good-and-bad-monolith"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>computerscience</category>
      <category>microservices</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started with the new Bootstrap 5 Beta and NextJS</title>
      <author>Dan Walsh</author>
      <pubDate>Mon, 14 Dec 2020 07:28:34 +0000</pubDate>
      <link>https://dev.to/danwalsh/getting-started-with-the-new-bootstrap-5-beta-and-nextjs-51am</link>
      <guid>https://dev.to/danwalsh/getting-started-with-the-new-bootstrap-5-beta-and-nextjs-51am</guid>
      <description>&lt;p&gt;With the &lt;a href="https://blog.getbootstrap.com/2020/12/07/bootstrap-5-beta-1/"&gt;recent release of Bootstrap 5 Beta 1&lt;/a&gt;, now is a great time to dip your toes into working with the new major updates and getting your tools ready for when the final release drops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-project-%F0%9F%97%82" class="anchor"&gt;
  &lt;/a&gt;
  Setting up your project 🗂
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-set-up-your-environment" class="anchor"&gt;
  &lt;/a&gt;
  1. Set up your environment 🌳
&lt;/h3&gt;

&lt;p&gt;Initialise a new npm package in your directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; parameter tells npm to accept the default answers for all options.&lt;/p&gt;

&lt;p&gt;Next, install our packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i bootstrap@next react react-dom next sass
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/bootstrap"&gt;bootstrap@next&lt;/a&gt; -- Bootstrap 5 Beta&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/react"&gt;react&lt;/a&gt; -- React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/react-dom"&gt;react-dom&lt;/a&gt; -- React DOM&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/next"&gt;next&lt;/a&gt; -- NextJS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/sass"&gt;sass&lt;/a&gt; -- SASS/SCSS preprocessor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also need to set up our scripts in &lt;code&gt;package.json&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"next start"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-add-your-scss-file" class="anchor"&gt;
  &lt;/a&gt;
  2. Add your SCSS file 👨‍🎨
&lt;/h3&gt;

&lt;p&gt;Next we need to add our SCSS folder and file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;scss
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;scss/main.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And add the following content to &lt;code&gt;scss/main.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import Bootstrap 5 Beta!&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/bootstrap.scss"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-set-up-your-pages" class="anchor"&gt;
  &lt;/a&gt;
  3. Set up your pages 📄
&lt;/h3&gt;

&lt;p&gt;We need to set up our usual index page, but also a custom App component that lives within the &lt;code&gt;/pages&lt;/code&gt; directory. This is  so we can ensure that Bootstrap 5 Beta is loaded across the entire NextJs app.&lt;/p&gt;

&lt;p&gt;Create your pages folder, the index page and custom App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;pages &lt;span class="c"&gt;# Your pages folder&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;pages/index.js &lt;span class="c"&gt;# The index page&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;pages/_app.js &lt;span class="c"&gt;# The custom App component&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;pages/index.js&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in your &lt;code&gt;pages/_app.js&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../scss/main.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point you can run &lt;code&gt;npm run dev&lt;/code&gt; in your terminal and browse to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in your web browser and you'll be greeted with the universal dev message "Hello world!".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPaqD_Ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d0nknn1l2aw7nt385ltb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPaqD_Ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d0nknn1l2aw7nt385ltb.png" alt="Screen Shot 2020-12-14 at 5.07.25 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the fun part...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#customising-bootstrap" class="anchor"&gt;
  &lt;/a&gt;
  Customising Bootstrap 🎨
&lt;/h2&gt;

&lt;p&gt;So we've got our project up and running, our dependencies are all installed and ready roll, and Bootstrap is being imported into our main SCSS file.&lt;/p&gt;

&lt;p&gt;Let's add some structure and a little content to our index page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;col&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Bootstrap&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nx"&gt;Beta&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;NextJS&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-primary me-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Read&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn btn-outline-secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;started&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will render our new content within Bootstrap's fully-responsive mobile-first grid system:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9RPHquG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6kkz6a0s5pqshvq5vsp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9RPHquG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6kkz6a0s5pqshvq5vsp3.png" alt="Screen Shot 2020-12-14 at 5.14.57 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can then override Bootstrap's SCSS variables to build our our theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Change the primary colour&lt;/span&gt;
&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;207&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;44&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Set the sans-serif font&lt;/span&gt;
&lt;span class="nv"&gt;$font-family-sans-serif&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Maybe set a difference heading font family&lt;/span&gt;
&lt;span class="nv"&gt;$headings-font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Georgia&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Make headings bolder!&lt;/span&gt;
&lt;span class="nv"&gt;$headings-font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Thicken up our borders&lt;/span&gt;
&lt;span class="nv"&gt;$border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove the border-radius everywhere&lt;/span&gt;
&lt;span class="nv"&gt;$border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Import Bootstrap 5 Beta!&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"~bootstrap/scss/bootstrap.scss"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which should give you something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CyYuchNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z15st6csc2f791sjw19y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CyYuchNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z15st6csc2f791sjw19y.png" alt="Screen Shot 2020-12-14 at 5.45.18 pm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get your next Bootstrap 5 + NextJS web app kick started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now get out there and make something beautiful!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>npm</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Quick Guide To this Keyword In JavaScript: What this Is And When</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 14 Dec 2020 07:10:01 +0000</pubDate>
      <link>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</link>
      <guid>https://dev.to/alexdevero/a-quick-guide-to-this-keyword-in-javascript-what-this-is-and-when-7i5</guid>
      <description>&lt;p&gt;Many JavaScript developers try to avoid using the &lt;code&gt;this&lt;/code&gt; keyword. One reason is that what &lt;code&gt;this&lt;/code&gt; refers to changes. This guide will help you with it. You will learn what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts. This will make it easier for you to work with it and help you predict what to expect when you use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Quick introduction
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; is a special keyword in JavaScript. There is one problem JavaScript developers struggle with when they learn about &lt;code&gt;this&lt;/code&gt;. It can have different values. It can refer to different things. What determines what &lt;code&gt;this&lt;/code&gt; refers to is context, the context at which you use it. Let's take a look at these contexts and what to expect from &lt;code&gt;this&lt;/code&gt; keyword in each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-and-sloppy-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict and sloppy mode
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are two modes or variants of JavaScript you can work with. The first one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/strict_mode"&gt;strict mode&lt;/a&gt;. The second one is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Sloppy_mode"&gt;sloppy mode&lt;/a&gt;. By default, you write your JavaScript code in a sloppy mode. This mode is more ... sloppy. It allows you to do things that would be &lt;a href="http://speakingjs.com/es5/ch07.html#strict_mode"&gt;forbidden&lt;/a&gt; in a strict mode. These things would not work.&lt;/p&gt;

&lt;p&gt;JavaScript offers you an option to switch from sloppy mode to strict mode. You can do this by using &lt;code&gt;'use strict'&lt;/code&gt; statement at the beginning of your code. Any code that follows after this statement will automatically follow the rules and restrictions of strict mode. This also includes the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-scope" class="anchor"&gt;
  &lt;/a&gt;
  Global scope
&lt;/h2&gt;

&lt;p&gt;When you are in a global scope, the &lt;code&gt;this&lt;/code&gt; keyword will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is the case at least if you are in the browser. If you are in a Node.js environment, the &lt;code&gt;this&lt;/code&gt; will refer to global object called &lt;code&gt;global&lt;/code&gt;. In a global scope, it doesn't matter if you are in a sloppy mode or a strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Global context example no.1: sloppy mode&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Global context example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;

&lt;span class="c1"&gt;// In Node.js:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;ref *1&amp;gt; Object [global] {&lt;/span&gt;
&lt;span class="c1"&gt;//   global: [Circular *1],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearInterval: [Function: clearInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearTimeout: [Function: clearTimeout],&lt;/span&gt;
&lt;span class="c1"&gt;//   setInterval: [Function: setInterval],&lt;/span&gt;
&lt;span class="c1"&gt;//   setTimeout: [Function: setTimeout] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   queueMicrotask: [Function: queueMicrotask],&lt;/span&gt;
&lt;span class="c1"&gt;//   clearImmediate: [Function: clearImmediate],&lt;/span&gt;
&lt;span class="c1"&gt;//   setImmediate: [Function: setImmediate] {&lt;/span&gt;
&lt;span class="c1"&gt;//     [Symbol(nodejs.util.promisify.custom)]: [Getter]&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions" class="anchor"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;When it comes to [functions], the mode at which you are makes a difference for the &lt;code&gt;this&lt;/code&gt; keyword. When you are in sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. Global object &lt;code&gt;global&lt;/code&gt; in Node.js. This is true even for functions declared inside another functions, in a local scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Function example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strict-mode" class="anchor"&gt;
  &lt;/a&gt;
  Strict mode
&lt;/h3&gt;

&lt;p&gt;This will change if you switch your JavaScript code to strict mode. In a strict mode, the default value of &lt;code&gt;this&lt;/code&gt; in a function is set to &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Strict mode example no.1: function in a global scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() function.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Strict mode example no.2: function in a local scope&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#immediately-invoked-function-expression-iife" class="anchor"&gt;
  &lt;/a&gt;
  Immediately Invoked Function Expression (IIFE)
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword works in IIFEs like in regular functions. In a sloppy mode, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. If you switch to a strict the value of &lt;code&gt;this&lt;/code&gt; will become &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-constructors" class="anchor"&gt;
  &lt;/a&gt;
  Function constructors
&lt;/h3&gt;

&lt;p&gt;When you want to create new functions with similar behavior you can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function"&gt;function constructor&lt;/a&gt;. This allows you to create a blueprint you can then use for your functions. If you use function constructor remember one thing. The &lt;code&gt;this&lt;/code&gt; keyword inside a constructor will refer to the instance of that constructor, not the constructor itself. This applies to both, sloppy and strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function constructors example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Function constructors example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create function constructor Person.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create joe instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create natalie instance.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;natalie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Natalie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on joe instance.&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joe',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 31,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke readPerson() method on natalie instance.&lt;/span&gt;
&lt;span class="nx"&gt;natalie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readPerson&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Natalie',&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 28,&lt;/span&gt;
&lt;span class="c1"&gt;//   readPerson: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objects-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Objects and methods
&lt;/h2&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; keyword in an object method, the result can vary. What matters is if the method is a regular function or an arrow function. You will learn about &lt;code&gt;this&lt;/code&gt; and arrow functions later. For now, let's focus on regular functions.&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;this&lt;/code&gt; in an object method, it will refer to the object itself. This is for both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Object example no.1: sloppy mode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;


&lt;span class="c1"&gt;// Object example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the readObj() method on myObj.&lt;/span&gt;
&lt;span class="nx"&gt;myObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readObj&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'Jack', age: 30, readObj: ƒ readObj() }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes" class="anchor"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.alexdevero.com/javascript-classes-pt1/"&gt;JavaScript classes&lt;/a&gt; are a newer addition to JavaScript. They are definitely one of those more discussed features. Some developers like to use them and some not. If you like using them, or want to start using them, you will like what follows. When it comes to classes, the &lt;code&gt;this&lt;/code&gt; keyword is very consistent and predictable.&lt;/p&gt;

&lt;p&gt;It doesn't matter if you are in a sloppy mode or a strict mode. If you use &lt;code&gt;this&lt;/code&gt; in a class it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Classes example no.1: with instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.2: with instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua", sayHi: ƒ}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.3: with instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {name: "Joshua"}&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.4: with instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with public property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate the Person class.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joshua&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joshua&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() on "joshua" instance.&lt;/span&gt;
&lt;span class="nx"&gt;joshua&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   sayHi: ƒ (),&lt;/span&gt;
&lt;span class="c1"&gt;//   name: 'Joshua',&lt;/span&gt;
&lt;span class="c1"&gt;//   __proto__: Person { constructor: ƒ Person() }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.5: without instantiation in sloppy mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.6: without instantiation in sloppy mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.7: without instantiation in strict mode (regular function, no binding)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi() {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Classes example no.8: without instantiation in strict mode (arrow function)&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke sayHi() method.&lt;/span&gt;
&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// class Person {&lt;/span&gt;
&lt;span class="c1"&gt;//   static name = 'Luke'&lt;/span&gt;
&lt;span class="c1"&gt;//   static sayHi = () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this)&lt;/span&gt;
&lt;span class="c1"&gt;//     console.log(this === Person)&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#event-listeners" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners
&lt;/h2&gt;

&lt;p&gt;When you use the &lt;code&gt;this&lt;/code&gt; keyword with event listeners, it will refer to the HTML element to which you attach the event listener. If you attach event listener to a button, &lt;code&gt;this&lt;/code&gt; will refer to that button element. That button will become value of &lt;code&gt;this&lt;/code&gt;. If you attach event listener to global &lt;code&gt;window&lt;/code&gt; object, &lt;code&gt;this&lt;/code&gt; will refer to the global &lt;code&gt;window&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Event listener example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;With &lt;a href="https://blog.alexdevero.com/javascript-arrow-functions/"&gt;arrow functions&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; keyword works differently than with regular functions. Arrow functions don't have their own &lt;code&gt;this&lt;/code&gt;. When you use &lt;code&gt;this&lt;/code&gt; in an arrow function it will inherit its value from its context. Context here is the context at which you defined that arrow function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-and-local-scope-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Global and local scope, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If your arrow function is in a global scope, &lt;code&gt;this&lt;/code&gt; will refer to the global object &lt;code&gt;window&lt;/code&gt;. This is true for sloppy and strict mode. It is also true if the arrow function is inside a regular function, in a sloppy mode. If you are in a strict mode, and arrow function is inside a regular function, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.1: global function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an arrow function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.2: global function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.3: local function in a sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions.&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.4: local function in a strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a regular function.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Return an arrow function.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Log the value of this.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke foo() and bar() functions&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-iifes" class="anchor"&gt;
  &lt;/a&gt;
  Arrow IIFEs
&lt;/h3&gt;

&lt;p&gt;When you use arrow function to create Immediately Invoked Function Expression (IIFE) &lt;code&gt;this&lt;/code&gt; will refer to global &lt;code&gt;window&lt;/code&gt; object. This applies to both, sloppy as well as strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow IIFE example no.1: sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow IIFE example no.2: strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Declare arrow IIFE.&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#objects-classes-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Objects, classes, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you declared your arrow function in an object, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. In case of a class, it will refer to the class itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.5: object in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare an object.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.6: object in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.7: class in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.8: class in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Declare a class with static property and method.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// Luke()&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event-listeners-this-and-arrow-functions" class="anchor"&gt;
  &lt;/a&gt;
  Event listeners, this and arrow functions
&lt;/h3&gt;

&lt;p&gt;If you use arrow function as a callback for event listener, &lt;code&gt;this&lt;/code&gt; will refer to global object &lt;code&gt;window&lt;/code&gt;. This will happen in both, sloppy and also strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Arrow function example no.9: event listener in sloppy mode&lt;/span&gt;
&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.10: event listener in strict mode&lt;/span&gt;
&lt;span class="c1"&gt;// Switch to strict mode.&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Find button in the DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow function example no.11: event listener on window&lt;/span&gt;
&lt;span class="c1"&gt;// Attach event listener to the button.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Output on click on the button:&lt;/span&gt;
&lt;span class="c1"&gt;// Window {0: Window, 1: Window, window: Window, self: Window, document: document, name: "", location: Location, …}&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-a-quick-guide-to-this-keyword-in-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: A quick guide to this keyword in JavaScript
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;this&lt;/code&gt; keyword can be sometimes confusing and unpredictable. It is no wonder some JavaScript developers don't like to use it, and even discourage it.  I hope that this tutorial helped you understand what &lt;code&gt;this&lt;/code&gt; keyword refers to in specific contexts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a Stopwatch in JavaScript</title>
      <author>GSPTeck</author>
      <pubDate>Mon, 14 Dec 2020 07:02:36 +0000</pubDate>
      <link>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</link>
      <guid>https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak</guid>
      <description>&lt;p&gt;Creating a timer is a very simple task. We will only be using variables, functions and THAT'S IT!&lt;/p&gt;

&lt;p&gt;HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;JavaScript&amp;lt;/title&amp;gt;

        &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div id="stopwatch"&amp;gt;
            00:00:00
        &amp;lt;/div&amp;gt;

        &amp;lt;ul id="buttons"&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="startTimer()"&amp;gt;Start&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;&amp;lt;button onclick="stopTimer()"&amp;gt;Stop&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;

            &amp;lt;li&amp;gt;&amp;lt;button onclick="resetTimer()"&amp;gt;Reset&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;

        &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background: #202020;
    color: white;
}
button {
    width: 100px;
    height: 30px;
    border: 3px soldi white;
    border-radius: 50px;
    background: #202020;
    color: white;
    cursor: pointer;
    outline: none;
}

#stopwatch {
    font-size: 100px;
    position: absolute;
    top: 45%;
    left: 50%;
    transform: translate(-50%, -55%);
}
#buttons {
    position: absolute;
    top: 55%;
    left: 48.4%;
    transform: translate(-51.6%, -45%);
}
#buttons li {
    display: inline;
    padding-left: 10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;JavaScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const timer = document.getElementById('stopwatch');

var hr = 0;
var min = 0;
var sec = 0;
var stoptime = true;

function startTimer() {
  if (stoptime == true) {
        stoptime = false;
        timerCycle();
    }
}
function stopTimer() {
  if (stoptime == false) {
    stoptime = true;
  }
}

function timerCycle() {
    if (stoptime == false) {
    sec = parseInt(sec);
    min = parseInt(min);
    hr = parseInt(hr);

    sec = sec + 1;

    if (sec == 60) {
      min = min + 1;
      sec = 0;
    }
    if (min == 60) {
      hr = hr + 1;
      min = 0;
      sec = 0;
    }

    if (sec &amp;lt; 10 || sec == 0) {
      sec = '0' + sec;
    }
    if (min &amp;lt; 10 || min == 0) {
      min = '0' + min;
    }
    if (hr &amp;lt; 10 || hr == 0) {
      hr = '0' + hr;
    }

    timer.innerHTML = hr + ':' + min + ':' + sec;

    setTimeout("timerCycle()", 1000);
  }
}

function resetTimer() {
    timer.innerHTML = '00:00:00';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Final Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W9yVtc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ghxigfl5hoxttuvo4aw8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Naturally it works. Tested it myself 😉)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer-in-the-code-you-may-notice-its-called-a-timer-and-not-stopwatch-thats-because-timer-is-shorter-than-stopwatch-and-i-dont-feel-like-having-to-type-that-all-the-time-" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer! In the code you may notice it's called a 'timer' and not 'stopwatch', that's because 'timer' is shorter than 'stopwatch' and I don't feel like having to type that all the time 😂.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;const timer = document.getElementById('stopwatch');&lt;/code&gt; imports the timer 'div' as a variable, using it's id, so we can modify it as we wish.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var hr = 0; var min = 0; var sec = 0;&lt;/code&gt; we are creating the hour, minute and second variables and we are declaring that their initial value is 0.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;var stoptime = true;&lt;/code&gt; we create a variable so we can then verify if the stopwatch is running or not.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == true) { stoptime = false; timerCycle(); }&lt;/code&gt; if the stopwatch is not running, turn it on and go to the &lt;code&gt;timerCycle()&lt;/code&gt; function. (This only runs if we click the 'Start' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) { stoptime = true; }&lt;/code&gt; if  the stopwatch is running, turn it off. (This only runs if we click the 'Stop' button)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (stoptime == false) {&lt;/code&gt; verify that the stopwatch is on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = parseInt(sec); min = parseInt(min); hr = parseInt(hr);&lt;/code&gt; these are used to parse a string into an integer. (if we have 1045 as a string and we want to use it as an integer, we parse it)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sec = sec + 1;&lt;/code&gt; add 1 to seconds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (sec == 60) {&lt;/code&gt; if seconds are equal to 60, minutes = 1 and seconds becomes 0 again.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if (min == 60) {&lt;/code&gt; if minutes are equal to 60, hours = 1 and seconds + minutes becomes 0 again.&lt;/li&gt;
&lt;li&gt;Fun part:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (sec &amp;lt; 10 || sec == 0) {
   sec = '0' + sec;
}
if (min &amp;lt; 10 || min == 0) {
   min = '0' + min;
}
if (hr &amp;lt; 10 || hr == 0) {
   hr = '0' + hr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If seconds, minutes and/or hours are lower than 10, add a 0 in front. This is why we need to parse everything in the beginning: doing this operation they become strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = hr + ':' + min + ':' + sec;&lt;/code&gt; add these values to the 'timer' div.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setTimeout("timerCycle()", 1000);&lt;/code&gt; this will make sure there is a timeout of 1000 ms (1s) before repeating the 'timerCycle()'.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timer.innerHTML = '00:00:00';&lt;/code&gt; used to reset the timer to 00:00:00&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#and-were-done" class="anchor"&gt;
  &lt;/a&gt;
  AND WE'RE DONE!
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Authentication and JWT in Node.js</title>
      <author>EidorianAvi</author>
      <pubDate>Mon, 14 Dec 2020 02:49:56 +0000</pubDate>
      <link>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</link>
      <guid>https://dev.to/eidorianavi/authentication-and-jwt-in-node-js-4i13</guid>
      <description>&lt;p&gt;Alright so this week I'm going to continue working with node. This one should be pretty short and sweet but I'd like to cover how to build out a login request and how to produce a token for verification in the front end. Let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-required" class="anchor"&gt;
  &lt;/a&gt;
  What's required
&lt;/h3&gt;

&lt;p&gt;So for our form of authentication I'm going to be using Bcrypt and a JWT. What are those you ask? I'm glad you asked.&lt;/p&gt;

&lt;p&gt;Bcrypt: A function that uses an algorithm to hash passwords. This is important for user security because if someone were to gain access to your database and the passwords are not hashed the users credentials are compromised.&lt;/p&gt;

&lt;p&gt;JWT: JWT stands for JSON Web Token. It is a standard for authentication in applications. Upon a successful login the server sends a JWT to the client as proof of verification. Think of this as the ticket for a user to gain access to gated content or personal content. &lt;/p&gt;

&lt;p&gt;Now that we know what the pieces of the puzzle we will be using are lets go ahead and install them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install bcrypt jsonwebtoken
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once they're installed go ahead and require them in whatever file you will be applying authentication to. I will be doing it in my users route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-it-out" class="anchor"&gt;
  &lt;/a&gt;
  Build it out
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-hashed-password" class="anchor"&gt;
  &lt;/a&gt;
  Creating a Hashed Password
&lt;/h3&gt;

&lt;p&gt;So the first thing I'd like to handle is making sure when a user signs up we don't store their password in our database as is, that's just not cool. We have to hash it first. That's where bcrypt comes in. It will not only hash a password for us but it will also help verify hashed passwords.&lt;/p&gt;

&lt;p&gt;Here is what my creating a user function will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/add-user', async (req, res) =&amp;gt; {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);

        const user = new User({
            username: req.body.username,
            password: hashedPassword,
        });
        const savedUser = await user.save();
        res.json(savedUser);
    } catch(e) {
        res.json({ message: "Error"});
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So let's break that down. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We created an async post request to our users route for adding a new user.&lt;/li&gt;
&lt;li&gt;Since it is an async function we handle it within a try/catch block.&lt;/li&gt;
&lt;li&gt;In the try block we create a hashedPassword constant and let bcrypt create a hashed password. It takes in the password from the request as well as the amount of saltRounds, we set that to 10 which I believe is the default. This is asynchronous so use an await.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sidenote: Salt is used in cryptography. It is random data to mix in with the core data to ensure improbability of replication&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once we have used bcrypt to create a hashed password we continue like a general post request. Create a user instance with the username and the newly created hashed password instead of the request password.&lt;/li&gt;
&lt;li&gt;Save this new user instance with the hashed password.&lt;/li&gt;
&lt;li&gt;In the catch block I have it set so if there is an error it will send a response with the error in JSON format. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Awesome. Now if you make a post and create a new user and go check out the database you will see in the password parameter it is a random string. Try and decode a password from that. You can't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging-a-user-in" class="anchor"&gt;
  &lt;/a&gt;
  Logging a User In
&lt;/h3&gt;

&lt;p&gt;Alright so now that we know how create users with hashed passwords in our database let's check out how to login a user.&lt;/p&gt;

&lt;p&gt;For this portion we need Bcrypt to handle the hashed password and JWT to provide proof of successful verification. Again I do this in my users route.&lt;/p&gt;

&lt;p&gt;First thing let's create a token secret in our .env file for later. This should be a random string that's totally unpredictable you can use the web to generate one. Store it in something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TOKEN_SECRET=b91028378997c0b3581821456edefd0ec7958f953f8c1a6dd856e2de27f0d7e0fb1a01cda20d1a6890267e629f0ff5dc7ee46bce382aba62d13989614417606a
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's check out the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/login', async (req, res) =&amp;gt; {
    const user = await User.findOne({ username: req.body.username });

    try{
        const match = await bcrypt.compare(req.body.password, user.password);
        const accessToken = jwt.sign(JSON.stringify(user), process.env.TOKEN_SECRET)
        if(match){
            res.json({ accessToken: accessToken });
        } else {
            res.json({ message: "Invalid Credentials" });
        }
    } catch(e) {
        console.log(e)
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is again an async post request to our users route.&lt;/li&gt;
&lt;li&gt;First thing we can do is find a user based on their username which ideally will be unique. This is done through using findOne on our User model via mongoose as we have in a previous blog post. &lt;/li&gt;
&lt;li&gt;We create our try/catch block since again this is an async function.&lt;/li&gt;
&lt;li&gt;First in our try black we will asynchronously compare the password we received in the request to the hashed one stored in the database using bcryt.compare and passing in first the request password and then the hashed password associated with the user we stored in a constant earlier. Bcrypt will compare and handle the hashing and provide a true or false value.&lt;/li&gt;
&lt;li&gt;We will also be creating a token using JWT. We use jwt.sign() and pass in first the user data and that token secret we hid in our .env file.&lt;/li&gt;
&lt;li&gt;Set up an if block and if the match is true it will return that token in a JSON formatted response.&lt;/li&gt;
&lt;li&gt;If it is not a match it will respond with a message saying that the credentials are invalid.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should at this point be able to test out a login POST request with a previously created user. If the password and username are correct the response should provide a JWT token as proof of verification. If not you should hit the error message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;On the back-end you should now have an idea how to safely store users credentials as well as how to verify them and providing proof of verification via a JWT. Now locking content behind authentication and providing authorization is a front-end matter and something we won't be getting into today. &lt;/p&gt;

&lt;p&gt;I hope you learned something today and if you have any questions/comments please feel free to reach out. &lt;br&gt;
As always happy coding!&lt;/p&gt;

</description>
      <category>auth</category>
      <category>node</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
