<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Chatbot for your website using Dialogflow</title>
      <author>Ketan Patil</author>
      <pubDate>Sun, 27 Dec 2020 09:17:08 +0000</pubDate>
      <link>https://dev.to/ketan_patil/chatbot-for-your-website-using-dialogflow-fc7</link>
      <guid>https://dev.to/ketan_patil/chatbot-for-your-website-using-dialogflow-fc7</guid>
      <description>&lt;p&gt;Chatbot is computer program which simulates human conversation through voice or text commands.&lt;br&gt;
Now days every website contains chatbot (virtual assistant) that can be available anytime for better user experience, improve customer services, user engagement and capturing interest.&lt;/p&gt;

&lt;p&gt;We are going to use Google’s dialogflow API for developing chatbot which include Following 5 simple steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Create google project.&lt;/li&gt;
&lt;li&gt; Dialogflow setup and agent creation.&lt;/li&gt;
&lt;li&gt; Create intent (question answer tree) &lt;/li&gt;
&lt;li&gt; Integration&lt;/li&gt;
&lt;li&gt; Customization&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#1-create-google-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Create google project.
&lt;/h1&gt;

&lt;p&gt;First you need to create google project. If you already have one then you can skip this step. You can create it from &lt;a href="https://console.developers.google.com/project"&gt;here&lt;/a&gt; as below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rajbkof8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ume4c349ikce18k3z2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rajbkof8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6ume4c349ikce18k3z2b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-dialogflow-setup-and-agent-creation" class="anchor"&gt;
  &lt;/a&gt;
  2. Dialogflow setup and agent creation.
&lt;/h1&gt;

&lt;p&gt;Dialogflow is a natural language understanding platform that makes it easy to design and integrate chatbot. It is open source and free (Standard Edition).&lt;br&gt;
Go &lt;a href="https://dialogflow.cloud.google.com/"&gt;here&lt;/a&gt; and login using your gmail. After successful login you need to create agent for your chatbot using &lt;code&gt;create agent&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dB3my7in--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uaye242mwxfhmmuzeeq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dB3my7in--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/uaye242mwxfhmmuzeeq5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create new agent, type name of agent, select language and time zone, select google project ID that we created in step 1.  And create your agent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hKGHHKuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62nctn6reuzyxgum35sl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hKGHHKuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62nctn6reuzyxgum35sl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-create-intent-question-answer-tree" class="anchor"&gt;
  &lt;/a&gt;
  3. Create intent (Question answer tree)
&lt;/h1&gt;

&lt;p&gt;After agent creation, next step is to design question answer tree for chatbot. For that we need to create intent.&lt;br&gt;
When we create agent, two intent are created automatically which are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Default Fallback Intent:&lt;/strong&gt; which is use when chatbot not able to recognise user question.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Default Welcome Intent:&lt;/strong&gt; to greet user when he starts conversation with chatbot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we can change chatbot response by editing these default intents.&lt;br&gt;
To create new intent click on &lt;code&gt;CREATE INTENT&lt;/code&gt; button,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NWpAG-cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d11ugyx4bqn9lv7h10ci.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NWpAG-cR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d11ugyx4bqn9lv7h10ci.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I am creating a new intent named &lt;strong&gt;myself&lt;/strong&gt;, which will be use when user ask questions like &lt;br&gt;
&lt;em&gt;What is your name?&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Tell me about yourself?&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Who are you?&lt;/em&gt;&lt;br&gt;
In &lt;code&gt;training phrases&lt;/code&gt; field, you can add all possible questions that user can ask as below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJCxub1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ocuh9zlogxkg7gtj79oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJCxub1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ocuh9zlogxkg7gtj79oz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;responses&lt;/code&gt; field you can add response given by chatbot. We can add more than one reply to display verity of answers and to increase user interest. And click on &lt;code&gt;SAVE&lt;/code&gt; button to save the intent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EeU6DVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4joavzew3pwqpsfvxl11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EeU6DVh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4joavzew3pwqpsfvxl11.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are other fields like &lt;code&gt;contexts&lt;/code&gt;, &lt;code&gt;events&lt;/code&gt;, &lt;code&gt;action and parameters&lt;/code&gt;, &lt;code&gt;fulfilment&lt;/code&gt;. I am keeping these fields empty. You can make use of them according to your requirement. &lt;br&gt;
We can create multiple intents to build complete question answer tree.&lt;br&gt;
We can make use of test console (on right side) to test our intent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LgZh26dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g098xl3cyzhyyxihlw69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LgZh26dj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g098xl3cyzhyyxihlw69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-integration" class="anchor"&gt;
  &lt;/a&gt;
  4. Integration
&lt;/h1&gt;

&lt;p&gt;After designing question answer tree using intents, now it is time to integrate chabot with website.&lt;br&gt;
Click on integrations option from vertical navigation bar. For web integration we are going to use &lt;strong&gt;Dialogflow Messenger&lt;/strong&gt;.&lt;br&gt;
To use Dialogflow Messenger, first enable it and get integration code by clicking on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6v0804VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/356wfzfwhllbuvd685ih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6v0804VG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/356wfzfwhllbuvd685ih.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiXSQRq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e79l37gocpnd3ubb90tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiXSQRq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e79l37gocpnd3ubb90tl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy above code and paste it in your webpage html code. As below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width-device-width, initial-scale=1"&amp;gt;
    &amp;lt;!-- dialogflow style bootsrap --&amp;gt;
    &amp;lt;script src="https://www.gstatic.com/dialogflow-console/fast/messenger/bootstrap.js?v=1"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style&amp;gt;
        .text-center {
            margin: 0;
            padding:0;
            text-align: center;
            position: absolute;
            top: 50%;
            left:50%;
            transform: translateX(-50%) translateY(-50%);
        }           
    &amp;lt;/style&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;!-- center text in webpage --&amp;gt;
    &amp;lt;div class="text-center"&amp;gt;
        &amp;lt;h1&amp;gt;Chatbot Integration&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!-- This is the main code for chatbot  --&amp;gt;
    &amp;lt;!-- we can add more fields, refer: https://cloud.google.com/dialogflow/es/docs/integrations/dialogflow-messenger --&amp;gt;
    &amp;lt;df-messenger
        intent="WELCOME"
        chat-title="assistant"
        agent-id="15d0bf9a-1da9-487f-96a6-aa39f95ada63"
        language-code="en"
    &amp;gt;&amp;lt;/df-messenger&amp;gt;

&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Before running make sure to Start a local HTTP server for that page. with a specific port. (I am using apache).&lt;br&gt;
Yup!!, you can see chat widget appear in right bottom corner, test it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G43ymuVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euupbkx0n87j323fnb9c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G43ymuVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/euupbkx0n87j323fnb9c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSUWMW0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sedrq53tqpbl48muju83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSUWMW0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sedrq53tqpbl48muju83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But wait! How to customize style of chatbot?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#5-customization" class="anchor"&gt;
  &lt;/a&gt;
  5. Customization
&lt;/h1&gt;

&lt;p&gt;You can customize the style of your chatbot by setting following css variables, &lt;a href="https://cloud.google.com/dialogflow/es/docs/integrations/dialogflow-messenger"&gt;know more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBn9d4wU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n91w6d406gunxq7b5md4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBn9d4wU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n91w6d406gunxq7b5md4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
            df-messenger {
            --df-messenger-bot-message: #bdfcbf;
            --df-messenger-button-titlebar-color: #7ec472;
            --df-messenger-chat-background-color: #fafafa;
            --df-messenger-font-color: black;
            --df-messenger-send-icon: #7ec472;
            --df-messenger-user-message: #7ec472;
            }  
&amp;lt;/style&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can customize various aspects for how the chat dialog appears and behaves. The &lt;code&gt;df-messenger&lt;/code&gt; HTML element has the following attributes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTVIPlgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fz18hcaz6hc6khclfnh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTVIPlgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fz18hcaz6hc6khclfnh7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;df-messenger
        intent="WELCOME"
        chat-title="K2"
        agent-id="15d0bf9a-1da9-487f-96a6-aa39f95ada63"
        language-code="en"
&amp;gt;&amp;lt;/df-messenger&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After above css and html customization chatbot looks like,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBlgiH4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fsorjzioul11222fj7rc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBlgiH4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fsorjzioul11222fj7rc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hurrey! This way you can integrate, customize dialogflow chatbot with your own website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may face issue related to chatbot container hight like below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BabMCq79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w9ht5c3wgkmoqdy20k29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BabMCq79--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w9ht5c3wgkmoqdy20k29.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As there is no css variable mentioned in documentation to customize height, we need to add below code into head tag,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Jquery CDN --&amp;gt;
    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        //To minimise the height of chatbox
        $(document).ready(function() {
            window.addEventListener('dfMessengerLoaded', function (event) {
            $r1 = document.querySelector("df-messenger");
            $r2 = $r1.shadowRoot.querySelector("df-messenger-chat");
            $r3 = $r2.shadowRoot.querySelector("df-messenger-user-input"); //for other mods
            var sheet = new CSSStyleSheet;
            // manage box height from here
            sheet.replaceSync( `div.chat-wrapper[opened="true"] { height: 450px }`);
            $r2.shadowRoot.adoptedStyleSheets = [ sheet ];
            });
        });
    &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hope this article help you!&lt;/em&gt;&lt;br&gt;
Important links:&lt;br&gt;
&lt;a href="https://dialogflow.cloud.google.com/"&gt;Dialogflow Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloud.google.com/dialogflow/es/docs/integrations/dialogflow-messenger"&gt;CSS and HTML Customization and integration&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>dialogflow</category>
      <category>webdev</category>
      <category>chatbot</category>
    </item>
    <item>
      <title>Understanding SOLID Principles: Open Closed Principle</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 27 Dec 2020 08:50:33 +0000</pubDate>
      <link>https://dev.to/tamerlang/understanding-solid-principles-open-closed-principle-5e25</link>
      <guid>https://dev.to/tamerlang/understanding-solid-principles-open-closed-principle-5e25</guid>
      <description>&lt;p&gt;I know.&lt;/p&gt;

&lt;p&gt;Your learning SOLID to be a better programmer. &lt;/p&gt;

&lt;p&gt;But then you come across the second principle, and the first thing you read is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't understand shit, I bet you didn't either.&lt;/p&gt;

&lt;p&gt;How is the code opened and closed at the same time? Young Uncle T asked himself this question 200 years ago, nothing made sense until Dad T came to him with the knowledge of the elders that have been passed from generation to generation. Fast forward 200 years later, it's 2020 and the open-closed principle is still being explained horribly. So without further ado, this is uncle T's take on the open-closed principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What is the open closed principle?&lt;/li&gt;
&lt;li&gt;Guidelines&lt;/li&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-open-closed-principle" class="anchor"&gt;
  &lt;/a&gt;
  What is the open closed principle?
&lt;/h2&gt;

&lt;p&gt;The open-closed principle basically states that a software entity (class, module, function, etc.) should be open for extension but closed for modification. The main idea of this principle is to keep the existing code from breaking when you implement new features.&lt;/p&gt;

&lt;p&gt;A class is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Open&lt;/strong&gt; if you can extend it, and produce a subclass and do whatever you want with it—add new methods or fields, override base behavior, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Closed&lt;/strong&gt; if it's 100% ready to be used by other classes—its interface is clearly defined and won’t be changed in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was very confused when I first heard this, because the words &lt;em&gt;open &amp;amp; closed&lt;/em&gt; sound mutually exclusive. But a class can be both open (for extension) and closed (for modification) at the same time.&lt;/p&gt;

&lt;p&gt;If a class is already developed, tested, reviewed, and used in an app, trying to mess with the code is very risky. Instead of changing the code of the class directly, you can simply create a subclass and override parts of the original class that you want to behave differently or you can extend the functionality and add your own methods. You'll achieve your goal but also won't break the existing functionality of the original class.&lt;/p&gt;

&lt;p&gt;PS. This principle isn't meant to be applied to all changes. If you see a bug then go ahead and fix it; don't create a subclass for it. A subclass shouldn't be responsible for a parent's bugs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#guidelines" class="anchor"&gt;
  &lt;/a&gt;
  Guidelines
&lt;/h3&gt;

&lt;p&gt;The OCP is just a principle and not a generic solution. It describes what your entities should respect but does not provide a specific solution. In short there isn't a single way in respecting this principle. However there are some good general patterns that help us achieve this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Program by Interface, not by Implementation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What this basically means is that you should try to write your code so it uses an abstraction (abstract class or interface) instead of the implementation directly. &lt;/p&gt;

&lt;p&gt;Here's an example I got from &lt;a href="https://stackoverflow.com/questions/2697783/what-does-program-to-interfaces-not-implementations-mean"&gt;stackoverflow&lt;/a&gt; that should explain how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;English&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;German&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Spanish&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpeakerFactory&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt; &lt;span class="nf"&gt;CreateSpeaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;English&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;EnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;German&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GermanSpeaker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spanish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SpanishSpeaker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ApplicationException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No speaker can speak such language"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;STAThread&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//This is your client code.&lt;/span&gt;
    &lt;span class="n"&gt;ISpeaker&lt;/span&gt; &lt;span class="n"&gt;speaker&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SpeakerFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateSpeaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;English&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;speaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadLine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISpeaker&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EnglishSpeaker&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;EnglishSpeaker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt; &lt;span class="n"&gt;Members&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I speak English."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GermanSpeaker&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;GermanSpeaker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt; &lt;span class="n"&gt;Members&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I speak German."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpanishSpeaker&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SpanishSpeaker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;ISpeaker&lt;/span&gt; &lt;span class="n"&gt;Members&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Speak&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I speak Spanish."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;For this example we are going to build a simple calculator, should be easy.&lt;/p&gt;

&lt;p&gt;Our calculator should be able to do things as this IRL calculator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AX3vxH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ly97du6mvypavzfbc1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AX3vxH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ly97du6mvypavzfbc1d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, let's define a top-level interface for our calculator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Addition&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As of now, we only have an Addition class, we need to specify the other classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subtraction&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiplication&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Division&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let's define our main class, which will perform our operations:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Can not perform operation'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;instanceOf&lt;/span&gt; &lt;span class="nc"&gt;Addition&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;instanceOf&lt;/span&gt; &lt;span class="nc"&gt;Subtraction&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
     &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;instanceOf&lt;/span&gt; &lt;span class="nc"&gt;Multiplication&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="k"&gt;instanceOf&lt;/span&gt; &lt;span class="nc"&gt;Divison&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
           &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Can't divide by 0"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So this works, but the implementation is absolutely horrendous. This does not follow the OCP whatsoever. Now let's imagine that after some time, our clients come and demand we make our calculator scientific:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdNb7Tx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n5rhtpcrdqtk7ccndgox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdNb7Tx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n5rhtpcrdqtk7ccndgox.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do that we have to create a class for each function and then we have to add more "if-else" code. But this is a horrible way because for every new functionality we have to modify the code in the calculate() method. So we need to extract this code and put it in an abstraction layer.&lt;/p&gt;

&lt;p&gt;One solution would be to delegate each operation into their respective class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Addition&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subtraction&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Multiplication&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Divison&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
           &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Can't divide by 0"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CalculatorOperation&lt;/span&gt; &lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Can not perform operation'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$operation&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now our Calculator class is closed for modifications but open for extensions, and if we want to add more functionality then we would simply create a new class that implements the CalculatorOperation interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So let's wrap it up, I hope you at least got a better idea of the open-closed principle. It's simple once you get it or you get the "AHAAAH" moment. I would appreciate it if you left your feedback on the post because I'm still new to this. Have a nice day, and Uncle T out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/the-openclosed-principle"&gt;https://dzone.com/articles/the-openclosed-principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/java-open-closed-principle"&gt;https://www.baeldung.com/java-open-closed-principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/design-patterns"&gt;https://refactoring.guru/design-patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle"&gt;https://en.wikipedia.org/wiki/Open–closed_principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>oop</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>solid</category>
    </item>
    <item>
      <title>How Programming Languages Change How You Think</title>
      <author>Matt Eland</author>
      <pubDate>Sun, 27 Dec 2020 06:03:23 +0000</pubDate>
      <link>https://dev.to/integerman/how-programming-languages-change-how-you-think-ok1</link>
      <guid>https://dev.to/integerman/how-programming-languages-change-how-you-think-ok1</guid>
      <description>&lt;p&gt;This might be a weird article.&lt;/p&gt;

&lt;p&gt;A few years ago I saw the terrific movie “Arrival” and it changed how I look at language. A little later, I encountered F# for the first time and it changed the way I look at &lt;em&gt;programming&lt;/em&gt; &lt;em&gt;languages&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this article I’m going to walk you through the basics of some of the theories touched upon in Arrival and then pivot into the role of language in programming. We’ll compare and contrast a number of languages and see how they impact how we think about solving problems in software engineering before we do a deeper dive into the F# programming language.&lt;/p&gt;

&lt;p&gt;I told you this might be a weird article.&lt;/p&gt;




&lt;p&gt;The first half of the article will cover a wide range of languages while the second half will focus on F# and how the structure and syntax of that languages impacts our approaches to programming.&lt;/p&gt;

&lt;p&gt;This article will be of most interest to those coming in with less experience in functional programming or F#. The ideal reader will have experience with C#, Java, JavaScript, TypeScript, Python, or similar languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-impact-of-language-on-thought" class="anchor"&gt;
  &lt;/a&gt;
  The Impact of Language on Thought
&lt;/h2&gt;

&lt;p&gt;Let’s start with a brief journey into science fiction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This section contains mild spoilers on the first hour of the plot in Arrival, most of which could be gleaned from the film’s &lt;a href="https://www.youtube.com/watch?v=tFMo3UJ4B4g"&gt;trailer&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The 2016 film &lt;a href="https://en.wikipedia.org/wiki/Arrival_(film)"&gt;Arrival&lt;/a&gt; is a science fiction drama movie starring Amy Adams and Jeremy Renner. It’s the kind of movie that I love but my wife sleeps through – a slower-paced movie where a group of scientists try to communicate with aliens who have arrived over various parts of the world.&lt;/p&gt;

&lt;p&gt;The key focus of Arrival is &lt;em&gt;language&lt;/em&gt; and specifically how language impacts the way we form thoughts and even perceive reality.&lt;/p&gt;

&lt;p&gt;The aliens that the scientists encounter mainly communicate via &lt;em&gt;logograms&lt;/em&gt; containing entire sentences in a circular pattern as pictured below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZHU4n4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/i.pinimg.com/originals/89/f5/fd/89f5fd406009126a0fab3b445daf7334.jpg%3Fresize%3D364%252C364%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZHU4n4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/i.pinimg.com/originals/89/f5/fd/89f5fd406009126a0fab3b445daf7334.jpg%3Fresize%3D364%252C364%26ssl%3D1" alt="Arrival Logograms | Pattern tattoo, Tattoos, Arrival movie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a beautiful sequence roughly 55 minutes into the film where they discuss the alien language and its problems at length and it includes this quote from one of our main scientists:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If you immerse yourself into a foreign language then you can actually rewire your brain”&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;Arrival, 2016&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sequence goes on to discuss &lt;a href="https://en.wikipedia.org/wiki/Linguistic_relativity"&gt;the Sapir-Whorf hypothesis&lt;/a&gt; and if the language you speak can alter how you think or, in the case of the characters in Arrival, how they perceive reality.&lt;/p&gt;

&lt;p&gt;As you might expect, the film enters the territory of mind-bending science fiction shortly thereafter, but it’s a very good film if that’s your cup of tea.&lt;/p&gt;




&lt;p&gt;While I enjoyed the film and its concepts, it got me thinking about programming and how different _programming language_s might alter the way we think about application development.&lt;/p&gt;

&lt;p&gt;This is a thought that stuck with me and resurfaced as I delved deeper into functional programming.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-impact-of-programming-language-on-thought" class="anchor"&gt;
  &lt;/a&gt;
  The Impact of Programming Language on Thought
&lt;/h2&gt;

&lt;p&gt;Let’s take a quick tour of a few different programming languages. We’ll look at some sample code from each one and speculate at the ways of thinking that they might encourage or discourage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I am including basic information on several languages I have not extensively programmed in to offer a healthy variety of syntax. I will be relying on some speculation for these as well as my own personal experiences with the languages my knowledge and experience are deeper in.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c" class="anchor"&gt;
  &lt;/a&gt;
  C#
&lt;/h3&gt;

&lt;p&gt;C# is an &lt;em&gt;imperative&lt;/em&gt; programming language built to support object-oriented programming (OOP) with syntax inspired by C++ and Java. Like F# and Visual Basic, C# runs on .NET and can interact with other .NET programming languages.&lt;/p&gt;

&lt;p&gt;Let’s look at some sample C# code from a game project of mine from years back:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGRbcR5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-17.png%3Fresize%3D495%252C435%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGRbcR5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-17.png%3Fresize%3D495%252C435%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a class from a game context that contains an ApplyDamage method. Code flows from top to bottom and may or may not enter if statements for conditional logic before it returns a number indicating the damage dealt.&lt;/p&gt;

&lt;p&gt;This type of programming is very typical for object oriented languages despite the simplified example here and encourages the following types of behavior:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thinking about the system in terms of individual objects&lt;/li&gt;
&lt;li&gt;Focusing on if statements which may or may not need to execute&lt;/li&gt;
&lt;li&gt;Adding properties, methods, and inheritance to manage complexity as things grow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I should note here that although C# was built as an object-oriented interpreted language, it is shifting to allow the language to support functional programming approaches like F#.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;JavaScript is a function-oriented language built originally for the browser. JavaScript has since grown to support full-stack application and server development.&lt;/p&gt;

&lt;p&gt;Here’s a snippet of JavaScript code from a &lt;em&gt;different&lt;/em&gt; hobbyist game project of mine (seeing a pattern yet?):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSTi8h-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-18.png%3Fresize%3D768%252C383%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSTi8h-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-18.png%3Fresize%3D768%252C383%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This JavaScript code is similar to our C# example above in that it represents an imperative series of commands that the program will run.&lt;/p&gt;

&lt;p&gt;There are some notable differences to C#, however.&lt;/p&gt;

&lt;p&gt;Most notably, JavaScript is loosely typed. This means its variables don’t have a type defined in advance and can be reused for things of different types. Objects can have new properties dynamically added or even removed as the program runs. Functions can also be called with any number of parameters, including less than or more than the function expects.&lt;/p&gt;

&lt;p&gt;As a result, JavaScript programs tend to feel a bit more loose than strongly-typed programming languages. This additional freedom creates some unique problems which additional syntax such as the rest and spread operators (…) among others have helped alleviate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript" class="anchor"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;p&gt;I hesitate to include TypeScript since TypeScript is just a different way to generate JavaScript, but I think it’s worth discussing briefly using code from – you guessed it – a different game project of mine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIsJA2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-23.png%3Fresize%3D770%252C241%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OFIsJA2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-23.png%3Fresize%3D770%252C241%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript is really JavaScript plus some &lt;em&gt;optional&lt;/em&gt; type declarations. The TypeScript compiler takes TypeScript code and compiles it down to working JavaScript code which is then understandable by the browser.&lt;/p&gt;

&lt;p&gt;Because of this, TypeScript isn’t much different than JavaScript, but it does add type declaration statements.&lt;/p&gt;

&lt;p&gt;It turns out that type declarations are actually a pretty big deal to how you think about your code. Instead of wondering what type something is or having to rely on accurate documentation, you can now see the type declaration next to the variable or parameter. This is a nice touch, however it does have drawbacks.&lt;/p&gt;

&lt;p&gt;Because TypeScript relies on the programmer to accurately define the types, it pushes you towards types that are easy to represent via standard syntax. This in turn discourages you from passing functions around as parameters.&lt;/p&gt;

&lt;p&gt;If you were to declare a parameter that is a function that takes in a Number and returns a Boolean, that syntax is &lt;em&gt;possible&lt;/em&gt; but still difficult to remember, write, and read, so you naturally tend to do it less frequently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python" class="anchor"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;p&gt;Python is another imperative language like C# or JavaScript, but it’s syntax is notably different:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOn8Msa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-21.png%3Fresize%3D768%252C383%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOn8Msa4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-21.png%3Fresize%3D768%252C383%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code example taken from &lt;a href="https://github.com/TheAlgorithms/Python/blob/master/strings/swap_case.py"&gt;The Algorithms&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As someone who has only done bits of Python programming, I can’t speak too much to how Python changes your way of thought, except to point out how &lt;em&gt;elegant&lt;/em&gt; the syntax feels compared to other languages.&lt;/p&gt;

&lt;p&gt;It’s a very minimal style requiring indentation over brackets to define scopes. This reduces the level of noise in the code and helps you focus on the logic.&lt;/p&gt;

&lt;p&gt;In my experience, this style of minimalism causes me to emulate it with very concise functions that call out to other functions, resulting in code that is nearly as compact as F#, but significantly more readable.&lt;/p&gt;

&lt;p&gt;I also should point out a comparison to JavaScript and TypeScript with Python: Python allows you to add a &lt;a href="https://kishstats.com/python/2019/01/07/python-type-hinting.html"&gt;type hint&lt;/a&gt; if you choose to do so (and is pictured in the code above). However, this feature was added since I last worked with Python and I cannot talk much about it as a result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go" class="anchor"&gt;
  &lt;/a&gt;
  Go
&lt;/h3&gt;

&lt;p&gt;Go (also called GoLang) is a more recent development and represents another statically typed imperative programming language.&lt;/p&gt;

&lt;p&gt;Let’s look at its syntax because it’s a bit different in a few aspects beyond just where braces and brackets are placed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nxn8CZNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-22.png%3Fresize%3D768%252C416%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nxn8CZNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-22.png%3Fresize%3D768%252C416%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code example taken from &lt;a href="https://github.com/TheAlgorithms/Go/blob/master/sorts/bubblesort.go"&gt;The Algorithms&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Go has a few syntax niceties I’ve not bumped into in other languages yet.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://golangdocs.com/for-loop-in-golang"&gt;for keyword&lt;/a&gt; is much more flexible, allowing for infinite loops if needed. Additionally, Go uses := as a shorthand for &lt;em&gt;declare and assign&lt;/em&gt;, which keeps noise to a minimum. Finally, we see a quick way of swapping two values with the , and = operators.&lt;/p&gt;

&lt;p&gt;I cannot write much how Go might impact how we think about writing applications, but I’d be curious about the experiences of those of you who have worked more with Go.&lt;/p&gt;

&lt;p&gt;My initial reaction is that it takes a lot of the elegance from Python and applies it to syntax similar to C#, Java, and JavaScript’s, and I’m curious how far that additional “syntactic sugar” goes in terms of changing how you think about problem solving.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#f" class="anchor"&gt;
  &lt;/a&gt;
  F#
&lt;/h3&gt;

&lt;p&gt;Everything I’ve covered so far has primarily been an imperative programming language. F#, by contrast, is a &lt;em&gt;functional&lt;/em&gt; programming language, which relies on entirely different patterns of code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2-tjrWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-20.png%3Fresize%3D770%252C141%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2-tjrWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-20.png%3Fresize%3D770%252C141%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code example taken from &lt;a href="https://github.com/TheAlgorithms/F-Sharp/blob/main/Algorithms/Strings/CheckAnagrams.fs"&gt;The Algorithms&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;F#, like C#, is &lt;em&gt;strongly typed&lt;/em&gt; and those types are enforced by the compiler. However, more type information is &lt;em&gt;inferred&lt;/em&gt; by the F# compiler and so actual type keywords are only needed sparingly. As a result, &lt;strong&gt;F# syntax is able to work more seamlessly with complex types,&lt;/strong&gt; since the need to represent those types in syntax is significantly reduced.  &lt;/p&gt;

&lt;p&gt;F# syntax often deals with “piping” things from function to function to bring about an expected result.&lt;/p&gt;

&lt;p&gt;We’ll take a more in-depth look at F# in the next section and examine a few cases involving piping before exploring a wider range of ways its different syntax may impact how you think about problem solving in code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: F# is not the only modern functional programming language, but out of my familiarity with the F# language and the fact that this article is technically part of the community &lt;a href="https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/"&gt;F# advent 2020 series&lt;/a&gt;, we’ll zero in F# for the remainder of the article.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-languages" class="anchor"&gt;
  &lt;/a&gt;
  Other Languages
&lt;/h3&gt;

&lt;p&gt;If you’d like to look more into the syntax related to many of the currently used programming languages, I recommend you check out &lt;a href="https://github.com/TheAlgorithms"&gt;The Algorithms on GitHub&lt;/a&gt; for an open source set of examples including some other functional programming languages.&lt;/p&gt;

&lt;p&gt;I’d also love to see your thoughts on how programming languages have shaped how &lt;em&gt;you&lt;/em&gt; think about programming, so please leave a comment as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-f-changed-how-i-think-about-programming" class="anchor"&gt;
  &lt;/a&gt;
  How F# Changed How I think about Programming
&lt;/h2&gt;

&lt;p&gt;With this overview of languages aside, let’s dive deeper into the F# language and how its features change the way we approach code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#f-is-not-c" class="anchor"&gt;
  &lt;/a&gt;
  F# is not C#
&lt;/h3&gt;

&lt;p&gt;When I first tried to learn F#, it was a difficult experience for me. It was my first functional programming language and terms such as monads, partial application of functions, and higher-order functions made my journey a difficult one.&lt;/p&gt;

&lt;p&gt;Adding to that burden, as I learned F#, I was focused on “How do I write this C# code in F#?” so my first attempts at F# tried to create strong types with mutable state like you’d do in a C# program.&lt;/p&gt;

&lt;p&gt;While F# &lt;em&gt;can&lt;/em&gt; do that, it’s not what F# is about. F# isn’t about creating &lt;em&gt;classes&lt;/em&gt; with mutable state and traditional members but about writing &lt;em&gt;functions&lt;/em&gt; and composing those functions into solutions to larger problems.&lt;/p&gt;

&lt;p&gt;In object-oriented languages we focus on encapsulating logic in cohesive objects and calling methods on those objects in a specific sequence. In other words, the classes are the stars of the show and their methods help things work.&lt;/p&gt;

&lt;p&gt;F# encourages puts the focus on individual functions and pushes you towards &lt;em&gt;immutable&lt;/em&gt; state and chaining functions together. The functions are the main attraction and the types that support them are left as minimal as possible (though F#’s typing system is very powerful and flexible).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-in-terms-of-pipes" class="anchor"&gt;
  &lt;/a&gt;
  Thinking in Terms of Pipes
&lt;/h3&gt;

&lt;p&gt;When I think of F# applications, I picture a series of pipes connected to each other – each one meticulously designed to have exactly the correct output given a specific input and have no other side effects. This type of function is commonly called a &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The individual pipes (or functions) are small and highly specialized, but together they make a very capable application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jmknULv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513828583688-c52646db42da%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jmknULv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513828583688-c52646db42da%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="gray commercial machine"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@spacexuan?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Crystal Kwok&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/pipes?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;F# as a language is very good at chaining things together thanks to its &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/"&gt;specialized operators&lt;/a&gt; such as the |&amp;gt; or “pipe” operator which takes the value on the left and makes it the last parameter to the function on the right.&lt;/p&gt;

&lt;p&gt;Just looking at the presence of this one isolated operator in F# a multitude of things become easy in F# that would be harder in a language such as C#.&lt;/p&gt;




&lt;p&gt;For example, look at the following F# code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="n"&gt;watermelon&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;SliceOpen&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;RemoveSeeds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This takes whatever watermelon is and passes it as a parameter to the &lt;code&gt;SliceOpen&lt;/code&gt;function and then takes the result of that call and passes it in to the &lt;code&gt;RemoveSeeds&lt;/code&gt;function.&lt;/p&gt;

&lt;p&gt;We could simplify this further in F# by using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator to compose a &lt;code&gt;SliceAndRemoveSeeds&lt;/code&gt;function from the &lt;code&gt;SliceOpen&lt;/code&gt;and &lt;code&gt;RemoveSeeds&lt;/code&gt;functions like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nc"&gt;SliceAndRemoveSeeds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SliceOpen&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;RemoveSeeds&lt;/span&gt;
&lt;span class="n"&gt;watermelon&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;SliceAndRemoveSeeds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we wanted to do the same thing in C# code, we’d have to write the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;slicedWatermelon&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;SliceOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watermelon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;preppedWatermelon&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;RemoveSeeds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slicedWatermelon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Admittedly, we could simplify this a bit by writing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;preppedWatermelon&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;RemoveSeeds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;SliceOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;watermelon&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This &lt;em&gt;does&lt;/em&gt; work, but you can start to feel the language fighting you a little and now need to learn to read your code from the inside out. F# code is much more of a sequential and minimal syntax (though it does take some getting used to), so this kind of functional chaining code becomes more natural in F# vs C#.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameter-order" class="anchor"&gt;
  &lt;/a&gt;
  Parameter Order
&lt;/h3&gt;

&lt;p&gt;Because the pipe operator always passes in the result as the last parameter to the function it is piped into, we now need to start paying attention to the order in which we declare parameters.&lt;/p&gt;

&lt;p&gt;The pipe operator is not alone in this regard either since things like &lt;a href="https://fsharpforfunandprofit.com/posts/partial-application/"&gt;partial application of functions&lt;/a&gt; also have an impact on how you order parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nc"&gt;AddNumbers&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nc"&gt;AddTwo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AddNumbers&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;five&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AddTwo&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we define &lt;code&gt;AddTwo&lt;/code&gt;as a function that calls &lt;code&gt;AddNumbers&lt;/code&gt;with the first parameter of 2 and the second parameter unspecified. Next, we can call &lt;code&gt;AddTwo&lt;/code&gt;with a second parameter of 3 which ultimately adds 2 and 3 together.&lt;/p&gt;

&lt;p&gt;The resulting effect is a somewhat new and unusual feeling of needing to think about your parameters and understand which one ought to be last.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-order" class="anchor"&gt;
  &lt;/a&gt;
  Code Order
&lt;/h3&gt;

&lt;p&gt;The F# compiler’s intelligence comes at a cost: In F# not only do you have to pay attention to which function is defined first within a file in order for things to compile, you also need to explicitly set a compilation order for individual files inside of your project.&lt;/p&gt;

&lt;p&gt;For example, in the picture below, the &lt;code&gt;Gasses.fs&lt;/code&gt; file can reference anything in &lt;code&gt;Utils.fs&lt;/code&gt; and &lt;code&gt;Positions.fs&lt;/code&gt;, but cannot reference anything in &lt;code&gt;GameObjects.fs&lt;/code&gt; or below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AoKD4hMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-24.png%3Fresize%3D282%252C364%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoKD4hMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-24.png%3Fresize%3D282%252C364%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This process of needing to consider file and function order initially seems like an irritant. However, it has some pleasant side effects.&lt;/p&gt;

&lt;p&gt;Because functions are now order dependent it becomes impossible to create infinite loops of function A calling function B which calls function A again and your module dependencies are now much easier to visualize. The compiler effectively ensures your dependencies only flow in a specific direction. Entire tools such as &lt;a href="https://www.ndepend.com/"&gt;NDepend&lt;/a&gt; have been built around trying to enforce this concept in other codebases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intelligent-typing" class="anchor"&gt;
  &lt;/a&gt;
  Intelligent Typing
&lt;/h3&gt;

&lt;p&gt;All of these features I’ve described above are mere syntax sugar to some of F#’s true strengths, however.&lt;/p&gt;

&lt;p&gt;F# offers some truly interesting mechanisms for declaring types. Take this GameObjectType definition from a side project of mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6zRgNI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-25.png%3Fresize%3D490%252C219%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6zRgNI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-25.png%3Fresize%3D490%252C219%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is similar to a &lt;a href="https://www.youtube.com/watch?v=LUtEwh94xcA&amp;amp;t"&gt;C# enum&lt;/a&gt; but offers some additional bits of logic. Here a game object can be any number of things, but a few things have additional data associated with them. An air pipe needs to track the mixture of gasses flowing through it, for example, and a door is either going to be left to right or top to bottom in a 2D world and will either be open or closed.&lt;/p&gt;

&lt;p&gt;In an object-oriented language we might use inheritance and define subclasses for these doors and pipes, but in many cases this might be overkill – particularly when we want our focus to be on concise, reusable functions instead of powerful objects.&lt;/p&gt;

&lt;p&gt;We can then &lt;code&gt;match&lt;/code&gt;off of the object type in F#:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gv_H_p0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-26.png%3Fresize%3D770%252C153%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gv_H_p0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-26.png%3Fresize%3D770%252C153%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a case where F#’s syntax has pushed us away from inheritance and towards using an intelligent &lt;em&gt;match&lt;/em&gt; keyword and expressions to handle the various cases (with _ being a wildcard meaning anything else that didn’t match).&lt;/p&gt;

&lt;p&gt;As a result, our focus as developers remains on the functions instead of being on creating powerful types. This in turn makes us focus on how our functions &lt;em&gt;fit together&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#options-over-nulls" class="anchor"&gt;
  &lt;/a&gt;
  Options over Nulls
&lt;/h3&gt;

&lt;p&gt;Nulls have famously been called &lt;a href="https://hackernoon.com/null-the-billion-dollar-mistake-8t5z32d6"&gt;the billion dollar mistake&lt;/a&gt;. While I’m not sure I go that far, it’s worth pointing out F#’s handling of nulls to the uninitiated.&lt;/p&gt;

&lt;p&gt;Here’s a small F# function that tries to find a 2D game tile at a specific position inside of another tile layer. It will either find a tile or it won’t, and if it does, it needs to merge that tile on top of the current tile:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJKisQLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-27.png%3Fresize%3D770%252C121%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJKisQLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/killalldefects.com/wp-content/uploads/2020/12/image-27.png%3Fresize%3D770%252C121%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;F# chooses to handle nulls primarily with the &lt;em&gt;option&lt;/em&gt; type. An option is either going to be &lt;em&gt;some&lt;/em&gt; value or it’s going to be &lt;em&gt;none&lt;/em&gt;. Option could be considered to be a generic type in C# contexts and will never be null itself.&lt;/p&gt;

&lt;p&gt;The F# compiler insists that you use specific ways of getting the value out of an option and explicitly makes you handle the possibility of an option being &lt;em&gt;none&lt;/em&gt;. This forces you as a developer to explicitly handle these cases and reduces the odds of you accidentally forgetting to handle nulls.&lt;/p&gt;

&lt;p&gt;In general, F# will encourage you towards working with empty lists or options over explicit null values and the compiler slaps you in the face with things you may have forgotten. Not everyone loves a strong and opinionated compiler (trust me, I know from advocating for TypeScript in the JavaScript world), but F#’s compiler catches mistakes I didn’t even know I had, and that’s very valuable to me as a developer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It should be noted that other languages are also starting to adopt these approaches, most notably with &lt;a href="https://killalldefects.com/2019/09/13/safer-code-with-c-8-non-null-reference-types/"&gt;C# adding support for explicit null checking&lt;/a&gt; as an opt-in feature.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-f-has-to-do-with-george-orwells-1984" class="anchor"&gt;
  &lt;/a&gt;
  What F# has to do with George Orwell’s 1984
&lt;/h2&gt;

&lt;p&gt;Before we close, let’s look briefly at another work of fiction and it’s thoughts on language: George Orwell’s classic novel &lt;a href="https://en.wikipedia.org/wiki/Nineteen_Eighty-Four"&gt;1984&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--316-5c4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523981354642-fa01e6c05c77%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--316-5c4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1523981354642-fa01e6c05c77%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="1984 steel decor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@sonance?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Viktor Forgacs&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/1984?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I read this book a number of times in my youth, and one of the most striking aspects of it was language and how the “Ministry of Truth” in the book had revised speech to make undesirable concepts harder to represent. For example, words such as “bad” were replaced with things like “ungood”.&lt;/p&gt;

&lt;p&gt;It’s a striking picture and example, regardless of whether you were excited to read 1984 in school or not, and it’s come to represent how I think about the F# language.&lt;/p&gt;

&lt;p&gt;For me the key beauty of the F# programming language is that &lt;strong&gt;F# makes invalid states harder to represent&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In programming, every decision – including those made by our language designers – comes with tradeoffs. Things that are easy we tend to do and things that are harder to represent we tend to avoid.&lt;/p&gt;

&lt;p&gt;F#’s functional syntax comes with a hefty learning curve and a need to almost re-learn programming in a different context, but it does make invalid states harder to represent at the compiler level. Whether that price is worth paying is up for you and your team to decide.&lt;/p&gt;

&lt;p&gt;Additionally, not all problems &lt;em&gt;should&lt;/em&gt; be solved by a functional programming language. Most of programming is maintaining existing code and not all code has the complexity needed to necessitate functional programming languages. Some problem domains also have a lot of unique information and logic that truly does belong in types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing" class="anchor"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;Whichever programming language you choose to use in your project, it should serve your purpose and it should be a conscious decision on your part.&lt;/p&gt;

&lt;p&gt;When you start a new project ask yourself these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What does this language make easy for me?&lt;/li&gt;
&lt;li&gt;What does this language make harder?&lt;/li&gt;
&lt;li&gt;How hard is it to find or train developers who can write and maintain this language?&lt;/li&gt;
&lt;li&gt;How much training would my team need to use this language?&lt;/li&gt;
&lt;li&gt;How much support on this language can I expect from official and community channels in the future?&lt;/li&gt;
&lt;li&gt;How hard is it for me to use this code to work with other existing code our organization uses?&lt;/li&gt;
&lt;li&gt;How much does this language provide for me and what would I need to add myself?&lt;/li&gt;
&lt;li&gt;Do I like the type of code this language encourages me to write?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to start examining the tradeoffs of language choices and what patterns our languages are pushing us into, because these choices may matter more than you realize.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/"&gt;F# Advent 2020&lt;/a&gt; series. Check that series out for more articles on F# from members of the community.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The post &lt;a href="https://killalldefects.com/2020/12/27/how-programming-languages-change-how-you-think/"&gt;How Programming Languages Change How You Think&lt;/a&gt; appeared first on &lt;a href="https://killalldefects.com"&gt;Kill All Defects&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>csharp</category>
    </item>
    <item>
      <title>React Performance Optimization Tips</title>
      <author>Harsh</author>
      <pubDate>Sun, 27 Dec 2020 03:45:02 +0000</pubDate>
      <link>https://dev.to/harshdand/react-performance-optimization-tips-4238</link>
      <guid>https://dev.to/harshdand/react-performance-optimization-tips-4238</guid>
      <description>&lt;p&gt;In this post, we will look into how we can improve the performance of React apps that need to render a lot of components on the screen.&lt;/p&gt;

&lt;p&gt;We generally consider using &lt;code&gt;pagination&lt;/code&gt; or &lt;code&gt;virtualization&lt;/code&gt; for most of our apps to provide a better user experience and that works for most of the use cases, but what if we have a use case where we need to render a lot of components on the screen while not giving up on the user experience and performance. &lt;/p&gt;

&lt;p&gt;For the demonstration, I have considered a simple app that renders 10k squares on the screen, and we update the count when the squares are clicked. I am using &lt;code&gt;react 17.0.0&lt;/code&gt; and functional components with hooks.&lt;/p&gt;

&lt;p&gt;Here is the preview of the app. It has an &lt;code&gt;App&lt;/code&gt; component and a &lt;code&gt;Square&lt;/code&gt; component.  There is a noticeable lag on clicking the squares.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-perf-start.stackblitz.io/"&gt;Stackblitz Preview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackblitz.com/edit/react-perf-start?file=src/App.js"&gt;Stackblitz Editor&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/square/square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`square-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Square.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./square.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's add console statements to both the components to check if they are rendering unnecessarily and then click on one of the squares. We see the &lt;code&gt;Square&lt;/code&gt; component function is getting called 10k times.&lt;/p&gt;

&lt;p&gt;Also, we can see that &lt;code&gt;600ms&lt;/code&gt; are spent in re-rendering the UI on React Dev tools Profiler Tab. Start the profiling on page load -&amp;gt; click any square -&amp;gt; stop profiling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Y9wH4iM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qfm4q7biwo5xp0s0jh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Y9wH4iM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8qfm4q7biwo5xp0s0jh9.png" alt="Profile Screenshot showing 600ms spent for re-rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to avoid re-rendering of &lt;code&gt;Square&lt;/code&gt; component as none of the &lt;code&gt;props&lt;/code&gt; for it is changing. We will use &lt;code&gt;React.memo&lt;/code&gt; for this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-reactmemo-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;React.memo&lt;/code&gt; ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;React.memo&lt;/code&gt; is a higher order component that helps to skip the re-rendering by &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoizing&lt;/a&gt; the result of the initial render. &lt;code&gt;React.memo&lt;/code&gt; re-renders component only when the &lt;code&gt;prop&lt;/code&gt; changes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: &lt;code&gt;React.memo&lt;/code&gt; does a shallow comparison. For more control, we can pass a comparison function as below.&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nextProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// return true if the props are same, this will skip re-render&lt;/span&gt;
    &lt;span class="c1"&gt;// return false if the props have changed, will re-render&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Here is the &lt;code&gt;Square&lt;/code&gt; component with &lt;code&gt;React.memo&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Square component with React.memo&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./square.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Square&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's try to profile again with an additional setting as shown below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mdhLJKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bbwc5zjvu0btb83p5abi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mdhLJKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bbwc5zjvu0btb83p5abi.png" alt="Profile Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVYGHsIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vqakyyn9sl9snycu3ldv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVYGHsIl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vqakyyn9sl9snycu3ldv.png" alt="Profile Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We don't see any difference yet. But when we hover on the &lt;code&gt;Square&lt;/code&gt; component it shows &lt;code&gt;onClick&lt;/code&gt; prop has changed which has triggered this re-render. This happens as we are passing a new function during each render for the &lt;code&gt;onClick&lt;/code&gt; prop. To avoid this we use &lt;code&gt;useCallback&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-usecallback-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useCallback&lt;/code&gt; ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useCallback&lt;/code&gt; is a hook that returns a memoized callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App component with useCallback&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's profile again. We are now avoiding re-rendering of &lt;code&gt;Squares&lt;/code&gt; and this reduces the time to &lt;code&gt;118ms&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jULpcVvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0q4inaq5rvysnthme0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jULpcVvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j0q4inaq5rvysnthme0d.png" alt="Profile Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We see much better performance now. We are avoiding the re-rendering of &lt;code&gt;Square&lt;/code&gt; components using memoization but &lt;code&gt;React&lt;/code&gt; still needs to compare the props for all the 10k elements. Here is the component tree for our app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peAra8aO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewaawskx9wsapdslfjpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peAra8aO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ewaawskx9wsapdslfjpv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going one step further. We have 10k &lt;code&gt;Square&lt;/code&gt; elements below the &lt;code&gt;App&lt;/code&gt; component. To reduce the time React takes to compare props we need to reduce the components at this level. What can be done here? Can we introduce another layer of components? Yes, we will be splitting the list of 10k items into smaller chunks and render those by using an intermediate component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jt8ubsyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/152ge66ipvq7cfofo6tx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jt8ubsyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/152ge66ipvq7cfofo6tx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a real-world app, we can find a logical place to split the list into smaller chunks. But here let's split them into chunks of 500 Squares each.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App component&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/row/row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`square-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chunkArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chunkSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chunkSize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chunkArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Row component&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../square/square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Square&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's profile again. We do not see any lag now. We have a lot fewer &lt;code&gt;Row&lt;/code&gt; components so the prop comparison is pretty quick also React can skip &lt;code&gt;Square&lt;/code&gt; prop comparison if the &lt;code&gt;Row&lt;/code&gt; props have not changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXHqaxuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25ml6ed53b5v04mff0ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXHqaxuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/25ml6ed53b5v04mff0ny.png" alt="Profile Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the final app&lt;br&gt;
&lt;a href="https://react-perf-final.stackblitz.io/"&gt;Stackblitz Preview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackblitz.com/edit/react-perf-final?file=src/App.js"&gt;Stackblitz Editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;React.memo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt; can be used to get better performance. Does it mean we should wrap all components with &lt;code&gt;React.memo&lt;/code&gt; and all functions with &lt;code&gt;useCallback&lt;/code&gt;? &lt;strong&gt;No&lt;/strong&gt;. &lt;code&gt;React.memo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt; use memoization which adds up to the memory, also the functions themselves take time to run and have overheads like the prop comparison. The splitting that we have done adds up to the memory as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-raw-reactmemo-endraw-and-raw-usecallback-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  When to use &lt;code&gt;React.memo&lt;/code&gt; and &lt;code&gt;useCallback&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;They are not required unless you see some lag in a specific component or the complete app. If there is a lag try profiling for the actions on that screen and check if there can be any component re-renders that can be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;React.memo&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt; can be used to optimize the performance of the React apps they are not required in most cases. Use them Cautiously.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>Git tricks</title>
      <author>Gustavo Castillo</author>
      <pubDate>Sun, 27 Dec 2020 00:53:10 +0000</pubDate>
      <link>https://dev.to/gcdcoder/git-tricks-285p</link>
      <guid>https://dev.to/gcdcoder/git-tricks-285p</guid>
      <description>&lt;p&gt;Some useful git tricks I use all the time, the list can be updated later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Stash track/untrack changes&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git stash &lt;span class="nt"&gt;-u&lt;/span&gt; or git stash &lt;span class="nt"&gt;--include-untracked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Rename local branch&lt;/span&gt;
&lt;span class="c"&gt;# If you are on the branch you want to rename:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-m&lt;/span&gt; new-name

&lt;span class="c"&gt;# If you are on a different branch:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-m&lt;/span&gt; old-name new-name 

&lt;span class="c"&gt;# Delete the old-name remote branch and push the new-name local branch.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin old-name new-name

&lt;span class="c"&gt;# Reset the upstream branch for the new-name local branch. Switch to the branch and then:&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin &lt;span class="nt"&gt;-u&lt;/span&gt; new-name
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Add file to the last commit (avoid this if the commit is already public 🙅🏼‍♂️)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add my_missing_file
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt; &lt;span class="nt"&gt;--no-edit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# List all origin from the remote repo&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote prune origin &lt;span class="nt"&gt;--dry-run&lt;/span&gt;

&lt;span class="c"&gt;# Prune origin in your local repo&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote prune origin

&lt;span class="c"&gt;# Prune when you fetch from a remote&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch &lt;span class="nt"&gt;--prune&lt;/span&gt;

&lt;span class="c"&gt;# List all branches which have been merged&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;--merged&lt;/span&gt;

&lt;span class="c"&gt;# Prune local branches which have been merged&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-d&lt;/span&gt; branch-to-delete

&lt;span class="c"&gt;# List all branches which have been NOT merged&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;--no-merged&lt;/span&gt;

&lt;span class="c"&gt;# Prune all branches which have been NOT merged&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git branch &lt;span class="nt"&gt;-D&lt;/span&gt; un-merged-branch-to-delete
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Update a local fork at the terminal &lt;a href="https://medium.com/@sahoosunilkumar/how-to-update-a-fork-in-git-95a7daadc14e"&gt;Explanation&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add upstream &lt;span class="o"&gt;[&lt;/span&gt;github url]
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch upstream
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git merge upstream/master
&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>git</category>
    </item>
    <item>
      <title>What is {x:1} and why does it return 1 🤷‍♂️ </title>
      <author>h43z</author>
      <pubDate>Sun, 27 Dec 2020 00:51:09 +0000</pubDate>
      <link>https://dev.to/h43z/what-is-x-1-and-why-does-it-return-1-lbj</link>
      <guid>https://dev.to/h43z/what-is-x-1-and-why-does-it-return-1-lbj</guid>
      <description>&lt;p&gt;Recently I came across what I found to be &lt;em&gt;weird&lt;/em&gt; behavior when you type &lt;code&gt;{x:1}&lt;/code&gt; into the respective browser developer tools (Chrome and Firefox).&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0MYT6o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/EojmGcZXcAAB4VV.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LuxtxmE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1337449711574323200/TBzAcge1_normal.jpg" alt="؜ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ؜
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/h43z"&gt;@h43z&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      javascript quiz:&lt;br&gt;&lt;br&gt;Who can figure out what's going on?&lt;br&gt;&lt;br&gt;Entering {name:"h43z"} in to the different dev tools yields different results. Firefox shows the string "h43z" chrome the object. But why.... 😋 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:04 PM - 06 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1335570931977232385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1335570931977232385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      1
      &lt;a href="https://twitter.com/intent/like?tweet_id=1335570931977232385" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      2
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It took me by surprise that Firefox returned &lt;code&gt;1&lt;/code&gt;. I was expecting the same response as I got in chrome namely &lt;code&gt;{x:1}&lt;/code&gt; nicely formatted and with all the usual prototype stuff.&lt;/p&gt;

&lt;p&gt;After some digging I think I finally figured out what's going on.&lt;/p&gt;

&lt;p&gt;Let's go over it step by step.&lt;/p&gt;

&lt;p&gt;First one thing to make clear &lt;code&gt;{x:1}&lt;/code&gt; is actually not JSON as keys in JSON need to be wrapped in double quotes. (And even JSON is not considered valid javascript code)&lt;/p&gt;

&lt;p&gt;Technically we never deal with JSON in javascript anyway except when it's in a &lt;strong&gt;string literal&lt;/strong&gt; like &lt;code&gt;'{ "x" : 1 }'&lt;/code&gt; and we feed it to &lt;code&gt;JSON.parse&lt;/code&gt; or whatever.&lt;/p&gt;

&lt;p&gt;Programmers mostly deal with &lt;strong&gt;object literals&lt;/strong&gt; like &lt;code&gt;const obj = {x:1}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;{x:1}&lt;/code&gt; on its &lt;em&gt;own&lt;/em&gt; is not an &lt;strong&gt;object literal&lt;/strong&gt;. In fact it's something totally different.&lt;/p&gt;

&lt;p&gt;If you dissect &lt;code&gt;{x:1}&lt;/code&gt; you will see the outer part is actually a &lt;strong&gt;block statement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVik_xpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1levn8hqmshmeyte1hsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVik_xpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1levn8hqmshmeyte1hsl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A block statement (or compound statement in other languages) is used to group zero or more statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And within you have what's called a &lt;strong&gt;labeled statement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCpYXnWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2348x5l9m2dtcyuf48o1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCpYXnWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2348x5l9m2dtcyuf48o1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;labeled statement&lt;/strong&gt; is very uncommon and not that useful. It kind of acts like a &lt;strong&gt;GOTO&lt;/strong&gt;. But you can only jump to a label with a &lt;code&gt;continue&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;loop1:
for (let i = 0; i &amp;lt; 5; i++) {
  if (i === 1) {
    continue loop1;
  }
  str = str + i;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You see with the example &lt;code&gt;{x:1}&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is the label name and &lt;code&gt;1&lt;/code&gt; is the statement. Statements when entered into the web console are simply returned.&lt;/p&gt;

&lt;p&gt;And that is why Firefox prints &lt;code&gt;1&lt;/code&gt; when you type &lt;code&gt;{x:1}&lt;/code&gt; into the console.&lt;/p&gt;

&lt;p&gt;If you dig into MDN you will stumble upon this warning on &lt;strong&gt;object literals&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uACWS3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gszm8jxlyke99j514hdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uACWS3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gszm8jxlyke99j514hdr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay we learned this the hard way and by detour.&lt;/p&gt;

&lt;p&gt;But why does &lt;code&gt;{x:1}&lt;/code&gt; do what 99.9% of developers would expect when typed into google chromes developer tools?&lt;/p&gt;

&lt;p&gt;And the answer can be found in the source code of the actual web console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCfgyvZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6v0k5o0m0mk42ar3f4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCfgyvZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r6v0k5o0m0mk42ar3f4l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chromium.googlesource.com/chromium/src.git/+/4fd348fdb9c0b3842829acdfb2b82c86dacd8e0a%5E!/#F2"&gt;souce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chrome assumes that most developers mean to input &lt;strong&gt;object literals&lt;/strong&gt; into the web console so it does a little trick.&lt;/p&gt;

&lt;p&gt;It wraps &lt;code&gt;{}&lt;/code&gt;  with &lt;code&gt;()&lt;/code&gt; aka the javascript &lt;strong&gt;grouping operator&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The grouping operator consists of a pair of parentheses around an expression or sub-expression to override the normal operator precedence so that expressions with lower precedence can be evaluated before an expression with higher priority. As it sounds, it groups what's inside of the parentheses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So in the end what chrome executes is &lt;code&gt;({x:1})&lt;/code&gt;. And that for some reason still not fully clear to me (enlighten me in the comments!) turns the &lt;strong&gt;labeled statement&lt;/strong&gt; within a &lt;strong&gt;block statement&lt;/strong&gt; into a &lt;strong&gt;object literal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And with Firefox you just have to do this manually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvYyE0zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lne1wud5s7np2asfrkdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvYyE0zl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lne1wud5s7np2asfrkdk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this investigation like I did and make sure to follow me on twitter &lt;a href="https://twitter.com/h43z"&gt;@h43z&lt;/a&gt; for more goofing around. &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript - Map, Filter, and Reduce</title>
      <author>Brandon Weaver</author>
      <pubDate>Sat, 26 Dec 2020 23:25:50 +0000</pubDate>
      <link>https://dev.to/brandonmweaver/javascript-map-filter-and-reduce-22jb</link>
      <guid>https://dev.to/brandonmweaver/javascript-map-filter-and-reduce-22jb</guid>
      <description>&lt;p&gt;Map, filter, and reduce are three useful functions which can help to simplify your JavaScript code.&lt;/p&gt;

&lt;p&gt;Below is a simple data structure which we will reference as we learn about these functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's say that we just needed a collection of peoples ages; there are numerous ways to do this. The following is a common solution.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [25,30,35]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Map allows us to simplify the solution quite a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [25,30,35]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we pass a callback to map, and for each element within the collection, we determine what we want to return.&lt;/p&gt;

&lt;p&gt;Now, what if we need to create a collection comprised only of people over the age of 30? We could do something like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peopleOverThirty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;peopleOverThirty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// [{age: 35, name: "John"}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's see how filter can be used to produce the same result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;peopleOverThirty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [{age: 35, name: "John"}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similar to map, we pass filter a callback, here however, rather than &lt;em&gt;what&lt;/em&gt; we want to return, we determine which elements to return using a conditional statement.&lt;/p&gt;

&lt;p&gt;Next, let's get a sum of every person's age. Assuming that we have our ages array from earlier, below would be one way to achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ageSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ageSum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// 90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's the solution using reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ageSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 90&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As per usual, we pass the function a callback, although we're giving our callback two arguments this time. The first argument is the &lt;em&gt;accumulator&lt;/em&gt;, which is going to hold the result of each consecutive operation. The second argument is the current element, as with map and filter.&lt;/p&gt;

&lt;p&gt;These are small examples of how &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"&gt;map&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;filter&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"&gt;reduce&lt;/a&gt; can help to keep your code simple.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Should I become a Front-End or Back-End developer?</title>
      <author>Vincent Milum Jr</author>
      <pubDate>Sat, 26 Dec 2020 23:07:41 +0000</pubDate>
      <link>https://dev.to/darkain/should-i-become-a-front-end-or-back-end-developer-5b9i</link>
      <guid>https://dev.to/darkain/should-i-become-a-front-end-or-back-end-developer-5b9i</guid>
      <description>&lt;p&gt;This is a post that I've been meaning to write for quite some time now.&lt;/p&gt;

&lt;p&gt;The question of "Should I become a Front-End or Back-End developer" pops up quite regularly, so I thought I'd pose the question here too. No, not for me, the author, but for you, the reader who may be new to programming and wondering which of these directions you should head in.&lt;/p&gt;

&lt;p&gt;This question is usually phrased in such a way that the options are either-or, but never both. But more importantly, the question is usually phrased in such a way to imply that these are literally the only two avenues to pursue as an aspiring developer.&lt;/p&gt;

&lt;p&gt;I want to offer you an exploratory thought experiment into the vast array of other possibilities that you could potentially explore if you want to get into software development. Front-end and back-end web development is only an extremely small fraction of what is out there!&lt;/p&gt;

&lt;p&gt;Why might you consider other areas of development? Web dev is where all the hype and buzz is, surely that's the best possible path, right? Well, that honestly depends. Lesser talked about positions usually means there is less competition for those jobs, and with less people applying, they often offer higher payouts as an incentive to try to get the best possible candidates for these less popular jobs.&lt;/p&gt;

&lt;p&gt;But, you may ask, "what ARE these other possibilities as a developer?"&lt;/p&gt;

&lt;p&gt;Let's start by expanding on the idea of a web developer. The core back-end languages and toolkits used today revolve around PHP, Node.js, Python, Ruby, .Net, and other similar languages.&lt;/p&gt;

&lt;p&gt;Now think of each of the libraries for these languages.&lt;/p&gt;

&lt;p&gt;Do you include a module to access a database? Ask yourself, "who writes that library?"&lt;/p&gt;

&lt;p&gt;How about something that parses JSON? Or generates JSON for data? Same for XML? What about the library that reads the metadata from a JPEG image file? Or how about the library that fetches HTTP(s) content from another system?&lt;/p&gt;

&lt;p&gt;Each of these libraries are pieces of code that someone, or a group of people, wrote, manage, and maintain. These types of libraries are often open-source, and available to accept contributions too!&lt;/p&gt;

&lt;p&gt;But how did they come into being? Usually someone is working on a particular project, saw a need, wrote some re-usable code, and decided to package it up as a library.&lt;/p&gt;

&lt;p&gt;One such example is when doing web development in PHP, I was frequently writing complex SQL queries to interact with my databases. Over time, I realized most of the code was repetitive, so I eventually bundled it up as a separate library and published it publicly.&lt;/p&gt;

&lt;p&gt;Sometimes it may be something that seems simple and trivial, but it can save a significant amount of someone else's time to research. Another library I published is a single file, a single function. It translates shipping/tracking numbers into a URL for each shipper's tracking web site. Pass in a USPS tracking number to the function, and it spits out the URL for tracking that particular USPS package. Not terribly complex, but it means the research of several different tracking number formats can be crowd sourced! As users of the library handle other shippers, they provide those shipper's tracking number formats as either issue tracker items or pull requests, and everybody benefits. :)&lt;/p&gt;

&lt;p&gt;Now let's take things into a slightly more complex direction. Computer languages don't inherently exist on their own, and they get updated over time. How exactly is this?&lt;/p&gt;

&lt;p&gt;The ability for a computer to read and understand code such as PHP or JavaScript inside of Node.js are themselves programs written in other languages. These are also areas of active development. Some of them have high profile companies backing them, such as .Net from Microsoft, Go from Google, Swift from Apple, or Hack from Facebook. Each of these languages has an entire team of people who work on them full time at their respective companies!&lt;/p&gt;

&lt;p&gt;Let's take a step back for a second, and look at the wide picture instead.&lt;/p&gt;

&lt;p&gt;Are you a Mac user? Or Windows? What about Linux? Or possibly even FreeBSD? Each of these are also programs that have people actively maintaining them!!! Well, kinda...&lt;/p&gt;

&lt;p&gt;Yes, each has a mountain of people that work on them. However, they're each not an individual program. They're collections of programs all bundled together, often maintained by entirely separate teams.&lt;/p&gt;

&lt;p&gt;For instance, the Windows Start button is an entirely different codebase managed by entirely different people than Notepad!&lt;/p&gt;

&lt;p&gt;But this doesn't stop at just user-facing desktop applications.&lt;/p&gt;

&lt;p&gt;An entire computer is layers on top of layers of different types of programs all interacting with one another.&lt;/p&gt;

&lt;p&gt;Your keyboard for instance is most likely USB (even possibly true if you're on a laptop, with an internal USB connection). There is firmware on modern keyboards that accept the key presses, and then sends the signal over USB back to the USB root device.&lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the keyboard firmware?"&lt;/p&gt;

&lt;p&gt;But then the USB root communicates back to the rest of the system, sometimes over PCI-Express.&lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the USB interface code?"&lt;/p&gt;

&lt;p&gt;And then there is a keyboard driver in the operating system to receive and interpret those commands.&lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the keyboard drivers?"&lt;/p&gt;

&lt;p&gt;From there, the driver sends a signal to the operating system kernel to handle and route.&lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the keyboard kernel subsystem?"&lt;/p&gt;

&lt;p&gt;At that point, the keyboard subsystem routes the message to the active, in-focus application though the kernel's ABI (application binary interface)&lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the ABI?"&lt;/p&gt;

&lt;p&gt;Now let's say our application just so happens to be a web browser. This web browser is displaying a form on the screen with several elements that are interactable. &lt;/p&gt;

&lt;p&gt;Think to yourself: "who writes the browser code to handle the keyboard event, sending it to the right focused item on the web page?"&lt;/p&gt;

&lt;p&gt;And all of this is for a single key press, every key press, every time you type.&lt;/p&gt;

&lt;p&gt;Web browsers can do quite a bit more than just accept keypresses though. They send and receive data over networks using a variety of protocols, encrypt your data for privacy and protection, decode and display a variety of photo, audio and video formats, and countless more features.&lt;/p&gt;

&lt;p&gt;This may seems like a single monumental task, but that's not entirely the case. Instead, like mentioned previously, this is all handled via a collection of smaller, simpler libraries. Most of these libraries are maintained entirely independently of the browser itself.&lt;/p&gt;

&lt;p&gt;Curious what these libraries may be? In Chromium based browsers (Google Chrome, Microsoft Edge, Opera, etc), Go to "Settings" &amp;gt; "About" and click on "open source software". Microsoft Edge that I'm typing this on currently has 371 libraries listed.&lt;/p&gt;

&lt;p&gt;Do you use the command line interface in your operating system?&lt;/p&gt;

&lt;p&gt;Every single CLI command is a program or a script that somebody at some point wrote.&lt;/p&gt;

&lt;p&gt;Who wrote all of those commands? Who manages and maintains them? And who will write the next iteration of them? That could possibly be you!&lt;/p&gt;

&lt;p&gt;But what happens when we step away from the desktop computer, what else is out there?&lt;/p&gt;

&lt;p&gt;Think to yourself...&lt;/p&gt;

&lt;p&gt;Who writes the user interface for my smart TV?&lt;/p&gt;

&lt;p&gt;Who writes apps for cell phones?&lt;/p&gt;

&lt;p&gt;But wait, who writes the OS itself for the cell phones!?&lt;/p&gt;

&lt;p&gt;How about those IoT devices, who writes the program for those smart outlets, smart switches and other IoT devices?&lt;/p&gt;

&lt;p&gt;And how about those drones everyone loves to fly, who writes the software for those?&lt;/p&gt;

&lt;p&gt;This being the Christmas holiday season, who writes the microcontroller code that allows Christmas lights to blink?&lt;/p&gt;

&lt;p&gt;Who programs the digital interface on your microwave or stovetop?&lt;/p&gt;

&lt;p&gt;Who programs the traffic lights when you're driving down the road?&lt;/p&gt;

&lt;p&gt;What about digital signs on billboards and in windows of businesses?&lt;/p&gt;

&lt;p&gt;RGB LEDs are all the crazy right now! But who writes the code for those to change color and blink?&lt;/p&gt;

&lt;p&gt;... lastly, obligatory ... who programs the VCR? &lt;/p&gt;

&lt;p&gt;But this is still nowhere near an exhaustive list of areas a programmer can explore! This can also become quite overwhelming very quickly, being flooded with endless possibilities.&lt;/p&gt;

&lt;p&gt;The vast majority of these, however, can be broken down into a simpler context: problems and solutions.&lt;/p&gt;

&lt;p&gt;In the end, all we're doing as developer is using structured commands to have electronic machines solve problems for us.&lt;/p&gt;

&lt;p&gt;So next time you think to yourself "should I be a front-end or back-end web developer", change that up to "which problem am I trying to solve, and which set of tools would best solve it?"&lt;/p&gt;

&lt;p&gt;It may be that extending an existing library might solve the problem at hand. It may be that a new command line tool could solve it too. Or maybe it does require a nice web based graphical interface. It all comes down to what tools are available, and which ones are the best at the time to get the job done.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Art of doing nothing: Python Edition</title>
      <author>Fortune Adekogbe</author>
      <pubDate>Sat, 26 Dec 2020 20:57:34 +0000</pubDate>
      <link>https://dev.to/enutrof/the-art-of-doing-nothing-python-edition-6e3</link>
      <guid>https://dev.to/enutrof/the-art-of-doing-nothing-python-edition-6e3</guid>
      <description>&lt;p&gt;Writing programs can be stressful. As a developer, I have never been one to always pen down pseudo-codes before writing my first lines of code so it happens that at some point I do not know what to write. Also, when writing modular scripts, I define all classes/functions and their doc-strings at the start before completing them one after the other. &lt;/p&gt;

&lt;p&gt;This means I had to find ways to make empty classes or functions not raise errors when the script is run. I have discovered a couple of ways to do this and I  will be sharing them in this article. Whether you are like me or not, I do not doubt that you will find this interesting and useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-package-called-nothing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The package called nothing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The mere fact that a python developer created this is quite fascinating. Here we have a package that contains &lt;a href="https://pypi.org/project/nothing/"&gt;nothing&lt;/a&gt; but a version number and a one-sentence description in its &lt;a href="https://stackoverflow.com/questions/448271/what-is-init-py-for#:~:text=The%20__init__.py%20file%20makes%20Python%20treat%20directories,the%20submodules%20to%20be%20exported."&gt;init&lt;/a&gt; file. In fact, this is the only description for this package on &lt;a href="https://github.com/Carreau/nothing"&gt;Github&lt;/a&gt; and &lt;a href="https://pypi.org/nothing"&gt;PyPI&lt;/a&gt;, nothing else. Like every other package, it can be installed with pip via the command &lt;code&gt;pip install nothing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once it is installed, we can &lt;code&gt;import nothing&lt;/code&gt; and then use it as a placeholder as shown below&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csLLoqxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/up5i4601sv578yvx8suw.png" width="270" height="480"&gt;&lt;/td&gt;
    &lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OEADi70H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1gdfmosapve43isvozxm.png" width="270" height="480"&gt;&lt;/td&gt;
  &lt;/tr&gt;
 &lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-pass-statement" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The pass statement&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is the more popular option. &lt;code&gt;pass&lt;/code&gt; is an inbuilt null statement in python that is used to stand in for code that is yet to be written. Its inbuilt nature makes it most python developers goto statement for code blocks that are to do nothing. It is used like the nothing package as we'll see in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_qzL5gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s2yedkrwoczpw8esdbya.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_qzL5gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s2yedkrwoczpw8esdbya.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ellipsis-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ellipsis (...)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In the English language, an ellipsis is used when omitting a word, phrase, line, paragraph, or more from a quoted passage. In Python, however, an ellipsis is a single object with no methods that serve a range of functions from multi-dimensional array slicing to type hinting but we will be focusing on its use as a placeholder. This is a personal favourite because I find the similarity between its use case in python and regular English texts interesting. We see it used in the image below as a part of a recursive function with only the base case specified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1l5shg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp8hvq11nb6fgueb68w3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1l5shg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp8hvq11nb6fgueb68w3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-final-straw" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The final straw&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This last case is quite intriguing. Its something you would have thought of at some point and simply put, it is &lt;em&gt;leaving your editor empty&lt;/em&gt;. Why type when you are not ready yet? Finish up that pseudo-code then open your editor and code away. Yes, this is a message to me too😂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QS-hueu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fcxlf10o6wzm660g59t3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QS-hueu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fcxlf10o6wzm660g59t3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope I successfully communicated the art of doing nothing in Python to you all and that this was enjoyable.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How To Plan A Redesign</title>
      <author>Marie-Elise</author>
      <pubDate>Sat, 26 Dec 2020 20:43:46 +0000</pubDate>
      <link>https://dev.to/kreyoldev/how-to-plan-a-redesign-3iji</link>
      <guid>https://dev.to/kreyoldev/how-to-plan-a-redesign-3iji</guid>
      <description>&lt;p&gt;I recently led a corporate website redesign, which involved a move from Drupal 7 to Drupal 8. I wanted to share my process for tackling this kind of CMS-based project. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: The process outlined below is a guide. Feel free to adapt it to fit the scope of your project. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-i-requirements-gathering"&gt;Phase I: Requirements Gathering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-ii-research"&gt;Phase II: Research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-iii-information-architecture"&gt;Phase III: Information Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-iv-wireframe"&gt;Phase IV: Wireframe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-v-design"&gt;Phase V: Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-vi-build"&gt;Phase VI: Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-vii-content-migration"&gt;Phase VII: Content Migration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-viii-test"&gt;Phase VIII: Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-ix-deploy"&gt;Phase IX: Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#phase-x-maintain"&gt;Phase X: Maintain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Choose a project management application (&lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt;, &lt;a href="https://notion.so"&gt;Notion&lt;/a&gt;, &lt;a href="https://basecamp.com"&gt;Basecamp&lt;/a&gt;, etc) and set up your project. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a section for each phase of the project.&lt;/li&gt;
&lt;li&gt;Add tasks to each section as they come up.&lt;/li&gt;
&lt;li&gt;Share the project with your team to keep everyone on-task and up-to-date.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I used Todoist for my redesign and appreciated the built-in shortcuts for adding tasks, tags, and due dates &lt;strong&gt;with one line of text&lt;/strong&gt;. It was a huge timesaver in my busy office. That being said, I will probably try Notion or Basecamp next time—just to experiment with a different system. There are many other great PM choices out there though! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-i-requirements-gathering" class="anchor"&gt;
  &lt;/a&gt;
  Phase I: Requirements Gathering
&lt;/h2&gt;

&lt;p&gt;Gather the basic project requirements and confirm the "ideal" timeline for completion (if it's known). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're planning to use a CMS&lt;/strong&gt;, research platforms now and get quotes if needed. Understanding the basic features and associated costs can help you identify the platforms that will work best for your project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #1:&lt;/strong&gt; Don't commit to a timeline until the end of Phase II. Research can take time and reveal unknowns that could impact the scope of the project or the platform you end up choosing.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #2:&lt;/strong&gt; Set expectations early that the timeline is subject to change and that you will communicate any changes early and often. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #3:&lt;/strong&gt; Know who you need to communicate with—and get approval from—throughout the process. If this information is unknown, make sure to get approval from all stakeholders—at the very least—before starting &lt;a href="#phase-vi-build"&gt;Phase VI&lt;/a&gt; and &lt;a href="#phase-ix-deploy"&gt;Phase IX&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-ii-research" class="anchor"&gt;
  &lt;/a&gt;
  Phase II: Research
&lt;/h2&gt;

&lt;p&gt;It's time to dive into UX research. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps" class="anchor"&gt;
  &lt;/a&gt;
  Steps:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.toptal.com/designers/user-research/guide-to-ux-research-methods"&gt;Determine which types of research make the most sense for your project.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement your chosen research tactics and gather data.&lt;/li&gt;
&lt;li&gt;Pull analytics from any available sources (e.g., Google, Facebook, Twitter).&lt;/li&gt;
&lt;li&gt;Compile a report with all of your findings.&lt;/li&gt;
&lt;li&gt;Discuss findings with your team and any additional stakeholders that need to be at the table.&lt;/li&gt;
&lt;li&gt;Based on findings, brainstorm a list of all features that could address user pain points.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feature Triage&lt;/strong&gt;—distinguish "Must Have" vs "Nice To Have" features. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;If you're planning to use a CMS&lt;/strong&gt;, this is a great time to cross-reference your feature wishlist with the built-in capabilities of different platforms. You may realize that a must-have feature isn't included with certain platforms—and this could significantly alter your project timeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-iii-information-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Phase III: Information Architecture
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Information architecture refers to the way that content is organized on your site. One way that this architecture is represented is with navigation menus. A well-organized menu is essential to a good user experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Print out your existing sitemap and analyze the structure of your site (&lt;strong&gt;read:&lt;/strong&gt; how the pages are organized). This is also an opportunity to conduct a content audit. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is this content interesting or useful to your user? &lt;/li&gt;
&lt;li&gt;Did the analytics highlight any common—or unexpected—paths that users are taking to access certain types of content? &lt;/li&gt;
&lt;li&gt;Does it make sense to reorganize certain sections or pages? &lt;/li&gt;
&lt;li&gt;Does it make sense to condense—or break up—certain pages?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you've reorganized your IA, you'll have an idea of the sections you'll need to create—along with the total number of pages you'll have to build—on your new site. This information is especially useful &lt;strong&gt;if you're using a CMS&lt;/strong&gt; because it will affect the content types you'll have to build during &lt;a href="#phase-vi-build"&gt;Phase VI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; When the IA has been finalized, assign someone to start writing any new content that will be needed, and start proofreading existing content that will be migrated to the new site. (That includes confirming contact information, spell-checking names, flagging graphic elements that are no longer on-brand, etc.) It will take time to complete this process if your site is large. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-iv-wireframe" class="anchor"&gt;
  &lt;/a&gt;
  Phase IV: Wireframe
&lt;/h2&gt;

&lt;p&gt;Start sketching your wireframes! Grab a paper and pencil—or iPad and Apple Pencil— and start brainstorming. Don't be afraid to research other sites for inspiration, different layouts, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're using a CMS&lt;/strong&gt;, make sure that you sketch wireframes for each content type you'll be implementing on the new site.&lt;/p&gt;

&lt;p&gt;Once your sketches are complete, create final versions of your wireframes with your UI software of choice. Some popular options include: &lt;a href="https://adobe.com/xd"&gt; AdobeXD&lt;/a&gt;, &lt;a href="https://www.sketch.com"&gt;Sketch&lt;/a&gt; and &lt;a href="https://www.figma.com"&gt;Figma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Discuss the wireframe options with your team and narrow down the layouts that will work best for your users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-v-design" class="anchor"&gt;
  &lt;/a&gt;
  Phase V: Design
&lt;/h2&gt;

&lt;p&gt;Take your final wireframes and turn them into full-color, interactive prototypes. This is an important step for integrating brand elements into the wireframe. Feel free to experiment and create multiple prototypes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're using a CMS&lt;/strong&gt;, this is another opportunity to determine what features—from your prototype—are already built into your chosen platform. Determine if any custom modules need to be developed. Adjust your timeline accordingly.&lt;/p&gt;

&lt;p&gt;Discuss the prototype(s) with your team and finalize the design. Send a link of the final prototype to all essential stakeholders. Make any necessary changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-vi-build" class="anchor"&gt;
  &lt;/a&gt;
  Phase VI: Build
&lt;/h2&gt;

&lt;p&gt;Once the design is approved, it's time to start building! Set up your server, framework, platform, libraries, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're using a CMS&lt;/strong&gt;, you'll need to complete this phase in 2 stages.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Site Building—install the base theme, install modules, configure settings, etc&lt;/li&gt;
&lt;li&gt;Custom Theming—customize the CSS, implement custom JS, build custom modules, etc &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Tip #1:&lt;/strong&gt; Incorporate &lt;a href="https://accessibility.arl.org/standards-best-practices/#technical-standards"&gt;accessibility best practices&lt;/a&gt; as you customize your theme. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip #2:&lt;/strong&gt; Bugs &lt;em&gt;will&lt;/em&gt; come up at this point in the process. Be prepared to alter your timeline at this point in the process. If you have to change your go-live date, communicate with all essential stakeholders. If you're not able to push the launch, revisit your feature wishlist and triage again. Consider what features can wait to be implemented until after the site is live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-vii-content-migration" class="anchor"&gt;
  &lt;/a&gt;
  Phase VII: Content Migration
&lt;/h2&gt;

&lt;p&gt;Migrate your old site's content to your new platform. This can be done automatically or manually. An automatic approach may work best if you're migrating between two versions of a CMS platform. A manual approach may work best if your site is small or if your databases are not compatible. Make sure to research your options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Incorporate any accessibility features that couldn't be added during Phase VI (e.g., alt text for newly-migrated images) at this point in the process. &lt;/p&gt;

&lt;p&gt;When migration is complete, send a link for the test site to all essential stakeholders. Provide a deadline for users to test the new platform and proofread content. Encourage them to use different devices and browsers and make note of all feedback you receive (e.g., broken links, typos, features that don't work on certain browsers).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-viii-test" class="anchor"&gt;
  &lt;/a&gt;
  Phase VIII: Test
&lt;/h2&gt;

&lt;p&gt;Now it's time for browser compatibility testing. There are two approaches you can take.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Manual testing—install different browsers on your device and pull up your site on each one to manually click through. &lt;/li&gt;
&lt;li&gt;Automatic testing—subscribe to a browser testing service (like &lt;a href="https://www.browserstack.com/"&gt;BrowserStack&lt;/a&gt; or &lt;a href="https://www.browserling.com/"&gt;Browserling&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make note of any bugs that are identified and triage. Determine if/what problems need to be addressed before the go-live date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-ix-deploy" class="anchor"&gt;
  &lt;/a&gt;
  Phase IX: Deploy
&lt;/h2&gt;

&lt;p&gt;When testing is complete and your site has been approved, it's time to deploy! Confirm the go-live date and time, as well as the process for publishing the new site. Choose a non-peak time, preferably early in the week, to give yourself plenty of space to troubleshoot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-x-maintain" class="anchor"&gt;
  &lt;/a&gt;
  Phase X: Maintain
&lt;/h2&gt;

&lt;p&gt;This phase often gets overlooked but as I work more with older sites, I appreciate the value of a well thought-out maintenance plan. It's easy for a site's IA to grow out of control over time—and for vanity pages to creep in. This is where a solid web content strategy comes into play. It will help you establish an audit schedule for a site's content, along with guidelines for managing that content. This will make long-term maintenance (and future redesigns!) less painful. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'll write a future post with tips for developing a web content strategy.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Redesigning a website can seem overwhelming, but there is a systematic way to break it down and tackle it. While the steps outlined above are not necessary for every project, it worked well for my CMS-based redesign. &lt;/p&gt;

&lt;p&gt;Have you tackled a redesign? Did you go about it in a different way? I'd love to hear about it!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>cms</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>You're Allowed To Make Your Own Tools</title>
      <author>swyx</author>
      <pubDate>Sat, 26 Dec 2020 18:04:11 +0000</pubDate>
      <link>https://dev.to/swyx/you-re-allowed-to-make-your-own-tools-85k</link>
      <guid>https://dev.to/swyx/you-re-allowed-to-make-your-own-tools-85k</guid>
      <description>&lt;p&gt;I read a list of &lt;a href="https://milan.cvitkovic.net/writing/things_youre_allowed_to_do/"&gt;Things You're Allowed To Do&lt;/a&gt; on Hacker News recently. These are useful reminders for a well paid, technical audience, but one thing stuck out to me: &lt;strong&gt;It didn't mention making your own tools&lt;/strong&gt;. Not even once.&lt;/p&gt;

&lt;p&gt;Even the greatest software has parts that aren't so great for you. But the difference between you and everyone else is that you can code. &lt;/p&gt;

&lt;p&gt;Here's a list of tools (&lt;em&gt;that you don't need anyone's permission&lt;/em&gt;) to code for yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;You can make your own Stylesheet&lt;/strong&gt;: Long before &lt;a href="https://twitter.com/swyx/status/1336363173838909441"&gt;GitHub got Dark Mode&lt;/a&gt;, developers had been making their own with the &lt;a href="https://github.com/openstyles/stylus"&gt;Stylus Userstyles Manager&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can make your own Query Generator&lt;/strong&gt;: Most platforms have advanced features that are poorly documented and don't have good UIs. You can make your own. I made my own &lt;a href="https://twitter.com/swyx/status/1328086859356913664?s=20"&gt;Advanced Twitter Search UI&lt;/a&gt; embedding all the little tips and tricks that people pass around by word of mouth. I know of two ongoing attempts to &lt;a href="https://twitter.com/swyx/status/1335627133956153344"&gt;do the same for Google's advanced operators&lt;/a&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5hD-SBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jntu0l1zk2o3xz8bu5fz.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can make an Inspo Generator&lt;/strong&gt;: Projects like &lt;a href="https://whattotweet.com/"&gt;What to Tweet&lt;/a&gt;, &lt;a href="https://components.ai/"&gt;Components.ai&lt;/a&gt; and &lt;a href="https://www.doodlestrudel.com/"&gt;Doodle Strudel&lt;/a&gt; get ridiculously popular compared to their technical complexity - because inspiration loves combinatorial explosions!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can make your own scripts&lt;/strong&gt;: &lt;a href="https://github.com/NARKOZ/hacker-scripts#hacker-scripts"&gt;Like this guy&lt;/a&gt;. Developers have apparently been automating coffee machines for so long that I recently learned that the infamous &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418"&gt;HTTP Error 418&lt;/a&gt; was inspired by an actual real life situation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can make your own CLIs&lt;/strong&gt;: CLIs are essentially interactive scripts. If you do JavaScript, I made a course on Egghead about &lt;a href="https://egghead.io/courses/build-custom-command-line-interface-cli-tooling-with-oclif-and-typescript?af=95qfq1"&gt;building custom CLIs with oclif and TypeScript&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You can make personal proxies&lt;/strong&gt;: Frustrated with slow searches (I am often on mobile 3G), &lt;a href="https://news.ycombinator.com/item?id=25538586"&gt;gamed search results&lt;/a&gt;, and &lt;a href="https://twitter.com/shanselman/status/1341583883947544578?s=20"&gt;assorted crap in my URLs&lt;/a&gt;, I recently &lt;a href="https://twitter.com/swyx/status/1342625544320339969"&gt;made my own Google Search proxy&lt;/a&gt;. A proxy is different from "just the UI", because it involves setting up a server or serverless function to process data for you. Because you have total control of server data, you have the ability to postprocess, combine, persist, and optimize it for your specific preferences. &lt;a href="https://www.reuters.com/article/dataprivacy-linkedin-datascraping-idUSL2N2GM1ZV"&gt;Scraping public data is probably legal&lt;/a&gt;, but personal means personal - Be careful about sharing it with others and definitely do not sell it. But this is ethically no different than setting up your own &lt;a href="https://pi-hole.net/"&gt;Pi-hole&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt5ius5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/56r2dhdtgq8qw3qsi3jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt5ius5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/56r2dhdtgq8qw3qsi3jo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My personal &lt;a href="https://github.com/sw-yx/automation/"&gt;cheatsheet of automation resources is available here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These ideas are great, scoped projects that let you try out new languages and frameworks and improve your quality of life as a side effect. Always wanted to &lt;a href="https://www.swyx.io/svelte-why/"&gt;try Svelte&lt;/a&gt;? Make a query generator! Want a new CLI? &lt;a href="https://deno.land/posts/v1.6"&gt;Deno ships binaries now!&lt;/a&gt; &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; claims to be an Open Source Firebase Alternative? Put it to the test!&lt;/p&gt;

&lt;p&gt;And there's a compounding effect to these as you make them. More often than not, the lessons you learn from making a tool for yourself will find their way into your work. If you get &lt;em&gt;really&lt;/em&gt; lucky - &lt;a href="https://medium.com/who-what-why/how-side-projects-saved-our-startup-a83a80f3b3ae"&gt;your side projects might even become your life's work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don't take it from me. Here's &lt;a href="https://twitter.com/dan_abramov/status/1140259247680315393?s=20"&gt;Dan Abramov&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here’s a thing that I learned at FB that I wish I knew much earlier. Invest in building custom tools! &lt;/p&gt;

&lt;p&gt;You might think only bigcos make custom tools. But a tool doesn’t have to be sophisticated. It can be a script you could write in a day. And at small and medium companies, even a little effort can yield a huge return. Because &lt;strong&gt;nobody optimized anything yet&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The beauty of specializing in moving bits instead of atoms is that we can iterate in minutes, rather than months. That's a skill that customers pay us handsomely for, and we should remember that we can simply be our own customers too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author's Note: I wrote a longer treatment of the benefits of, and ideas for, Side Projects in &lt;a href="https://www.learninpublic.org/"&gt;The Coding Career Handbook&lt;/a&gt;. I also commented in &lt;a href="https://www.thekeycuts.com/dear-analyst-50-walking-through-a-vba-script-for-trading-billions-of-dollars-worth-of-derivatives-with-shawn-wang/"&gt;the KeyCuts podcast&lt;/a&gt; on how all young finance traders make their own pricing tools as a rite of passage — like how &lt;a href="https://starwars.fandom.com/wiki/Knighting_ceremony/Legends#New_Jedi_Order"&gt;Jedi make their own lightsabers&lt;/a&gt; before becoming Jedi Knights.&lt;/p&gt;

&lt;p&gt;If you are making a DevTools startup, I am &lt;a href="https://codingcareer.circle.so/c/devtools"&gt;incubating a small community in DX Circle&lt;/a&gt;, my proto-blog for investing in Developer Tools and Developer Communities.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>advice</category>
    </item>
    <item>
      <title>The Difference between JavaScript “==” and “===” Comparison Operators</title>
      <author>Uma</author>
      <pubDate>Sat, 26 Dec 2020 17:40:12 +0000</pubDate>
      <link>https://dev.to/uma/the-difference-between-javascript-and-comparison-operators-2j78</link>
      <guid>https://dev.to/uma/the-difference-between-javascript-and-comparison-operators-2j78</guid>
      <description>&lt;p&gt;There are many comparison operators in javascript but we are going to discuss double equal &lt;code&gt;==&lt;/code&gt;  and triple equal &lt;code&gt;===&lt;/code&gt;  operators. It is important to know the difference between these two operators and also the difference between &lt;code&gt;!=&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in javascript. Lets begin with the double equal operator:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Double equal “==”&lt;/strong&gt;&lt;br&gt;
    It is known as equality. The double equal operator checks for equality of value. It doesn’t care about data types. Before it checks for equality JavaScript converts both values to the same type and then compares them, which can lead to some unexpected results. Like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5 == ‘5’    // true
0 == ‘ ‘    // true
0 == false  // true
null == undefined   // true
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As seen above, the &lt;code&gt;==&lt;/code&gt; operator is returning true for comparing an integer and a string in the first case, then 0 equals empty string true in the second case, 0 equals false in the third case and null equals undefined is also returning true which is not true in the last case. It is just checking the value but not the type, which is why all of the above comparisons return true. Similarly, the &lt;code&gt;!=&lt;/code&gt; operator is used to check inequality. If you use &lt;code&gt;!=&lt;/code&gt; in the above examples everything will return false. It can definitely lead to some nasty bugs in an application, so it's not recommended to use the &lt;code&gt;==&lt;/code&gt;  and/or &lt;code&gt;!=&lt;/code&gt; operators for comparison in JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are not sure about types you can go to the console and simply type “typeof ” and check its type. You can take a look at the image below to see what is returned in the console when you check the typeof. Make sure you use all lowercase letters when writing typeof and not the camelCase version of typeOf.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lUBNkKU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0onk1fjxzvt6skiz5kw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUBNkKU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k0onk1fjxzvt6skiz5kw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triple equal “===”&lt;/strong&gt;&lt;br&gt;
    Known as strict equality, it not only checks for equality of value but also datatype. It cares about value and types both which is why it's recommended to use strict equality for comparison, it's more precise. The above examples will return false when &lt;code&gt;===&lt;/code&gt; is used :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5 === ‘5’   // false
0 === ‘ ‘   // false
0 === false // false
null === undefined  // false
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly the &lt;code&gt;!==&lt;/code&gt; operator is strict inequality. Beside these operators there are few more comparison operators we need to know. Here is the screen shot from the MDN documentation:&lt;/p&gt;

&lt;p&gt;var var1 = 3;&lt;br&gt;
var var2 = 4;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ZHiQhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m54dm39u0keczyc7aaiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ZHiQhg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m54dm39u0keczyc7aaiu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for comparison operators. I hope it helps. &lt;br&gt;
Happy Holidays everyone!&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
