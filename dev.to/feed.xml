<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Pro Tips to Search on Google 🔥</title>
      <author>Savio Martin</author>
      <pubDate>Sat, 16 Oct 2021 08:55:38 +0000</pubDate>
      <link>https://dev.to/saviomartin/pro-tips-to-search-on-google-4hpn</link>
      <guid>https://dev.to/saviomartin/pro-tips-to-search-on-google-4hpn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h2&gt;

&lt;p&gt;This is Savio here. I'm young dev with an intention to enhance as a successful web developer. I love building web apps with React. I have proved my superiority in frontend technologies.&lt;/p&gt;

&lt;p&gt;Today, I'd like to share 11 pro tips to search google!! 🚀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-googling-is-must-have-skill"&gt;
  &lt;/a&gt;
  Why Googling is Must Have Skill?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SVoxCT4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303417635/Ydv0LRZsN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVoxCT4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303417635/Ydv0LRZsN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Googling is the most important skill a developer.&lt;/strong&gt; Most people don’t know how to google. Googling require a certain ingenuity and hack in order to find exactly what you are looking for. You don’t have to stop googling if the search engine is not finding your first query. There are many tricks you can use and here you can find the pro tips.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I tell people, ‘I have a Ph.D. from Google University.’ —&lt;/em&gt;&lt;em&gt;Kris Carr&lt;/em&gt;**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, here are the 11 pro tips to make you an efficient google. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-quotations-"&gt;
  &lt;/a&gt;
  1. Quotations (" ")
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxhDUHjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303453611/WB6PfQqIR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxhDUHjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303453611/WB6PfQqIR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to get results with exact phrases, put the words inside quotes " ". Using quotes " ", google will only show results that have the exact words.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: "html 2021"&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-asterisk-"&gt;
  &lt;/a&gt;
  2. Asterisk ( * )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T5XmsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303480411/NHi5pjEG4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T5XmsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303480411/NHi5pjEG4.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use ***** to fill missing words or phrases. This makes searching easy and will help you get the best results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: how to * in JavaScript&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-range-"&gt;
  &lt;/a&gt;
  3. Range ( ... )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2hAIwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303508315/pFWrYXyuX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2hAIwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303508315/pFWrYXyuX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;...&lt;/strong&gt; to search within a range of numbers. It makes searching easy for number related topics, such as years, versions and so on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: JavaScript in 2010....2020&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-search"&gt;
  &lt;/a&gt;
  4. Search:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9xDAKBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303513857/uBZUCxZl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9xDAKBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303513857/uBZUCxZl0.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;search:&lt;/strong&gt; to search anything within a website. Using this, you can directly search from google without switching from different websites.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: search:w3schools.com javascript arrays&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-and"&gt;
  &lt;/a&gt;
  5. AND
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfVTpWw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303589044/SBjz8q6ni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfVTpWw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303589044/SBjz8q6ni.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
To find the results that must contain some given words, &lt;strong&gt;AND&lt;/strong&gt; operator will be super useful. Helps in solving many problems in real life.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React AND CSS&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-filetype"&gt;
  &lt;/a&gt;
  6. Filetype:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXBo_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303595559/6rTMcMRUf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXBo_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303595559/6rTMcMRUf.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Using &lt;strong&gt;filetype&lt;/strong&gt;, we can fetch results that are in a definite filetype. This will help in finding ebooks, docs etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React ebook filetype:pdf&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-or"&gt;
  &lt;/a&gt;
  7. OR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-TLDHaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303607844/fIl55VtyE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-TLDHaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303607844/fIl55VtyE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
We can use &lt;strong&gt;OR&lt;/strong&gt; Operator to get the result of one of the search terms. This will fetch results that should either have the first word or the second word.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React OR Vue masterclass&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-define"&gt;
  &lt;/a&gt;
  8. Define:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--433bmxu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303622379/VubTllxnoK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--433bmxu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303622379/VubTllxnoK.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Using &lt;strong&gt;Define:&lt;/strong&gt; we can find the definition of particular words. It will help a lot in understanding the words, also become handy in exams or so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: define:oops&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-related"&gt;
  &lt;/a&gt;
  9. Related:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FH3qbB0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303632241/L7irltdjB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FH3qbB0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303632241/L7irltdjB.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;related:&lt;/strong&gt; to find sites that are similar to other sites and do the same purpose. This will become super handy if you're looking for an alternatives of a site.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: related:w3schools.com&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-plus-"&gt;
  &lt;/a&gt;
  10. Plus ( + )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltmf_mRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303641648/o6QVUn47D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltmf_mRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303641648/o6QVUn47D.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;+&lt;/strong&gt; between two words to get results that must contain the two given words. This is very helpful if you find something that should be related with the other one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: JavaScript Oops+React&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#11-hyphen-"&gt;
  &lt;/a&gt;
  11. Hyphen ( - )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEnKlFot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303652665/w_6n4Cag_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEnKlFot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303652665/w_6n4Cag_.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use hyphen &lt;strong&gt;-&lt;/strong&gt; exclude certain words from results. This will ultimately help in retrieving the results you only wanted to, blocking spam stuffs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: react js -github&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  👀 Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the article. Do not hesitate to share your feedback. I am on Twitter &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;. Give a follow!&lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/saviomartin"&gt;@saviomartin&lt;/a&gt;, Don't miss my amazing projects! 💯&lt;/p&gt;

&lt;p&gt;Feedbacks are greatly appreciated! 🙌 Have an amazing day! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/saviomartin/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/teen_developer/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>21 Binary Tree Coding Questions for Java Developers</title>
      <author>javinpaul</author>
      <pubDate>Sat, 16 Oct 2021 08:17:47 +0000</pubDate>
      <link>https://dev.to/javinpaul/21-binary-tree-coding-questions-for-java-developers-325o</link>
      <guid>https://dev.to/javinpaul/21-binary-tree-coding-questions-for-java-developers-325o</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello devs, I have been sharing a lot of resources about programming job interviews like the &lt;a href="https://medium.com/javarevisited/10-best-books-for-data-structure-and-algorithms-for-beginners-in-java-c-c-and-python-5e3d9b478eb1"&gt;books&lt;/a&gt;, &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;courses&lt;/a&gt;, and some interview questions on the &lt;a href="https://medium.com/javarevisited/25-software-design-interview-questions-to-crack-any-programming-and-technical-interviews-4b8237942db0"&gt;software design&lt;/a&gt; and data structures like an &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45"&gt;string&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/top-20-linked-list-coding-problems-from-technical-interviews-90b64d2df093"&gt;linked list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far, we have looked at only the &lt;strong&gt;linear data structures&lt;/strong&gt;, like an array and linked list, but all information in the real world cannot be represented in a linear fashion, and that's where tree data structure helps.&lt;/p&gt;

&lt;p&gt;A tree data structure is a hierarchical data structure that allows you to store hierarchical data like a family tree or office hierarchy. Depending on how you store data, there are different types of trees, such as a &lt;a href="http://javarevisited.blogspot.sg/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html"&gt;binary tree&lt;/a&gt;, where each node has, at most, two child nodes.&lt;/p&gt;

&lt;p&gt;Along with its close cousin &lt;a href="http://javarevisited.blogspot.sg/2017/04/recursive-binary-search-algorithm-in-java-example.html"&gt;binary search tree&lt;/a&gt;, it's also one of the most popular tree data structures. Therefore, you will find a lot of questions based on them, such as how to traverse them, count nodes, find depth, and check if they are balanced or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A key point to solving binary tree questions is a strong knowledge of theory,&lt;/strong&gt; like what is the size or depth of the binary tree, what is a leaf, and what is a node, as well as an understanding of the popular traversing algorithms, like pre-order, post-order, and in-order traversal.&lt;/p&gt;

&lt;p&gt;If you are not familiar with these concepts then I strongly suggest you to first go through a comprehensive data structure and algorithm course like&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;strong&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/strong&gt;&lt;/a&gt; which explains essential data structure in detail. It's also very affordable as you can purchase this course on just $9.9 on crazy Udemy sales which happen every now and then.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0i6IB-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eqdglvvzak748l1xkvq.jpeg" alt="Best Udemy course to learn Algorithms and Data Structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-21-binary-tree-based-coding-problems-for-interviews"&gt;
  &lt;/a&gt;
  Top 21 Binary Tree Based Coding Problems for Interviews
&lt;/h2&gt;

&lt;p&gt;Now that you know how to solve binary tree-based coding problem using &lt;a href="https://www.educative.io/courses/recursion-for-coding-interviews-in-java?affiliate_id=5073518643380224"&gt;recursion&lt;/a&gt; and some tips about solving tree-based coding problems, here is a list of popular binary tree-based coding questions from software engineer or developer job interviews:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the difference between binary and binary search trees? (answer)&lt;/strong&gt;&lt;br&gt;
A Binary Tree is a basic structure with a simple rule that no parent must have more than 2 children whereas the Binary Search Tree is a variant of the binary tree following a particular order with which the nodes should be organized. In binary search tree, values of nodes on left sub tree are less than or equal to root and values of nods on right sub trees are greater than or equal to root. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a self-balanced tree? (answer)&lt;/strong&gt;&lt;br&gt;
Self-Balancing Binary Search Trees are height-balanced binary search trees that automatically keeps height as small as possible when insertion or deletion happens. Hence, for self-balancing BSTs, the minimum height must always be log₂(n) rounded down. In other word, A tree is balanced if, for every node in the tree, the height of its right and left subtrees differs by at most 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the AVL Tree? (answer)&lt;/strong&gt;&lt;br&gt;
An AVL tree is a self-balancing binary search tree. It was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform an inorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you print all nodes of a given binary tree using inorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you implement a postorder traversal algorithm? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/10/binary-tree-post-order-traversal-in.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you traverse a binary tree in postorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2017/05/binary-tree-post-order-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How are all leaves of a binary search tree printed? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/09/how-to-print-all-leaf-nodes-of-binary-tree-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you count a number of leaf nodes in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2016/12/how-to-count-number-of-leaf-nodes-in-java-recursive-iterative-algorithm.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform a binary search in a given array? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a given binary tree to double linked list in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a program to find a depth of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How is a binary search tree implemented? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.com/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform preorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.com/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html#axzz5ArdIFI7y"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you traverse a given binary tree in preorder without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/07/binary-tree-preorder-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have given a BST, where two nodes are swapped? How do you recover the original BST? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a binary tree to a binary search tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find the largest BST subtree of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a Java program to connect nodes at the same level as a binary tree? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a Trie data structure? (answer)&lt;/strong&gt;&lt;br&gt;
A trie is an ordered data structure, a type of search tree used to store associative data structures. It is also referred to as a Radix tree or Prefix tree.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the difference between the Binary tree and Trie?&lt;/strong&gt;&lt;br&gt;
Unlike a binary search tree, nodes in the trie do not store their associated key. Instead, a node's position in the trie defines the key with which it is associated. This distributes the value of each key across the data structure, and means that not every node necessarily has an associated value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are some of the most popular binary tree-based questions asked on Programming job interviews. You can solve them to become comfortable with tree-based problems.&lt;/p&gt;

&lt;p&gt;If you feel that your understanding of binary tree coding is inadequate and you can't solve these questions on your own, I suggest you go back and pick a good data structure and algorithm courses like &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;strong&gt;Easy to Advanced Data Structures&lt;/strong&gt;&lt;/a&gt; by William Fiset, a former Google engineer, and former &lt;strong&gt;ACM-ICPC world&lt;/strong&gt; finalist to refresh your knowledge about the binary tree and binary search tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPEgrqxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/609/1%2A_A20XCHNQAu8miDP_jzeDQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some more recommendations, here is my list of useful &lt;a href="http://javarevisited.blogspot.sg/2015/07/5-data-structure-and-algorithm-books-best-must-read.html"&gt;data structure algorithm books&lt;/a&gt; and &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;courses&lt;/a&gt; to start with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-youre-one-step-closer-to-the-coding-interview"&gt;
  &lt;/a&gt;
  Now You're One step closer to the Coding Interview
&lt;/h3&gt;

&lt;p&gt;These are some of the most common questions about binary tree data structure form coding interviews that help you to do really well in your interview.&lt;/p&gt;

&lt;p&gt;I have also shared a lot of &lt;a href="https://codeburst.io/100-coding-interview-questions-for-programmers-b1cf74885fb7"&gt;data structure questions&lt;/a&gt; on my &lt;a href="http://java67.com/"&gt;blog&lt;/a&gt;, so if you are really interested, you can always go there and search for them.&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;common coding, data structure, and algorithm questions&lt;/strong&gt; are the ones you need to know to successfully interview with any company, big or small, for any level of programming job.&lt;/p&gt;

&lt;p&gt;If you are looking for a programming or software development job in 2021, you can start your preparation with this &lt;a href="https://medium.com/javarevisited/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0"&gt;list of coding questions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This list provides good topics to prepare and also helps assess your preparation to find out your areas of strength and weakness.&lt;/p&gt;

&lt;p&gt;Good knowledge of data structure and algorithms is important for success in coding interviews and that's where you should focus most of your attention.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-learning"&gt;
  &lt;/a&gt;
  Further Learning*
&lt;/h4&gt;

&lt;p&gt;Here are some resources to level up your algorithms and coding skills for interviews:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5671464854355968?affiliate_id=5073518643380224"&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/a&gt;&lt;br&gt;
&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structure-and-algorithms-analysis%2F"&gt;Data Structure and Algorithms Analysis --- Job Interview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fads-part1"&gt;Algorithms and Data Structure Part1 and 2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/collection/5642554087309312/5724822843686912?affiliate_id=5073518643380224"&gt;Data Structures in Java: An Interview Refresher&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/collection/5668639101419520/5633779737559040?affiliate_id=5073518643380224"&gt;Grokking Dynamic Programming Patterns for Coding Interviews&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-data-structure-and-algorithms-resources-you-may-like"&gt;
  &lt;/a&gt;
  Other &lt;strong&gt;Data Structure and Algorithms Resources&lt;/strong&gt; you may like
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  75+ Coding Problems from Interviews (&lt;a href="http://www.java67.com/2018/05/top-75-programming-interview-questions-answers.html"&gt;questions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Free Courses to learn Data Structure and Algorithms (&lt;a href="http://www.java67.com/2019/02/top-10-free-algorithms-and-data.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Books to Prepare Technical Programming/Coding Job Interviews (&lt;a href="http://www.java67.com/2017/06/10-books-to-prepare-technical-coding-job-interviews.html"&gt;books&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Courses to Prepare for Programming Job Interviews (&lt;a href="http://javarevisited.blogspot.sg/2018/02/10-courses-to-prepare-for-programming-job-interviews.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  100+ Data Structure and Algorithms Interview Questions (&lt;a href="http://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html"&gt;questions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  My favorite Free Algorithms and Data Structure Courses on FreeCodeCamp (&lt;a href="https://medium.freecodecamp.org/these-are-the-best-free-courses-to-learn-data-structures-and-algorithms-in-depth-4d52f0d6b35a?sk=15709c9f6c9b4bfc639b3b7a1f9b3ef5"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  30+ linked list interview questions with a solution (&lt;a href="https://javarevisited.blogspot.com/2017/07/top-10-linked-list-coding-questions-and.html"&gt;linked list&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  30+ array-based interview questions for programmers (&lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html"&gt;array&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  40 Object Oriented Programming questions (&lt;a href="https://javarevisited.blogspot.com/2020/05/object-oriented-programming-questions-answers.html#axzz6vwZEctyQ"&gt;tips&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  5 Free Courses to learn Algorithms in-depth (&lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Algorithms books every Programmer should read (&lt;a href="http://www.java67.com/2015/09/top-10-algorithm-books-every-programmer-read-learn.html"&gt;books&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  Top 5 Data Structure and Algorithms Courses for Programmers (&lt;a href="https://javarevisited.blogspot.com/2018/11/top-5-data-structures-and-algorithm-online-courses.html#axzz5YFaOvjsh"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#closing-notes"&gt;
  &lt;/a&gt;
  Closing Notes
&lt;/h4&gt;

&lt;p&gt;Thanks, You made it to the end of the article ... Good luck with your programming interview! It's certainly not going to be easy, but by following this roadmap and guide, you are one step closer to becoming a Software Developer.&lt;/p&gt;

&lt;p&gt;If you like this article, then please share it with your friends and colleagues, and don't forget to follow &lt;a href="https://twitter.com/javinpaul"&gt;javinpaul&lt;/a&gt; on Twitter!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. --- If you need some FREE resources, you can check out this list of &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;free data structure and algorithm courses&lt;/a&gt; to start your preparation.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>algorithms</category>
      <category>coding</category>
    </item>
    <item>
      <title>How to use Angular resolvers to prefetch beers to the party</title>
      <author>Dany Paredes</author>
      <pubDate>Sat, 16 Oct 2021 07:57:23 +0000</pubDate>
      <link>https://dev.to/danywalls/how-to-use-angular-resolver-to-prefetch-beers-into-the-party-49g3</link>
      <guid>https://dev.to/danywalls/how-to-use-angular-resolver-to-prefetch-beers-into-the-party-49g3</guid>
      <description>&lt;p&gt;When we go to a party, I love to have all beers ready to drink and take  one, but sometimes take time to pick from fridge to the table, and stay waiting is not a good experience.&lt;/p&gt;

&lt;p&gt;The same happen with our users work with our angular apps, we show the component, but the data is not there or the HTTP request take time, and they are waiting.&lt;/p&gt;

&lt;p&gt;A good solution is show a loading until get the data, but if my users want the beers ready from the beginning ? No problem because Angular have a solution, &lt;em&gt;The Resolvers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Resolvers help us to prefetch data, before the router finish start the transition between components, and store.&lt;/p&gt;

&lt;p&gt;The resolvers are helpful to avoid show an empty component, and  have our data ready, before move to the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-angular-party"&gt;
  &lt;/a&gt;
  The Angular Party
&lt;/h2&gt;

&lt;p&gt;Let's put the resolver to test, building an app to show a list of beers from &lt;br&gt;
&lt;a href="https://api.punkapi.com/v2/beers"&gt;https://api.punkapi.com/v2/beers&lt;/a&gt; API, using a service.&lt;/p&gt;

&lt;p&gt;The app have 2 routes ComponentRoom and ResolverRoom, each one have a different user experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Component Room, use the pipe async to get the data from the service.&lt;/li&gt;
&lt;li&gt;The Resolver Room, use a resolver to get the data and the component access to it using the route.snapshot.data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-we-need-to-do-"&gt;
  &lt;/a&gt;
  What we need to do ?
&lt;/h2&gt;

&lt;p&gt;We will be going step by step.&lt;/p&gt;

&lt;p&gt;1- Create an interface for mapping the API response.&lt;br&gt;
2- Create the beer service, to get the data and provide a subscription with the result.&lt;br&gt;
3- Create 3 components, BeerRoom and ResolverRoom and HomeComponent.&lt;br&gt;
4- Create the resolver.&lt;br&gt;
5- Register it and define the app routes.&lt;/p&gt;

&lt;p&gt;Also, we include another actors as Router, ActivateRoute, Observable etc… But let to works! &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-beer-service"&gt;
  &lt;/a&gt;
  The beer service
&lt;/h2&gt;

&lt;p&gt;We create an interface Beer and a service BeerService to provide the data from the API.&lt;/p&gt;

&lt;p&gt;The Beer interface have some properties of the beer API response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kr"&gt;interface&lt;/span&gt;  &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;tagline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;first_brewed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The BeerService require  inject the httpClient, to make request to the API, also using Rxjs to return  an  observable array of Beer.&lt;/p&gt;

&lt;p&gt;We import httpClient and Injectable decorator, and create the getBeers method to return the result of the request to &lt;a href="https://api.punkapi.com/v2/beers"&gt;https://api.punkapi.com/v2/beers&lt;/a&gt;, also using the delay operator it makes the response slow for 5 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBeers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getBeers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.punkapi.com/v2/beers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read more about operators and services &lt;br&gt;
Delay Operator &lt;a href="https://www.learnrxjs.io/learn-rxjs/operators/utility/delay"&gt;https://www.learnrxjs.io/learn-rxjs/operators/utility/delay&lt;/a&gt;&lt;br&gt;
Services &lt;a href="https://angular.io/tutorial/toh-pt4"&gt;https://angular.io/tutorial/toh-pt4&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-home-component"&gt;
  &lt;/a&gt;
  The home component
&lt;/h2&gt;

&lt;p&gt;It is the home page with 2 links to get access to routes beer-room and resolver-room, using the directive routerLink.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Do you want to join to party and wait for the beers, or when you get in, the
    beers are ready ?
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-group btn-group-block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/beer-room']"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Component Room&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/resolver-room']"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Resolver Room&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;More about router link &lt;a href="https://angular.io/api/router/RouterLink"&gt;https://angular.io/api/router/RouterLink&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-beerroom-component"&gt;
  &lt;/a&gt;
  The BeerRoom Component
&lt;/h2&gt;

&lt;p&gt;The component Room, get the data from the beer service and resolve the subscription&lt;br&gt;
into the template, we declare the variable beers as observable and assign the observable from our service to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../beer.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-beer-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./beer-room.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerRoomComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Into the template, use the pipe async to wait until the subscription finish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"beers$ | async as beers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chip"&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let beer of beers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"beer?.image_url"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"avatar avatar-sm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        {{ beer.name }}
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read more directives and pipes.&lt;br&gt;
ngIf &lt;a href="https://angular.io/api/common/NgIf"&gt;https://angular.io/api/common/NgIf&lt;/a&gt;&lt;br&gt;
ngFor &lt;a href="https://angular.io/api/common/NgForOf"&gt;https://angular.io/api/common/NgForOf&lt;/a&gt;&lt;br&gt;
Pipe Async &lt;a href="https://angular.io/api/common/AsyncPipe"&gt;https://angular.io/api/common/AsyncPipe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-resolverroom-component"&gt;
  &lt;/a&gt;
  The ResolverRoom Component
&lt;/h2&gt;

&lt;p&gt;Close similar to the beer component, we inject ActivateRoute, it provides the data in the snapshot stored by the resolver into the beer variable.&lt;/p&gt;

&lt;p&gt;The vale of the beer into the snapshot is store into the beerRouterList variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will see how we configure the resolver in the route configuration.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resolver-room.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ResolverRoomComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;beerRouterList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beerRouterList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar like the BeerComponent we iterate over the beer array using ngFor directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chip"&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let beer of beerRouterList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"beer?.image_url"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"avatar avatar-sm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      {{ beer.name }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done, next steps are creating the resolver and configure it with the route configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-resolver"&gt;
  &lt;/a&gt;
  The Resolver
&lt;/h2&gt;

&lt;p&gt;The key player in the article, &lt;em&gt;the resolver&lt;/em&gt;, The BeerResolverService it implements the Resolve interface, the resolver works a data provider used by the router to resolve&lt;br&gt;
during the navigation process and the router, wait for it to complete before it get activated.&lt;/p&gt;

&lt;p&gt;It implements the resolve methods, same like the component we inject the beerService and return the observable beers$, also update the type return to match with Observable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../beer.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerResolverService&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="na"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#register-resolver-and-create-the-routes"&gt;
  &lt;/a&gt;
  Register resolver and create the routes.
&lt;/h2&gt;

&lt;p&gt;We don't  go deep how works router in angular, you can read more in details into the official documentation, but here  define 2 routes for our app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The path home, load the HomeComponent. &lt;/li&gt;
&lt;li&gt;The path beer-room, load the BeerRoomComponent.&lt;/li&gt;
&lt;li&gt;The path resolve-room load the component but with a special case, 
it uses the resolve to find the data provided by resolver and store into the beer variable beers and store into the into 
the route.snapshot.data with the key beers and the value returned by the subscription. &lt;/li&gt;
&lt;li&gt;The final path: ''' redirect any request to the home component.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HomeComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beer-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerRoomComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resolver-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ResolverRoomComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;beers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerResolverService&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;redirectTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pathMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-the-experience"&gt;
  &lt;/a&gt;
  Get the experience!!!
&lt;/h2&gt;

&lt;p&gt;Ready, we have the 2 experiences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Component you get into the room but not beer ready.&lt;/li&gt;
&lt;li&gt;The resolve allow you to move to the area only when it is ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;My personal opinion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have your room is getting a single value, I like to use the resolver.&lt;/p&gt;

&lt;p&gt;But If my component has multiple requests, I like to resolve the data into the component, because the user start to get results.&lt;/p&gt;

&lt;p&gt;What you think is better for our user, play with it and get your feeling!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/prefetch-data-with-resolver-angular?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hopefully, that will give you a bit of help with how and when to use resolver. If you enjoyed this post, share it!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@merittthomas?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Meritt Thomas&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/beers?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>You don't need a personal website (and why I no longer have one)</title>
      <author>Kathryn DiPippo</author>
      <pubDate>Sat, 16 Oct 2021 07:16:05 +0000</pubDate>
      <link>https://dev.to/pepperwood/you-dont-need-a-personal-website-and-why-i-no-longer-have-one-3ap9</link>
      <guid>https://dev.to/pepperwood/you-dont-need-a-personal-website-and-why-i-no-longer-have-one-3ap9</guid>
      <description>&lt;p&gt;I often tell the story of how a simple website made me fall in love with programming. I was given a brief training assignment to build a website from scratch using HTML and CSS, with no prior knowledge beforehand. Something about the immediate back-and-forth between building the code and testing the display made something &lt;em&gt;click&lt;/em&gt;. Soon after, I would spend hours after work building neat dashboards and landing pages with server-less implementations. Google Sheets used as a replacement for databases, hundreds of lines of jQuery added for interactivity. All of this was incorporated into my personal site, which served as both a list of my projects and demonstration of my abilities throughout the years.&lt;/p&gt;

&lt;p&gt;Several years and hundreds of hours later, I am retiring my personal site. This decision was not easy to come to, but I know that my goals and abilities at this moment make it disadvantageous to keep it up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preface-do-you-need-a-personal-site"&gt;
  &lt;/a&gt;
  Preface: Do you need a personal site?
&lt;/h1&gt;

&lt;p&gt;Before getting started, I would still advocate for creating your own personal site if there's a specific need that it fills. If you are a freelance website builder, a personal site is necessary as a way of showcasing your skills. Others with design-oriented positions may find that the complete creative control a personal site provides best projects your abilities than using other platforms like &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;. Additionally, a personal site can be useful as a central resource if you have a sizeable audience, even if the only content for display is a list of your social media profiles.&lt;/p&gt;

&lt;p&gt;I do not fall into the above categories. The goals of my own personal site are different from the goals of the examples listed above. Here are my main reasons for going forward with the deprecation and what may be insightful if you are skeptical about your own personal website:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-its-a-large-time-sink"&gt;
  &lt;/a&gt;
  1) It's a large time sink
&lt;/h1&gt;

&lt;p&gt;There's just something about my &lt;em&gt;personal&lt;/em&gt; website that makes me devote way more time than necessary to updating it. Routine visits to update the content to the latest updates inevitably become updates to the layout as well. The colors never feel correct, the layout is too short or too large or too cluttered, there's never enough transitions, there's too many transitions, etc. Every attempt to revamp the layout spins to a large, excessive TODO.&lt;/p&gt;

&lt;p&gt;I certainly have a greater appreciation towards UI designers. I am my own nightmare client, constantly asking for small, inconsequential changes on the website and never feeling satisifed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-its-a-larger-time-sink-than-it-deserves-to-be"&gt;
  &lt;/a&gt;
  2) It's a larger time sink than it deserves to be
&lt;/h1&gt;

&lt;p&gt;I recommend this article for additional info, as well as some interesting insights in the comments:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/profydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtZgRnDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rw0GR28D--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3338/43691f8f-0edd-4c5e-bbc3-584d46d5f3c6.png" alt="Profy.dev"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bzr4zTLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BJ-kbPDR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/140139/5881453b-c3cb-4812-a9e8-4c41db313b70.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/profydev/this-survey-among-60-hiring-managers-reveals-don-t-waste-your-time-on-a-react-portfolio-website-17ge" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Don't waste your time on a (React) portfolio website - 60+ hiring managers and a survey&lt;/h2&gt;
      &lt;h3&gt;Johannes Kettmann for Profy.dev ・ Aug 6 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The core summary boils down to a common sentiment around (software developer) hiring managers: a personal website is appealing to hiring managers but do not increase a candidate's chances. The primary emphasis and discussion in job interviews mostly focus on GitHub projects and contributions.&lt;/p&gt;

&lt;p&gt;In order for a personal website to be effective, it needs to be &lt;em&gt;fully functional&lt;/em&gt; (i.e. works with every phone and browser) and &lt;em&gt;updated&lt;/em&gt;. You either spend an excessive amount of time to satisfy these requirements and gain nothing &lt;em&gt;or&lt;/em&gt; risk being judged poorly if the website breaks while the hiring manager looks at it or it contains outdated information.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-other-platforms-fulfill-the-need-for-a-personal-website-better"&gt;
  &lt;/a&gt;
  3) Other platforms fulfill the need for a personal website better
&lt;/h1&gt;

&lt;p&gt;Breaking it down, the problems that a personal website solve can boil down to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A concise location with links to other platforms like LinkedIn, Twitter, etc.&lt;/li&gt;
&lt;li&gt;A portfolio with examples of project work with information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a programmer with a number of open source repositories, my GitHub profile is the best showcase of my skills as a developer. I could attach a link to these repos on my resume when reaching out to companies, but even that feels too low-level. Thankfully, &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-a-bio-to-your-profile"&gt;GitHub released an update in mid 2020 that added a customizable bio section visible on your profile page&lt;/a&gt;. I can highlight specific repositories and recent blog posts (if I was cool, I would automatically update a list of recent blog posts with a GitHub Actions workflow).&lt;/p&gt;

&lt;p&gt;Other platforms cover any other holes that a personal site would cover, namely linking to Dev.to as a blogging platform and linking to LinkedIn for my professional credentials. These platforms are way easier to maintain and keep updated, without the mental push to want to update the UI in tandem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-should-replace-your-personal-website-instead"&gt;
  &lt;/a&gt;
  What should replace your personal website instead?
&lt;/h1&gt;

&lt;p&gt;Since GitHub will be the main focus of discussion in potential discussions with companies, it should also be the main focus when searching for a replacement to a personal site.&lt;/p&gt;

&lt;p&gt;The steps I am taking in the deprecation process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub will act as my work portfolio:

&lt;ul&gt;
&lt;li&gt;Update GitHub bio with clear links to my LinkedIn (for professional experience) and Dev.to (for blogging)&lt;/li&gt;
&lt;li&gt;Update GitHub projects with well defined READMEs&lt;/li&gt;
&lt;li&gt;Highlight a handful of my highlighted GitHub repositories. Write articles about their motivation and development.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;LinkedIn will act as a resume (although my actual resume is now hosted on &lt;a href="https://resume.io"&gt;resume.io&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Update LinkedIn to link back to GitHub and Dev.to profiles.&lt;/li&gt;
&lt;li&gt;Update profile to mimic Resume credentials list&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dev.to will act as a blog

&lt;ul&gt;
&lt;li&gt;Update Dev.to profile to link back to GitHub and LinkedIn&lt;/li&gt;
&lt;li&gt;Write articles to fill in the remaining gaps a website would provide that a repo README can't fulfill, i.e. articles about obstacles encountered in projects and how you overcame them, reasoning behind selecting a specific toolchain, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this will amount to 3 social media platforms to represent myself professionally. The key and motivation was to create a network of clearly defined tools that are first-and-foremost easy to update.&lt;/p&gt;

&lt;p&gt;The true replacement for a personal site is something that will be updated on a regular basis above all else.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>programming</category>
    </item>
    <item>
      <title>One week into my new job, 2/3 of the team is on vacation for 2 weeks. What to do ?</title>
      <author>Sonam Shukla</author>
      <pubDate>Sat, 16 Oct 2021 07:07:08 +0000</pubDate>
      <link>https://dev.to/sonam_shukla_707cc1e27f23/one-week-into-my-new-job-23-of-the-team-is-on-vacation-for-2-weeks-what-to-do--2eig</link>
      <guid>https://dev.to/sonam_shukla_707cc1e27f23/one-week-into-my-new-job-23-of-the-team-is-on-vacation-for-2-weeks-what-to-do--2eig</guid>
      <description>&lt;p&gt;Hey!&lt;/p&gt;

&lt;p&gt;So I started this new job on Oct. 3rd. So far, I like it a lot. I've been hired as a Frontend Developer. The business is a Data Visualization company where we build interactive visual support for data-heavy company.&lt;/p&gt;

&lt;p&gt;My first project was to build a One Pager for a State Fair like event. I did it and they were impressed by the result given the time I spent on it. I want to keep this going..&lt;/p&gt;

&lt;p&gt;The team consists of 5 people:&lt;/p&gt;

&lt;p&gt;1 Backend Dev - External (knows 'nothing' of frontend according to him)&lt;/p&gt;

&lt;p&gt;1 Backend Dev - Internal (knows just enough frontend)&lt;/p&gt;

&lt;p&gt;1.5 Frontend Dev - The 0.5 is a part-time employee (I'm the 'main' frontend guy)&lt;/p&gt;

&lt;p&gt;1 CEO - Not a dev.&lt;/p&gt;

&lt;p&gt;I've been told by the CEO that he'd like me to become the 'main' frontend dev of the team. However the CEO and the 'main' backend guy are going on vacation. So i'm left alone, on my 2nd week, with legit NO TASKS other than 'get comfortable with project X,Y,Z' which I already did during the first week..&lt;/p&gt;

&lt;p&gt;Is there something I could build&lt;a href="https://developer.apple.com/forums/thread/692352"&gt;,&lt;/a&gt; make&lt;a href="https://developer.apple.com/forums/thread/692437"&gt;,&lt;/a&gt; rework to show them I'm worth it ? I also don't want them to think I haven't done much in those 2 weeks..&lt;/p&gt;

&lt;p&gt;Edit: the 2-3 guys left with me for these weeks are external workers. Meaning they work with us but on ONE project in which I do not work on yet. So there is no one to ask.&lt;/p&gt;

&lt;p&gt;Edit2: So I just finished my work day. I've read through the comments and I think that the best suggestions were :&lt;/p&gt;

&lt;p&gt;make a reusable template&lt;/p&gt;

&lt;p&gt;learn some backend&lt;/p&gt;

&lt;p&gt;fiddle with the code and see where bugs are hiding, etc&lt;/p&gt;

&lt;p&gt;Thank you all so much&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>php</category>
      <category>python</category>
    </item>
    <item>
      <title>Top 10 Java Articles for this week</title>
      <author>javinpaul</author>
      <pubDate>Sat, 16 Oct 2021 07:06:43 +0000</pubDate>
      <link>https://dev.to/javinpaul/top-10-java-articles-for-this-week-248o</link>
      <guid>https://dev.to/javinpaul/top-10-java-articles-for-this-week-248o</guid>
      <description>&lt;p&gt;Hello Java Devs, &lt;br&gt;
Being a Java programmer, editor of a Medium publication, and a Java blogger (&lt;a href="//java67.com/"&gt;java67&lt;/a&gt; and &lt;a href="//javarevisited.blogspot.com/"&gt;Javarevisited&lt;/a&gt;, I love curation and I have been publishing Java articles since last 10 years.&lt;/p&gt;

&lt;p&gt;This year, I haven't been regular to Dev.to and hardly publishes any posts here so I thought to start a weekly Java article round up on Dev.to. &lt;/p&gt;

&lt;p&gt;I plan to publish this kind of article every week to create a routing and going to include top Java articles from Dev.to, medium, and other popular Java blogs to share with you all devs who love Java. &lt;/p&gt;

&lt;p&gt;So here is our first edition. If you want to get included in this roundup, feel free to contact me. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-top-66-object-oriented-programming-questions-for-interviews"&gt;
  &lt;/a&gt;
  1. Top 66 Object Oriented Programming Questions for Interviews
&lt;/h3&gt;

&lt;p&gt;This is my article, where I have shared common OOP questions every Java programmer should know by heart before going into interviews. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/javinpaul" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr9YMUeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M48gEHzX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/101616/c488dc69-7dca-4855-b291-3711ce5ac7da.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javinpaul/top-50-object-oriented-programming-questions-for-interviews-4po1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 66  Object Oriented Programming Questions for Interviews&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ Oct 10 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-stay-in-the-loop-with-objectoriented-programming-basics-by-jburroughs"&gt;
  &lt;/a&gt;
  2. Stay in the L(OOP) with Object-Oriented Programming Basics by &lt;a class="mentioned-user" href="https://dev.to/jburroughs"&gt;@jburroughs&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jburroughs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7K0-XOS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vvj__Eh4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/706259/8bb55f32-ccfd-4c18-bca0-9e93c9ac4c77.jpg" alt="jburroughs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jburroughs/stay-in-the-l-oop-with-object-oriented-programming-basics-1dn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stay in the L(OOP) with Object-Oriented Programming Basics&lt;/h2&gt;
      &lt;h3&gt;Jordan Burroughs ・ Oct 9 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#3-lambda-expressions-in-java-by-jryther"&gt;
  &lt;/a&gt;
  3. Lambda Expressions in Java by &lt;a class="mentioned-user" href="https://dev.to/jryther"&gt;@jryther&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jryther" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12MBTuTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VvWkp8Lc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370512/8b0630c8-0583-4d5e-ae14-89b1c12601a2.JPG" alt="jryther"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jryther/lambda-expressions-in-java-5gme" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lambda Expressions in Java&lt;/h2&gt;
      &lt;h3&gt;Josh ・ Oct 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#4-faster-maven-builds-in-docker-by-nfrankel"&gt;
  &lt;/a&gt;
  4. Faster Maven builds in Docker by &lt;a class="mentioned-user" href="https://dev.to/nfrankel"&gt;@nfrankel&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nfrankel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vLCbsXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--R0hcZ9L8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/362557/8deaa19c-75d9-49d9-abc8-016cc7a68bf6.jpeg" alt="nfrankel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nfrankel/faster-maven-builds-in-docker-2584" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Faster Maven builds in Docker&lt;/h2&gt;
      &lt;h3&gt;Nicolas Frankel ・ Oct 10 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#maven&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#build&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-to-copy-files-in-java-example"&gt;
  &lt;/a&gt;
  How to copy files in Java? Example
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/javinpaul" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr9YMUeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M48gEHzX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/101616/c488dc69-7dca-4855-b291-3711ce5ac7da.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javinpaul/how-to-copy-files-in-java-example-3clf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to copy files in Java? Example&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ Oct 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#be-careful-of-this-java-optional-method-by-jarjanazy"&gt;
  &lt;/a&gt;
  Be careful Of This Java Optional Method by &lt;a class="mentioned-user" href="https://dev.to/jarjanazy"&gt;@jarjanazy&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jarjanazy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WQpyPWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--q5yFkYTj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/595508/25bfab90-0a98-4678-8270-4fa40d43b82a.JPG" alt="jarjanazy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jarjanazy/be-careful-of-this-java-optional-method-439" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Be careful Of This Java Optional Method&lt;/h2&gt;
      &lt;h3&gt;Abdulcelil Cercenazi ・ Oct 13 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#what-does-mean-in-java"&gt;
  &lt;/a&gt;
  What does  mean in Java?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/maddy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3VZWo3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s0X8YNi0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/578377/8c9867f9-a6e5-44db-951e-ab4f0d525cdb.jpg" alt="maddy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maddy/what-does-t-mean-in-java-a2e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What does &amp;lt;T&amp;gt; mean in Java?&lt;/h2&gt;
      &lt;h3&gt;Maddy ・ Oct 11 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#effective-java-strive-for-failure-atomicity"&gt;
  &lt;/a&gt;
  Effective Java: Strive for Failure Atomicity
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kylec32" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZAP85Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C2hzcMoR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9832/160703.png" alt="kylec32"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kylec32/effective-java-strive-for-failure-atomicity-4agd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Effective Java: Strive for Failure Atomicity &lt;/h2&gt;
      &lt;h3&gt;Kyle Carter ・ Oct 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#effective&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#exceptions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#5-devops-books-for-senior-developers"&gt;
  &lt;/a&gt;
  5 DevOps books for Senior Developers
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#-medium-httpsmediumcomjavarevisited5bestdevopsbooksforexperienceddevelopers78f9b4c5e4d5-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/5-best-devops-books-for-experienced-developers-78f9b4c5e4d5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQcHdrGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/5-best-devops-books-for-experienced-developers-78f9b4c5e4d5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Best DevOps Books for Experienced Developers | by javinpaul | Javarevisited | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ &lt;time&gt;Oct 13, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#five-mistakes-to-avoid-in-reactive-java"&gt;
  &lt;/a&gt;
  Five Mistakes to Avoid in Reactive Java
&lt;/h3&gt;

&lt;p&gt;How not to look like a noob.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/five-mistakes-to-avoid-in-reactive-java-786927ffd2f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMzOwgNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AOgikgnMBnlWHCGpa7QACpA.jpeg" alt="Randal Kamradt Sr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/five-mistakes-to-avoid-in-reactive-java-786927ffd2f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Five Mistakes to Avoid in Reactive Java | by Randal Kamradt Sr | Javarevisited | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Randal Kamradt Sr ・ &lt;time&gt;Oct 11, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;That's all for this week. If you have any good article which should be in this list, feel free to suggest in comments. &lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>development</category>
    </item>
    <item>
      <title>🔴 HTTP Request/Response Practical Workflow 🧐</title>
      <author>Dheeraj Kakkar</author>
      <pubDate>Sat, 16 Oct 2021 06:57:02 +0000</pubDate>
      <link>https://dev.to/techiedheeraj/http-requestresponse-practical-workflow-3pda</link>
      <guid>https://dev.to/techiedheeraj/http-requestresponse-practical-workflow-3pda</guid>
      <description>&lt;p&gt;🔥 🔥 ALL ABOUT HTTP Packet INTERNAL DETAILS ARE SHARED  &lt;br&gt;
HOW IT WORKS AND BEST PRACTICE TO IMPLEMENT WEBAPP 🤷‍♂️🔥🔥🔥  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aGOXrQj93dI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>computerscience</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 44, Summary of the week, examples and exercises</title>
      <author>Aatmaj</author>
      <pubDate>Sat, 16 Oct 2021 06:05:44 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-44-summary-of-the-week-examples-and-exercises-3lfg</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-44-summary-of-the-week-examples-and-exercises-3lfg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-have-a-quick-summary-of-the-week"&gt;
  &lt;/a&gt;
  Today we will have a quick summary of the week
&lt;/h2&gt;




&lt;p&gt;Let us see a sample OOP program&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makenoise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bepetted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pet me"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;canine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shownails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"My nails are long"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I am a dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bone"&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makenoise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Woof!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;canine&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"milk"&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"I am a cat"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makenoise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"meow!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Tommy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Tommy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makenoise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Tommy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bepetted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tommy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Dina&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Dina&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shownails&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Dina&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bepetted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Dina&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I am a dog
Woof!
Pet me
bone
I am a cat
My nails are long
Pet me
milk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-correct-the-following-code"&gt;
  &lt;/a&gt;
  1) Correct the following code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 6, in &amp;lt;module&amp;gt;
    sample.fun()
TypeError: fun() missing 1 required positional argument: 'self'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-correct-the-following-code"&gt;
  &lt;/a&gt;
  2) Correct the following code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mysample&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Traceback (most recent call last):
  File "main.py", line 6, in &amp;lt;module&amp;gt;
    mysample.fun()
TypeError: fun() takes 0 positional arguments but 1 was given
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-extend-the-above-program-to-include-a-class-tiger-and-class-wild-add-attribute-habitat-to-wild-and-pet-use-iterable-for-in-loop-to-call-out-the-methods-hint-use-try-except"&gt;
  &lt;/a&gt;
  3) Extend the above program to include a class tiger and class wild. Add attribute habitat to wild and pet. Use iterable for in loop to call out the methods (hint use try except)
&lt;/h4&gt;




&lt;h3&gt;
  &lt;a href="#day-41"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-41-inheritance-in-python-53la"&gt;Day 41&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We learnt about inheritance in Python&lt;br&gt;
 Inheritance is an OOP concept which provides flexibility and code reusability to the program. We can make changes to the program without altering much code. We can also extend the code by adding new functionality without much effort. Inheritance in Python is achieved by adding the name of the super classes inside the constructor of the new class. In this part we studied how functions and properties are inherited from the super class. But object constructors are not inherited by the subclasses, however the number of arguments for constructors must be the same for both if the classes. Functions are overloaded in the subclasses, that is the functions with same name can be present in both the subclass and the super class. In such cases, the functions of the sub-class are considered as effective. Constructors and methods of the superclass can be called by the &lt;code&gt;super()&lt;/code&gt; method in case of overloading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-42"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-42-polymorphism-a61"&gt;Day 42&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this part we learnt about polymorphism, yet another OOP feature. Just like inheritance, polymorphism too does help in making the program more extendable and flexible. Using polymorphism, we can create new subclasses without doing much change into the superclass. Polymorphism is a technique by which subclasses can be considered as types of super-classes. Polymorphism in Python is achieved through overwriting of methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#day-43"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-43-ddd-and-more-on-oop-2npf"&gt;Day 43&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this part we covered some more of OOP. We covered concepts which are not directly supported by Python, like abstraction and interfaces. We saw a brief about duck typing and how to resolve the Deadly Diamond of Death. This part was just intended to bring together a feeling of completeness regarding OOP concepts and not a complete guide towards OOP.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#intermediate-part-of-the-course-ends-today"&gt;
  &lt;/a&gt;
  Intermediate part of the course ends today.
&lt;/h2&gt;




&lt;p&gt;So friends, this marks the end of the Learning Python intermediate course. I will be soon providing you all with the summary of the intermediate course.&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Connect To Postgres database running on a Docker container using psql </title>
      <author>ankit-brijwasi</author>
      <pubDate>Sat, 16 Oct 2021 05:54:44 +0000</pubDate>
      <link>https://dev.to/ankitbrijwasi/connect-to-postgres-database-running-on-a-docker-container-using-psql-4o0f</link>
      <guid>https://dev.to/ankitbrijwasi/connect-to-postgres-database-running-on-a-docker-container-using-psql-4o0f</guid>
      <description>&lt;p&gt;Recently while working, I was required to connect to a database that was running on a docker container using psql.&lt;/p&gt;

&lt;p&gt;If you are also dealing with something like this, then, follow along&lt;/p&gt;

&lt;p&gt;1. Start the docker container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; container_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2. Now run the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;psql &lt;span class="nt"&gt;-h&lt;/span&gt; localhost &lt;span class="nt"&gt;-p&lt;/span&gt; 5432 &lt;span class="nt"&gt;-U&lt;/span&gt; username &lt;span class="nt"&gt;-d&lt;/span&gt; database_name
Password &lt;span class="k"&gt;for &lt;/span&gt;user username:

psql &lt;span class="o"&gt;(&lt;/span&gt;12.8 &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu 12.8-0ubuntu0.20.04.1&lt;span class="o"&gt;))&lt;/span&gt;
Type &lt;span class="s2"&gt;"help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help.
&lt;span class="nv"&gt;database_name&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it&lt;br&gt;
Thank you for reading!&lt;br&gt;
Have a nice day!😇&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>docker</category>
      <category>database</category>
    </item>
    <item>
      <title>300+ Bootstrap UI Components and Blocks</title>
      <author>GrayGrids</author>
      <pubDate>Sat, 16 Oct 2021 05:54:35 +0000</pubDate>
      <link>https://dev.to/bootstrap/ui-components-5a9k</link>
      <guid>https://dev.to/bootstrap/ui-components-5a9k</guid>
      <description>&lt;p&gt;The UI components are the building blocks for these interfaces. They can be anything from navigation bars or buttons to menus or dialogues. You can use different components for different purposes depending on what your user is trying to accomplish on your website.&lt;/p&gt;

&lt;p&gt;Our team recently, built Ayro UI from scratch which offers 300+ Free and Premium Bootstrap UI Components for almost any kind of website and landing pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---w4qY3gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/ayro-features.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---w4qY3gA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/ayro-features.png" alt="Ayro UI Features!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We made &lt;a href="https://ayroui.com"&gt;Ayro UI&lt;/a&gt; into - a complete UI toolkit that comes with a diverse collection of UI components, minimal design system and elements that are ready to use. Just copy-paste and you are done.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are wondering what are the main features of &lt;a href="https://ayroui.com"&gt;Ayro UI&lt;/a&gt; here are the feature highlights -&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-components"&gt;
  &lt;/a&gt;
  UI Components:
&lt;/h2&gt;

&lt;p&gt;Massive collection of &lt;a href="https://ayroui.com/components"&gt;UI Components&lt;/a&gt; categorized into 3 different categories such as - Application UI, Marketing and Core Components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ayroui.com/components"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObYeRB3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/application.png" alt="App UI Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#website-sections-amp-blocks-"&gt;
  &lt;/a&gt;
  Website Sections &amp;amp; Blocks :
&lt;/h2&gt;

&lt;p&gt;Essential sections and blocks for different kind of websites. All you need to copy-paste on your HTML file to start using!.&lt;br&gt;
&lt;a href="https://ayroui.com/components"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4GyKcG8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/marketing.png" alt="Marketing UI Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-and-premium-components"&gt;
  &lt;/a&gt;
  Free and Premium Components:
&lt;/h2&gt;

&lt;p&gt;Ayro UI is free and premium component library, its free Core version is available on &lt;a href="https://github.com/ayroui/free-ui-components"&gt;GitHub&lt;/a&gt;. All core components are 100% free and open-source, including 50+ Application and Marketing UI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fhvMxyKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/ayroui-core-gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhvMxyKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/ayroui-core-gh.png" alt="Core Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-library"&gt;
  &lt;/a&gt;
  UI Library:
&lt;/h2&gt;

&lt;p&gt;Yes, it also follows a consistent and minimal design system that you can discover when you start using it.&lt;br&gt;
&lt;a href="https://ayroui.com/components"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PaPPEXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/core.png" alt="Marketing UI Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-example-templates-and-counting"&gt;
  &lt;/a&gt;
  4 Example Templates and Counting:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1muZ4wNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/bonus-templates.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1muZ4wNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uideck.com/wp-content/uploads/2021/10/bonus-templates.png" alt="Ayro UI Templates"&gt;&lt;/a&gt;&lt;br&gt;
Packed with 4 example templates for - App, SaaS, Startup and Business websites. More than enough to kickstart web projects with Ayro UI and explore the library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-5-based"&gt;
  &lt;/a&gt;
  Bootstrap 5 Based:
&lt;/h2&gt;

&lt;p&gt;Built-with &lt;a href="https://getbootstrap.com/"&gt;Bootstrap 5&lt;/a&gt; most popular front-end framework in developer community. So, you will have more flexibility and freedom while using these components or developing a site.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Loops in javascript</title>
      <author>Hemanth Kumar R</author>
      <pubDate>Sat, 16 Oct 2021 05:45:19 +0000</pubDate>
      <link>https://dev.to/hemanth60505431/loops-in-javascript-29gd</link>
      <guid>https://dev.to/hemanth60505431/loops-in-javascript-29gd</guid>
      <description>&lt;p&gt;Loops are used in JavaScript to perform repeated tasks based on a condition. Conditions typically return true or false when analysed. A loop will continue running until the defined condition  returns false.&lt;/p&gt;

&lt;p&gt;The three most common types of loops are&lt;br&gt;
• for&lt;br&gt;
• while&lt;br&gt;
• do while&lt;/p&gt;

&lt;p&gt;for loop&lt;/p&gt;

&lt;p&gt;Syntax&lt;/p&gt;

&lt;p&gt;for ([initialization]); [condition]; [final-expression]) {&lt;br&gt;
   // statement&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;The javascript for statement consists of three expressions and a statement:&lt;br&gt;
Description&lt;br&gt;
• Initialization - Run before the first execution on the loop. This expression is commonly used to create counters. Variables created here are scoped to the loop. Once the loop has finished it’s execution they are destroyed.&lt;br&gt;
• Condition - Expression that is checked prior to the execution of every iteration. If omitted, this expression evaluates to true. If it evaluates to true, the loop’s statement is executed. If it evaluates to false, the loop stops.&lt;br&gt;
• Final-expression - Expression that is run after every iteration. Usually used to increment a counter. But it can be used to decrement a counter too.&lt;br&gt;
• statement - Code to be repeated in the loop&lt;br&gt;
any of these three expressions or the statement can be omitted. For loops are commonly used to count a certain number of iterations to repeat a statement. Use a break statement to exit the loop before the condition expression evaluates to false.&lt;br&gt;
Common Pitfalls&lt;br&gt;
Exceeding the bounds of an array&lt;br&gt;
When indexing over an array many times it is easy to exceed the bounds of the array (ex. try to reference the 4th element of a 3 element array).&lt;br&gt;
      // This will cause an error.&lt;br&gt;
          // The bounds of the array will be exceeded.&lt;br&gt;
        var arr = [ 1, 2, 3 ];&lt;br&gt;
        for (var i = 0; i &amp;lt;= arr.length; i++) {&lt;br&gt;
        console.log(arr[i]);&lt;br&gt;
        }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    output:
    1
    2
    3
    undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There are two ways to fix this code. Set the condition to either i &amp;lt; arr.length or i &amp;lt;= arr.length - 1&lt;br&gt;
Examples&lt;br&gt;
Iterate through integers from 0-8&lt;br&gt;
    for (var i = 0; i &amp;lt; 9; i++) {&lt;br&gt;
    console.log(i);&lt;br&gt;
    }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output:
0
1
2
3
4
5
6
7
8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Break out of a loop before condition expression is false&lt;br&gt;
    for (var elephant = 1; elephant &amp;lt; 10; elephant+=2) {&lt;br&gt;
       if (elephant === 7) {&lt;br&gt;
                break;&lt;br&gt;
        }&lt;br&gt;
        console.info('elephant is ' + elephant);&lt;br&gt;
    }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;output:
elephant is 1
elephant is 3
elephant is 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;for...in loop&lt;br&gt;
The for...in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.&lt;br&gt;
    for (variable in object) {&lt;br&gt;
    ...&lt;br&gt;
    }&lt;br&gt;
Required/OptionalParameterDescriptionRequiredVariableA different property name is assigned to variable on each iteration.OptionalObjectObject whose enumerable properties are iterated.&lt;br&gt;
Examples&lt;br&gt;
    // Initialize object.&lt;br&gt;
    a = { "a": "Athens", "b": "Belgrade", "c": "Cairo" }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Iterate over the properties.
var s = ""
for (var key in a) {
  s += key + ": " + a[key];
 s += "&amp;lt;br /&amp;gt;";
  }
document.write (s);

// Output:
// a: Athens
// b: Belgrade
// c: Cairo

// Initialize the array.
var arr = new Array("zero", "one", "two");

// Add a few expando properties to the array.
arr["orange"] = "fruit";
arr["carrot"] = "vegetable";

// Iterate over the properties and elements.
var s = "";
for (var key in arr) {
 s += key + ": " + arr[key];
 s += "&amp;lt;br /&amp;gt;";
}

document.write (s);

// Output:
//   0: zero
//   1: one
//   2: two
//   orange: fruit
//   carrot: vegetable

// Efficient way of getting an object's keys using an expression within    the for-in loop's conditions
var myObj = {a: 1, b: 2, c:3}, myKeys = [], i=0;
for (myKeys[i++] in myObj);

document.write(myKeys);

//Output:
//   a
//   b
//   c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;for...of loop&lt;br&gt;
The for...of statement creates a loop iterating over iterable objects (including Array, Map, Set, Arguments object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.&lt;br&gt;
    for (variable of object) {&lt;br&gt;
        statement&lt;br&gt;
    }&lt;br&gt;
DescriptionvariableOn each iteration a value of a different property is assigned to variable.objectObject whose enumerable properties are iterated.&lt;br&gt;
 Examples&lt;br&gt;
 Array&lt;br&gt;
     let arr = [ "fred", "tom", "bob" ];&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; for (let i of arr) {
     console.log(i);
 }

 // Output:
 // fred
 // tom
 // bob
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Map&lt;br&gt;
      var m = new Map();&lt;br&gt;
       m.set(1, "black");&lt;br&gt;
       m.set(2, "red");&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; for (var n of m) {
     console.log(n);
  }

 // Output:
 // 1,black
 // 2,red
 Set
  var s = new Set();
  s.add(1);
  s.add("red");

  for (var n of s) {
     console.log(n);
   }

  // Output:
  // 1
  // red
Arguments object
 // your browser must support for..of loop
 // and let-scoped variables in for loops

  function displayArgumentsObject() {
      for (let n of arguments) {
         console.log(n);
       }
    }


  displayArgumentsObject(1, 'red');

   // Output:
   // 1
   // red
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;while loop&lt;br&gt;
The while loop starts by evaluating the condition. If the condition is true, the statement(s) is/are executed. If the condition is false, the statement(s) is/are not executed. After that, while loop ends.&lt;br&gt;
Here is the syntax for while loop:&lt;br&gt;
Syntax:&lt;br&gt;
    while (condition)&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{

 statement(s);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;statement(s): A statement that is executed as long as the condition evaluates to true.&lt;br&gt;
condition: Here, condition is a Boolean expression which is evaluated before each pass through the loop. If this condition evaluates to true, statement(s) is/are executed. When condition evaluates to false, execution continues with the statement after the while loop.&lt;br&gt;
Example:&lt;br&gt;
     var i = 1;&lt;br&gt;
        while (i &amp;lt; 10) &lt;br&gt;
        {&lt;br&gt;
         console.log(i);&lt;br&gt;
         i++; // i=i+1 same thing&lt;br&gt;
        }&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    Output:
    1 
    2 
    3 
    4
    5
    6
    7
    8
    9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;How to Iterate with JavaScript While Loops&lt;br&gt;
While loops will run as long as the condition inside the ( ) is true. Example:&lt;br&gt;
    while(condition){&lt;br&gt;
    code...&lt;br&gt;
    }&lt;br&gt;
Hint 1:&lt;br&gt;
Use a iterator variable such as i in your condition&lt;br&gt;
    var i = 0;&lt;br&gt;
    while(i &amp;lt;= 4){&lt;br&gt;
    }&lt;br&gt;
Spoiler Alert Solution Ahead!&lt;br&gt;
Solution:&lt;br&gt;
    // Setup&lt;br&gt;
    var myArray = [];&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Only change code below this line.
var i = 0;
while (i &amp;lt;= 4){
  myArray.push(i);
  i++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Do...while loop&lt;br&gt;
The do...while loop is closely related to while loop. In the do while loop, the condition is checked at the end of the loop.&lt;br&gt;
Here is the syntax for do...while loop:&lt;br&gt;
        Syntax:&lt;br&gt;
    do {&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  *Statement(s);*

} while (*condition*);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;statement(s): A statement that is executed at least once before the condition or Boolean expression is evaluated and is re-executed each time the condition evaluates to true.&lt;br&gt;
condition: Here, a condition is a Boolean expression. If Boolean expression evaluates to true, the statement is executed again. When Boolean expression evaluates to false, the loops ends.&lt;br&gt;
Example:&lt;br&gt;
    var i = 0;&lt;br&gt;
    do {&lt;br&gt;
     i = i + 1;&lt;br&gt;
     console.log(i);&lt;br&gt;
    } while (i &amp;lt; 5);&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;How to Iterate with JavaScript Do…While Loops&lt;br&gt;
• Do...While loops makes sure that the code is executed at least once, and after the execution, if the condition inside the while() is true, it continues with the loop, otherwise it stop.&lt;br&gt;
Solution:&lt;br&gt;
    var myArray = [];&lt;br&gt;
    var i = 10;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
 myArray.push(i);
 i++;
} while(i &amp;lt;= 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>What Problems of Bitcoin Does Ethereum Solve?</title>
      <author>kim-jos</author>
      <pubDate>Sat, 16 Oct 2021 05:35:39 +0000</pubDate>
      <link>https://dev.to/jokim/what-problems-does-ethereum-solve-3geg</link>
      <guid>https://dev.to/jokim/what-problems-does-ethereum-solve-3geg</guid>
      <description>&lt;p&gt;Ethereum was created by Vitalik and his team as an attempt to improve the features of Bitcoin. This post will discuss the problems that Ethereum solves (this post will not cover PoW and PoS).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main difference between Bitcoin and Ethereum is Ethereum's ability to store code that executes programs.&lt;/strong&gt; This means that it gives any application built on the blockchain the ability to become decentralized. We now wouldn't need a super server to store all our data but we would instead use everyone's computer to execute apps and programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does Ethereum make this possible?&lt;/strong&gt;&lt;br&gt;
Ethereum uses a feature called a &lt;strong&gt;smart contracts&lt;/strong&gt;. It allows anyone to code on the blockchain. Bitcoin also has this feature using Bitcoin Script, a programming language, but its major downfall is that it isn't Turing Complete. meaning that you cannot implement all types of logic that you can think of, in other words it is very limited. The main reason Bitcoin Script is not Turing Complete is because it cannot implement loops (e.g. for loop, while loop, etc.). The reason loops were not created in Bitcoin Script was because it could slow down the process tremendously because loops can run forever especially if some malicious user had the motive to do so.&lt;/p&gt;

&lt;p&gt;However, Vitalik, the creator of Ethereum, decided that it was necessary for the language to be Turing Complete and went on to create Ethereum and Solidity. Ethereum is a protocol like Bitcoin and Solidity is a Turing Complete language that you can write smart contracts in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem 1: What if someone creates a virus in the network?&lt;/strong&gt;&lt;br&gt;
If a malicious user creates a virus then everyone will have a virus copied on to their network. Ethereum implements something called the &lt;strong&gt;Ethereum Virtual Machine(EVM)&lt;/strong&gt;. Whenever someone decides to participate in the Ethereum network you actually participate as an EVM. This basically means that there is another computer(virtual machine) running inside your computer and every code that gets executed in the virtual machine run there only. So any virus that attempts to access your camera or files on your hard drive would be prevented from doing so.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem 2: What if someone creates an infinite loop that slows down the network?&lt;/strong&gt;&lt;br&gt;
Ethereum implements something called &lt;strong&gt;Gas&lt;/strong&gt;. Gases are a price to every operation that is run on the network. This incentivizes everyone to write really good, efficient code because the more operation you have the more expensive it is to run. Now people may ask whether Ether and Gas are two different things. Yes, they are. The reason Ether is not used as a payment method for smart contracts is because the value of Ether fluctuates a lot. But there is a conversion rate for Gas into Ether which is decided by community consensus. &lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
  </channel>
</rss>
