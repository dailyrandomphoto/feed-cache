<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to check if a python string contains a substring?</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 26 May 2021 11:43:15 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-check-if-a-python-string-contains-a-substring-2hal</link>
      <guid>https://dev.to/hrishikesh1990/how-to-check-if-a-python-string-contains-a-substring-2hal</guid>
      <description>&lt;p&gt;In this python tutorial, we look at how you can check if a python string contains a substring. We look at the various methods and explain their use cases in detail.    &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this link.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-check-if-a-python-string-contains-a-substring"&gt;Why check if a python string contains a substring?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-in-operator"&gt;Using the in operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#using-string-methods"&gt;Using String Methods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#using-index"&gt;index() method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-find"&gt;find() method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats"&gt;Limitations and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-check-if-a-python-string-contains-a-substring"&gt;
  &lt;/a&gt;
  Why check if a python string contains a substring?
&lt;/h2&gt;

&lt;p&gt;We check if a python string contains a substring for multiple reasons, however, its most commonly used in conditional statements. This runs a code in case a substring exists and another if the python string does not contain the substring. Another common use is to find the index of the substring in the python string.&lt;/p&gt;

&lt;p&gt;If you are coming from another language, it most likely that you have come across the &lt;code&gt;contains&lt;/code&gt; function. Python also supports the &lt;code&gt;__contains__&lt;/code&gt; method, however, it also supports a few faster and more readable methods to check if a python string contains a substring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-raw-in-endraw-operator"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;in&lt;/code&gt; operator:
&lt;/h2&gt;

&lt;p&gt;The in operator is the most easiest and pythonic method to check if a python string contains a substring. The in and not in are membership operators, they take in two arguments and evaluate if one is a member of another. They return True in case it is a member and False in case it isn't. And hence it is used to check if a substring is a member of a python string. This is an efficient alternative to the &lt;strong&gt;contains&lt;/strong&gt; method and can also be used to check if an item exists in a list.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; is mainly used when the user only wants to check if it python string contains the substring and also because it is more readable. However, in case you are looking to return the index of the substring, the next solution is the goto.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-raw-in-endraw-"&gt;
  &lt;/a&gt;
  Syntax of &lt;code&gt;in&lt;/code&gt;:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;'substring` in string
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for &lt;code&gt;not in&lt;/code&gt; is the same. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-to-check-if-python-string-contains-a-substring"&gt;
  &lt;/a&gt;
  Code to check if python string contains a substring:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"Hire"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output - Exists
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; operator is case sensitive, and the above code would've returned a false if the substring was &lt;code&gt;"hire"&lt;/code&gt; and hence is a good practice to use it with the &lt;code&gt;.lower()&lt;/code&gt; method. This method converts the string to lower case. As strings are immutable, this would not affect the original string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"hire"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Exists"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Output - Exists
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-string-methods"&gt;
  &lt;/a&gt;
  Using String Methods:
&lt;/h2&gt;

&lt;p&gt;Python comes with a few string methods that can be used to check if a python string contains a substring. We look at the &lt;code&gt;find()&lt;/code&gt; and &lt;code&gt;Index()&lt;/code&gt; methods. These methods stand out from &lt;code&gt;in&lt;/code&gt; as they return the index of the substring. However, they come with their cons we discuss them more in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-index-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;index()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;string.index()&lt;/code&gt; method returns the starting index of the substring passed as a parameter. In this way, it could be used to check if a python string contains a substring. However, a major con is that in case the substring does not exist this method returns a &lt;code&gt;ValueError&lt;/code&gt;  and hence it needs to be placed inside a &lt;code&gt;Try Except&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax of &lt;code&gt;index()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;string&lt;/code&gt; is the python string and &lt;code&gt;value&lt;/code&gt; in the substring. The syntax also contains two optional parameters &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; these are used in case you are looking for a substring within a particular index. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code using &lt;code&gt;index()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sti&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;#Output = 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar given &lt;code&gt;index()&lt;/code&gt; is case sensitive and using the .lower() is recommended.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sti&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;#Output = 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-find-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;find()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;string.find()&lt;/code&gt; is another method that can be used to check if the python string contains the substring. Similar to &lt;code&gt;index()&lt;/code&gt; , &lt;code&gt;find()&lt;/code&gt; also returns the starting index of the substring. But unlike the &lt;code&gt;index()&lt;/code&gt; method it does not return a &lt;code&gt;ValueError&lt;/code&gt; in case the substring does not exist but rather returns &lt;code&gt;-1&lt;/code&gt; which is the index of the left-most string. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax of &lt;code&gt;find()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax and parameters of &lt;code&gt;find()&lt;/code&gt;  are the same as &lt;code&gt;index()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code using &lt;code&gt;find()&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, since &lt;code&gt;find()&lt;/code&gt; is also case sensitive the following code can be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hire"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire the top freelancers"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hire"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Dose not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remember to use the &lt;code&gt;.lower()&lt;/code&gt; methods as all the methods are case sensitive.&lt;/li&gt;
&lt;li&gt;Which using the &lt;code&gt;index()&lt;/code&gt; method to ensure it is placed inside an try and except condition.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>6 Amazing Tips To Boost Your SEO</title>
      <author>Raymond Halliwell</author>
      <pubDate>Wed, 26 May 2021 10:56:59 +0000</pubDate>
      <link>https://dev.to/raymondhalliwell/6-amazing-tips-to-boost-your-seo-38ee</link>
      <guid>https://dev.to/raymondhalliwell/6-amazing-tips-to-boost-your-seo-38ee</guid>
      <description>&lt;p&gt;While there is a lot of SEO advice and tips out there, most don’t deliver desirable results. And some are already outdated and seem to work no more with Google’s constant change in algorithm. With an abundance of tips and tricks flooding the internet, choosing the right one can be  challenging. That is why &lt;a href="https://twitter.com/raymondhalliwel"&gt;Raymond Halliwell&lt;/a&gt;, a digital marketing expert on actionable SEO tips that have proven to improve organic rankings without getting penalized. It’s time to let go of those that aren’t working and embrace the real deal that will Improve your search rankings. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-relevant-subtopics-to-existing-contents"&gt;
  &lt;/a&gt;
  Add relevant subtopics to existing contents
&lt;/h2&gt;

&lt;p&gt;It is not okay to miss essential points during the first draft that could have improved your page rank in search engines. Keywords might be less ranked due to missing subtopics which might lead to less visibility for your site. Rank the subtopics and include major keywords to improve ranking.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-backlinks-from-one-page-on-your-site-to-another"&gt;
  &lt;/a&gt;
  Add backlinks from one page on your site to another
&lt;/h2&gt;

&lt;p&gt;Backlinks are interlinked that are added to new pages. These are links from a page on one website to another to give easy navigation to visitors. To increase your site ranking, add more interlinks to the pages. Search for relevant opportunities with high authorities and interlink them on your page. You can do this by searching for the website URL with the keyword you are looking for. If there are many keywords, filter them and prioritize the ones with the highest authority over the others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-for-competing-backlinks-that-undermine-and-decrease-the-performance-of-your-content"&gt;
  &lt;/a&gt;
  Check for competing Backlinks that undermine and decrease the performance of your content
&lt;/h2&gt;

&lt;p&gt;There is room for improvement if your keyword is not yet ranked as number one. Check for the ranking first with a SERP checker. Competing Backlinks can be a result of other pages having a lot of referring domains that pushed the ranking of your site back. Look for areas where your page beats others and use the contents. That is, go to pages with less view, reach out to them, direct and link them to your page to improve traffic and visibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#revamp-your-blog-posts-as-video-content"&gt;
  &lt;/a&gt;
  Revamp your blog posts as video content
&lt;/h2&gt;

&lt;p&gt;As individuals, we are different and we have different preferences. This is also applicable to content we view on the internet. Different people prefer different content formats for their business websites. Hence you should find out which format your audience prefers and tailor your content format according to your target audience’s needs. Most people prefer video formats. Therefore, you can change your blog post to videos or embed videos related to topics or keywords that most people search for on YouTube on your blog posts to reach a wider audience. This will level up your ranking on the Google search engine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-and-fix-pages-that-have-broken-backlinks"&gt;
  &lt;/a&gt;
  Check and fix pages that have broken backlinks
&lt;/h2&gt;

&lt;p&gt;Backlinks that lead to dead pages are not useful according to SEO. They no longer exist nor do they help other active pages in their ranking. To know a broken backlink, filter for error 404 pages in a Link report, and if pages with referring domains exist, then the backlinks are broken.&lt;/p&gt;

&lt;p&gt;Broken backlinks can be fixed by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Reinstating dead pages deleted by mistake.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redirecting a URL of dead pages to new URLs or redirect nonexistent dead pages with a similar page to the old URL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Requesting for a link change. Only fix dead pages with high-quality backlinks or leave them at 404. To check if a page backlink is of good quality, go to the backlinks report.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#convert-custommade-infographics-illustrations-images-etc-into-backlinks"&gt;
  &lt;/a&gt;
  Convert custom-made infographics, illustrations, images, etc into backlinks
&lt;/h2&gt;

&lt;p&gt;Others might make use of these images in their contents and link back to the image source instead of the main page (source link). To check if people are using your image without proper linking, go to any image on your website, right-click then click on “Search Google” for Image options available on the menu. You can also copy and paste the link to your website on Site Explore. For this, click on Backlinks report, look for links that have .jpg, or .PNG, in the URLs of the backlinks and you will see the sites that have inappropriately linked their contents to your images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;We hope these tips given by Raymond Halliwell can be of help in your SEO journey. The good thing is it doesn’t take time and it can be implemented in a few hours. With these, watch your website pages rank high in no time.  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://getjoys.net/technology/tips-to-boost-seo/"&gt;getjoys.net&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>digitalmarketing</category>
      <category>raymondhalliwell</category>
      <category>seo</category>
      <category>socialmediamarketing</category>
    </item>
    <item>
      <title>5 Interview Questions
Every JavaScript Developer Should Know</title>
      <author>Vikram Aditya</author>
      <pubDate>Wed, 26 May 2021 10:55:46 +0000</pubDate>
      <link>https://dev.to/circle/5-interview-questions-every-javascript-developer-should-know-520a</link>
      <guid>https://dev.to/circle/5-interview-questions-every-javascript-developer-should-know-520a</guid>
      <description>&lt;p&gt;These are some of the general Interview Questions Every JavaScript Developer Should Know&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-can-you-name-two-programming-paradigms-important-for-javascript-app-developers"&gt;
  &lt;/a&gt;
  1. Can you name two programming paradigms important for JavaScript app developers?
&lt;/h3&gt;

&lt;p&gt;JavaScript is a multi-paradigm language, supporting imperative/procedural programming along with OOP (Object-Oriented Programming) and functional programming. JavaScript supports OOP with prototypal inheritance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-to-hear"&gt;
  &lt;/a&gt;
  Good to hear:
&lt;/h4&gt;

&lt;p&gt;Prototypal inheritance (also: prototypes, OLOO).&lt;br&gt;
Functional programming (also: closures, first class functions, lambdas).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red flags:
&lt;/h4&gt;

&lt;p&gt;No clue what a paradigm is, no mention of prototypal oo or functional programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-what-is-functional-programming"&gt;
  &lt;/a&gt;
  2. What is functional programming?
&lt;/h3&gt;

&lt;p&gt;Functional programming produces programs by composing mathematical functions and avoids shared state &amp;amp; mutable data. Lisp (specified in 1958) was among the first languages to support functional programming, and was heavily inspired by lambda calculus. Lisp and many Lisp family languages are still in common use today.&lt;br&gt;
Functional programming is an essential concept in JavaScript (one of the two pillars of JavaScript). Several common functional utilities were added to JavaScript in ES5.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-to-hear"&gt;
  &lt;/a&gt;
  Good to hear:
&lt;/h4&gt;

&lt;p&gt;Pure functions / function purity.&lt;br&gt;
Avoid side-effects.&lt;br&gt;
Simple function composition.&lt;br&gt;
Examples of functional languages: Lisp, ML, Haskell, Erlang, Clojure, Elm, F Sharp, OCaml, etc…&lt;br&gt;
Mention of features that support FP: first-class functions, higher order functions, functions as arguments/values.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red flags:
&lt;/h4&gt;

&lt;p&gt;No mention of pure functions / avoiding side-effects.&lt;br&gt;
Unable to provide examples of functional programming languages.&lt;br&gt;
Unable to identify the features of JavaScript that enable FP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-what-is-the-difference-between-classical-inheritance-and-prototypal-inheritance"&gt;
  &lt;/a&gt;
  3. What is the difference between classical inheritance and prototypal inheritance?
&lt;/h3&gt;

&lt;p&gt;Class Inheritance: instances inherit from classes (like a blueprint — a description of the class), and create sub-class relationships: hierarchical class taxonomies. Instances are typically instantiated via constructor functions with the &lt;code&gt;new&lt;/code&gt; keyword. Class inheritance may or may not use the &lt;code&gt;class&lt;/code&gt; keyword from ES6.&lt;br&gt;
Prototypal Inheritance: instances inherit directly from other objects. Instances are typically instantiated via factory functions or &lt;code&gt;Object.create()&lt;/code&gt;. Instances may be composed from many different objects, allowing for easy selective inheritance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-javascript-prototypal-inheritance-is-simpler-amp"&gt;
  &lt;/a&gt;
  In JavaScript, prototypal inheritance is simpler &amp;amp;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#more-flexible-than-class-inheritance"&gt;
  &lt;/a&gt;
  more flexible than class inheritance.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#good-to-hear"&gt;
  &lt;/a&gt;
  Good to hear:
&lt;/h4&gt;

&lt;p&gt;Classes: create tight coupling or hierarchies/taxonomies.&lt;br&gt;
Prototypes: mentions of concatenative inheritance, prototype delegation, functional inheritance, object composition.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red Flags:
&lt;/h4&gt;

&lt;p&gt;No preference for prototypal inheritance &amp;amp; composition over class inheritance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-what-are-the-pros-and-cons-of-functional-programming-vs-objectoriented-programming"&gt;
  &lt;/a&gt;
  4. What are the pros and cons of functional programming vs object-oriented programming?
&lt;/h3&gt;

&lt;p&gt;OOP Pros: It’s easy to understand the basic concept of objects and easy to interpret the meaning of method calls. OOP tends to use an imperative style rather than a declarative style, which reads like a straight-forward set of instructions for the computer to follow.&lt;/p&gt;

&lt;p&gt;OOP Cons: OOP Typically depends on shared state. Objects and behaviors are typically tacked together on the same entity, which may be accessed at random by any number of functions with non-deterministic order, which may lead to undesirable behavior such as race conditions.&lt;/p&gt;

&lt;p&gt;FP Pros: Using the functional paradigm, programmers avoid any shared state or side-effects, which eliminates bugs caused by multiple functions competing for the same resources. With features such as the availability of point-free style (aka tacit programming), functions tend to be radically simplified and easily recomposed for more generally reusable code compared to OOP.&lt;/p&gt;

&lt;p&gt;FP also tends to favor declarative and denotational styles, which do not spell out step-by-step instructions for operations, but instead concentrate on what to do, letting the underlying functions take care of the how. This leaves tremendous latitude for refactoring and performance optimization, even allowing you to replace entire algorithms with more efficient ones with very little code change. (e.g., memoize, or use lazy evaluation in place of eager evaluation.)&lt;br&gt;
Computation that makes use of pure functions is also easy to scale across multiple processors, or across distributed computing clusters without fear of threading resource conflicts, race conditions, etc…&lt;/p&gt;

&lt;p&gt;FP Cons: Over exploitation of FP features such as point-free style and large compositions can potentially reduce readability because the resulting code is often more abstractly specified, more terse, and less concrete.&lt;/p&gt;

&lt;p&gt;More people are familiar with OO and imperative programming than functional programming, so even common idioms in functional programming can be confusing to new team members.&lt;br&gt;
FP has a much steeper learning curve than OOP because the broad popularity of OOP has allowed the language and learning materials of OOP to become more conversational, whereas the language of FP tends to be much more academic and formal. FP concepts are frequently written about using idioms and notations from lambda calculus, algebras, and category theory, all of which requires a prior knowledge foundation in those domains to be understood.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-to-hear"&gt;
  &lt;/a&gt;
  Good to hear:
&lt;/h4&gt;

&lt;p&gt;Mentions of trouble with shared state, different things competing for the same resources, etc…&lt;br&gt;
Awareness of FP’s capability to radically simplify many applications.&lt;br&gt;
Awareness of the differences in learning curves.&lt;br&gt;
Articulation of side-effects and how they impact program maintainability.&lt;br&gt;
Awareness that a highly functional codebase can have a steep learning curve.&lt;br&gt;
Awareness that a highly OOP codebase can be extremely resistant to change and very brittle compared to an equivalent FP codebase.&lt;br&gt;
Awareness that immutability gives rise to an extremely accessible and malleable program state history, allowing for the easy addition of features like infinite undo/redo, rewind/replay, time-travel debugging, and so on. Immutability can be achieved in either paradigm, but a proliferation of shared stateful objects complicates the implementation in OOP.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#red-flags"&gt;
  &lt;/a&gt;
  Red flags:
&lt;/h4&gt;

&lt;p&gt;Unable to list disadvantages of one style or another — Anybody experienced with either style should have bumped up against some of the limitations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-when-is-classical-inheritance-an-appropriate-choice"&gt;
  &lt;/a&gt;
  5. When is classical inheritance an appropriate choice?
&lt;/h3&gt;

&lt;p&gt;The answer is never, or almost never. Certainly never more than one level. Multi-level class hierarchies are an anti-pattern. I’ve been issuing this challenge for years, and the only answers I’ve ever heard fall into one of several common misconceptions. More frequently, the challenge is met with silence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#good-to-hear"&gt;
  &lt;/a&gt;
  Good to hear:
&lt;/h4&gt;

&lt;p&gt;Rarely, almost never, or never.&lt;br&gt;
A single level is sometimes OK, from a framework base-class such as React.Component.&lt;br&gt;
“Favor object composition over class inheritance.”&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h4&gt;

</description>
    </item>
    <item>
      <title>[4+1 ways] How to Unsubscribe from Observables in Angular like a 😎</title>
      <author>Nikos Anifantis</author>
      <pubDate>Wed, 26 May 2021 10:41:33 +0000</pubDate>
      <link>https://dev.to/nikosanif/4-1-ways-how-to-unsubscribe-from-observables-in-angular-like-a-21f5</link>
      <guid>https://dev.to/nikosanif/4-1-ways-how-to-unsubscribe-from-observables-in-angular-like-a-21f5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, we will see some of the best practices to unsubscribe from subscriptions (aka Observables) and how to keep our code clean and nicely architectured avoiding memory leaks.&lt;/p&gt;

&lt;p&gt;In a nutshell, we will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;async&lt;/code&gt; Angular build-in pipe&lt;/li&gt;
&lt;li&gt;RxJS operators (e.g &lt;code&gt;takeUntil&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;custom array of subscriptions&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;SubSink&lt;/code&gt; npm package&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;@ngneat/until-destroy&lt;/code&gt; npm package&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-thinking"&gt;
  &lt;/a&gt;
  The Problem 🤔
&lt;/h2&gt;

&lt;p&gt;If you have experience in Angular, you already know that &lt;a href="https://github.com/ReactiveX/rxjs"&gt;RxJS&lt;/a&gt; is one of the most powerful packages. It uses the concept of Observables to handle and work with asynchronous and event-based code. More specifically, &lt;code&gt;Observable&lt;/code&gt; is an entity that emits multiple data values over time and asynchronously.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It sounds cool, right?&lt;/em&gt; &lt;strong&gt;Yes, it is cool and powerful, but you already know that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What's the problem with Observables then?&lt;/em&gt; &lt;strong&gt;Memory Leak!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me elaborate a bit on this, explaining a memory leak issue by an example. Below, we initialize 3 observables where they emit values every 1 second and we create a subscription for each one of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ProblematicExampleComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our code seems to work! BUT, what would happen if we destroy this component (e.g by navigating to an other route that doesn't contain this component)? The values will continue to be logged!&lt;/p&gt;

&lt;p&gt;An even worse scenario is that if we go back to the previous route, the values will be printed twice, and so on. While we create more and more subscriptions without cleaning up them, it constitutes a typical example of a memory leak.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-raw-async-endraw-pipe"&gt;
  &lt;/a&gt;
  1. The &lt;code&gt;async&lt;/code&gt; Pipe
&lt;/h2&gt;

&lt;p&gt;As we know, Angular provide us a lot of built-in functionalities that we don't have to worry about by choosing third-party libraries (that's why we love ❤️ Angular after all, right?). Such a useful functionality is the &lt;code&gt;async&lt;/code&gt; pipe.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="https://angular.io/api/common/AsyncPipe"&gt;official documentation&lt;/a&gt;, we will see the following description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;async&lt;/code&gt; pipe subscribes to an &lt;strong&gt;Observable&lt;/strong&gt; or &lt;strong&gt;Promise&lt;/strong&gt; and returns the latest value it has emitted. When a new value is emitted, the &lt;code&gt;async&lt;/code&gt; pipe marks the component to be checked for changes. When the component gets destroyed, the &lt;code&gt;async&lt;/code&gt; pipe unsubscribes automatically to avoid potential memory leaks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// async-example.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AsyncExampleComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AsyncExampleComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;obs1$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;obs2$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;obs3$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- async-example.component.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Observable 1 value: {{obs1$ | async}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Observable 2 value: {{obs2$ | async}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Observable 3 value: {{obs3$ | async}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pro Tip --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"obs1$ | async as val1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Observable 1 value: {{val1}}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see in the above example, during the creation of the component, 3 observables are initialized which emit values every 1 second using &lt;code&gt;interval&lt;/code&gt; operator from RxJS.&lt;/p&gt;

&lt;p&gt;At the same time we can see that these observables are piped with &lt;code&gt;async&lt;/code&gt; to the template. This means that they will automatically &lt;code&gt;subscribe&lt;/code&gt; during initialization and &lt;code&gt;unsubscribe&lt;/code&gt; during component destruction. This constitutes a big advantage, because we do not bother to do it ourselves through code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rxjs-operators"&gt;
  &lt;/a&gt;
  2. RxJS Operators
&lt;/h2&gt;

&lt;p&gt;One more time RxJS is here to help us. It provides us a lot of useful operators that help us to to unsubscribe from subscriptions.&lt;/p&gt;

&lt;p&gt;Firstly, let's look at some definitions with what we will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Subject&lt;/strong&gt;: A &lt;code&gt;Subject&lt;/code&gt; is a special type of Observable which shares a single execution path among observers. You can think of this as a single speaker talking at a microphone in a room full of people. Their message (the subject) is being delivered to many (multicast) people (the observers) at once. This is the basis of multicasting. Typical observables would be comparable to a 1 on 1 conversation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;interval&lt;/strong&gt;: An operator that returns an observable which emits numbers in sequence based on provided timeframe.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;takeUntil&lt;/strong&gt;: A filtering operator that emits values until provided observable emits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// take-until-example.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;takeUntil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TakeUntilExampleComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TakeUntilExampleComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let us look in detail at the above example step by step:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, we initialize a new &lt;code&gt;Subject&lt;/code&gt; which does not emit any data type (&lt;code&gt;void&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then we created 3 observables with the help of &lt;code&gt;interval&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;We pass to these the &lt;code&gt;takeUntil&lt;/code&gt; operator as pipe in order to filter values until the &lt;code&gt;unsubscribe$&lt;/code&gt; emits.&lt;/li&gt;
&lt;li&gt;Last but not least step is to trigger &lt;code&gt;unsubscribe$&lt;/code&gt; during the &lt;code&gt;ngOnDestroy&lt;/code&gt;. We call &lt;code&gt;.next()&lt;/code&gt; method to trigger new value emission and &lt;code&gt;.complete()&lt;/code&gt; to automatically unsubscribe all the observers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although we used only the &lt;code&gt;takeUntil&lt;/code&gt; operator, there are other which can help us, too. For example we can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;take&lt;/strong&gt;: It emits provided number of values before completing. You can use it when you are interested in only the first emission, you want to use &lt;code&gt;take&lt;/code&gt;. Maybe you want to see what the user first clicked on when they entered the page, or you would want to subscribe to the click event and just take the first emission.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;takeWhile&lt;/strong&gt;: It emits values until provided expression is false. You can use it when the optional inclusive parameter is set to true it will also emit the first item that didn't pass the predicate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-custom-array-of-subscriptions"&gt;
  &lt;/a&gt;
  3. Custom Array of Subscriptions
&lt;/h2&gt;

&lt;p&gt;Another way to unsubscribe a &lt;code&gt;Subscription&lt;/code&gt; is to put them in an array. So we can iterate all items and call the &lt;code&gt;.unsubscribe()&lt;/code&gt; method for each item in this array during component destruction.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// custom-array-example.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomArrayExampleComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CustomArrayExampleComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method works very well with multiple subscriptions without any third-party library. However, there are 3 important disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to initialize an extra variable in the component&lt;/li&gt;
&lt;li&gt;For each new &lt;code&gt;Subscription&lt;/code&gt; we must add it to the array&lt;/li&gt;
&lt;li&gt;We must not forget to iterate the array and unsubscribe its items at &lt;code&gt;ngOnDestroy&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-raw-subsink-endraw-npm-package"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;subsink&lt;/code&gt; npm package
&lt;/h2&gt;

&lt;p&gt;Now it's time to view some third-party libraries that facilitate us to unsubscribe our subscriptions. More specifically, &lt;a href="https://github.com/wardbell/subsink"&gt;SubSink&lt;/a&gt; library constitutes a RxJS subscription sink for unsubscribing gracefully in a component. Its usage is very simple and you can see it in action below.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// subsink-example.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subsink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SubsinkExampleComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SubsinkExampleComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As in the above examples, we initialize the &lt;code&gt;subs&lt;/code&gt; variable as new instance of &lt;code&gt;SubSink&lt;/code&gt; class. The second step is to use the &lt;code&gt;sink&lt;/code&gt; property to collect the subscriptions using a setter. Finally, we call the &lt;code&gt;unsubscribe()&lt;/code&gt; method to unsubscribe all of them, as we would do in our component &lt;code&gt;OnDestroy&lt;/code&gt; lifecycle event.&lt;/p&gt;

&lt;p&gt;As you can see, it has a dead simple usage and similar behaviour with the previous approach with custom array of subscriptions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-raw-ngneatuntildestroy-endraw-npm-package"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;@ngneat/until-destroy&lt;/code&gt; npm package
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;👍 Personal Preference&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last but not least, we will see the &lt;a href="https://github.com/ngneat/until-destroy"&gt;@ngneat/until-destroy&lt;/a&gt; library.&lt;br&gt;
Similar to the previous approach, we have very simple use within our source code.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// until-destroy-example.component.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UntilDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;untilDestroyed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ngneat/until-destroy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/logger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;UntilDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UntilDestroyExampleComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UntilDestroyExampleComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;untilDestroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;untilDestroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;untilDestroyed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we have slightly different approach as it uses decorators. Firstly, we attach the &lt;code&gt;@UntilDestroy()&lt;/code&gt; decorator at our component and then we pass the &lt;code&gt;untilDestroyed&lt;/code&gt; operator in observable's pipe.&lt;/p&gt;

&lt;p&gt;Although each case suits to different use cases, this is my favorite approach and I use it very often in my projects. Personally I prefer to install a third-party library and get clean and easy to read source code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-whitecheckmark"&gt;
  &lt;/a&gt;
  Conclusion ✅
&lt;/h2&gt;

&lt;p&gt;Hooray! We made it to the end! 🙌&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article and will make your applications even more clean without any memory leak issues by choosing the most suitable way to unsubscribe your observables.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I would be more than happy to hear your personal preference or suggest other ways, leaving your comments down below!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please support this article with your ❤️ 🦄 🔖 to help it spread to a wider audience. 🙏&lt;/p&gt;

&lt;p&gt;Also, don’t hesitate to contact me if you have any questions leaving here your comments or Twitter DMs &lt;a href="https://twitter.com/nikosanif"&gt;@nikosanif&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can find the final source code in stackblitz:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-crdui2?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;em&gt;Cover Photo by &lt;a href="https://unsplash.com/@lureofadventure?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ali Kazal&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;.&lt;/em&gt;&lt;/sup&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>rxjs</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Pomodoro : Effective Time Management Technique</title>
      <author>ADEOYE ADEFEMI OPEOLUWA</author>
      <pubDate>Wed, 26 May 2021 10:37:42 +0000</pubDate>
      <link>https://dev.to/opeolluwa/pomodoro-effective-time-management-technique-5666</link>
      <guid>https://dev.to/opeolluwa/pomodoro-effective-time-management-technique-5666</guid>
      <description>&lt;h2&gt;
  &lt;a href="#darling-distraction"&gt;
  &lt;/a&gt;
  Darling Distraction
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;It's barely 7:00PM, I'll just reply the next couple of messages then get to work...&lt;/em&gt;", I told myself the seventh time.&lt;/p&gt;

&lt;p&gt;It was a September evening in 2018, I had to prepare for an interview which was 2 days away from the said day. As important as excellent performance is to me,  I had myself caught in between a seamless flow of WhatsApp messages. I knew, I had to call it quit, but I couldn't bring myself to it.  I decided to &lt;em&gt;shift between worlds&lt;/em&gt; of replying the messages and preparing for the interview every 10minutes. Alas! It worked! &lt;/p&gt;

&lt;p&gt;I got to know - the plan of alternating study and replying the messages is a full blown productivity technique called &lt;strong&gt;Pomodoro Technique&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let's explore! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-pomodoro-"&gt;
  &lt;/a&gt;
  What's Pomodoro ?
&lt;/h2&gt;

&lt;p&gt;Literally, &lt;em&gt;pomodoro&lt;/em&gt; is the Italian word for 'tomato'.&lt;/p&gt;

&lt;p&gt;The Pomodoro Technique is a time management method developed by Francesco Cirillo in the late 1980s&lt;/p&gt;

&lt;p&gt;The technique is named after the tomato shaped kitchen timer which Cirillo used as a university student&lt;/p&gt;

&lt;p&gt;Basically, Promodoro Technique involves breaking down tasks into 25 minutes of work (called &lt;em&gt;pomodoros&lt;/em&gt;) 5 minutes break and a 15 - 25 minutes break after each pomodoro&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-hail-pomodoro"&gt;
  &lt;/a&gt;
  All hail Pomodoro
&lt;/h2&gt;

&lt;p&gt;After getting to know about Pomodoro, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; I start out by estimating time allowed for task at hand.&lt;/li&gt;
&lt;li&gt;As opposed to the Cirillo specification I take 7minutes break after each pomodoro and &lt;/li&gt;
&lt;li&gt;a 15-25 minutes break after 4 pomodoros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The keynote is to perform task at hand for for minutes without yeilding to distractions then take short break after each section (pomodoro)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cirillo-way"&gt;
  &lt;/a&gt;
  The Cirillo way
&lt;/h2&gt;

&lt;p&gt;The Pomodoro Technique is organised into six incremental objectives&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find out how much effort an activity requires&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cut down on interruptions&lt;/strong&gt;&lt;br&gt;
Usually, you can afford to take 25 minutes before calling back a friend or replying to an email. You’ll learn how to handle the inevitable interruption while staying focused on the task at hand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Estimate the effort for activities&lt;/strong&gt;&lt;br&gt;
Once you’ve gotten the hang of the technique, you’ll be able to accurately predict how many Pomodoros it will take to accomplish tomorrow’s -- or next month’s -- tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make the Pomodoro more effective While the contours of the Pomodoro are set&lt;/strong&gt;, what you do within them can be adjusted to maximize efficiency. One way to make a Pomodoro more effective is to use the first few minutes to review what you’ve done before. Other methods are discussed in the book.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Set up a timetable&lt;/strong&gt;&lt;br&gt;
A timetable sets a limit, motivating you to complete a task within a set period of time. It also delineates your work time from your free time. Creating a clear timetable will allow you to enjoy your time off without worrying that you could be doing more work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define your own objectives&lt;/strong&gt;&lt;br&gt;
The Pomodoro Technique is a tool you can use to reach your own objectives. For example, a writer might realize he’s spending too much time revising, and adjust his Pomodoro timetable to allow for more brainstorming time. &lt;a href="https://francescocirillo.com/pages/pomodoro-technique"&gt;1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;That's all there is to it, I'm glad you read it all the way down here. Let's take a peek at the keynotes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;estimate time allowed&lt;/li&gt;
&lt;li&gt;Work through each section, Go over the task again untill the pomodro is completed&lt;/li&gt;
&lt;li&gt;take short break to avoid burn out&lt;/li&gt;
&lt;li&gt;take longer break to avoid psychological stress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refrence-list"&gt;
  &lt;/a&gt;
  Refrence List
&lt;/h3&gt;

&lt;p&gt;1.&lt;a href="https://francescocirillo.com/pages/pomodoro-technique"&gt;https://francescocirillo.com/pages/pomodoro-technique&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>time</category>
    </item>
    <item>
      <title>Build Sidebar navigation menu in ReactJS with react router and framer-motion for cool page transition effects</title>
      <author>CodeBucks</author>
      <pubDate>Wed, 26 May 2021 10:31:50 +0000</pubDate>
      <link>https://dev.to/codebucks/build-sidebar-navigation-menu-in-reactjs-with-react-router-and-framer-motion-for-cool-page-transition-effects-4bc3</link>
      <guid>https://dev.to/codebucks/build-sidebar-navigation-menu-in-reactjs-with-react-router-and-framer-motion-for-cool-page-transition-effects-4bc3</guid>
      <description>&lt;p&gt;Hi there 👋,&lt;/p&gt;

&lt;p&gt;Checkout this cool sidebar.&lt;/p&gt;

&lt;p&gt;Here is the Demo Link:&lt;br&gt;
&lt;a href="https://react-sidebar.vercel.app/"&gt;https://react-sidebar.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have created this using Styled-components, react-router and framer-motion for page transition. You can use this kind of sidebar in creating Dashboards.&lt;/p&gt;

&lt;p&gt;For this project I have used these libraries,&lt;br&gt;
▶️ reactjs&lt;br&gt;
▶️ Styled-Components&lt;br&gt;
▶️ react-router-dom&lt;br&gt;
▶️ Framer-motion for page transition &lt;/p&gt;

&lt;p&gt;Here is the tutorial for this Sidebar menu! &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6HfMm9D4jpU"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can use this to learn or for your portfolio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I haven't added drop-down menu yet but if you want it then you can add it and feel free to create more sections.  &lt;/p&gt;

&lt;p&gt;Any suggestions are welcomed!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Follow me on Instagram where I'm sharing lot's of useful resources!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.instagram.com/code.bucks/"&gt;@code.bucks&lt;/a&gt; 😉
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>4 Ways You Can Organise Your TODOs as a Software Engineer</title>
      <author>Alex Omeyer</author>
      <pubDate>Wed, 26 May 2021 10:26:58 +0000</pubDate>
      <link>https://dev.to/stepsize/4-ways-you-can-organise-your-todos-as-a-software-engineer-57kn</link>
      <guid>https://dev.to/stepsize/4-ways-you-can-organise-your-todos-as-a-software-engineer-57kn</guid>
      <description>&lt;p&gt;TODOs are a tricky subject for developers. Many codebases are guilty of having TODOs linger around while nobody knows who’s responsible for a TODO or even has the required context to tackle it. Yet, should we feel ashamed for our lingering TODOs?&lt;/p&gt;

&lt;p&gt;Many developers have adopted the approach of adding TODOs to their project’s code. However, it’s not necessarily the best approach to manage them. It makes more sense to extract TODOs to a centralised interface that allows you to actively manage them and add metadata such as context, feature descriptions, requirements, or even relevant code snippets.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-article-discusses-the-following-questions-related-to-todos"&gt;
  &lt;/a&gt;
  This article discusses the following questions related to TODOs:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What are the different reasons software engineers use TODOs?&lt;/li&gt;
&lt;li&gt;What are the problems with adding TODOs to your codebase?&lt;/li&gt;
&lt;li&gt;What are the best practices for managing TODOs?&lt;/li&gt;
&lt;li&gt;What’s the best way to manage TODOs?&lt;/li&gt;
&lt;li&gt;Why Developers Use TODOs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are different reasons why software engineers use TODOs in projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reminder&lt;/strong&gt;: Imagine you are developing a new feature, and you come across a snippet of code that needs &lt;a href="https://www.stepsize.com/blog/the-ultimate-engineers-guide-to-refactoring?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;refactoring&lt;/a&gt;. However, the refactoring doesn’t affect the new feature directly so you note it to remind yourself. It’s a great example of quickly noting down a small action as a TODO that needs to be performed at a later point in time. On the other hand, the developer thinks it’s too much overhead to create a new issue or task in a project management tool like JIRA or Asana.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TODOs replace a project management tool&lt;/strong&gt;: I’ve been guilty of this myself. I want to avoid setting up a project board for small projects because it feels like a waste of time. For that reason, many developers add dozens of TODOs to their project’s code to replace the need for a project management tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Keep pull requests small&lt;/strong&gt;: Some developers prefer small pull requests because they are easier to review. Therefore, they create multiple smaller PRs to tackle a single task. To keep track of the work that needs to be done as part of this task, they include TODOs to their PRs to remind themselves of unfinished work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: Developers often abuse TODOs as tips for the next developer working on the same code. A TODO might describe how to proceed with the code or possible extensions for the code when you’ve just started a new project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IDE support&lt;/strong&gt;: Many IDEs have adopted functionality to highlight and search TODOs in your codebase. For that reason, more and more developers assume it’s a best practice to add TODOs to their code regularly. For instance, the most popular TODO management extension for &lt;a href="https://www.stepsize.com/blog/how-to-refactor-code-in-visual-studio-code"&gt;Visual Studio Code&lt;/a&gt; is &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;“Todo Tree”&lt;/a&gt; with more than 1.1 million installs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cD2XkzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4dod7a1xjw163wj79i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cD2XkzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n4dod7a1xjw163wj79i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Source: &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree extension&lt;/a&gt; Visual Studio Code)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-problems-with-adding-todos-to-your-codebase"&gt;
  &lt;/a&gt;
  What Are the Problems With Adding TODOs to Your Codebase?
&lt;/h2&gt;

&lt;p&gt;The most important problem with TODOs is their lack of context. Developers often write short TODOs that don’t give a lot of context to solve them. Therefore, TODOs are often only resolvable by a few people who have a lot of knowledge about the codebase. It’s even possible that only the engineer who wrote the TODO knows what needs to happen.&lt;/p&gt;

&lt;p&gt;Moreover, TODOs don’t have a clear owner except for the creator of the TODO. When you encounter a TODO when working on somebody else’s code, do you remove the TODO or try to resolve it? It’s a tricky question to answer. I remember experiencing TODOs as a college’s personal note that I wasn’t allowed to touch.&lt;/p&gt;

&lt;p&gt;Now let’s think about what happens with TODOs. How often do TODOs end up in the master/main branch without being addressed? Even months after merging the TODO into the project’s code, it remains unaddressed. It mainly occurs because of their lack of ownership and context. &lt;/p&gt;

&lt;p&gt;Lastly, TODOs expire quickly. Code changes rapidly, especially within a large development team. This means that TODOs aren’t valid anymore or don’t make sense in the current codebase. Again, nobody dares to remove them because of their lack of context. To solve this problem, some companies use different &lt;a href="https://www.stepsize.com/blog/tools-to-track-and-manage-technical-debt?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;project management and technical debt&lt;/a&gt; tools that let you set deadlines and add context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-manage-todos-correctly"&gt;
  &lt;/a&gt;
  How To Manage TODOs Correctly?
&lt;/h2&gt;

&lt;p&gt;These guidelines are not an exact rulebook for managing TODOs because it depends on your team’s preferences, size, and management style. Hence, here’s a list of four tips that help you to better manage your team’s TODOs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-todos-for-minor-issues"&gt;
  &lt;/a&gt;
  1. Use TODOs for minor issues
&lt;/h3&gt;

&lt;p&gt;Software engineers should only use TODOs for defining microtasks that any team member can quickly tackle. For instance, you could add a TODO to remind developers about changing the name of a module to a more descriptive name. It’s not a task that requires a separate ticket in a project management tool.&lt;/p&gt;

&lt;p&gt;Bigger issues or tasks require the use of a project management tool. It allows you to define specifications for the issue and plan it as part of a &lt;a href="https://www.atlassian.com/agile/scrum/sprints"&gt;development sprint&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-sufficient-context"&gt;
  &lt;/a&gt;
  2. Add sufficient context
&lt;/h3&gt;

&lt;p&gt;Solely adding TODOs in the codebase is not the best way to raise issues with code. If you’re looking for ways to organise your issues and add context, try out &lt;a href="https://www.stepsize.com/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Stepsize&lt;/a&gt;. It allows engineers to import their TODOs into the platform, to organise them and add context such as linking code, dependencies and add metrics such as hours lost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-use-a-consistent-format-for-todos"&gt;
  &lt;/a&gt;
  3. Use a consistent format for TODOs
&lt;/h3&gt;

&lt;p&gt;A consistent format for your TODOs allows you to better manage them. For instance, you could opt for a format that defines a due date and an owner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@TODO &amp;lt;due date&amp;gt; &amp;lt;owner&amp;gt; &amp;lt;task details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you could define more properties like references to code snippets or relevant files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@TODO &amp;lt;due date&amp;gt; &amp;lt;owner&amp;gt; &amp;lt;task details&amp;gt; &amp;lt;link 1&amp;gt; &amp;lt;link 2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you have a consistent format, it’s much easier to accept TODOs during code reviews that fit the defined format. It prevents your team from ambiguous TODOs ending up in your project. On top of that, a fixed format allows you to search TODOs in your codebase quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-define-rules-for-todos"&gt;
  &lt;/a&gt;
  4. Define rules for TODOs
&lt;/h3&gt;

&lt;p&gt;Sit together with your team to set rules for TODOs. For instance, define for which kind of tasks you allow the usage of TODOs. By clarifying this, it’s much easier to identify a microtask versus a task that requires the assistance of a project management tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-best"&gt;
  &lt;/a&gt;
  What’s Best?
&lt;/h2&gt;

&lt;p&gt;To add my opinion, I’m not a big fan of managing TODOs within the codebase. However, this strategy can work for smaller teams with the right set of rules. Don’t forget to provide context and identify a clear owner.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was written by Michiel Mulders. Michiel is a passionate blockchain developer who loves writing technical content. Besides that, he loves learning about marketing, UX psychology, and entrepreneurship. When he’s not writing, he’s probably enjoying a Belgian beer!&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Also published on: &lt;a href="https://www.stepsize.com/blog/how-to-organise-your-todos-as-a-software-engineer?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Managing Technical Debt&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>programming</category>
      <category>refactorit</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Build Static Blog With Jekyll For Free On Github Pages</title>
      <author>shoaiyb sysa</author>
      <pubDate>Wed, 26 May 2021 10:10:35 +0000</pubDate>
      <link>https://dev.to/shoaiyb/build-static-blog-with-jekyll-for-free-on-github-pages-43o</link>
      <guid>https://dev.to/shoaiyb/build-static-blog-with-jekyll-for-free-on-github-pages-43o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is Github?
&lt;/h2&gt;

&lt;p&gt;To understand GitHub, you must first have an understanding of Git.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h3&gt;

&lt;p&gt;Git is an open-source version control system that was started by Linus Torvalds—the same person who created Linux. Git is similar to other version control systems—Subversion, CVS, and Mercurial to name a few.&lt;br&gt;&lt;br&gt;
So, Git is a version control system, but what does that mean? When developers create something (an app, for example), they make constant changes to the code, releasing new versions up to and after the first official (non-beta) release.&lt;br&gt;&lt;br&gt;
Version control systems keep these revisions straight, storing the modifications in a central repository. This allows developers to easily collaborate, as they can download a new version of the software, make changes, and upload the newest revision. Every developer can see these new changes, download them, and contribute&lt;br&gt;&lt;br&gt;
Similarly, people who have nothing to do with the development of a project can still download the files and use them. Most Linux users should be familiar with this process, as using Git, Subversion, or some other similar method is pretty common for downloading needed files—especially in preparation for compiling a program from source code (a rather common practice for Linux geeks).&lt;br&gt;&lt;br&gt;
Git is the preferred version control system of most developers, since it has multiple advantages over the other systems available. It stores file changes more efficiently and ensures file integrity better. If you’re interested in knowing the details, the &lt;a href="http://git-scm.com/book/en/Getting-Started-Git-Basics"&gt;Git Basics page&lt;/a&gt; has a thorough explanation on how Git works.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-hub-in-github"&gt;
  &lt;/a&gt;
  The 'Hub' in Github
&lt;/h3&gt;

&lt;p&gt;We’ve established that Git is a version control system, similar but better than the many alternatives available.&lt;br&gt;&lt;br&gt;
So, what makes GitHub so special? Git is a command-line tool, but the center around which all things involving Git revolve is the hub—GitHub.com where developers store their projects and network with like minded people.&lt;br&gt;&lt;br&gt;
Let’s go over a few of the main reasons that geeks like to use GitHub, and learn some terminology along the way.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h3&gt;

&lt;p&gt;A repository (usually abbreviated to “repo”) is a location where all the files for a particular project are stored.&lt;br&gt;&lt;br&gt;
Each project has its own repo, and you can access it with a unique URL.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-a-repo"&gt;
  &lt;/a&gt;
  Forking a Repo
&lt;/h3&gt;

&lt;p&gt;“Forking” is when you create a new project based off of another project that already exists.&lt;br&gt;&lt;br&gt;
This is an amazing feature that vastly encourages the further development of programs and other projects.&lt;br&gt;&lt;br&gt;
If you find a project on GitHub that you’d like to contribute to, you can fork the repo, make the changes you’d like, and release the revised project as a new repo. If the original repository that you forked to create your new project gets updated, you can easily add those updates to your current fork.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-requests"&gt;
  &lt;/a&gt;
  Pull Requests
&lt;/h3&gt;

&lt;p&gt;You’ve forked a repository, made a great revision to the project, and want it to be recognized by the original developers—maybe even included in the official project/repository. You can do so by creating a pull request. The authors of the original repository can see your work, and then choose whether or not to accept it into the official project.&lt;br&gt;&lt;br&gt;
Whenever you issue a pull request, GitHub provides a perfect medium for you and the main project’s maintainer to communicate.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#social-networking"&gt;
  &lt;/a&gt;
  Social networking
&lt;/h3&gt;

&lt;p&gt;The social networking aspect of GitHub is probably its most powerful feature, allowing projects to grow more than just about any of the other features offered.&lt;br&gt;&lt;br&gt;
Each user on GitHub has their own profile that acts like a resume of sorts, showing your past work and contributions to other projects via pull requests.&lt;br&gt;&lt;br&gt;
Project revisions can be discussed publicly, so a mass of experts can contribute knowledge and collaborate to advance a project forward. Before the advent of GitHub, developers interested in contributing to a project would usually need to find some means of contacting the authors—probably by email—and then convince them that they can be trusted and their contribution is legit.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changelogs"&gt;
  &lt;/a&gt;
  Changelogs
&lt;/h3&gt;

&lt;p&gt;When multiple people collaborate on a project, it’s hard to keep track revisions—who changed what, when, and where those files are stored.&lt;br&gt;&lt;br&gt;
GitHub takes care of this problem by keeping track of all the changes that have been pushed to the repository.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-isnt-just-for-developers"&gt;
  &lt;/a&gt;
  GitHub Isn’t Just for Developers
&lt;/h3&gt;

&lt;p&gt;All this talk about how GitHub is ideal for programmers may have you believing that they are the only ones who will find it useful. Although it’s a lot less common, you can actually use GitHub for any types of files. If you have a team that is constantly making changes to a word document, for example,  you could use GitHub as your version control system. This practice isn’t common, since there are better alternatives in most cases, but it’s something to keep in mind.&lt;br&gt;&lt;br&gt;
Now that you know what GitHub is all about, and you're ready to get to the next step. and be sure to check out their.     &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-pages"&gt;
  &lt;/a&gt;
  What is Github Pages
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt; is a free place to store the files that run a website and host that website for people to visit (it only works for particular types of website, like basic HTML sites or Jekyll sites, and does not host databases).    &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jekyll"&gt;
  &lt;/a&gt;
  What is Jekyll?
&lt;/h2&gt;

&lt;p&gt;Jekyll is a website generator that’s designed for building minimal, static blogs to be hosted on GitHub Pages.&lt;br&gt;&lt;br&gt;
It is a static site generator. It takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site’s look and feel, URLs, the data displayed on the page, and more.&lt;br&gt;&lt;br&gt;
Jekyll takes your content written in Markdown, passes it through your templates and spits it out as a complete static website, ready to be served. GitHub Pages conveniently serves the website directly from your GitHub repository so that you don’t have to deal with any hosting.&lt;br&gt;&lt;br&gt;
Here are some websites that were created with Jekyll:     &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://sysa.ml/"&gt;shoaiyb sysa&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jekyllrb.com"&gt;Jekyll&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#purpose-of-jekyll"&gt;
  &lt;/a&gt;
  Purpose of Jekyll
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://tom.preston-werner.com"&gt;Tom Preston-Werner&lt;/a&gt; created Jekyll to enable people to blog using a simple static HTML website, with all of the content hosted and version-controlled on Git repository.&lt;br&gt;&lt;br&gt;
The goal was to eliminate the complexity of other blogging platforms by creating a workflow that allows you to blog like a hacker.     &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On Sunday, October 19th, I sat down in my San Francisco apartment with a glass of apple cider and a clear mind. After a period of reflection, I had an idea. While I’m not specifically trained as an author of prose, I am trained as an author of code. What would happen if I approached blogging from a software development perspective? What would that look like?     &lt;/p&gt;

&lt;p&gt;Over the last month I’ve brought these concepts to fruition and I’m pleased to announce &lt;a href="https://github.com/mojombo/jekyll"&gt;Jekyll&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
-- Tom Preston-Werner       &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reminder"&gt;
  &lt;/a&gt;
  Reminder
&lt;/h2&gt;

&lt;p&gt;Here’s a quick reminder of what you need to know about this option:    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price: FREE&lt;/li&gt;
&lt;li&gt;Difficulty: Medium&lt;/li&gt;
&lt;li&gt;Knowledge: Git, Markdown&lt;/li&gt;
&lt;li&gt;Required Tools: GitHub account, Internet Browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Totally Free
&lt;/li&gt;
&lt;li&gt;No database
&lt;/li&gt;
&lt;li&gt;No CMS
&lt;/li&gt;
&lt;li&gt;Security
&lt;/li&gt;
&lt;li&gt;Design control
&lt;/li&gt;
&lt;li&gt;Super fast (only static files)
&lt;/li&gt;
&lt;li&gt;Easy to make changes (edit, commit &amp;amp; push)
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;A bit of tech knowledge is required
&lt;/li&gt;
&lt;li&gt;Need to pay for a domain name (to avoid the url myname.github.io)
&lt;/li&gt;
&lt;li&gt;Have to use Disqus for comments
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>jekyll</category>
      <category>github</category>
      <category>develop</category>
      <category>build</category>
    </item>
    <item>
      <title>Lessons learned: AWS AppSync Subscriptions</title>
      <author>Filip Pýrek</author>
      <pubDate>Wed, 26 May 2021 10:06:32 +0000</pubDate>
      <link>https://dev.to/aws-builders/lessons-learned-aws-appsync-subscriptions-jek</link>
      <guid>https://dev.to/aws-builders/lessons-learned-aws-appsync-subscriptions-jek</guid>
      <description>&lt;h1&gt;
  &lt;a href="#aws-appsync"&gt;
  &lt;/a&gt;
  AWS AppSync
&lt;/h1&gt;

&lt;p&gt;AWS AppSync, simply said API Gateway for GraphQL since it allows you to connect your GraphQL schema to different data sources like RDS, DynamoDB, Lambda, HTTP endpoint etc.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We are using AppSync in our Purple Apps to power application APIs.&lt;br&gt;
Learn more in &lt;a href="https://github.com/purple-technology/purple-stack/tree/master/api#readme"&gt;Purple Stack API docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#the-appsync-subscriptions"&gt;
  &lt;/a&gt;
  The AppSync Subscriptions
&lt;/h1&gt;

&lt;p&gt;First we were excited to see that AppSync supports GraphQL subscriptions. But the excitement went down slightly when we discovered that they are tightly coupled with mutations.&lt;/p&gt;

&lt;p&gt;This feature seems to be nice when working on some super simple CRUD system, but when you start building a bigger application which has a lot of business logic hidden in asynchronous background processes like Step Functions, it starts to fall short.&lt;/p&gt;

&lt;p&gt;We solved that problem by creating dummy mutations with pass-through lambda resolvers which can be &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization"&gt;invoked only by IAM users&lt;/a&gt;.&lt;br&gt;
Later on we discovered "&lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/tutorial-local-resolvers.html"&gt;local resolvers&lt;/a&gt;" which can do the same job with no need for invoking lambda function.&lt;/p&gt;

&lt;p&gt;Along the way we've stumbled upon some specific AppSync behaviours which are not obvious at first sight and information about them is "hidden" deep down in the documentation within complex sentences.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#1-subscription-arguments-are-matched-against-the-mutation-response-fields-not-against-the-mutation-arguments"&gt;
  &lt;/a&gt;
  1. Subscription arguments are matched against the mutation response fields, not against the mutation arguments.
&lt;/h2&gt;

&lt;p&gt;Nowhere in the documentation is it said how exactly the subscription arguments matching  magic works. It’s unclear whether the matching is done against the mutation arguments or the mutation response fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# filtering by "argA" ❌&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c"&gt;# filtering by "fieldF" ✅&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-the-subscription-response-must-be-optional"&gt;
  &lt;/a&gt;
  2. The subscription response must be optional
&lt;/h2&gt;

&lt;p&gt;I don't understand exactly why, but the subscription response must be optional. AppSync allows you to successfully save the schema with a required subscription response, but when you try to connect to the subscription from a frontend client, it starts throwing some shallow error which doesn't explicitly tell you that subscription responses must be optional. And then you spend several hours trying to figure out where the problem is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="c"&gt;# AddItemResponse is optinal  ✅&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c"&gt;# AddItemResponse is required ❌&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-a-subscription-message-contains-only-the-fields-which-were-requested-by-the-mutation-other-fields-will-be-null"&gt;
  &lt;/a&gt;
  3. A subscription message contains only the fields which were requested by the mutation - other fields will be null
&lt;/h2&gt;

&lt;p&gt;After some time I've found out that this is explained in three big paragraphs in &lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments"&gt;the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The point is that even though your lambda resolver is returning values for all the mutation fields, an AppSync subscription is only seeing the mutation fields which were selected in the mutation request. This is probably caused by the fact that resolver doesn't have to return values for fields which are not requested in the mutation request.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#mutation-called-on-backend-in-some-asynchronous-process"&gt;
  &lt;/a&gt;
  Mutation called on backend in some asynchronous process
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-statement-on-frontend"&gt;
  &lt;/a&gt;
  Subscription statement on frontend
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SubscribeOnAddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#resulting-subscription-message"&gt;
  &lt;/a&gt;
  Resulting subscription message
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;fieldA:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'valueA'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;fieldB:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;because&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;was&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;requested&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;fieldC:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-if-the-filtering-field-is-not-specified-in-the-mutation-response-the-subscription-is-not-fired"&gt;
  &lt;/a&gt;
  4. If the filtering field is not specified in the mutation response, the subscription is not fired
&lt;/h2&gt;

&lt;p&gt;This feature could be inferred from the first point, but still it's an important thing to realize.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#mutation-called-on-backend-in-some-asynchronous-process"&gt;
  &lt;/a&gt;
  Mutation called on backend in some asynchronous process
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-statement-on-frontend"&gt;
  &lt;/a&gt;
  Subscription statement on frontend
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SubscribeOnAddItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"valueA"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldA&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldB&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;fieldC&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case the subscription doesn't get fired because the mutation is not requesting &lt;code&gt;fieldA&lt;/code&gt; which is used for filtering in the subscription data.&lt;/p&gt;

&lt;p&gt;Even though your lambda resolver also returned a value for &lt;code&gt;fieldA&lt;/code&gt;, it's not going to work because matching happens after selecting the requested fields - not before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-subscription-resolver-is-optional-but-it-can-be-used-for-authorization"&gt;
  &lt;/a&gt;
  5. The subscription resolver is optional - but it can be used for authorization
&lt;/h2&gt;

&lt;p&gt;When I was testing subscriptions, I asked myself, "what happens if I create a lambda resolver for the subscription?" So I tried and I discovered that the subscription resolver is called every time before a new subscription connection is established.&lt;/p&gt;

&lt;p&gt;It seems like the subscription resolver is meant for authorization, because it doesn't really matter what you return as an output for the resolver. Only thing that matters is if the resolver function succeeds or fails. If it succeeds, a connection is established; if it fails, an error is sent to the frontend.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#graphql-schema"&gt;
  &lt;/a&gt;
  GraphQL Schema
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;!,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Subscription&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;onAddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;aws_subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;addItem&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AddItemResponse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#subscription-resolver"&gt;
  &lt;/a&gt;
  Subscription resolver
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;AppSync is a nice and useful service but it still has some space for improvements and new features which we are definitely looking forward to.&lt;/p&gt;

&lt;p&gt;Hopefully this article made your life easier in case you've been struggling with AppSync and you have a better overview of what you can do with it.&lt;/p&gt;

&lt;p&gt;With ❤️ made in Brno.&lt;/p&gt;

&lt;p&gt;Checkout more of our articles on &lt;a href="https://blog.purple-technology.com/"&gt;Purple Technology blog&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>appsync</category>
      <category>graphql</category>
    </item>
    <item>
      <title>5 most underrated skills of a top developer</title>
      <author>Anubhav Singhal ☃️</author>
      <pubDate>Wed, 26 May 2021 10:01:32 +0000</pubDate>
      <link>https://dev.to/anubhavitis/5-most-underrated-skills-of-a-top-developer-bin</link>
      <guid>https://dev.to/anubhavitis/5-most-underrated-skills-of-a-top-developer-bin</guid>
      <description>&lt;p&gt;You all might have stumbled upon blogs like &lt;strong&gt;"Best books you should read to become a top developer"&lt;/strong&gt;, &lt;strong&gt;"Best frameworks you should learn to become a successful developer"&lt;/strong&gt;, etc. We all aspire to be ninja developers, and so, we try to gain more and more understanding of technical concepts.&lt;/p&gt;

&lt;p&gt;Today, I am going to take you through some of the most basic, yet important skills, that bring a very significant impact upon a developer's life. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#1-touch-typing"&gt;
  &lt;/a&gt;
  #1 Touch typing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jQZ3U2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l59adp4wrtfhig53s4ld.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jQZ3U2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l59adp4wrtfhig53s4ld.gif" alt="giphy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have 10 fingers, and the standard Qwerty keyboard is beautifully designed to use each of our fingers all together, without even looking at the keyboard.&lt;/p&gt;

&lt;p&gt;Still, I've seen plenty of developers who type with 2-3 fingers only. Most of the time they spend is looking at the keyboard and then checking on the screen if they typed correctly.&lt;/p&gt;

&lt;p&gt;We got to learn to use the keyboard, before using a keyboard. Touch typing is one of the best productivity hacks for developers, you save a lot of time and energy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Wanna learn touch typing? Checkout &lt;a href="https://www.keybr.com/"&gt;KeyBr&lt;/a&gt;, &lt;a href="https://10fastfingers.com/typing-test/english"&gt;10FastFingers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#2-documentation"&gt;
  &lt;/a&gt;
  #2 Documentation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQxdQvTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzncw6ats1ecw6zug6tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQxdQvTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzncw6ats1ecw6zug6tk.png" alt="me-when-looking-at-the-code-i-wrote-two-weeks-43114931"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documenting a project is something that we all know is a good practice, but the least of us care to follow. Good documentation is one of the most important part of the Open Source world, includes information for contributors, applied coding conventions, file organizations, comments, naming conventions, programming practices, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Workers spend about 2.5 hours per day, or roughly 30% of the workday, searching for information." &lt;br&gt;
&lt;a href="https://blog.xenit.eu/blog/do-workers-still-waste-time-searching-for-information"&gt;Xenit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you write clear and accurate documentation of your projects, not only it gives an easy way to others when they look at your code, it also works as an easy checkpoint for you while revisiting code after a week/month/year. It might be tiring at the beginning but very effective in the long run.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check this: &lt;a href="https://guides.lib.berkeley.edu/how-to-write-good-documentation"&gt;How to write a good documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#3-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  #3 Data Structures and Algorithms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0i59QzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mlyqjzsqm09c9qqhjy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0i59QzD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mlyqjzsqm09c9qqhjy2.png" alt="Today's developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're living in a world where data is more costly than oil/gold. More and more data is getting stored, processed, and slowing down the processing time of the systems, which costs tech companies a fortune. Effective and efficient use of these data is a challenge, and that's where DSA plays a very significant role.&lt;/p&gt;

&lt;p&gt;Under the cloak of all your SQL and Linux commands are algorithms and data structures. Google manages to search plenty of information in a fraction of seconds, all thanks to its &lt;a href="https://en.wikipedia.org/wiki/PageRank"&gt;Page Rank algorithm&lt;/a&gt;. Spotify, compared to it's competitors, consumes least data and gives the best personalized music experience, thanks to its &lt;a href="https://onezero.medium.com/how-spotifys-algorithm-knows-exactly-what-you-want-to-listen-to-4b6991462c5c"&gt;BaRT algorithm&lt;/a&gt; that analyzes every piece of audio to give you the one that Spotify is confident you’ll like.&lt;/p&gt;

&lt;p&gt;Real-world problems that take months can be solved in minutes using the knowledge of DSA. Understanding of data structures and algorithms may not seem relevant in the development of small scale applications, but makes an exceptional difference in large scale applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more interest, check this: &lt;a href="https://medium.com/coderbyte/how-to-get-good-at-algorithms-data-structures-d33d5163353f"&gt;Improving your Algorithms &amp;amp; Data Structure Skills&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#4-coding-standards"&gt;
  &lt;/a&gt;
  #4 Coding standards
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUzDVFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk33b0twlwt1l8eulo1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUzDVFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk33b0twlwt1l8eulo1k.png" alt="hqIXH"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following standard coding practices have a very positive impact on the software and growth of the organization, it decreases security concerns and enhances performance very significantly. &lt;/p&gt;

&lt;p&gt;Series of procedures are explicitly defined of each programming language, they can be for various aspects of the program written in that language and are considered as essential attributes of software development.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJMvY0yY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1359595959148138498/L5uqquBN_normal.jpg" alt="Todd Werth profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Todd Werth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @twerth
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Good professional programmers write boring code. Great professional programmers write really boring code. Clever &amp;amp; obscure code is written by selfish people who would rather entertain themselves than be masters of their craft
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:02 PM - 05 Oct 2018
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1048257153205600256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;To structure a smoother process of maintaining the code and providing readability to the code, coding standards, and code quality are essential to be managed by every developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read more: &lt;a href="https://www.multidots.com/importance-of-code-quality-and-coding-standard-in-software-development/"&gt;Importance of Code Quality and Coding Standard in Software Development&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h2&gt;
  &lt;a href="#5-communication-amp-collaboration"&gt;
  &lt;/a&gt;
  #5 Communication &amp;amp; Collaboration
&lt;/h2&gt;

&lt;p&gt;Communication skills are equally as important as technical skills. It's said that failures in software teams result more often from communication issues than from technical problems. Just like every other aspect of life, communication and collaboration play a very crucial role in software development. Being a talented developer won't bring the desired results if there isn't a successful collaboration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY511N2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4b4t32z55pda67s6dc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY511N2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4b4t32z55pda67s6dc5.png" alt="my-model-for-business-is-the-beatles"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are many success stories that I can talk about where effective collaboration led to a smart product. E.g. Twitter, Jack Dorsey was paired up with Biz Stone during a hackathon. He and Biz came up with the idea of Twitter, which today has 150M+ active users worldwide. &lt;/p&gt;

&lt;p&gt;How to connect with fellow developers, and build up strong connections, asking for help, pointing bugs, and all together staying humble and polite is an art that every developer should master.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn more at &lt;a href="https://www.linkedin.com/pulse/communication-key-software-engineering-donnie-flood/"&gt;Communication is Key to Software Engineering&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;These were the 5 most underrated skills of a top developer, in my opinion at least.&lt;/p&gt;

&lt;p&gt;What do you think? Did I miss any? Put it down in the comments.&lt;/p&gt;




&lt;p&gt;Find me on: &lt;a href="https://twitter.com/anubhavitis"&gt;Twitter&lt;/a&gt; | &lt;a href="https://github.com/anubhavitis"&gt;GitHub&lt;/a&gt; | &lt;a href="https://linkedin.com/in/anubhavitis"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding!
&lt;/h4&gt;

</description>
      <category>computerscience</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Promise in Javascript</title>
      <author>Ayush Saini</author>
      <pubDate>Wed, 26 May 2021 09:55:36 +0000</pubDate>
      <link>https://dev.to/ayushcodes/promise-in-javascript-ldg</link>
      <guid>https://dev.to/ayushcodes/promise-in-javascript-ldg</guid>
      <description>&lt;p&gt;In the previous post, we talked about &lt;a href="https://dev.to/ayushcodes/asynchronous-javascript-4a2"&gt;Asynchronous Javascript&lt;/a&gt;. In this article you will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are promises?&lt;/li&gt;
&lt;li&gt;What is fetch API?&lt;/li&gt;
&lt;li&gt;How and why fetch works differently than other web APIs like setTimeout?&lt;/li&gt;
&lt;li&gt;What is Microtask Queue and how it is different from Callback Queue?&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise?
&lt;/h2&gt;

&lt;p&gt;A promise is a special kind of object in javascript that lets asynchronous methods return values like synchronous methods, i.e, it gets returned immediately when we make a call to a web API like &lt;code&gt;fetch&lt;/code&gt; to supply the final value at some point in the future.&lt;/p&gt;

&lt;p&gt;We also attach functionality to the promise object that gets automatically triggered when that value comes back in the javascript from the browser API and that value would also be the input of that function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-fetch-api"&gt;
  &lt;/a&gt;
  What is fetch API?
&lt;/h2&gt;

&lt;p&gt;Suppose you are building a Weather application that displays the weather of a city/country on search. Let's say the UI is done, now comes the main part - the weather data. Here's what you might need -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app should be able to get the data from a server.&lt;/li&gt;
&lt;li&gt;When the data arrives, the app should display it.&lt;/li&gt;
&lt;li&gt;If the data fails to arrive, you would still want to display something like an error message. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Javascript doesn't know how to interact with the outer world a.k.a Internet. You know from the &lt;a href="https://dev.to/ayushcodes/asynchronous-javascript-4a2"&gt;Asynchronous Javascript&lt;/a&gt; post that this is where Web APIs shine.&lt;/p&gt;

&lt;p&gt;Fetch is a Web API that provides an interface for fetching data. Let's see how fetch works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-fetch-is-different-than-settimeout"&gt;
  &lt;/a&gt;
  Why fetch is different than setTimeout?
&lt;/h2&gt;

&lt;p&gt;Fetch works differently than the web APIs we discussed earlier like &lt;code&gt;setTimeout&lt;/code&gt; because it not only initiates a background browser functionality but also immediately returns a placeholder object known as &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-fetch-works-under-the-hood"&gt;
  &lt;/a&gt;
  How fetch works under the hood?
&lt;/h2&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upcomingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://getWeatherData.com/temp/seattle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;upcomingData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Me first??&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;upcomingData&lt;/code&gt; would be the return value of the &lt;code&gt;fetch('https://getWeatherData.com/temp/seattle')&lt;/code&gt; Fetch returns an object with the initial value &lt;code&gt;undefined&lt;/code&gt; and another &lt;em&gt;hidden&lt;/em&gt; property &lt;code&gt;onFulfilled&lt;/code&gt; that is an empty array. This special object runs all the functions provided inside the &lt;code&gt;onFulfilled&lt;/code&gt; array when the value gets updated.&lt;/p&gt;

&lt;p&gt;Fetch sets up XHR i.e, &lt;em&gt;XMLHttpRequest&lt;/em&gt; in the browser which retrieves the data from the URL. Now while fetch was getting the data from the &lt;code&gt;getWeatherData&lt;/code&gt; servers, javascript continues to execute the next line of code because the task was asynchronous.&lt;/p&gt;

&lt;p&gt;Now on the next line, we have &lt;code&gt;upcomingData.then(display)&lt;/code&gt;, if I were to ask you what this line is doing, you would most probably tell that 'when we get upcomingData, then call display function'. At least this was what I had in my mind before. But this is a wrong explanation.&lt;/p&gt;

&lt;p&gt;Remember earlier I said that there is a &lt;em&gt;hidden&lt;/em&gt; array called &lt;code&gt;onFulfilled&lt;/code&gt;. Well, the method &lt;code&gt;then&lt;/code&gt; will take the argument &lt;code&gt;display&lt;/code&gt; which is a function definition, and push it inside the &lt;code&gt;onFulfilled&lt;/code&gt; array, and on updating the placeholder value of the promise object, all the functions inside the &lt;code&gt;onFulfilled&lt;/code&gt; array will get run automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-doubt-why-use-raw-then-endraw-why-not-raw-onfulfilledpush-endraw-"&gt;
  &lt;/a&gt;
  🤔 Quick doubt - Why use &lt;code&gt;then&lt;/code&gt;, why not &lt;code&gt;onFulfilled.push()&lt;/code&gt; ?
&lt;/h3&gt;

&lt;p&gt;Because it's not a normal array, remember it's a hidden array. That's why you can't use the &lt;code&gt;push()&lt;/code&gt; method on the &lt;code&gt;onFulfilled&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;Now on the next line, &lt;code&gt;Me first??&lt;/code&gt; would be logged to the browser console. Now all of our synchronous code, but the fetch was doing its background work to get the temperature of Seattle city from the server. Let's say it comes back with a response with a value of &lt;code&gt;12°C&lt;/code&gt;, which updates the value of upcomingData object to &lt;code&gt;12°C&lt;/code&gt;, which triggers &lt;code&gt;display&lt;/code&gt; function to run with input &lt;code&gt;12°C&lt;/code&gt;. Hence, now &lt;code&gt;12°C&lt;/code&gt; is logged to the console.&lt;/p&gt;

&lt;p&gt;This is how the output would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Me first??
12°C
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-if-the-server-fails-to-send-back-the-data"&gt;
  &lt;/a&gt;
  What if the server fails to send back the data?
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;onFulfilled&lt;/code&gt;, there is &lt;code&gt;onRejected&lt;/code&gt; array also, which auto triggers any function inside it when the promise is not resolved. And you would pass the error handling function inside of &lt;code&gt;onRejected&lt;/code&gt; through another method called &lt;code&gt;catch()&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;upcomingData&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleRejected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is known as promise chaining.&lt;/p&gt;

&lt;p&gt;That's how fetch works under the hood. Now since you know that, let's see one more example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;blockFor300ms&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="c1"&gt;// blocks js thread for 300ms with long for loop&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;printHello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;upcomingData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://getWeatherData.com/temp/seattle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;upcomingData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;blockFor300ms&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Me first??&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first 3 blocks of code are 3 function definitions, so javascript will declare the functions and store their entire definition in the memory line by line.&lt;/p&gt;

&lt;p&gt;Now we hit our first obstacle, &lt;code&gt;setTimeout&lt;/code&gt; which starts a timer in the browser for 0 ms, which is completed instantaneously. Hence, at 0ms, the function &lt;code&gt;printHello&lt;/code&gt; is added to Callback Queue and &lt;code&gt;setTimeout&lt;/code&gt;'s work is done, but the Event Loop won't let it run because there is still out global code to run.&lt;/p&gt;

&lt;p&gt;Now, on the next line, we have &lt;code&gt;upcomingData&lt;/code&gt;, so javascript would declare a constant &lt;code&gt;upcomingData&lt;/code&gt; and make it &lt;code&gt;undefined&lt;/code&gt; because its value is not defined yet, i.e, fetch hasn't returned a value yet. Fetch initially returns an empty object a.k.a Promise with the value &lt;code&gt;undefined&lt;/code&gt; and onFulfilled empty array. But its work isn't done yet because it will also do some background browser work of getting the data from the server and when it retrieves the data, it will update the value property on the promise object.&lt;/p&gt;

&lt;p&gt;The data retrieving work was going on in the background while we execute the next line of code, we are calling &lt;code&gt;then()&lt;/code&gt; on &lt;code&gt;upcomingData&lt;/code&gt; and passing in the &lt;code&gt;display&lt;/code&gt; which will pass the &lt;code&gt;display&lt;/code&gt; inside the onFulfilled array and whenever the value of the promise object gets updated, the &lt;code&gt;display&lt;/code&gt; function would be triggered to run. But it isn't called yet.&lt;/p&gt;

&lt;p&gt;Now the next line of code will block the further code execution for 300ms, i.e, it would be pushed on the Call stack for 300ms.&lt;/p&gt;

&lt;p&gt;While it was there, fetch gets back the data from the servers and updates the value of the promise object to &lt;code&gt;12°C&lt;/code&gt; which triggers &lt;code&gt;display&lt;/code&gt; to run. But it is not pushed into the Call Stack directly just like the callback of &lt;code&gt;setTimeout&lt;/code&gt;. It is queued into a Queue. Well, it turns out like there is a &lt;em&gt;Callback Queue&lt;/em&gt; that we use to queue the callback of &lt;code&gt;setTimeout&lt;/code&gt;, there is another queue known as &lt;strong&gt;Microtask Queue&lt;/strong&gt; in which functions triggered by updating the value property of promise object get queued. &lt;/p&gt;

&lt;p&gt;Not after 300ms, the function &lt;code&gt;blockfor300ms&lt;/code&gt; is popped off the Call Stack, and the code on the next line gets executed, which logs &lt;code&gt;Me first??&lt;/code&gt; onto the browser console, and all of our synchronous code is finished executing.&lt;/p&gt;

&lt;p&gt;There are two queues with functions waiting to be executed, now comes the question:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-will-run-first"&gt;
  &lt;/a&gt;
  🥇 Which will run first?
&lt;/h3&gt;

&lt;p&gt;It turns out that Event Loop gives precedence to &lt;strong&gt;Microtask Queue&lt;/strong&gt; over Callback Queue. It sees &lt;code&gt;display&lt;/code&gt; waiting inside the Microtask Queue, hence it is dequeued and pushed into the Call Stack first, and &lt;code&gt;12°C&lt;/code&gt; is logged to the console.&lt;/p&gt;

&lt;p&gt;Now since the Microtask Queue is empty, Event Loop will check the Callback Queue, and then push &lt;code&gt;printHello&lt;/code&gt; into the Call Stack and &lt;code&gt;Hello&lt;/code&gt; is logged to the console window.&lt;/p&gt;

&lt;p&gt;This is how the output of the code would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Me first??
12°C
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's surprising how &lt;code&gt;printHello&lt;/code&gt; gets called at the last even though it was the one waiting from the beginning. And here's an interesting thing you can do, you can never let &lt;code&gt;printHello&lt;/code&gt; run by continuously queuing the Microtask Queue and starve the Callback Queue.&lt;/p&gt;




&lt;p&gt;This is how fetch works under the hood and why is it different from setTimeout. If you understand this, there is pretty much nothing left in the asynchronous javascript.&lt;/p&gt;

&lt;p&gt;If you are still with me, I want to thank you for reading it. Let me know in the comments if there's something you would like to discuss, or reach out to me on Twitter &lt;a href="https://twitter.com/AyushCodes"&gt;@AyushCodes&lt;/a&gt;, my DMs are open for you.&lt;/p&gt;

&lt;p&gt;Happy hacking!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  📖 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;MDN Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;MDN Fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/javascript-new-hard-parts"&gt;Javascript: The New Hard Parts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>asynchronous</category>
      <category>web</category>
      <category>api</category>
    </item>
    <item>
      <title>5 expensive Kubernetes cost traps and how to deal with them</title>
      <author>CAST AI</author>
      <pubDate>Wed, 26 May 2021 09:44:06 +0000</pubDate>
      <link>https://dev.to/castai/5-expensive-kubernetes-cost-traps-and-how-to-deal-with-them-oja</link>
      <guid>https://dev.to/castai/5-expensive-kubernetes-cost-traps-and-how-to-deal-with-them-oja</guid>
      <description>&lt;p&gt;Cost management gets complicated fast in Kubernetes, and more businesses will face this problem soon. According to &lt;a href="https://www.gartner.com/en/newsroom/press-releases/2020-06-25-gartner-forecasts-strong-revenue-growth-for-global-co"&gt;Gartner&lt;/a&gt;, 75% of companies will be running containerized applications in production by 2022.&lt;/p&gt;

&lt;p&gt;If you use Kubernetes on AWS, you’re probably implementing &lt;a href="https://cast.ai/blog/8-best-practices-to-reduce-your-aws-bill-for-kubernetes/"&gt;best practices to reduce your bill&lt;/a&gt; already. To maximize your &lt;a href="https://cast.ai/"&gt;cloud cost savings&lt;/a&gt;, though, you need to understand the specific challenges Kubernetes poses in cost management and optimization. Read this article to find out what they are and how to handle them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-kubernetes-cloud-costs-so-confusing"&gt;
  &lt;/a&gt;
  Why Are Kubernetes Cloud Costs so Confusing?
&lt;/h2&gt;

&lt;p&gt;Before containerization, allocating resources and costs was way easier. You just had to tag resources to a particular project or a team. This was enough for FinOps to determine your typical cost structure and control your budget better. Calculating the total project cost was easier once you mapped the vendor tags and identified the team that owns the project.&lt;/p&gt;

&lt;p&gt;Naturally, in this scenario, you’d also be run the risk of overprovisioning your resources. Developers might order more resources than they need to make sure applications run without interruption. As Kubernetes and other containerization tools become more widespread, the traditional process of allocating and reporting on costs doesn’t work anymore. Figuring out &lt;a href="https://cast.ai/blog/kubernetes-cost-estimation-4-problems-and-how-to-solve-them/"&gt;Kubernetes cost estimation&lt;/a&gt;, allocation and reporting isn’t easy.&lt;/p&gt;

&lt;p&gt;If you still can’t make sense of your team’s expenses in detail, don’t worry. You’re not the only one out there who struggles to keep costs at bay. To improve your cost control, start by exploring these cost challenges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-these-5-kubernetes-cost-traps"&gt;
  &lt;/a&gt;
  Avoid These 5 Kubernetes Cost Traps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jp1XNmA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o09ayso768x8wpa3m4sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jp1XNmA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o09ayso768x8wpa3m4sm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-calculating-cost-per-container"&gt;
  &lt;/a&gt;
  1. Calculating Cost Per Container
&lt;/h3&gt;

&lt;p&gt;Calculating the cost of a single container isn’t hard on its own, but it requires infrastructure and the time to do it.&lt;/p&gt;

&lt;p&gt;Kubernetes clusters are shared services run by multiple teams, holding numerous containers and containing various apps. Once a container is deployed, you use some of the cluster’s resources and pay for every server instance that is part of this cluster.&lt;/p&gt;

&lt;p&gt;Now imagine that you have three teams working on 10 unique applications. Knowing which application uses your cluster resources is next to impossible because each of these projects uses multiple containers. You have no idea which part a given team is using and how much of it is being used in a particular project.&lt;/p&gt;

&lt;p&gt;In short, it’s not clear how many resources an individual container uses from one specific server. This makes calculating and allocating costs a tad more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-you-pay-via-different-cost-centers"&gt;
  &lt;/a&gt;
  2. You Pay via Different Cost Centers
&lt;/h3&gt;

&lt;p&gt;Your company contains multiple cost centers, and not all development costs come from the DevOps budget. Some applications might be created by one of your product teams, an R&amp;amp;D team or another team in your IT department for a shadow IT project.&lt;/p&gt;

&lt;p&gt;The size and structure of your organization are key here. If your company offers multiple digital services, each of which has its teams and budgets, tracking the costs of the cloud services gets complicated. When multiple teams use the same cluster, defining which team or project is responsible for which part of the final bill becomes a challenge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-tracking-costs-across-clouds-is-not-easy"&gt;
  &lt;/a&gt;
  3. Tracking Costs Across Clouds Is Not Easy
&lt;/h3&gt;

&lt;p&gt;It gets even harder to track once you consider multicloud. A &lt;a href="https://www.gartner.com/smarterwithgartner/why-organizations-choose-a-multicloud-strategy/"&gt;Gartner survey&lt;/a&gt; of public cloud users shows that today 81% of respondents are working with two or more providers. According to ICD, &lt;a href="https://www.idc.com/getdoc.jsp?containerId=prMETA46165020"&gt;90% of enterprises will rely on multiple clouds&lt;/a&gt; or a mix of on-prem, private, hybrid and public clouds by 2022.&lt;/p&gt;

&lt;p&gt;So, soon you might be running your Kubernetes clusters across multiple clouds and your containers will be using different nodes.&lt;/p&gt;

&lt;p&gt;Your applications can be scattered across different clouds such as AWS, Google Cloud Platform, Azure or Digital Ocean. Each of them might host just a tiny part of your overall workload, which further complicates tracking nodes and clusters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-scaling-complicates-the-matter-further"&gt;
  &lt;/a&gt;
  4. Scaling Complicates the Matter Further
&lt;/h3&gt;

&lt;p&gt;To make the most of Kubernetes, most teams use built-in &lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/"&gt;Kubernetes autoscaling&lt;/a&gt; mechanisms. The tighter you configure them, the less waste and lower costs of running your clusters.&lt;/p&gt;

&lt;p&gt;While Vertical Pod Autoscaler (VPA) automatically adjusts requests and limits configuration to lower overhead, Horizontal Pod Autoscaler (HPA) focuses on scaling out to reach the optimum amount of CPU or RAM allocated to an existing instance.&lt;/p&gt;

&lt;p&gt;These scaling mechanisms affect cost calculation, however. VPA constantly changes the number of requests on a container, expanding and shrinking its resource allocation. HPA, on the other hand, changes the number of containers dynamically.&lt;/p&gt;

&lt;p&gt;For example, imagine three web server containers running during the night. During peak hours, HPA scales from three to 50 containers. Then, it scales down during lunch and then back up. In the evening it settles at a low level.&lt;/p&gt;

&lt;p&gt;This means that the number of containers and their sizes are extremely dynamic, making the process of calculating and forecasting costs much more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-containers-are-way-more-dynamic"&gt;
  &lt;/a&gt;
  5. Containers Are Way More Dynamic
&lt;/h3&gt;

&lt;p&gt;With containers, you can reschedule workloads across a region, zone or instance type. A container’s lifespan is just &lt;a href="https://www.datadoghq.com/container-report/"&gt;one day&lt;/a&gt;. It’s a small glimpse in time when compared to how long a virtual machine can last. More and more people run functions and cron jobs on Kubernetes. The lifetimes of these are from seconds to minutes.&lt;/p&gt;

&lt;p&gt;The dynamic nature of the containerized environment adds another layer of complexity to the mix. Your cost management system needs to be able to handle that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-handle-these-kubernetes-cost-issues"&gt;
  &lt;/a&gt;
  How to Handle These Kubernetes Cost Issues
&lt;/h2&gt;

&lt;p&gt;To avoid falling into one of the traps outlined above, you need a solid cost analytics process based on reliable data sources. Here’s an example to show you what it could look like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find a cost visibility tool to track costs in detail — for example, at the microservice level.&lt;/li&gt;
&lt;li&gt;Once you have cost visibility in place, you can set precise budgets and monitor elements such as traffic costs to understand them better.&lt;/li&gt;
&lt;li&gt;Next, allocate your costs by namespace, pod, deployment and label.&lt;/li&gt;
&lt;li&gt;Analyze the pricing information to predict how much you’ll have to pay next month.&lt;/li&gt;
&lt;li&gt;Keep monitoring costs against your estimates and pinpoint cost or usage anomalies to analyze them further.
Currently, most companies solve this problem manually, but what if you could automate this entire process?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#solution-automating-kubernetes-cost-management"&gt;
  &lt;/a&gt;
  Solution: Automating Kubernetes Cost Management
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHKB7-_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssfgfwfcxrjrdoxuglcj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHKB7-_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ssfgfwfcxrjrdoxuglcj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allocating resources, calculating costs and analyzing Kubernetes pricing information shouldn’t be as challenging as it is today. Syncing up the cost and resource allocation is the way to go.&lt;/p&gt;

&lt;p&gt;What are the must-have features to look for in an automation tool?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Advanced cloud bill analysis and cost visibility feature with the ability to analyze costs down to individual microservices and get universal metrics for any cloud provider.&lt;/li&gt;
&lt;li&gt;Automated instance selection and rightsizing.&lt;/li&gt;
&lt;li&gt;Use of &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;spot instances&lt;/a&gt; for up to 90% cost savings.&lt;/li&gt;
&lt;li&gt;Forecasting expenses for projects, clusters, namespaces and deployments.
### Automated Cost Management
Betting on manual strategies for controlling your Kubernetes cloud costs is risky. They’re usually time-consuming, error-prone and difficult to maintain.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deploying an automated cost management solution saves you lots of headaches and helps you focus on what matters most to your business: delivering quality service to customers.&lt;/p&gt;

&lt;p&gt;We built &lt;a href="https://cast.ai/"&gt;CAST AI&lt;/a&gt; to do just that. Book a demo and give it a spin to see your Kubernetes costs go down.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>devops</category>
      <category>googlecloud</category>
    </item>
  </channel>
</rss>
