<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What are GitHub Actions?</title>
      <author>Brian Douglas</author>
      <pubDate>Mon, 01 Feb 2021 17:09:21 +0000</pubDate>
      <link>https://dev.to/github/what-are-github-actions-3pml</link>
      <guid>https://dev.to/github/what-are-github-actions-3pml</guid>
      <description>&lt;p&gt;GitHub Actions allows you to automate, customize and execute your software development workflows inside your repository.&lt;/p&gt;

&lt;p&gt;In my projects, I like to run my test every time there's a push to my branch would get of action. To do this, I only need a repository to enable GitHub Action workflows. &lt;/p&gt;

&lt;p&gt;I can create a GitHub Action workflow by navigating to the Actions tab in my project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--djF-rgzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08zwqri2h0jewrzomgz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--djF-rgzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08zwqri2h0jewrzomgz2.png" alt="Workflow templates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub recommends workflows for me to use and can even make recommendations based on the programming language.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PctgZiTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g5qfavdmytrexrmacgvc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PctgZiTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g5qfavdmytrexrmacgvc.gif" alt="gif of tests passing in GitHub Actions"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After committing the CI template workflow file, I can see my tests passing directly in my repo.&lt;/p&gt;

&lt;p&gt;GitHub Actions run on several GitHub webhook events. I recommend checking out the &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows"&gt;GitHub Documentation for the full list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jump into GitHub Actions today by exploring outstanding community actions in the GitHub Marketplace is also a great place to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dwvMztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/77sonyt2pey6nfz158xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dwvMztm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/77sonyt2pey6nfz158xj.png" alt="GitHub Marketplace screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is part of my 28 days of Actions series. To get notified of more GitHub Action tips, follow the GitHub organization right here on Dev.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>actions</category>
    </item>
    <item>
      <title>Optimizing API calls in web components</title>
      <author>Collin Kleest</author>
      <pubDate>Mon, 01 Feb 2021 15:18:51 +0000</pubDate>
      <link>https://dev.to/collinkleest/optimizing-api-calls-in-web-components-14kn</link>
      <guid>https://dev.to/collinkleest/optimizing-api-calls-in-web-components-14kn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;When building a web component you may need to grab a resource from an external entity. This is typically called an "API call", in this particular blog post I will go over how we can optimize API calls when fetching data using Javascripts &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;fetch&lt;/a&gt; method and some extra tricks. Throughout this article, I will be referring to code in an element I wrote for &lt;a href="https://github.com/elmsln/lrnwebcomponents"&gt;&lt;code&gt;elmsln/lrnwebcomponents&lt;/code&gt;&lt;/a&gt; web component mono-repo. &lt;br&gt;
Here is the full source code of the element itself &lt;a href="https://github.com/elmsln/lrnwebcomponents/blob/master/elements/github-preview/src/github-preview.js"&gt;github-preview-source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#main-points" class="anchor"&gt;
  &lt;/a&gt;
  Main Points
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#js-load"&gt;How the browser loads Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch"&gt;Making an api request using fetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lit"&gt;Lit-element lifecycle methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timeout"&gt;Using timeout and debounce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#headers"&gt;Applying headers for caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-the-browser-loads-javascript" class="anchor"&gt;
  &lt;/a&gt;
  How the browser loads javascript &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This may seem like a simple concept, you include your script on an HTML page and your javascript is loaded. Under the hood, your browser is doing a lot more than just loading that script. Javascript is built on the idea of asynchronous processing which is basically processing the code while the browser is doing other things to set up the page. This all happens very quickly but occurs in the browser's event loop.&lt;/p&gt;

&lt;p&gt;The event loop sets tasks in a queue executing each task and waiting for it to finish, then executing the next task in the queue. This is important to understand because our API call will be registered as a task, queued behind our script because we encapsulate it in a setTimeout call. More on this later...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#making-an-api-request-using-fetch" class="anchor"&gt;
  &lt;/a&gt;
  Making an API request using fetch &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This may be straightforward but I am still going to cover it. Inside my web component, I will define a function called &lt;code&gt;fetchGithubData&lt;/code&gt;. This function will accept some parameters needed to make the call to Github's API and return data to a handler method, which will save the data inside our element so it can display it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetchGithubData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/repos/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__assetAvailable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The function takes in an apiUrl (&lt;a href="https://api.github.com"&gt;https://api.github.com&lt;/a&gt;), a GitHub organization or user, and a repository name then feeds that data to our handler function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__assetAvailable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repoLang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stargazers_count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__forks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our data handler first checks if we got a response, if we do have a response it sets some properties that get rendered inside of our web component.&lt;/p&gt;

&lt;p&gt;Here is what our web component looks like for reference.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPT62Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da6mxnh8xuwf86lcwk3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPT62Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/da6mxnh8xuwf86lcwk3z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We can see it contains some of the properties that we set in our handler method like title, the repos primary language, forks, description and stars.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lit-element-lifecycle-methods" class="anchor"&gt;
  &lt;/a&gt;
  Lit Element lifecycle methods &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since my element uses the &lt;a href="https://lit-element.polymer-project.org/"&gt;lit-element&lt;/a&gt; library we will take advantage of the life cycle methods to make our API call. Lit element provides a couple of life cycle methods but the two we will look at are &lt;code&gt;firstUpdated&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;firstUpdated&lt;/code&gt; method gets called as soon as the DOM registers the element. The &lt;code&gt;updated&lt;/code&gt; lifecyle method gets called immediately after &lt;code&gt;firstUpdated&lt;/code&gt; and is where we will make our API call. &lt;/p&gt;

&lt;p&gt;We want to make our call in the update function because if the repository or organization changes after the element has been mounted and rendered we can respond to that change because our element has been "updated". Take a look at this demo video to show why we use our API call inside the updated lifecycle method.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7A3dCh6rQwc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you are interested in learning more about lit-elements life cycle methods visit their docs: &lt;a href="https://lit-element.polymer-project.org/guide/lifecycle"&gt;https://lit-element.polymer-project.org/guide/lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-timeout-and-debounce" class="anchor"&gt;
  &lt;/a&gt;
  Using timeout and debounce &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;So now I am going to show why and how we will use the Javascripts built-in &lt;code&gt;setTimeout&lt;/code&gt; function to make our API call. &lt;/p&gt;

&lt;p&gt;Here is the code in our updated life cycle method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;changedProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// only make the fetch after we get everything setup&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;repo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;org&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__debounce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__debounce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchGithubData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We use a forEach to go through each property that changed. You may be wondering well what about the initial properties set, these properties are still considered new, and are passed into the updated function when the component mounts.&lt;/p&gt;

&lt;p&gt;Next, we check if the properties we want to consider are properties of the class. Then if there is already a timeout set in debounce variable we clear this. We do this to make sure we only make the API call once, so once our forEach gets to the last changed property the timeout won't clear and make the API call. &lt;/p&gt;

&lt;p&gt;We use setTimeout because our browser will call this once all the javascript in the file has been processed. This allows the browser to make sure everything is in place before we make our API call. The setTimeout callback gets added to the browser's event loop queue and gets called immediately after it's interpreted all the other Javascript in the file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-headers-for-caching" class="anchor"&gt;
  &lt;/a&gt;
  Applying headers for caching &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Lastly, we will apply headers to our request that tells the browser to cache our result (save it for later). This increases performance when your browser makes the same request, it checks the cache first if the response object is present it will use the cached response instead of making a new request. &lt;/p&gt;

&lt;p&gt;We can set out headers to do this in the constructor of the element as shown here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://raw.githubusercontent.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;README.md&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;master&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewMoreText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;View More&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notFoundText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Asset not found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;force-cache&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we can use these headers in our fetch call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://someendpoint.com/git/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it! If you are interested in learning more about web components and some of the stuff I referenced in this blog post check out the resources section below. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://open-wc.org/"&gt;Open Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lit-element.polymer-project.org/"&gt;Lit Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;How the browser processes JS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elmsln/lrnwebcomponents/tree/master/elements/github-preview"&gt;My github preview element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elmsln/lrnwebcomponents"&gt;The best WC mono-repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#socials" class="anchor"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://linkedin.com/in/collinkleest"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/collinkleest/"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>35 Website Cheat Sheet For Developer</title>
      <author>haycuoilennao19</author>
      <pubDate>Mon, 01 Feb 2021 14:07:26 +0000</pubDate>
      <link>https://dev.to/haycuoilennao19/35-website-cheat-sheet-for-developer-22hk</link>
      <guid>https://dev.to/haycuoilennao19/35-website-cheat-sheet-for-developer-22hk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  What Is Cheat Sheet?
&lt;/h1&gt;

&lt;p&gt;With the rapid development of technologies in web programming, the amount of knowledge we have to learn is increasing. And sometimes you will not be able to remember all the syntax, methods ... of a programming language or framework. So cheat sheet was born to solve the above problem. It will synthesize all syntax, concepts ... in a systematic and intuitive way that makes it easy to find what you want to apply in your web development process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cheat-sheets-for-developer" class="anchor"&gt;
  &lt;/a&gt;
  Cheat Sheets For Developer
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#overapicom" class="anchor"&gt;
  &lt;/a&gt;
  OverAPI.com
&lt;/h2&gt;

&lt;p&gt;OverAPI.com is a website that aggregates cheat sheets for many popular web programming languages such as Javascript, NodeJS, PHP, Python, CSS ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ikT4DwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592568809/trang-web-cheat-sheet/OverAPI_iu3jzc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ikT4DwH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592568809/trang-web-cheat-sheet/OverAPI_iu3jzc.png" alt="OverAPI.com"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://overapi.com/javascript"&gt;OverAPI.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesomecheatsheets" class="anchor"&gt;
  &lt;/a&gt;
  Awesome-Cheatsheets
&lt;/h2&gt;

&lt;p&gt;Awesome-Cheatsheets is also a collection of popular web programming language cheatsheet including Django Cheatsheet, Node.js Cheatsheet, Laravel Cheatsheet. ... the frontend team has The HTML5 Cheatsheet, Vue.js Cheatsheet, React.js Cheatsheet ... You can refer to its main page!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3ka8P4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592569462/trang-web-cheat-sheet/Awesome-Cheatsheets_nl6bge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3ka8P4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592569462/trang-web-cheat-sheet/Awesome-Cheatsheets_nl6bge.png" alt="Awesome-Cheatsheets"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lecoupa.github.io/awesome-cheatsheets/"&gt;Awesome-Cheatsheets&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-4-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  Bootstrap 4 Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;Bootstrap 4 Cheat Sheet is a site that aggregates all the functions and displays the components in Bootstrap version 4.3.1. You just need to select a class, it will automatically show the code and example for that class. It also has a copy function that allows you to quickly copy that code into your program.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rbXKd2_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592570130/trang-web-cheat-sheet/Bootstrap_4_Cheat_Sheet_mfxryy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rbXKd2_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592570130/trang-web-cheat-sheet/Bootstrap_4_Cheat_Sheet_mfxryy.png" alt="Bootstrap 4 Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hackerthemes.com/bootstrap-cheatsheet/"&gt;Bootstrap 4 Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gitsheet" class="anchor"&gt;
  &lt;/a&gt;
  GitSheet
&lt;/h2&gt;

&lt;p&gt;GitSheet is an aggregator of commands that you often use with Git. For each statement, it describes detail usage. You just need to select the command and press the copy button and it will automatically copy the command for you.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ujbn6Al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592570803/trang-web-cheat-sheet/GitSheet_mmbier.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ujbn6Al--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592570803/trang-web-cheat-sheet/GitSheet_mmbier.png" alt="GitSheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gitsheet.wtf/"&gt;GitSheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html5-element-index" class="anchor"&gt;
  &lt;/a&gt;
  HTML5 Element Index
&lt;/h2&gt;

&lt;p&gt;The HTML5 element index is a web page aggregating new or redefined objects in the HTML5 version. With each HTML5 object, there is content that fully describes its features and provides additional articles related to that object to help you better understand. Also, when you click on the code, it will display an example code snippet corresponding to the object that we choose. HTML5 objects in web pages will be arranged alphabetically!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKrclzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592571425/trang-web-cheat-sheet/HTML5_Element_Index_ri1kwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKrclzvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592571425/trang-web-cheat-sheet/HTML5_Element_Index_ri1kwm.png" alt="HTML5 Element Index"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://html5doctor.com/element-index/"&gt;HTML5 Element Index&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  HTML CheatSheet
&lt;/h2&gt;

&lt;p&gt;HTML CheatSheet is a website that synthesizes useful examples and tools for web development to help us reduce the time and effort in web development such as choosing colors, creating links, creating images, create tables ... for HTML. It also has tools for other genres in web programming such as CSS, Javascript, Jquery, SEO ... you can see more on its main page!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lN0g9lDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592572008/trang-web-cheat-sheet/HTML_CheatSheet_fhh31a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lN0g9lDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592572008/trang-web-cheat-sheet/HTML_CheatSheet_fhh31a.png" alt="HTML CheatSheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://htmlcheatsheet.com/"&gt;HTML CheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use" class="anchor"&gt;
  &lt;/a&gt;
  Can I Use
&lt;/h2&gt;

&lt;p&gt;Can I Use is a website that provides information about each different browser version, it will help programmers know which web technology can be used for those browsers. It also has full information about current popular browsers such as Chrome, Firefox, IE ... In addition, the supported features will be displayed in color with support, red is not support, dark yellow for partial support, and gray for unspecified support.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vMFCcNRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592618425/trang-web-cheat-sheet/Can_I_Use_1_tkzp5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vMFCcNRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592618425/trang-web-cheat-sheet/Can_I_Use_1_tkzp5g.png" alt="Can I Use"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://caniuse.com/"&gt;Can I Use&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ricos-cheatsheets" class="anchor"&gt;
  &lt;/a&gt;
  Rico's cheatsheets
&lt;/h2&gt;

&lt;p&gt;Rico's cheatsheets is an almost complete aggregation cheatsheet for web developers such as React, Vue, ES6, Vim, Kotlin ... For each category, it will be divided into many smaller sections to help you easily find the cheatsheet you want. Also you can find common keyboard shortcuts for code editors such as Visual Studio Code, Atom, Sublime Text ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--laEzpmOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592619315/trang-web-cheat-sheet/Rico_s_cheatsheets_zin6tv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--laEzpmOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592619315/trang-web-cheat-sheet/Rico_s_cheatsheets_zin6tv.png" alt="Rico's cheatsheets"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://devhints.io/"&gt;Rico's cheatsheets&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatography" class="anchor"&gt;
  &lt;/a&gt;
  Cheatography
&lt;/h2&gt;

&lt;p&gt;Cheatography is also a collection of cheat sheets for web development and is divided into several sub-categories such as Miscellaneous, Network, DevOps, Database, Programming Language ... It has more than 800 cheat sheets for programming. and added a search feature, filter by many criteria to help you find the right cheat sheet for you. You can also find more cheat sheets for software, education, marketing, games ...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1CJHcnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592620325/trang-web-cheat-sheet/Cheatography_itqpu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1CJHcnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592620325/trang-web-cheat-sheet/Cheatography_itqpu7.png" alt="Cheatography"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cheatography.com/programming/"&gt;Cheatography&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css3-animation-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  CSS3 Animation Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;CSS3 Animation Cheat Sheet is a collection of CSS3 animations for your web project. You just need to load the animations.css file and call the effect class you want for the object in the HTML. Full and detailed examples are provided to help you choose the effect more easily. This part you see in the demo page for more reference!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p7oveZdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592620930/trang-web-cheat-sheet/CSS3_Animation_Cheat_Sheet_frirmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p7oveZdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592620930/trang-web-cheat-sheet/CSS3_Animation_Cheat_Sheet_frirmp.png" alt="CSS3 Animation Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.justinaguilar.com/animations/"&gt;CSS3 Animation Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-grid-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  CSS Grid Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;CSS Grid Cheat Sheet is a website that helps you create grid system using CSS3 for web pages easily. With tools that support full features such as defining grid-template-columns, grid-template-rows, grid-column-gap ... You just need to enter information for those properties, the web page will automatically display the grid system. It gives you a more intuitive look and makes it easier to determine if this grid system is suitable for your website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GsLrxdnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592621609/trang-web-cheat-sheet/CSS_Grid_Cheat_Sheet_a8dfr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GsLrxdnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592621609/trang-web-cheat-sheet/CSS_Grid_Cheat_Sheet_a8dfr0.png" alt="CSS Grid Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://alialaa.github.io/css-grid-cheat-sheet/"&gt;CSS Grid Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grid" class="anchor"&gt;
  &lt;/a&gt;
  Grid
&lt;/h2&gt;

&lt;p&gt;Grid is a web page that aggregates complete detailed examples for each property used in defining the CSS3 grid system for a website. You just need to click on the example and the code will be automatically copied and we just need to paste it into the program to be used.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVk724i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592622131/trang-web-cheat-sheet/grid_ywtfrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVk724i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592622131/trang-web-cheat-sheet/grid_ywtfrk.png" alt="Grid"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://grid.malven.co/"&gt;Grid&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#easing-functions" class="anchor"&gt;
  &lt;/a&gt;
  Easing functions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEECRUbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592624926/trang-web-cheat-sheet/Easing_functions_urfvne.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEECRUbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592624926/trang-web-cheat-sheet/Easing_functions_urfvne.png" alt="Easing functions"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://easings.net/en#"&gt;Easing functions&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#media-queries-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  Media Queries Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paK7idlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625071/trang-web-cheat-sheet/Media_Queries_Cheat_Sheet_f3iprb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paK7idlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625071/trang-web-cheat-sheet/Media_Queries_Cheat_Sheet_f3iprb.png" alt="Media Queries Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://mac-blog.org.ua/css-3-media-queries-cheat-sheet/"&gt;Media Queries Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsive-web-design-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  Responsive Web Design Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ys-h7gzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625199/trang-web-cheat-sheet/Responsive_Web_Design_Cheat_Sheet_ck8kt2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ys-h7gzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625199/trang-web-cheat-sheet/Responsive_Web_Design_Cheat_Sheet_ck8kt2.png" alt="Responsive Web Design Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://uxpin.s3.amazonaws.com/responsive_web_design_cheatsheet.pdf"&gt;Responsive Web Design Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html5-canvas-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  HTML5 Canvas Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUU1NQHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625720/trang-web-cheat-sheet/HTML5_Canvas_Cheat_Sheet_qkb5xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUU1NQHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592625720/trang-web-cheat-sheet/HTML5_Canvas_Cheat_Sheet_qkb5xi.png" alt="HTML5 Canvas Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://simon.html5.org/dump/html5-canvas-cheat-sheet.html"&gt;HTML5 Canvas Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-developers-seo-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  Web Developer's SEO Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asgzHGmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626119/trang-web-cheat-sheet/Web_Developer_s_SEO_Cheat_Sheet_bqllou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asgzHGmc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626119/trang-web-cheat-sheet/Web_Developer_s_SEO_Cheat_Sheet_bqllou.png" alt="Web Developer's SEO Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://moz.com/learn/seo/seo-cheat-sheet"&gt;Web Developer's SEO Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modern-javascript-cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  Modern JavaScript Cheatsheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xwUntpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626236/trang-web-cheat-sheet/Modern_JavaScript_Cheatsheet_youvpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xwUntpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626236/trang-web-cheat-sheet/Modern_JavaScript_Cheatsheet_youvpx.png" alt="Modern JavaScript Cheatsheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://mbeaudru.github.io/modern-js-cheatsheet/"&gt;Modern JavaScript Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html5-security-cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  HTML5 Security Cheatsheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCkfKURj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626495/trang-web-cheat-sheet/HTML5_Security_Cheatsheet_sef1rb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCkfKURj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592626495/trang-web-cheat-sheet/HTML5_Security_Cheatsheet_sef1rb.png" alt="HTML5 Security Cheatsheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://html5sec.org/"&gt;HTML5 Security Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-vocabulary" class="anchor"&gt;
  &lt;/a&gt;
  Html Vocabulary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R-7YkK03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592627023/trang-web-cheat-sheet/Html_Vocabulary_vbumbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-7YkK03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592627023/trang-web-cheat-sheet/Html_Vocabulary_vbumbd.png" alt="Html Vocabulary"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://apps.workflower.fi/vocabs/html/en#children"&gt;Html Vocabulary&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex-cheat-sheet" class="anchor"&gt;
  &lt;/a&gt;
  Regex Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZy0JtjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592637928/trang-web-cheat-sheet/Regex_Cheat_Sheet_ak8eef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZy0JtjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592637928/trang-web-cheat-sheet/Regex_Cheat_Sheet_ak8eef.png" alt="Regex Cheat Sheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/emmabostian/regex-cheat-sheet-2j2a"&gt;Regex Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-cheatsheets" class="anchor"&gt;
  &lt;/a&gt;
  Developer cheatsheets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y97tdF9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592638133/trang-web-cheat-sheet/Developer_cheatsheets_ozjiwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y97tdF9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592638133/trang-web-cheat-sheet/Developer_cheatsheets_ozjiwl.png" alt="Developer cheatsheets"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.developer-cheatsheets.com/"&gt;Developer cheatsheets&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vue-cheatsheet" class="anchor"&gt;
  &lt;/a&gt;
  Vue Cheatsheet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jn2EZZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592638381/trang-web-cheat-sheet/Vue_Cheatsheet_r9eeqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Jn2EZZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dn4nxz7f0/image/upload/v1592638381/trang-web-cheat-sheet/Vue_Cheatsheet_r9eeqw.png" alt="Vue Cheatsheet"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marozed.com/vue-cheatsheet/"&gt;Vue Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want more article please go to &lt;a href="https://en.niemvuilaptrinh.com/"&gt;Niemvuilaptrinh&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Best ways to center objects in CSS (Horizontally  and Vertically )</title>
      <author>Amir Jafari</author>
      <pubDate>Mon, 01 Feb 2021 13:48:02 +0000</pubDate>
      <link>https://dev.to/amirjafari1992/best-ways-to-center-objects-in-css-5558</link>
      <guid>https://dev.to/amirjafari1992/best-ways-to-center-objects-in-css-5558</guid>
      <description>&lt;p&gt;In this article, I going to show you how you can center your objects horizontally and vertically in CSS in three different ways.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#number-one" class="anchor"&gt;
  &lt;/a&gt;
  Number one:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#number-two" class="anchor"&gt;
  &lt;/a&gt;
  Number two:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This way is not supported by IE&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#number-three" class="anchor"&gt;
  &lt;/a&gt;
  Number three:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which way you prefer and do you know other ways?&lt;/p&gt;

</description>
      <category>css</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>50+ Tools to Ace &amp; Launch your Side Projects</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 01 Feb 2021 13:03:49 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/50-tools-to-ace-launch-your-side-projects-4fe9</link>
      <guid>https://dev.to/hrishikesh1990/50-tools-to-ace-launch-your-side-projects-4fe9</guid>
      <description>&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;We’re always working on awesome side projects at &lt;a href="https://flexiple.com"&gt;Flexiple&lt;/a&gt;, and I know a lot of you are too 🙂.&lt;/p&gt;

&lt;p&gt;So, I’ve compiled a list of TOP, mostly FREE, or at least AFFORDABLE tools that will come in handy for each stage of your side project, right from inception to launch, and beyond.&lt;/p&gt;

&lt;p&gt;I've tagged free-forever tools a [Free]. I've also tagged some tools under [Free version] and [Free trial].&lt;/p&gt;

&lt;p&gt;You can navigate between sections here:&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;a href="#idea"&gt;Phase 1: Getting the idea&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ideation"&gt;1. Ideation tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feedback"&gt;2. Feedback platforms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#marketing"&gt;Phase 2: Marketing front&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#marketing-website"&gt;1. Marketing website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#email"&gt;2. Email marketing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#capturing"&gt;3. Capturing users&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#design"&gt;Phase 3: Design the product&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#inspiration"&gt;1. For Design inspiration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#design-tools"&gt;2. Design tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#free-design"&gt;3. Free design resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#build"&gt;Phase 4: Building the product&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#nocode"&gt;1. Simple products, try NoCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nuanced"&gt;2. More nuanced products&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#launch"&gt;Phase 5: Launch&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#launch-platforms"&gt;1. Launch platforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#promotion"&gt;2. Promotion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#social"&gt;2. Social media tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#product-feedback"&gt;Phase 6: Product feedback&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="#other"&gt;Other useful tools/resources&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Do check out my projects here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://flexiple.com"&gt;Flexiple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remote.tools"&gt;Remote Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remoteclan.com"&gt;Remote Clan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2.flexiple.com/scale"&gt;Scale&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#phase-1-getting-the-idea" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 1: Getting the idea &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A great idea can make or break a product, but to build great products, you shouldn't force-fit ideas. You should instead focus on making a list of problems that need solving and then try to think of ways to solve them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ideation-tools" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Ideation tools &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#miro-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://miro.com/"&gt;Miro&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_d1iYs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/23z1h1vee5tp9x2c2vbp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_d1iYs5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/23z1h1vee5tp9x2c2vbp.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Miro's whiteboard toolkit is great for jotting down ideas, organising them, and sharing them with others for feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-web-whiteboard-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://awwapp.com/"&gt;A Web Whiteboard&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sB1MJQNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhoxp14loti8tbgr0oab.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sB1MJQNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zhoxp14loti8tbgr0oab.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A Web Whiteboard is a touch-friendly and very simple-to-use web browser-based tool that can be used for drawing sketches, brainstorming visually and collaborating with others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#milanote-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://milanote.com/"&gt;Milanote&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIdRbw4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gp29gua7eci50dh7v3v9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIdRbw4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gp29gua7eci50dh7v3v9.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Milanote is excellent for organising your ideas and projects into visual "moodboards". You can use it for gathering inspiration, collating your ideas, and exploring creative possibilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="//notion.so"&gt;Notion&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3csmtf-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zp5b6a48qlkar3vxkir.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3csmtf-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4zp5b6a48qlkar3vxkir.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Notion is a jack-of-all-trades note-taking app with a clean and pleasant UI. It is free to use, highly flexible, and is perfect for writing down ideas in a structured manner and linking between notes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-feedback-platforms" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Feedback platforms &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#indie-hackers-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://indiehackers.com/"&gt;Indie Hackers&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2C9drz8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dv44qpah788mxgf4vmxw.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C9drz8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dv44qpah788mxgf4vmxw.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Indie Hackers is a great community for entrepreneurs, which focuses on helping founders and side-project makers turn their businesses profitable and grow sustainably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rentrepreneur-and-rsideproject-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.reddit.com/r/Entrepreneur/"&gt;r/Entrepreneur&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/SideProject/"&gt;r/SideProject&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vuiNe0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u343z3sj0arw6h6fwxwd.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vuiNe0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u343z3sj0arw6h6fwxwd.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
These two subreddits will help you find great advice from genuine entrepreneurs, gather initial users, ask for feedback, and promote your product.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#phase-2-marketing-front" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 2: Marketing front &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;While you're building your product, it makes sense to gather your beta users. For that, you can make a simple marketing website and share it to collect leads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-marketing-website" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Marketing website &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#unicorn-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://unicornplatform.com/"&gt;Unicorn&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qLit-38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z5x3r9ex4amfuyf5ack5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qLit-38--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/z5x3r9ex4amfuyf5ack5.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Unicorn Platform is an easy-to-use, no-code landing page builder that works great, and offers everything you need to create simple websites, apps, and SaaS products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#carrd-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://carrd.co/"&gt;Carrd&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-3h8mFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3qdvs0kz9uykhuo50za5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-3h8mFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3qdvs0kz9uykhuo50za5.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Carrd is a free tool that you can use to build simple and responsive one-page sites. It has some really beautiful templates to choose from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-email-marketing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Email marketing &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#hunter-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://hunter.io/"&gt;Hunter&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZaO5TfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9w24vdb6orvkbzs1n7z6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZaO5TfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9w24vdb6orvkbzs1n7z6.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hunter helps you find verified email addresses of people (potential customers!) or even the email addresses of all employees of a particular company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#norbert-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.voilanorbert.com/"&gt;Norbert&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA8PMwmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73v56q3kcv9rjdpjrzr8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA8PMwmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73v56q3kcv9rjdpjrzr8.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With Norbert, you can find verified email addresses of people via their business domain. The tool offers a range of useful integrations and a handy chrome extension.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snovio-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://snov.io/"&gt;Snovio&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UbZpW9KV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1xl0barnqcos3w9diyl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UbZpW9KV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o1xl0barnqcos3w9diyl.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Snovio is a great, free tool that helps you find email addresses, verify them, and run drip campaigns within the app. It has several 3rd-party integrations and even offers an API. Snovio also has a great email tracker for Gmail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#phantombuster-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://phantombuster.com/"&gt;Phantombuster&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeEqfy----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fzkdmevb5kf3p5ioyacq.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeEqfy----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fzkdmevb5kf3p5ioyacq.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Phantombuster is a must-have tool for all indie makers. It is free, and lets you automatically scrape crucial data about potential customers, competitors, and social media following from just about anywhere - LinkedIn, Twitter, Quora, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mailtrack-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://mailtrack.io/en/"&gt;Mailtrack&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Enkyhnn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6l6tg8ppgk9z1ynpyle.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Enkyhnn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6l6tg8ppgk9z1ynpyle.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Mailtrack integrates into your Gmail and lets you know when your emails are opened, clicked on. It has a free Chrome extension.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-capturing-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Capturing users &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#optinmonster-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://optinmonster.com/"&gt;Optinmonster&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--In-T52sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ec4ocbg33of1kxx12s8k.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--In-T52sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ec4ocbg33of1kxx12s8k.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Optinmonster is a powerful lead generation tool that helps you convert users who land on your page, via customisable popups, floating bars, gamified wheels, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#poptin-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.poptin.com/"&gt;Poptin&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWJKhiGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h7ik2fbc6dtvo4p5q7qp.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWJKhiGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h7ik2fbc6dtvo4p5q7qp.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With Poptin, you can capture site visitors by creating engaging popups. You can also use it to conduct surveys, get feedback from visitors, gather email subscribers, &lt;br&gt;
and reduce shopping cart abandonment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#phase-3-design-the-product" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 3: Design the product &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is very important to design a great user experience into your product, while at the same time have a good-looking and attractive interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-for-design-inspiration" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. For Design inspiration &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#dribbble-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6VXjJQmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5wxh5c3wjzkajbx3jw0b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6VXjJQmq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5wxh5c3wjzkajbx3jw0b.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Dribbble is great for seeking design inspiration. It is a self-promotion and networking site for digital designers and creatives where you can browse thousands of designs based on a keyword.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behance-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://behance.net/"&gt;Behance&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zij7RD3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9z3fu4ugcwk6jijt7aho.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zij7RD3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9z3fu4ugcwk6jijt7aho.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Behance is like Dribbble but caters to a host of other design domains in addition to UI/ UX and visual design, such as industrial, print, branding, and fashion design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#awwards-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.awwwards.com/"&gt;Awwards&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utISby3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jfoam6bcln7zie3f9xam.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utISby3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jfoam6bcln7zie3f9xam.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Another site to get design inspiration from. You'll be able to find some of the best, most radical, and crazy website designs here, as voted on by the design community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-design-tools" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Design tools &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#mockplus-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mockplus.com/"&gt;Mockplus&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7nO1U_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vkfsgu26pyjuf85m7k6p.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7nO1U_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vkfsgu26pyjuf85m7k6p.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Mockplus is a one-stop online design collaboration platform that helps you accomplish everything from prototyping to developer handoff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marvel-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://marvelapp.com/"&gt;Marvel&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RCNPKYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/udmag5o3trmo5k2uys31.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RCNPKYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/udmag5o3trmo5k2uys31.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Marvel is a holistic platform that enables designers to transform ideas into digital products by providing them with an environment to create, test, iterate as well as gather feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coolors-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hkulZu2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uifhd8j03hc92efofmf.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkulZu2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9uifhd8j03hc92efofmf.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Coolors is a fast, simple tool for generating great-looking colour palettes and gradients. It also offers an iOS app and Chrome extension.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brandbuilder-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://brandbuilder.ai/"&gt;Brandbuilder&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AYbaqD4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7lyw8kdenfo1noefiuhy.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AYbaqD4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7lyw8kdenfo1noefiuhy.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With Brandbuilder, you can create a professional-looking brand within minutes. You can start from scratch to generate basic elements of your visual identity such as logo, colour, typography, pattern, and photography.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-free-design-resources" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Free design resources &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#scale-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://2.flexiple.com/scale/"&gt;Scale&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ui2fZ3v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/743i87eqd8t9qy0wdos8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ui2fZ3v9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/743i87eqd8t9qy0wdos8.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Scale offers over a hundred attribution-free, high-quality illustrations crafted by professional designers. You can customise them to suit the colours of your website, product, or app. One new illustration is added every day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undraw-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/"&gt;Undraw&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znlfeRbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/twy4kbin5lk4s6u7o3yu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znlfeRbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/twy4kbin5lk4s6u7o3yu.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Undraw is another website where you can find open-source, customisable illustrations that can be downloaded or embedded directly into your website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#itmeo-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://itmeo.com/"&gt;Itmeo&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05g7vY7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gbt2vfv14vws7brx9qwi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05g7vY7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gbt2vfv14vws7brx9qwi.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Itmeo is a subscription-based marketplace to buy design products, templates, UI kits, graphic elements, and logos. It also has a reasonable amount of free-to-use resources.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#phase-4-building-the-product" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 4: Building the product &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you're a developer, you'll probably know the best way to build your product. If you're not, there are a host of no-code tools that you can use to create simple and even complex software products. Even if you are a developer, it makes sense to save time by creating simple products using no-code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-simple-products-try-nocode" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Simple products, try NoCode &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#webflow-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://webflow.com/"&gt;Webflow&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY6M0XXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yq1lc1sp69820ehqlq20.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY6M0XXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yq1lc1sp69820ehqlq20.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Webflow allows designers and non-coders to build customised and professional-looking websites in a completely visual canvas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sheet2site-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sheet2site.com/"&gt;Sheet2Site&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGAyj-lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smry36wj57mil5ymqjlt.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGAyj-lM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smry36wj57mil5ymqjlt.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With Sheet2Site, you can create your own, fully-functional website complete with pictures, text, filters, and links all using only Google Sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#airtable-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OC1jPYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9h6h3txb8ednanvjq9we.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OC1jPYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9h6h3txb8ednanvjq9we.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Airtable is an excellent alternative to Google Sheets, it but goes much beyond. You can use it to form a 'backbone' of your project, be it populating no-code websites or automating operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bubble-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://bubble.io/"&gt;Bubble&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsJeW2dP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwtozku4r5zyhgrmf380.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsJeW2dP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wwtozku4r5zyhgrmf380.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
With Bubble, you can create interactive and responsive multi-user web apps. It includes all the features you need to build simple or complex sites, and comes with a database management system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zapier-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://zapier.com/"&gt;Zapier&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5YZCast--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9dpnle76l7it5aapaj3.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5YZCast--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9dpnle76l7it5aapaj3.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Zapier is an easy-to-use tool that helps you automate repetitive tasks between web apps, so you can focus on the more important stuff. It offers support for a vast selection of apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integromat-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.integromat.com/en"&gt;Integromat&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFz_tFrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/focw27frq07022lxxuzb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFz_tFrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/focw27frq07022lxxuzb.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Integromat is an automation platform that offers more features and more tasks than Zapier, and a host of integrations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-more-nuanced-products" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. More nuanced products &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2a-cloud-ide-amp-virtual-desktops" class="anchor"&gt;
  &lt;/a&gt;
  2a. Cloud IDE &amp;amp; Virtual Desktops
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#aws-cloud9-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://aws.amazon.com/cloud9/"&gt;AWS Cloud9&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXP9YJPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/96y7g2zlfwu1gkfzy6gz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXP9YJPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/96y7g2zlfwu1gkfzy6gz.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Cloud9 is a cloud-based IDE (integrated development environment) by AWS that you can use to write, run, and debug code within a browser browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codenvy-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://codenvy.com/"&gt;Codenvy&lt;/a&gt; [Free Trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8vfVSL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/65dbz3b17nr4u9970dki.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8vfVSL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/65dbz3b17nr4u9970dki.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Codenvy is a cloud-based environment for coding, building, and debugging apps, and works on all major browsers. You can develop code with portable Docker runtimes, and collaborate with team members.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2b-code-collaboration" class="anchor"&gt;
  &lt;/a&gt;
  2b. Code Collaboration
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#jsfiddle-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHQg7D-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o9v3ccostckylzfhkik5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHQg7D-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o9v3ccostckylzfhkik5.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
JSFiddle is an online community that lets you test and showcase your HTML, CSS, and JavaScript code snippets ("fiddles"). It has an amazing UI and responsive editor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codepen-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72GUFIrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itobagzjnfwlmpnwkez6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72GUFIrn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/itobagzjnfwlmpnwkez6.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
CodePen is an online code editor and open-source social development environment for front-end designers and developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2c-launch-amp-deploy" class="anchor"&gt;
  &lt;/a&gt;
  2c. Launch &amp;amp; Deploy
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#digitalocean-app-platform-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="//digitalocean.com/docs/app-platform"&gt;DigitalOcean App Platform&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xilANDZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bskpcc7p578kc6ft17b7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xilANDZ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bskpcc7p578kc6ft17b7.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
App Platform is a Platform-as-a-Service (PaaS) that lets you publish code directly from GitHub, GitLab, or public Git repositories to DigitalOcean servers so you don't have to worry about the underlying infrastructure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netlify-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9U3yIMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ndimh71n4odx9kd6mi93.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9U3yIMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ndimh71n4odx9kd6mi93.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Netlify is a website hosting platform that helps you host sites in a secure and scalable way. It promises to multiply productivity and 10x your product shipping speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-5-launch" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 5: Launch &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A successful product launch is often downplayed but it shouldn't be. If you do it right, you can get a major boost by reaching a lot of potential customers via your product launch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-launch-platforms" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Launch platforms &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#product-hunt-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://producthunt.com/"&gt;Product Hunt&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IcbEWEj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2u397bviv6nahaqw1hf.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IcbEWEj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l2u397bviv6nahaqw1hf.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Product Hunt is a platform for sharing and discovering new products. It the go-to place for launching your product, getting initial users, or marketing an already existing product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#betalist-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://betalist.com/"&gt;BetaList&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIDfqziq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1bp460rlq58uvvs02dhx.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIDfqziq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1bp460rlq58uvvs02dhx.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
BetaList is a great platform for launching your product, getting early adopters, and generating user feedback. You can also discover and get early access to products and spark connections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#betafy-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.betafy.co/"&gt;Betafy&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiNYgrSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztzn95ka2uz6aio8grln.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiNYgrSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ztzn95ka2uz6aio8grln.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Betafy is a place for founders to meet other founders, showcase their products, and get relevant, high-quality feedback from the community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-tools-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.remote.tools/"&gt;Remote Tools&lt;/a&gt;&lt;/strong&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M88EDVa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5hoq2uuj7ym5jx5gwvu.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M88EDVa9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a5hoq2uuj7ym5jx5gwvu.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Remote Tools is the best place on the web to discover and launch new remote-first tech products. It also has a community of remote workers, The Remote Clan.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-hn-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://news.ycombinator.com/show"&gt;Show HN&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UrwfiQBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j6fafzwrntbu8xmjgdmm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UrwfiQBI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/j6fafzwrntbu8xmjgdmm.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Show HN (Hacker News) is a subpage in Y Combinator's Hacker News site that startup founders use to showcase their tech products. It can be pretty hard to get on the first page though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submit-juice-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="//submitjuice.com"&gt;Submit Juice&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d53g_OuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/24fna3i0ipzhvq7vwqbl.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d53g_OuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/24fna3i0ipzhvq7vwqbl.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Submit Juice is a service that helps you promote your product and generate PR by submitting your startup or product to over 150 directories and websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-promotion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Promotion &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#loom-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.loom.com/"&gt;Loom&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SstFcmmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/batwe5b7rp8eg2bsvtue.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SstFcmmw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/batwe5b7rp8eg2bsvtue.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Loom is a simple tool that you can use to instantly record yourself performing actions on screen, and present ideas and workflows. You can use it to record your product launch video and share it with others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screencastify-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.screencastify.com/"&gt;Screencastify&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLMnZKPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lfombwaiypsr2v0z9b7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLMnZKPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6lfombwaiypsr2v0z9b7.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Screencastify is a handy Chrome plugin that can be used to record, edit, and share videos. You can capture your tab, whole screen, or webcam while you narrate via your microphone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-social-media-tools" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Social media tools &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#lempod-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://lempod.com/"&gt;Lempod&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4groVZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q3lkxyfmyx7c02r3jb78.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4groVZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q3lkxyfmyx7c02r3jb78.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Lempod helps you increase views and engagement on your LinkedIn posts by joining 'pods' where people engage with your content to give it initial traction. You can also create your own pods and automate the entire process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buffer-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://buffer.com/"&gt;Buffer&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FVwsxI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6jpwyl9ntnsaprqgfma8.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FVwsxI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6jpwyl9ntnsaprqgfma8.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Buffer offers a suite of simple tools that help you boost your social media presence, and handles publishing, analytics, and engagement.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#phase-6-product-feedback" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Phase 6: Product feedback &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You need to get as much feedback as possible before you even launch your product. However, even after launch, you should strive to reach out to your users for gathering real-life feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usertesting-free-trial" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.usertesting.com/"&gt;UserTesting&lt;/a&gt; [Free trial]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-uCjjHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i0qqd37v9ii8kite5l3k.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-uCjjHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i0qqd37v9ii8kite5l3k.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
UserTesting is a platform where you can get customer feedback from real people who test your product - be it a website, app, or any other product/experience - and send audio and video recordings of them trying it out and speaking their thoughts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#helpstack-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="http://www.helpstack.io/"&gt;HelpStack&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFzoTT7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r7o1flrlt8a0ejnt65db.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFzoTT7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r7o1flrlt8a0ejnt65db.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If your product is an iOS or Android app, you can use the open-source HelpStack to interact with your users, provide in-app customer support, solve bugs and get feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typeform-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.typeform.com/"&gt;Typeform&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjuXuUPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/36lhrzlbbp1j4pnmfphy.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjuXuUPg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/36lhrzlbbp1j4pnmfphy.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can use Typeform to build and seamlessly integrate interactive forms for gathering customer details or collecting user feedback.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hotjar-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.hotjar.com/"&gt;Hotjar&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pEzo3Abw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w3psz90hnvf6lpw8au35.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pEzo3Abw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w3psz90hnvf6lpw8au35.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Hotjar is an analytics tool for websites that helps you gauge how visitors are actually using your site via heatmaps, and collect user feedback.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#other-useful-toolsresources" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Other useful tools/resources  &lt;a&gt;&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prioritize-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://prioritize.songthamtung.com/"&gt;Prioritize&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBu6KC7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/huqrxgyih0s6vqcek5nz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBu6KC7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/huqrxgyih0s6vqcek5nz.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Prioritize is essentially a 2-axis chart that helps you create, visualise, and prioritise tasks on a drag and drop interface with different priority boards or matrixes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ntask-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.ntaskmanager.com/"&gt;nTask&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ParX3I8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6vuqtwba7r32glbk5ew0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ParX3I8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6vuqtwba7r32glbk5ew0.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
nTask is a comprehensive project and task management tool that offers collaboration, task management, meeting scheduling, project planning, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failory-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.failory.com/"&gt;Failory&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9u9cp8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1dknqhmzhqoi13hwhr9g.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9u9cp8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1dknqhmzhqoi13hwhr9g.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Failory is a site where you can read about previous mistakes of entrepreneurs and gather insights for your business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessily-free-version" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://accessily.com/"&gt;Accessily&lt;/a&gt; [Free version]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WIT0HmYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gjbz7rdrf19t9zvror28.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WIT0HmYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gjbz7rdrf19t9zvror28.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Accessily helps you find guest posting opportunities from high-quality websites in your niche.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entrepreneurs-musings-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://2.flexiple.com/entrepreneur-musings"&gt;Entrepreneur's Musings&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_54lUcdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9aqunbt8qato41n3lydz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_54lUcdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9aqunbt8qato41n3lydz.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This is a great newsletter that shares real, relatable stories of entrepreneurship, and actionable insights on how to create and grow a bootstrapped company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#failory-creating-a-side-project-free" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.failory.com/side-project"&gt;Failory "Creating a Side Project"&lt;/a&gt; [Free]
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Za09aihZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vsx3qfqyfo9cxjrv43pd.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Za09aihZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vsx3qfqyfo9cxjrv43pd.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
This is a practical and comprehensive guide on how to build side projects, from getting ideas to building the product to marketing, and monetisation.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Understand Javascript Abstract Operations in 7 Minutes.
</title>
      <author>Ifeoma Imoh</author>
      <pubDate>Mon, 01 Feb 2021 12:19:09 +0000</pubDate>
      <link>https://dev.to/iphiee_oma/understand-javascript-abstract-operations-in-7-minutes-1951</link>
      <guid>https://dev.to/iphiee_oma/understand-javascript-abstract-operations-in-7-minutes-1951</guid>
      <description>&lt;p&gt;To help you understand better, let’s quickly revisit types in Javascript. Variables in Javascript do not have types; values do. Javascript has eight basic value data types, and they are divided into two categories, primitive and non-primitive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primitive Types:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;BigInt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Non-Primitive Types (Reference types):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Arrays&lt;/code&gt;  and  &lt;code&gt;functions&lt;/code&gt;  are subtypes of the  &lt;code&gt;object&lt;/code&gt;  type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One major difference between primitive and non-primitive values is that primitive values are immutable after creation while non-primitive values are mutable. &lt;/p&gt;

&lt;p&gt;Let’s take an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Let's alter the value of the string assigned to the variable person.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ifeoma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Here it simply made a copy and then altered the copied value.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// IFEOMA&lt;/span&gt;
&lt;span class="c1"&gt;// It didn't change the original value.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  ifeoma&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From the example above, when we tried to alter the value, it only made a copy of the variable &lt;code&gt;person&lt;/code&gt;  and changed it, but it didn’t change the already existing  &lt;code&gt;string&lt;/code&gt;  value because it is a primitive.&lt;/p&gt;

&lt;p&gt;On the other hand, the variable assigned to a primitive value can be changed. Therefore, it can be reassigned so that it points to a new value but the existing value it holds cannot be changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ifeoma&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sylvia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// sylvia&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the example above, we assigned a new  &lt;code&gt;string&lt;/code&gt;  value to the variable  &lt;code&gt;person&lt;/code&gt;  so that it no longer points to the initial  &lt;code&gt;string&lt;/code&gt;  value  &lt;code&gt;ifeoma&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Let’s try to mutate a non-primitive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jay Pritchet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Phil Dunphy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Claire Pritchet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [ "Jay Pritchet", "Phil Dunphy", "Claire Pritchet" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the above example, we made  &lt;code&gt;array&lt;/code&gt;  a reference to  &lt;code&gt;array2&lt;/code&gt; . Emphasis on reference, which means that even after we modified the data in &lt;code&gt;array&lt;/code&gt; by adding a new item to it, logging  &lt;code&gt;array2&lt;/code&gt;  shows the new item added to  &lt;code&gt;array&lt;/code&gt; . &lt;br&gt;
This is because the variable &lt;code&gt;array2&lt;/code&gt; is referencing the address of the variable &lt;code&gt;array&lt;/code&gt;. &lt;br&gt;
This behavior is expected from all non-primitive value types.&lt;/p&gt;

&lt;p&gt;Another difference between primitives and non-primitives is that primitives are stored by value while non-primitives are stored by reference.&lt;/p&gt;

&lt;p&gt;The  &lt;code&gt;typeOf&lt;/code&gt;  operator is a built-in utility used to check the type of value assigned to a javascript variable. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The  &lt;code&gt;typeOf&lt;/code&gt;   operator always returns a string type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take a look at how values are changed from one type to another.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#coercion" class="anchor"&gt;
  &lt;/a&gt;
  Coercion
&lt;/h2&gt;

&lt;p&gt;Coercion refers to the process of converting values from one type to another(such as  &lt;code&gt;string&lt;/code&gt;  to  &lt;code&gt;number&lt;/code&gt; ).&lt;br&gt;
Using inbuilt functions(&lt;code&gt;Number()&lt;/code&gt;, &lt;code&gt;String()&lt;/code&gt; etc.) you can be obvious about your intention to convert a value from one type to another(explicit coercion) or let Javascript automatically handle the conversion for you(Implicit coercion). &lt;/p&gt;

&lt;p&gt;Coercion always results in either  &lt;code&gt;strings&lt;/code&gt; ,  &lt;code&gt;numbers&lt;/code&gt; , or  &lt;code&gt;booleans&lt;/code&gt; . Understanding coercion will help you avoid problems that can occur in your code.&lt;br&gt;
Let's see some examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implicit Coercion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// 4  Javascript coerced the string 1 to a number.&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="c1"&gt;// 0  Javascript coerced the boolean false to 0.&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;// 11  The boolean true is coerced to a number 1.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explicit Coercion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2 Here we are explicitly converting both strings to numbers first using the Number() method.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To fully understand how coercion happens, we need to talk about &lt;strong&gt;Abstract Operations.&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abstract Operations are the fundamental building block that makes up how we deal with type conversion. - Kyle Simpson                       &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#abstract-operations" class="anchor"&gt;
  &lt;/a&gt;
  Abstract Operations
&lt;/h2&gt;

&lt;p&gt;According to the ECMAScript specification, abstract operations are not part of the language specification, but they are responsible for performing type conversion in Javascript. Whenever coercion (implicit or explicit) occurs, one or more internal operations, known as abstract operations, are performed. &lt;/p&gt;

&lt;p&gt;We will look at these four primary abstract operations, but you can find the rest of them in the &lt;a href="https://tc39.es/ecma262/#sec-abstract-operations"&gt;spec.&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ToPrimitive()&lt;/li&gt;
&lt;li&gt;ToString()&lt;/li&gt;
&lt;li&gt;ToNumber()&lt;/li&gt;
&lt;li&gt;ToBoolean() &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#toprimitive" class="anchor"&gt;
  &lt;/a&gt;
  ToPrimitive()
&lt;/h2&gt;

&lt;p&gt;When a non-primitive or reference value is used in the context where a primitive is required, the javascript engine calls the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  abstract operation. &lt;/p&gt;

&lt;p&gt;When converting non-primitive types to primitives, the abstract operation ToPrimitive() is invoked to handle the operation.&lt;/p&gt;

&lt;p&gt;Let's see how non-primitive values are converted to primitives.&lt;/p&gt;

&lt;p&gt;The spec informs us that the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  abstract operation takes two arguments. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; An &lt;strong&gt;input&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;An optional &lt;strong&gt;&lt;em&gt;PreferredType&lt;/em&gt;&lt;/strong&gt; hint&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;The PreferredType hint can be either one of these -  &lt;code&gt;string&lt;/code&gt; ,  &lt;code&gt;number&lt;/code&gt; ,  &lt;code&gt;default&lt;/code&gt; .                      &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are performing a numeric operation and the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  operation is invoked, &lt;code&gt;number&lt;/code&gt; will be sent as the hint. If you are working with strings, it will send  &lt;code&gt;string&lt;/code&gt;  as the hint. &lt;br&gt;
When  &lt;code&gt;ToPrimitive()&lt;/code&gt; is called with no hint present, it'll send  &lt;code&gt;default&lt;/code&gt;  as a hint, and this will behave as if the hint were  &lt;code&gt;number&lt;/code&gt;  (unless it's a  &lt;code&gt;Date&lt;/code&gt;  which defaults to  &lt;code&gt;string&lt;/code&gt; ).&lt;/p&gt;

&lt;p&gt;If the argument is already a primitive value, then it will be returned without conversion. Let's take a look at how the ToPrimitive algorithm works.&lt;/p&gt;

&lt;p&gt;There are two methods available on every object type used to convert them from non-primitives to primitives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;valueOf() — This is to retrieve the primitive value associated with an object.&lt;/li&gt;
&lt;li&gt;toString() &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Number Algorithm&lt;/strong&gt;&lt;br&gt;
If the hint is  &lt;code&gt;number&lt;/code&gt; , it calls the &lt;code&gt;valueOf()&lt;/code&gt;  function first, and if the returned value is primitive, it'll use it. If the object has no primitive value,  &lt;code&gt;valueOf()&lt;/code&gt;   returns the object back then the  &lt;code&gt;toString()&lt;/code&gt;  function gets called. Its value will be used if it is primitive; otherwise, it would result in a type error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String Algorithm&lt;/strong&gt;&lt;br&gt;
If the hint is  &lt;code&gt;string&lt;/code&gt; , the order is reversed compared to the number algorithm. It calls the non-primitive  &lt;code&gt;toString()&lt;/code&gt;  function first, and if it gets a string representation, it'll just use it; otherwise, it'll try the  &lt;code&gt;valueOf()&lt;/code&gt; method to see if the object has any primitive value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Default Algorithm&lt;/strong&gt;&lt;br&gt;
If no hint is sent, it sets the default hint to  &lt;code&gt;number&lt;/code&gt; &lt;strong&gt;,&lt;/strong&gt; or it is set to  &lt;code&gt;string&lt;/code&gt;  if it is a  &lt;code&gt;Date&lt;/code&gt; . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The algorithms within Javascript are inherently recursive. This means that if the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  operation gets invoked and the return result is not a primitive, it will keep getting invoked until it returns a primitive or an error.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#tostring" class="anchor"&gt;
  &lt;/a&gt;
  ToString()
&lt;/h2&gt;

&lt;p&gt;This abstract operation takes any value and converts it to a representation of the value in  &lt;code&gt;string&lt;/code&gt;  form.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;“null”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;td&gt;“undefined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;“true”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;“false”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“Hi”&lt;/td&gt;
&lt;td&gt;“Hi”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol&lt;/td&gt;
&lt;td&gt;Throw a TypeError exception.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As seen above, built-in primitives have natural stringification, but if the  &lt;code&gt;ToString()&lt;/code&gt;  operation is called on an  &lt;code&gt;object&lt;/code&gt;  type, it will invoke the &lt;code&gt;ToPrimitive()&lt;/code&gt; operation, and pass &lt;code&gt;string&lt;/code&gt; as the hint.&lt;/p&gt;

&lt;p&gt;As explained earlier, this will call the  &lt;code&gt;toString()&lt;/code&gt;  first, and if it gets a &lt;code&gt;string&lt;/code&gt; representation, it'll just use it; otherwise, it'll try the  &lt;code&gt;valueOf()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;By default, regular Javascript objects have their built-in  &lt;code&gt;toString()&lt;/code&gt;  method (located in &lt;a href="https://tc39.es/ecma262/#sec-object.prototype.tostring"&gt;&lt;strong&gt;Object.prototype.toString()&lt;/strong&gt;&lt;/a&gt;) that is called when an object is used in a manner in which a &lt;code&gt;string&lt;/code&gt; is expected and this will return their internal [[Class]] property (e.g [object Object]). &lt;/p&gt;

&lt;p&gt;Unless you specify your &lt;code&gt;toString()&lt;/code&gt; method, if you use an object in a string-like way, the &lt;code&gt;toString()&lt;/code&gt; method on its object prototype will be called. This will return a &lt;code&gt;string&lt;/code&gt; with the [object Type] format where  &lt;code&gt;Type&lt;/code&gt;  is the object type. &lt;/p&gt;

&lt;p&gt;Let’s see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// [object Object]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Although &lt;code&gt;arrays&lt;/code&gt; are subtypes of the object type, the &lt;code&gt;array&lt;/code&gt; object has a built-in  &lt;code&gt;toString()&lt;/code&gt;  method that overrides the default  &lt;code&gt;Object.toString()&lt;/code&gt;  method and returns a  &lt;code&gt;string&lt;/code&gt;  representation containing each array element separated by a comma. This &lt;code&gt;toString()&lt;/code&gt; method lives on the Array’s prototype  as &lt;code&gt;Array.prototype.toString()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Calling toString() explicitly on an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// ""  It returns an empty string.&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "1,2,3"  It returns a string containing each element in the array seperated by a comma.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In a situation where you want to get the object class, you need to skip the default override behavior of &lt;code&gt;Array.prototype.toString&lt;/code&gt; in favor of &lt;code&gt;Object.prototype.toString()&lt;/code&gt; . &lt;/p&gt;

&lt;p&gt;You have to pass the  &lt;code&gt;array&lt;/code&gt;  in the  &lt;code&gt;call()&lt;/code&gt; method to change the context from &lt;code&gt;Array&lt;/code&gt; to &lt;code&gt;Object&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;// [object Array] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tonumber" class="anchor"&gt;
  &lt;/a&gt;
  ToNumber()
&lt;/h2&gt;

&lt;p&gt;Whenever we perform a numeric operation, and one or both operands aren't numbers, the  &lt;code&gt;ToNumber()&lt;/code&gt;  abstract operation will be invoked to convert it to a value of type  &lt;code&gt;number&lt;/code&gt; . &lt;br&gt;
Let's see some examples:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“”&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“.”&lt;/td&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“1”&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td&gt;Throw a type error exception.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;symbol&lt;/td&gt;
&lt;td&gt;Throw a type error exception.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object&lt;/td&gt;
&lt;td&gt;1.  &lt;a href="https://tc39.es/ecma262/#sec-toprimitive"&gt;ToPrimitive&lt;/a&gt;(argument, number).&lt;br&gt;2. Return ? &lt;a href="https://tc39.es/ecma262/#sec-tonumber"&gt;ToNumber&lt;/a&gt;(primValue).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As seen from the table above, when  &lt;code&gt;ToNumber()&lt;/code&gt;  is called on a non-primitive (any of the object types) value, it is first converted to its primitive equivalent by invoking  &lt;code&gt;ToPrimitive()&lt;/code&gt; abstract operation and passing  &lt;code&gt;number&lt;/code&gt;  as the PreferredType hint.&lt;br&gt;
The return value from the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  operation will then be coerced into a  &lt;code&gt;number&lt;/code&gt;  by the  &lt;code&gt;ToNumber()&lt;/code&gt; abstract operation. If it still doesn't result in a primitive value, it throws an error.&lt;/p&gt;

&lt;p&gt;Let's take an array with an empty string as an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ToPrimitive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// It first calls the ToPrimitive abstract operation on it and pass number as the hint.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// [""]  Because  the hint is number, it calls valueOf first and this basically returns itself. So we still have the array with an empty string which isn’t a primitive.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// ""   It then calls the toString() function next and this will end up producing an empty string "".&lt;/span&gt;

&lt;span class="nx"&gt;ToNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0   Next it calls ToNumber() and passes the empty string "" as an argument. As seen from the table above, that would result to 0.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#toboolean" class="anchor"&gt;
  &lt;/a&gt;
  ToBoolean()
&lt;/h2&gt;

&lt;p&gt;The abstract operation   &lt;code&gt;ToBoolean()&lt;/code&gt;  is called to convert an argument to a Boolean type whenever we use a value that is not  &lt;code&gt;Boolean&lt;/code&gt;  in a place that needs a   &lt;code&gt;Boolean&lt;/code&gt; . The  &lt;code&gt;ToBoolean()&lt;/code&gt;  abstract operation does not invoke the  &lt;code&gt;ToPrimitive()&lt;/code&gt;  or any of the other abstract operations.&lt;br&gt;
It just checks to see if the value is either falsy or not. There is a lookup table in the spec that defines a list of values that will return  &lt;code&gt;false&lt;/code&gt;  when coerced to a  &lt;code&gt;boolean&lt;/code&gt; . They are called falsy values.  &lt;/p&gt;

&lt;p&gt;These are the falsy values:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument Type&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NaN&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-0&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;“”&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Values that are not on the list of falsy values are truthy values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Languages that take the first position about their rules are referred to as "strongly typed" because they are strict about not allowing you to break the rules.&lt;br&gt;
Since Javascript is not one of them, it is referred to as weakly or loosely typed because it gives room for a lot of flexibility in terms of implicit coercion, and you do not have to specify the type of your variables explicitly.&lt;/p&gt;

&lt;p&gt;Like any other language, Javascript has its rules, and the rules that govern the type system of a language exist to help us. It is up to us to learn them to avoid unnecessary mistakes.&lt;/p&gt;

&lt;p&gt;Thank you! I hope you enjoyed reading as much as I enjoyed writing ❤️.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>coercion</category>
      <category>abstractoperations</category>
      <category>javascripttypes</category>
    </item>
    <item>
      <title>Simple Explanation of Async-Await in Javascript</title>
      <author>Linda</author>
      <pubDate>Mon, 01 Feb 2021 12:05:11 +0000</pubDate>
      <link>https://dev.to/lindaojo/simple-explanation-of-async-await-in-javascript-199p</link>
      <guid>https://dev.to/lindaojo/simple-explanation-of-async-await-in-javascript-199p</guid>
      <description>&lt;p&gt;This was orginally posted at &lt;a href="https://www.lindaojo.com/blog/simple-explanation-of-async-await-in-javascript/"&gt;lindaojo.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fully appreciate the use of Async-Await you must first understand that by default, JavaScript is synchronous.&lt;/p&gt;

&lt;h3&gt;Synchronous Functions&lt;/h3&gt;

&lt;p&gt;In synchronous functions, operations run simultaneously and you can't specify &lt;strong&gt;pausing or waiting&lt;/strong&gt; points.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But if for some reason there is a delay in getting the value 'B', JavaScript will execute other lines of code that aren't delayed. This could result in an error.&lt;/p&gt;

&lt;p&gt;In the example below, 'B' is delayed. Let's check out what the results will be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What do we do to get the right result even if B is delayed? How do we ask Javascript to &lt;strong&gt;pause and wait&lt;/strong&gt; for 'B'.&lt;/p&gt;

&lt;p&gt;The answer is we make the function asynchronous. This is where "async-await" comes in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: there are other ways to write asynchronous code. You could use &lt;a href="https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/" class="link"&gt;Callback functions&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org/news/javascript-promises-explained/" class="link"&gt;promises&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Asynchronous Functions using Async-Await&lt;/h3&gt;

&lt;p&gt;To make a function Asynchronous we declare the function using the "Async" keyword.&lt;br&gt;
The word “async” before a function means the function will always returns a &lt;a class="link" href="https://medium.com/javascript-in-plain-english/truly-understanding-promises-in-javascript-cb31ee487860"&gt;promise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The async function below...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;One&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;is the same as the normal function below that returns a promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;One&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can ask JavaScript to wait for a promise by using the "await" keyword. It has to be noted that it only makes the async function block wait and not the whole program execution.&lt;/p&gt;

&lt;p&gt;The code block below shows how we solve our earlier problem with the use of async-await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getB&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;},&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;solveC&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the "await" keyword can only be used within "async" functions.&lt;/p&gt;

&lt;p&gt;That's it! Hope this was helpful cause I kept it light for beginners. If you want to read a more advanced explanation of async-await, I recommend &lt;a class="link" href="https://medium.com/javascript-in-plain-english/async-await-javascript-5038668ec6eb"&gt;this article by Ashay Mandwarya&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lindaojo.com/articles"&gt;Read more of my articles&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learn Aspect Oriented Programming by Example</title>
      <author>Philipp Gysel</author>
      <pubDate>Mon, 01 Feb 2021 12:04:33 +0000</pubDate>
      <link>https://dev.to/pmgysel/learn-aspect-oriented-programming-by-example-m8o</link>
      <guid>https://dev.to/pmgysel/learn-aspect-oriented-programming-by-example-m8o</guid>
      <description>&lt;p&gt;This post offers a great way for you to learn &lt;a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming"&gt;Aspect Oriented Programming&lt;/a&gt; by studying &lt;strong&gt;concrete examples&lt;/strong&gt;. In particular, I will showcase &lt;strong&gt;SpringBoot AOP&lt;/strong&gt; by implementing &lt;strong&gt;4 Aspects&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;&lt;strong&gt;What is an Aspect?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#cacheable"&gt;&lt;strong&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;: a standard Spring Advice&lt;/li&gt;
&lt;li&gt;
&lt;a href="#log-method"&gt;&lt;strong&gt;Log REST calls&lt;/strong&gt;&lt;/a&gt; (with a custom Aspect)&lt;/li&gt;
&lt;li&gt;
&lt;a href="#performance-monitoring"&gt;&lt;strong&gt;Performance monitoring&lt;/strong&gt;&lt;/a&gt; (with AOP)&lt;/li&gt;
&lt;li&gt;
&lt;a href="#retry-operations"&gt;&lt;strong&gt;Retry mechanism&lt;/strong&gt;&lt;/a&gt; (with AOP)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re the person who wants to skip lengthy descriptions and just look at concrete code, I’ve got you covered:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pmgysel"&gt;
        pmgysel
      &lt;/a&gt; / &lt;a href="https://github.com/pmgysel/aop-examples"&gt;
        aop-examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Some examples of Aspect Oriented Programming (AOP) with SpringBoot
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#what-is-an-aspect" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; What is an Aspect?
&lt;/h1&gt;

&lt;p&gt;So there are some great resources out there for an overview of Spring AOP, including this &lt;a href="https://www.baeldung.com/spring-aop"&gt;Baeldung article&lt;/a&gt; and the &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop"&gt;official Spring AOP documentation&lt;/a&gt;. But since we don’t wanna focus on boring theory and rather keep things practical, here’s a really short summary how AOP works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--843O2VZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xafk877crjt6kflq9yt1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--843O2VZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xafk877crjt6kflq9yt1.PNG" alt="Aspect oriented programming explained"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll need the following terms in this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Advice&lt;/strong&gt;: the method which implements some common task like logging or caching&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pointcut&lt;/strong&gt;: a pattern expression which matches the places where your Advice should be invoked&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Aspect&lt;/strong&gt;: The Advice plus the Pointcut expression&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus - Join point&lt;/strong&gt;: All places in your code that represent candidates for a Pointcut&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#-raw-cacheable-endraw-a-standard-spring-advice" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; &lt;code&gt;@Cacheable&lt;/code&gt;: a standard Spring Advice
&lt;/h1&gt;

&lt;p&gt;Let’s start simple and consider an already implemented Advice by &lt;a href="https://spring.io/"&gt;Spring&lt;/a&gt;, namely the &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html"&gt;@Cacheable annotation&lt;/a&gt;. Say your web service must compute numbers of the &lt;a href="https://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci&lt;/a&gt; series.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don’t know what the Fibonacci series is: it’s the series starting with 0 and 1 and each consecutive number is the sum of the previous two numbers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We implement the Fibonacci computation in a &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html"&gt;@Service&lt;/a&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FibonacciService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;nthFibonacciTerm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;nthFibonacciTerm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nthFibonacciTerm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next, we use this service class in our &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; controller:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@Autowired&lt;/span&gt; &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;FibonacciService&lt;/span&gt; &lt;span class="n"&gt;fibonacciService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/api/fibonacci/{number}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fibonacciService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nthFibonacciTerm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Our implementation is &lt;a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)"&gt;recursive&lt;/a&gt; and thus rather slow. So how do you make your web service faster? One way would be to use a &lt;a href="https://www.baeldung.com/java-fibonacci#3-binets-formula"&gt;faster algorithm&lt;/a&gt;, but let’s solve the problem with Spring’s &lt;code&gt;@Cacheable&lt;/code&gt; feature. This annotation creates a cache in the background where all previous results get stored. All we must do, is add the &lt;code&gt;@Cacheable&lt;/code&gt; annotation to our method:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Cacheable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fibonacci"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/api/fibonacci/{number}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now we’re ready to test our caching mechanism by firing a REST request to &lt;code&gt;http://localhost:8080/api/fibonacci/40&lt;/code&gt;. I tried to compute the 40th Fibonacci on my own laptop and here are the results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First REST call: 1902ms&lt;/li&gt;
&lt;li&gt;Second REST call: 1ms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty good result eyyy🤙😎&lt;/p&gt;

&lt;p&gt;One last thing I’d like to mention: in order to activate Spring’s cacheable feature, you have to add &lt;code&gt;@EnableCaching&lt;/code&gt; to a &lt;code&gt;@Configuration&lt;/code&gt; class.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#log-rest-calls-with-a-custom-aspect" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Log REST calls with a custom Aspect
&lt;/h1&gt;

&lt;p&gt;That was pretty easy right? So let’s move on to a more advanced use case: now we create a custom Aspect!&lt;/p&gt;

&lt;p&gt;Our goal is to &lt;strong&gt;create a log message every time some REST method gets called&lt;/strong&gt;. Since we might wanna add this functionality to future REST methods too, we want to generalize this task in an &lt;strong&gt;Aspect&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Before&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@annotation(com.example.aop.LogMethodName)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;logMethodName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;JoinPoint&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSignature&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getArgs&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Method ["&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"] gets called with parameters "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The first line defines the &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-pointcuts"&gt;Pointcut expression&lt;/a&gt;, and the subsequent method represents the &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-advice"&gt;Advice&lt;/a&gt;. Let’s break the two down one by one:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pointcut&lt;/strong&gt;:&lt;br&gt;
The Pointcut expression defines the places where our Advice is inserted to. In our case, the Aspect is applied &lt;strong&gt;before&lt;/strong&gt; every method with a &lt;code&gt;@LogMehtodName&lt;/code&gt; annotation. Note that &lt;code&gt;@LogMethodName&lt;/code&gt; is our &lt;strong&gt;custom annotation&lt;/strong&gt; which we use as Pointcut marker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice&lt;/strong&gt;:&lt;br&gt;
The advice method is the piece of logic that generalizes a task common to many different objects. In our case, the Advice finds the originating method’s name as well as its calling parameters and logs them to the console.&lt;/p&gt;

&lt;p&gt;With our Aspect in place, there are three additional code lines required to get everything working:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, add the marker &lt;code&gt;@LogMethodName&lt;/code&gt; to our &lt;code&gt;fibonacci()&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;Second, we have to add &lt;code&gt;@Aspect&lt;/code&gt; to the class containing our Aspect&lt;/li&gt;
&lt;li&gt;Third, enable Spring’s Aspect scanning with &lt;code&gt;@EnableAspectJAutoProxy&lt;/code&gt; in any &lt;code&gt;@Configuration&lt;/code&gt; class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it, we’ve implemented our own Advice!🙌 Let’s run a test! We fire a REST request to the web service to compute the 40th Fibonacci number and have a look at the console output:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;gets&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It goes without saying that such log messages will be of great help if you ever must track down bugs in your application.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#performance-monitoring-with-aop" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Performance monitoring with AOP
&lt;/h1&gt;

&lt;p&gt;In the previous example, we used a Pointcut expression of type &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-advice-before"&gt;@Before&lt;/a&gt; - here, the Advice runs before the actual method. Let’s switch gears and implement an &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.0.RELEASE/spring-framework-reference/core.html#aop-ataspectj-around-advice"&gt;@Around&lt;/a&gt; Pointcut. Such an Advice runs partly before the target method and partly after it.&lt;/p&gt;

&lt;p&gt;Our goal now is to &lt;strong&gt;monitor the execution time of any REST call&lt;/strong&gt;. Let’s go ahead and implement the monitoring requirement in a generalized fashion, namely an Aspect:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Around&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@annotation(com.example.aop.MonitorTime)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;monitorTime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Execution took ["&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"ms]"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Pointcut&lt;/strong&gt;:&lt;br&gt;
Like before, we create a new custom annotation &lt;code&gt;@MonitorTime&lt;/code&gt; for marking our Pointcuts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice&lt;/strong&gt;:&lt;br&gt;
An &lt;code&gt;@Around&lt;/code&gt; Aspect should have an argument of type &lt;a href="https://javadoc.io/doc/org.aspectj/aspectjweaver/latest/org/aspectj/lang/ProceedingJoinPoint.html"&gt;ProceedingJoinPoint&lt;/a&gt;. This type has a &lt;code&gt;proceed()&lt;/code&gt; method which triggers the execution of the actual target method. So in our Advice, we first query the current time in milliseconds. After the target method is executed, we measure the current time again, and from there we can compute time difference.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and mark our target method with the &lt;code&gt;@MonitorTime&lt;/code&gt; annotation:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@MonitorTime&lt;/span&gt;
&lt;span class="nd"&gt;@LogMethodName&lt;/span&gt;
&lt;span class="nd"&gt;@Cacheable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fibonacci"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/api/fibonacci/{number}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="nf"&gt;fibonacci&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@PathVariable&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;By now, our REST method has quite some Pointcut markers attached to it😉 Anyways, let’s go ahead and test our performance monitoring feature. As before, we compute the 40th Fibonacci number:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;gets&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Execution&lt;/span&gt; &lt;span class="nx"&gt;took&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1902&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As you can see, this particular REST call took 1902ms. With this &lt;code&gt;@Around&lt;/code&gt; Aspect in place, you’re definitely an advanced AOP programmer!💪&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#retry-mechanism-with-aop" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt; Retry mechanism with AOP
&lt;/h1&gt;

&lt;p&gt;Distributed systems can experience concurrency issues. One such example would be when two web service instances are simultaneously trying to access the same record in a database. Oftentimes, such a lock problem can be resolved by retrying the operation. The only requirement here is that the operation is idempotent.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and create an Aspect which &lt;strong&gt;transparently retries an operation until it succeeds&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Around&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"@annotation(com.example.aop.RetryOperation)"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;doIdempotentOperation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numAttempts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;proceed&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;RuntimeException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;numAttempts&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
      &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numAttempts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Pointcut&lt;/strong&gt;:&lt;br&gt;
Our Advice runs around any method with the custom annotation &lt;code&gt;@RetryOperation&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advice&lt;/strong&gt;:&lt;br&gt;
In the &lt;code&gt;try&lt;/code&gt; statement, we run the target method. This method might throw a &lt;code&gt;RuntimeException&lt;/code&gt;. If this happens, we increment the &lt;code&gt;numAttempts&lt;/code&gt; counter and simply rerun the target method. As soon as the target method succeeds, we exit the Advice.&lt;/p&gt;

&lt;p&gt;For demonstration purposes, let’s create a REST method for storing a String. This method will fail 50% of the time:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RetryOperation&lt;/span&gt;
&lt;span class="nd"&gt;@LogMethodName&lt;/span&gt;
&lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/api/storeData"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;storeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@RequestParam&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;nextBoolean&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pretend everything went fine"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thanks to our &lt;code&gt;@RetryOperation&lt;/code&gt; annotation, the above method will be retried until it succeeds. Moreover, we use our &lt;code&gt;@LogMethodName&lt;/code&gt; annotation so we can see every method invocation. Let’s go ahead and test our new REST endpoint; for this purpose we fire a REST request to &lt;code&gt;localhost:8080/api/storeData?data=hello-world&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storeData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;gets&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storeData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;gets&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;storeData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nx"&gt;gets&lt;/span&gt; &lt;span class="nx"&gt;called&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;Pretend&lt;/span&gt; &lt;span class="nx"&gt;everything&lt;/span&gt; &lt;span class="nx"&gt;went&lt;/span&gt; &lt;span class="nx"&gt;fine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In the above case, the operation failed 2 times and only succeeded on the third try.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Congrats, you’re a professional AOP programmer now🥳🚀 You can find a fully working web service with all Aspects on my Github repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pmgysel"&gt;
        pmgysel
      &lt;/a&gt; / &lt;a href="https://github.com/pmgysel/aop-examples"&gt;
        aop-examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Some examples of Aspect Oriented Programming (AOP) with SpringBoot
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Thanks so much for reading, please leave a comment if you have any questions or feedback!&lt;/p&gt;

</description>
      <category>java</category>
      <category>aop</category>
      <category>springboot</category>
      <category>programming</category>
    </item>
    <item>
      <title>Chrome extensions: Reusing code</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 01 Feb 2021 11:49:20 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/chrome-extensions-reusing-code-3f1g</link>
      <guid>https://dev.to/paulasantamaria/chrome-extensions-reusing-code-3f1g</guid>
      <description>&lt;p&gt;If you're new to this series and don't want to read the previous posts, here's a &lt;strong&gt;quick recap&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I started this series building a very simple chrome extension that I've been updating and improving in every post. &lt;/li&gt;
&lt;li&gt;The chrome extension we're working with is called "Acho, where are we?" &lt;/li&gt;
&lt;li&gt;Acho is the name of my dog 🐶, and in this extension, he will bark and &lt;strong&gt;tell you the Title&lt;/strong&gt; of the page you're currently navigating: 

&lt;ul&gt;
&lt;li&gt;Through a &lt;strong&gt;browser action&lt;/strong&gt; (a popup that appears at the right of the navigation bar in Chrome) &lt;/li&gt;
&lt;li&gt;Or through a keyboard shortcut that shows a &lt;strong&gt;notification&lt;/strong&gt; at the bottom-right of the screen.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#centralize-the-shared-logic-in-a-separate-file"&gt;Centralize the shared logic in a separate file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#accessing-the-reusable-code"&gt;Accessing the reusable code&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#from-the-browser-action"&gt;From the Browser Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#from-the-content-script"&gt;From the content script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#from-the-background-script"&gt;From the background script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-repo"&gt;The repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#let-me-know-what-you-think-"&gt;Let me know what you think! 💬&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;So far, our extension has the following &lt;strong&gt;features&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display a browser action (popup) with the title of the active tab&lt;/li&gt;
&lt;li&gt;A command that duplicates the current tab&lt;/li&gt;
&lt;li&gt;A command that shows a notification at the bottom-right of the screen with the active Tab title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And these are the components we built to manage the logic of these features:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcZArtdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yyeX546.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcZArtdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yyeX546.png" alt="Three components (popup.js, background.js, and content.js) with their primary functions. The popup.js has the following functions: Listen OnLoad, Get active tab, and Show tab title. The background.js has the following functions: Listen OnCommand, Duplicate tab, Send a message to the content script, Get active tab. The content.js has the following functions: Build notification and Show tab title."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The functions "Get active tab" and "Show tab title" are used by multiple components, but right now, their logic is duplicated inside each of the components. As you may have imagined, we need to find a way to write that logic a single time and share it across our project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ &lt;strong&gt;About reusability&lt;/strong&gt;: Reusing code allows us to save time and reduce redundancy in our project. By avoiding writing the same code multiple times, we're also making our project easier to maintain since our code gets cleaner and updates to the shared logic can be done in a single place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, a better version of our app would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MsaxfQg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7GrZjlB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MsaxfQg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7GrZjlB.png" alt="The functions Get active tab and Show tab title appear a single time inside a new file called acho.js and are shared with popup.js, background.js, and content.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this version, our components are only responsible for their particular logic, and the shared logic is separated in the &lt;code&gt;acho.js&lt;/code&gt; file, where it can be easily maintained and shared. There's also no duplicated logic.&lt;/p&gt;

&lt;p&gt;Let's see how to achieve that in our sample chrome extension.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#centralize-the-shared-logic-in-a-separate-file" class="anchor"&gt;
  &lt;/a&gt;
  Centralize the shared logic in a separate file
&lt;/h1&gt;

&lt;p&gt;For starters, we need our reusable logic to be centralized in a separate file. So we are going to create a new file called &lt;code&gt;acho.js&lt;/code&gt;. Here we will create a class named Acho and add the methods that will later be called from each component. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a real example, you'd probably use more than one file for your shared logic. We are using just one to keep the example simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's how the &lt;code&gt;acho.js&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Shared logic */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Acho&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Gets the active Tab
     * @returns {Promise&amp;lt;*&amp;gt;} Active tab
     */&lt;/span&gt;
    &lt;span class="nx"&gt;getActiveTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;currentWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTabTitlePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getTabTitlePromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Concatenates the tab title with Acho's barks.
     * @param {String} tabTitle Current tab title
     * @returns {String} 
     */&lt;/span&gt;
    &lt;span class="nx"&gt;getBarkedTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;barkTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRandomBark&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; Ahem.. I mean, we are at: &amp;lt;br&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/b&amp;gt;`&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;barkTitle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Array of available bark sounds
     * @private
     * @returns {String[]}
     */&lt;/span&gt;
    &lt;span class="nx"&gt;getBarks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Barf barf!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Birf birf!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Woof woof!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Arf arf!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yip yip!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Biiiirf!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Returns a random bark from the list of possible barks.
     * @private
     * @returns {String}
     */&lt;/span&gt;
    &lt;span class="nx"&gt;getRandomBark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;barks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBarks&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;barks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;barks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;We have two public methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getActiveTab&lt;/code&gt; returns the active tab. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getBarkedTitle&lt;/code&gt; generates a string concatenated with a random bark sound and the tab title. We'll use this both in the browser action (the popup) and the notification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we have a few private methods just to simplify the logic in our public methods.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#accessing-the-reusable-code" class="anchor"&gt;
  &lt;/a&gt;
  Accessing the reusable code
&lt;/h1&gt;

&lt;p&gt;Great. Now our reusable logic is ready to be used by many components, but that's not all. We need to figure out &lt;em&gt;how to access this logic&lt;/em&gt; from each component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Background script (&lt;code&gt;background.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Content script (&lt;code&gt;content.js&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Browser action script (&lt;code&gt;popup.js&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To approach this issue it's important to remember that, even though all of these components are part of the same extension, &lt;strong&gt;they run in different contexts&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;popup.js&lt;/code&gt; runs in the context of our Browser Action&lt;/li&gt;
&lt;li&gt;The content script runs in the context of the web page.&lt;/li&gt;
&lt;li&gt;The background script handles events triggered by the browser and is only loaded when needed. It works independently from the current web page and the browser action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how can we make our reusable code available to all of these different contexts?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#from-the-browser-action" class="anchor"&gt;
  &lt;/a&gt;
  From the Browser Action
&lt;/h2&gt;

&lt;p&gt;This one will probably feel familiar to you since the solution we are going to implement it's what we do in static HTML + JS websites: We are going to add the file &lt;code&gt;acho.js&lt;/code&gt; as a script in our browser action HTML file (&lt;code&gt;popup.html&lt;/code&gt;) using the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;popup.html&lt;/code&gt; file and add the script at the bottom of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag, like so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- the rest of the body --&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'popup.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'acho.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- 👈 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Done! Now we can use the &lt;code&gt;Acho&lt;/code&gt; class from &lt;code&gt;popup.js&lt;/code&gt;, and our code will be significantly reduced:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dialog-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;currentWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Acho&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 👈&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActiveTab&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBarkedTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dialogBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bark&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#from-the-content-script" class="anchor"&gt;
  &lt;/a&gt;
  From the content script
&lt;/h2&gt;

&lt;p&gt;The solution here may not be as obvious, but it's pretty simple: Just add &lt;code&gt;acho.js&lt;/code&gt; to the &lt;code&gt;js&lt;/code&gt; array inside our current content script object in the &lt;code&gt;manifest.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Acho, where are we?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"content_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"matches"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;all_urls&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"content.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"acho.js"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;👈&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"content.css"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And now we can instantiate and use the &lt;code&gt;Acho&lt;/code&gt; class in &lt;code&gt;content.js&lt;/code&gt; to generate the "barked title" string:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Notification body.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acho-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Notification icon.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images/icon32.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Notification text.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notificationText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notificationText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add to current page.&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sendResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acho-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notificationText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// 👇👇👇&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Acho&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;notificationText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBarkedTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

    &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#from-the-background-script" class="anchor"&gt;
  &lt;/a&gt;
  From the background script
&lt;/h2&gt;

&lt;p&gt;Here the solution is similar: We need to add &lt;code&gt;acho.js&lt;/code&gt; to the &lt;code&gt;scripts&lt;/code&gt; array of our &lt;code&gt;background&lt;/code&gt; object in the &lt;code&gt;manifest.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Acho, where are we?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="nl"&gt;"background"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"background.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"acho.js"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;👈&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"persistent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And just like that, we can now access the &lt;code&gt;Acho&lt;/code&gt; class from &lt;code&gt;background.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;duplicate-tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;duplicateTab&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;barkTitle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Command &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; not found`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Gets the current active tab URL and opens a new tab with the same URL.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;duplicateTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Acho&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 👈 &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActiveTab&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Sends message to the content script with the currently active tab title.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;barkTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Acho&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 👈 &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;acho&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActiveTab&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;tabTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;I had to make the functions &lt;code&gt;async&lt;/code&gt; so I could await the promise from &lt;code&gt;acho.getActiveTab()&lt;/code&gt;. You can use &lt;code&gt;acho.getActiveTab().then((tab) =&amp;gt; { })&lt;/code&gt; instead if you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it! Now all our components are reusing the logic from &lt;code&gt;acho.js&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We managed to remove our duplicated code and apply reusability by creating a separate file containing the shared logic and using different strategies to make that file available in every component. &lt;/p&gt;

&lt;p&gt;Now our extension's code is easier to read and maintain 👌&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-repo" class="anchor"&gt;
  &lt;/a&gt;
  The repo
&lt;/h1&gt;

&lt;p&gt;You can find all my Chrome Extensions examples in this repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pawap90"&gt;
        pawap90
      &lt;/a&gt; / &lt;a href="https://github.com/pawap90/acho-where-are-we"&gt;
        acho-where-are-we
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Acho (a cute pup) tells you the title of the current page on your browser. A sample chrome extension.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#let-me-know-what-you-think" class="anchor"&gt;
  &lt;/a&gt;
  Let me know what you think! 💬
&lt;/h1&gt;

&lt;p&gt;Are you working on or have you ever built a Chrome extension? &lt;/p&gt;

&lt;p&gt;Do you know any other strategies for code reusability in Chrome extensions?&lt;/p&gt;

</description>
      <category>chromeextension</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Linux Terminal: The Ultimate Cheat Sheet - Part 2</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 01 Feb 2021 11:04:36 +0000</pubDate>
      <link>https://dev.to/mauro_codes/linux-terminal-the-ultimate-cheat-sheet-part-2-11ge</link>
      <guid>https://dev.to/mauro_codes/linux-terminal-the-ultimate-cheat-sheet-part-2-11ge</guid>
      <description>&lt;p&gt;This post is the second part of a series that will help you learn how to benefit from the Linux Terminal. &lt;br&gt;
If you didn't see my first post, I highly recommend taking a look at it before continuing with this one:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mauro_codes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNWFmN12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Bi0n9QTm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/61298/58d8afa8-5d29-4936-b2f2-8697e1ce2e68.png" alt="mauro_codes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mauro_codes/linux-terminal-the-ultimate-cheat-sheet-2g5b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Linux Terminal: The Ultimate Cheat Sheet&lt;/h2&gt;
      &lt;h3&gt;Mauro Garcia ・ Jan 25 ・ 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#terminal&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;💡 If you found this content valuable, you can &lt;a href="https://twitter.com/mauro_codes"&gt;follow me on Twitter&lt;/a&gt; to get updates about upcoming posts&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Search with Grep&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Search for a string within a file ➜ &lt;code&gt;grep [term-to-search] [source-file-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Case Insensitive Search within a file ➜ &lt;code&gt;grep -i [term-to-search] [source-file-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Search for non-matching lines within a file ➜ &lt;code&gt;grep -v [term-to-search] [source-file-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Recursive search within a directory ➜ &lt;code&gt;grep -r [term-to-search] [path-to-directory-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Multiple searches within a file ➜ &lt;code&gt;grep -E "[first-term-to-search|second-term-to-search]" [source-file-to-search]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Count search results ➜ &lt;code&gt;grep -c [term-to-search] [source-file-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Showing the name of the matching files ➜ &lt;code&gt;grep -l [term-to-search] [matching-files-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Learn more about grep ➜ &lt;code&gt;man grep&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pipes&lt;/strong&gt; 

&lt;ul&gt;
&lt;li&gt;Piping commands ➜ &lt;code&gt;[command 1] | [command 2] | [command n]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Piping filtered search results into a new file ➜ &lt;code&gt;ls | grep [term-to-filter] | cat &amp;gt; [path-to-new-file]/[name-for-new-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Searching through your command history ➜ &lt;code&gt;history | grep "[term-to-search]"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Permissions: Change file mode bits command (chmod)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Add execute permission to everyone ➜ &lt;code&gt;chmod a+x [name-of-the-file]&lt;/code&gt; or &lt;code&gt;chmod +x [name-of-the-file]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Remove execute permission to everyone ➜ &lt;code&gt;chmod a-x [name-of-the-file]&lt;/code&gt; or &lt;code&gt;chmod -x [name-of-the-file]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Add execute permission to the owner ➜ &lt;code&gt;chmod u+x [name-of-the-file]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Remove write permission to others users ➜ &lt;code&gt;chmod o-w [name-of-the-file]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Add read permission to the group ➜ &lt;code&gt;chmod g+r [name-of-the-file]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Remove write and read permission to everyone ➜ &lt;code&gt;chmod a-wr [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Remove write and read permission to everyone for all the files in the current directory ➜ &lt;code&gt;chmod a-wr *.*&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Groups&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List all the available groups ➜ &lt;code&gt;getent group&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;List all the groups my account is assigned to ➜ &lt;code&gt;groups&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Search for a specific group (using pipes) ➜ &lt;code&gt;getent group | grep [group-name-to-search]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a new group ➜ &lt;code&gt;sudo groupadd [name-for-the-new-group]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add an existing user to a secondary group ➜ &lt;code&gt;usermod -a -G [group-you-want-to-add-the-user-to] [user-name-to-add]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Ownership: Change file owner and group (chown)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Change user ownership for a file ➜ &lt;code&gt;sudo chown [new-owner-name] [file-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change user ownership for several files ➜ &lt;code&gt;sudo chown [new-owner-name] [file-1-to-change-ownership] [file-n-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change user ownership for a directory ➜ &lt;code&gt;sudo chown [new-owner-name] [directory-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Recursively change user ownership for a directory and all it's files  ➜ &lt;code&gt;sudo chown -R [new-owner-name] [directory-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change group ownership for a file ➜ &lt;code&gt;sudo chown :[new-group-name] [file-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Change user and group ownership for a file ➜ &lt;code&gt;sudo chown [new-owner-name]:[new-group-name] [file-to-change-ownership]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Shortcuts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Search through your search history ➜ &lt;code&gt;[CTRL] + r&lt;/code&gt;. Then type a few characters to find you command&lt;/li&gt;
&lt;li&gt;Paste previous lines ➜ &lt;code&gt;[CTRL] + p&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor to the beginning of the line. ➜ &lt;code&gt;[CTRL] + a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor to the end of the line. ➜ &lt;code&gt;[CTRL] + e&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor forward one character. ➜ &lt;code&gt;[CTRL] + f&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor backward one character. ➜ &lt;code&gt;[CTRL] + b&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Erases the complete line. ➜ &lt;code&gt;[CTRL] + u&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Erases the last word typed. ➜ &lt;code&gt;[CTRL] + w&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Working with long files&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Print the last lines for a file ➜ &lt;code&gt;tail [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the last n lines for a file ➜ &lt;code&gt;tail -n [number-of-lines] [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the first lines for a file ➜ &lt;code&gt;head [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the first n lines for a file ➜ &lt;code&gt;head -n [number-of-lines] [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Page through a file ➜ &lt;code&gt;less [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#global-regular-expression-search-grep-command" class="anchor"&gt;
  &lt;/a&gt;
  Global regular expression search (grep command)
&lt;/h1&gt;

&lt;p&gt;The Linux &lt;code&gt;grep&lt;/code&gt; command is a string and pattern matching utility that displays matching lines from multiple files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-for-a-string-within-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Search for a string within a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep [term-to-search] [source-file-to-search]&lt;/code&gt; to search for a term within a file. You can optionally add the &lt;code&gt;-n&lt;/code&gt; argument if you want to print the line number for each match&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  script.txt

&lt;span class="c"&gt;## Print the content of the index.html file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;index.html
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;

    &amp;lt;title&amp;gt;My Website&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"js/main.js"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;span class="c"&gt;## Search for "meta" within the index.html file using grep&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep &lt;/span&gt;meta index.html &lt;span class="nt"&gt;-n&lt;/span&gt;
4:    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt; /&amp;gt;
5:    &amp;lt;meta http-equiv&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"x-ua-compatible"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ie=edge"&lt;/span&gt; /&amp;gt;
6:    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#case-insensitive-search-within-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Case Insensitive Search within a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -i [term-to-search] [source-file-to-search]&lt;/code&gt; to perform a case insensitive search:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Print the content of the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;main.js
const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;num1 + num2
&lt;span class="o"&gt;}&lt;/span&gt;

// Call the Sum &lt;span class="k"&gt;function
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Search for "sum" without ignoring case (we get 2 results)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep sum &lt;/span&gt;main.js &lt;span class="nt"&gt;-n&lt;/span&gt;
1:const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
6:sum&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Search for "sum" using the ignore case argument (we get 3 results)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep sum &lt;/span&gt;main.js &lt;span class="nt"&gt;-in&lt;/span&gt;
1:const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
5:// Call the Sum &lt;span class="k"&gt;function
&lt;/span&gt;6:sum&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#search-for-nonmatching-lines-within-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Search for non-matching lines within a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -v [term-to-search] [source-file-to-search]&lt;/code&gt; to get all the lines within a file that don't match with the term&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Print the content of the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;main.js
const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;num1 + num2
&lt;span class="o"&gt;}&lt;/span&gt;

// Call the Sum &lt;span class="k"&gt;function
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Search for each line that doesn't include "sum" (case sensitive)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep sum &lt;/span&gt;main.js &lt;span class="nt"&gt;-v&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;num1 + num2
&lt;span class="o"&gt;}&lt;/span&gt;

// Call the Sum &lt;span class="k"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#recursive-search-within-a-directory" class="anchor"&gt;
  &lt;/a&gt;
  Recursive search within a directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -r [term-to-search] [path-to-directory-to-search]&lt;/code&gt; to search through nested directories and subdirectories.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  script.txt  temp

&lt;span class="c"&gt;## Search recursively for "sum" within the current directory (including sub-directories)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
./index.html:    &amp;lt;p&amp;gt;Calling the &lt;span class="nb"&gt;sum &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;:&amp;lt;p&amp;gt;
./index.html:    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; TODO: Call the &lt;span class="nb"&gt;sum &lt;/span&gt;&lt;span class="k"&gt;function &lt;/span&gt;and display the value &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
./main.js:const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
./main.js:sum&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;
./temp/index.html:    &amp;lt;p&amp;gt;Calling the &lt;span class="nb"&gt;sum &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;:&amp;lt;p&amp;gt;
./temp/index.html:    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; TODO: Call the &lt;span class="nb"&gt;sum &lt;/span&gt;&lt;span class="k"&gt;function &lt;/span&gt;and display the value &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiple-searches-within-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Multiple searches within a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -E "[first-term-to-search|second-term-to-search]" [source-file-to-search]&lt;/code&gt; to search for multiple terms within a file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Print the content of the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;main.js
const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return &lt;/span&gt;num1 + num2
&lt;span class="o"&gt;}&lt;/span&gt;

// Call the Sum &lt;span class="k"&gt;function
&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;

const printMessage&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        console.log&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

// Call the printMessage &lt;span class="k"&gt;function
&lt;/span&gt;printMessage&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;## Search for "sum" or "printMessage" within the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s2"&gt;"sum|printMessage"&lt;/span&gt; main.js
const &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;num1, num2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;10,4&lt;span class="o"&gt;)&lt;/span&gt;
const printMessage&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
// Call the printMessage &lt;span class="k"&gt;function
&lt;/span&gt;printMessage&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello world"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#count-search-results" class="anchor"&gt;
  &lt;/a&gt;
  Count search results
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -c [term-to-search] [source-file-to-search]&lt;/code&gt; to count how many times a search term appears in the file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  index.html  main.js  script.txt  temp

&lt;span class="c"&gt;## Count how many times "sum" appears on the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nb"&gt;sum &lt;/span&gt;main.js
2

&lt;span class="c"&gt;## Count how many times "sum" or "printMessage" appears on the main.js file &lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="s2"&gt;"sum|printMessage"&lt;/span&gt; main.js
5

&lt;span class="c"&gt;## Recursive count to get how many times "sum" or "printMessage" appears in the current working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nt"&gt;-E&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"sum|printMessage"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
./index.html:2
./main.js:5
./README.md:0
./script.txt:0
./temp/index.html:2
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#showing-the-name-of-the-matching-files" class="anchor"&gt;
  &lt;/a&gt;
  Showing the name of the matching files
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;grep -l [term-to-search] [matching-files-to-search]&lt;/code&gt; to get a list of files that includes the search term&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List the content for the working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;README.md  about.html  index.html  main.js  script.txt  temp

&lt;span class="c"&gt;## Get a list of html files that contains "&amp;lt;h1&amp;gt;"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;h1&amp;gt;"&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.html
index.html

&lt;span class="c"&gt;## Get a list of html files that contains "&amp;lt;p&amp;gt;"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;"&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;.html
about.html
index.html

&lt;span class="c"&gt;## Recursively get a list of files that contains "&amp;lt;p&amp;gt;" within the current directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
./about.html
./index.html
./temp/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#pipes" class="anchor"&gt;
  &lt;/a&gt;
  Pipes
&lt;/h1&gt;

&lt;p&gt;Pipes are among the most useful command-line features on Linux and allow you to perform complex operations by "piping" multiple operations together, which means that the output of each command within the pipe will serve as an input for the next command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#piping-filtered-search-results-into-a-new-file" class="anchor"&gt;
  &lt;/a&gt;
  Piping filtered search results into a new file
&lt;/h2&gt;

&lt;p&gt;Let's say I want to get a list of all my blog posts that have the word "svelte" within the title. And I want to write the full list on a new file called svelte-articles.txt.&lt;/p&gt;

&lt;p&gt;We can use pipes to list all my articles, filter those that include "svelte" using grep, and save that filtered list on a new file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check that my current working directory is the "posts" folder that includes all my posts&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/maurogarcia.dev/posts&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/home/mauro_codes/projects/maurogarcia.dev/posts

&lt;span class="c"&gt;## Piping the list of posts with grep to check how many posts include the term "svelte" (I get five items)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/maurogarcia.dev/posts&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;svelte
5

&lt;span class="c"&gt;## Piping the list of post --&amp;gt; Filter svelte posts --&amp;gt; move the content to a new file using cat&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/maurogarcia.dev/posts&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;svelte | &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /home/mauro_codes/projects/svelte-articles.txt

&lt;span class="c"&gt;## Print the content of our new file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/maurogarcia.dev/posts&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /home/mauro_codes/projects/svelte-articles.txt
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.2K Jan 27 18:29 &lt;span class="nt"&gt;-5-things-i-love-about-svelte-&lt;/span&gt;.md
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes  11K Jan 27 18:29 angular-vs-svelte-card-component.md
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 5.3K Jan 27 18:29 component-driven-development-with-svelte.md
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 5.0K Jan 27 18:29 how-to-build-your-next-chrome-extension-with-svelte.md
&lt;span class="nt"&gt;-rw-r--r--&lt;/span&gt; 1 mauro_codes mauro_codes 4.7K Jan 27 18:29 sapper-svelte-tailwindcss-boilerplate.md
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#searching-through-your-command-history" class="anchor"&gt;
  &lt;/a&gt;
  Searching through your command history
&lt;/h2&gt;

&lt;p&gt;You can use pipes to search through your command history using &lt;code&gt;grep&lt;/code&gt; by typing &lt;code&gt;history | grep "[term-to-search]"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://dev.to/bradnichol"&gt;@bradnichol&lt;/a&gt; for suggesting this approach in my previous post!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Searching for the term svelte on your command history&lt;/span&gt;
mauro_codes@mauro-desktop:~&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"svelte"&lt;/span&gt;
  415  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;svelte
  416  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; svelte
  417  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; svelte
  418  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; svelte |
  419  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; svelte | &lt;span class="nb"&gt;cat
  &lt;/span&gt;420  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;svelte | &lt;span class="nb"&gt;cat
  &lt;/span&gt;421  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;svelte | &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /home/mauro_codes/projects/svelte-articles.txt
  422  &lt;span class="nb"&gt;cat&lt;/span&gt; /home/mauro_codes/projects/svelte-articles.txt
  444  &lt;span class="nb"&gt;ls grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; svelte
  445  &lt;span class="nb"&gt;ls&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; svelte
  446  &lt;span class="nb"&gt;cat&lt;/span&gt; /home/mauro_codes/projects/svelte-articles.txt
  448  &lt;span class="nb"&gt;history&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"svelte"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#permissions-change-file-mode-bits-command-chmod" class="anchor"&gt;
  &lt;/a&gt;
  Permissions: Change file mode bits command (chmod)
&lt;/h1&gt;

&lt;p&gt;Changing permissions in Linux is an extensive topic that deserves its own post. But I decided to include a few examples that can come in handy. &lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;chmod&lt;/code&gt; command to add or remove the read, write, and execute permissions to different users for one or more files.&lt;/p&gt;

&lt;p&gt;As a reference, here is an example of how the permissions are displayed for each file or directory when we use &lt;code&gt;ls lah&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1zf9R4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fpk9bna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1zf9R4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/fpk9bna.png" alt="Linux permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-the-execute-permission-to-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Add the execute permission to everyone
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod a+x [name-of-the-file]&lt;/code&gt; or &lt;code&gt;chmod +x [name-of-the-file]&lt;/code&gt;  to add execute permission to everyone for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Add execute permission to everyone in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-the-execute-permission-to-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Remove the execute permission to everyone
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod a-x [name-of-the-file]&lt;/code&gt; or &lt;code&gt;chmod -x [name-of-the-file]&lt;/code&gt; to remove execute permission to everyone for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Remove the execute permissions to everyone in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;a-x main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rw-rw-rw-&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-the-execute-permission-to-the-owner" class="anchor"&gt;
  &lt;/a&gt;
  Add the execute permission to the owner
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod u+x [name-of-the-file]&lt;/code&gt; to add the execute permission only to the owner for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Add the execute permissions only to the owner in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;u+x main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x------&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-write-permission-to-other-users" class="anchor"&gt;
  &lt;/a&gt;
  Remove write permission to other users
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod o-w [name-of-the-file]&lt;/code&gt; to remove the write permission only to other users (not owner or group) for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Remove the write permission only to other users (not owner or group) in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;o-w main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rwxrwxr-x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-read-permission-to-the-group" class="anchor"&gt;
  &lt;/a&gt;
  Add read permission to the group
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod g+r [name-of-the-file]&lt;/code&gt; to add read permission only to the group for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Add the read permission only to the group in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;g+r main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;---------r-----&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;---------------&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-write-and-read-permission-to-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Remove write and read permission to everyone
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod a-wr [name-of-the-file]&lt;/code&gt; to remove write and read permissions to everyone for a specific file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Remove the write and read permission to everyone in the main.js file&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;a-wr main.js

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-write-and-read-permission-to-everyone-for-multiple-files" class="anchor"&gt;
  &lt;/a&gt;
  Remove write and read permission to everyone for multiple files
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;chmod a-wr *.*&lt;/code&gt; to remove the write and read permissions to everyone for all the files in the current working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check file permissions&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;-rwxrwxrwx&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Remove the write and read permissions to everyone for all the files in the current working directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;chmod &lt;/span&gt;a-wr &lt;span class="k"&gt;*&lt;/span&gt;.&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;## Check permissions again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#groups" class="anchor"&gt;
  &lt;/a&gt;
  Groups
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#list-all-the-available-groups" class="anchor"&gt;
  &lt;/a&gt;
  List all the available groups
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;getent group&lt;/code&gt; to get a list including all the available groups in your system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;getent group
root:x:0:
daemon:x:1:
bin:x:2:
sys:x:3:
mauro_codes:x:1000:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-all-the-groups-my-account-is-assigned-to" class="anchor"&gt;
  &lt;/a&gt;
  List all the groups my account is assigned to
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;groups&lt;/code&gt; to get a list of all the groups you are part of.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List all my groups&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;groups
&lt;/span&gt;mauro_codes adm dialout cdrom floppy &lt;span class="nb"&gt;sudo &lt;/span&gt;audio dip video plugdev netdev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#search-for-a-specific-group-using-pipes" class="anchor"&gt;
  &lt;/a&gt;
  Search for a specific group (using pipes)
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;getent group | grep [group-name-to-search]&lt;/code&gt; to search for a specific group using pipes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## List all the groups that contains the term "mauro_codes"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;getent group | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"mauro_codes"&lt;/span&gt;
adm:x:4:syslog,mauro_codes
mauro_codes:x:1000:

&lt;span class="c"&gt;## List all the groups that contains the term "root"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;getent group | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"root"&lt;/span&gt;
root:x:0:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-group" class="anchor"&gt;
  &lt;/a&gt;
  Create a new group
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo groupadd [name-for-the-new-group]&lt;/code&gt; to create a new group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Create a new group called "development"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;groupadd development

&lt;span class="c"&gt;## Check if the new group was created&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;getent group | &lt;span class="nb"&gt;grep &lt;/span&gt;development
development:x:1001:
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-an-existing-user-to-a-secondary-group" class="anchor"&gt;
  &lt;/a&gt;
  Add an existing user to a secondary group
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;usermod -a -G [group-you-want-to-add-the-user-to] [user-name-to-add]&lt;/code&gt; to add an existing user to a secondary group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Add mauro_codes to the secondary group "development"&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-G&lt;/span&gt; development mauro_codes

&lt;span class="c"&gt;## Check changes&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;getent group | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s2"&gt;"mauro"&lt;/span&gt;
adm:x:4:syslog,mauro_codes
dialout:x:20:mauro_codes
mauro_codes:x:1000:
development:x:1001:mauro_codes
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#ownership-change-file-owner-and-group-chown" class="anchor"&gt;
  &lt;/a&gt;
  Ownership: Change file owner and group (chown)
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#change-user-ownership-for-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Change user ownership for a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown [new-owner-name] [file-to-change-ownership]&lt;/code&gt; to change user ownership for a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check user ownership&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Change user ownership (the root user will be the owner of the main.js file)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown &lt;/span&gt;root main.js

&lt;span class="c"&gt;## Check user ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-user-ownership-for-several-files" class="anchor"&gt;
  &lt;/a&gt;
  Change user ownership for several files
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown [new-owner-name] [file-1-to-change-ownership] [file-n-to-change-ownership]&lt;/code&gt; to change user ownership for several files at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check user ownership&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Change user ownership (the root user will be the owner of the main.js and script.txt files)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown &lt;/span&gt;root main.js script.txt

&lt;span class="c"&gt;## Check user ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-user-ownership-for-a-directory" class="anchor"&gt;
  &lt;/a&gt;
  Change user ownership for a directory
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown [new-owner-name] [directory-to-change-ownership]&lt;/code&gt; to change the user ownership for a directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check directories user ownership&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 4.0K
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 28 10:48 ..
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 landing-page
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 22 12:15 personal-blog

&lt;span class="c"&gt;## Change user ownership (the root user will be the owner of the "landing-page" directory)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown &lt;/span&gt;root ./landing-page/

&lt;span class="c"&gt;## Check directories user ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 4.0K
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 28 10:48 ..
drwxr-xr-x 1 root        mauro_codes 512 Jan 27 17:49 landing-page
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 22 12:15 personal-blog
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#recursively-change-user-ownership-for-a-directory-and-all-its-files" class="anchor"&gt;
  &lt;/a&gt;
  Recursively change user ownership for a directory and all its files
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown -R [new-owner-name] [directory-to-change-ownership]&lt;/code&gt; to recursively change the user ownership for a directory and all its files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check files ownershop within the landing-page directory&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 root        mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 16:27 temp_dir

&lt;span class="c"&gt;## Recursively change the user ownership (the root user will be the owner &lt;/span&gt;
&lt;span class="c"&gt;## of all the files and directories within the current directory)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; root &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;## Check user ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lah&lt;/span&gt;
total 0
drwxr-xr-x 1 root        mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        mauro_codes  23 Jan 24 17:31 script.txt
drwxr-xr-x 1 root        mauro_codes 512 Jan 27 16:27 temp_dir
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-group-ownership-for-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Change group ownership for a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown :[new-group-name] [file-to-change-ownership]&lt;/code&gt; to change the group ownership for a file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check group ownership&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Change group ownership (the main.js file will now have "development" as a group)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown&lt;/span&gt; :development main.js

&lt;span class="c"&gt;## Check group ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes development 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-user-and-group-ownership-for-a-file" class="anchor"&gt;
  &lt;/a&gt;
  Change user and group ownership for a file
&lt;/h2&gt;

&lt;p&gt;Type &lt;code&gt;sudo chown [new-owner-name]:[new-group-name] [file-to-change-ownership]&lt;/code&gt; to change the user and the group ownership for a file at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;## Check ownership&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt

&lt;span class="c"&gt;## Change user and group ownership (the main.js file will now have "development" as a group and root as owner)&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chown &lt;/span&gt;root:development main.js

&lt;span class="c"&gt;## Check ownership again&lt;/span&gt;
mauro_codes@mauro-desktop:~/projects/landing-page&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;total 0
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 17:49 &lt;span class="nb"&gt;.&lt;/span&gt;
drwxr-xr-x 1 mauro_codes mauro_codes 512 Jan 27 20:00 ..
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 root        development 206 Jan 27 16:36 main.js
&lt;span class="nt"&gt;--------x--x--x&lt;/span&gt; 1 mauro_codes mauro_codes  23 Jan 24 17:31 script.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#shortcuts" class="anchor"&gt;
  &lt;/a&gt;
  Shortcuts
&lt;/h1&gt;

&lt;p&gt;Big shout-out to &lt;a href="https://dev.to/bogkonstantin"&gt;@bogkonstantin&lt;/a&gt; and &lt;a href="https://dev.to/samuelabreu"&gt;@samuelabreu&lt;/a&gt; for letting me know about these commands I didn't know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search-through-your-command-history" class="anchor"&gt;
  &lt;/a&gt;
  Search through your command history
&lt;/h2&gt;

&lt;p&gt;In the previous post, we saw that we could get a full list of the latest commands we run by typing &lt;code&gt;history&lt;/code&gt;. If you don't want to see the full list but search for a specific command quickly, type &lt;code&gt;[CTRL] + r&lt;/code&gt;. You'll be asked to enter a few characters to get matching commands. You can iterate between those results by typing &lt;code&gt;[CTRL] + r&lt;/code&gt; again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-through-your-commands" class="anchor"&gt;
  &lt;/a&gt;
  Moving through your commands
&lt;/h2&gt;

&lt;p&gt;There are a few shortcuts you can use to move through your commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paste previous lines ➜ &lt;code&gt;[CTRL] + p&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor to the beginning of the line. ➜ &lt;code&gt;[CTRL] + a&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor to the end of the line. ➜ &lt;code&gt;[CTRL] + e&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor forward one character. ➜ &lt;code&gt;[CTRL] + f&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moves the cursor backward one character. ➜ &lt;code&gt;[CTRL] + b&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Erases the complete line. ➜ &lt;code&gt;[CTRL] + u&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Erases the last word typed. ➜ &lt;code&gt;[CTRL] + w&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#working-with-long-files" class="anchor"&gt;
  &lt;/a&gt;
  Working with long files
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Print the last lines for a file ➜ &lt;code&gt;tail [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the last n lines for a file ➜ &lt;code&gt;tail -n [number-of-lines] [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the first lines for a file ➜ &lt;code&gt;head [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Print the first n lines for a file ➜ &lt;code&gt;head -n [number-of-lines] [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Page through a file ➜ &lt;code&gt;less [name-of-the-file]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#let-me-know-if-you-want-me-to-cover-any-particular-command-on-a-final-post" class="anchor"&gt;
  &lt;/a&gt;
  Let me know if you want me to cover any particular command on a final post!
&lt;/h2&gt;

</description>
      <category>linux</category>
      <category>terminal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 React Custom Hooks You Should Start Using (Explained)</title>
      <author>Grégory D'Angelo</author>
      <pubDate>Mon, 01 Feb 2021 10:46:37 +0000</pubDate>
      <link>https://dev.to/alterclass/5-react-custom-hooks-you-should-start-using-explained-5d18</link>
      <guid>https://dev.to/alterclass/5-react-custom-hooks-you-should-start-using-explained-5d18</guid>
      <description>&lt;p&gt;Are you repeating yourself by building the same features again and again inside your functional components? Then, in this video, we gonna cover the 5 custom hooks that I use every single day in most of my React applications and that you should also use.&lt;/p&gt;

&lt;p&gt;Those 5 React hooks will boost your productivity, speed up your development process, and save you a lot of time so you can work on more valuable features for your product or application.&lt;/p&gt;

&lt;p&gt;So let's dive in!&lt;/p&gt;

&lt;p&gt;Watch the video on &lt;a href="https://www.youtube.com/channel/UCn858neTm5-bPjl6-wznR2g?sub_confirmation=1"&gt;Youtube&lt;/a&gt; or keep reading.&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://youtu.be/eeRLmYL7S9I"&gt;https://youtu.be/eeRLmYL7S9I&lt;/a&gt;]&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#react-hooks"&gt;React hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usefetch"&gt;useFetch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useeventlistener"&gt;useEventListener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uselocalStorage"&gt;useLocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usemediaquery"&gt;useMediaQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usedarkmode"&gt;useDarkMode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#become-a-react-developer"&gt;Become a React Developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  React hooks
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gB-t8O2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612173505748/HABHbQ9OV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB-t8O2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612173505748/HABHbQ9OV.png" alt="Introducing React Hooks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React hooks have been introduced to the library with version 16.8. It allows you to use state and other React features in your functional components so that you don't even need to write classes anymore.&lt;/p&gt;

&lt;p&gt;In reality, hooks are much more than that.&lt;/p&gt;

&lt;p&gt;Hooks let us organize the logic inside a component into reusable isolated units.&lt;/p&gt;

&lt;p&gt;They are a natural fit for the React component model and the new way to build your applications. Hooks can cover all use cases for classes while providing more flexibility in extracting, testing, and reusing code throughout your application.&lt;/p&gt;

&lt;p&gt;Building your own custom React hooks, you can easily share features across all components of your applications and even across different applications, so you don't repeat yourself and get more productive at building React applications.&lt;/p&gt;

&lt;p&gt;Right now, we're going to take a look at my top 5 custom hooks, re-create them from scratch together, so you really understand how they work and exactly how you can use them to boost your productivity and speed up your development process.&lt;/p&gt;

&lt;p&gt;So let's jump right into building our first custom React hook.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usefetch" class="anchor"&gt;
  &lt;/a&gt;
  useFetch
&lt;/h1&gt;

&lt;p&gt;How many times have you built a React application that needs to fetch data from an external source before rendering it to the users?&lt;/p&gt;

&lt;p&gt;Fetching data is something I'm doing every single time when I'm building a React application. I even make several fetching calls inside a single application.&lt;/p&gt;

&lt;p&gt;And whatever the way you choose to fetch your data, either with &lt;a href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt;, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt;, or anything else, you are always writing the same piece of code again and again across your React components and across your applications as well.&lt;/p&gt;

&lt;p&gt;So let's see how we can build a simple yet useful custom Hook we can call whenever we need to fetch data inside our application.&lt;/p&gt;

&lt;p&gt;This way, we'll be able to reuse the logic inside that React hook in any functional components to fetch data with just one line of code.&lt;/p&gt;

&lt;p&gt;Okay. So let's call our custom hook: &lt;code&gt;useFetch.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This hook accepts two arguments, the URL we need to query to fetch the data and an object representing the options we want to apply to the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Fetching data is a side effect. So we should use the React &lt;code&gt;useEffect&lt;/code&gt; hook to perform our query.&lt;/p&gt;

&lt;p&gt;In this example, we are going to use the Fetch API to make our request. So we are going to pass the URL and the options. And once the Promise is resolved, we retrieved the data by parsing the response body. For that, we use the &lt;code&gt;json()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Then, we just need to store it in a React state variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Okay, but we should also catch and handle network errors in case something goes wrong with our request. So we gonna use another state variable to store the error. So we could return it from our hook and be able to tell if an error has occurred.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;useFetch&lt;/code&gt; hook would return an object containing the data fetched from the URL or the error if anything wrong happened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, it is generally a good practice to indicate to your users the status of an asynchronous request, such as displaying a loading indicator before rendering the results.&lt;/p&gt;

&lt;p&gt;So let's add a third state variable to our custom hook to track our request's status. We set this &lt;code&gt;loading&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt; right before launching our request, and we set it back to &lt;code&gt;false&lt;/code&gt; once it is done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can now return this variable with the others to use it in our components to render a loading spinner while the request is running so that our users know that we are getting the data they asked for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One more thing before we see how to use our new custom hook.&lt;/p&gt;

&lt;p&gt;We need to check if the component using our hook is still mounted to update our state variables. Otherwise, we are introducing memory leaks in our application.&lt;/p&gt;

&lt;p&gt;To do that, we can simply create a variable to check if our component is still mounted and use the cleanup function to update this variable when the component unmounts. And inside the Promise methods, we can first check if the component is mounted before updating our state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Alright! Now, let's see how easy it is to fetch data with our &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;We just need to pass the URL of the resource we want to retrieve. From there, we get an object that we can use to render our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useFetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://hn.algolia.com/api/v1/search?query=react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;hits&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectID&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#useeventlistener" class="anchor"&gt;
  &lt;/a&gt;
  useEventListener
&lt;/h1&gt;

&lt;p&gt;Let's move into our second custom hook: &lt;code&gt;useEventListener.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This hook is responsible for setting up and clean up an event listener inside our components.&lt;/p&gt;

&lt;p&gt;This way, we don't need to repeat ourselves every time we need to add event listeners to our application.&lt;/p&gt;

&lt;p&gt;It accepts as arguments the name of the event we want to listen for, the function to run whenever an event of the specified type occurs, the target under which to listen for the event, and finally, a set of options for the event listener.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As with the previous hook, we will use the React &lt;code&gt;useEffect&lt;/code&gt; hook to add an event listener. But first, we need to make sure that the target supports the &lt;code&gt;addEventListener&lt;/code&gt; methods. Otherwise, we do nothing!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we can add the actual event listener and remove it inside the cleanup function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Actually, we gonna also use a reference object to store and persist the listener function across renders. We will update this reference only if the listener function changes and use this reference inside our event listener methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;eventType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;savedListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventListener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;savedListener&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventListener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;eventListener&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We don't need to return anything from this hook as we are just listening for events and run the handler function pass in as an argument.&lt;/p&gt;

&lt;p&gt;It is now easy to add an event listener to our components, such as the following component, to detect clicks outside a DOM element. Here we are closing the dialog component if the user clicks outside of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEventListener&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dialogRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Event listener to close dialog on click outside element&lt;/span&gt;
  &lt;span class="nx"&gt;useEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultPrevented&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Do nothing if the event was already processed&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Click outside detected -&amp;gt; closing dialog...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;onClose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fixed inset-0 z-9999 flex items-center justify-center p-4 md:p-12 bg-blurred"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"relative bg-white rounded-md shadow-card max-h-full max-w-screen-sm w-full animate-zoom-in px-6 py-20"&lt;/span&gt;
            &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dialogRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-center font-semibold text-4xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              What's up&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-white bg-red-500 py-1 px-3 rounded-md mr-1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                YouTube
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              ?
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#uselocalstorage" class="anchor"&gt;
  &lt;/a&gt;
  useLocalStorage
&lt;/h1&gt;

&lt;p&gt;For our third custom hook, we will leverage the &lt;code&gt;localStorage&lt;/code&gt; of our browser to persist our component's state across sessions.&lt;/p&gt;

&lt;p&gt;For this one, we need the name of the key to create or update in &lt;code&gt;localStorage&lt;/code&gt; and an initialValue. That's it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we are going to return an array like the one you get with the React &lt;code&gt;useState&lt;/code&gt; hook. So this array will contain a stateful value and a function to update it while persisting it in &lt;code&gt;localStorage.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So let's dive in.&lt;/p&gt;

&lt;p&gt;First, let's create the React state variable we will sync with &lt;code&gt;localStorage.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are using lazy initialization to read 'localStorage' to get the key's value, parse the value if any has been found, or return the initial value passed in as the second argument to our hook.&lt;/p&gt;

&lt;p&gt;In case something goes wrong while reading in &lt;code&gt;localStorage&lt;/code&gt;, we just log an error and return the initial value.&lt;/p&gt;

&lt;p&gt;Finally, we need to create the update function to return that it's going to store any state's updates in &lt;code&gt;localStorage&lt;/code&gt;  rather than using the default one returned by the &lt;code&gt;useState&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setLocalStorageState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newStateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStateValue&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Unable to store new value for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; in localStorage.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocalStorageState&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function updates both the React state and the corresponding key/value in &lt;code&gt;localStorage.&lt;/code&gt; Note that we can also support functional updates like the regular &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;And finally, we return the state value and our custom update function.&lt;/p&gt;

&lt;p&gt;Now, we are good to go and can use the &lt;code&gt;useLocalStorage&lt;/code&gt; hook to persist any data in our components in &lt;code&gt;localStorage.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the following example, we use it to store the application settings of the connected user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultSettings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;weekly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;appSettings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAppSettings&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-settings&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;defaultSettings&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-full w-full flex flex-col justify-center items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center mb-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-medium text-lg mr-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your application's settings:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;appSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notifications&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;setAppSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"border border-gray-900 rounded py-2 px-4 "&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"daily"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;daily&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"weekly"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;weekly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"monthly"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;monthly&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAppSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"rounded-md shadow-md py-2 px-6 bg-red-500 text-white uppercase font-medium tracking-wide text-sm leading-8"&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Reset settings
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#usemediaquery" class="anchor"&gt;
  &lt;/a&gt;
  useMediaQuery
&lt;/h1&gt;

&lt;p&gt;Okay! Let's move on to our fourth React hook, &lt;code&gt;useMediaQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This hook will help us to test and monitor media queries programmatically inside our functional components. This is very useful, for example, when you need to render a different UI depending on the device's type or specific characteristics.&lt;/p&gt;

&lt;p&gt;So our hook is accepting 3 arguments, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, the array of strings corresponding to media queries&lt;/li&gt;
&lt;li&gt;then, an array of values matching those media queries, in the same order as the previous array&lt;/li&gt;
&lt;li&gt;and finally, a default value if no media query matches
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The first thing we do inside this hook is building a media query list for each matched media query. We gonna use this array to get the corresponding value by matching the media queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And to that, we are creating a callback function wrapped inside the &lt;code&gt;useCallback&lt;/code&gt; hook. We retrieve the value of the first media query in our list that matches or return the default value if none of them match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, we create a React state to store the matched value and initialize it using our function defined above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we add an event listener inside the &lt;code&gt;useEffect&lt;/code&gt; hook to listen to each media query's changes. And we run the update function when changes occur.&lt;/p&gt;

&lt;p&gt;Here we don't forget to clean up all those event listeners and return the state value from our hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mql&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mediaQueryList&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A simple example I've used recently is to add a media query to check if the device allows the user to hover over elements. This way, I could add specific opacity styles if the user can hover or apply basic styles otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canHover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Media queries&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(hover: hover)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// Values corresponding to the above media queries by array index&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// Default value&lt;/span&gt;
    &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canHoverClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;opacity-0 hover:opacity-100 transition-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;opacity-100&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;canHover&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;canHoverClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;defaultClass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hover me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#usedarkmode" class="anchor"&gt;
  &lt;/a&gt;
  useDarkMode
&lt;/h1&gt;

&lt;p&gt;Okay, guys! One more hook to go.&lt;/p&gt;

&lt;p&gt;This one is my favorite. It allows me to easily and quickly apply the dark mode feature to any of my React applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/sGXQjHjC5dAt8coX5t/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sGXQjHjC5dAt8coX5t/giphy.gif" alt="AlterClass - Dark Mode with custom React hook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see how to build such a hook.&lt;/p&gt;

&lt;p&gt;This hook aims to enable and disable the dark mode on-demand, store the current state in &lt;code&gt;localStorage.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For that, we are going to use two of the hooks we just built: &lt;code&gt;useMediaQuery&lt;/code&gt; and &lt;code&gt;useLocalStorage.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;useMediaQuery,&lt;/code&gt; we can check the user's browser preference for dark mode.&lt;/p&gt;

&lt;p&gt;Then, with 'useLocalStorage,' we can initialize, store, and persist the current state (dark or light mode)  in &lt;code&gt;localStorage.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useMediaQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useLocalStorage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preferDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, the final piece of this hook is to fire a side effect to add or remove the &lt;code&gt;dark&lt;/code&gt; class to the &lt;code&gt;*document.body&lt;/code&gt;* element. This way, we could simply apply dark styles to our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useMediaQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./useLocalStorage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;preferDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMediaQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEnabled&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;preferDarkMode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEnabled&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useDarkMode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And if you are looking for an easy way to do it, once again, have a look at Tailwind CSS, which supports dark mode. Coupled with this hook, Tailwind CSS becomes the easiest and fastest way of implementing dark mode in any React applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Alright! That's it, guys. Thank you so much for watching (or reading this article).&lt;/p&gt;

&lt;p&gt;I really hope that this video was useful for you. Make sure to check the &lt;a href="https://github.com/AlterClassIO/react-custom-hooks"&gt;Github repository&lt;/a&gt; to get the source code of all the hooks we just built together.&lt;/p&gt;

&lt;p&gt;Please share this video with your friends, hit the like button, and &lt;a href="https://www.youtube.com/channel/UCn858neTm5-bPjl6-wznR2g?sub_confirmation=1"&gt;don't forget to subscribe on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#become-a-react-developer" class="anchor"&gt;
  &lt;/a&gt;
  Become a React Developer
&lt;/h1&gt;

&lt;p&gt;And if you need to learn more about building modern web applications with React, go &lt;a href="https://alterclass.io/courses/react"&gt;check out my course on AlterClass.io&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Xq7Tfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707154244/IairJTeM9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Xq7Tfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707154244/IairJTeM9.png" alt="AlterClass.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My course will teach you everything you need to master React, become a successful React developer, and get hired!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4kxB4CaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707173408/Zvz_dnAD4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kxB4CaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707173408/Zvz_dnAD4.png" alt="AlterClass.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll teach all the concepts you need to work with React, you'll get tons of hands-on practice through quizzes and programming assessments, and you'll build real-world projects on your own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7SPl_ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707203955/KP5XNhgHE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7SPl_ne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707203955/KP5XNhgHE.png" alt="AlterClass.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gugk5iuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707213560/_2Wz8NuE1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gugk5iuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610707213560/_2Wz8NuE1.png" alt="AlterClass.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plus, you'll be part of a growing community of learners.&lt;/p&gt;

&lt;p&gt;So go to &lt;a href="http://alterclass.io/"&gt;AlterClass.io&lt;/a&gt;, enroll in my course, and start building an amazing portfolio of powerful React applications.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 lessons learned while building my programming career;</title>
      <author>cyrusCodes</author>
      <pubDate>Mon, 01 Feb 2021 08:32:40 +0000</pubDate>
      <link>https://dev.to/cyruscodes/10-lessons-learned-while-building-my-programming-career-1eeh</link>
      <guid>https://dev.to/cyruscodes/10-lessons-learned-while-building-my-programming-career-1eeh</guid>
      <description>&lt;p&gt;Hello, this being my first blog post, I thought it makes sense to write about some of the lessons that I have learned so far while growing my programming career.&lt;/p&gt;

&lt;p&gt;Now some of these ideas I've learned from veteran programmers and my role models like  &lt;a href="https://twitter.com/traversymedia"&gt;@traversymedia&lt;/a&gt; and  &lt;a href="https://twitter.com/yu_angela"&gt;Angela yu&lt;/a&gt;  who have quite a unique and effective teaching method among others.  &lt;/p&gt;

&lt;p&gt;Some of these lessons I've realized do not only apply to developers but also to other projects and fields one may choose to indulge in. I still struggle with some of them but every day is a learning day and as long as I'm aware of them, I'm getting better, and now so will you so let's get started...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-it-takes-time" class="anchor"&gt;
  &lt;/a&gt;
  1. It takes time;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2sLY0WM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757226206/29-og55vc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2sLY0WM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757226206/29-og55vc.jpeg" alt="it takes time.jpg"&gt;&lt;/a&gt;&lt;br&gt;
  I know many people have heard this before but not until I decided to truly focus &lt;br&gt;
on being a developer did it really sink in. &lt;/p&gt;

&lt;p&gt;I've learned that to truly master a language, or a concept in programming takes time, and rushing through it actually is a waste of time in that you may think you've understood it,  but in a few days, you find that most of what you skimmed through has evaporated and you've actually retained very little.&lt;/p&gt;

&lt;p&gt;This leads to a cycle of going back and forth where you keep going back to learning simple stuff you've covered and waste more time. Take your time, being a skilled developer takes time. So my advice from this would be;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's a marathon, not a sprint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-to-understand-and-not-to-be-done" class="anchor"&gt;
  &lt;/a&gt;
  2. learn to understand and not to be done;
&lt;/h2&gt;

&lt;p&gt;Sometimes I would take a course, documentation, or a book to read and somehow I would look at what I had to cover and frustration would set in.&lt;/p&gt;

&lt;p&gt;There may be hundreds of concepts or methods in a book, an article, a course, and definitely documentation. If you rush to finish it without truly understanding every concept, chances are that when you're done, you'll remember very little to even use it in a project. &lt;/p&gt;

&lt;p&gt;There is nothing as frustrating as trying to learn something new and getting nowhere. Trust me, it happens to most people and when it happens to you my advice is;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Take a break and go through it again later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3practice-through-projects" class="anchor"&gt;
  &lt;/a&gt;
  3.Practice through projects;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqjJKemu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757494680/4tYabtTjM.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqjJKemu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757494680/4tYabtTjM.jpeg" alt="web projects.jpg"&gt;&lt;/a&gt;&lt;br&gt;
I used to think that just practicing how to code in a specific language was enough but with time I came to realize that I couldn't utilize most of the concepts I had already learned and even ended up forgetting them. &lt;/p&gt;

&lt;p&gt;One of the most overlooked realities by new programmers is that we don't learn to just know how to do something, but how to actually utilize it in projects. if you learn a concept and don't use it in any project then all you've managed to achieve is waste your time.&lt;/p&gt;

&lt;p&gt;To me, this has become a really amazing learning methodology because every time I learn something new, I immediately think of how I can integrate that feature in one of my projects, and by doing this, I get to even do more in-depth research on various ways it can be utilized hence truly understanding it. My advice;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strive to create real  &amp;amp; marketable projects. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-compare-yourself-with-others-run-your-own-race" class="anchor"&gt;
  &lt;/a&gt;
  4. Don't compare yourself with others - Run your own race;
&lt;/h2&gt;

&lt;p&gt;Have you ever heard of the saying "Hard work beats talent any day."? I even believe there's is a song about this. Anyway, I in no way suggest you don't admire other people's work, it's a good source of inspiration, just don't compare where you currently are and what you are capable of doing now to what others are because this is one of the sure ways of getting frustrated with your coding journey.&lt;/p&gt;

&lt;p&gt;Realize that even your mentors and role models didn't start where they are today. Don't believe me? Some of your mentors probably have documented their first projects or better yet, check their first youtube videos from their channels or even tweets and you'll be amazed at how far they have come. &lt;/p&gt;

&lt;p&gt;I personally had a tough time with this one. *I mean there he is talking about all he can comfortably do and has achieved and I'm here having a hard time even following his logic - this comes so easy for him- he must be very talented at this...........*Sorry, got a little bit distracted. &lt;/p&gt;

&lt;p&gt;The point is, we all have different capabilities when it comes to reasoning and learning and if you compare your speed with others you'll end up unsatisfied with your progress. Remember &lt;em&gt;there are no deadlines when it comes to learning,&lt;/em&gt; &lt;em&gt;Move on only when you've understood it not when it seems convenient.&lt;/em&gt;  My advice, follow the words of a writer by the name Uzoma Nnadi ; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Iron can only be destroyed by rust, and rust is a slow process which is caused by the hydrogen ion from water in the environment. Coat yourself against negative thoughts and be careful what you feed your mind because your mind is your greatest asset, make sure you are not using it against yourself.﻿”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#5track-amp-appreciate-your-progress" class="anchor"&gt;
  &lt;/a&gt;
  5.Track &amp;amp; appreciate your progress;
&lt;/h2&gt;

&lt;p&gt;I can not count the number of times I have given up on coding only to look back after some time at my unfinished projects and wonder wow did I really do that? The point is, take some time and look back to where you've come from. look at your first projects and you'll notice how far you've come along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9djvGWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757627368/HUcwwz3XN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9djvGWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757627368/HUcwwz3XN.jpeg" alt="progress.jpg"&gt;&lt;/a&gt;&lt;br&gt;
True, there may be still a lot you don't know, but believe you'll get there and keep working on it eventually you'll look back at what you've achieved and surprise yourself even. My advice; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember the journey of a thousand miles starts with one step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-know-your-tools" class="anchor"&gt;
  &lt;/a&gt;
  6. Know your tools;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLwXVo7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757783826/MPKz6RGGr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLwXVo7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607757783826/MPKz6RGGr.jpeg" alt="know your tools.jpg"&gt;&lt;/a&gt;&lt;br&gt;
How I wish I paid enough attention to what the tools I use are really capable of when I started, it would have saved me so much time. One of the things that get me every time is how powerful VsCode really is, which is my all-time, go-to code editor. &lt;/p&gt;

&lt;p&gt;Right now I can only speak of this tool but this point applies to every programming tool in your arsenal. if you are like me and use vs-code there is a series of videos by Burke Holland and Sarah Drasner you can find them  &lt;a href="https://www.vscodecandothat.com/"&gt;here&lt;/a&gt;  labeled vs-code can do that. Believe me, when I tell you this, many people so underutilize this tool. there are so many ways this tool makes your job easier, it'll make your head spin.&lt;/p&gt;

&lt;p&gt;Another very underutilized tool is  &lt;a href="https://codepen.io/cyrusCodes"&gt;codepen&lt;/a&gt;. One of the major problems this tool solved for me is the storage of code snippets. There are times I would work on sliders, buttons, and other snippets and did not intend to use them on a project until they are complete or even needed to practice and retain the small snippets of code and this tool is just what I needed.&lt;br&gt;
Others are just candy for programmers like  &lt;a href="https://github.com/cyrusCodes"&gt;Git &amp;amp; Github&lt;/a&gt;, which to be frank I'm still getting to really understand its power.     My advice; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Get to really know the tools in your arsenal, your career may depend on it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#7-take-a-break" class="anchor"&gt;
  &lt;/a&gt;
  7. Take a break;
&lt;/h2&gt;

&lt;p&gt;You would think this goes without saying or it's the easiest of all but apparently not. There are days I would code and learn six-seven hours straight only to have excruciating headaches and fatigue. Taking a break or breaks is very essential to develop your coding career because your health is a paramount factor in how far your career goes. &lt;/p&gt;

&lt;p&gt;The truth is, a human's attention and understanding really reduce after every 40-45 minutes of continued working on a particular item, and hence it's advisable to take short breaks of about 5 minutes. Come to think of it there are even applications that strive to improve your focus and concentration while working, my favorite being  &lt;a href="https://www.forestapp.cc/"&gt;Forest&lt;/a&gt;. I am sure there are others probably even more effective but I think it's a good habit to utilize one while working. Pay attention to the words of Buddha;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“To keep the body in good health is a duty…otherwise we shall not be able to keep the mind strong and clear.” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#8-get-other-hobbies" class="anchor"&gt;
  &lt;/a&gt;
  8. Get other hobbies;
&lt;/h2&gt;

&lt;p&gt;Have you ever asked someone what their hobbies are and they responded - coding? I know, as much as it's not a crime nor is it a bad thing it just sounds weird to me not sure why. I know most programmers are avid gamers which helps reduce the anxieties and stress brought by hours and days of bugs and debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAo5e2Ah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607765540905/X0YttIYn5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAo5e2Ah--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607765540905/X0YttIYn5.jpeg" alt="chess.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Personally, I am not so much into gaming, I wish I was but I'm more leaned towards Netflix or a nice book or two. Whatever you are into besides coding, keep it and protect it if you have to, it may be the only thing to keep you sane when going through algorithms, data structures, and debugging. Maybe I should try chess...Have you watched the  &lt;a href="https://www.youtube.com/watch?v=CDrieqwSdgI"&gt;Queen's Gambit&lt;/a&gt;? Maybe you should.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-participate-in-challenges" class="anchor"&gt;
  &lt;/a&gt;
  9. Participate in Challenges
&lt;/h2&gt;

&lt;p&gt;I haven't really indulged in this, but I can already tell I'm losing a lot by not participating. I acknowledge how powerful this can be especially in the tech world since collaboration and teamwork are not just words to throw around.&lt;/p&gt;

&lt;p&gt;Github encourages this fully as well as other challenges like #100daysofcodechallenge.  These challenges are meant to keep you on your toes when it comes to the ever-changing tech, learn and teach others as well as improve your coding skills.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10never-give-up" class="anchor"&gt;
  &lt;/a&gt;
  10.Never give up
&lt;/h2&gt;

&lt;p&gt;I can tell you this for free giving up is very easy all you have to do is stop. Stop learning, stop coding, stop building projects and in a few months, you'll remember nothing. Don't do this, sure it's difficult but if it were easy everyone would be doing it.&lt;/p&gt;

&lt;p&gt;If you give up the journey back where you are will be twice difficult than it already is, know why? it's not only because you'll be a bit older, wrinkled, and cranky, but technology waits for no Quitter. A Lot will have changed and it'll take you twice the time to learn all the new stuff.  Take the words of Jim Rohn to heart;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The worst thing one can do is not to try, to be aware of what one wants and not give in to it, to spend years in silent hurt wondering if something could have materialized - never knowing.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;# Conclusion&lt;br&gt;
To conclude, I'd also think getting a mentor, specializing in a particular technology, joining Linkedin, and teaching what one knows would speed up your career growth but what do I know, I'm working on half of the list and have quit more times than I can count but since I'm writing about it and sharing my code and experience, it seems that's all behind me and will make quite a story when I get the title of a mentor or is it sensei.&lt;/p&gt;

&lt;p&gt;I'd have had a lot more to say but apparently, people can tolerate a chatbox for so long and I've got to get this contact form working. Oh Follow me on  &lt;a href="https://twitter.com/cyrusCodes"&gt;Twitter&lt;/a&gt;  my account looks like an abandoned canoe in the middle of an ocean plus I'd really appreciate it. ciao- until the next post.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>cyruscodes</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
