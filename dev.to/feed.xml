<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I blogged every single day for a year</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 19 Mar 2021 06:16:38 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/i-blogged-every-single-day-for-a-year-21df</link>
      <guid>https://dev.to/dailydevtips1/i-blogged-every-single-day-for-a-year-21df</guid>
      <description>&lt;p&gt;It's been 365 days since I started my blogging journey, and this will be article 365.&lt;/p&gt;

&lt;p&gt;I know many of you want to know my secret, and the truth is there isn't one.&lt;br&gt;
You don't need to be a magician, wizard, or mage to do anything with discipline.&lt;/p&gt;

&lt;p&gt;It's all about making time relative and making an effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-story" class="anchor"&gt;
  &lt;/a&gt;
  Background story
&lt;/h2&gt;

&lt;p&gt;Of course, 2020 was a horrible year in some way or another. People lost jobs, they lost people dear to them, they lost freedom, and much more.&lt;/p&gt;

&lt;p&gt;People also gained opportunities, working from home, spending more time with loved ones, not sitting in traffic for hours.&lt;/p&gt;

&lt;p&gt;The covid situation is anything but good, and there are many downsides.&lt;br&gt;
But for me, I lost about an hour of travel time every day, which I considered an opportunity.&lt;/p&gt;

&lt;p&gt;And you know what? I decided to use that time to start something new, a blog that is!&lt;/p&gt;

&lt;p&gt;It's really as simple as making time relative and using it optimally.&lt;br&gt;
Before I did this same trick with volunteer work.&lt;br&gt;
I decided watching TV as much as I did was pointless.&lt;br&gt;&lt;br&gt;
I could easily stop watching TV for 3 hours a week, which I dedicated to a volunteer job.&lt;/p&gt;

&lt;p&gt;In the end, you don't even notice these changes in any negative way. More often, they will spark motivation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-why-blogging" class="anchor"&gt;
  &lt;/a&gt;
  So why blogging?
&lt;/h2&gt;

&lt;p&gt;I started a lifestyle blog in 2018, but it never really took off. The articles were long and took forever to write.&lt;br&gt;
I did have much passion for writing them since they were things I enjoyed.&lt;/p&gt;

&lt;p&gt;However, it just didn't satisfy me enough.&lt;br&gt;
With his came some imposter syndrome about not being a good enough developer and not getting enough time to improve me.&lt;/p&gt;

&lt;p&gt;I thought long about this and decided why not combine learning and improving by writing it down?&lt;br&gt;
I've always been a person who remembers things best by writing them down.&lt;br&gt;
And so Daily Dev Tips was born.&lt;/p&gt;

&lt;p&gt;I write a single article every day. These articles cover everyday topics I face as a developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-did-you-achieve-in-a-year" class="anchor"&gt;
  &lt;/a&gt;
  What did you achieve in a year?
&lt;/h2&gt;

&lt;p&gt;A year goes by quick. It almost feels like not much has happened.&lt;br&gt;
But thinking about it, so many things happened!&lt;/p&gt;

&lt;p&gt;Not just in a blogging field, but in general.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I decided to spend more time in a place I feel my best&lt;/li&gt;
&lt;li&gt;Got a super fantastic dog&lt;/li&gt;
&lt;li&gt;The woman I loved said Yes to my proposal&lt;/li&gt;
&lt;li&gt;I got a new job in a pandemic&lt;/li&gt;
&lt;li&gt;I achieved financial freedom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And as far as the blog goes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;365 articles&lt;/li&gt;
&lt;li&gt;3220 &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt; fans&lt;/li&gt;
&lt;li&gt;570 subscribers to my &lt;a href="https://daily-dev-tips.com/"&gt;daily dev tips newsletter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;824 &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; followers&lt;/li&gt;
&lt;li&gt;Spoke at the &lt;a href="https://hashnode.com/bootcamp/batch-2"&gt;Hashnode event&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;51K+ unique users with a whopping 90K pageviews!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was a superb year, heck no traveling, but many good things happened, and I'm sure it will come.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-articles-are-you-most-proud-of" class="anchor"&gt;
  &lt;/a&gt;
  Which articles are you most proud of
&lt;/h2&gt;

&lt;p&gt;I'll sum up my favorite articles from last year.&lt;br&gt;
These are by far the most viewed and loved articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-frosted-glass-credit-card/"&gt;CSS Frosted glass credit card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-modal-pop-up/"&gt;Vanilla JavaScript Modal Popup Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/javascript-mouse-tracking-eyes-%F0%9F%91%80/"&gt;JavaScript Mouse Tracking Eyes üëÄ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-truncate-text-with-ellipsis/"&gt;CSS Truncate Text With Ellipsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/goodbye-comments-welcome-webmentions-%F0%9F%99%8B%F0%9F%8F%BC%E2%80%8D%E2%99%82%EF%B8%8F/"&gt;Goodbye comments, welcome Webmentions üôãüèº‚Äç‚ôÇÔ∏è&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-check-if-date-is-in-the-past/"&gt;Vanilla JavaScript Check if Date is in the Past&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/styling-scrollbars-with-css/"&gt;CSS for the Scrollbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/vanilla-javascript-event-listener-on-multiple-elements/"&gt;Vanilla JS add event listener on multiple elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/top-10-chrome-extensions-for-developers-%F0%9F%91%80/"&gt;Top 10 Chrome extensions for developers üëÄ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/making-a-footer-stick-to-the-bottom-with-css/"&gt;Making a footer stick to the bottom with CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;This is a question I truly don't know. To be honest, doing this daily is quite strenuous, not particularly during the week (remember that free time?).&lt;/p&gt;

&lt;p&gt;But the weekends can be killing, not just for me, but also for my partner.&lt;/p&gt;

&lt;p&gt;So I might have to drop to weekdays only, and I'm sure no-one will really be sad about that.&lt;/p&gt;

&lt;p&gt;I tend to keep up the blog, grow even bigger and help more people to become better developers themselves.&lt;/p&gt;

&lt;p&gt;It would also be super cool to talk at some events, so who knows?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;From the bottom of my heart, thank you!&lt;br&gt;
Yes, you, the reader of this article, are a part of this now.&lt;br&gt;
By reading my articles, sharing them, liking them, you motivate me to continue this journey.&lt;/p&gt;

&lt;p&gt;To the stars and beyond!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>writing</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>HTML Cheat Sheet üî• - The Most Useful HTML Tags üöÄ</title>
      <author>Garvit Motwani</author>
      <pubDate>Fri, 19 Mar 2021 04:22:49 +0000</pubDate>
      <link>https://dev.to/garvitmotwani/html-cheat-sheet-the-most-useful-html-commands-3ha5</link>
      <guid>https://dev.to/garvitmotwani/html-cheat-sheet-the-most-useful-html-commands-3ha5</guid>
      <description>&lt;p&gt;Hey Devs, This is the most complete and well-structured HTML cheatsheet you can find online!!&lt;/p&gt;

&lt;p&gt;So let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-tags" class="anchor"&gt;
  &lt;/a&gt;
  Basic Tags
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt; &amp;lt;/html&amp;gt;&lt;/code&gt; - Creates an HTML document&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt; &amp;lt;/head&amp;gt;&lt;/code&gt; - Sets off the title &amp;amp; other info that isn't displayed&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body&amp;gt; &amp;lt;/body&amp;gt;&lt;/code&gt; - Sets off the visible portion of the document&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;title&amp;gt; &amp;lt;/title&amp;gt;&lt;/code&gt; - Puts name of the document in the title bar; when&lt;br&gt;
bookmarking pages, this is what is bookmarked&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#formatting" class="anchor"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;&lt;/code&gt; - Creates a new paragraph&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; - Inserts a line break (carriage return)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt; &amp;lt;/blockquote&amp;gt;&lt;/code&gt; - Puts content in a quote - indents text from both sides&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt; &amp;lt;/div&amp;gt;&lt;/code&gt; - Used to format block content with CSS&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;span&amp;gt; &amp;lt;/span&amp;gt;&lt;/code&gt; Used to format inline content with CSS&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#body-attributes" class="anchor"&gt;
  &lt;/a&gt;
  Body attributes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body bgcolor="?"&amp;gt;&lt;/code&gt; - Sets background color, using a name or hex value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body text="?"&amp;gt;&lt;/code&gt; - Sets text color, using name or hex value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body link="?"&amp;gt;&lt;/code&gt; - Sets color of links, using name or hex value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body vlink="?"&amp;gt;&lt;/code&gt; - Sets the color of visited links, using a name or hex value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;body alink="?"&amp;gt;&lt;/code&gt; - Sets the color of active links (while mouse-clicking)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lists" class="anchor"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ul&amp;gt; &amp;lt;/ul&amp;gt;&lt;/code&gt; - Creates an unordered list&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ol start=?&amp;gt; &amp;lt;/ol&amp;gt;&lt;/code&gt; - Creates an ordered list (start=xx, where xx is a counting number)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;li&amp;gt; &amp;lt;/li&amp;gt;&lt;/code&gt; - Encompasses each list item&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;dl&amp;gt; &amp;lt;/dl&amp;gt;&lt;/code&gt; - Creates a definition list&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt; - Precedes each definition term&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt; - Precedes each definition&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-tags" class="anchor"&gt;
  &lt;/a&gt;
  Text Tags
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;pre&amp;gt; &amp;lt;/pre&amp;gt;&lt;/code&gt; - Creates preformatted text&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;h1&amp;gt; &amp;lt;/h1&amp;gt;&lt;/code&gt; --&amp;gt; &lt;code&gt;&amp;lt;h6&amp;gt; &amp;lt;/h6&amp;gt;&lt;/code&gt; - Creates headlines -- H1=largest, H6=smallest&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;&lt;/code&gt; - Creates bold text (should use &lt;strong&gt; instead)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;i&amp;gt; &amp;lt;/i&amp;gt;&lt;/code&gt; - Creates italicized text (should use &lt;em&gt; instead)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tt&amp;gt; &amp;lt;/tt&amp;gt;&lt;/code&gt; -  Creates typewriter-style text&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;code&amp;gt; &amp;lt;/code&amp;gt;&lt;/code&gt; - Used to define source code, usually monospace&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;cite&amp;gt; &amp;lt;/cite&amp;gt;&lt;/code&gt; - Creates a citation, usually processed in italics&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;address&amp;gt; &amp;lt;/address&amp;gt;&lt;/code&gt; - Creates address section, usually processed in italics&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;em&amp;gt; &amp;lt;/em&amp;gt;&lt;/code&gt; - Emphasizes a word (usually processed in italics)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;strong&amp;gt; &amp;lt;/strong&amp;gt;&lt;/code&gt; - Emphasizes a word (usually processed in bold)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;font size=?&amp;gt; &amp;lt;/font&amp;gt;&lt;/code&gt; - Sets size of font - 1 to 7 (should use CSS instead)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;font color=?&amp;gt; &amp;lt;/font&amp;gt;&lt;/code&gt; - Sets font color (should use CSS instead)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;font face=?&amp;gt; &amp;lt;/font&amp;gt;&lt;/code&gt; - Defines the font used (should use CSS instead)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#graphical-elements" class="anchor"&gt;
  &lt;/a&gt;
  Graphical elements
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; - Inserts a horizontal rule&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;hr size=?&amp;gt;&lt;/code&gt; - Sets size (height) of horizontal rule&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;hr width=?&amp;gt;&lt;/code&gt; - Sets width of rule (as a % or absolute pixel length)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;hr noshade&amp;gt;&lt;/code&gt; - Creates a horizontal rule without a shadow&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" /&amp;gt;&lt;/code&gt; - Adds image; it is a separate file located at the URL&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" align=?&amp;gt;&lt;/code&gt; - Aligns image left/right/center/bottom/top/middle (use CSS)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" border=?&amp;gt;&lt;/code&gt; - Sets size of border surrounding image (use CSS)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" height=?&amp;gt;&lt;/code&gt; - Sets height of image, in pixels&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" width=?&amp;gt;&lt;/code&gt; - Sets width of image, in pixels&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="URL" alt=?&amp;gt;&lt;/code&gt; - Sets the alternate text for browsers that can't process images (required by the ADA)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href="URL"&amp;gt;clickable text&amp;lt;/a&amp;gt;&lt;/code&gt; - Creates a hyperlink to a Uniform Resource Locator&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href="mailto:EMAIL_ADDRESS"&amp;gt;clickable text&amp;lt;/a&amp;gt;&lt;/code&gt; - Creates a hyperlink to an email address&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a name="NAME"&amp;gt;&lt;/code&gt; - Creates a target location within a document&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a href="#NAME"&amp;gt;clickable text&amp;lt;/a&amp;gt;&lt;/code&gt; - Creates a link to that target location&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#forms" class="anchor"&gt;
  &lt;/a&gt;
  Forms
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt; &amp;lt;/form&amp;gt;&lt;/code&gt; - Defines a form&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select multiple name=? size=?&amp;gt; &amp;lt;/select&amp;gt;&lt;/code&gt; - Creates a scrolling menu. Size sets the number of menu items visible before user needs to scroll.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select name=?&amp;gt; &amp;lt;/select&amp;gt;&lt;/code&gt; - Creates a pulldown menu&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; - Sets off each menu item&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;textarea name=? cols="x" rows="y"&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt; - Creates a text box area. Columns set the width; rows set the height.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="checkbox" name=? value=?&amp;gt;&lt;/code&gt; - Creates a checkbox.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="checkbox" name=? value=? checked&amp;gt;&lt;/code&gt; - Creates a checkbox which is pre-checked.`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="radio" name=? value=?&amp;gt;&lt;/code&gt; - Creates a radio button.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="radio" name=? value=? checked&amp;gt;&lt;/code&gt; - Creates a radio button which is pre-checked.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="text" name=? size=?&amp;gt;&lt;/code&gt; - Creates a one-line text area. Size sets length, in characters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="submit" value=?&amp;gt;&lt;/code&gt; - Creates a submit button. Value sets the text in the submit button.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="image" name=? src=? border=? alt=?&amp;gt;&lt;/code&gt; - Creates a submit button using an image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="reset"&amp;gt;&lt;/code&gt; - Creates a reset button&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html5-input-tag-attributes" class="anchor"&gt;
  &lt;/a&gt;
  HTML5 input tag attributes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="email" name=?&amp;gt;&lt;/code&gt; - Sets a single-line textbox for email addresses&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="url" name=?&amp;gt;&lt;/code&gt; - Sets a single-line textbox for URLs&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="number" name=?&amp;gt;&lt;/code&gt; - Sets a single-line textbox for a number&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="range" name=?&amp;gt;&lt;/code&gt; - Sets a single-line text box for a range of numbers&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="date/month/week/time" name=?&amp;gt;&lt;/code&gt; - Sets a single-line text box with a calendar showing the date/month/week/time&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="search" name=?&amp;gt;&lt;/code&gt; - Sets a single-line text box for searching&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;input type="color" name=?&amp;gt;&lt;/code&gt; - Sets a single-line text box for picking a color &lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tables" class="anchor"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt; &amp;lt;/table&amp;gt;&lt;/code&gt; - Creates a table&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt; &amp;lt;/tr&amp;gt;&lt;/code&gt; - Sets off each row in a table&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt; &amp;lt;/td&amp;gt;&lt;/code&gt; - Sets off each cell in a row&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;th&amp;gt; &amp;lt;/th&amp;gt;&lt;/code&gt; - Sets off the table header (a normal cell with bold, centered text)&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-attributes" class="anchor"&gt;
  &lt;/a&gt;
  Table attributes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table border=?&amp;gt;&lt;/code&gt; - Sets the width of the border around table cells&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table cellspacing=?&amp;gt;&lt;/code&gt; - Sets the amount of space between table cells&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table cellpadding=?&amp;gt;&lt;/code&gt; - Sets the amount of space between a cell's border and its contents&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table width=?&amp;gt;&lt;/code&gt; - Sets the width of the table in pixels or as a percentage&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr align=?&amp;gt;&lt;/code&gt; - Sets alignment for cells within the row (left/center/right)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td align=?&amp;gt;&lt;/code&gt; - Sets alignment for cells (left/center/right)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr valign=?&amp;gt;&lt;/code&gt; - Sets vertical alignment for cells within the row (top/middle/bottom)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td valign=?&amp;gt;&lt;/code&gt; - Sets vertical alignment for cell (top/middle/bottom)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td rowspan=?&amp;gt;&lt;/code&gt; - Sets number of rows a cell should span (default=1)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td colspan=?&amp;gt;&lt;/code&gt; - Sets the number of columns a cell should span&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td nowrap&amp;gt;&lt;/code&gt; - Prevents lines within a cell from being broken to fit&lt;/p&gt;



&lt;p&gt;Also, Check Out &lt;a class="comment-mentioned-user" href="https://dev.to/devlorenzo"&gt;@devlorenzo&lt;/a&gt;
 article on this topic: &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QtgKvHIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N0bOH9Ja--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/3b1e2909-e87b-4fc7-b817-0673184568b0.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devlorenzo/html-tags-cheat-sheet-pip" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The ultimate HTML Tags Cheat Sheet üî•üöÄ&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo „Éª Feb 21 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;p&gt;Please smash that like button and share this article with others :)&lt;/p&gt;

&lt;p&gt;Don't Forget To Follow Me On &lt;a href="https://twittercom/GarvitMotwamo"&gt;Twitter&lt;/a&gt; and &lt;a class="comment-mentioned-user" href="https://dev.to/garvitmotwani"&gt;@garvitmotwani&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>cheatsheet</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>When do you think it‚Äôs the right time to create your own coding language? Answer for the chance to be featured on our podcast!</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 18 Mar 2021 20:49:20 +0000</pubDate>
      <link>https://dev.to/devteam/when-do-you-think-it-s-the-right-time-to-create-your-own-coding-language-answer-for-the-chance-to-be-featured-on-our-podcast-3h7</link>
      <guid>https://dev.to/devteam/when-do-you-think-it-s-the-right-time-to-create-your-own-coding-language-answer-for-the-chance-to-be-featured-on-our-podcast-3h7</guid>
      <description>&lt;p&gt;The &lt;a href="https://dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners ‚Äî and we like to feature the actual &lt;em&gt;voices&lt;/em&gt; from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#when-do-you-think-its-the-right-time-to-create-your-own-coding-language" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;‚ÄúWhen do you think it‚Äôs the right time to create your own coding language?‚Äù&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message üìû&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; üéô&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) üó£&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Please send in your recordings by Wednesday, March 24th at Midnight, ET (9 PM PT, 5 AM UTC)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Voice recordings will be given priority placement&lt;/strong&gt;&lt;/em&gt; üòâ &lt;/p&gt;




&lt;p&gt;Plus, don't forget to check out the most recent episode of DevDiscuss:&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s3-e6-we-bust-some-myths-about-linux"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S3:E6 - We Bust Some Myths About Linux&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s3-e6-we-bust-some-myths-about-linux" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s3-e6-we-bust-some-myths-about-linux" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s3-e6-we-bust-some-myths-about-linux" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s3-e6-we-bust-some-myths-about-linux" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s3-e6-we-bust-some-myths-about-linux"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s3-e6-we-bust-some-myths-about-linux"&gt;
      &lt;img id="episode-profile-image" alt="S3:E6 - We Bust Some Myths About Linux" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Always double-check what you copy from websites</title>
      <author>Ruud Schro√´n</author>
      <pubDate>Thu, 18 Mar 2021 20:30:02 +0000</pubDate>
      <link>https://dev.to/ruudje/always-double-check-what-you-copy-from-websites-2kg3</link>
      <guid>https://dev.to/ruudje/always-double-check-what-you-copy-from-websites-2kg3</guid>
      <description>&lt;p&gt;Let's say you are following a guide on the internet and it provides a command for installing a package.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install package&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Without a second thought, you copy the command and quickly paste it in your terminal. Now imagine there was a different command in your clipboard, like this one:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo rm -rf /&lt;/code&gt; &lt;strong&gt;*do not actually run this command!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This command forcefully and recursively deletes all your files and folders starting from the root directory. If you paste text containing a newline character in your terminal, it will automatically be executed. If your terminal has elevated permissions, because you already executed a sudo command in the same session, it will not ask for your password.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Goodbye precious data!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-this-happen" class="anchor"&gt;
  &lt;/a&gt;
  How can this happen?
&lt;/h2&gt;

&lt;p&gt;There are three ways how websites can trick you into copying something else:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By using the &lt;em&gt;execCommand&lt;/em&gt; method from the Document interface&lt;/li&gt;
&lt;li&gt;By changing the clipboard data within the &lt;em&gt;copy&lt;/em&gt; event&lt;/li&gt;
&lt;li&gt;By placing hidden and/or offscreen text within the visible text&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-execcommand-method" class="anchor"&gt;
  &lt;/a&gt;
  The execCommand method
&lt;/h3&gt;

&lt;p&gt;If you've ever copied a command from a website, you may have noticed that some offer a button that, once clicked, copies the command for you.&lt;/p&gt;

&lt;p&gt;These buttons use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand"&gt;execCommand&lt;/a&gt; method from the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;Document&lt;/a&gt; interface. It is deprecated and can be removed at any time, but for now it is still working.&lt;/p&gt;

&lt;p&gt;As the name implies, it allows you to execute a command. One of the commands you can execute is &lt;code&gt;copy&lt;/code&gt;. By executing this command you can &lt;em&gt;copy&lt;/em&gt; the current selection to the clipboard.&lt;/p&gt;

&lt;p&gt;An example is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hiddenInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hiddenInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Text that should be copied&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;hiddenInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The tricky part is that malicious websites can have that button copy something completely different from what you are expecting.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So if you are on a website that you don't trust and you use one of these buttons, always double check what is currently in your clipboard by pasting it in a safe place, Notepad for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-clipboard-data-within-the-copy-event" class="anchor"&gt;
  &lt;/a&gt;
  Changing the clipboard data within the copy event
&lt;/h3&gt;

&lt;p&gt;Whenever you copy something using &lt;code&gt;CTRL + C&lt;/code&gt; or the context menu, a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event"&gt;copy event&lt;/a&gt; is fired. A handler for this event can modify the clipboard contents using the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleCopyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ClipboardEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Set the clipboard contents to a string of your choice.&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboardData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sudo rm -rf /&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// DON'T RUN THIS COMMAND&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Prevent the default action from overriding the data&lt;/span&gt;
  &lt;span class="c1"&gt;// we just set.&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code should be self-explanatory but if you want a more detailed explanation I recommend reading &lt;a href="https://medium.com/javascript-in-plain-english/why-you-should-never-rashly-copy-commands-from-websites-4ae476441530"&gt;Stop Rashly Copying Commands From Websites&lt;/a&gt; by Louis Petrik, where I originally read about this exploit. It also includes an example and a link to a &lt;a href="https://github.com/roedesh/copyguard"&gt;browser extension&lt;/a&gt; that I have created. More on that in a minute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#placing-hidden-andor-offscreen-text-within-the-visible-text" class="anchor"&gt;
  &lt;/a&gt;
  Placing hidden and/or offscreen text within the visible text
&lt;/h3&gt;

&lt;p&gt;When you select text on a website it becomes highlighted. You would expect that the highlighted part is exactly what you are going to copy.&lt;/p&gt;

&lt;p&gt;The problem is that, in some cases, invisible or offscreen text will also be part of your selection, even when it's not highlighted.&lt;/p&gt;

&lt;p&gt;Some examples that hide text but still allow it to be selected are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;font-size: 0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Moving text offscreen with absolute or fixed positioning&lt;/li&gt;
&lt;li&gt;Using absolute or fixed positioning in combination with &lt;code&gt;transform: scale(0)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just to name a few.&lt;/p&gt;

&lt;p&gt;There is an example that &lt;a href="https://thejh.net/misc/website-terminal-copy-paste"&gt;demonstrates this trick&lt;/a&gt;. The commands that you see there contain a &lt;code&gt;span&lt;/code&gt; that is moved offscreen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-protect-yourself" class="anchor"&gt;
  &lt;/a&gt;
  How to protect yourself?
&lt;/h2&gt;

&lt;p&gt;A good practice is to always double-check what is in your clipboard, by pasting it in a safe environment first. But what if your browser could warn you when your clipboard data is altered? How about a browser extension?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-copy-guard" class="anchor"&gt;
  &lt;/a&gt;
  Meet Copy Guard
&lt;/h3&gt;

&lt;p&gt;I have created a simple browser extension that does exactly that! It is called &lt;strong&gt;Copy Guard&lt;/strong&gt; and its source code can be found on &lt;a href="https://github.com/roedesh/copyguard"&gt;my GitHub&lt;/a&gt;. By using my extension you can let your browser warn you when a website is using the second or third method.&lt;/p&gt;

&lt;p&gt;It injects a script which listens to the copy event. Whenever you copy something using CTRL+C or the context menu, it takes your current text selection and compares it to the data that is placed in your clipboard. Aside from that, it also checks if your text selection contains any hidden or offscreen elements.&lt;/p&gt;

&lt;p&gt;Available for &lt;a href="https://chrome.google.com/webstore/detail/copy-guard/kobgknfkonpcnijbmjpepfonpnkeefij"&gt;Chrome&lt;/a&gt;, &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/copy-guard/"&gt;Firefox&lt;/a&gt; and &lt;a href="https://microsoftedge.microsoft.com/addons/detail/copy-guard/nkdddmepblpmknbobcpebakjehldaebj"&gt;Edge&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-note-on-cryptocurrency" class="anchor"&gt;
  &lt;/a&gt;
  A note on cryptocurrency
&lt;/h2&gt;

&lt;p&gt;When I posted my browser extension on Reddit, I was told that stuff like this happens within the crypto community as well, which makes perfect sense. A website could have you copy a totally different wallet address. If you were to send your precious crypto to this address, it could be lost forever.&lt;/p&gt;

&lt;p&gt;Something similar happened to a &lt;a href="https://www.reddit.com/r/CryptoCurrency/comments/igt0g6/warningplease_guys_be_extremely_careful/"&gt;Reddit user&lt;/a&gt; once. Although this particular user probably had malware on their computer, it could also happen on the web, without any malware.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are multiple ways how websites can trick you into copying something different from what you expect.&lt;/p&gt;

&lt;p&gt;Always double-check your clipboard. My browser extension can at least warn you when something is fishy, but a good practice is to paste your selection in a safe environment first, before you paste it in your terminal.&lt;/p&gt;

&lt;p&gt;At least do this for websites you don't trust.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>security</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Measuring Successful Documentation</title>
      <author>Amara Graham</author>
      <pubDate>Thu, 18 Mar 2021 20:20:52 +0000</pubDate>
      <link>https://dev.to/missamarakay/measuring-successful-documentation-3hc8</link>
      <guid>https://dev.to/missamarakay/measuring-successful-documentation-3hc8</guid>
      <description>&lt;p&gt;"Yes, but how do you &lt;em&gt;measure&lt;/em&gt; success?"&lt;/p&gt;

&lt;p&gt;This is easily the most common phrase thrown around, not just in Developer Relations or Developer Experience, but in this agile world we live in today. The fact is, you can be really busy and, unfortunately, not deliver any real, measurable business value. This is typically a waste of your skills and a problem for your employer. No one wins.&lt;/p&gt;

&lt;p&gt;Let's think about Developer Experience, which for the purpose of this post is roughly all things &lt;em&gt;enabling developers&lt;/em&gt;. If the documentation exists, is well written, is used by developers, isn't that enough to say it's successful? Maybe it doesn't even have to be well written, it just needs to exist. If it's used by developers, isn't that successful? &lt;/p&gt;

&lt;p&gt;Depending on your goals, sure, that may be successful. Having a single, unique, non-employee pageview may meet your criteria for success. Someone looked at it! Someone is enabled! We've done it! Success, in this case, is really just proving it is live. &lt;/p&gt;

&lt;p&gt;This is enablement at its most basic, superficial sense. You have documentation and someone outside of your company can see it. But I highly doubt the person who asked this question is going to find this an acceptable answer. And long term, this shouldn't be an acceptable answer for you either!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-my-goal" class="anchor"&gt;
  &lt;/a&gt;
  What's my goal?
&lt;/h2&gt;

&lt;p&gt;As I implied above, my goal with documentation is squarely in enablement.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-BggmXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305986664381247494/RH5n-NVn_normal.jpg" alt="Amara Graham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amara Graham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/missamarakay"&gt;@missamarakay&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/ASpittel"&gt;@ASpittel&lt;/a&gt; Success to me is going to be enablement which is harder to measure. &lt;br&gt;&lt;br&gt;Internally I want to see the "how do I" type support questions we can answer in docs drop. I want the feedback friction from consultants to drop. I want the docs experience to be so delightful no one complains.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:48 PM - 18 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1372560560865341441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1372560560865341441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1372560560865341441" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Your first step is to admit to pretty much anyone and everyone, including yourself, that this is hard. You will need to iterate based on your community, your company's goals, and maybe even your industry. &lt;/p&gt;

&lt;p&gt;The better you know your community, the better you can determine what is measurable. Copy-paste, cookie-cutter metrics will not help you as much as they will hurt you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-measure" class="anchor"&gt;
  &lt;/a&gt;
  What do I measure?
&lt;/h2&gt;

&lt;p&gt;I want my documentation to enable my developer community, existing enterprise customers, and my internal coworkers to get the information they need efficiently and delightfully.&lt;/p&gt;

&lt;p&gt;This means I'm going to focus my success metrics around these topics and areas:&lt;/p&gt;

&lt;p&gt;External &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vanity metrics (pageviews, bounce, landing pages)&lt;/li&gt;
&lt;li&gt;Engagement metrics (star ratings, comments)&lt;/li&gt;
&lt;li&gt;Zero search results, search term keywords (comment if you want to see my thoughts on this in a future post) &lt;/li&gt;
&lt;li&gt;Percent of content updated per release, per quarter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Internal&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Partnering with tech support to decrease the number of 1-touch, "how do I" questions&lt;/li&gt;
&lt;li&gt;Partnering with consulting, customer success, field ops, etc. to incorporate UX-type feedback into docs experience (improve findability, searchability)&lt;/li&gt;
&lt;li&gt;Partnering with product management on success metrics for product/project&lt;/li&gt;
&lt;li&gt;Ability to execute doc-initiatives (gardening, re-platforming, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-with-no-context-is-dangerous" class="anchor"&gt;
  &lt;/a&gt;
  Data with no context is dangerous!
&lt;/h2&gt;

&lt;p&gt;All of this comes with a big asterisk. Simply producing this data without context could lead to some thrash.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-BggmXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1305986664381247494/RH5n-NVn_normal.jpg" alt="Amara Graham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amara Graham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/missamarakay"&gt;@missamarakay&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/ASpittel"&gt;@ASpittel&lt;/a&gt; Vanity metrics are a good gut check, but remember for docs pageviews can be consistent per page and bounce may be high for things like glossary and low for things like conceptual content. &lt;br&gt;&lt;br&gt;Having an engagement metric like comments or star rating can be helpful too.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:45 PM - 18 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1372559915571683330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1372559915571683330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1372559915571683330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#vanity-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Vanity metrics
&lt;/h3&gt;

&lt;p&gt;Vanity metrics are a great gut check. Is your documentation live? Are your top-performing pages maintaining their standing? &lt;/p&gt;

&lt;p&gt;Depending on the kind of documentation, these vanity metrics may be a little different from marketing pages. For example, glossary terms will probably have a low "time on page" and a high bounce. Conceptual pieces may have a higher "time on page" and perform similarly to landing page content. Both are functioning as expected.&lt;/p&gt;

&lt;p&gt;At a previous company, our most consistent "lowest-performing page" was our uninstall instructions. This is also functioning as expected. The uninstall experience was so intuitive (and so unnecessary) that this was just an article for due diligence but answered the question without having to install it - "can I uninstall this software easily?".&lt;/p&gt;

&lt;p&gt;Some other things to look at - what are the exit pages? What are the entrance pages? Are these what you expect? Adjustments to these lists can be great indicators of a successful documentation initiative. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#engagement-metrics" class="anchor"&gt;
  &lt;/a&gt;
  Engagement metrics
&lt;/h3&gt;

&lt;p&gt;Silent developers are happy developers or they are so confused they can't articulate what they need to get out of their confusion. This is where it comes back to knowing your community.&lt;/p&gt;

&lt;p&gt;Certain developers and developer personas are known for quietly struggling through your documentation and others are going to make a big scene about it across social media. &lt;/p&gt;

&lt;p&gt;Your developers may be a chatty group, willing to leave comments, questions, and concerns on your docs, forums, or with their field ops engagement. &lt;/p&gt;

&lt;p&gt;Unfortunately, comment spaces on docs can turn into noise. To me, any comment shows engagement even if the engagement is "this is broken". They found the documentation article, found a way to engage, and potentially provided an opportunity to review the content for clarity, at a minimum. &lt;/p&gt;

&lt;p&gt;Of course, more informative comments will inevitably give us more to go on, but that's for another blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internal-partners" class="anchor"&gt;
  &lt;/a&gt;
  Internal partners
&lt;/h2&gt;

&lt;p&gt;You'll notice I wasn't super clear about measurements in my breakdown of internal partners. This was intentional. &lt;/p&gt;

&lt;p&gt;You can share certain success metrics, for instance, lowering the number of tickets for 1-touch, "how do I" support requests. These create noise, but they also highlight pretty clear patterns in opportunities. By partnering with tech support, you can see these patterns (hopefully in the form of reports) create or modify existing documentation, and monitor the number of 1-touch tickets that come in on that topic, which should theoretically go down.&lt;/p&gt;

&lt;p&gt;Now it's super important to partner here because depending on how support is measured, your work to successfully enable developers with better, clearer docs (that reduce 1-touch tickets) may impact not just the amount of tickets they get, but the rate at which they close those tickets. 1-touch tickets are fast to close but offer low business value. Removing 1-touch tickets free up cycles the technical support reps can spend on higher touch, higher complexity tickets, higher business value tickets. &lt;/p&gt;

&lt;p&gt;Similarly, partnering with other externally facing teams to identify gaps in potential documentation is crucial to determine if there are any existing assets or material that can be reused or if not having this information publicly available is intentional. Perhaps this information is gated by an enterprise license or specific contract. Don't leak your special sauce recipe! &lt;/p&gt;

&lt;p&gt;All in all, accidentally screwing an internal partner in the name of your initiative's success does not win friends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#success-is-a-healthy-team" class="anchor"&gt;
  &lt;/a&gt;
  Success is a healthy team
&lt;/h2&gt;

&lt;p&gt;What is often lost in metrics that work for other teams or projects is that, just like in engineering, documentation has technical debt. Documentation corpus gardening in the form of reviewing, updating, archiving, and other honing activities is critical for the health of your docs. Whether your documentation is maintained by your product engineers or a dedicated team of technical writers, you need to factor in some time to burn down this doc tech debt. &lt;/p&gt;

&lt;p&gt;Successful documentation doesn't mean the entire corpus is touched every release. With older, larger software platforms that simply isn't scalable. Measuring an initial baseline and setting a target from there is one way to see if your team is able to not just document features, but also tend to the gardening activities too. &lt;/p&gt;

&lt;p&gt;I look at this as having an external and internal component. Externally, you'll see how many pages are updated for the new version or release maybe in a PR, release notes, or by the number of "updated" badges on your documentation. Internally, if you are maintaining a backlog, how many of those documentation-based backlog items were worked? Or how many were intended to be worked but were missed to support new feature documentation instead? &lt;/p&gt;

&lt;p&gt;An undocumented or under-documented feature is only as good as a missing feature, and some documentation maintainers really internalize this. Balancing documenting new features and taking care of your documentation garden is critical to the health of your overall documentation corpus and team. Your documentation isn't successful if you are churning through burned-out maintainers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-this-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping this up
&lt;/h2&gt;

&lt;p&gt;There is more to this, but this is a great mindset to start with. My biggest caution is leaning too hard into the vanity metrics. Pageviews are good, but they tell your SEO story more than anything else. Great for awareness, possibly not as good for enablement, but it ultimately depends on your community, your company, and your goals.&lt;/p&gt;

&lt;p&gt;I'm interested to hear from folks if this resonates. Given that documentation at Camunda is a joint effort between product engineering (writers) and Developer Experience (strategy) the success metrics are tied to the goal of enablement.&lt;/p&gt;

&lt;p&gt;How do you measure success for documentation? &lt;/p&gt;




&lt;p&gt;Big shoutout to &lt;a href="https://dev.to/aspittel"&gt;Ali&lt;/a&gt; for this tweet that inspired my responses. Highly recommend reading through the responses there too.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dulsth9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355765547913392129/lyMq-2mY_normal.jpg" alt="Ali Spittel üêû profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ali Spittel üêû
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/aspittel"&gt;@aspittel&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hey friends who work on documentation!&lt;br&gt;&lt;br&gt;Does your team track any metrics to see how successful your documentation is? If so, what are those metrics?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:36 PM - 18 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1372557611854364672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1372557611854364672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1372557611854364672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@sernarial?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;patricia serna&lt;/a&gt; on &lt;a href="/s/photos/measure?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>developerrelations</category>
      <category>developerexperience</category>
      <category>devrel</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Creating Directionally Lit 3D Buttons with CSS</title>
      <author>Jhey Tompkins</author>
      <pubDate>Thu, 18 Mar 2021 19:55:33 +0000</pubDate>
      <link>https://dev.to/jh3y/creating-directionally-lit-3d-buttons-with-css-2jc2</link>
      <guid>https://dev.to/jh3y/creating-directionally-lit-3d-buttons-with-css-2jc2</guid>
      <description>&lt;p&gt;I'm not too sure how I stumbled into this one. But, something led me to this &lt;a href="https://twitter.com/JedBridges/status/1278384065087893505"&gt;tweet&lt;/a&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pAgB0iAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1278383718491541504/pu/img/qrtRVsLduuxS4Xtg.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7k-gi6b_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1181419356976078848/oVhyyHn5_normal.jpg" alt="Jed Bridges profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jed Bridges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jedbridges
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Has anyone done this directional lighting cursor interaction with CSS? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:44 PM - 01 Jul 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1278384065087893505" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1278384065087893505" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1278384065087893505" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And, to me, that's a challenge. I took it to the live stream!&lt;/p&gt;

&lt;p&gt;The button design is neat. But, I didn't want to do a direct copy. Instead, we decided on making a "Twitter" button. The idea is that we create an almost transparent button with a social icon on it. And then that social icon casts a shadow below. Moving our mouse across the button shines a light over it. Pressing the button pushes it onto the surface.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U681i1DK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1355304804462063617/pu/img/RGIiSy5xuS8D8d8m.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkhTix2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355149810148515842/NBuYxo5I_normal.jpg" alt="Jhey üêªüõ† profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey üêªüõ†
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Directional Lighting 3D CSS Twitter Button üê¶&lt;br&gt;&lt;br&gt;üëâ &lt;a href="https://t.co/qpfzEwUMey"&gt;codepen.io/jh3y/pen/LYbYr‚Ä¶&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:02 AM - 30 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1355305224416669701" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1355305224416669701" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1355305224416669701" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;And today, we're going to look at how you can make it too. The cool thing is, you can swap the icon out to whatever you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-markup" class="anchor"&gt;
  &lt;/a&gt;
  The Markup
&lt;/h2&gt;

&lt;p&gt;My first take approach for creating something like this is to scaffold the markup. Upon first inspection, we'll need to duplicate the social icon used. And a neat way to do this is to use Pug and leverage mixins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mixin icon()
  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')
    title Twitter icon
    path(d='M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we‚Äôve created a mixin for rendering an SVG of the Twitter icon. This would render the Twitter icon if we invoke it like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+icon()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing that will give us a big Twitter icon.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/yLVeNBd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Because social icon sets tend to use the same "0 0 24 24" &lt;code&gt;viewBox&lt;/code&gt;, we could make the title and path arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mixin icon(title, path)
  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')
    title= title
    path(d=path)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then our Twitter icon becomes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+icon('Twitter Icon', 'M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, we could pass it a key. And then have the paths stored in an object if we have many icons we wanted to use or repeat.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mixin icon(key)
  -
    const PATH_MAP = {
      Twitter: "M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"
    }
  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')
    title= `${key} Icon`
    path(d=PATH_MAP[key])

+icon('Twitter')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be a neat way to create an icon mixin to reuse. It's a little overkill for our example, but worth noting.&lt;/p&gt;

&lt;p&gt;Now, we need some markup for our button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scene
  button.button
    span.button__shadow
      +icon('Twitter')
    span.button__content
      +icon('Twitter')
      span.button__shine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's always good to be mindful of accessibility. We can check what our button gives off by checking the "Accessibility" panel in Dev Tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1svaCgsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1svaCgsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel.png" alt="Accessibility panel showing the text read for our button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Might be a good idea to put a &lt;code&gt;span&lt;/code&gt; in for our button text and hide the icons with &lt;code&gt;aria-hidden&lt;/code&gt;. We can hide the &lt;code&gt;span&lt;/code&gt; text too whilst making it available to screen readers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scene
  button.button
    span.button__shadow
      +icon('Twitter')
    span.button__content
      span.button__text Twitter
      +icon('Twitter')
      span.button__shine
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've got different options for applying those &lt;code&gt;aria-hidden&lt;/code&gt; attributes. The one we will use is changing the mixin code to apply &lt;code&gt;aria-hidden&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mixin icon(key)
  -
    const PATH_MAP = {
      Twitter: "...path code"
    }
  svg.button__icon(role='img' aria-hidden="true" xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')
    title= `${key} Icon`
    path(d=PATH_MAP[key])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another neat way with Pug is to pass through all attributes to a mixin. This is useful in scenarios where we only want to pass some attributes through.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mixin icon(key)
  -
    const PATH_MAP = {
      Twitter: "...path code"
    }
  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')&amp;amp;attributes(attributes)
    title= `${key} Icon`
    path(d=PATH_MAP[key])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we check the ‚ÄúAccessibility‚Äù panel again, our button only reads ‚ÄúTwitter‚Äù. And that‚Äôs what we want!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-styles" class="anchor"&gt;
  &lt;/a&gt;
  The Styles
&lt;/h2&gt;

&lt;p&gt;Here's the part you came for. How we style the thing. To start, we've dropped this in;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve-3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That allows us to create the 3D transforms we need for our button. Try switching that off in the final demo and you'll see that everything breaks.&lt;/p&gt;

&lt;p&gt;Let's hide the span text from our eyes. We can do this in many ways. One recommended way to hide an element from our eyes, but not those of the screenreader is to use these styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we start working on our button, we're going to tilt the scene. We can do this using a &lt;code&gt;transform&lt;/code&gt;. Here we chain the &lt;code&gt;transform&lt;/code&gt; to get it into the position we want. I spent a bit of time tinkering with values here on live stream to get it close to the original.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.scene&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-40deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;18deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You‚Äôll notice a &lt;code&gt;size&lt;/code&gt; variable there too. We're going to drive certain things for our button with CSS variables. This will make it handy for tinkering with values and the effect. Usually, we would put these under the scope they're required in. But, for demos like this, putting them under the &lt;code&gt;:root&lt;/code&gt; at the top of our file makes it easier for us to play with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--shine-blur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--icon-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--shine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--button-bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.025&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--shadow-bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.115&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--shadow-icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--bg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e8f4fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the variables, we‚Äôre working with and these will make sense as we build up our button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-button" class="anchor"&gt;
  &lt;/a&gt;
  The Button
&lt;/h2&gt;

&lt;p&gt;Let's move onto the button!&lt;/p&gt;

&lt;p&gt;First things first. The actual button element. This is going to fill the scene element. We could have applied the sizing and transforms direct on the button. But, if we were to introduce other buttons and elements, we'd have to transform and size them all. This is something to be mindful of with CSS in general. Try and make your container elements dictate the layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we strip the button styles. And that gives us this.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/gOLPBjB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Next we need to create a common start point for the button content and the shadow. We can do this by giving each element absolute positioning. The content will have a 3D translate based on the depth variable we defined before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.button__shadow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.button__content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--depth&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we‚Äôre also making use of the &lt;code&gt;--radius&lt;/code&gt; variable too.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/oNYbaKq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's hard to distinguish between the two icons at this stage. And now's a good time to style them. We can apply some basic icon styling and use a scoped fill for each SVG icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--icon-fill&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.button__shadow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shadow-fill&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button__icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--icon-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--fill&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--icon-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs getting there! The icons aren‚Äôt the same size at the moment though. We‚Äôll get to that.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/mdOVQJv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let‚Äôs get the button press in place. This part is real quick to integrate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs it! Using scoped CSS variables we‚Äôre saying remove the z-axis translation on &lt;code&gt;:active&lt;/code&gt;. Adding the &lt;code&gt;transition&lt;/code&gt; to the &lt;code&gt;transform&lt;/code&gt; stops it from being so instant.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/VwmeVKE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All that's left to do is style the button layers and the shine. Let's start with the shadow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__shadow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-shadow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another scoped style here. We‚Äôre saying that when we press the button, the shadow is no longer blurred. And to blur the shadow, we use the CSS &lt;code&gt;filter&lt;/code&gt; property with a &lt;code&gt;blur&lt;/code&gt; filter. The value of which we defined in our CSS variables. Have a play with the &lt;code&gt;--blur&lt;/code&gt; variable and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/OJbMawy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For the content layer, we're going to use a background color and then apply a backdrop filter. Much like filter, &lt;code&gt;backdrop-filter&lt;/code&gt; is a way for us to apply visual effects to elements. A common use case currently is using blur for "Glassmorphism".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--button-bg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;backdrop-filter&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the value of &lt;code&gt;--blur&lt;/code&gt; and apply a transition for &lt;code&gt;backdrop-filter&lt;/code&gt;. Because of the way we scoped our &lt;code&gt;--blur&lt;/code&gt; variable on &lt;code&gt;:active&lt;/code&gt;, we get the transition almost for free. Why the &lt;code&gt;overflow: hidden&lt;/code&gt;? We‚Äôre anticipating that shine element that will move around the button. We don‚Äôt want it wandering off outside though.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/dyOGQQL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And now, the last piece of the puzzle. That light shine. This is what has been causing the icons to be a different size. Because it has no styles, it's affecting the layout. Let's give it some styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__shine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--shine-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shine-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shine-blur&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--shine-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;absolute&lt;/code&gt; positioning will sort out the icon sizing. Applying a border radius will make the spotlight round. And we use &lt;code&gt;filter&lt;/code&gt; again to give the blurry spot light effect. You‚Äôll notice we‚Äôve chained a &lt;code&gt;brightness&lt;/code&gt; filter on the end there to brighten things up a bit after they‚Äôre blurred.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/abBdQxR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Using the 3D translation ensures that the shine sits above the button which it would do. This way, there‚Äôs no chance of it getting cut by z-fighting with other elements.&lt;/p&gt;

&lt;p&gt;That's all we need for the styles for now. Now it's time for some scripts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripts" class="anchor"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h2&gt;

&lt;p&gt;We're going to use &lt;a href="https://greensock.com"&gt;GreenSock&lt;/a&gt; today for convenience. They have some neat utilities for what we want. But, we could achieve the same result with vanilla JavaScript. Because we're using scripts with type "module", we can take advantage of &lt;a href="https://skypack.dev"&gt;SkyPack&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/gsap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we're ready to start tinkering. We want our button to respond to pointer movement. The first thing we want is to translate the shine as if it follows our pointer. The second is to shift the button dependant on where our pointer is.&lt;/p&gt;

&lt;p&gt;Let's grab the elements we need and set up some basic event listeners on the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cdn.skypack.dev/gsap&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BUTTON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.button__content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SHINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.button__shine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointerdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try moving your pointer around in this demo to see the valuables we get returned for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/YzpwdVy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is the trickiest bit. We need some math to work out the shine position. We're going to translate the shine after it's initial reset. We need to first update the shine styles to accommodate this. We‚Äôre using the scoped CSS variables &lt;code&gt;--x&lt;/code&gt; and &lt;code&gt;--y&lt;/code&gt;. We give them a fallback of &lt;code&gt;-150&lt;/code&gt; so they‚Äôll be out of shot when the demo loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button__shine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1vmin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1%&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in our update function we calculate the new position for the shine. We're basing this on a percentage of the button size. We can calculate this by subtracting the button position from our pointer position. Then we divide that by the position. To finish, multiply by 200 to get a percentage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, &lt;code&gt;POS_X&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab pointer position x.&lt;/li&gt;
&lt;li&gt;Subtract button position x.&lt;/li&gt;
&lt;li&gt;Divide by button width.&lt;/li&gt;
&lt;li&gt;Multiply by 200.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We multiply by 200 because the shine is half the size of the button. This particular part is tricky because we‚Äôre trying to track the pointer and map it into 3D space.&lt;/p&gt;

&lt;p&gt;To apply that to the button, we can set those CSS variables using &lt;code&gt;gsap.set&lt;/code&gt;. That‚Äôs a GSAP method that works as a zero second tween. It‚Äôs particularly useful for setting values on elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, if we want to take it one step further, we can use a &lt;code&gt;quickSetter&lt;/code&gt; from GSAP which would be better for performance in real-world scenarios where we‚Äôre making lots of updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xySet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quickSetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Then to update the values&lt;/span&gt;
&lt;span class="nx"&gt;xySet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That makes our update function look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="nx"&gt;xySet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The accuracy of following the pointer would need more calculations to be precise. Have a play with this demo where the overflow on the button is visible and the shine is more prominent. You can see how the shine element loses it's tracking.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/MWbKZrP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This demo puts everything where it should be.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/rNWxPgW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Last feature. Let‚Äôs shift the button for an added touch. Here, we're going to base the shift of the button on pointer position. But, we're going to limit it's movement. To do this, we can use another GSAP utility. We're going to use mapRange. This allows us to map one set of values to another. We can then pass a value in and get a mapped value back out.&lt;/p&gt;

&lt;p&gt;First, we‚Äôll define a limit for movement. This will be a percentage of the button size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our update function we can calculate the percentage of shift. We do this by mapping the the window width against the limit. And we input our pointer position to get the mapped percentage back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this block we‚Äôre mapping the range of &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;window.innerWidth&lt;/code&gt; against &lt;code&gt;-10&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;. Passing pointer position &lt;code&gt;x&lt;/code&gt; will give us a value between &lt;code&gt;-10&lt;/code&gt; and &lt;code&gt;10&lt;/code&gt;. And then we can apply that percentage shift to our button. We do the same for vertical shift and this gives us an update function like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buttonSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quickSetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BUTTON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xySet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quickSetter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SHINE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LIMIT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UPDATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CONTENT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;BOUNDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
  &lt;span class="nx"&gt;xySet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POS_Y&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;LIMIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;y&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;buttonSet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;xPercent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;yPercent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That‚Äôs it!
&lt;/h2&gt;

&lt;p&gt;That‚Äôs how you create a directional lit 3D button with CSS and a little scripting. The cool thing is that we can make changes with relative ease.&lt;/p&gt;

&lt;p&gt;For the final demo, I‚Äôve added some extra details and changed the icon. You might recognise it.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/qBqzmGM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As always, thanks for reading. Wanna see more? Come find me on &lt;a href="https://twitter.com/jh3yy"&gt;Twitter&lt;/a&gt; or &lt;a href="https://twitch.tv/jh3yy"&gt;check out the live stream&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/79ufI5x0_NU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>design</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My journey in learning git basics üßóüèª‚Äç‚ôÄÔ∏è</title>
      <author>Denise</author>
      <pubDate>Thu, 18 Mar 2021 17:30:48 +0000</pubDate>
      <link>https://dev.to/denimartn/my-journey-in-learning-git-basics-597i</link>
      <guid>https://dev.to/denimartn/my-journey-in-learning-git-basics-597i</guid>
      <description>&lt;p&gt;Git is the most popular version control tool. If you are currently working as a software developer, you probably use it on a daily basis, and if you are looking for a new job, you will definitely need to know it to work with your team.&lt;/p&gt;

&lt;p&gt;As a beginner in the web development world, I wrote this article both to help you and me clarify some basic git concepts.&lt;/p&gt;

&lt;p&gt;Here's a simple overview. üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#short-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Short introduction
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#what-is-git" class="anchor"&gt;
  &lt;/a&gt;
  What is git?
&lt;/h3&gt;

&lt;p&gt;Git is a &lt;strong&gt;version control system&lt;/strong&gt; (there are several, git is just the most popular) that helps people to collaborate on a project. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;version control system&lt;/strong&gt; is a software that tracks all the changes that have been made to the source code of a project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; is able to track not only &lt;em&gt;which&lt;/em&gt; change has been made (e.g. someone changed the button‚Äôs color on a specific file), but also &lt;em&gt;who&lt;/em&gt; made it and &lt;em&gt;when&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-git-is-so-useful" class="anchor"&gt;
  &lt;/a&gt;
  Why git is so useful?
&lt;/h3&gt;

&lt;p&gt;Git is useful because it allows everyone to work on a project without the fear of compromising the stable version of its code.&lt;/p&gt;

&lt;p&gt;You can work on a specific issue or bug, roll back to previous changes, and have multiple versions of the same codebase. &lt;/p&gt;

&lt;p&gt;Here‚Äôs an example:&lt;/p&gt;

&lt;p&gt;Let‚Äôs suppose you want to change your application‚Äôs theme, but you do not want to touch the source code. To do that, you can create a &lt;strong&gt;new branch&lt;/strong&gt; (imagine it as a new story of the whole project), change the theme, and then &lt;strong&gt;merge&lt;/strong&gt; (apply) the changes you made on that branch on the stable code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-git-repository" class="anchor"&gt;
  &lt;/a&gt;
  What is a git repository?
&lt;/h3&gt;

&lt;p&gt;A git repository is the &lt;strong&gt;.git&lt;/strong&gt; folder inside your current folder. It tracks all the changes you make within the project‚Äôs files (e.g. all the information about the commits, in which branch you are etc). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-commands" class="anchor"&gt;
  &lt;/a&gt;
  Basic commands
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;strong&gt;.git repository&lt;/strong&gt;. You have to run this command in order to use git.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Clone (download) an existing repository from a git server (e.g. GitHub), and put it on your local machine. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add a file to the &lt;strong&gt;staging area&lt;/strong&gt;. &lt;br&gt;
The &lt;strong&gt;staging area&lt;/strong&gt; is the place where a modified file stays before it‚Äôs committed.&lt;/p&gt;

&lt;p&gt;Here's a scenario:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You modify a file called &lt;em&gt;message.txt&lt;/em&gt; (this file is &lt;strong&gt;untracked&lt;/strong&gt;, a.k.a git is not aware of it);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You add &lt;em&gt;message.txt&lt;/em&gt; to the staging area;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You commit, so you "move" &lt;em&gt;message.txt&lt;/em&gt; and all the other files that are tracked from the &lt;strong&gt;staging area&lt;/strong&gt; to the &lt;strong&gt;commit history&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Take all the changes and ‚Äúsave‚Äù them by giving a unique identifier (the identifier is created by an algorithm called SHA-1)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tells you about the status of your current repo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In which branch you are;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes that are not staged yet (you modified a file but you did not add it to the staging area);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes that are not committed yet (you added a file to the staging area, but you did not commit yet);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes are staged and committed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tells you about the commit‚Äôs history:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Commit‚Äôs identifier (e.g. 00b12a46b9cf97324a59266d2721d41eb98621ff);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit‚Äôs author (e.g. magicmario);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit‚Äôs date (e.g. Tue Mar 16 18:25:35 2021 +0100);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit‚Äôs description (e.g. change: button color on main.html).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Give you a list of all the branches in your repository. It is used also to create and delete a specific branch.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;branch&lt;/strong&gt; is an &lt;em&gt;independent development history&lt;/em&gt; and is usually used to develop new features or work on bugs separately. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Join two branches (development histories) together and create a commit for the updated changes.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Download all the latest data from the remote repository to your local repo. &lt;strong&gt;Important&lt;/strong&gt;: it does not put these data into your files.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Retrieve (fetch) information from the remote repository &lt;strong&gt;and&lt;/strong&gt; apply (merge) these to your local branch. Basically is the combination of these two commands: &lt;code&gt;git fetch&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Upload your work to the remote repository (online).&lt;/p&gt;

&lt;p&gt;Source: the internet. üåå&lt;/p&gt;

&lt;p&gt;Any feedback is welcomed!&lt;/p&gt;

&lt;p&gt;Thank you (:&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>What a React developer needs to know in 2021</title>
      <author>Matvey Romanov</author>
      <pubDate>Thu, 18 Mar 2021 17:18:04 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/what-a-react-developer-needs-to-know-in-2021-3agj</link>
      <guid>https://dev.to/ra1nbow1/what-a-react-developer-needs-to-know-in-2021-3agj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#knowledge-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Knowledge of JavaScript
&lt;/h1&gt;

&lt;p&gt;React is built on the basis of JavaScript. First of all, people who want to learn React need to understand how well they know JavaScript itself.&lt;/p&gt;

&lt;p&gt;Very often, developers ask questions that show that they don't know the basics of JavaScript. While questions about the React ecosystem arise much less frequently. Therefore, first of all, we recommend that you deepen your knowledge of JavaScript, and then return to React.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-state-manager" class="anchor"&gt;
  &lt;/a&gt;
  Using State Manager
&lt;/h1&gt;

&lt;p&gt;In React.js there is no built-in StateManager. As a standard, the Redux library has been used for a long time, but it does not perform this role very well ‚Äî when working with it, you have to write a lot of boilerplate code, there are no controls for asynchronous behavior and side effects.&lt;/p&gt;

&lt;p&gt;So other State Managers began to appear. The Redux developers took into account their shortcomings and presented the Redux Toolkit library, which was well received by the frontend developers.&lt;/p&gt;

&lt;p&gt;Redux Toolkit-a library on top of Redux. It allows you to achieve the same thing as Redux, but with Redux Toolkit you will have to write much less code than with Redux. In addition, the Redux Toolkit uses internally Immer.js Therefore, you do not need to think about data immutability, i.e. use destructurization, creating new state objects in the reducers each time.&lt;/p&gt;

&lt;p&gt;Another rather promising library is MobX. The business logic of MobX is different from Redux. Do not forget about Effector, which was created by people from the CIS.&lt;/p&gt;

&lt;p&gt;To date, these three State Managers are the most popular. All three libraries do their job very well, but we usually use either the Redux Toolkit or the Effector.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-hooks" class="anchor"&gt;
  &lt;/a&gt;
  React Hooks
&lt;/h1&gt;

&lt;p&gt;React Hooks came to visit us with the 16.8 version and will stay with us for a long time. If you are hearing about them now for the first time, then you should first read them in the official React documentation.&lt;/p&gt;

&lt;p&gt;Hooks are just another way to describe the logic of your components. It allows you to add some features to functional components that were previously unique to class components.&lt;/p&gt;

&lt;p&gt;Most people at the interview are floating on questions about hooks, although all the information is in the documentation. Anyone who wants to develop, you definitely need to at least see how they work, and with experience, you can understand the technology more deeply.&lt;/p&gt;

&lt;p&gt;There are some restrictions on the use of hooks that distinguish them from normal functions. First of all, they can not be used in class components. Hooks cannot be called inside loops or conditions. This restriction is imposed by React itself in order to be able to track which hooks were called.&lt;/p&gt;

&lt;p&gt;When the hooks first appeared, we at Holyweb experimented on them, wrote new components, and saw what would come of it. When everything worked out well, we used them further, wrote new features on them. For those who haven't used React Hooks yet, I would recommend trying it out ‚Äî they make it very easy to describe the necessary logic, they make the code cleaner and more understandable.&lt;/p&gt;

&lt;p&gt;Many people are concerned about the question of whether to rewrite the project in a new way because there are hooks. I would not say that performance will increase or fall significantly from such actions. If you like the hooks, then write new features of your project on them. You will always have time to rewrite the old pieces.&lt;/p&gt;

&lt;p&gt;Let's look at the examples on the hooks.&lt;/p&gt;

&lt;p&gt;Let's make a simple Counter.&lt;/p&gt;

&lt;p&gt;Here is the code using the class component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
class App extends React.Component {
 state = {
   counter: 0
 };
 onIncrement = () =&amp;gt; {
   this.setState((state) =&amp;gt; {
     return {
       counter: state.counter + 1
     }
   });
 };
 onDecriment = () =&amp;gt; {
   this.setState((state) =&amp;gt; {
     return {
       counter: state.counter - 1
     }
   });
 };
 render() {
   return (
     &amp;lt;div&amp;gt;
       &amp;lt;button onClick={this.onIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
       &amp;lt;button onClick={this.onDecriment}&amp;gt;-&amp;lt;/button&amp;gt;
       &amp;lt;div&amp;gt;Counter: {this.state.counter}&amp;lt;/div&amp;gt;
     &amp;lt;/div&amp;gt;
   );
 }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the code using the functional component and hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
function App () {
 const [counter, toggleCounter] = React.useState(0)
 const onIncrement = () =&amp;gt; {
   toggleCounter(counter =&amp;gt; counter + 1)
 }
 const onDecriment = () =&amp;gt; {
   toggleCounter(counter =&amp;gt; counter - 1)
 }
 return (
   &amp;lt;div&amp;gt;
     &amp;lt;button onClick={onIncrement}&amp;gt;+&amp;lt;/button&amp;gt;
     &amp;lt;button onClick={onDecriment}&amp;gt;-&amp;lt;/button&amp;gt;
     &amp;lt;div&amp;gt;Counter: {counter}&amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can make sure that the code on the hooks is cleaner and clearer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serverside-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Server-Side Rendering
&lt;/h1&gt;

&lt;p&gt;Now there are several popular SSR solutions. On our first projects, where we used SSR, we had a completely custom solution. Over time, we began to study and use ready-made solutions. Each of them has its pros and cons. For example, on one of the current projects, we use Razzle, and on the other ‚Äî Next.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt; is a popular lightweight framework for static and server-side applications that use React. It includes ready-made styling and routing solutions and assumes that you are using Node.js as the server environment. What Next doesn't quite like is that in some cases it dictates the architecture and how to build applications. But this is a matter of taste and personal preferences.&lt;/p&gt;

&lt;p&gt;Razzle is a server-side rendering framework that is &lt;strong&gt;more flexible than Next.js&lt;/strong&gt; but does not require mandatory configuration.&lt;/p&gt;

&lt;p&gt;If you are seriously thinking about SSR, we recommend that you carefully study the following products and try to get the most practical experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;js (React-based);&lt;/li&gt;
&lt;li&gt;js (Vue-based);&lt;/li&gt;
&lt;li&gt;Gatsby (React-based);&lt;/li&gt;
&lt;li&gt;Gridsome (Vue-based).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#common-mistakes-in-learning-react" class="anchor"&gt;
  &lt;/a&gt;
  Common mistakes in learning React
&lt;/h1&gt;

&lt;p&gt;The main mistake of most developers is the inattentive reading of the documentation. For example, one of our developers admitted that he did not read the documentation well and started using useCallback everywhere when it was not necessary to do so. Only later did he realize this when he started rereading the documentation.&lt;/p&gt;

&lt;p&gt;The questions that people ask in chats and profile communities are often already answered in the documentation ‚Äî you just need to read it carefully.&lt;/p&gt;

&lt;p&gt;In addition to the library itself, the specialist must have knowledge of such technologies like HTML, CSS, JavaScript, npm, Git, Babel, WebPack, Redux. Skills with other tools may also come in handy, but this depends on the vacancy.&lt;/p&gt;

&lt;p&gt;But the main thing is not the hard skills that a person has already mastered, but how well he can learn. If the developer has this skill, it will not be difficult for him to prepare for the interview, come to the company and learn everything that is necessary in the course of work.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>My experiences creating a Netflix clone using microfrontends</title>
      <author>Dante De Ruwe</author>
      <pubDate>Thu, 18 Mar 2021 16:46:32 +0000</pubDate>
      <link>https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46</link>
      <guid>https://dev.to/dantederuwe/my-experiences-creating-a-netflix-clone-using-microfrontends-1n46</guid>
      <description>&lt;p&gt;I created a Netflix clone using &lt;a href="https://piral.io"&gt;Piral&lt;/a&gt;: an open-source framework for creating modular applications.&lt;/p&gt;

&lt;p&gt;In this article, I will go over what microfrontends are, why they are useful, and what frameworks exist to make implementing them easier. I'll also share my experiences creating a project by myself using React and Piral: two technologies I had previously never touched. I will cover what I did, and how I did it. Finally, I will present some closing thoughts, opinions, and personal notes about this endeavor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The "&lt;a href="#how-i-did-it"&gt;How I did it&lt;/a&gt;" section will be written in a way where every developer, regardless of skill level, should be able to follow. Be sure to give Piral or microfrontends as a whole a try, and let me know how it went!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://netflix.deruwe.me"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q82Q6EaG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/website%3Fcolor%3D2b7489%26style%3Dflat-square%26up_message%3Dnetflix.deruwe.me%26url%3Dhttps%253A%252F%252Fnetflix.deruwe.me" alt=""&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://netflix.deruwe.me"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onQ7E_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/J63Qkfy.jpg"&gt;The home page of the application



&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-microfrontends"&gt;What are microfrontends?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-microfrontends"&gt;Why microfrontends?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#microfrontend-frameworks"&gt;Microfrontend frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#piral"&gt;Piral&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#building-blocks-and-terminology"&gt;Building blocks and terminology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-project"&gt;The project&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-i-did"&gt;What I did&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-i-did-it"&gt;How I did it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-thoughts"&gt;Final thoughts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#quick-links-to-all-code"&gt;Quick links to all code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-are-microfrontends" class="anchor"&gt;
  &lt;/a&gt;
  What are microfrontends?
&lt;/h1&gt;

&lt;p&gt;Microfrontends try to extend the idea and the benefits of microservices into the frontend space. In essence, this &lt;strong&gt;architecture pattern&lt;/strong&gt; comes down to &lt;em&gt;"splitting up the frontend monolith"&lt;/em&gt; into smaller, more easily manageable pieces. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbDVrNF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TPb2keR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbDVrNF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/TPb2keR.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows fully cross-functional teams to work on these, focussing on a specific business feature or company mission. Rather than "horizontal" teams, per layer or technology; these teams manage the "vertical" slices of the application. Each team is autonomous, and has end-to-end ‚Äì from the database to the UI ‚Äì responsibility for the features they develop.&lt;/p&gt;

&lt;p&gt;Teams should be able to independently create and deploy these microfrontends. This cuts down on inter-team communication; which could then also enable &lt;strong&gt;distributed development&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is especially beneficial for larger companies and projects, where the Jeff Bezos "Two Pizza Team" rule (i.e. the whole team can be fed by two pizzas) can be helpful. Spotify for example, calls these smaller feature teams "squads".  Interesting read &lt;a href="https://medium.com/pm101/spotify-squad-framework-part-i-8f74bcfcd761"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-microfrontends" class="anchor"&gt;
  &lt;/a&gt;
  Why microfrontends?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Microfrontends make teams more agile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When comparing the characteristics and benefits of microfrontends with the 12 Agile Principles, lots of overlap emerges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Autonomous teams&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Autonomous teams satisfy lots of these agile principles. In short: teams that can operate on their own are less prone to being slowed down, can make changes quickly, and feel a greater sense of ownership.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Incremental upgrades&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By being decoupled and decentralized, the microfrontends architecture pattern ensures that the incremental and iterative process of agile software development can succeed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Independent deployment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Microfrontends can be deployed independently. This can enable shorter release cycles, because all different parts don't have to be in sync with each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Simple and decoupled codebases&lt;/strong&gt;&lt;br&gt;
Simplicity is essential to agility: this makes it easier for the whole team to be on board and iterate fast. Decoupling makes using different technologies possible; but even when using the same technologies throughout the app it can still be very beneficial for efficiency of development.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#microfrontend-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  Microfrontend frameworks
&lt;/h1&gt;

&lt;p&gt;While you could take the microfrontend principles and devise your own solution to manage them (in fact, that's kinda what my bachelor thesis will be about); there are lots of frameworks already out there that can do some of the heavy lifting for you. &lt;/p&gt;

&lt;p&gt;Florian Rappl outlines and categorizes a lot of these frameworks in the following blog post:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/florianrappl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MkpWP10L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--E6HJO9Lr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/268296/eb6a1ad0-17d3-4302-9c44-a263a666b072.jpg" alt="florianrappl image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/florianrappl/microfrontends-from-zero-to-hero-3be7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Six Patterns for Microfrontends&lt;/h2&gt;
      &lt;h3&gt;Florian Rappl „Éª Nov 21 '19 „Éª 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#piral&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#microfrontends&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#patterns&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Popular options include &lt;em&gt;Single SPA&lt;/em&gt;, &lt;em&gt;Open Components&lt;/em&gt;, &lt;em&gt;Mosaic&lt;/em&gt;, &lt;em&gt;Podium&lt;/em&gt;, &lt;em&gt;Luigi&lt;/em&gt; and &lt;em&gt;Piral&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Rather than competing frameworks, most of these exist side by side, and they each provide a different way of creating these microfrontend solutions. They differ in key properties such as completeness (just solving some problems such as routing vs providing a full end-to-end solution with error boundaries, tooling, eco-system, etc.) or architecture style (e.g., build-time composition vs client-side composition vs server-side composition).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#piral" class="anchor"&gt;
  &lt;/a&gt;
  Piral
&lt;/h1&gt;

&lt;p&gt;Piral is an open-source framework for fully flexible modular applications. It is built on React, but has lots of plugins available for other frameworks and technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FClAEx8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/d2al0nO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FClAEx8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/d2al0nO.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-blocks-and-terminology" class="anchor"&gt;
  &lt;/a&gt;
  Building blocks and terminology
&lt;/h2&gt;

&lt;p&gt;An application built with piral consists of multiple parts. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have no experience with microfrontends, this section can be confusing. Don't be alarmed: the section &lt;em&gt;"The project"&lt;/em&gt; below will turn the abstract into the practical, which will be easier to follow. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-pilets-feature-modules" class="anchor"&gt;
  &lt;/a&gt;
  The Pilets (feature modules)
&lt;/h3&gt;

&lt;p&gt;These are the individual feature modules, also known as microfrontends. They each include their own dependencies and assets, and are completely independent of each other. &lt;/p&gt;

&lt;p&gt;Pilets can define how the integration of their components will happen. Does the pilet need a dedicated page, or will the content be rendered inside an already existing pilet? Maybe we need a dedicated page, and also register a button somewhere else that will link to the page? It is all possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-feed-service" class="anchor"&gt;
  &lt;/a&gt;
  The feed service
&lt;/h3&gt;

&lt;p&gt;Pilets are usually published to a feed service (e.g. a REST API). Piral provides its own feed service over at &lt;a href="https://piral.cloud"&gt;piral.cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It should be noted that Piral can work without a feed service but a feed service makes deployments easy and consumption very dynamic; showcasing all the advantages of Piral.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-piral-instance-app-shell" class="anchor"&gt;
  &lt;/a&gt;
  The Piral Instance (app shell)
&lt;/h3&gt;

&lt;p&gt;This is the place where all feature modules will be integrated. The piral instance will pull all registered pilets from the feed service, and put them where they need to go as defined by the pilets themselves. The app shell also is the place to put your basic layout: navbars, headers, footers, and shared components.&lt;/p&gt;

&lt;p&gt;The result of building the app shell is a &lt;code&gt;dist/release&lt;/code&gt; directory for hosting, and a &lt;code&gt;dist/emulator&lt;/code&gt; directory with a tarball which can be published to an NPM registry to aid in the development and the debugging of the individual pilets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-extensions-pages-and-menu-items" class="anchor"&gt;
  &lt;/a&gt;
  (Component) extensions, pages and menu items
&lt;/h3&gt;

&lt;p&gt;The piral API supports registering &lt;em&gt;extensions&lt;/em&gt; in your pilets and Piral instance. Let's say for example we have a webshop with 2 pilets: a &lt;em&gt;discover&lt;/em&gt; pilet that lists products and a &lt;em&gt;checkout&lt;/em&gt; pilet that enables users to purchase these items (this is by the way a classic example for microfrontends, read more &lt;a href="https://micro-frontends.org"&gt;here&lt;/a&gt;). The &lt;em&gt;discover&lt;/em&gt; pilet should include a button to purchase items, but since that is not the responsibility of this team, the &lt;em&gt;checkout&lt;/em&gt; team will create this button and register it as an extension that all pilets can use. The &lt;em&gt;discover&lt;/em&gt; pilet will then just register an extension slot where the app shell will integrate the right extension into.&lt;/p&gt;

&lt;p&gt;Piral also has a built-in way to register pages and menu items. These can also be seen as extensions, but where the work is already done for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-project" class="anchor"&gt;
  &lt;/a&gt;
  The project
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-i-did" class="anchor"&gt;
  &lt;/a&gt;
  What I did
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#application-overview" class="anchor"&gt;
  &lt;/a&gt;
  Application overview
&lt;/h3&gt;

&lt;p&gt;You can find the application online on &lt;a href="https://netflix.deruwe.me"&gt;netflix.deruwe.me&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This application is a Netflix clone with some basic functionalities. There is a &lt;code&gt;Browse&lt;/code&gt; page where the user can discover showcases of trending series and movies, top-rated ones, etc. &lt;/p&gt;

&lt;p&gt;Of course, to find a specific movie or series, the user can also use the provided &lt;code&gt;Search&lt;/code&gt; bar.&lt;/p&gt;

&lt;p&gt;Every media tile also has a &lt;code&gt;Favorites&lt;/code&gt; toggle in the top right corner. Clicking it adds the series or movies to the user's favorites list, to be found on the favorites page.&lt;/p&gt;

&lt;p&gt;The user can switch accounts via the &lt;code&gt;Profile&lt;/code&gt; option in the top right. All favorites are linked to the specific account.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is worth noting that this demo project does not come with a custom backend: all data is coming from a 3rd party API, the accounts are dummy accounts, and the favorites are stored in local storage.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#impressions" class="anchor"&gt;
  &lt;/a&gt;
  Impressions
&lt;/h4&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://media.giphy.com/media/9S16de4Yb3kSi1HMLx/giphy.gif"&gt;&lt;br&gt;
&lt;img src="https://i.giphy.com/media/9S16de4Yb3kSi1HMLx/giphy.gif" width="90%"&gt;&lt;br&gt;
&lt;/a&gt;The &lt;em&gt;Browse&lt;/em&gt; and the &lt;em&gt;Favorites&lt;/em&gt; pages 




&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;a href="https://media.giphy.com/media/rOa1PlSAnA4hgHV7z3/giphy.gif"&gt;&lt;br&gt;
&lt;img src="https://i.giphy.com/media/rOa1PlSAnA4hgHV7z3/giphy.gif" width="90%"&gt;&lt;br&gt;
&lt;/a&gt;The &lt;em&gt;Profile&lt;/em&gt; page 




&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-the-application" class="anchor"&gt;
  &lt;/a&gt;
  Structure of the application
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEs1om9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3sfhcVV.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEs1om9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3sfhcVV.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-app-shell" class="anchor"&gt;
  &lt;/a&gt;
  The app shell
&lt;/h4&gt;

&lt;p&gt;The app shell contains only the logo, navigation, and footer. All the other components are provided by the pilets in the form of extensions, pages, and menu items.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-pilets" class="anchor"&gt;
  &lt;/a&gt;
  The pilets
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pilet&lt;/th&gt;
&lt;th&gt;Registered components&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Browse&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;li&gt;Menu item&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Browse&lt;/code&gt; (page)&lt;/li&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Favorites&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;li&gt;Menu item&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FavoritesToggle&lt;/code&gt; (component extension)&lt;/li&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Watch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;li&gt;
&lt;code&gt;MovieTile&lt;/code&gt; (component extension)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Player&lt;/code&gt; (page)&lt;/li&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;li&gt;
&lt;code&gt;Search&lt;/code&gt; (component extension)&lt;/li&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;li&gt;
&lt;code&gt;UserProfile&lt;/code&gt; (component extension)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AccountSwitcher&lt;/code&gt; (page)&lt;/li&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-i-did-it" class="anchor"&gt;
  &lt;/a&gt;
  How I did it
&lt;/h2&gt;

&lt;p&gt;Throughout the creation of the project using piral, obviously, the &lt;a href="https://docs.piral.io"&gt;Piral documentation&lt;/a&gt; was my main source of inspiration. There, they also have video tutorials on lots of topics regarding Piral.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.piral.io"&gt;Piral documentation&lt;/a&gt; also talks about the &lt;a href="https://docs.piral.io/guidelines/tutorials/07-development-workflow"&gt;3 phases of the development workflow&lt;/a&gt;. This is also the way I tried to develop my application. Of course, to be able to experiment, I sometimes stepped a bit of out bounds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#0-the-planning-phase" class="anchor"&gt;
  &lt;/a&gt;
  0. The planning phase
&lt;/h3&gt;

&lt;p&gt;But before following any of the laid-out steps provided by Piral, I looked out for a sample project that I could build upon. I'm not a designer, so looking for a React project with good styling was the easiest option. I found &lt;a href="https://github.com/fullstackreact/react-daily-ui/tree/master/003-landing-page"&gt;this project&lt;/a&gt;, which was written using an older React syntax, and was all in one big &lt;code&gt;App&lt;/code&gt; module. I converted everything into separate React functional components. This was a great way to learn how React works.&lt;/p&gt;

&lt;p&gt;You can see the results in the following repo. The commit history here shows what I did.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/react-netflix-clone"&gt;
        react-netflix-clone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Learning react!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#1-the-setup-phase" class="anchor"&gt;
  &lt;/a&gt;
  1. The setup phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What needs to be done in this phase? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Develop the piral instance&lt;/li&gt;
&lt;li&gt;Set up a feed service and connect the piral instance to it&lt;/li&gt;
&lt;li&gt;Distribute an emulator package&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#11-creating-the-piral-instance-app-shell" class="anchor"&gt;
  &lt;/a&gt;
  1.1. Creating the Piral instance (app shell)
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the code &lt;a href="https://github.com/DanteDeRuwe/netflix-piral"&gt;on github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Following the documentation showed me how to get this up and running. Install the Piral CLI globally by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;piral-cli &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;(one could also use npx to avoid unsafe global installations, see below)&lt;/p&gt;

&lt;p&gt;The CLI exposes commands starting with &lt;code&gt;piral&lt;/code&gt; and &lt;code&gt;pilet&lt;/code&gt;. In this phase, of course, we will need the &lt;code&gt;piral&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;To create a Piral instance (app shell) called &lt;em&gt;netflix-piral&lt;/em&gt;, let's run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;piral new &lt;span class="nt"&gt;--target&lt;/span&gt; netflix-piral
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We can run the newly created Piral instance with the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;piral debug

&lt;span class="c"&gt;# or, if you want to open the browser automatically:&lt;/span&gt;
piral debug &lt;span class="nt"&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;‚Äì using &lt;code&gt;npx&lt;/code&gt; ‚Äì&lt;/p&gt;

&lt;p&gt;Instead of a command like &lt;code&gt;piral debug&lt;/code&gt; which only works inside a directory with a &lt;code&gt;package.json&lt;/code&gt; or if you have the Piral CLI installed globally, you can also use &lt;code&gt;npx&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the given name is not available in (modified) path (e.g., global path or &lt;code&gt;node_modules/.bin&lt;/code&gt;), npx will try to get the command from NPM and run it (non-globally i.e. from user privileges)&lt;/li&gt;
&lt;li&gt;if the given name &lt;em&gt;is&lt;/em&gt; available it will just run it from there (also from user privileges)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's have a look at one of the most important files, &lt;code&gt;index.tsx&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;renderInstance&lt;/code&gt; function outlines the responsibilities of the app shell: it takes care of the layout, the error layout, and requests the pilets from a feed service. As we can see on line 6 - by default - it's just pulling from an empty feed.&lt;/p&gt;

&lt;p&gt;In fact, the only thing that will change in this file, is the feed URL. To be able to do that: let's first set up a feed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-setting-up-the-feed-service" class="anchor"&gt;
  &lt;/a&gt;
  1.2. Setting up the feed service
&lt;/h4&gt;

&lt;p&gt;While you could (and in some circumstances, should) set up your own feed service, most of the time the service provided by the Piral team itself will suffice. For development purposes, you get multiple feeds for free! This service can be found on &lt;a href="https://piral.cloud"&gt;piral.cloud&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-creating-a-feed-on-piralcloud" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ Creating a feed on &lt;a href="https://piral.cloud"&gt;piral.cloud&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;Sign in to the service and you'll see the following screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7xJ_dV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vzYNwCF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7xJ_dV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vzYNwCF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, we're going to click &lt;code&gt;+ New Feed&lt;/code&gt;.&lt;br&gt;
Next, we'll give the feed a unique name (which cannot be changed), and optionally, a description so it's clear for what this feed will be used.&lt;br&gt;
You can also configure the allowed hosts.&lt;/p&gt;

&lt;p&gt;You'll see the result on the overview: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TO5yEZJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rfQQsmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TO5yEZJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/rfQQsmk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To be able to publish pilets later, we'll need an api key. You can manage them by clicking
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y962hN----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9fsZj0T.png" alt=""&gt;
&lt;/li&gt;
&lt;li&gt;To get the feed url for the app shell, we can click the feed title. The url will be displayed:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y7-2saG7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WmFx0mC.png" height="300px"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll copy the feed url and place it where we wanted it before: in the &lt;code&gt;index.tsx&lt;/code&gt; of the Piral instance (line 6).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#13-creating-the-app-shell-layout" class="anchor"&gt;
  &lt;/a&gt;
  1.3. Creating the app shell layout
&lt;/h4&gt;

&lt;p&gt;We have an app shell now which pulls from our own (still empty) feed! We'll add pilets to this feed later. But first, maybe we should customize the layout of this app shell. As written before, the main responsibilities we want for this app shell are the logo, the navigation, and the footer. &lt;/p&gt;

&lt;p&gt;After scaffolding, the &lt;code&gt;layout.tsx&lt;/code&gt; file contains a lot of components and also combines them in a &lt;code&gt;layout&lt;/code&gt; object to be used by the &lt;code&gt;index.tsx&lt;/code&gt;. While this is fine, I like to split up all my components using a single file per component, so the result looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We'll put the layout in &lt;code&gt;./components/App.tsx&lt;/code&gt;, the navigation template in &lt;code&gt;.components/Navigation.tsx&lt;/code&gt; and for the menuitems, they are just rendered using &lt;code&gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember what I mentioned before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The app shell contains only the logo, navigation, and footer. All the other components are provided by the pilets in the form of extensions, pages, and menu items.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is absolutely the case, but we do however need to define where the pilets need to render these extensions! Here is a quick wireframe diagram for the app shell.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoeJ8A8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WOAJiHa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoeJ8A8B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WOAJiHa.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;pages&lt;/strong&gt; registered by the pilets will just be given to the &lt;code&gt;App&lt;/code&gt; component as &lt;code&gt;children&lt;/code&gt;. We can use a react-router to surround them.&lt;/p&gt;

&lt;p&gt;As for the &lt;strong&gt;extensions&lt;/strong&gt;: The key to being able to integrate these is an &lt;code&gt;ExtensionSlot&lt;/code&gt; with a specific name. The pilets are then able to register extensions, providing a name, and the app shell will put them in the right slot.&lt;/p&gt;

&lt;p&gt;The code for the &lt;code&gt;App&lt;/code&gt; component is below. On line 14 the extension slot with &lt;code&gt;name="header-items"&lt;/code&gt; is registered, on line 19, the different pages will be rendered.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;menu items&lt;/strong&gt; are standardized in Piral. The component registered in &lt;code&gt;index.tsx&lt;/code&gt; as the &lt;code&gt;MenuContainer&lt;/code&gt; (= in our case, the &lt;code&gt;Navigation&lt;/code&gt; component) will get menu items as &lt;code&gt;children&lt;/code&gt; when pilets register them. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#14-deploying-the-app-shell-on-netlify-or-somewhere-else" class="anchor"&gt;
  &lt;/a&gt;
  1.4. Deploying the app shell on Netlify (or somewhere else)
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already know how hosting works, here's a TLDR: execute &lt;code&gt;piral build --type release&lt;/code&gt; and publish the &lt;code&gt;dist/release/&lt;/code&gt; folder! You could of course set up CI/CD to do this for you. Don't forget a &lt;code&gt;_redirects&lt;/code&gt; file for routing!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To deploy the application for the world to see, we need to publish it somewhere. To me, the best place to do this is &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt;. One could of course choose Azure Static Web Apps, Github pages, or another hosting platform, but Netlify is easy to use and has a lot of great features that are completely free.&lt;/p&gt;

&lt;p&gt;To get started, create an account on Netlify. I like to use my Github account because this way the accounts are already linked.&lt;/p&gt;

&lt;p&gt;Next, create a "New site from git" in the &lt;em&gt;sites&lt;/em&gt; tab of the interface. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O90QJIOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7KfwhyE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O90QJIOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7KfwhyE.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the Github repository of your app shell. If you don't have one already... you should create one ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHJQ0H2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/r20gvRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHJQ0H2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/r20gvRA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now configure the build settings as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set a branch (I use master, you could also create a custom &lt;code&gt;release&lt;/code&gt; branch)&lt;/li&gt;
&lt;li&gt;set the build command to &lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;piral build&lt;/code&gt; or &lt;code&gt;piral build --type release&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;set the publish directory to &lt;code&gt;/dist/release/&lt;/code&gt; (don't skip this step!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0YCjHVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/htD0U4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0YCjHVs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/htD0U4q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you are ready to deploy your site with the click of a button! Now every time you push your code to the selected branch, the site will be updated! CI/CD for the win!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-the-raw-redirects-endraw-file" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ The &lt;code&gt;_redirects&lt;/code&gt; file
&lt;/h5&gt;

&lt;p&gt;When you deploy the app shell for the first time, you will not notice it, but the routing is not perfect. To save yourselves some headaches later on, you best follow the next steps already, so you won't have to touch your app shell again.&lt;/p&gt;

&lt;p&gt;If you go to &lt;em&gt;yourwebsite.netlify.app/test&lt;/em&gt;, Netlify will try to find a &lt;code&gt;test.html&lt;/code&gt; page to serve you, will not find it, and show an error message. We want React Router to deal with routes. We have to redirect all routes to the &lt;code&gt;index.html&lt;/code&gt;... To do this, we create a folder with path &lt;code&gt;/src/static/&lt;/code&gt; and put a &lt;code&gt;_redirects&lt;/code&gt; file into it: &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To make sure this file is copied to the &lt;code&gt;release&lt;/code&gt; directory on build, we need to configure webpack to do so. &lt;/p&gt;

&lt;p&gt;Install the &lt;a href="https://webpack.js.org/plugins/copy-webpack-plugin/"&gt;CopyWebpackPlugin&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;copy-webpack-plugin &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the root folder of your project, create &lt;code&gt;webpack.config.js&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;This will copy everything from the &lt;code&gt;src/static/&lt;/code&gt; directory to the build directory. This means you can later on also add images and other files to this &lt;code&gt;static&lt;/code&gt; directory if you so desire.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-publishing-the-emulator" class="anchor"&gt;
  &lt;/a&gt;
  1.5. Publishing the emulator
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-what-is-the-purpose-of-the-emulator" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ What is the purpose of the emulator?
&lt;/h5&gt;

&lt;p&gt;Now, we have our app shell up and running. When pushing Pilets to our feed service, the app shell can access these immediately and the site will be updated. But what if we want to develop new pilets? Surely we won't be publishing them a hundred times to see how they look, right?&lt;/p&gt;

&lt;p&gt;Luckily, Piral has a good solution to this: an app shell &lt;strong&gt;emulator&lt;/strong&gt;. The pilets can use the emulator to see how they will look when integrated into the app shell, to be able to quickly debug the pilets.&lt;/p&gt;

&lt;p&gt;To create an app shell emulator, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;piral build &lt;span class="nt"&gt;--type&lt;/span&gt; emulator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The emulator is a &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.tgz&lt;/code&gt; file (a so-called "tarball") and can be found in the &lt;code&gt;/dist/emulator/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Great. Now we have a file. If we are creating pilets alone, on one pc, this is no big deal. But ideally, we want the emulator to be accessible from every pilet, and also be able to update the emulator when a new version of the app shell is necessary. That's why it makes sense to publish the emulator.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#%E2%96%B8-publishing-the-emulator-package-to-npm" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ publishing the emulator package to npm
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have experience with npm, here's a TLDR: run &lt;code&gt;npm publish dist/emulator/&amp;lt;emulator_file&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be able to access the emulator from everywhere, we are going to use the node package manager or npm.  First, go to &lt;a href="https://npmjs.org"&gt;npmjs.org&lt;/a&gt; and create an account if you don't already have one.&lt;/p&gt;

&lt;p&gt;Next, in your terminal, run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and log in using your username and password. Next, you can run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm publish dist/emulator/&amp;lt;emulator_file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;emulator_file&amp;gt;&lt;/code&gt; will in our case be &lt;code&gt;netflix-piral-1.0.0.tgz&lt;/code&gt; or something similar. If you get an error (which could mean the name you chose is already taken), refer to &lt;a href="https://zellwk.com/blog/publish-to-npm/"&gt;this article&lt;/a&gt; or the &lt;a href="https://docs.npmjs.com/"&gt;npm docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you look at your registered packages on npmjs.org, you should be able to see the published emulator package! This will be very useful in the next phase: &lt;em&gt;the feature phase&lt;/em&gt;, where the development of the pilets will be addressed.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#2-the-feature-phase" class="anchor"&gt;
  &lt;/a&gt;
  2. The feature phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;What needs to be done in this phase? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build and publish pilets to enable functionalities in the app.&lt;/li&gt;
&lt;li&gt;Manage separation of concerns

&lt;ul&gt;
&lt;li&gt;extract app shell functionality into pilets&lt;/li&gt;
&lt;li&gt;split larger pilets or merge smaller ones&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#21-scaffolding-a-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.1 Scaffolding a pilet
&lt;/h4&gt;

&lt;p&gt;Creating a pilet is really straightforward. The piral CLI provides an easy way to scaffold a pilet based on a piral instance. For us the workflow will look like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;browse
&lt;span class="nb"&gt;cd &lt;/span&gt;browse
pilet new netflix-piral
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create a folder &lt;code&gt;browse&lt;/code&gt;, and put a new pilet called "browse" ‚Äì which is based on the Piral instance &lt;code&gt;netflix-piral&lt;/code&gt; ‚Äì inside of it.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#22-the-first-version-of-the-raw-browse-endraw-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.2 The first version of the &lt;a href="https://github.com/DanteDeRuwe/netflix-browse-pilet"&gt;&lt;code&gt;browse&lt;/code&gt;&lt;/a&gt; pilet
&lt;/h4&gt;

&lt;p&gt;Let's create some functionalities! The home page of this app will be the "browse" page. Since discovering new series and letting the user browse through series and movies is a pretty big part of the app, this will be the responsibility of one pilet (and, by consequence, a separate dev team).&lt;/p&gt;

&lt;p&gt;The file structure looks like this: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIsNFwrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bWWeW6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIsNFwrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bWWeW6n.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pilet is very lightweight. The only file to look at is the &lt;code&gt;index.tsx&lt;/code&gt;, where some interesting examples of the Piral API are shown:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The setup function is the heart of the pilet. This is where the app shell will look for instructions for integrations. &lt;/p&gt;

&lt;p&gt;We won't need the notifications or the tiles. You can learn more on these from the Piral documentation.&lt;/p&gt;

&lt;p&gt;The most interesting method for us is &lt;code&gt;registerMenu&lt;/code&gt;, we'll need this for the "Browse" menu item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerMenu&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/browse"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Browse&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And to register a page where this menu item can link to, we will need to add&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/browse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Browse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Where this &lt;code&gt;Browse&lt;/code&gt; is just a regular React component (for now). The structure looks a bit like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Browse
    ‚îú‚îÄ‚îÄ Hero
    ‚îú‚îÄ‚îÄ Showcase
    ‚îÇ       ‚îú‚îÄ‚îÄ MovieTile
    ‚îÇ       ‚îî‚îÄ‚îÄ ... &lt;span class="c"&gt;#more movietiles&lt;/span&gt;
    ‚îî‚îÄ‚îÄ ... &lt;span class="c"&gt;#more showcases with movietiles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-debugging-the-pilet-in-isolation" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ Debugging the pilet in isolation
&lt;/h5&gt;

&lt;p&gt;To be able to test how the pilet will look after integration into the app shell, of course, we could just publish it and look at the live website. However, I won't have to explain why "testing in production" is not the best idea ever.&lt;/p&gt;

&lt;p&gt;So, Piral offers a way to debug the pilet, this is where the emulator comes into play. To debug the pilet, you can run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pilet debug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After the build process is complete, the CLI will let you know on what local address you can look at the result (usually &lt;a href="http://localhost:1234"&gt;http://localhost:1234&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It's interesting to note that this command is almost identical to the one for the app shell, but there we used the &lt;code&gt;piral&lt;/code&gt; keyword, and now we use &lt;code&gt;pilet&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This section is called &lt;em&gt;"debugging the pilet in isolation"&lt;/em&gt;, which seems logical since we only have one pilet defined. Later on, I'll discuss a great feature that enables you to debug one pilet that is part of an application with multiple pilets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#%E2%96%B8-publishing-the-pilet" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ Publishing the pilet
&lt;/h5&gt;

&lt;p&gt;We already published the piral instance (app shell), and the fun thing about working with Piral is that this app shell will pull every pilet from a feed and integrate them client-side.&lt;/p&gt;

&lt;p&gt;This means, to publish a pilet, we won't have to touch deployment stuff. We just need to publish the pilet to the feed we created earlier.&lt;/p&gt;

&lt;p&gt;We can do this by:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pilet publish &lt;span class="nt"&gt;--fresh&lt;/span&gt; &lt;span class="nt"&gt;--url&lt;/span&gt; &amp;lt;feed_url&amp;gt; &lt;span class="nt"&gt;---api-key&lt;/span&gt; &amp;lt;feed_api_key&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Tip: I saved this snippet as a script called &lt;code&gt;publish.sh&lt;/code&gt;, added it to &lt;code&gt;.gitignore&lt;/code&gt; (so my API key won't be on Github), and then ran the script whenever I wanted to publish.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;--fresh&lt;/code&gt; flag makes sure that before publishing, a fresh build is made to include any changes made after the last build.&lt;/p&gt;

&lt;p&gt;The feed url and API key, as mentioned before, you can find in the piral feed service dashboard. The direct url is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.piral.cloud/feeds/&amp;lt;feed_name&amp;gt;/api-keys
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#23-the-raw-profile-endraw-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.3 The &lt;a href="https://github.com/DanteDeRuwe/netflix-profile-pilet"&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; pilet
&lt;/h4&gt;

&lt;p&gt;Next, let's tackle a more interesting case. The &lt;code&gt;profile&lt;/code&gt; pilet. This pilet will again register a page, &lt;code&gt;/profile&lt;/code&gt;, but will also do something else: it will register a &lt;strong&gt;component extension&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m6U-qnzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/eSx7Sx3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6U-qnzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/eSx7Sx3.png" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When looking back at the app shell, this component extension has to be put in the extension slot &lt;code&gt;header-items&lt;/code&gt;. so that's what we will do.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.tsx&lt;/code&gt; of the profile pilet will then look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Where &lt;a href="https://github.com/DanteDeRuwe/netflix-profile-pilet/blob/master/src/components/ProfileExtension.tsx"&gt;&lt;code&gt;ProfileExtension&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/DanteDeRuwe/netflix-profile-pilet/blob/master/src/components/ProfilePage.tsx"&gt;&lt;code&gt;ProfilePage&lt;/code&gt;&lt;/a&gt; are just regular React components.&lt;/p&gt;

&lt;p&gt;As is the deal with component extensions: the app shell will integrate the registered extension into the right &lt;code&gt;ExtensionSlot&lt;/code&gt; (the one with a matching name).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#24-the-raw-favorites-endraw-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.4 The &lt;a href="https://github.com/DanteDeRuwe/netflix-favorites-pilet"&gt;&lt;code&gt;favorites&lt;/code&gt;&lt;/a&gt; pilet
&lt;/h4&gt;

&lt;p&gt;Here we start to run into an interesting thing. We want to introduce the favorites as a page where we can find all the favorite series or movies. This means multiple things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Just like in the Browse component, we will need a way of displaying media (&lt;code&gt;MovieTile&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;We will need to provide a &lt;code&gt;FavoritesToggle&lt;/code&gt; button in every &lt;code&gt;MovieTile&lt;/code&gt;, to be able to toggle this item as a favorite&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-the-raw-movietile-endraw-and-thoughts-about-code-duplication" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ The &lt;code&gt;MovieTile&lt;/code&gt; and thoughts about code duplication
&lt;/h5&gt;

&lt;p&gt;We could just copy over the &lt;code&gt;MovieTile&lt;/code&gt; code from the browse component and reuse it here. This would be a very viable strategy, and it's also the one I used when you look back in the commit history. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚Äì &lt;em&gt;"Don't repeat yourself"&lt;/em&gt; ? ‚Äì&lt;br&gt;
While it is true that the DRY principle can result in cleaner code within the scope of one solution; it sometimes limits the desired decoupling of applications. Especially in microfrontends, sometimes repeating yourself c√°n be useful, and the reverse is often more difficult and undesirable. There is an interesting article to be read &lt;a href="https://medium.com/swlh/the-case-against-dry-micro-frontends-edition-7d6657685f52"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That being said, later on in the project, I looked back at this part in the Piral docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Determine when to split pilets and potentially split larger pilets or merge smaller ones."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's when it started making sense to extract the &lt;code&gt;MovieTiles&lt;/code&gt; into a separate &lt;code&gt;watch&lt;/code&gt; pilet, where they are registered as component extensions. I'll talk about the watch pilet in the next section.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-the-raw-favoritestoggle-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ The &lt;code&gt;FavoritesToggle&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;We'll offer the favorites button as a component extension, so all pilets or the app shell can integrate this button wherever they want them.&lt;/p&gt;

&lt;p&gt;For that, we need this in the &lt;code&gt;setup&lt;/code&gt; function of the favorites pilet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ListToggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FavoriteToggle&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FavoriteToggle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is where &lt;em&gt;passing parameters into component extensions&lt;/em&gt; becomes interesting. A very basic &lt;code&gt;FavoriteToggle&lt;/code&gt; component may look like this: &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;(If you want to see the full code, check the &lt;a href="https://github.com/DanteDeRuwe/netflix-favorites-pilet"&gt;github repo&lt;/a&gt;, I'm omitting stuff for brevity)&lt;/p&gt;

&lt;p&gt;For this toggle function, it is important that the button gets some properties. Using a favourites toggle may look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FavoritesToggle&lt;/span&gt; &lt;span class="na"&gt;movieId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"15165"&lt;/span&gt; &lt;span class="na"&gt;media_type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"tv"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or something similar. All this introduction leads us to the main question: &lt;em&gt;how to pass parameters to component extensions when using them across pilets?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, it's pretty easy: the &lt;code&gt;Extensionslot&lt;/code&gt; component has a property &lt;code&gt;params&lt;/code&gt;. Whenever we want to use an extension, we give the slot the params, and piral will pass these params to the extension that will end up in that slot. This means, a registered extension will have &lt;code&gt;props.params&lt;/code&gt;, which will come from wherever we defined the extension slot.&lt;/p&gt;

&lt;p&gt;If we want to use this component extension from other pilets, the extension slot will have to look something like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExtensionSlot&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ListToggle"&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*an object with the params here*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will see an example and best practices about this in the next section:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#25-the-raw-watch-endraw-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.5 the &lt;a href="https://github.com/DanteDeRuwe/netflix-watch-pilet"&gt;&lt;code&gt;watch&lt;/code&gt;&lt;/a&gt; pilet
&lt;/h4&gt;

&lt;p&gt;This pilet would have 2 things registered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;MovieTile&lt;/code&gt; we talked about earlier.

&lt;ul&gt;
&lt;li&gt;this should have a spot where our &lt;code&gt;FavoritesToggle&lt;/code&gt; component extension can fit into!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Player&lt;/code&gt; (which is just a simple page and we won't discuss further)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#%E2%96%B8-the-movietile" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ The MovieTile
&lt;/h5&gt;

&lt;p&gt;This was an interesting lesson in what I like to call &lt;em&gt;extensionception&lt;/em&gt;: we'll register a component extension, but within that extension, we'll use an &lt;code&gt;ExtensionSlot&lt;/code&gt; where another component extension will fit into:&lt;/p&gt;

&lt;p&gt;The eventual result on for example the favorites page will look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2YjPtF6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DD78SeM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2YjPtF6Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DD78SeM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok, let's look at the &lt;code&gt;MovieTile&lt;/code&gt; component:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;This component accepts a whole bunch of properties to be able to display the movie tiles with all the information. It's a purely presentational component.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-passing-extension-dependencies-via-props" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ Passing extension dependencies via props
&lt;/h5&gt;

&lt;p&gt;On line 11 you can see that the &lt;code&gt;MovieTileProps&lt;/code&gt; also contain a definition for a React component reference: this will be the &lt;code&gt;FavoritesToggle&lt;/code&gt; we defined before.&lt;/p&gt;

&lt;p&gt;But why don't we just put &lt;code&gt;&amp;lt;Extensionslot name="ListToggle"/&amp;gt;&lt;/code&gt; there? Well, it's because of what I learned while reading the &lt;a href="https://docs.piral.io/guidelines/tutorials/09-pilet-best-practices#using-extensions"&gt;&lt;em&gt;Pilet best practices&lt;/em&gt; on using extensions&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Using components provided from other pilets is done via "extensions". The problem is that the extensions require the Extension component of the Pilet API to be integrated.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed. We would need to do this at the top of our component extension file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExtensionSlot&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piral&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a bad practice: we couple our components to the Pilet API, and now they are no longer reusable, testable, and generic.&lt;/p&gt;

&lt;p&gt;The fix comes down to this: The only file in a pilet that should depend on the Piral framework is the &lt;code&gt;index.tsx&lt;/code&gt; file with the &lt;code&gt;setup&lt;/code&gt; function. From there, we can pass down the needed dependencies. For the &lt;code&gt;MovieTile&lt;/code&gt;s, it looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;On line 10, we use &lt;code&gt;app.Extension&lt;/code&gt;, which has the same purpose as an &lt;code&gt;ExtensionSlot&lt;/code&gt;. We use the result of that to have a component to pass into another component. This way, the &lt;code&gt;MovieTile&lt;/code&gt; has &lt;code&gt;props.Toggle&lt;/code&gt; defined, and can use it just like any other React component.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#%E2%96%B8-debugging-one-pilet-and-seeing-the-interaction-with-the-other-pilets-too" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ Debugging one pilet and seeing the interaction with the other pilets too
&lt;/h5&gt;

&lt;p&gt;While developing the &lt;code&gt;browse&lt;/code&gt; pilet, the section where I talked about debugging was called &lt;em&gt;"debugging the pilet in isolation"&lt;/em&gt;. Now, we're going to do something more powerful.&lt;/p&gt;

&lt;p&gt;Let's recall what happens when we run &lt;code&gt;pilet debug&lt;/code&gt;. We have an app shell emulator in which the pilet will be integrated. That's it ‚Äì 2 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the app shell (emulated)&lt;/li&gt;
&lt;li&gt;the pilet that's being debugged&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what if we want to see the already published pilets too, to see how the pilet that we are debugging will fit into them? (mainly, in this case, we want to see how the extensions integrate)&lt;/p&gt;

&lt;p&gt;At the time of writing, the Piral CLI is still in version &lt;code&gt;v0.12.4&lt;/code&gt;, but I got the recommendation to switch to the &lt;code&gt;v1.0.0&lt;/code&gt; preview version (the &lt;code&gt;@next&lt;/code&gt; version). This version of the CLI provides in my opinion a major game-changing feature: the ability to debug pilets, while also being able to include remote pilets from the feed!&lt;/p&gt;

&lt;p&gt;It's also very easy to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pilet debug &lt;span class="nt"&gt;--feed&lt;/span&gt; &amp;lt;feed_url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And voila! We can see how the new pilet will fit into the app shell and the already defined pilets in the feed! Amazing!&lt;/p&gt;

&lt;p&gt;Honestly, since learning about this feature, I never ever used debugging in isolation again. It's so much easier to see how the pilet will fit into the application when also including other pilets into view.&lt;/p&gt;

&lt;p&gt;To make my life easier, this is what my &lt;code&gt;scripts&lt;/code&gt; looked like in every pilet's &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pilet debug --feed &amp;lt;feed_url&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This way, I could just run the command &lt;code&gt;npm run debug&lt;/code&gt;!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#26-the-raw-search-endraw-pilet" class="anchor"&gt;
  &lt;/a&gt;
  2.6 The &lt;a href="https://github.com/DanteDeRuwe/netflix-search-pilet"&gt;&lt;code&gt;search&lt;/code&gt;&lt;/a&gt; pilet
&lt;/h4&gt;

&lt;p&gt;This pilet just registers one component extension. We'll also set it to render into the &lt;code&gt;header-items&lt;/code&gt; slot. This way: we will get the search and the profile extension both in there.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3-the-maintenance-phase" class="anchor"&gt;
  &lt;/a&gt;
  3. The maintenance phase
&lt;/h3&gt;

&lt;p&gt;This is mainly bug fixing and doing optimizations.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#persisted-state" class="anchor"&gt;
  &lt;/a&gt;
  Persisted state
&lt;/h4&gt;

&lt;p&gt;This has nothing to do with Piral, but I wanted to store some data via local storage and I ran into a pretty cool way to do this by using &lt;a href="https://github.com/donavon/use-persisted-state"&gt;this custom react hook&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lazy-loading" class="anchor"&gt;
  &lt;/a&gt;
  Lazy loading
&lt;/h4&gt;

&lt;p&gt;In the pilet setup function, we can set pages to lazily load. This is related to bundle splitting: more info &lt;a href="https://docs.piral.io/guidelines/tutorials/09-pilet-best-practices#bundle-splitting"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;e.g.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProfilePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/ProfilePage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ProfilePage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#making-changes-to-the-app-shell" class="anchor"&gt;
  &lt;/a&gt;
  Making changes to the app shell
&lt;/h4&gt;

&lt;p&gt;If time was spent thinking about the responsibilities of the app shell before developing the first pilets, you can save yourself a lot of headaches. Though it is possible that the app shell needs to be updated. Of course, the pilets that depend on the app shell emulator for debugging would need to get an update as well!&lt;/p&gt;

&lt;p&gt;Luckily, this is fairly simple&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the app shell is updated, built, and the update is pushed to npm&lt;/li&gt;
&lt;li&gt;in the pilet, run &lt;code&gt;pilet upgrade&lt;/code&gt; to pull in the latest version of the emulator&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;While I had 0 experience using React and Piral before doing this project, I think the project turned out really well. &lt;/p&gt;

&lt;p&gt;When working with microfrontends, the biggest hurdle is getting to the big picture. To me, it was really complicated to imagine how all the microfrontends would come together.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#%E2%96%B8-the-black-box-method-for-learning-concepts" class="anchor"&gt;
  &lt;/a&gt;
  ‚ñ∏ The "black box method" for learning concepts
&lt;/h5&gt;

&lt;p&gt;I saw &lt;a href="https://www.youtube.com/watch?v=RDzsrmMl48I"&gt;this video&lt;/a&gt; recently and it really stuck with me. When trying to understand hard concepts: treat them like a black box first, and learn how to &lt;em&gt;use&lt;/em&gt; them, before learning about how they work.&lt;/p&gt;

&lt;p&gt;The experience you get by using a concept will give you a major advantage while learning how they work because you will already understand the desired outcome.&lt;/p&gt;

&lt;p&gt;The key to understanding microfrontends ‚Äì in my opinion ‚Äì is to build some! Once you see visually how they all come together, it's easier to imagine how this integration is happening. This is why a microfrontend framework is valuable. Not only does it provide the best developer experience, but also: lots of stuff is already done for you, and you can get started easily.&lt;/p&gt;

&lt;p&gt;This analogy, by the way, also makes sense when explaining how I learned to work with React in just one week. Rather than starting from scratch, I just tweaked an already existing project, and that already got me to understand lots of the concepts. (Of course, my experience with Angular helped a little as well)&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#quick-links-to-all-code" class="anchor"&gt;
  &lt;/a&gt;
  Quick links to all code
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#app-shell" class="anchor"&gt;
  &lt;/a&gt;
  App shell
&lt;/h4&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-piral"&gt;
        netflix-piral
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Netflix clone using microfrontends built as a proof of concept for Piral (https://piral.io). This repository contains only the app shell. Built with React.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#pilets" class="anchor"&gt;
  &lt;/a&gt;
  Pilets
&lt;/h4&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-browse-pilet"&gt;
        netflix-browse-pilet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The "browse" pilet (microfrontend) for my Netflix clone built with Piral. See also https://git.io/netflix-piral
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-profile-pilet"&gt;
        netflix-profile-pilet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The "profile" pilet (microfrontend) for my Netflix clone built with Piral. See also https://git.io/netflix-piral
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-watch-pilet"&gt;
        netflix-watch-pilet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The "watch" pilet (microfrontend) for my Netflix clone built with Piral. See also https://git.io/netflix-piral
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-favorites-pilet"&gt;
        netflix-favorites-pilet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The "favorites" pilet (microfrontend) for my Netflix clone built with Piral. See also https://git.io/netflix-piral
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/DanteDeRuwe"&gt;
        DanteDeRuwe
      &lt;/a&gt; / &lt;a href="https://github.com/DanteDeRuwe/netflix-search-pilet"&gt;
        netflix-search-pilet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The "search" pilet (microfrontend) for my Netflix clone built with Piral. See also https://git.io/netflix-piral
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>piral</category>
      <category>microfrontends</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Nesting Template Literals: A Recommended Approach</title>
      <author>Malcolm R. Kente</author>
      <pubDate>Thu, 18 Mar 2021 15:59:46 +0000</pubDate>
      <link>https://dev.to/remrkabledev/nesting-template-literals-a-recommended-approach-2jgj</link>
      <guid>https://dev.to/remrkabledev/nesting-template-literals-a-recommended-approach-2jgj</guid>
      <description>&lt;p&gt;Code quality is essential, as it impacts the overall software quality. In consequence, software quality affects the safety, security, and reliability of any codebase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-backstory" class="anchor"&gt;
  &lt;/a&gt;
  The backstory üîô
&lt;/h3&gt;

&lt;p&gt;For a few months now, I'm using &lt;a href="https://sonarcloud.io/"&gt;SonarCloud&lt;/a&gt; on my GitHub repositories to monitor code quality. I find it a valuable tool for checking my code and keeping me updated on any corrections needed. Additionally, I've also learned a great deal about coding practices that I would typically neglect.&lt;/p&gt;

&lt;p&gt;One of the "code smells" picked up was the nesting of Template Literals. SonarCloud gave me a big fat notice saying &lt;strong&gt;Template literals should not be nested&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-problem" class="anchor"&gt;
  &lt;/a&gt;
  My Problem ü§î
&lt;/h3&gt;

&lt;p&gt;This issue resulted from my attempt to add breakpoints to my &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; on a project. The problem turned out to be a good learning moment. Thus, here is me sharing the lesson with you to hopefully not repeat my mistakes. &lt;/p&gt;

&lt;p&gt;Nesting together multiple template literals can create unnecessary complexity, which reduces the code quality. The code becomes less readable and can cause maintainability issues overtime. &lt;/p&gt;




&lt;p&gt;Consider this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`I have &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; apples`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Noncompliant; nested template strings not easy to read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A better practice, in these situations, is to &lt;u&gt;&lt;em&gt;move the nested template into a separate statement&lt;/em&gt;&lt;/u&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;apples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`I have &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apples&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; apples`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Here is the initial setup of my styled-components file. It is the hero section of an application. Within the styled section, &lt;code&gt;respondToDeviceWidth&lt;/code&gt; creates a nested template literal with CSS values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// HeroStyles.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../utils/mediaQueries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledHeroSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(
    145deg,
    rgba(253, 38, 71, 1) 0%,
    rgba(252, 128, 45, 1) 75%,
    rgba(250, 167, 43, 1) 100%
  );

  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="s2"&gt;`
    margin-bottom: 2em;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;respondToDeviceWidth&lt;/code&gt; utilizes styled-components &lt;code&gt;css&lt;/code&gt; prop to create the required media query depending on the chosen &lt;code&gt;breakpointsData&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils/mediaQueries/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;breakpointsData&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../data/breakpointsData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;breakpointsData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
      @media (min-width: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;breakpointsData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;) {
        &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;;
      }
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;breakpointsData&lt;/code&gt; is an object which holds some standard device widths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// data/breakPointsData.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;breakpointsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;480px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;768px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;992px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1200px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;breakpointsData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-solution" class="anchor"&gt;
  &lt;/a&gt;
  The Solution üí°
&lt;/h3&gt;

&lt;p&gt;The main issue pointed out by SonarCloud to me was the nesting of the template literals in my styled hero component. To fix this, all I needed to extract the &lt;code&gt;respondToDevice&lt;/code&gt; width into a separate statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// HeroStyles.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../utils/mediaQueries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;smStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;respondToDeviceWidth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="s2"&gt;`
margin-bottom: 2em;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;StyledHeroSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(
    145deg,
    rgba(253, 38, 71, 1) 0%,
    rgba(252, 128, 45, 1) 75%,
    rgba(250, 167, 43, 1) 100%
  );

  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;smStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion üèÅ
&lt;/h3&gt;

&lt;p&gt;That's pretty much it. I learned a better method for nesting template literals. A method that reduces the complexity of my codebase. Thanks to SonarCloud, I was to improve my code quality (by a small significance atleast). &lt;/p&gt;

&lt;p&gt;Now are SonarCloud recommendations and practices the only ones that set in stone? Most likely not! As far as code analyzers go, I'm sure there are a plethora of choices.&lt;/p&gt;

&lt;p&gt;Let me know more about them in the comments below ‚úåÔ∏è&lt;/p&gt;




&lt;p&gt;Full repo üëâ &lt;a href="https://github.com/reMRKableDev/ds-talks"&gt;here&lt;/a&gt; üëà&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to release a new gem version</title>
      <author>Thomas Hareau</author>
      <pubDate>Thu, 18 Mar 2021 15:13:45 +0000</pubDate>
      <link>https://dev.to/doctolib/release-a-new-gem-version-je0</link>
      <guid>https://dev.to/doctolib/release-a-new-gem-version-je0</guid>
      <description>&lt;p&gt;At Doctolib, we proudly maintain and develop the gem &lt;a href="https://github.com/doctolib/safe-pg-migrations"&gt;safe-pg-migrations&lt;/a&gt;, which &lt;a href="https://medium.com/doctolib/stop-worrying-about-postgresql-locks-in-your-rails-migrations-3426027e9cc9"&gt;makes migrations safer&lt;/a&gt;. Once in a while, after each relevant update, we release a new version. &lt;/p&gt;

&lt;p&gt;The process is easy, but not well documented. I usually rely on my bash history to remember the different steps, but today, &lt;code&gt;history | grep "gem push"&lt;/code&gt; gave me an empty result. So I decided that a blog post was more reliable than a self-deleting history.&lt;/p&gt;




&lt;p&gt;The process presented below is the same for creating or updating your gem. In the example below, we use &lt;code&gt;safe-pg-migrations&lt;/code&gt; and &lt;code&gt;1.2.0&lt;/code&gt; as examples, they will need to be adapted to fit your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-sure-of-what-you-are-going-to-publish" class="anchor"&gt;
  &lt;/a&gt;
  Be sure of what you are going to publish.
&lt;/h2&gt;

&lt;p&gt;Before starting the release process, you need to make sure the code you are about to publish is working as expected.&lt;/p&gt;

&lt;p&gt;Have a look at the git history, make sure you are updated with the latest version of the main branch. Launching the tests is also a good idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bump-the-version-of-the-gem" class="anchor"&gt;
  &lt;/a&gt;
  Bump the version of the gem
&lt;/h2&gt;

&lt;p&gt;First: update the version. It is specified in the gemspec file. You will need to open it with an editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vim safe-pg-migrations.gemspec
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then update the version definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  s.version = '1.2.0'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When choosing the new version, remember to follow the &lt;a href="https://guides.rubygems.org/patterns/#semantic-versioning"&gt;semantic versioning policies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The version is also duplicated into &lt;code&gt;Gemfile.lock&lt;/code&gt;. You can only update the CHANGELOG, if you maintain one.&lt;/p&gt;

&lt;p&gt;Once the version is bumped, you can commit the changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"v1.2.0"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tag-the-new-release" class="anchor"&gt;
  &lt;/a&gt;
  Tag the new release
&lt;/h2&gt;

&lt;p&gt;Once the version is updated, even if non-necessary, it is good to create a new tag. To do so, in your terminal, execute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag &lt;span class="nt"&gt;-a&lt;/span&gt; v1.2.0 &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Changelog..."&lt;/span&gt;
git push origin v1.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tags are useful because they help other developers to see exactly which version of the code is associated to which version. &lt;br&gt;
Every release can be fetched with &lt;code&gt;git tag&lt;/code&gt;.&lt;br&gt;
A specific version can be checked-out with &lt;code&gt;git checkout v1.2.0&lt;/code&gt;. &lt;br&gt;
Tags will also be listed in a &lt;a href="https://github.com/doctolib/safe-pg-migrations/releases"&gt;specific page on GitHub&lt;/a&gt;, highlighting each release. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#publish-the-new-release-to-rubygem" class="anchor"&gt;
  &lt;/a&gt;
  Publish the new release to RubyGem
&lt;/h2&gt;

&lt;p&gt;Now the version was bumped and tagged, you can now proceed by publishing it to RubyGem. &lt;/p&gt;

&lt;p&gt;First, you need to build a &lt;code&gt;.gem&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gem build safe-pg-migrations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once created, the file can be finally published. If you haven't done it already, you will need to create an account at &lt;a href="https://rubygems.org/users/new"&gt;https://rubygems.org/users/new&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gem push safe-pg-migrations-1.2.0.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last step will take a few seconds to complete. You should receive an email shortly after, confirming that a new release was published.&lt;/p&gt;




&lt;p&gt;Congratulation, you have published a new version of your gem!&lt;/p&gt;

&lt;p&gt;If you find any most effective way to release, make sure to let us know in the comments!&lt;/p&gt;




&lt;p&gt;Cover picture by &lt;a href="https://www.makingof-photo.com/"&gt;Pierre Emmanuel Poublanc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>opensource</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Pure vs Impure Functions</title>
      <author>Sandra Spanik</author>
      <pubDate>Thu, 18 Mar 2021 15:05:33 +0000</pubDate>
      <link>https://dev.to/sanspanic/pure-vs-impure-functions-50aj</link>
      <guid>https://dev.to/sanspanic/pure-vs-impure-functions-50aj</guid>
      <description>&lt;p&gt;Software engineering is full of jargon. Occasionally, to grasp the true meaning of the seemingly simplest of words, one must waddle through many murky layers of complexity (fancy defining¬†&lt;code&gt;this&lt;/code&gt;, anyone?). Thankfully, other times, outwardly inaccessible words can be demystified pretty easily. In this article, we'll deal with the latter case, breaking down¬†&lt;strong&gt;pure&lt;/strong&gt;¬†vs¬†&lt;strong&gt;impure&lt;/strong&gt;¬†functions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;person thinking about the definition of &lt;code&gt;this&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lnPELPXua4cGq4QlQZ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="100%" src="https://i.giphy.com/media/lnPELPXua4cGq4QlQZ/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-pure-functions" class="anchor"&gt;
  &lt;/a&gt;
  1. Pure Functions üëº
&lt;/h2&gt;

&lt;p&gt;To be considered pure, functions must¬†fulfil the following criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they must be predictable&lt;/li&gt;
&lt;li&gt;they must have no side effects&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#pure-functions-must-be-predictable" class="anchor"&gt;
  &lt;/a&gt;
  ‚û°Ô∏è Pure functions must be predictable.
&lt;/h5&gt;

&lt;p&gt;Identical inputs will always return identical outputs, no matter how many times a pure function is called. In other words: we can run a pure function as many times as we like, and given the inputs remain constant, the function will always predictably produce the same output. Kind of like when you're a pizza-loving person with lactose intolerance.¬†&lt;em&gt;No, this time won't be different, so stop ogling that 16-incher your flatmate ordered.&lt;/em&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#pure-functions-must-have-no-sideeffects" class="anchor"&gt;
  &lt;/a&gt;
  ‚û°Ô∏è Pure functions must have no side-effects.
&lt;/h5&gt;

&lt;p&gt;A¬†side-effect¬†is any operation your function performs that is not related to computing the final output, including but not limited to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modifying a global variable&lt;/li&gt;
&lt;li&gt;Modifying an argument&lt;/li&gt;
&lt;li&gt;Making HTTP requests&lt;/li&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Reading/writing files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A pure function must both be predictable and without side-effects. If either of these criteria is not met, we're dealing with an impure function.&lt;/p&gt;

&lt;p&gt;An¬†&lt;strong&gt;impure&lt;/strong&gt;¬†function is kind of the opposite of a pure one - it doesn't predictably produce the same result given the same inputs when called multiple times, and may cause side-effects. Let's have a look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PURE FUNCTION üëº&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pureAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//always returns same result given same inputs&lt;/span&gt;
&lt;span class="nx"&gt;pureAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//10&lt;/span&gt;
&lt;span class="nx"&gt;pureAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//10&lt;/span&gt;

&lt;span class="c1"&gt;//IMPURE FUNCTION üòà&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;plsMutateMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;impureAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plsMutateMe&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//returns different result given same inputs&lt;/span&gt;
&lt;span class="nx"&gt;impureAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//5&lt;/span&gt;
&lt;span class="nx"&gt;impureAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plsMutateMe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//10 ü•≥ I'm now double digit, yay!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the impure version of the function both changes a variable outside its scope, and results in different output, despite being called with identical input. This breaks both rules of pure functions and as such, it's pretty clear we're dealing with an impure function here. &lt;/p&gt;

&lt;p&gt;But let's have a look at an example of an impure function that is not so easy to tell apart from its pure counterpart.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//IMPURE FUNCTION üòà&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;impureAddToArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;impureAddToArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//[1,2,3,4]&lt;/span&gt;
&lt;span class="nx"&gt;impureAddToArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//[1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given the same inputs, the function above will always return the same output. But it also has the side effect of modifying memory in-place by pushing a value into the original input array and is therefore still considered impure. Adding a value to an array via a pure function instead can be achieved using the spread operator, which makes a copy of the original array without mutating it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//IMPURE FUNCTION üòà&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;impureAddToArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//altering arr1 in-place by pushing üèãÔ∏è&lt;/span&gt;
  &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// PURE FUNCTION üëº&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pureAddToArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at how we'd add to an object instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// IMPURE FUNCTION üòà&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;impureAddToObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we're modifying the object in-place, the above approach is considered impure. Below is its pure counterpart, utilising the spread operator again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PURE FUNCTION üëº&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="nx"&gt;pureAddToObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-should-i-care" class="anchor"&gt;
  &lt;/a&gt;
  Why should I care?
&lt;/h2&gt;

&lt;p&gt;If the differences in the above examples seem negligible, it's because in many contexts, they are. But in a large-scale application, teams might choose pure over impure functions for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pure functions are easy to test, given how predictable they are&lt;/li&gt;
&lt;li&gt;Pure functions and their consequences are easier to¬†&lt;em&gt;think&lt;/em&gt;¬†about in the context of a large app, because they don't alter any state elsewhere in the program. Reasoning about impure functions and potential side-effects is a greater cognitive load. &lt;/li&gt;
&lt;li&gt;Pure functions can be memoized. This means that their output, given certain inputs, can be cached when the function first runs so that it doesn't have to run again - this can optimise performance.&lt;/li&gt;
&lt;li&gt;The team lead is a Slytherin obsessed with the purity status of both blood and functions (&lt;em&gt;are we too old for HP references? I think not&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pure functions are also the foundation of¬†functional programming, which is a code-writing paradigm entire books have been written about. Moreover, some popular libraries require you to use pure functions by default, for example React and Redux. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-vs-impure-javascript-methods" class="anchor"&gt;
  &lt;/a&gt;
  Pure vs Impure JavaScript Methods
&lt;/h2&gt;

&lt;p&gt;Certain JS functions from the standard library are inherently impure. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.random()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date.now()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.splice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.sort()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conversely, the below JS methods are considered pure. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;arr.map()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.filter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arr.reduce()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arr.each()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;arr.every()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.concat()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arr.slice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.toLowerCase()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the spread syntax &lt;code&gt;...&lt;/code&gt; is also commonly used to create copies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-comparison" class="anchor"&gt;
  &lt;/a&gt;
  1. Comparison
&lt;/h2&gt;

&lt;p&gt;So who comes out as a winner in this battle between good and evil? Actually, &lt;em&gt;nobody&lt;/em&gt;. They simply have different use cases, for example, neither AJAX calls, nor standard DOM manipulation can be performed via pure functions. And impure functions aren't intrinsically bad, they just might potentially lead to some confusion in the form of spaghetti code in larger applications.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: I resent the widely held sentiment that the word spaghetti should ever be associated with anything negative. Get in my tummy and out of coding lingo, beloved pasta. üçù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I'll leave you with a quick &lt;strong&gt;tl;dr&lt;/strong&gt; comparison table. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;üëº Pure Functions üëº&lt;/th&gt;
&lt;th&gt;üòà Impure Functions üòà&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;no side-effects&lt;/td&gt;
&lt;td&gt;may have side-effects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;returns same result if same args passed in no matter how many times it runs&lt;/td&gt;
&lt;td&gt;may return different result if same args passed in on multiple runs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;always returns something&lt;/td&gt;
&lt;td&gt;may take effect without returning anything&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is easily testable&lt;/td&gt;
&lt;td&gt;might be harder to test due to side-effects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is super useful in certain contexts&lt;/td&gt;
&lt;td&gt;is also super useful in certain contexts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
