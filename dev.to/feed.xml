<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Authentication vulnerabilities</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Sat, 21 Aug 2021 20:59:19 +0000</pubDate>
      <link>https://dev.to/ms_74/authentication-vulnerabilities-15po</link>
      <guid>https://dev.to/ms_74/authentication-vulnerabilities-15po</guid>
      <description>&lt;p&gt;It has become very common for almost all websites to have a login functionality for their users. A user sign up with an email or username and a password without thinking twice, as it has become easier to visit the website back again with the help of browser's or plugin's caching and third-party authentication services.&lt;/p&gt;

&lt;p&gt;Unfortunately, the security threats are also on the rise and it has become easier for hackers to sell the credentials on the dark web or publish breached data on paste sites, hijack social media accounts for click baiting or fund transactions.&lt;/p&gt;

&lt;p&gt;We will look into how the authentication works, how attackers compromise an account and how to defend against such attacks. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication-how-does-it-work-"&gt;
  &lt;/a&gt;
  Authentication, how does it work ?
&lt;/h2&gt;

&lt;p&gt;Authentication framework is provided by HTTP, which is used by a server to challenge a client request with a &lt;code&gt;401&lt;/code&gt; status code (meaning Unauthorised) and provides information on how to authorise with a &lt;code&gt;WWW-Authenticate&lt;/code&gt; response header. The client that wants to authenticate itself with the server has to include &lt;code&gt;Authorization&lt;/code&gt; request header with credentials. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tcueo83b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42zl7fw9vs70mlswedcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tcueo83b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42zl7fw9vs70mlswedcx.png" alt="Authorization flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common type of Authentication is a &lt;code&gt;Basic&lt;/code&gt;, included in the &lt;code&gt;Authorization&lt;/code&gt; header as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//syntax
Authorization: &amp;lt;type&amp;gt; &amp;lt;credentials&amp;gt;
//example
Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other authentication types can be found at the &lt;a href="https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml"&gt;IANA registry of Authentication schemes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In a &lt;code&gt;basic&lt;/code&gt; authentication, the client obtains username and password from user, constructs the user-pass by concatenating the username, a single colon (":") character, and the password (generating the string &lt;code&gt;username:password&lt;/code&gt;). It then encodes the user-pass into octet sequence, and finally encodes the octet sequence using Base64 into a sequence of US-ASCII characters. &lt;/p&gt;

&lt;p&gt;If the user agent wishes to send the username "Aladdin" and password "open sesame", it would use the following header field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the username and password are passed over the network as clear text (it is base64 encoded, but base64 is a reversible encoding), the basic authentication scheme is not secure. HTTPS/TLS should be used with basic authentication. &lt;/p&gt;

&lt;p&gt;For more information refer &lt;a href="https://datatracker.ietf.org/doc/html/rfc7617"&gt;RFC 7617&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-attacks"&gt;
  &lt;/a&gt;
  Types of Attacks
&lt;/h2&gt;

&lt;p&gt;The following are the common types of automated attacks that attackers use: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bruteforce-attack"&gt;
  &lt;/a&gt;
  Brute-Force Attack
&lt;/h3&gt;

&lt;p&gt;Hackers attempt to get past the authentication against a single account by guessing passwords. These attempts have higher chance of success by using scripts which try numerous commonly used passwords from a dictionary and from millions of leaked passwords obtained from previous data breaches. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#credential-stuffing"&gt;
  &lt;/a&gt;
  Credential stuffing
&lt;/h3&gt;

&lt;p&gt;This type of attack is made by testing username and password pairs obtained from the   breach of another website. Check whether your email, phone or password is in a data breach in the website &lt;a href="https://haveibeenpwned.com"&gt;haveibeenpwned.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#password-spraying"&gt;
  &lt;/a&gt;
  Password Spraying
&lt;/h3&gt;

&lt;p&gt;In this type of attack a single weak password is tested against a large number of different accounts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defence-mechanisms"&gt;
  &lt;/a&gt;
  Defence mechanisms
&lt;/h2&gt;

&lt;p&gt;Lets look at the various ways of protecting against such attacks&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-thirdparty-authentication-that-require-no-password"&gt;
  &lt;/a&gt;
  #1 Third-party authentication that require no password
&lt;/h3&gt;

&lt;p&gt;It is now common to use social media account like Facebook or Google account to authenticate a user in a website. This is more convenient as the user does not have to use or remember a password. It is not considered safe to allow third-party apps to store username/password combo. For this and other use cases authentication protocols can be used to protect the user's data. Examples include &lt;a href="https://oauth.net/2/"&gt;OAuth&lt;/a&gt;, &lt;a href="https://openid.net/what-is-openid/"&gt;OpenId&lt;/a&gt;, &lt;a href="https://wiki.oasis-open.org/security/FrontPage"&gt;SAML&lt;/a&gt; and &lt;a href="https://fidoalliance.org/"&gt;FIDO&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OAuth or OpenID requires users to usually use their personal email addresses as usernames. For business users, consider using &lt;code&gt;Single sign-on (SSO)&lt;/code&gt;identity providers like Okta, OneLogin, wherein they use their business email to login. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-securing-own-authentication-system"&gt;
  &lt;/a&gt;
  #2 Securing own Authentication system
&lt;/h3&gt;

&lt;p&gt;Not all users have Facebook or Gmail or other social media accounts to login. That means websites still needs the usual way of sign-up, login &amp;amp; logout using personal email or username of choice and password apart from third-party authentication. There are many considerations to be taken before implementing your own authentication system:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#username-or-user-ids"&gt;
  &lt;/a&gt;
  Username or User IDs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It should be case-insensitive, i.e, a  username "Bob" and "bob" should be the same user. &lt;/li&gt;
&lt;li&gt;It should be unique.&lt;/li&gt;
&lt;li&gt;Use a separate display name, when a user has a public profile &amp;amp; avoid use of email address as display name as it invites spam. &lt;/li&gt;
&lt;li&gt;Validate and verify email addresses, by checking for valid characters and by sending a verification link with token, only then send further transactional emails. &lt;/li&gt;
&lt;li&gt;Ban disposable emails generated by services like 10 Minute Mail or Mailinator.&lt;/li&gt;
&lt;li&gt;Do not allow login with sensitive accounts (eg. internal accounts used for DB) to any frontend user interface.&lt;/li&gt;
&lt;li&gt;Do NOT use the same authentication solution (e.g. IDP / AD) used internally for unsecured access (e.g. public access / DMZ)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#passwords"&gt;
  &lt;/a&gt;
  Passwords
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Minimum length of the password is enforced by the application and less than 8 characters is considered to be weak, &lt;/li&gt;
&lt;li&gt;Maximum password length should not be set too low, as it will prevent users from creating passphrase. Some set it to 64 characters due to limitations in hashing algorithms, check out more in &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#maximum-password-lengths"&gt;OWASP Password Storage Cheat Sheet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Maximum password length should be set in order to prevent &lt;em&gt;long password denial of service attack&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Do not truncate password if the password set by user exceeds the limit, use pre-hashing algorithm like the &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2"&gt;PBKDF2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Allow usage of all characters including unicode and whitespace.&lt;/li&gt;
&lt;li&gt;Allow credential rotation (change/resetting password) when password is compromised. Password-reset links should expire after user uses them or after 30 minutes to prevent an attacker from abusing stale reset links. To know about password resetting mechanisms, read &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Forgot_Password_Cheat_Sheet.html"&gt;OWASP Forgot Password Cheat Sheet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use a library for calculating the strength of the password, be careful while choosing, check for less dependencies and maintainability status. &lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://haveibeenpwned.com/Passwords"&gt;Pwned Passwords&lt;/a&gt; API to check the password entered is in the list of previously breached passwords.&lt;/li&gt;
&lt;li&gt;For revalidating the users when they login again, the passwords should be stored in the database securely using a cryptographic technique, detailed well in &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html"&gt;OWASP Password Storage Cheat Sheet&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The passwords are not stored as is but as hashes, for this a good hashing algorithm should be chosen, so that even if the attacker gets the hashed password it would take forever to crack (it is not possible to decrypt hashes back to original password).&lt;/p&gt;

&lt;p&gt;These are the steps which the attacker uses to crack the password from hashes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select a password you think the victim has chosen&lt;/li&gt;
&lt;li&gt;Calculate the hash&lt;/li&gt;
&lt;li&gt;Compare the hash you calculated to the hash of the victim. If they match, you have correctly "cracked" the hash and now know the plaintext value of their password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read &lt;a href="https://github.com/OWASP/ASVS/blob/master/4.0/en/0x11-V2-Authentication.md#v21-password-security-requirements"&gt;password security requirements&lt;/a&gt; to know more on Password security considerations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-multifactor-authentication-mfa-or-twofactor-authentication-2fa"&gt;
  &lt;/a&gt;
  #3 Using Multi-factor Authentication (MFA), or Two-Factor Authentication (2FA)
&lt;/h3&gt;

&lt;p&gt;It is best to have an additional layer of security with Multi-factor Authentication over secure password storage, to be effective against attacks like Brute-force, credential stuffing and password spraying. Microsoft suggests that it would have prevented &lt;a href="https://techcommunity.microsoft.com/t5/azure-active-directory-identity/your-pa-word-doesn-t-matter/ba-p/731984"&gt;99.9% password promises&lt;/a&gt; with MFA. It requires a returning user to provide evidence about their identity with at least two of the following four categories of information: something they &lt;em&gt;know&lt;/em&gt;, something they &lt;em&gt;have&lt;/em&gt;, something they &lt;em&gt;are&lt;/em&gt; and their location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OTdXkaEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfacpyb6aurpxcfi1p0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTdXkaEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfacpyb6aurpxcfi1p0q.png" alt="MFA evidences"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many use authentication mobile apps like &lt;em&gt;Google authenticator&lt;/em&gt; and &lt;em&gt;Microsoft authenticator&lt;/em&gt; that can be synced with a website during sign-up, and later can be used to generate random pins for logging in successfully. &lt;/p&gt;

&lt;p&gt;To get guidance on implementing MFA, read &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html"&gt;OWASP Multi-Factor Authentication Cheat Sheet&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-implementing-captcha"&gt;
  &lt;/a&gt;
  #4 Implementing CAPTCHA
&lt;/h3&gt;

&lt;p&gt;CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart), asks users to perform various image recognition tasks that are trivial for humans but tricky for computers. It can help to prevent automated login attempts and user enumerated attacks (testing each username from a list to see whether it exists on your website). &lt;/p&gt;

&lt;p&gt;CAPTCHAs are not perfect and can be defeated by attackers using machine learning techniques, or by paying human users to complete a task, but it still prevents most common hacking attempts. &lt;/p&gt;

&lt;p&gt;Make sure that CAPTCHA's are user friendly for regular users by only requiring a CAPTCHA to be solved after a small number of failed login attempts, rather than requiring it from the very first login and make it less complex 🙂. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHlG9aXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3v2kxad0i0ius045j02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHlG9aXx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3v2kxad0i0ius045j02.png" alt="Captcha muffins"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-secure-logout"&gt;
  &lt;/a&gt;
  #5 Secure Logout
&lt;/h3&gt;

&lt;p&gt;It is equally important to have a secure logout functionality for your users, to prevent from session hijacking attacks.&lt;br&gt;
Logout function should clear the session cookie in the browser, and invalidate the session identifier if you are storing it on the server side. This protects against attackers who attempt to intercept session cookies and attempt to reestablish a session using a stolen cookie. The session cookie is cleared by sending back an HTTP response containing a &lt;code&gt;Set-Cookie&lt;/code&gt; header with a blank value and set the &lt;code&gt;Expires&lt;/code&gt;(or Max-Age) attribute to a date from the past (in case a persistent cookie is being used): &lt;code&gt;Set-Cookie: id=; Expires=Friday, 17-May-03 18:45:00 GMT&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-defences"&gt;
  &lt;/a&gt;
  Other defences
&lt;/h3&gt;

&lt;p&gt;The other ways of protecting against attacks include using Password Managers and re-authentication. &lt;/p&gt;

&lt;p&gt;As attackers find ways to security loopholes, one has to find better ways of protecting against it, and by enabling logging and monitoring of authentication one can detect attacks/failures on a real-time basis. &lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>Why is Javascript Debounce important for our Web Applications</title>
      <author>Brayan Arrieta</author>
      <pubDate>Sat, 21 Aug 2021 20:33:01 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/why-is-javascript-debounce-important-for-our-web-applications-359f</link>
      <guid>https://dev.to/brayanarrieta/why-is-javascript-debounce-important-for-our-web-applications-359f</guid>
      <description>&lt;p&gt;One of the biggest mistakes we can see when optimizing existing code is the absence of the &lt;strong&gt;debounce&lt;/strong&gt; function.  When we use &lt;strong&gt;Javascript&lt;/strong&gt; for our web applications or even frameworks like &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;Vue&lt;/strong&gt;, and &lt;strong&gt;Angular&lt;/strong&gt;, a &lt;strong&gt;debounce&lt;/strong&gt; function is essential to ensuring a given task does not fire so often that it bricks the browser performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-debounce"&gt;
  &lt;/a&gt;
  What is Debounce?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Bouncing is the tendency of any two metal contacts in an electronic device to generate multiple signals as the contacts close or open; debouncing is any kind of hardware device or software that ensures that only a single signal will be acted upon for a single opening or closing of a contact.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, when you press a key on your computer keyboard, you expect a single contact to be recorded by your computer. In fact, however, there is initial contact, a slight bounce or lightening up of the contact, then another contact as the bounce ends, yet another bounce back, and so forth. The usual solution is a debouncing device or software that ensures that only one digital signal can be registered within the space of a given time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaHNvRhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628629785873/GcDW4xfiE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaHNvRhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628629785873/GcDW4xfiE.png" alt="Debounce concept.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-javascript-debounce"&gt;
  &lt;/a&gt;
  What is a Javascript Debounce?
&lt;/h2&gt;

&lt;p&gt;In the case of Javascript, the idea is similar to the previous one mentioned, basically, we want to trigger a function, but only once per use case. The debounce forces a function to wait a certain amount of time before running again. The debounce is used to limit the number of times a function is called. A debounce is a higher-order function that adds new behaviors to the functions we pass as parameters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debounce-code-example"&gt;
  &lt;/a&gt;
  Debounce Code Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;funcCallBack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeoutId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(..&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;later&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeoutId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;funcCallBack&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeoutId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timeoutId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;later&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;funcCallBack&lt;/strong&gt;: The function that you want to execute after the debounce time is finished&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;wait&lt;/strong&gt;: The amount of time you want the debounce function to wait after the last received action before executing the function again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, there are some debounce implementations from some famous npm libraries as &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lodash.com/docs/4.17.15#debounce"&gt;Lodash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://underscorejs.org/#debounce"&gt;Underscore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-should-use-debounce"&gt;
  &lt;/a&gt;
  Why should use Debounce?
&lt;/h2&gt;

&lt;p&gt;A common example that requires the use of a &lt;strong&gt;debounce&lt;/strong&gt; is in the case of a search field that will be processing, every character that it’s entered updating the state of our application and doing several unnecessary calls to our backend in some cases. The &lt;strong&gt;debounce&lt;/strong&gt; function prevents your code from processing every event and in some cases reduces drastically the number of API calls sent to the server. &lt;/p&gt;

&lt;p&gt;Some other common use cases for a &lt;strong&gt;debounce&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners&lt;/li&gt;
&lt;li&gt;Real-time applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;During this post, we have seen some important information about the Javascript &lt;strong&gt;debounce&lt;/strong&gt; and why we will need to keep it in mind during the development of our applications.&lt;/p&gt;

&lt;p&gt;Let me know in the comments recommendations or something else that can be added, also if you have some other common examples that require a &lt;strong&gt;debounce&lt;/strong&gt; let me know I I will update the post based on that thanks! 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://whatis.techtarget.com/definition/debouncing"&gt;whatis.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>performance</category>
    </item>
    <item>
      <title>Build a Modal (Pop up) With  HTML, CSS and JavaScript</title>
      <author>Veed - The Hood Developer</author>
      <pubDate>Sat, 21 Aug 2021 20:29:28 +0000</pubDate>
      <link>https://dev.to/veedjohnson/build-a-modal-pop-up-with-html-css-and-javascript-4md3</link>
      <guid>https://dev.to/veedjohnson/build-a-modal-pop-up-with-html-css-and-javascript-4md3</guid>
      <description>&lt;p&gt;In this article I will show you how to create a modal that pops up whenever you click a button. The main focus of the article will not be on the CSS but on what you will need to achieve this functionality so feel free to copy the CSS styles.&lt;/p&gt;

&lt;p&gt;There are three major elements you will need to achieve the modal functionality:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A button to trigger the modal&lt;/li&gt;
&lt;li&gt;The modal itself (Well obviously 😅)&lt;/li&gt;
&lt;li&gt;A button to close the modal&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's go ahead to create them in our HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- button to launch the modal --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"show-modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log In&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

      &lt;span class="c"&gt;&amp;lt;!-- the modal itself --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="c"&gt;&amp;lt;!-- button to close the modal --&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close-modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

         &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome back, friend😍&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Log in&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Don't have an account? &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign up&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the class "hidden" to set the initial display of the modal to none.&lt;br&gt;
Let's add our CSS and style the button triggering the modal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.show-modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;241&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9clv55wj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7lrf69x8e27axge23mr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9clv55wj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7lrf69x8e27axge23mr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's include styles for the modal and overlay&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;#babecc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;-5px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; 
  &lt;span class="m"&gt;#ffffff73&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;145&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.close-modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* CLASS TO HIDE MODAL */&lt;/span&gt;
&lt;span class="nc"&gt;.hidden&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all for our HTML and CSS. &lt;br&gt;
The first thing we need to do in our JavaScript is to select the elements we need as I mentioned earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//selects the modal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btnCloseModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.close-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//selects the button to close the modal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btnOpenModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.show-modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//selects the button to show the modal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//selects the overlay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we create a function that adds or removes the class "hidden" that we used to hide the modal and overlay.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method &lt;strong&gt;classList.toggle()&lt;/strong&gt; takes a CSS class name and adds it to the specified element if the class is not present and removes the class from the element if it is present.&lt;/p&gt;

&lt;p&gt;Next, we want that function toggleModal to run. It will remove the &lt;strong&gt;hidden&lt;/strong&gt; class when the show-modal button is clicked, add the class the close-modal button is clicked and when the user clicks outside the modal (the overlay). We can achieve that by using the &lt;strong&gt;addEventListener()&lt;/strong&gt; method on the elements we selected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btnOpenModal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;btnCloseModal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all! We now have a fully functional Log In modal.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRLLIo6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofbqg7oxp8f0ffd6p75x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRLLIo6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofbqg7oxp8f0ffd6p75x.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can test it live via codepen &lt;a href="https://codepen.io/veed_/pen/QWgLvYb"&gt;https://codepen.io/veed_/pen/QWgLvYb&lt;/a&gt; . Hope you found this helpful.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>10 Awesome Ruby Gems for Ruby on Rails Web Development</title>
      <author>Brayan Arrieta</author>
      <pubDate>Sat, 21 Aug 2021 20:28:59 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/10-awesome-ruby-gems-for-ruby-on-rails-web-development-4964</link>
      <guid>https://dev.to/brayanarrieta/10-awesome-ruby-gems-for-ruby-on-rails-web-development-4964</guid>
      <description>&lt;p&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; is one of the most popular for developing web applications with influential features that aid to increase the speed of your web app development utilizing an MVC pattern.  It is intended in such a manner that it can be simply prolonged employing the most popular Ruby gems presented by the &lt;strong&gt;Rails community&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-gems-in-ruby-on-rails"&gt;
  &lt;/a&gt;
  What are gems in Ruby on Rails?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ruby Gems&lt;/strong&gt; is known as the package administrator for &lt;strong&gt;Ruby&lt;/strong&gt; language that presents a classic format for dispensing Ruby libraries and programs. It distributes in an independent format termed a &lt;strong&gt;gem&lt;/strong&gt; a tool designed to provide some awesome features for our project.&lt;/p&gt;

&lt;p&gt;In the next list, we will see some &lt;strong&gt;Ruby&lt;/strong&gt; useful Gems that developers often use for adding various functionalities to their projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rspec"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of the most popular Ruby Gems that’s also been downloaded the most, &lt;strong&gt;RSpec&lt;/strong&gt; is fantastic for writing unit test cases. It is mainly used in BDD and TDD environments. The clear syntax of &lt;strong&gt;RSpec&lt;/strong&gt; enables writing tests as close to human language as possible.&lt;/p&gt;

&lt;p&gt;The Rails gem is efficient in testing the behavior of a particular model or a library. It is simple to use and can be executed by installing the configuration files and spec helpers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devise"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/heartcombo/devise"&gt;Devise&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Devise&lt;/strong&gt; is a flexible authentication solution for &lt;strong&gt;Ruby on Rails&lt;/strong&gt; based on Warden. The &lt;strong&gt;Devise&lt;/strong&gt; Gem is used for user authentication, It creates sign-up and sign-in forms, it also can be used to create user accounts for privacy, and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rubocop"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rubocop/rubocop"&gt;RuboCop&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RuboCop&lt;/strong&gt; is used for analyzing the code quality, which assures that your code matches the &lt;strong&gt;Ruby Style Guide&lt;/strong&gt; for writing the best program. &lt;strong&gt;RuboCop&lt;/strong&gt; no leaves a chance for style violations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#omniauth"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/omniauth/omniauth"&gt;OmniAuth&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OmniAuth&lt;/strong&gt; is a library that standardizes multi-provider authentication for web applications. It was created to be powerful, flexible, and do as little as possible. Any developer can create strategies for &lt;strong&gt;OmniAuth&lt;/strong&gt; that can authenticate users via disparate systems. &lt;strong&gt;OmniAuth&lt;/strong&gt; strategies have been created for everything including &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Google&lt;/strong&gt;, and even &lt;strong&gt;GitHub&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pry"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/pry/pry"&gt;Pry&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pry&lt;/strong&gt; is a runtime developer console and IRB alternative with powerful introspection capabilities. &lt;strong&gt;Pry&lt;/strong&gt; aims to be more than an IRB replacement. It is an attempt to bring REPL driven programming to the Ruby language. &lt;strong&gt;Pry&lt;/strong&gt; facilitates the process of debugging&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#faker"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Faker&lt;/strong&gt; is an awesome library that will allow us to generate fake data such as names, addresses, phone numbers, and many other topics. &lt;strong&gt;Faker&lt;/strong&gt; can be used to generate test data to populate our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-form"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/heartcombo/simple_form"&gt;Simple Form&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Simple Form&lt;/strong&gt; aims to be as flexible as possible while helping you with powerful components to create your forms. The basic goal of &lt;strong&gt;Simple Form&lt;/strong&gt; is to not touch your way of defining the layout, letting you find a better design for your eyes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webpacker"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Webpacker&lt;/strong&gt; makes it easy to use the JavaScript pre-processor and bundler Webpack v5 to manage application-like JavaScript in Rails. It coexists with the asset pipeline, as the primary purpose for &lt;strong&gt;Webpack&lt;/strong&gt; is app-like JavaScript, not images, CSS, or even JavaScript Sprinkles (that all continues to live in app/assets).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bullet"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/flyerhzm/bullet"&gt;Bullet&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;Bullet&lt;/strong&gt; gem is designed to help you increase your application's performance by reducing the number of queries it makes. It will watch your queries while you develop your application and notify you when you should add eager loading (N+1 queries), when you're using eager loading that isn't necessary and when you should use counter cache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#capistrano"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Capistrano&lt;/strong&gt; is a framework for building automated deployment scripts. Although &lt;strong&gt;Capistrano&lt;/strong&gt; itself is written in Ruby, it can easily be used to deploy projects of any language or framework, be it Rails, Java, or PHP. When &lt;strong&gt;Capistrano&lt;/strong&gt; is installed, this gem gives you a ‘cap’ tool for deployments straight from your command line.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you may see, there are many great gems that we can use on our web applications. During this post, we have seen some awesome Ruby gems that will help us to do more effective work and quality code to develop the best application for our clients. &lt;/p&gt;

&lt;p&gt;I hope you find this article really helpful. I will be updating this post based on your comments and recommendations so let me know in any case. Thanks! 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/brayanarrieta"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs6qmXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbrayanarrieta%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rubocop/rubocop"&gt;RuboCop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/heartcombo/devise"&gt;Devise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rspec/rspec"&gt;RSpec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/heartcombo/simple_form"&gt;Simple Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/omniauth/omniauth"&gt;OmniAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pry/pry"&gt;Pry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/webpacker"&gt;Webpacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flyerhzm/bullet"&gt;Bullet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/capistrano/capistrano"&gt;Capistrano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reverse Engineering Keyboard Driver: Part 1 (Introduction)</title>
      <author>Rishit Bansal</author>
      <pubDate>Sat, 21 Aug 2021 20:00:05 +0000</pubDate>
      <link>https://dev.to/rishit/reverse-engineering-keyboard-driver-part-1-introduction-2hdg</link>
      <guid>https://dev.to/rishit/reverse-engineering-keyboard-driver-part-1-introduction-2hdg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr-what-is-the-series-about"&gt;
  &lt;/a&gt;
  Tldr; (What is the series about)
&lt;/h2&gt;

&lt;p&gt;This post is an introductory post to a series that will describe my journey to analyze and learn how the keyboard backlight driver on my laptop works, and then re-implement it on my own. I wanted a place to dump my thoughts and different things I try, and learn in the process. &lt;br&gt;
This post is just an intro to the series, if you're looking for the actual action, head over to the next post in the series!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I recently upgraded to a new laptop &lt;strong&gt;(HP Omen 15-en0037AX)&lt;/strong&gt;. The laptop has a four-zone RGB LED backlight on the keyboard. Like most laptops that ship with such a keyboard, the manufacturer shipped a preinstalled app &lt;strong&gt;(Omen Light Studio)&lt;/strong&gt; on windows to customize the various lighting modes on the keyboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6jEcSUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgzdsm3ihnkyqxx4fhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6jEcSUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pgzdsm3ihnkyqxx4fhu.png"&gt;&lt;/a&gt;&lt;br&gt;HP Omen Light Studio
  &lt;/p&gt;

&lt;p&gt;Unfortunately, this app is only available for Windows, which is a problem, as I am primarily a Linux user.&lt;/p&gt;

&lt;p&gt;Since I have always been interested in cybersecurity and have taken part in multiple &lt;a href="https://ctftime.org/ctf-wtf/"&gt;CTF (Capture the Flag)&lt;/a&gt; events, I have a basic understanding of how to Reverse Engineer C/C++ binaries using tools like &lt;a href="https://ghidra-sre.org/"&gt;Ghidra&lt;/a&gt; but have never reversed an actual real-life application. In this series I want to (hopefully) achieve two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reverse Engineer the Omen Light Studio App, and figure out how it interfaces with the hardware on the laptop to control the keyboard's lighting.&lt;/li&gt;
&lt;li&gt;Re implementing the functionality on Linux (maybe in C/C++/Python/NodeJS) and possibly make a similar desktop app.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;This series is going to be me documenting all my approaches (right or wrong), and also explaining various concepts I learned in the process. Currently, I have no idea where this will lead to or what tools/languages I need to know/learn, but all that begins from the next post. See you there!&lt;/p&gt;

</description>
      <category>security</category>
    </item>
    <item>
      <title>Mytemplate.xyz | A no-code personal website builder for developers</title>
      <author>Bodhish Thomas</author>
      <pubDate>Sat, 21 Aug 2021 19:43:42 +0000</pubDate>
      <link>https://dev.to/bodhish/mytemplate-xyz-a-no-code-personal-website-builder-for-developers-52p7</link>
      <guid>https://dev.to/bodhish/mytemplate-xyz-a-no-code-personal-website-builder-for-developers-52p7</guid>
      <description>&lt;p&gt;A No-Code developer website builder side project created with ReScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-the-builder"&gt;
  &lt;/a&gt;
  Why the builder?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9PfKozV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574460/blogs/22-08-2021-mytemplate/mytemplatemeta_cpisbm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9PfKozV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574460/blogs/22-08-2021-mytemplate/mytemplatemeta_cpisbm.png" alt="mytemplate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its super hard to find time updating a personal website. I wanted a simple flow with which I could take out that pain. The editor tries to make the personal website management simple with features like display blogs from Dev.to and projects from Github&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-with-github"&gt;
  &lt;/a&gt;
  Hosting with Github
&lt;/h2&gt;

&lt;p&gt;Once you are done with editing click the download button. Commit the 'index.html' file that you downloaded to your github repository. Open Github setting and enable 'Github Pages'. Set source as your 'main' branch and folder as root. Commit the '_redirects' file to your repo. Your site will be live in few minutes. &lt;a href="https://github.com/bodhish/bodhish.github.io/blob/master/_redirects"&gt;_redirects file&lt;/a&gt;,  &lt;a href="https://vimeo.com/520421685"&gt;Watch Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting-with-netlify"&gt;
  &lt;/a&gt;
  Hosting with Netlify
&lt;/h2&gt;

&lt;p&gt;Once you are done with editing click the download button. Commit the &lt;code&gt;index.html&lt;/code&gt; file that you downloaded to your github repository. Open Netlify and click 'New site from Git' button. Choose your repository from Github and click 'deploy site'. Add &lt;code&gt;netlify.toml&lt;/code&gt; file to your repo if you have added a blog. &lt;a href="https://github.com/bodhish/bodhish.github.io/blob/master/netlify.toml"&gt;netlify.toml&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-import"&gt;
  &lt;/a&gt;
  How to use import?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fT-2v_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574460/blogs/22-08-2021-mytemplate/import_xzalqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fT-2v_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574460/blogs/22-08-2021-mytemplate/import_xzalqe.png" alt="import"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can easly import the index file exported from mytemplate. Click the import button on the top right corner of this page. Enter your Github repositor in the required format and press the check icon on the import tab. This will import the file from Github, once the import is complete you can click the 'Open in Editor' button to complete import. &lt;a href="https://vimeo.com/520424952"&gt;Watch Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack?
&lt;/h2&gt;

&lt;p&gt;The editor is created with ReasonReact(Rescript) and TailwindCSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-report-bugs"&gt;
  &lt;/a&gt;
  Where to report Bugs?
&lt;/h2&gt;

&lt;p&gt;Create a issue with details of the bug in &lt;a href="https://github.com/bodhish/mytemplate.xyz/"&gt;mytemplate repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Examples&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="//bodhish.in"&gt;bodhish.in&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0zifuid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574461/blogs/22-08-2021-mytemplate/q_nbiiwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0zifuid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/bodhi/image/upload/v1629574461/blogs/22-08-2021-mytemplate/q_nbiiwy.png" alt="bodhish.in"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="//gigin.dev"&gt;gigin.dev&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>tailwindcss</category>
      <category>react</category>
      <category>nocode</category>
    </item>
    <item>
      <title>React Draggable Bottom Panel</title>
      <author>Josiah Bryan</author>
      <pubDate>Sat, 21 Aug 2021 19:01:32 +0000</pubDate>
      <link>https://dev.to/josiahbryan/react-draggable-bottom-panel-17f0</link>
      <guid>https://dev.to/josiahbryan/react-draggable-bottom-panel-17f0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: Source for &lt;code&gt;BottomPanel.jsx&lt;/code&gt; and &lt;code&gt;BottomPanel.module.scss&lt;/code&gt; is at&lt;br&gt;
&lt;a href="https://gist.github.com/josiahbryan/c220708256f7c8d79760aff37f64948f"&gt;https://gist.github.com/josiahbryan/c220708256f7c8d79760aff37f64948f&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Live Demo: &lt;a href="https://josiahbryan.com/#/bottompanel-demo"&gt;https://josiahbryan.com/#/bottompanel-demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've been working on a couple of different projects lately, one involves working on the next-generation marketplace for &lt;a href="http://fringe.us"&gt;fringe.us&lt;/a&gt;, and the other project is an app for a luxury driving service.&lt;/p&gt;

&lt;p&gt;Both of these projects called for a bottom panel that can be partially exposed and then dragged/swiped up to reveal content. &lt;/p&gt;

&lt;p&gt;I searched high and low and could not find any acceptable implementations of just such a UI component in React - which was rather shocking, I thought surely someone had solved this rather common UI paradigm already for React!&lt;/p&gt;

&lt;p&gt;I found many implementations of the paradigm in non-web-React formats, here's a couple examples that show what I wanted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Native: &lt;a href="https://github.com/enesozturk/rn-swipeable-panel"&gt;https://github.com/enesozturk/rn-swipeable-panel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flutter: &lt;a href="https://github.com/enesozturk/rn-swipeable-panel"&gt;https://github.com/enesozturk/rn-swipeable-panel&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of those packages look beautiful and I would love to use them! However, the projects I'm working on require React in a browser, so those packages are not options.&lt;/p&gt;

&lt;p&gt;I almost gave up on finding a solution, but yesterday I decided to give it one last try. I thought surely I can implement it myself! I first tried extracting the &lt;code&gt;SwipeableDrawer&lt;/code&gt; component from @material-ui's source, but that proved incredibly painful and never got that working.&lt;/p&gt;

&lt;p&gt;Then I tried writing a simple implementation of a drawer myself using &lt;code&gt;react-swipeable&lt;/code&gt;'s awesome hook. That worked okay, but the FPS (especially on mobile) was HORRIBLE. I'm talking ~10-~12 fps when dragging. NOT accetable.&lt;/p&gt;

&lt;p&gt;Then, almost as if by providence, I stumbled upon this section in &lt;code&gt;react-swipeable&lt;/code&gt;'s docs: &lt;a href="https://github.com/FormidableLabs/react-swipeable#how-to-use-touch-action-to-prevent-scrolling"&gt;https://github.com/FormidableLabs/react-swipeable#how-to-use-touch-action-to-prevent-scrolling&lt;/a&gt; - that mentioned a package I hadn't looked at yet, &lt;a href="https://use-gesture.netlify.app/"&gt;&lt;code&gt;use-gesture&lt;/code&gt;&lt;/a&gt;. By this point, I was exhausted from reading docs and thought that I would just glance at that package, but didn't think anything would be useful. Boy, was I wrong.&lt;/p&gt;

&lt;p&gt;I read the docs in &lt;code&gt;use-gesture&lt;/code&gt; and was subtly impressed. Then I found &lt;a href="https://use-gesture.netlify.app/docs/examples/"&gt;their examples page&lt;/a&gt;, which led me to their example for an "Action Sheet": &lt;a href="https://codesandbox.io/embed/zuwji?file=/src/index.js&amp;amp;codemirror=1"&gt;https://codesandbox.io/embed/zuwji?file=/src/index.js&amp;amp;codemirror=1&lt;/a&gt; - needless to say, I was incredibly impressed!&lt;/p&gt;

&lt;p&gt;I set about porting their code with very minimal tweaks into a reusable &lt;code&gt;BottomDrawer&lt;/code&gt; component that had the various extra niceties I wanted: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drag handle at the top&lt;/li&gt;
&lt;li&gt;Customizable open size / closed size&lt;/li&gt;
&lt;li&gt;Scrollable content area inside the sheet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a good two hours of banging my head against the keyboard, I finally solved all the things I needed and created the following beautiful component (screenshot is at the top of this post). I call it &lt;code&gt;&amp;lt;BottomPanel&amp;gt;&lt;/code&gt; - I know, so original - my excuse is I like to KISS.&lt;/p&gt;

&lt;p&gt;To see a live working example of this component, head over to my website: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://josiahbryan.com/#/bottompanel-demo"&gt;https://josiahbryan.com/#/bottompanel-demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Example of &lt;code&gt;&amp;lt;BottomPanel&amp;gt;&lt;/code&gt; closed:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F35K4h6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmu9y1t95cm44z6opqz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F35K4h6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmu9y1t95cm44z6opqz1.png" alt="BottomPanel Closed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example of &lt;code&gt;&amp;lt;BottomPanel&amp;gt;&lt;/code&gt; open:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtIypJIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqwfsos69pe1f8llg4mu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtIypJIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqwfsos69pe1f8llg4mu.png" alt="BottomPanel Open"&gt;&lt;/a&gt;&lt;br&gt;
Usable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;BottomPanel
    maxOpenHeight={window.innerHeight * 0.8} // px
    closedPanelSize={200} // px
&amp;gt;
    &amp;lt;LoremIpsum /&amp;gt;
&amp;lt;/BottomPanel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the full source for &lt;code&gt;BottomPanel.jsx&lt;/code&gt; and the required styles (&lt;code&gt;BottomPanel.module.scss&lt;/code&gt;) in the following gist:&lt;br&gt;
&lt;a href="https://gist.github.com/josiahbryan/c220708256f7c8d79760aff37f64948f"&gt;https://gist.github.com/josiahbryan/c220708256f7c8d79760aff37f64948f&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
-Josiah Bryan&lt;/p&gt;

</description>
      <category>react</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Anatomy of a Dockerfile</title>
      <author>Mehmet Barış Kalkar</author>
      <pubDate>Sat, 21 Aug 2021 18:27:36 +0000</pubDate>
      <link>https://dev.to/mbaris/anatomy-of-a-dockerfile-4b4p</link>
      <guid>https://dev.to/mbaris/anatomy-of-a-dockerfile-4b4p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-dockerfile"&gt;
  &lt;/a&gt;
  What is a Dockerfile?
&lt;/h2&gt;

&lt;p&gt;Dockerfile is a text document containing commands which can be run in sequence to assemble a docker image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/get-started/02_our_app/"&gt;A sample Dockerfile from the official docs&lt;/a&gt; looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:12-alpine&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; python g++ make
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["node", "src/index.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-them"&gt;
  &lt;/a&gt;
  Why do we need them?
&lt;/h2&gt;

&lt;p&gt;There are millions of images on &lt;a href="https://hub.docker.com/search?q=&amp;amp;type=image"&gt;dockerhub&lt;/a&gt; that we can directly start using with a command like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:80 &lt;span class="nt"&gt;--name&lt;/span&gt; web nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For various reasons, we may want to customize these base images. Docker images are immutable, so we can't &lt;em&gt;exactly&lt;/em&gt; modify them.&lt;br&gt;
We can technically run a container using an existing image, make some changes on it and then create a &lt;em&gt;new&lt;/em&gt; image with these modifications using the &lt;em&gt;commit&lt;/em&gt; command but there is a better way to accomplish this task &lt;br&gt;
However, before we start modifying images, we need to understand the concept of &lt;a href="https://docs.docker.com/storage/storagedriver/"&gt;layers in docker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#images-layers-and-containers"&gt;
  &lt;/a&gt;
  Images, Layers and Containers
&lt;/h3&gt;

&lt;p&gt;Each Docker container consists of a readable and writable layer on top of multiple read only layers.&lt;br&gt;
These read only layers represent instructions in Dockerfiles, and they are deltas on previous layers(similar to git commits)&lt;/p&gt;

&lt;p&gt;Multiple containers can share the underlying layers since they have their own writable/readable layer on top.&lt;br&gt;
The readable and writable layer is a thin layer which has a lifespan associated with the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; tiangolo/uvicorn-gunicorn-fastapi:python3.7&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Mehmet Baris Kalkar"&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; version="1.1"&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api 
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; fast:api&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GREETING="hola"&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./app /project/app&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8090&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8090"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we create a container from this same dockerfile, we will see a log similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;1/4] FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build context
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 56B
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;2/4] RUN addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;3/4] COPY ./app /project/app 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;4/4] WORKDIR /project 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers 
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:3cef1a7b7ddc037fa375a1fb37daa907bc31031fedb4142b98e98e582c0bead5
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/fastapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One important thing to understand is &lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache"&gt;how these instructions are cached&lt;/a&gt;.&lt;br&gt;
The result of some commands like FROM, COPY/ADD, RUN and WORKDIR can be cached.&lt;/p&gt;

&lt;p&gt;Cached instructions are marked in the build command. If we build the same image by changing only the WORKDIR instruction to project2, we would see something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;1/4] FROM docker.io/tiangolo/uvicorn-gunicorn-fastapi:python3.7@sha256:a0e0188a485fd8c232d8774ae4680d3b834f95dd2deccdb0211ce71cfd778b97
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build context
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 56B
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;2/4] RUN addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;3/4] COPY ./app /project/app
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;4/4] WORKDIR /project2
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:fe482845750cf79708d1a6cc107578e76bd843f92fb3092d636180547b32b897
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/fastapi   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at this Dockerfile line by line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# syntax=docker/dockerfile:1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Optional) &lt;em&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/#syntax"&gt;syntax&lt;/a&gt;&lt;/em&gt; is only enabled if we are building the image with &lt;a href="https://docs.docker.com/engine/reference/builder/#buildkit"&gt;BuildKit&lt;/a&gt;&lt;br&gt;
In this line, we can inform the Dockerfile builder which syntax to use while parsing the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; tiangolo/uvicorn-gunicorn-fastapi:python3.7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;FROM&lt;/em&gt; instruction is used to set the base image that we are going to use. &lt;br&gt;
This should always be the first instruction in a Dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Mehmet Baris Kalkar"&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; version="1.1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;LABEL&lt;/em&gt; instructions are used to add metadata to images.&lt;/p&gt;

&lt;p&gt;Side note, There used to be a MAINTAINER instruction in the past, but it is deprecated now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup api &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; adduser fast api 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;RUN&lt;/em&gt; instruction is used to execute commands in a new layer on top of the current image and commit changes.&lt;br&gt;
Following steps will use the new image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; fast:api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;USER&lt;/em&gt; instruction sets the user and group for the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; GREETING="hola"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;ENV&lt;/em&gt; is used to add environment variables to the container. This variable can be used in the following steps during build as well.&lt;br&gt;
If we want to use a variable in only a single command and not in the image, we can define use the RUN command with a variable instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nv"&gt;LOCUST_LOCUSTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;custom_locustfile.py locust
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./app /project/app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;COPY [--chown=:] ... &lt;/em&gt; copies files from source and adds it to the file system of the container&lt;br&gt;
Target path is always relative to the working directory.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ADD&lt;/em&gt; command also has a similar function, but it can also be used to fetch files from a remote URL or extract tar files. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy"&gt;It is preferred to use COPY&lt;/a&gt; &lt;br&gt;
over add because COPY is a more transparent and simple instruction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /project&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;WORKDIR&lt;/em&gt; Sets the working directory to run instructions like CMD, RUN, ENTRYPOINT and COPY after this step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;EXPOSE&lt;/em&gt; is an informational instruction. It does not actually publish any ports, but it is used as a documentation to let &lt;br&gt;
users know which ports should be published to use the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8090"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;CMD&lt;/em&gt; is the instruction to define the command you want to execute when run a container from an image. &lt;br&gt;
It is possible to override this command while actually running the image, so it acts as a default. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;ENTRYPOINT&lt;/em&gt; and &lt;em&gt;CMD&lt;/em&gt; are similar commands, &lt;a href="https://www.ctl.io/developers/blog/post/dockerfile-entrypoint-vs-cmd/"&gt;the differences are explained here pretty well&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VOLUME&lt;/em&gt; command is used to create mounting points within the container. &lt;br&gt;
We can use these volumes to &lt;a href="https://docs.docker.com/storage/volumes/"&gt;share files between containers or the native host&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>Animation React</title>
      <author>Gustavo Scarpim</author>
      <pubDate>Sat, 21 Aug 2021 18:08:27 +0000</pubDate>
      <link>https://dev.to/guscarpim/animation-react-2old</link>
      <guid>https://dev.to/guscarpim/animation-react-2old</guid>
      <description>&lt;p&gt;Today I'm bringing an animation made with GSAP/React, I won't post the entire code because it got a little big, but you can see in my github all the code.&lt;/p&gt;

&lt;p&gt;GSAP is a library that facilitates the creation of animations, making it simple and intuitive.&lt;br&gt;
With it we can animate (CSS properties, canvas library objects, SVG, React, Vue, Angular, generic objects, whatever) and also resolve countless browser inconsistencies, all with incredible speed (up to 20x faster than jQuery ), including automatic GPU acceleration of transforms.&lt;/p&gt;

&lt;p&gt;The GSAP community is very active, and for those who have doubts about creating some animation, I recommend posting it on the GSAP forum &lt;a href="https://greensock.com/forums/"&gt;https:/ /greensock.com/forums/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's an example of an animation that I managed to create using GSAP to help me, I hope you like it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEgmLkR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxy0wnii3wnw800jk43t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEgmLkR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxy0wnii3wnw800jk43t.gif" alt="Gustavo Scarpim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete code here on GitHub &lt;a href="https://github.com/GuScarpim/Cat-Animation"&gt;&lt;b&gt;Click here&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Project in action &lt;a href="https://cat-animation.netlify.app/"&gt;&lt;b&gt;Deploy&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>gsap</category>
    </item>
    <item>
      <title>
Emotion Detection CNN using keras</title>
      <author>Mayank Choudhary</author>
      <pubDate>Sat, 21 Aug 2021 17:42:47 +0000</pubDate>
      <link>https://dev.to/rado_mayank/emotion-detection-cnn-using-keras-20n7</link>
      <guid>https://dev.to/rado_mayank/emotion-detection-cnn-using-keras-20n7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tools-and-libraries-used-"&gt;
  &lt;/a&gt;
  Tools and Libraries used -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install anaconda&lt;/li&gt;
&lt;li&gt;Jupyter notebook&lt;/li&gt;
&lt;li&gt;VSCode&lt;/li&gt;
&lt;li&gt;matplotlib &lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;openCV&lt;/li&gt;
&lt;li&gt;keras


  dataset
  &lt;a href="https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset"&gt;https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset&lt;/a&gt;&lt;br&gt;



&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#given-dataset-of-different-expressions"&gt;
  &lt;/a&gt;
  Given dataset of different expressions:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZT2CSNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro6l2u6nolark9a44atu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZT2CSNf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro6l2u6nolark9a44atu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;source code - &lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mayankchaudhary26"&gt;
        mayankchaudhary26
      &lt;/a&gt; / &lt;a href="https://github.com/mayankchaudhary26/Emotion_Detection_CNN_keras"&gt;
        Emotion_Detection_CNN_keras
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Emotion_Detection_CNN_keras&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/56837137/129614646-5261538f-e67e-45ef-969d-91cce64fc103.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjZNx3OP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/56837137/129614646-5261538f-e67e-45ef-969d-91cce64fc103.png" alt="Screenshot (237)"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
Given dataset of different expressions:&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/56837137/129614578-81814958-85f9-4a19-b52d-cfd9eaa492f9.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vxwh4HDj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/56837137/129614578-81814958-85f9-4a19-b52d-cfd9eaa492f9.png" alt="Screenshot (234)"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset" rel="nofollow"&gt;https://www.kaggle.com/jonathanoheix/face-expression-recognition-dataset&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mayankchaudhary26/Emotion_Detection_CNN_keras"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Emotion Detection — Classifying the emotion on the face as happy, angry, sad, neutral, and surprise.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_J5qyya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj67dfophwicj3uqat14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_J5qyya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj67dfophwicj3uqat14.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>keras</category>
      <category>python</category>
      <category>cnn</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>My best daily dev tool</title>
      <author>Javier Salcedo</author>
      <pubDate>Sat, 21 Aug 2021 17:29:37 +0000</pubDate>
      <link>https://dev.to/javiersalcedopuyo/my-best-daily-dev-tool-1io8</link>
      <guid>https://dev.to/javiersalcedopuyo/my-best-daily-dev-tool-1io8</guid>
      <description>&lt;p&gt;I like to travel and work light. When I'm choosing tools, languages or frameworks, I like to be able to work with minimal setups. The less things I need to use or learn, the better.&lt;/p&gt;

&lt;p&gt;And that's why my favourite tool that I use on a day to day basis is &lt;strong&gt;my tablet&lt;/strong&gt;.&lt;br&gt;
It allows me to merge a lot of other things into a single device that I can carry around and takes almost no space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X56-uuUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj0c5swaico207tmymed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X56-uuUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj0c5swaico207tmymed.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notebook"&gt;
  &lt;/a&gt;
  📓 Notebook
&lt;/h2&gt;

&lt;p&gt;This is most basic tool for any programmer. Period.&lt;br&gt;&lt;br&gt;
If you are not taking notes of &lt;em&gt;everything&lt;/em&gt; already I don't know what are you waiting for, go get yourself a cheap notebook and a pen right now.&lt;/p&gt;

&lt;p&gt;But if you're looking for a cleaner and more flexible alternative, a tablet + pen combo is the best.&lt;br&gt;
It can do all a regular notebook can + allowing you to organise, clean up and backup your notes (and you can also use multiple colours, add pics, etc).&lt;/p&gt;

&lt;p&gt;I personally use &lt;a href="https://www.goodnotes.com/"&gt;GoodNotes&lt;/a&gt;, and I really like the fact that it also has a desktop app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%8A-whiteboard"&gt;
  &lt;/a&gt;
  🖊 Whiteboard
&lt;/h2&gt;

&lt;p&gt;Sadly, with whiteboards size matters, but it's still very useful to make quick diagrams and schemes, while being able to erase and/or modify them, use multiple colour markers, etc.&lt;/p&gt;

&lt;p&gt;There are also apps that allow you to share and present the whiteboard with others, so you can still have the whiteboard collaborative experience.&lt;/p&gt;

&lt;p&gt;Definitely a great feature during this last year and probably a must for any remote programmer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ebook"&gt;
  &lt;/a&gt;
  📚 eBook
&lt;/h2&gt;

&lt;p&gt;As programmers, we always strive for expanding our knowledge.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ybYKv-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpywywm1we5xxza3j7oi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ybYKv-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpywywm1we5xxza3j7oi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That means that we read a lot, and we can end up with a lot of books that we might need to consult.&lt;br&gt;
But carry them around just in case is not viable.&lt;br&gt;
Unless you have them digitalised.&lt;/p&gt;

&lt;p&gt;I still prefer paper books though, specially for technical books.&lt;br&gt;
I simply enjoy reading them more, and I like seeing my little library growing.&lt;br&gt;&lt;br&gt;
However this is all about optimising and convenience.&lt;br&gt;
And for that there's simply nothing better than having your books accessible from anywhere, all in one (digital) place.&lt;br&gt;
That's why nowadays I consider my paper books more like collection items or a treat.&lt;/p&gt;

&lt;p&gt;It also makes searching for specific stuff much faster and eBook versions of books tend to be much much cheaper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-annotating-papers"&gt;
  &lt;/a&gt;
  📝 BONUS: Annotating papers
&lt;/h2&gt;

&lt;p&gt;I guess this could go with the eBook, but papers are normally PDFs, so you're not really replacing anything.&lt;br&gt;&lt;br&gt;
In my line of work, it's not unusual to read research papers fairly often, and being able to take notes directly over them makes it much more convenient and enjoyable.  &lt;/p&gt;

&lt;p&gt;Before having my iPad I used to &lt;em&gt;print&lt;/em&gt; the ones I was more interested on. So I guess it's also a good move for the environment. 🍃&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I use a relatively old iPad with a 1st gen Apple pencil, but obviously you don't need to get into the (expensive) Apple ecosystem. Any tablet compatible with a digital pen would work just as good (if not better).&lt;/p&gt;

&lt;p&gt;If I were to buy one right now I would probably consider getting an e-ink device (the recently announced &lt;a href="https://www.pine64.org/2021/08/15/introducing-the-pinenote/"&gt;PineNote&lt;/a&gt; looks promising.&lt;br&gt;
You give up colours, but they are generally cheaper and better for your eyes and they have less distractions such as games, social media apps, streaming services, etc.&lt;/p&gt;

&lt;p&gt;At the end of the day the best tool is the one you take the most value from, and I use my iPad &lt;strong&gt;constantly&lt;/strong&gt; both for my work as for my personal projects.&lt;/p&gt;

&lt;p&gt;So if you're looking for a tool to improve your development experience and productivity, before you spend money on a fancy keyboard, laptop, IDE license, etc; consider getting one of these.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Macbook's Shopping Cart</title>
      <author>Al Siam</author>
      <pubDate>Sat, 21 Aug 2021 17:05:43 +0000</pubDate>
      <link>https://dev.to/alsiamworld/macbook-s-shopping-cart-4ogo</link>
      <guid>https://dev.to/alsiamworld/macbook-s-shopping-cart-4ogo</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-11"&gt;
  &lt;/a&gt;
  100daysofcode [Day -11]
&lt;/h1&gt;

&lt;p&gt;Hey, would you like to buy a MacBook? Click on the link below and set up the configuration and I will give it to you when I become a pro developer.&lt;br&gt;
Today I created this shopping cart and you will get all the costs in the real-time update.&lt;br&gt;
Live Preview: &lt;a href="https://macbook-carts.netlify.app"&gt;https://macbook-carts.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPY5PwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bak6173pfbq81uu7v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPY5PwBE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6bak6173pfbq81uu7v6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-developer-programming"&gt;
  &lt;/a&gt;
  javascript # #developer #programming
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
