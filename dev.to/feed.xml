<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rails link to React (No API). Yes that's possible!</title>
      <author>Eric Chapman</author>
      <pubDate>Thu, 15 Apr 2021 19:07:28 +0000</pubDate>
      <link>https://dev.to/ericchapman/rails-link-to-react-no-api-yes-that-s-possible-5726</link>
      <guid>https://dev.to/ericchapman/rails-link-to-react-no-api-yes-that-s-possible-5726</guid>
      <description>&lt;h1&gt;Rails link to React (No API) Yes that's possible&lt;/h1&gt;

&lt;p&gt;Everyone will agree that Rails and React combo are a powerful duo! But we all know that building and linking a backend and a frontend take time and resource. Not anymore...&lt;/p&gt;

&lt;p&gt;Discover Inertia.js: Inertia is not another javascript framework. Inertia is glue code that easily bring React and Rails together like they was one! &lt;/p&gt;

&lt;p&gt;Once setup completed, using inertia is very simple, easy and intuitive.&lt;/p&gt;

&lt;p&gt;Imagine be able to render a React component from Rails with a classic render:&lt;/p&gt;

&lt;p&gt;The routing is still manage by Rails (Yeah!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s1"&gt;'home#show'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rails home controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="c1"&gt;# Rails will render a React Component with props!&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React Hello component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5k1ddPRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9344sv9et6j1vrgrmyby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5k1ddPRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9344sv9et6j1vrgrmyby.png" alt="react-rails"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course we could had send something more complex than a string. It is also easy to return database data. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Event/Show'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;event: &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:start_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:description&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Ok you got my attention. So what exactly is Inertia?&lt;/h2&gt;

&lt;p&gt;With Inertia you build apps just like you've always done with your server-side web Rails framework. You use Rails existing functionality for routing, controllers, middleware, authentication, authorization, data fetching, and more.&lt;/p&gt;

&lt;p&gt;The only thing that's different is your view layer. Instead of using server-side rendering (eg. ERB templates), the views are JavaScript page components. This allows you to build your entire front-end using React, Vue or Svelte.&lt;/p&gt;

&lt;p&gt;Inertia also have option for server side rendering, forms helper, modal helper, validation helper and more.&lt;/p&gt;

&lt;h2&gt;How can I install and try Inertia?&lt;/h2&gt;

&lt;p&gt;Create a new rails app with React pre-configure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new demo --webpack=react
cd demo
npm install @inertiajs/inertia @inertiajs/inertia-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add into Gemfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'inertia_rails'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install GEM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add to 'app/javascript/packs/application.js'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@inertiajs/inertia-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;
    &lt;span class="nx"&gt;initialPage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="nx"&gt;resolveComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`./Pages/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nx"&gt;el&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a React component:&lt;br&gt;
app/javascript/packs/Pages/hello.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create your route:&lt;br&gt;
config/routes.rb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s1"&gt;'home#show'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create home controler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g controller home
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;inertia: &lt;/span&gt;&lt;span class="s1"&gt;'Hello'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your rails app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;What's next&lt;/h2&gt;

&lt;p&gt;For complete detail info about Inertia visit there web site at: &lt;a href="https://inertiajs.com/"&gt;https://inertiajs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inertia.js position himself to be a serious and powerful alternative to api. Of course usage in a real big project need to be tested and like everything else, I guess, some limitations will rise. For now the first impression is more than good and the team behind Inertia.js is professional and seem here for the long run.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for this Inertia.js introduction. If you want me to do more inertia post let me know and let me know what you would like me to test?&lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me!: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Algumas Vantagens para aprender React</title>
      <author>Paulo Freitas </author>
      <pubDate>Thu, 15 Apr 2021 18:42:53 +0000</pubDate>
      <link>https://dev.to/paulofreitas_py/algumas-vantagens-para-aprender-react-3fk6</link>
      <guid>https://dev.to/paulofreitas_py/algumas-vantagens-para-aprender-react-3fk6</guid>
      <description>&lt;p&gt;React é uma biblioteca JavaScript criada pelo Facebook e é a biblioteca JavaScript mais famosa e usada. Outras bibliotecas são angular.js e vue.js. Deixe-nos ver as razões pelas quais você deve aprender.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;O React é fácil de usar. &lt;br&gt;
React é a biblioteca JavaScript mais usada porque é fácil de usar e amigável para iniciantes. Os aplicativos da Web são construídos com mais rapidez e sem muito estresse com o React.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trabalhos de alta remuneração.&lt;br&gt;
Como um desenvolvedor React , você será classificado como alto e receberá um salário alto. Nos Estados Unidos, o salário médio de um desenvolvedor React é 120 mil por ano. E você também não precisa se preocupar em conseguir um emprego porque é muito procurado. Principais empresas como Facebook, Netflix, Facebook, Instagram, Whats App, Microsoft, Yahoo, Netflix, PayPal, Imdb, Uber, Wix, Atlassian, CloudFalare, Slack, Dropbox, Salesforce, Airbnb, Reddit, BBC e até Hashnode usa react. A maioria das empresas está procurando desenvolvedores de reação.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React é Reutilizável &lt;br&gt;
O React economiza tempo e dinheiro porque é baseado em componentes. E os componentes podem ser divididos e reutilizados.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aplicativos móveis e VR React não são usados apenas para construir sites, mas também para construir aplicativos móveis e VR (realidade virtual). Você pode trabalhar como desenvolvedor Web, desenvolvedor de aplicativos móveis ou até mesmo um especialista em RV.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Outros exemplos rápidpos:&lt;/p&gt;

&lt;p&gt;1 React é compatível com SEO &lt;br&gt;
2 React é estável &lt;br&gt;
3 React é rápido&lt;/p&gt;

&lt;p&gt;Comece a Aprender React hoje !!!!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>developer</category>
    </item>
    <item>
      <title>System Architecture for Edaqa's Room</title>
      <author>edA‑qa mort‑ora‑y</author>
      <pubDate>Thu, 15 Apr 2021 18:34:58 +0000</pubDate>
      <link>https://dev.to/mortoray/system-architecture-for-edaqa-s-room-5655</link>
      <guid>https://dev.to/mortoray/system-architecture-for-edaqa-s-room-5655</guid>
      <description>&lt;p&gt;I tried explaining to a friend how &lt;a href="https://edaqa.link/EdaqasRoom"&gt;my games&lt;/a&gt; were setup, but it became confusing quickly. Drawing all the component boxes, I’m surprised to see how complex it has become. I think it’s a decent example of modern system architecture, and will go through the setup here. This is for a multiplayer game, so I’ll point out how this might differ from a more typical web application.&lt;/p&gt;

&lt;p&gt;I could reasonably call this architecture the platform on which my game runs. A higher-level of code runs on top of, but is intimately tied, to this platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xVFp-Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qfv0dqo689en1j93a4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xVFp-Nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qfv0dqo689en1j93a4e.png" alt="Architecture diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#client"&gt;
  &lt;/a&gt;
  Client
&lt;/h1&gt;

&lt;p&gt;I like to start at &lt;a href="https://mortoray.com/2019/02/05/the-user/"&gt;the user’s view&lt;/a&gt; on the system, as it keeps me grounded in the system's purpose. Mostly the user interacts via the website, but I also send email confirmation on purchase. The starting point to the game could be via the immediate web link, or the link in the email.&lt;/p&gt;

&lt;p&gt;I was tempted to split the client into a game and website proper, as they are fairly distinct aspects of the system. But the discussion of the website’s logical structure is better left for another article.&lt;/p&gt;

&lt;p&gt;Note the two lines from the browser to the HTTP server. One is normal HTTP traffic, and the other is for WebSocket. Though they go through the same machines, they are handled differently. I’ll provide more detail later, but the way I handle WebSocket is specific to a multiplayer game — a need for a fast response motivates the design.&lt;/p&gt;

&lt;p&gt;In terms of fault tolerance, it’s the client which is most likely to fail. From browser incompatibility to crashes, and slow or lost connections, the client is an endless pool of problems. The servers are virtually faultless by comparison. As this is an interactive multiplayer game, it’s vital to handle common client problems correctly.  The higher level code handles most of the faults, which this architecture supporting it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-processing-services"&gt;
  &lt;/a&gt;
  Cloud Processing Services
&lt;/h1&gt;

&lt;p&gt;The three red boxes contain the abstract aspects of the cloud service. These services are mainly configurations and I have no insight into their internal structure. They contain only transient data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Content Delivery Network (CDN):&lt;/strong&gt; The CDN serves all the static assets of the website and the game. Most of these resources use the web server as the origin, as it gives me the cleanest control over versions. The CDN provides faster loading to the client and reduces load on the host machines. I could do an entire article on the challenges of getting this working. (Service: AWS CloudFront)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP Frontend:&lt;/strong&gt; This takes care of the incoming connections, as well as SSL handling. It provides, when needed, a slow rollout to upgrading the hosts. It’s a security barrier between the public world and my private hosts. Thankfully, it routes both normal HTTP and Websocket traffic. (Service: AWS Elastic Load Balancer) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Email Sender:&lt;/strong&gt; Sends purchase confirmation emails to the user. I mentioned the client layer is fault prone, and email is no exception. You absolutely want a third-party service handling the challenging requirements of modern email. (Service: AWS Simple Email Service)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#host"&gt;
  &lt;/a&gt;
  Host
&lt;/h1&gt;

&lt;p&gt;My host contains several microservices, which I’m grouping into a large block. With Python as the main server language, I was forced into the microservice architecture. Separate processes is the only way I can get stability and parallel processing of these services.&lt;/p&gt;

&lt;p&gt;These are all launched as systemd services on an AWS Linux image.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Web Server:&lt;/strong&gt; Handles all web requests, including static files, templates, game launchers, and APIs. These requests are stateless. (Service: Python Code with Eventlet and Flask)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game Server:&lt;/strong&gt; Implements the game message queues, which are shared message rooms per game — think of it like a chat server with channels. This is stateful per game. It handles client connections and transmits messages but does not understand the logical game state. For fault tolerance, it was vital that misbehaving clients don’t interfere with other games. (Python Code with Asyncio and Websockets)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message Service:&lt;/strong&gt; Migrates game messages from the live database to the long-term database store. This happens regularly to minimize the memory use of the live database, allowing more games to live on one host. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Confirm Service:&lt;/strong&gt; Sends emails when somebody purchases a game. I avoid doing any external processing in the web server itself, instead having it post a job that is handled by this service. This keeps the web server responsive and stable. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stats Service:&lt;/strong&gt; This is a relatively fresh addition, needed for my &lt;a href="https://edaqa.link/EdaqasAffiliates"&gt;affiliate program&lt;/a&gt;. I previously calculated game stats offline for analysis, but am working on features to present those at the end of the game. There is a bit of ping-pong with the web server to get this working. This is external, as it has slow DB queries and slow processing. It operates sequentially, as I do not want multiple stats running in parallel. (Service: Python Code)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Live Database:&lt;/strong&gt; Contains game state for all games on this host. The game uses a sequenced message queue. For a synchronized visual response between players, it is vital this service is fast. Therefore I use a local Redis store to keep live messages, with the message service moving them offline. (Service: Redis)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Message Queue:&lt;/strong&gt; Provides the message queue for these services to talk to each other. This is per-host because a few of the services need access to the Live Data for a game. The Confirm service does not need live data, and I could orchestrate the stats service to not need it either. However, having an additional shared message queue is unnecessary overhead.  (Service: Redis)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The diagram creates siblings of the Live Database and Message Queue boxes, since the same process implements both. This is another point where the needs of the game dictate this local Redis server. Most web apps can probably use an off host queue and an external DB service. When you look at my alternate design later, you’ll see I’d be happy to have this part even faster.&lt;/p&gt;

&lt;p&gt;I estimate a host can handle at least 100 concurrent games, around 400 users, and I dream about the day when I need many hosts. I can also add region specific hosts, providing faster turnaround for groups playing in other countries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#websocket"&gt;
  &lt;/a&gt;
  WebSocket
&lt;/h2&gt;

&lt;p&gt;The diagram shows two different connections between the client and the HTTP Frontend, which continue to the backend.&lt;/p&gt;

&lt;p&gt;The black HTTP connection is stateless, and it doesn’t matter which host it ends up at. Ultimately, when my dreams of high load come to fruition, I’d separate this, putting it on a different host pool, or potentially recreate it as lambda functions.&lt;/p&gt;

&lt;p&gt;The orange WebSocket connection is stateful and must always arrive at the same machine. This is sticky per game; all players of the same game must reach the same machine.  This must be done as a single host to minimize turnaround time. Shared, non-local queues, lambda functions, and DBs, all introduce too much of a response lag. This is particular to a multiplayer game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternate-game-server-design"&gt;
  &lt;/a&gt;
  Alternate Game Server Design
&lt;/h2&gt;

&lt;p&gt;Again, I’m kind of forced into the above architecture because of Python. Should I ever need more performance, or wish to reduce hardware needs, I’d reimplement this, likely choosing C++, though any compiled static language with good threading and async IO would work.&lt;/p&gt;

&lt;p&gt;A new single server would be a single application replacing these services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;game server:&lt;/strong&gt; Depending on the language and framework, this socket handling code could look very different. Much of the speed improvement though would come simply from better data parsing and encoding.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;message service:&lt;/strong&gt; I’d gain more control over when this runs and have an easier time reloading messages for clients&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;stats service:&lt;/strong&gt; I would make this a lot simpler since it wouldn’t need as much cross-process coordination to work.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;live database:&lt;/strong&gt; Simple in memory collections replace the Redis DB, providing faster turnaround, but complicating persistence and fault management.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;message queue:&lt;/strong&gt; The remaining job messages would migrate to a shared queue, like SQS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This alternate architecture is simpler, at least to me, and I estimate it could easily handle 100x as many games on a single host. Or rather, it’d let me handle as many games as now, but with several much smaller hosts. That would improve fault tolerance.&lt;/p&gt;

&lt;p&gt;Added coding time keeps this on the long-term backlog. Unless some here-to-unknown feature appears where I need this, it’ll be cheaper to keep the microservices model and spin up more hosts as required.&lt;/p&gt;

&lt;p&gt;An intermediate solution is to code strictly the websocket channels in another language, since it’s the most inefficient part. Though I recently reprogrammed this part, still in Python, to be &lt;a href="https://mortoray.com/2020/12/06/high-throughput-game-message-server-with-python-websockets/"&gt;massively more efficient&lt;/a&gt;. New rewrites are on the long-term backlog.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h1&gt;

&lt;p&gt;The storage boxes contain all the long-term data for my game. There are no game assets here; I store them on the host where I upload each game. This provides the easiest way to manage game versions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Media Store:&lt;/strong&gt; Holds large static assets which aren’t part of the game proper, such as trailers and marketing materials. I synchronize this on-demand with a local work computer. (Service: AWS S3)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Log Store:&lt;/strong&gt; Collects and stores the logs from the HTTP Frontend. I analyze these offline regularly. (Service: AWS S3)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database:&lt;/strong&gt; This is the heart of my business data, storing purchase information and persisting long-term game state. (Service: Mongo)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#whats-missing"&gt;
  &lt;/a&gt;
  What’s Missing
&lt;/h1&gt;

&lt;p&gt;I’ve left several components out of the diagram to focus on the core experience. I’ll describe them briefly here.&lt;/p&gt;

&lt;p&gt;I don’t show monitoring, partially because it’s incomplete, but also because it’s merely a line from every box to a monitoring agent. The structure doesn’t change for monitoring, but it’s part of the live environment.&lt;/p&gt;

&lt;p&gt;I’ve left DNS out of the diagram for simplicity. I use multiple endpoints for the client, the web server and the CDN, as well as for email, which adds up to many DNS entries. In AWS one has Route 53, but the individual services can thankfully configure, and maintain most of their entries automatically.&lt;/p&gt;

&lt;p&gt;I have many offline scripts that access the database and the log store. This includes accounting scripts which calculate cross-currency payments and affiliate payouts — world sales with tax are a nightmare! I also do analysis of game records to help me design future games.&lt;/p&gt;

&lt;p&gt;There’s an additional system used to manage the mailing list. As the sign-up form is part of the website, and people can follow links from the emails to the website, it is a legitimate part of the architecture.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#layers-upon-layers"&gt;
  &lt;/a&gt;
  Layers upon layers
&lt;/h1&gt;

&lt;p&gt;I’m tempted to call this the hardware architecture, but with cloud services, everything is logical. It’s a definite layer in my system. Can I call it the “&lt;a href="https://en.wikipedia.org/wiki/DevOps"&gt;DevOps&lt;/a&gt; Layer”?&lt;/p&gt;

&lt;p&gt;The website on top of this is fairly standard, but the game is not. I will come back and do some articles about how &lt;a href="https://edaqa.link/EdaqasRoom3"&gt;the game&lt;/a&gt; functions. I can also show how the system architecture and game architecture work together.&lt;/p&gt;

&lt;p&gt;Other than a few game specific parts, the architecture is fairly standard for an internet application. I believe this is a good approach to what I needed.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
      <category>gamedev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Awesome 35+ SVG Resources For Your Next Web Project 💥</title>
      <author>Kiran Raj R</author>
      <pubDate>Thu, 15 Apr 2021 18:26:45 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15</link>
      <guid>https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15</guid>
      <description>&lt;p&gt;I am not going to write about each sites, just go through and explore. Each of these site will give you something for your future projects. If you have any other resources please feel free to comment. Happy Coding&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons 💥
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.iconshock.com/svg-icons/"&gt;Iconshock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/icons"&gt;Icon8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flaticon.com/"&gt;Flaticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freepik.com"&gt;Freepik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.iconninja.com/"&gt;Icon Ninja&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.svgrepo.com/"&gt;SVGrepo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#shape-generators"&gt;
  &lt;/a&gt;
  Shape Generators 💥
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.blobmaker.app/"&gt;Blob Maker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getwaves.io/"&gt;Wave Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svgwave.in/"&gt;Wave Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://squircley.app/"&gt;Squircley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.softr.io/tools/svg-shape-generator"&gt;SVG Shape Generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blobs.app/"&gt;Blobs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  Illustrations 💥
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.drawkit.io/"&gt;Draw Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manypixels.co/gallery?ref=lapaninja"&gt;Manypixels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://freeillustrations.xyz/"&gt;Free Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://illlustrations.co/"&gt;Illlustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2.flexiple.com/scale/all-illustrations"&gt;Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sleekbundle.com/product/pulse-illustration-kit/"&gt;Pulse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucid.pixsellz.io/"&gt;Lucid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ui8.net/"&gt;Ui8&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#svg-backgrounds"&gt;
  &lt;/a&gt;
  SVG Backgrounds 💥
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.svgbackgrounds.com/"&gt;SVG Backgrounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.heropatterns.com/"&gt;Hero Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philiprogers.com/svgpatterns/"&gt;Philiprogers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thepatternlibrary.com/"&gt;The Pattern Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.kennethcachia.com/plain-pattern/"&gt;Plain Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patternico.com/"&gt;Patternico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://products.ls.graphics/paaatterns/preview.html"&gt;Paaatterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://coolbackgrounds.io/"&gt;Cool Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://btmills.github.io/geopattern/"&gt;Btmills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bgjar.com/"&gt;Bgjar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.svgeez.com/"&gt;Svgeez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://patternpad.com/editor.html"&gt;Patternpad&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="http://samherbert.net/svg-loaders/"&gt;SVG Loaders&lt;/a&gt; 💥&lt;/p&gt;

&lt;p&gt;If there is any mistakes or broken link, let me know, I will update. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Code Innovation Series 2021 and Goodies :)</title>
      <author>omar</author>
      <pubDate>Thu, 15 Apr 2021 18:18:49 +0000</pubDate>
      <link>https://dev.to/omar1024/code-innovation-series-2021-and-goodies-1gi1</link>
      <guid>https://dev.to/omar1024/code-innovation-series-2021-and-goodies-1gi1</guid>
      <description>&lt;h4&gt;
  &lt;a href="#winning-code-innovation-series"&gt;
  &lt;/a&gt;
  Winning &lt;a href="http://www.incubateind.com/cis"&gt;Code Innovation series&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;So where do we begin with....&lt;/p&gt;

&lt;p&gt;It all began with our college &lt;em&gt;CSEA&lt;/em&gt; collaborated with &lt;a href="https://www.incubateind.com"&gt;incubateind&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was an hackathon..&lt;br&gt;
Submission criteria was simple and straight. Fork a github repo and submit your project there. Since it was powered by &lt;a href="http://github.com"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Themes of hackathon were &lt;strong&gt;health/Medical , Education/Learning and Fintech&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since only two days were provided for the hackathon and with no team, I obviously chose fintech because I had past experience with it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;My idea was simple too. Predict the stocks of a company and tell company when to sell or buy stocks based on their previous stock data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;okay okay ! I won't go deep into the details of the project. But I can vaguely tell you about how I got second runner up prize!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I used moving averages and exponential moving averages concept in my project to predict when to buy or sell stocks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tools and Languages used were Jupyter Notebook and Python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stock Data is taken from yfinance which is available as pip package.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So After coding and all is done, I forked the github repo and submitted the project. Only 5 projects were selected for jury round.&lt;/p&gt;

&lt;p&gt;Here is the link to all those &lt;a href="https://github.com/NIT-C/CISHack-NITCalicut/pulls"&gt;5-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coming to jury round, I made a presentation using google slides. Again I tried to keep it simple too. I included explanation about the algorithm used, room for development etc&lt;/p&gt;

&lt;p&gt;And at last 3 teams were selected and I was third runner-up. The other two teams' themes were Education/Learning.  &lt;/p&gt;

&lt;p&gt;All the three teams were provided with Github goodies and Free tickets to github workshops too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#trickstips-i-learnt-in-hackathon-"&gt;
  &lt;/a&gt;
  Tricks/tips I learn't in hackathon :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Do something that you are good at&lt;/li&gt;
&lt;li&gt;Teams are good but If you think you can do it alone go for it, because it will save a lot of time&lt;/li&gt;
&lt;li&gt;Keep your code simple and stupid&lt;/li&gt;
&lt;li&gt;Be confident and cool&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>incubateind</category>
    </item>
    <item>
      <title>Getting Started with Aerospike Enterprise Edition On Docker Desktop</title>
      <author>Mark Prince</author>
      <pubDate>Thu, 15 Apr 2021 17:41:58 +0000</pubDate>
      <link>https://dev.to/aerospike/getting-started-with-aerospike-enterprise-edition-on-docker-desktop-14i0</link>
      <guid>https://dev.to/aerospike/getting-started-with-aerospike-enterprise-edition-on-docker-desktop-14i0</guid>
      <description>&lt;p&gt;What’s the fastest way to start using &lt;a href="https://www.aerospike.com/products/database-platform/"&gt;Aerospike Database Enterprise Edition&lt;/a&gt;? The title gives it away: spin up a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container! Let’s get you from zero to running your own Aerospike Enterprise Edition instance in &amp;lt;10 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-a-free-enterprise-edition-license"&gt;
  &lt;/a&gt;
  Get a Free Enterprise Edition License
&lt;/h2&gt;

&lt;p&gt;Click the &lt;a href="https://www.aerospike.com/lp/try-now/"&gt;Try Now&lt;/a&gt; button in the upper-right corner of &lt;a href="https://www.aerospike.com/"&gt;aerospike.com&lt;/a&gt;, enter your contact information and select the Enterprise Edition option.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDgDCqkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/try_now.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img width="115" height="47" src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDgDCqkO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/try_now.png%3Fraw%3Dtrue"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#download-the-evaluation-license-file"&gt;
  &lt;/a&gt;
  Download the Evaluation License File
&lt;/h2&gt;

&lt;p&gt;Check your email and click to download the evaluation license file. The downloaded file is named &lt;em&gt;evaluation-features.conf&lt;/em&gt;. This is your license to run a fully loaded single node of Aerospike Enterprise Edition (EE). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSjy1H22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/as_ee_welcome.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSjy1H22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/as_ee_welcome.png%3Fraw%3Dtrue" alt="Welcome to the Aerospike Family"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-volume-to-share-with-the-docker-container"&gt;
  &lt;/a&gt;
  Create a Volume to Share with the Docker Container
&lt;/h2&gt;

&lt;p&gt;Open your Terminal or Windows Linux Subsystem prompt. Use &lt;code&gt;mkdir&lt;/code&gt; (or &lt;code&gt;sudo mkdir&lt;/code&gt;, if necessary)  to create a new directory. I created the directory named EE_eval_file in my home directory. Use &lt;code&gt;cp&lt;/code&gt; or &lt;code&gt;sudo cp&lt;/code&gt; to copy the &lt;em&gt;evaluation-features.conf&lt;/em&gt; into the new directory.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: A best practice is to create &lt;code&gt;/opt/aerospike/etc&lt;/code&gt;, because this mirrors the standard location for the &lt;em&gt;evaluation-features.conf&lt;/em&gt; file on an Aerospike server. To create that directory, use the command &lt;code&gt;sudo mkdir -p /opt/aerospike/etc&lt;/code&gt;. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#install-docker-desktop-amp-share-the-evaluation-features-directory"&gt;
  &lt;/a&gt;
  Install Docker Desktop &amp;amp; Share the Evaluation Features Directory
&lt;/h2&gt;

&lt;p&gt;Download and install &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Docker Desktop, go to Preferences → Resources → File Sharing. Click &lt;code&gt;+&lt;/code&gt; and browse to the directory you created in the previous step to hold your &lt;em&gt;evaluation-features.conf&lt;/em&gt; file. (Hold Command + Shift when you click to show hidden directories.) To apply the change, click Apply &amp;amp; Restart. Now your EE container will be able to access your evaluation license.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXzMzgig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_file_share.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXzMzgig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_file_share.png%3Fraw%3Dtrue" alt="Docker Preferences Showing New Share"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can close Docker Desktop. You will do the rest from the command line.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pull-and-spin-up-an-enterprise-edition-container"&gt;
  &lt;/a&gt;
  Pull and Spin Up an Enterprise Edition Container
&lt;/h2&gt;

&lt;p&gt;Pull the EE image from the Docker Hub registry using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull aerospike/aerospike-server-enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aerospike maintains a set of images and Docker does the grunt work of downloading and verifying the EE image. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySwDOX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_ee.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySwDOX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_ee.png%3Fraw%3Dtrue" alt="Screencap of Docker Pull EE"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Now, you’re ready to spin up your EE container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker run -tid --name aerospike -p 3000:3000 -p 3001:3001 -p 3002:3002 -v &amp;lt;DIRECTORY&amp;gt;:/aerospike/etc/ -e "FEATURE_KEY_FILE=/aerospike/etc/evaluation-features.conf" -e "NAMESPACE=aerospike-demo" aerospike/aerospike-server-enterprise
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the text &lt;code&gt;&amp;lt;DIRECTORY&amp;gt;&lt;/code&gt; with the absolute path to the directory containing your &lt;em&gt;evaluation-features.conf&lt;/em&gt; file. If using Windows Linux Subsystem, make sure to use your Windows backslashes and drive designations. &lt;/p&gt;

&lt;p&gt;Here’s the &lt;a href="https://docs.docker.com/engine/reference/commandline/run/"&gt;docker run reference&lt;/a&gt;, and the &lt;a href="https://github.com/aerospike/aerospike-server-enterprise.docker"&gt;repo and README.md for the EE dockerfile&lt;/a&gt; so you can tailor the command to better suit your evaluation.&lt;/p&gt;

&lt;p&gt;After you type in your password for the sudo, Docker returns the container ID.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGSb8vsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_run_ee.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGSb8vsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_run_ee.png%3Fraw%3Dtrue" alt="Screencap of Docker Run EE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, your EE container should be running. Verify with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x_fczlxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_ps.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x_fczlxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_ps.png%3Fraw%3Dtrue" alt="Screencap of Docker PS"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-i-have-ee-running-now-what"&gt;
  &lt;/a&gt;
  Okay, I have EE running, now what?
&lt;/h2&gt;

&lt;p&gt;It’s play time! :) Let’s add a record and read it using the aerospike-tools Docker Container. First, grab the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker pull aerospike/aerospike-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZdEg9Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_tools.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZdEg9Ip--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/docker_pull_tools.png%3Fraw%3Dtrue" alt="Screencap of Docker Pull Tools"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Next, spin up a new container running &lt;a href="https://www.aerospike.com/docs/tools/aql/index.html"&gt;AQL&lt;/a&gt;, the Aerospike command-line data browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -it aerospike/aerospike-tools aql -h  $(docker inspect -f '{{.NetworkSettings.IPAddress }}' aerospike)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since AQL is running in a different container from the instance of EE, the above command uses &lt;a href="https://docs.docker.com/engine/reference/commandline/inspect/"&gt;docker inspect&lt;/a&gt; to find the IP address of your EE container, and passes it to AQL using the &lt;a href="https://www.aerospike.com/docs/tools/aql/aql-help.html"&gt;-h option&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, you can type interactive commands into AQL in your Terminal or WLS prompt. Insert a record into Aerospike EE using the following &lt;a href="https://www.aerospike.com/docs/architecture/data-model.html"&gt;data model&lt;/a&gt;:&lt;br&gt;
Namespace – &lt;em&gt;aerospike-demo&lt;/em&gt; (set in the first docker run command) &lt;br&gt;
Set name – &lt;em&gt;foo&lt;/em&gt; &lt;br&gt;
Bin name – &lt;em&gt;bar&lt;/em&gt;&lt;br&gt;
Primary key – &lt;em&gt;123&lt;/em&gt;&lt;br&gt;
String data – &lt;em&gt;‘w00t!’&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into aerospike-demo.foo (PK, bar) values (123, 'w00t!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and view all data in the namespace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select * from aerospike-demo.foo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2X8t9yD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/aql_w00t.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2X8t9yD7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/markprincely/asblog_gs_docker_enterprise-edition/blob/main/aql_w00t.png%3Fraw%3Dtrue" alt="Screencap of Insert and Select"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps...
&lt;/h2&gt;

&lt;p&gt;Now that Aerospike Enterprise Edition is running, you can download and install an &lt;a href="https://www.aerospike.com/download/client/"&gt;Aerospike client&lt;/a&gt;, and then REALLY put your Aerospike EE to work. &lt;/p&gt;

&lt;p&gt;Do you want to learn more about using Aerospike Database? Check out our &lt;a href="https://www.developer.aerospike.com/"&gt;Developer Hub&lt;/a&gt;. There’s a wealth of resources available there to jump-start your Aerospike education! I’m excited for you. If you have any questions, feel free to post on the &lt;a href="https://discuss.aerospike.com/"&gt;Forums&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy efficient management of data at scale!&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://unsplash.com/photos/7iatBuqFvY0?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Yaoqi&lt;/a&gt; for the match.&lt;/p&gt;

</description>
      <category>aerospike</category>
      <category>database</category>
      <category>datascience</category>
      <category>nosql</category>
    </item>
    <item>
      <title>My most frequent React errors and how you fix them</title>
      <author>Kieran Roberts 👋</author>
      <pubDate>Thu, 15 Apr 2021 17:29:36 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/my-most-frequent-react-errors-and-how-you-fix-them-3epp</link>
      <guid>https://dev.to/kieran6roberts/my-most-frequent-react-errors-and-how-you-fix-them-3epp</guid>
      <description>&lt;p&gt;When using the popular JavaScript library &lt;strong&gt;React&lt;/strong&gt; there are some errors/problems that seem to pop up time and time again. They can be easily avoided in most situations and I would like to share them with you so you can spend less time debugging and more time writing code.&lt;/p&gt;

&lt;p&gt;So let's not waste any time and take a look at our problems and how we can solve them 👏.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Forgetting to add keys with a list of elements&lt;/li&gt;
&lt;li&gt;Not returning a list correctly&lt;/li&gt;
&lt;li&gt;Not cleaning up certain &lt;code&gt;useEffect&lt;/code&gt; side-effects&lt;/li&gt;
&lt;li&gt;Not wrapping adjacent JSX elements&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-forgetting-to-add-keys-with-a-list-of-elements"&gt;
  &lt;/a&gt;
  1) Forgetting to add keys with a list of elements
&lt;/h2&gt;

&lt;p&gt;In React we often find ourselves with lists of data that we want to map into elements or components. This is often done using the &lt;code&gt;Array.prototype.map&lt;/code&gt; function to pass data from each index of the array to the element or component through props.&lt;/p&gt;

&lt;p&gt;When we do this without adding a &lt;code&gt;key&lt;/code&gt; prop React will complain that each element is missing a &lt;code&gt;key&lt;/code&gt;. Essentially it is just a special attribute to which we pass a string. It should be a unique string which will distinguish it from its siblings that we are also mapping.&lt;/p&gt;

&lt;p&gt;React says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;Let's map some data before adding keys to our elements to see the problem in action. Here we will have a simple component that deconstructs &lt;code&gt;foods&lt;/code&gt; from the prop object. &lt;code&gt;foods&lt;/code&gt; is just an array of objects and it looks like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1GhQvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616319710734/6rUdcew2_.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1GhQvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616319710734/6rUdcew2_.jpeg" alt="Our example data set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and our component 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED6HjWVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097340131/FXRGm0Ja8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED6HjWVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097340131/FXRGm0Ja8.jpeg" alt="mapped elements without key prop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and finally the warning from React 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u884G_H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097229831/VhLrfT86h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u884G_H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616097229831/VhLrfT86h.jpeg" alt="missing key warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;To fix this all we have to do is pass a unique key to the element we are returning. Often the data we are mapping comes from a fetch request and usually includes an id. Fortunately we have and &lt;code&gt;id&lt;/code&gt; property we can use from our set of data. Let's add our &lt;code&gt;key&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DlVIKOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616320768295/os2fTkk5n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DlVIKOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616320768295/os2fTkk5n.jpeg" alt="After adding our key prop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we didn't have a unique id we would need to have an alternative solution. Often people use the index of the array as the &lt;code&gt;key&lt;/code&gt; but this is not recommended for any set of data where positions in the list  may change. It can negatively affect the state of the component. See here for more information &lt;a href="https://reactjs.org/docs/reconciliation.html#recursing-on-children"&gt;Reactjs - Reconciliation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead we could create our key by combining the &lt;code&gt;name&lt;/code&gt; property with the current date/time using the JavaScript &lt;code&gt;Date&lt;/code&gt; object. You could also use a package like &lt;a href="https://www.npmjs.com/package/nanoid"&gt;nanoid&lt;/a&gt; that generates unique string id's for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-not-returning-a-list-correctly"&gt;
  &lt;/a&gt;
  2) Not returning a list correctly
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To return or not to return&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In React as we have already seen we are often iterating over some data . Perhaps we are filtering a data set down to a specific sub-set or mapping to the DOM. Whatever it is there are a few pitfalls we need to watch out for when it comes to returning our data otherwise we might be left scratching our heads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;A frustrating example can be seen when we map a data set to some elements or components. We expect to see the or elements on screen with the data we map into them. However we see nothing.&lt;/p&gt;

&lt;p&gt;No error, no warning no data 🤨. In this situation it is likely that you're not returning your result correctly.&lt;/p&gt;

&lt;p&gt;For our example we will be mapping our array of foods to some elements so we can show it to the user. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJHc8sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091546766/lvvPV1DEv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJHc8sRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091546766/lvvPV1DEv.jpeg" alt="Correct return demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead our data will appear to be missing 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrbDA1Nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091661813/ixeEBjbHO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrbDA1Nv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616091661813/ixeEBjbHO.jpeg" alt="Incorrect return demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me show you some examples where we won't see the output that we were expecting. We are passing our array to our component and destructuring it from the prop object the same as before.&lt;/p&gt;

&lt;p&gt;Can you spot the problem below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13eYTBhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322199327/hc-IGwpvu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13eYTBhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322199327/hc-IGwpvu.jpeg" alt="Example of not returning correclty"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Correct! Here we are not returning anything either implicitly or explicitly using the &lt;code&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;Let's take a look at another  👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCvXLHkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322293046/tFRUeU4F9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCvXLHkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322293046/tFRUeU4F9.jpeg" alt="Second example of not returning correctly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time we include the &lt;code&gt;return&lt;/code&gt; keyword but what we are actually doing here is returning &lt;code&gt;undefined&lt;/code&gt;. The code below the return statement never gets read.&lt;/p&gt;

&lt;p&gt;There are other examples you might run into but let's take a look at the different solutions we can use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Let's start with the explicit returns. If we move our &lt;code&gt;article&lt;/code&gt; element in line with the return statement all is well. &lt;/p&gt;

&lt;p&gt;See below 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUWIPmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322563273/b5DhsigYN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOUWIPmi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322563273/b5DhsigYN.jpeg" alt="Example of correct explicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could also wrap the return elements with parenthesis like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hR0wtrDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322655801/uSlQpxqxJ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hR0wtrDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322655801/uSlQpxqxJ.jpeg" alt="Example of correct explicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is to return the result implicitly which means we can forget the &lt;code&gt;return&lt;/code&gt; statement and the function body curly braces. Check it out 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Adx8GgLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322842007/nwRlqVGQN.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Adx8GgLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322842007/nwRlqVGQN.jpeg" alt="Example of correct implicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or inline like this 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNvyYPGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322878711/54EU5aA4P.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNvyYPGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616322878711/54EU5aA4P.jpeg" alt="Example of correct implicit return"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The choice is up to you as long as you are aware of the possible pitfalls you encounter. If the data appears to be missing make sure you check your map function carefully and make sure you are actually returning correctly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-not-cleaning-up-certain-raw-useeffect-endraw-sideeffects"&gt;
  &lt;/a&gt;
  3) Not cleaning up certain &lt;code&gt;useEffect&lt;/code&gt; side-effects
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook allows us to perform side-effects inside functional components. Certain side-effects that we perform in this hook require cleanup. This means that when the component unmounts we can run a special function. Sometimes this is necessary otherwise we might see an error warning us of memory leaks in our apps.&lt;/p&gt;

&lt;p&gt;Consider a &lt;code&gt;useEffect&lt;/code&gt; that performs some kind of asynchronous api call before setting some component state to the response. If the response is slow and the component unmounts before we receive a response then we might be trying to update the state of a component that is not mounted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;Let's take a look at two different situations where we might add some cleanup to our &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first is a situation is where we have an asynchronous fetch request inside our &lt;code&gt;useEffect&lt;/code&gt; hook. The user of the application navigates to a different page before we receive the response from the fetch call. This is our component before we add a cleanup function to the&lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hX36OEbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616093842029/q9hZoLWhz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hX36OEbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616093842029/q9hZoLWhz.jpeg" alt="React useEffect before cleanup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are fetching some data after the component mounts and then using the result to set the components state. Finally we map the state to the DOM. Relatively straight forward 👍.&lt;/p&gt;

&lt;p&gt;The second situation is where we add some &lt;code&gt;eventListeners&lt;/code&gt; to some DOM elements. If the component unmounts we are going to want to remove these listeners.&lt;/p&gt;

&lt;p&gt;Check it out before we clean it up 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDc49Psc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148044886/8QpSp5s1C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDc49Psc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148044886/8QpSp5s1C.jpeg" alt="Before adding our cleanup function to useEffect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic inside our &lt;code&gt;useEffect&lt;/code&gt; is irrelevant for this simple example. All that matters is that we are adding an event listener and that will need to be cleaned up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;We begin by adding a cleanup function to our &lt;code&gt;useEffect&lt;/code&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gyKlNVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094306440/CsabPIn7C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gyKlNVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094306440/CsabPIn7C.jpeg" alt="useEffect cleanup function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is simply a function that we add to the bottom of our &lt;code&gt;useEffect&lt;/code&gt; hook where we add our cleanup logic.&lt;/p&gt;

&lt;p&gt;Now to cleanup our fetch request we can use the DOM api &lt;code&gt;AbortController&lt;/code&gt; which is available in JavaScript. It allows us to abort web requests which we will use to abort out of the fetch request whenever the component unmounts. Let's see it in action 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fepf-K5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094823496/Bj_AASqiD.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fepf-K5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616094823496/Bj_AASqiD.jpeg" alt="React useEffect fetch cleanup function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First we create a controller by using the constructor with &lt;code&gt;new AbortController()&lt;/code&gt; and then we pass its property signal to the fetch request. This association of controller signal to the request allows us to abort the request by calling &lt;code&gt;abort()&lt;/code&gt; inside the cleanup function.&lt;/p&gt;

&lt;p&gt;Now we are ensuring that we don't have any requests coming back to a component that is not mounted.&lt;/p&gt;

&lt;p&gt;The cleanup function for our &lt;code&gt;eventListener&lt;/code&gt; example is simple which you might have already guessed. All we need to do is remove any listeners we create using &lt;code&gt;removeEventListener&lt;/code&gt; in our cleanup function. Let's see it in action 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEhOYtjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616095810890/1r2ISzE03.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEhOYtjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616095810890/1r2ISzE03.jpeg" alt="React useEffect listener cleanup example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully now like me you won't forget to clean up your effects 😉.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-not-wrapping-adjacent-jsx-elements"&gt;
  &lt;/a&gt;
  4) Not wrapping adjacent JSX elements
&lt;/h2&gt;

&lt;p&gt;This one is simple to debug but I though I would include it because I sometimes forget to do it until React starts shouting at me 😅. &lt;/p&gt;

&lt;p&gt;Adjacent JSX elements must be wrapped with an enclosing tag. There are a few different ways we can do this based on our requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-problem"&gt;
  &lt;/a&gt;
  Example Problem
&lt;/h3&gt;

&lt;p&gt;If we want the wrapper to be part of the DOM for structural purposes then go with some semantic element where possible (&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; etc.). I usually wouldn't recommend wrapping elements with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; although it is fine if you want the wrapper for styling purposes.&lt;/p&gt;

&lt;p&gt;Often we do not want the wrapper to part of the DOM because it serves no purpose there. We would only be adding markup only to shut React up. &lt;/p&gt;

&lt;p&gt;Let's see the problem in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tm6r-Oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148632836/OIPeZEhWo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tm6r-Oo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616148632836/OIPeZEhWo.jpeg" alt="Example component not wrapping adjacent JSX"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the error it throws 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysipratn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616324446263/8d7lh2I4s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysipratn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616324446263/8d7lh2I4s.jpeg" alt="Adjacent JSX error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is likely that your code editor gave you a warning about this before the error pops up which is great.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;Fortunately React provides us with a solution. We can use &lt;code&gt;React.Fragment&lt;/code&gt; to wrap our adjacent JSX if we do not require the wrapper to be part of the DOM. Let's say this is the case for the following example.  &lt;/p&gt;

&lt;p&gt;First let's use &lt;code&gt;React.Fragment&lt;/code&gt; before we see how we can simplify it further.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZHMSMhcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151255932/oiUWsfKSg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZHMSMhcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151255932/oiUWsfKSg.jpeg" alt="Wrapping adjacent JSX with React.Fragment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we don't need any attributes or keys for our fragment we can shorten &lt;code&gt;React.Fragment&lt;/code&gt; to this &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; empty tag. Have a look below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9bCpxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151408216/ZujqMuMMe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rm9bCpxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616151408216/ZujqMuMMe.jpeg" alt="Wrapping adjacent JSX with React.Fragment shortened syntax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally if we are mapping some data to JSX as we have previously seen then we need to add keys to our wrapping element. If all we have is adjacent JSX then we can wrap our elements with &lt;code&gt;React.Fragment&lt;/code&gt; and add a unique key to the fragment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk_eiifG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616152071199/3FGAy87WV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zk_eiifG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616152071199/3FGAy87WV.jpeg" alt="Wrapping our mapped adjacent JSX with React.fragment and a unique key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for getting this far! I hope you learned something from the article and now we can both make sure we avoid these problems in our future code.&lt;/p&gt;

&lt;p&gt;If you enjoyed it feel free to drop a 👍 on the article. It inspires me to continue improving and make more awesome content.&lt;/p&gt;

&lt;p&gt;If you would like to connect with me then come an say hi &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt; as I am always active in communicating with other devs over on Twitter.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Managing View State With Combine</title>
      <author>Omar 👾</author>
      <pubDate>Thu, 15 Apr 2021 17:25:06 +0000</pubDate>
      <link>https://dev.to/obscured_pixels/managing-view-state-with-combine-p8k</link>
      <guid>https://dev.to/obscured_pixels/managing-view-state-with-combine-p8k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#data-flow"&gt;
  &lt;/a&gt;
  Data Flow
&lt;/h3&gt;

&lt;p&gt;SwiftUI's built in state management system does a great a job in providing an out of the box data flow solution that alleviates a lot of the pain points associated with manually updating UI based on state changes. &lt;/p&gt;

&lt;p&gt;As your codebase grows and you find yourself leaning towards incorporating common architectural patterns, you'll likely come across the need to separate some state specific logic into a view model. Swift's Combine framework provides some great property wrappers to ease this transition via &lt;code&gt;@PublishSubject&lt;/code&gt; and &lt;code&gt;@ObservedObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some great articles that go into depth about these topics. I highly suggest you check them out if you aren't yet familiar with these concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://swiftwithmajid.com/2020/02/05/building-viewmodels-with-combine-framework/"&gt;Building ViewModels with Combine framework - Majid Jabrayilov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.raywenderlich.com/4161005-mvvm-with-combine-tutorial-for-ios"&gt;MVVM with Combine Tutorial for iOS - Rui Peres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.donnywals.com/using-custom-publishers-to-drive-swiftui-views/"&gt;Using custom publishers to drive SwiftUI views - Donny Wals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continuing where the articles left off, I've put together a &lt;code&gt;TodoListView&lt;/code&gt; that observes and reacts to a &lt;code&gt;ViewState&lt;/code&gt; published by its &lt;code&gt;ViewModel&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;struct TodoListView: View {
    @ObservedObject
    private var viewModel = ViewModel()
    var body: some View {
        content(viewModel.viewState)
            .onAppear {
                viewModel.loadTodos()
            }
    }

    @ViewBuilder
    private func content(_ state: ViewState) -&amp;gt; some View {
        switch state {
        case .loading:
            ProgressView()
        case .error:
            Text("Oops something went wrong")
                .padding()
        case .content(let todos):
            List {
                ForEach(todos) { todo in
                    Text(todo.title)
                }
            }
        }
    }
}

extension TodoListView {
    enum ViewState {
        case loading
        case content(todos: [Todo])
        case error
    }

    class ViewModel: ObservableObject {
        @Published
        var viewState: ViewState = .loading
        private let todoRepository = TodoRepistory()
        private var cancellables = Set&amp;lt;AnyCancellable&amp;gt;()

        func loadTodos() {
            self.viewState = .loading
            todoRepository.getTodos()
                .sink { [weak self] completion in
                    switch completion {
                    case .failure:
                        self?.viewState = .error
                    case .finished:
                        ()
                    }
                } receiveValue: { [weak self] todos in
                    self?.viewState = .content(todos: todos)
                }
                .store(in: &amp;amp;cancellables)
        }

        // ....
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This setup already has some great benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our &lt;code&gt;View&lt;/code&gt; is free of any state management logic. This allows us to unit test and even share that logic between other views&lt;/li&gt;
&lt;li&gt;By conforming to the &lt;code&gt;ObservableObject&lt;/code&gt; protocol and leveraging the &lt;code&gt;@Published&lt;/code&gt; property wrapper, we've managed to make that separation easily consumable by our View. It works very similar to reacting off a &lt;code&gt;@State&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;We've got a nice repeatable pattern that we can apply to future views that require complex logic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we can definitely call it a day and move on, you might find yourself wondering what other patterns can we apply here that further adhere to the reactive mantra&lt;/p&gt;

&lt;p&gt;I want to highlight that what I'm about to showcase is pretty much a Combine + SwiftUI remix of Jake Wharton's outstanding talk &lt;a href="https://www.youtube.com/watch?v=0IKHxjkgop4"&gt;Managing State with RxJava&lt;/a&gt;. It's about an hour but I can't emphasize enough how amazing his presentation is and how much it inspired me to apply reactive programming to more than just networking and repository logic. It's in Java but thanks to the language's verbosity it's possible to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#room-for-improvement"&gt;
  &lt;/a&gt;
  Room for improvement
&lt;/h3&gt;

&lt;p&gt;Looking at the current state of our view model there are a few things that seem unnatural:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func loadTodos() {
    self.viewState = .loading
    todoRepository.getTodos()
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] todos in
            self?.viewState = .content(todos: todos)
        }
        .store(in: &amp;amp;cancellables)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting state outside of the stream seems misplaced and requires one to remember to revert the loading state during success and failure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ..
func addTodo(title: String) {
    todoRepository.addTodo(title: title)
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] todo in
            if case .content(var todos) = self?.viewState {
                todos.append(todo)
                self?.viewState = .content(todos: todos)
            }
        }
        .store(in: &amp;amp;cancellables)
}

func removeTodo(id: String) {
    todoRepository.removeTodo(id: id)
        .sink { [weak self] completion in
            switch completion {
            case .failure:
                self?.viewState = .error
            case .finished:
                ()
            }
        } receiveValue: { [weak self] _ in
            if case .content(var todos) = self?.viewState {
                todos.removeAll(where: { $0.id == id})
                self?.viewState = .content(todos: todos)
            }
        }
        .store(in: &amp;amp;cancellables)
}
// ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As our view model grows in functionality, you'll notice our code will quickly get heavy with boilerplate subscription code. While we could clean this up and utilize the&lt;code&gt;assign(to:)&lt;/code&gt; operator, they'd still be another peculiar characteristic of our state management; the lack of a centralized view state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F1zhcD17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389298930/jy1pvpzuS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1zhcD17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389298930/jy1pvpzuS.png" alt="untitled@2x.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redux/Flux's unidirectional data flow pattern solves a lot of the complexities of having state mutated throughout various areas in the codebase, yet here we are updating our view state throughout various areas of our view model.  &lt;/p&gt;

&lt;p&gt;How can we adjust our state management approach to alleviate these concerns?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs-actions-and-viewstate"&gt;
  &lt;/a&gt;
  Inputs, Actions and ViewState
&lt;/h3&gt;

&lt;p&gt;Looking at our &lt;code&gt;TodoListView&lt;/code&gt; from a behavioral point of view, we can quickly identify some common cause and effect patterns. When a user loads the view, they'd request a list of Todos. When a user adds a Todo, the list will update with the newly added list etc. We could summarize that a user triggered input is causing our app or view model to respond and react to it, resulting in an updated view state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxoW4LiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389802248/3wTfvQzOV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxoW4LiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618389802248/3wTfvQzOV.png" alt="untitled@2x (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sort of pattern is reactive in nature. Inputs can be happening in more than one place at a time and processing those inputs might require async operations. Reactive frameworks like Combine were made for these sort of circumstances and come with some handy operators that can help us gel this pattern into a consumable reactive state.&lt;/p&gt;

&lt;p&gt;Let's see what an implementation that incorporates those operators might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extension TodoListView {
    enum ViewState {
        case loading
        case content(todos: [Todo])
        case error
    }

    enum Input {
        case stateRequested
        case todoAdded(title: String)
        case todoRemoved(id: String)
    }

    enum Action {
        case setState(ViewState)
        case addTodo(todo: Todo)
        case removeTodo(id: String)
    }

    class ViewModel: ObservableObject {
        @Published
        var viewState: ViewState = .loading
        private let todoRepository = TodoRepistory()
        private let inputSubject = PassthroughSubject&amp;lt;Input, Never&amp;gt;()
        private var cancellables = Set&amp;lt;AnyCancellable&amp;gt;()

        init() {
            inputSubject
                .flatMap { [todoRepository] input -&amp;gt; AnyPublisher&amp;lt;Action, Never&amp;gt; in
                    switch input {
                    case .stateRequested:
                        return todoRepository.getTodos()
                            .map { todos -&amp;gt; Action in
                                .setState(.content(todos: todos))
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    case .todoAdded(let title):
                        return todoRepository.addTodo(title: title)
                            .map { todo -&amp;gt; Action in
                                .addTodo(todo: todo)
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    case .todoRemoved(let id):
                        return todoRepository.removeTodo(id: id)
                            .map { _ -&amp;gt; Action in
                                .removeTodo(id: id)
                            }
                            .replaceError(with: .setState(.error))
                            .eraseToAnyPublisher()
                    }
                }
                .scan(viewState) { (currentState, action) -&amp;gt; ViewState in
                    switch action {
                    case .setState(let state):
                        return state
                    case .addTodo(let todo):
                        if case .content(var todos) = currentState {
                            todos.append(todo)
                            return .content(todos: todos)
                        }
                        return currentState
                    case .removeTodo(let id):
                        if case .content(var todos) = currentState {
                            todos.removeAll(where: { $0.id == id })
                            return .content(todos: todos)
                        }
                        return currentState
                    }
                }
                .receive(on: DispatchQueue.main)
                .assign(to: &amp;amp;$viewState)
        }

        func send(_ input: Input) {
            inputSubject.send(input)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are quite a few things going on here, so let's walk through them step by step.&lt;/p&gt;

&lt;p&gt;We first create an entity to describe possible inputs that can occur to our view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    enum Input {
        case stateRequested
        case todoAdded(title: String)
        case todoRemoved(id: String)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These inputs can end up affecting our view state. Let's call these effects actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    enum Action {
        case setState(ViewState)
        case addTodo(todo: Todo)
        case removeTodo(id: String)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to process these inputs in a reactive stream, we create a &lt;code&gt;PassthroughSubject&lt;/code&gt;, which is a subject that broadcasts elements downstream. This works well for our use case as we would like to channel inputs downstream to be processed into possible actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private let inputSubject = PassthroughSubject&amp;lt;Input, Never&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we init our view model, we subscribe to these emissions and process them via the &lt;code&gt;flatMap&lt;/code&gt; operator. Each input is processed differently. This is why representing our inputs as an enum helps us make sure we account for every possible variation and will remind us in the future to account for newly added inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inputSubject
    .flatMap { [todoRepository] input -&amp;gt; AnyPublisher&amp;lt;Action, Never&amp;gt; in
        switch input {
        case .stateRequested:
            return todoRepository.getTodos()
                .map { todos -&amp;gt; Action in
                    .setState(.content(todos: todos))
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        case .todoAdded(let title):
            return todoRepository.addTodo(title: title)
                .map { todo -&amp;gt; Action in
                    .addTodo(todo: todo)
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        case .todoRemoved(let id):
            return todoRepository.removeTodo(id: id)
                .map { _ -&amp;gt; Action in
                    .removeTodo(id: id)
                }
                .replaceError(with: .setState(.error))
                .eraseToAnyPublisher()
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take note that we are transforming our stream here into a publisher of &lt;code&gt;&amp;lt;Action, Never&amp;gt;&lt;/code&gt;. This means that regardless of the input, the outcome of this step should result in one or many &lt;code&gt;Action&lt;/code&gt;s. The &lt;code&gt;Never&lt;/code&gt; lets the compiler know that we don't intend this subscription to ever error out. In theory it shouldn't. Any error that might occur in processing should be handled and accounted for(i.e displaying an error state in the view). &lt;/p&gt;

&lt;p&gt;This is where the &lt;code&gt;replaceError(with:)&lt;/code&gt;operator comes in to save the day. We can easily transform unexpected errors into a relevant action that will get applied to our view state. It's pretty neat and It always forces us to account for unhappy paths when putting together the view model logic.&lt;/p&gt;

&lt;p&gt;The final piece to the puzzle is the &lt;code&gt;scan&lt;/code&gt; operator. Each action can have an effect on our view state. Via the scan operator, we can process each action as there are emitted by publishers upstream and produce a new view state that we then assign to our &lt;code&gt;@Published&lt;/code&gt; view state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scan(viewState) { (currentState, action) -&amp;gt; ViewState in
    switch action {
    case .setState(let state):
        return state
    case .addTodo(let todo):
        if case .content(var todos) = currentState {
            todos.append(todo)
            return .content(todos: todos)
        }
        return currentState
    case .removeTodo(let id):
        if case .content(var todos) = currentState {
            todos.removeAll(where: { $0.id == id })
            return .content(todos: todos)
        }
        return currentState
    }
}
.assign(to: &amp;amp;$viewState)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are familiar with reducers, the above should look familiar. Instead of reducing multiple actions into one state, we are processing each action and producing a new state.&lt;/p&gt;

&lt;p&gt;As for our &lt;code&gt;TodoListView&lt;/code&gt;, the only change would be in how our view channels inputs to our view model via the &lt;code&gt;send(_ input: Input)&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ...
content(viewModel.viewState)
    .onAppear {
        viewModel.send(.stateRequested)
    }
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it. A view state management setup thats a bit more reactive, maybe too reactive. &lt;/p&gt;

&lt;p&gt;Some benefits to this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updates to view state are centralized in one area of the view model. This allows to leverage operators like &lt;code&gt;.receive(on:)&lt;/code&gt; and &lt;code&gt;removeDuplicates()&lt;/code&gt; to insure updates are on the main thread and avoid unnecessary view rebuilding&lt;/li&gt;
&lt;li&gt;As we add more inputs and actions, the compiler will complain until you account for them.&lt;/li&gt;
&lt;li&gt;The pattern forces you to account for both the happy and not so happy paths.&lt;/li&gt;
&lt;li&gt;And more that i'll explain in my next post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's quite a bit of stuff going on with this approach. I was super confused when I was first introduced to these concepts. If you find yourself scratching your head, I highly recommend you give the video by Jake a look, as he does a great job in explaining the concept in a lot more detail.&lt;/p&gt;

&lt;p&gt;I hope you found this article useful. This is my first attempt at blogging, so any feedback  and suggestions would be super useful. Follow me on &lt;a href="https://twitter.com/obscured_pixels"&gt;Twitter&lt;/a&gt; for future updates and articles.&lt;/p&gt;

&lt;p&gt;In my next post, I'll go over some of the extra benefits of this pattern, namely side effects and how they fit well for related tasks such as event tracking. I'll also share some tips on how to make this approach a lot less boilerplate&lt;/p&gt;

&lt;p&gt;stay tuned.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
    </item>
    <item>
      <title>¿Qué es Back-End y Front-End? </title>
      <author>Arturo Gamboa</author>
      <pubDate>Thu, 15 Apr 2021 17:22:21 +0000</pubDate>
      <link>https://dev.to/theriusblackers/que-es-back-end-y-front-end-52g2</link>
      <guid>https://dev.to/theriusblackers/que-es-back-end-y-front-end-52g2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bienvenida"&gt;
  &lt;/a&gt;
  Bienvenida
&lt;/h1&gt;

&lt;p&gt;¡Hi devs! ¿cómo están? Hoy les quiero dar un pequeño bosquejo, sobre Back-end y Front-end, a menudo me topo con gente que no sabe la diferencia  o si acaso la existencia de los términos; cuando empecé en este hermoso mundo de los desarrolladores, también me vi algo perdido, busqué durante algo de tiempo sin respuestas claras, ahora, casi un año desde que empecé estoy claro del asunto, y quiero ayudar a otros; así que, ¡vamos allá!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#definici%C3%B3n"&gt;
  &lt;/a&gt;
  definición
&lt;/h1&gt;

&lt;p&gt;Estos dos términos,Back-End y Front-End, son en realidad categorías, separan grandes cantidades de: Lenguajes, Pre-procesadores,DB (Base de Datos en Español), pero, ¿en realidad qué son, o qué significan estos términos? &lt;strong&gt;Frontend es la parte de un sitio web que interactúa con los usuarios, por eso decimos que está del lado del cliente. Backend es la parte que se conecta con la base de datos y el servidor que utiliza dicho sitio web, por eso decimos que el backend corre del lado del servidor.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#el-problema"&gt;
  &lt;/a&gt;
  El problema
&lt;/h2&gt;

&lt;p&gt;Esa fue la explicación de Google, muchas veces buscamos términos y lenguajes de programación allí para hacernos una idea, pero, en mi opinión, un principiante no va a entender con exactitud esa explicación; un principiante no sabe qué es un servidor, mucho menos una base de datos, así que cuando lea esa explicación quedara igual o peor que cuando la buscó&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mi-explicaci%C3%B3n"&gt;
  &lt;/a&gt;
  Mi explicación
&lt;/h2&gt;

&lt;p&gt;La verdad, simplificar esos términos no es ni difícil ni fácil; solo requiere de una explicación clara y precisa... Veras, si sabes Inglés, te darás cuenta que esos dos términos son de lo màs descriptivos, &lt;strong&gt;Back en Inglés es la parte de atrás.&lt;/strong&gt; Y &lt;strong&gt;Front es frente, de lo que va adelante&lt;/strong&gt; entonces, podemos decir que Back-end es la parte de atrás de la página web, &lt;em&gt;es lo que no ve el Cliente (cliente se denomina la persona que visita tu página web)&lt;/em&gt; Front-end es &lt;strong&gt;Todo lo que ve el cliente.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMO8Ubp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuasexikbvh4pu1xkyec.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSMO8Ubp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xuasexikbvh4pu1xkyec.jpg" alt="Image of edteam.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esa es una buena demostración gráfica de lo que es Back-end y Front-end,eso es totalmente cierto (la psicología de la imagen), el Front-end es la parte de arriba, lo que hace manifiesto que existe algo, lo que se ve, si un iceberg no estuviese sobre el nivel del mar, ¿acaso veríamos uno? De ninguna manera, el Front-end es vital. Ahora, el iceberg no se sostiene de la parte de arriba (por eso mismo, porque està arriba), se sostiene de la parte de abajo, del Back-end; el Back-end es lo que "hace la magia" por así decirlo, el Back-end, de todas las cosas que hace, también se encarga de guardar tus datos, gestionarlos y borrarlos, cuando en una página tienes una cuenta, y luego cierras sesión y luego vuelves a abrir sesión, ese es un ejemplo claro de Back-end, la base de datos manda la información guardada y la refleja en pantalla, el Back-end, en conlusiòn, es lo que mantiene viva la página web.&lt;/p&gt;

&lt;p&gt;También hay un problema, cuando estabas leyendo lo que dice la foto, creo que como yo la primera vez que la vi, solo entendí uno o dos lenguajes de programación, es casi 100% probable que al empezar, no supieras qué son cada cosa, y no puedas decir, mira esto es para esto y así; pero eso no significa nada malo, de hecho significa que necesitas aprender mas, no tiene nada que ver que seas malo o bueno para que entiendas cada cosa que hay en la foto, solo significa algo, que estas en el buen camino, ¡aprender es tu mejor herramienta! A ti que estas empezando, te animo a que sigas aprendiendo, y sobre todo, divierte en el camino y consigue amigos.&lt;/p&gt;

&lt;p&gt;Si tienes alguna duda, déjamela en los comentarios, con gusto la responderé en cuando pueda, gracias por leer,esto es todo, hasta la próxima, ¡Addio Devs!.  &lt;/p&gt;

</description>
      <category>backend</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to reproduce Death Stranding UI with react and react-three-fiber</title>
      <author>Florent Lagrede</author>
      <pubDate>Thu, 15 Apr 2021 17:15:13 +0000</pubDate>
      <link>https://dev.to/flagrede/how-to-reproduce-death-stranding-ui-with-react-and-react-three-fiber-cif</link>
      <guid>https://dev.to/flagrede/how-to-reproduce-death-stranding-ui-with-react-and-react-three-fiber-cif</guid>
      <description>&lt;p&gt;In this demo, we will try to reproduce one of the main interface of the Death Stranding game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SM-Xz-MS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7dkd3l1beqmy9qxlezv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SM-Xz-MS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7dkd3l1beqmy9qxlezv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deathstranding.gameuionweb.com/"&gt;Demo Link&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Flow11/death-stranding-ui"&gt;Demo repository&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#about-the-game"&gt;
  &lt;/a&gt;
  About the game
&lt;/h1&gt;

&lt;p&gt;Death Stranding is a game produced by Hideo Kojima (especially known for its Metal Gear series games). The game takes place in a post-apocalyptic future where an unknown phenomenon has ravaged most of the world. You play a character, Sam,  responsible for making merchandise deliveries to the scattered remains of the population in a world that became quite dangerous. If Sam looks familiar to you it’s because its model is based on the actor who played Daryl in Walking Dead.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-this-interface"&gt;
  &lt;/a&gt;
  About this interface
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCckSLI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8adocfydxhg0hary5e9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCckSLI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8adocfydxhg0hary5e9.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this interface, the player must arrange the merchandise he will carry from point A to point B.&lt;br&gt;
The arrangement done by the player will have a significant consequence on the success of the delivery.&lt;/p&gt;

&lt;p&gt;This interface is really interesting for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The player is expected to spend some time in this interface so it is really important that it doesn’t break the flow of the game.&lt;/li&gt;
&lt;li&gt;It should also keep the player fully immersed in the universe of the game&lt;/li&gt;
&lt;li&gt;How it uses both a 2D overlay on top of a 3D Scene&lt;/li&gt;
&lt;li&gt;Its aesthetic choices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the sake of this article, I reduced the scope of the interface but I tried to keep the essence of what makes it interesting. Our goal will be to reproduce:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The 3D scene to display the merchandises&lt;/li&gt;
&lt;li&gt;The 2D overlay to manage the merchandises&lt;/li&gt;
&lt;li&gt;Keeping some interactions between the 2D overlay and the 3D scene&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the 3D scene, there will be 3 different positions to display the merchandises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Private locker (the main storage)&lt;/li&gt;
&lt;li&gt;Shared locker (alternative storage)&lt;/li&gt;
&lt;li&gt;Sam cargo (represents merchandises carried by Sam)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#target-audience"&gt;
  &lt;/a&gt;
  Target audience
&lt;/h2&gt;

&lt;p&gt;This article requires some knowledge about threejs and react-three-fiber.&lt;br&gt;
If you have no experience in threejs the best resource on the web to get started is the course made by Bruno Simon: &lt;a href="https://threejs-journey.xyz/"&gt;ThreejsJourney&lt;/a&gt;&lt;br&gt;
If you’re looking for resources on react-three-fiber you can take a look at this &lt;a href="https://github.com/gsimone/awesome-react-three-fiber"&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#format"&gt;
  &lt;/a&gt;
  Format
&lt;/h2&gt;

&lt;p&gt;There are 2 possibilities to consume this article. You can simply read it to get a global understanding of how the demo works or you can try to reproduce the demo to have a deeper understanding.&lt;br&gt;
If you choose the latter, I created a &lt;a href="https://codesandbox.io/s/death-stranding-starter-7v9v9?file=/src/App.js"&gt;starter&lt;/a&gt; project on codesanbox with all the assets to get started more easily. You can also download it if you prefer to work locally.&lt;br&gt;
Feel free to choose what suits you best.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#starter"&gt;
  &lt;/a&gt;
  Starter
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/7v9v9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complete-demo"&gt;
  &lt;/a&gt;
  Complete demo
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Flow11"&gt;
        Flow11
      &lt;/a&gt; / &lt;a href="https://github.com/Flow11/death-stranding-ui"&gt;
        death-stranding-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Death Stranding UI made in React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Death Stranding GameUI demo&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/530644/111818381-6647d400-88df-11eb-8a1c-afa2d4b5c58d.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHfuloli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/530644/111818381-6647d400-88df-11eb-8a1c-afa2d4b5c58d.jpeg" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Demo link&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://deathstranding.gameuionweb.com/" rel="nofollow"&gt;https://deathstranding.gameuionweb.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Article link:&lt;/h2&gt;
&lt;p&gt;TBD&lt;/p&gt;
&lt;h2&gt;
Stack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;react-three-fiber&lt;/li&gt;
&lt;li&gt;react-three-a11y&lt;/li&gt;
&lt;li&gt;react-spring&lt;/li&gt;
&lt;li&gt;twind&lt;/li&gt;
&lt;li&gt;drei&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sketchfab.com/3d-models/death-stranding-briefcase-a302797e258742f394256c0fbb8396ef" rel="nofollow"&gt;Briefcase model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Flow11/death-stranding-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h2&gt;

&lt;p&gt;The base project is a classic create-react-app. Here’s the list of the additional libraries used in it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/react-spring/react-three-fiber"&gt;react-three-fiber&lt;/a&gt; (for the 3D scene)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.react-spring.io/"&gt;react-spring&lt;/a&gt; (for 2D and 3D animations)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pmndrs/valtio"&gt;valtio&lt;/a&gt; (state management)&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://twind.dev/"&gt;twind&lt;/a&gt; (styling solution based on Tailwind)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/react-spring/drei"&gt;drei&lt;/a&gt; (react-three-fiber helpers collection)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A note on Twind:&lt;br&gt;
This library is a CSS-in-JS version of TailwindJS. If you're more comfortable with another styling solution don't hesitate to replace it. If you prefer vanilla Tailwind, Twind can be used just like that by using the following &lt;a href="https://twind.dev/handbook/the-shim.html"&gt;shim&lt;/a&gt; (already included in the starter).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interface-components"&gt;
  &lt;/a&gt;
  Interface components
&lt;/h2&gt;

&lt;p&gt;We're going to start building our interface with the 3D part. First, we will create the 3D grid of the private locker. The grid cell delimitations will be done using particles.&lt;br&gt;
Then we will create two smaller grids (for shared locker and sam cargo) without particles. Finally, we need to be able to move the camera between these 3 positions.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3d"&gt;
  &lt;/a&gt;
  3D
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#components-list"&gt;
  &lt;/a&gt;
  Components List
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWZP2Pnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0c82m1vy8yvqw2pz2ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWZP2Pnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0c82m1vy8yvqw2pz2ly.png" alt="3d-archi"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#briefcase"&gt;
  &lt;/a&gt;
  Briefcase
&lt;/h4&gt;

&lt;p&gt;This component will be responsible for loading and displaying the model. We will go through the whole process but some parts are already done in the starter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;download our gltf model from &lt;a href="https://sketchfab.com/3d-models/death-stranding-briefcase-a302797e258742f394256c0fbb8396ef"&gt;sketchfab&lt;/a&gt; (credit goes to luac for the model)&lt;/li&gt;
&lt;li&gt;convert it to a react component using &lt;a href="https://github.com/pmndrs/gltfjsx"&gt;gtltfjsx&lt;/a&gt; locally or the new &lt;a href="https://gltf.pmnd.rs/"&gt;online version&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;convert PNG to JPEG and optimize them&lt;/li&gt;
&lt;li&gt;using &lt;a href="https://github.com/CesiumGS/gltf-pipeline/blob/master/README.md"&gt;draco&lt;/a&gt; to convert our gltf file to GLB and compress it at the same time.&lt;/li&gt;
&lt;li&gt;put the GLB file in our &lt;code&gt;/public&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFxO5pC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q604dek6ldwbdu9p0iw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFxO5pC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q604dek6ldwbdu9p0iw6.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;At this point, we should be able to see the model. Now we have to position/rotate/scale the model correctly so it fits the original UI.&lt;/p&gt;

&lt;p&gt;We will also handle a secondary display for the model. It will be useful later on to separate the selected item from the other. For this secondary display, we will try to display it with a translucent blue color and a wireframe on top of it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we need to duplicate the main material (the first one) of the briefcase into two meshes&lt;/li&gt;
&lt;li&gt;For the translucent blue color we can use a simple shader by using &lt;a href="https://github.com/pmndrs/component-material"&gt;component-material&lt;/a&gt; on the first material
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectedMaterial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Material&lt;/span&gt;
       &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="na"&gt;uniforms&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;float&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="na"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;float&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
         &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;float&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
       &lt;span class="na"&gt;transparent&lt;/span&gt;
     &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Frag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Body&lt;/span&gt; &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`gl_FragColor = vec4(r, g, b, blue);`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Material&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For the wireframe it’s already built-in threejs, we just have to use the wireframe attribute on the second material&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJORWBc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8rin3xibteqh7t67khm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJORWBc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8rin3xibteqh7t67khm.png" alt="selected material"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To simulate the selected state you can try to use &lt;a href="https://github.com/pmndrs/react-three-a11y"&gt;react-three-a11y&lt;/a&gt;. By wrapping our model with the &lt;code&gt;&amp;lt;A11y&amp;gt;&lt;/code&gt; component we will have access to hover, focus, and pressed state through &lt;code&gt;useA11y()&lt;/code&gt; hook. We can try to display a SelectedMaterial based on the hover state for example.&lt;/p&gt;

&lt;p&gt;Since we will have a 2D overlay on top of the 3D scene we won’t need &lt;code&gt;react-three-a11y&lt;/code&gt; afterward but it’s good to know that you can bring accessibility to your 3D scene quite easily with it.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#particles-grid"&gt;
  &lt;/a&gt;
  Particles grid
&lt;/h4&gt;

&lt;p&gt;This will be the most complex part of the demo.&lt;br&gt;
To recreate this grid we will need 2 components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Grid component to display the particles&lt;/li&gt;
&lt;li&gt;A GridContainer to compute the positions of the particles and the briefcases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 2 different kinds of particles which are called &lt;code&gt;smallCross&lt;/code&gt; and &lt;code&gt;bigCross&lt;/code&gt;. In the end, we will have to compute these 2 position arrays plus the one for the briefcases.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#grid"&gt;
  &lt;/a&gt;
  Grid
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Qgs1-LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ivdbof1xs3ciar9elu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Qgs1-LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5ivdbof1xs3ciar9elu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we will start with the Grid component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pointsMaterial&lt;/span&gt;
     &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#316B74"&lt;/span&gt;
     &lt;span class="na"&gt;alphaMap&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;texture&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="na"&gt;transparent&lt;/span&gt;
     &lt;span class="na"&gt;depthWrite&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="na"&gt;blending&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AdditiveBlending&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;bufferGeometry&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"geometry"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;bufferAttribute&lt;/span&gt; &lt;span class="na"&gt;attachObject&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;attributes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;array&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;positions&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;itemSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;bufferGeometry&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--geqBGkbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqudhikzhoob5u1vz72m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--geqBGkbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqudhikzhoob5u1vz72m.png" alt="largeCross"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Here we’re using an alpha map texture to recreate the “cross” particle effect. We’re also tweaking a few parameters for the colors and the transparency. The particle’s positions and count are given to the &lt;code&gt;bufferAttribute&lt;/code&gt; tag. The positions array needs to have the following format &lt;code&gt;[x1, y1, z1, x2, y2, z2, ...]&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#gridscontainer"&gt;
  &lt;/a&gt;
  GridsContainer
&lt;/h5&gt;

&lt;p&gt;Let’s continue with the GridsContainer.&lt;br&gt;
We said that we have 3 position arrays to compute but we can do the 3 of them at the same time.&lt;/p&gt;

&lt;p&gt;First question, how many particles do we need for the small cross particles array?&lt;/p&gt;

&lt;p&gt;Let’s say we want&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;20 particles per line&lt;/li&gt;
&lt;li&gt;6 lines&lt;/li&gt;
&lt;li&gt;2 layers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also for one particle weed 3 values (x, y, z).&lt;br&gt;
In the end, we will need an array 720 values (20 * 6 * 2 * 3) to display a grid of 20 columns, 6 lines, and 2 layers.&lt;/p&gt;

&lt;p&gt;This is only for the small cross particles position array, the big cross array has 2 times less coordinate and the briefcases one 4 times less.&lt;/p&gt;

&lt;p&gt;This is because for each cell we want to display:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4 small cross particles&lt;/li&gt;
&lt;li&gt;2 big cross particles&lt;/li&gt;
&lt;li&gt;1 briefcase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably several ways of doing this. Here’s one method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loop over the array with 720 placeholder values&lt;/li&gt;
&lt;li&gt;for each loop, we need to know if we’re computing an x, y, or z coordinate&lt;/li&gt;
&lt;li&gt;for each case, we compute 3 differents coordinates (small cross, big cross, briefcase)&lt;/li&gt;
&lt;li&gt;we push these 3 coordinates in their respective arrays &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the loop, we can filter the coordinates we don’t need for the big cross and briefcases arrays (remember that we have 2 times and 4 times fewer coordinates for these too).&lt;/p&gt;

&lt;p&gt;Don’t hesitate to put every configuration variable (columns, lines, layers, spacing …) for this grid in a tool like &lt;a href="https://github.com/pmndrs/leva"&gt;leva&lt;/a&gt; to make it look like what you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_oKusJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ssc8ciqtzoc5bjqi6ut.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_oKusJF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ssc8ciqtzoc5bjqi6ut.gif" alt="leva"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the actual render, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;map over an arbitrary number (we will change that later) &lt;/li&gt;
&lt;li&gt;render our Briefcase components with &lt;code&gt;positionsBriefcases&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;render a Grid components with &lt;code&gt;positionsSmallCross&lt;/code&gt; values&lt;/li&gt;
&lt;li&gt;render a Grid components with &lt;code&gt;positionsBigCross&lt;/code&gt; values&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#external-grid"&gt;
  &lt;/a&gt;
  External grid
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0GRmQwql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w67jk2ixrbwutnnq6bf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GRmQwql--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w67jk2ixrbwutnnq6bf9.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This one is simpler than the grid we just build since it doesn’t use any particles. &lt;br&gt;
Here we just want to display briefcases on the same Z value, 3 columns, and any number of lines. In our new ExternalGrid component we will map just the briefcases list and call a util function to get the position.&lt;/p&gt;

&lt;p&gt;Our util function to get the position could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;X_SPACING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Y_SPACING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPositionExternalGrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;X_SPACING&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Y_SPACING&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#floor-and-fog"&gt;
  &lt;/a&gt;
  Floor and fog
&lt;/h4&gt;

&lt;p&gt;To make the scene look right color-wise on the background we have to add a floor and a fog.&lt;/p&gt;

&lt;p&gt;Floor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Plane&lt;/span&gt; &lt;span class="na"&gt;rotation&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;planeBufferGeometry&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"geometry"&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meshStandardMaterial&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"material"&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#1D2832"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Plane&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;fog&lt;/span&gt; &lt;span class="na"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fog"&lt;/span&gt; &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#2A3C47&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add these 2 elements to the main canvas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d"&gt;
  &lt;/a&gt;
  2D
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#state-and-data"&gt;
  &lt;/a&gt;
  State and data
&lt;/h4&gt;

&lt;p&gt;Before going into building the HTML UI we need to create our state with the data.&lt;br&gt;
For this demo, I wanted to give a try to &lt;code&gt;valtio&lt;/code&gt; as the state manager.&lt;/p&gt;

&lt;p&gt;We will need to create a state with &lt;code&gt;proxyWithComputed&lt;/code&gt;, because we will have to computed values based on the state.&lt;/p&gt;

&lt;p&gt;In the actual state we have only two values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allItems (list of all the briefcases)&lt;/li&gt;
&lt;li&gt;selectedItem (index of the selected briefcase inside allItems)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To populate it we need a function to generate data. This function already exists in the starter.&lt;/p&gt;

&lt;p&gt;So our state looks like this for now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;proxyWithComputed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;selectedItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;generateItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;private&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;generateItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;share&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;generateItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second parameter takes an object and is used to define the computed values.&lt;br&gt;
Here’s the list of computed values we will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isPrivateLocker (based on the selectedItem)&lt;/li&gt;
&lt;li&gt;isShareLocker (based on the selectedItem)&lt;/li&gt;
&lt;li&gt;isSamCargo (based on the selectedItem)&lt;/li&gt;
&lt;li&gt;itemsPrivateLocker (filter allItems)&lt;/li&gt;
&lt;li&gt;itemsShareLocker (filter allItems)&lt;/li&gt;
&lt;li&gt;itemsSam (filter allItems)&lt;/li&gt;
&lt;li&gt;allItemsSorted (use filter computed values to sort the array)&lt;/li&gt;
&lt;li&gt;selectedId (ID of the selected item)&lt;/li&gt;
&lt;li&gt;selectedCategory (category of the selected item)&lt;/li&gt;
&lt;li&gt;totalWeight (sum of briefcase weight inside Sam cargo)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#components-list"&gt;
  &lt;/a&gt;
  Components List
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNuvHZz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eby1m0j5npmg3anac8qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNuvHZz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eby1m0j5npmg3anac8qo.png" alt="2d-archi"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#inventory"&gt;
  &lt;/a&gt;
  Inventory
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9fHoH0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2myqp40dy3vlaikdse8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9fHoH0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2myqp40dy3vlaikdse8.png" alt="inventory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the component that will display our list of briefcases. As we saw on the schema it uses the following child components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MenuTab (pure UI component)&lt;/li&gt;
&lt;li&gt;MenuItems (display a portion of the list, ie: briefcases in PrivateLocker)&lt;/li&gt;
&lt;li&gt;ActionModal (will be discussed just after)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The component should also handle the following events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keyboard navigation&lt;/li&gt;
&lt;li&gt;mouse events&lt;/li&gt;
&lt;li&gt;update the selected briefcase in the store&lt;/li&gt;
&lt;li&gt;open ActionModal&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#action-modal"&gt;
  &lt;/a&gt;
  Action modal
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deTxmHn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfjyla2ljgjpmg8llb8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deTxmHn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mfjyla2ljgjpmg8llb8m.png" alt="action modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this modal, we add actions to move the selected briefcase from one category to another.&lt;br&gt;
To do that we just need to update the category of the selected item in the store. Since we’re using computed values to display the lists, everything should update automatically.&lt;/p&gt;

&lt;p&gt;We will also need to handle keyboard navigation in this modal.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#item-description"&gt;
  &lt;/a&gt;
  Item description
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-DxcLCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcgsq858ajuh186osjba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y-DxcLCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcgsq858ajuh186osjba.png" alt="item description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the right side part of the UI. We just need to display all the data of the selected item here. &lt;/p&gt;

&lt;p&gt;The only interaction is about the like button. Whenever the user clicks on it we should update the likes count of the selected briefcase. This is simple to do thanks to Valtio, we just update &lt;code&gt;allItems[selectedItem].likes&lt;/code&gt; in the state directly and the likes counts should update in the Inventory.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#combining-2d-and-3d"&gt;
  &lt;/a&gt;
  Combining 2D and 3D
&lt;/h3&gt;

&lt;p&gt;We now have a 2D UI and a 3D scene, it would be nice to make them interact with each other. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#selected-briefcase"&gt;
  &lt;/a&gt;
  Selected briefcase
&lt;/h4&gt;

&lt;p&gt;Currently, we just highlight the selected item in the UI part. We need to reflect this to the 3D briefcase as well. We already made the selected material, we just need to use it inside the &lt;code&gt;Briefcase&lt;/code&gt; component.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#scene-transition"&gt;
  &lt;/a&gt;
  Scene transition
&lt;/h4&gt;

&lt;p&gt;From now on, our camera was only looking at the main grid, the private locker. We will create 3 components to move the camera and display them based on the properties isPrivateLocker, isShareLocker, and isSamCargo that we created earlier in the state.&lt;/p&gt;

&lt;p&gt;Here for example the code that look at the main grid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ZoomPrivateLocker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useFrame&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lerp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.075&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#adding-perspective"&gt;
  &lt;/a&gt;
  Adding perspective
&lt;/h4&gt;

&lt;p&gt;To give our UI a more realistic look we must make it look like it is slightly rotated from the camera. We can do that with the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;perspective&lt;/span&gt; &lt;span class="err"&gt;800px;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.htmlOverlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;357deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h3&gt;

&lt;p&gt;We’re now going to add some animations to both the UI and the 3D scene.&lt;br&gt;
All animations has been done using &lt;code&gt;react-spring&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#2d"&gt;
  &lt;/a&gt;
  2D
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#menueffect"&gt;
  &lt;/a&gt;
  MenuEffect
&lt;/h5&gt;

&lt;p&gt;This is the animation that happens inside Inventory whenever the selected item changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--coxCjwcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4becx1twk7fw14pqh03v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--coxCjwcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4becx1twk7fw14pqh03v.gif" alt="menu-effect2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are actually 3 parts to this animation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a sliding background going from left to right&lt;/li&gt;
&lt;li&gt;the item background going from 0 to 100% height&lt;/li&gt;
&lt;li&gt;a slight blinking loop for the background-color&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will go through each of them and combine them together with the &lt;code&gt;useChain&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sliding animation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To reproduce this animation we will need custom SVGs (they are already available in the starter). I used the tool &lt;a href="https://yqnn.github.io/svg-path-editor/"&gt;https://yqnn.github.io/svg-path-editor/&lt;/a&gt; to make 3 SVGs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_YKQTEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjnjedblgxkqb588dyna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_YKQTEl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjnjedblgxkqb588dyna.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think we could have an even better effect with more SVGs, feel free to try adding more frames to animation.&lt;br&gt;
To animate these 3 SVGs, we will declare a &lt;code&gt;x&lt;/code&gt; property inside a &lt;code&gt;useSpring&lt;/code&gt; going from 0 to to 2 and in the render we will have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;
           &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
             &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
             &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
               &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                 &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 16 0 l 0 3 l -16 0 l 0 -3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 25 0 l -10 3 l -15 0 l 0 -3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 16 0 L 16 3 l -5 0 l -11 -3 m 11 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="p"&gt;})&lt;/span&gt;
           &lt;span class="si"&gt;}&lt;/span&gt;
         &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we just need to animate the opacity and the width and we should have a good sliding animation effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;background height&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we’re just expending the item’s background with a default spring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heightRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;glowing color animation&lt;/strong&gt;&lt;br&gt;
To reproduce this part we will make a spring between 2 colors and play with the opacity at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;bgOpacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bgOpacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#456798&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;bgOpacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#3E5E8D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bgOpacityRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;easing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;All together&lt;/strong&gt;&lt;br&gt;
Finally, we just have to use these 3 animations with the &lt;code&gt;useChain&lt;/code&gt; hook&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="nx"&gt;useChain&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;opacityRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heightRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bgOpacityRef&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#sidemenueffect"&gt;
  &lt;/a&gt;
  SideMenuEffect
&lt;/h5&gt;

&lt;p&gt;The SideMenu animation will use the same technique we just saw. It will be a spring that goes through 3 SVGs. Again I was a bit lazy on the number of SVG frames, feel free to try with more.&lt;br&gt;
Here are the 3 SVGs I used for the demo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;             &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
               &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 16 0 l 0 3 l -16 0 l 0 -3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 25 0 l -10 3 l -15 0 l 0 -3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M 0 0 l 16 0 L 16 3 l -5 0 l -11 -3 m 11 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#animatedouterbox"&gt;
  &lt;/a&gt;
  AnimatedOuterBox
&lt;/h5&gt;

&lt;p&gt;Here our OuterBox component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;OuterBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-1 w-2 bg-gray-200 absolute top-0 left-0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-1 w-2 bg-gray-200 absolute top-0 right-0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-1 w-2 bg-gray-200 absolute bottom-0 left-0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-1 w-2 bg-gray-200 absolute bottom-0 right-0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component is displayed inside ItemDescription one. It shows four little white stripes at the edges of ItemDescription.&lt;/p&gt;

&lt;p&gt;On the animation side, we will have to animate the height property of the component from 0 to 100%.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#animatedbar"&gt;
  &lt;/a&gt;
  AnimatedBar
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8O3KpoSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxsmuq7rjm2fl1cgyqg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8O3KpoSj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxsmuq7rjm2fl1cgyqg4.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For the bar that shows an item's durability, we will make an animated bar (like a loader).&lt;br&gt;
We need to animate the &lt;code&gt;width&lt;/code&gt; property based on the damage attribute of the item.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3d"&gt;
  &lt;/a&gt;
  3D
&lt;/h4&gt;

&lt;p&gt;For the 3D scene, we will add just one animation that will be triggered whenever a briefcase is changed from one category to another. We will make it seem like the briefcases, those that have changed, are falling from above.&lt;/p&gt;

&lt;p&gt;We can handle this animation in the Briefcase component. Whenever the position of a briefcase will change, we will animate the new value on the Y-axis from the new value plus a delta to the new value.&lt;/p&gt;

&lt;p&gt;Until now the spring animations were triggered whenever a component was mounted. Here we need to animate briefcases that are already mounted.&lt;br&gt;
To trigger a spring that has already been played once we need the second parameter received from the &lt;code&gt;useSpring&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animatedPosition&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful to use &lt;code&gt;@react-spring/three&lt;/code&gt; instead of &lt;code&gt;@react-spring/web&lt;/code&gt; here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sounds"&gt;
  &lt;/a&gt;
  Sounds
&lt;/h3&gt;

&lt;p&gt;For the sounds part we’re going to create a sound manager component using &lt;code&gt;useSound&lt;/code&gt; hook from &lt;a href="https://github.com/joshwcomeau/use-sound"&gt;Joshua Comeau&lt;/a&gt;. After that, we’re going to put our sound functions newly-created into our state so that we can everywhere in the app.&lt;/p&gt;

&lt;p&gt;Here’s the list of sounds we need to handle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like button&lt;/li&gt;
&lt;li&gt;menu change (played whenever the item selected change)&lt;/li&gt;
&lt;li&gt;menu action (played whenever the action modal is opened)&lt;/li&gt;
&lt;li&gt;menu validate (played whenever the action modal is closed)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We’re done with the tutorial, I hope you liked it. If you’re trying to make your own version of the Death Stranding UI, don’t hesitate to share it with me on &lt;a href="https://twitter.com/flagrede"&gt;twitter&lt;/a&gt;. If you're interested in more GameUI on web demos I share updates on the upcoming demos on this &lt;a href="https://www.gameuionweb.com/"&gt;newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactthreefiber</category>
    </item>
    <item>
      <title>JavaScript And Fetch</title>
      <author>Kiran Raj R</author>
      <pubDate>Thu, 15 Apr 2021 17:13:01 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/javascript-and-fetch-fjc</link>
      <guid>https://dev.to/kiranrajvjd/javascript-and-fetch-fjc</guid>
      <description>&lt;p&gt;"The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.", as per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"&gt;MDN&lt;/a&gt; documents&lt;/p&gt;

&lt;p&gt;JavScript can send network requests to the server to get information using different methods one of such method is using the fetch method of the Fetch API, It is not supported in IE browsers, you can check the support of fetch &lt;a href="https://caniuse.com/?search=fetch"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Is Fetch Fetch part of JavaScript? No, it is not a part of JavaScript, it is the part of the Web Platform API and other underlying web standards.&lt;/p&gt;

&lt;p&gt;The fetch() method help us to fetch resources asynchronously, it will takes one mandatory argument, a path of the resource that we need to fetch. The fetch method always returns a promise, "Not data" but a promise. The initial state will be pending and it may go into fulfilled or rejected based on the successfulness of the fetch operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//syntax&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt; represents the URL to be fetched.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;options&lt;/code&gt; represents Object that contain additional parameters the could be passed to the fetch, its optional.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Data fetched&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// Data fetched&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//Leanne Graham&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="c1"&gt;// [[PromiseState]]: "fulfilled"&lt;/span&gt;
     &lt;span class="c1"&gt;// [[PromiseResult]]: undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we try to fetch a resource, then we use a &lt;code&gt;then&lt;/code&gt; method to handle the promise returned by the fetch, the first &lt;code&gt;then&lt;/code&gt; method contains a if statement which checks whether the fetch was successful by checking &lt;code&gt;res.ok&lt;/code&gt;, as it returned true, &lt;code&gt;Data fetched&lt;/code&gt; message was displayed on the console. &lt;code&gt;res.json()&lt;/code&gt; convert the response body into json format, that data is captured by the second &lt;code&gt;then&lt;/code&gt; method and key with the &lt;code&gt;name&lt;/code&gt; in the response body is printed on to the console. Remember, you need to get the response body from the promise using methods like &lt;code&gt;text(), json(), formData(), blob()&lt;/code&gt; etc., that is the reason why we used two &lt;code&gt;then&lt;/code&gt; statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//200 true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;  

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//404 false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//[[PromiseState]]: "fulfilled"&lt;/span&gt;
&lt;span class="c1"&gt;//[[PromiseResult]]: undefined&lt;/span&gt;

&lt;span class="c1"&gt;// Code inside catch method did not execute as , no &lt;/span&gt;
&lt;span class="c1"&gt;// rejection occurred.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look at the second fetch in the above code, the code returned &lt;code&gt;response.ok&lt;/code&gt; with a &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;response.status&lt;/code&gt; with &lt;code&gt;404&lt;/code&gt; but the state of the promise was &lt;code&gt;fulfilled&lt;/code&gt;, &lt;code&gt;fetch method won't reject on HTTP error status like 404 or 500.&lt;/code&gt;   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-response-properties"&gt;
  &lt;/a&gt;
  Some response properties
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;// true 200&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// application/json; charset=utf-8&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;response.ok&lt;/code&gt;: Returns true if the HTTP status code is anything from 200 to 299.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;response.status&lt;/code&gt;:  Returns the HTTP status code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;response.headers&lt;/code&gt;: Returns HTTP response header. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can pass object with header configurations as a second parameter to the fetch to set header options in the fetch call. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#methods-to-read-response-body"&gt;
  &lt;/a&gt;
  Methods to read response body
&lt;/h4&gt;

&lt;p&gt;There are various promise based methods to access the body, some of them are explained below. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-responsetext"&gt;
  &lt;/a&gt;
  1. response.text()
&lt;/h4&gt;

&lt;p&gt;Read and return the response body in the text format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;  
         &lt;span class="c1"&gt;// true 200&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// string&lt;/span&gt;
           &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
     &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//                  Output of console.log(text)&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//   "id": 1,&lt;/span&gt;
&lt;span class="c1"&gt;//   "name": "Leanne Graham",&lt;/span&gt;
&lt;span class="c1"&gt;//   "username": "Bret",&lt;/span&gt;
&lt;span class="c1"&gt;//   "email": "Sincere@april.biz",&lt;/span&gt;
&lt;span class="c1"&gt;//   "address": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "street": "Kulas Light",&lt;/span&gt;
&lt;span class="c1"&gt;//     "suite": "Apt. 556",&lt;/span&gt;
&lt;span class="c1"&gt;//     "city": "Gwenborough",&lt;/span&gt;
&lt;span class="c1"&gt;//     "zipcode": "92998-3874",&lt;/span&gt;
&lt;span class="c1"&gt;//     "geo": {&lt;/span&gt;
&lt;span class="c1"&gt;//       "lat": "-37.3159",&lt;/span&gt;
&lt;span class="c1"&gt;//       "lng": "81.1496"&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;//   },&lt;/span&gt;
&lt;span class="c1"&gt;//   "phone": "1-770-736-8031 x56442",&lt;/span&gt;
&lt;span class="c1"&gt;//   "website": "hildegard.org",&lt;/span&gt;
&lt;span class="c1"&gt;//   "company": {&lt;/span&gt;
&lt;span class="c1"&gt;//     "name": "Romaguera-Crona",&lt;/span&gt;
&lt;span class="c1"&gt;//     "catchPhrase": "Multi-layered client-server neural-net",&lt;/span&gt;
&lt;span class="c1"&gt;//     "bs": "harness real-time e-markets"&lt;/span&gt;
&lt;span class="c1"&gt;//   }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-responsejson"&gt;
  &lt;/a&gt;
  2. response.json()
&lt;/h4&gt;

&lt;p&gt;Read and return the response body as json format&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
          &lt;span class="c1"&gt;//true 200&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();})&lt;/span&gt;
     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// object&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);})&lt;/span&gt;


&lt;span class="c1"&gt;//               Output of console.log(json)&lt;/span&gt;
&lt;span class="c1"&gt;// {          &lt;/span&gt;
&lt;span class="c1"&gt;// address:&lt;/span&gt;
&lt;span class="c1"&gt;//     city: "Gwenborough"&lt;/span&gt;
&lt;span class="c1"&gt;//     geo:&lt;/span&gt;
&lt;span class="c1"&gt;//         lat: "-37.3159"&lt;/span&gt;
&lt;span class="c1"&gt;//         lng: "81.1496"&lt;/span&gt;
&lt;span class="c1"&gt;//     street: "Kulas Light"&lt;/span&gt;
&lt;span class="c1"&gt;//     suite: "Apt. 556"&lt;/span&gt;
&lt;span class="c1"&gt;//     zipcode: "92998-3874"&lt;/span&gt;
&lt;span class="c1"&gt;// company:&lt;/span&gt;
&lt;span class="c1"&gt;//     bs: "harness real-time e-markets"&lt;/span&gt;
&lt;span class="c1"&gt;//     catchPhrase: "Multi-layered client-server neural-net"&lt;/span&gt;
&lt;span class="c1"&gt;//     name: "Romaguera-Crona"&lt;/span&gt;
&lt;span class="c1"&gt;// email: "Sincere@april.biz"&lt;/span&gt;
&lt;span class="c1"&gt;// id: 1&lt;/span&gt;
&lt;span class="c1"&gt;// name: "Leanne Graham"&lt;/span&gt;
&lt;span class="c1"&gt;// phone: "1-770-736-8031 x56442"&lt;/span&gt;
&lt;span class="c1"&gt;// username: "Bret"&lt;/span&gt;
&lt;span class="c1"&gt;// website: "hildegard.org"  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-responseformdata"&gt;
  &lt;/a&gt;
  3. response.formData()
&lt;/h4&gt;

&lt;p&gt;Read and return the response body as FormData object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; 
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FirstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; 
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="c1"&gt;// I provided "kiran" as value for first input and "raj"&lt;/span&gt;
&lt;span class="c1"&gt;// as value for second input. &lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formData1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

     &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromEntries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

     &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
        &lt;span class="p"&gt;,{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json; 
               charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="c1"&gt;//{&lt;/span&gt;
&lt;span class="c1"&gt;//  "fname": "kiran",&lt;/span&gt;
&lt;span class="c1"&gt;//  "lname": "raj",&lt;/span&gt;
&lt;span class="c1"&gt;//  "id": 101&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember only one method can be used to read the response or error body as the content has been already read by the first method.&lt;/p&gt;

&lt;p&gt;I just skim through the basics of fetch method, will update with more examples and information. Please feel free to comment any information you have about fetch. Suggestions are always welcomed, and if you find any mistakes, please leave a comment. Happy coding &lt;/p&gt;

&lt;p&gt;Let's learn together :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Actionable tips to find a brandable domain name</title>
      <author>ishfillet</author>
      <pubDate>Thu, 15 Apr 2021 17:09:41 +0000</pubDate>
      <link>https://dev.to/ishfillet/7-actionable-tips-to-find-a-brandable-domain-name-42a2</link>
      <guid>https://dev.to/ishfillet/7-actionable-tips-to-find-a-brandable-domain-name-42a2</guid>
      <description>&lt;p&gt;Everything starts with a domain name. Whether you're starting a side project or a full-fledged SaaS business, a domain name is essential to your overall branding. But when we hunt for a domain name, it feels like all domain names are already taken. We've all faced this before.&lt;/p&gt;

&lt;p&gt;Last week, while searching for a domain name, I made this framework to find great domain names that stand out. I will keep it short, and concise.&lt;/p&gt;

&lt;p&gt;These are the tips for you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Take a popular English word, and change one letter.&lt;br&gt;
e.g. Binance (Finance), Zillow (Willow), Zomato (Tomato), Ikea (Idea).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Word you love + ly/ify/able/sy/zy&lt;br&gt;
e.g. Shopify, Grammarly, Mashable, Stocksy, Coinzy...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take two common English words and join them together.&lt;br&gt;
e.g. MakeSumo, HubSpot, FireBase, GlassNode, BaseCamp...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a unique 2/3 syllable word that is easy to pronounce.&lt;br&gt;
e.g. Figma, Envato, Vercel, Discord...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your niche + Animal names&lt;br&gt;
e.g. FoodPanda, DataDog, MailChimp, SurveyMonkey, CoinGecko...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try adding b/e/i/u/un before words you love.&lt;br&gt;
e.g. Udemy, Unsplash, eBay, iStock, bCast...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change the spelling of a common word/phrase, but make it sound the same.&lt;br&gt;
e.g. Lyft, Lyst, Reddit, Flickr, Digg...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a verb to your domain name.&lt;br&gt;
e.g. GetPocket, UseFluent...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go for ccTLD first, and later buy the .com at a premium price.&lt;br&gt;
e.g. notion.so, foundation.app, copy.ai, codepen.io, dev.to&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Omit a word or two from a known word.&lt;br&gt;
e.g. Canva (Canvas), Spira (Spiral), Notio (Notion)...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use local translation to make a word.&lt;br&gt;
e.g. Vue (french translation for "View"), Dukaan (Hindi translation for "Shop")&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hope it helps. Follow me on Twitter &lt;a class="mentioned-user" href="https://dev.to/ishfillet"&gt;@ishfillet&lt;/a&gt;
 for more actionable tips on UI/design/business. xD&lt;/p&gt;

&lt;p&gt;Also, this is my first post on here - react and share it if you like it.&lt;/p&gt;

</description>
      <category>sideprojects</category>
      <category>discuss</category>
      <category>productivity</category>
      <category>domain</category>
    </item>
  </channel>
</rss>
