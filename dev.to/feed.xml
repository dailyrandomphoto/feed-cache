<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Desktop Environment in Linux!</title>
      <author>Suchitra</author>
      <pubDate>Wed, 25 Aug 2021 17:05:27 +0000</pubDate>
      <link>https://dev.to/suchitra_13/desktop-environment-in-linux-1oof</link>
      <guid>https://dev.to/suchitra_13/desktop-environment-in-linux-1oof</guid>
      <description>&lt;p&gt;Do you want to use Linux but find difficulty with commands? so you came in the right place.. In this article I am going to explain about &lt;strong&gt;How can you use Linux in easy way without using any single command!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, I will suggest you that it would be great if you go through below üëá article 1st before starting this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/suchitra_13" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAnECmiT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Jy171Kny--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449284/f0604fb9-cd95-44a4-a188-efbf11544905.png" alt="suchitra_13"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/suchitra_13/what-is-linux-3jnc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Linux?&lt;/h2&gt;
      &lt;h3&gt;Suchitra „Éª Apr 10 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Now, you got to know about Linux and its features as well, also you may or may not be heard about that.. Linux is a CLI based, normal user can't use Linux based operating system right!. And If you want to use Linux then you should have good grasp on commands and programming languages.&lt;br&gt;
But don't worry still you can use Linux!&lt;/p&gt;

&lt;p&gt;The solution of your Problem is Desktop Environment.&lt;br&gt;
But here the question arises is ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-desktop-environment-"&gt;
  &lt;/a&gt;
  What is a Desktop Environment ?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/VbnUQpnihPSIgIXuZv/giphy.gif" alt="Let's discuss"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A desktop environment is the bundle of components that provide you common graphical user interface (GUI) elements such as icons, toolbars, wallpapers, and desktop widgets. Thanks to the desktop environment, you can use Linux graphically using your mouse and keyboard like you do in other operating systems like Windows and macOS.&lt;br&gt;
Without a desktop environment, your Linux system will just have a terminal like utility and you‚Äôll have to interact it using commands only.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#some-example-of-desktop-environment-in-linux"&gt;
  &lt;/a&gt;
  Some example of Desktop Environment in Linux:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnome.org/"&gt;GNOME&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BLclvGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldkga9kagzrslopksara.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BLclvGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldkga9kagzrslopksara.jpg" alt="Gnome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.xfce.org/"&gt;Xfce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkivZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lifewire.com/thmb/j9x5SP0fQt0gUYxx3SOD9Gjjxgk%3D/1600x900/filters:fill%28auto%2C1%29/xfce2-5806ec9f3df78cbc28aa61d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpkivZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lifewire.com/thmb/j9x5SP0fQt0gUYxx3SOD9Gjjxgk%3D/1600x900/filters:fill%28auto%2C1%29/xfce2-5806ec9f3df78cbc28aa61d0.png" alt="Xfce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kde.org/"&gt;KDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jc0AUtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/1g6gr47ibj051.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jc0AUtTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.redd.it/1g6gr47ibj051.png" alt="KDE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.lxde.org/"&gt;LXDE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJgfhlgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.technewsworld.com/images/article_images/74574_990x557.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJgfhlgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.technewsworld.com/images/article_images/74574_990x557.jpg" alt="lxde"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntubudgie.org/"&gt;Budgie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iAr2Y2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thelinuxuser.com/wp-content/uploads/2019/12/Featured-Image.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iAr2Y2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thelinuxuser.com/wp-content/uploads/2019/12/Featured-Image.jpg" alt="Budgie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading‚ù§Ô∏è
&lt;/h2&gt;

&lt;p&gt;If you have any query or suggestions let me know via commenting!üòä&lt;/p&gt;

</description>
      <category>linux</category>
      <category>todayisearched</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My FrontEnd Interview Experience At Razorpay</title>
      <author>Anurag Hazra</author>
      <pubDate>Wed, 25 Aug 2021 16:53:29 +0000</pubDate>
      <link>https://dev.to/anuraghazra/my-frontend-interview-experience-at-razorpay-29bo</link>
      <guid>https://dev.to/anuraghazra/my-frontend-interview-experience-at-razorpay-29bo</guid>
      <description>&lt;p&gt;Hey Folks! I hope you are doing great.&lt;/p&gt;

&lt;p&gt;As you know from the &lt;a href="https://twitter.com/anuraghazru/status/1427296905566900227"&gt;announcements&lt;/a&gt; that I've recently joined &lt;a href="https://razorpay.com"&gt;Razorpay&lt;/a&gt; as a FrontEnd Engineer.&lt;/p&gt;

&lt;p&gt;So this is a writeup about my interview experience at razorpay and how I&lt;br&gt;
cleared the interview and got the offer!&lt;/p&gt;

&lt;p&gt;After over 1k LinkedIn likes &amp;amp; 600 twitter hearts, and 50+ DMs about&lt;br&gt;
"what is the interview process at razorpay?" I'm finally writing this.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ClfAhxgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E871MlFVUBotoyl.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab7tb9le--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1334937284076924929/KtVMaBJ3_normal.jpg" alt="Anurag Hazra ‚öõ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Anurag Hazra ‚öõ
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @anuraghazru
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Got 35+ DMs with the same question.... It seems I really need to blog about my interview experience at &lt;a href="https://twitter.com/Razorpay"&gt;@Razorpay&lt;/a&gt; üòÇ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:14 PM - 16 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427348086188232739" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Let's get started. First thing first I've got a lot of questions in one week and the most frequent one is:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-get-this-opportunity"&gt;
  &lt;/a&gt;
  "How did you get this opportunity?"
&lt;/h2&gt;

&lt;p&gt;Simple one liner answer to this question would be &lt;br&gt;
&lt;em&gt;"I built my personal brand, showcased my skills publicly and connected with friends in the community who work at razorpay"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My story of getting the opportunity is bit interesting, so there was a &lt;a href="https://twitter.com/RazorpayEngg/status/1413159886972538881"&gt;twitter post&lt;/a&gt; from the Razorpay engineering handle and I posted a &lt;a href="https://twitter.com/anuraghazru/status/1413166291821600770"&gt;meme as a reply&lt;/a&gt; to that post,&lt;br&gt;&lt;br&gt;
Then &lt;a href="https://dev.to_kamlesh_"&gt;Kamlesh&lt;/a&gt; DM'd asking if I was ready to explore the opportunity, even though that tweet was totally a joke from my side and I had no plans to join razorpay atm üòÇ, I still took the opportunity and moved forward with the interviews. &lt;em&gt;(And boi I'm glad I did)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/anuraghazru/status/1413166291821600770"&gt;https://twitter.com/anuraghazru/status/1413166291821600770&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ex0bSfaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8snxxp829fbimb5fcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ex0bSfaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so8snxxp829fbimb5fcn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there goes my sweet ü•∞ twitter friends creating "HIRE ANURAG CAMPAIGNS".&lt;br&gt;&lt;br&gt;
Thank you &lt;a href="https://twitter.com/siddharthkp"&gt;Sid&lt;/a&gt;, &lt;a href="https://twitter.com/VishwaMehta30"&gt;Vish&lt;/a&gt;, &lt;a href="https://twitter.com/saurabhcodes"&gt;Saurabh&lt;/a&gt; it was very wholesome :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVR3jHpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m0014zo9hs6z46rx416.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVR3jHpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m0014zo9hs6z46rx416.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now the interesting story out of the way, let's talk about the interview experience. &lt;br&gt;
So there was a lot of queries about the interview process at razorpay from folks.&lt;/p&gt;

&lt;p&gt;So the first thing which I really liked about the interview process is that you will immediately be given a "Interview Preparation Guide - FE Engineer" document which will have everything you need to know about the whole process, &lt;br&gt;
I cannot say enough how useful that document was.&lt;/p&gt;

&lt;p&gt;It had information about the Razorpay's Philosophy, the interview rounds and what to expect from the each round and evaluation criteria for each round, also few handy interview tips.&lt;/p&gt;

&lt;p&gt;First I had a catch-up call with Kamlesh it wasn't part of the interview but just to give me a general idea of what I'm going into we decided to have a call and Kamlesh discussed with me about the structure and the business model and what they are doing at Razorpay, It was a great insight and after that I decided to move forward with the real interviews.&lt;/p&gt;

&lt;p&gt;First I got a call from the recruiter about the schedule and you will get daily reminders before each interview from the recruiter.&lt;br&gt;
And after clearing every round you will get call from the recruiter for the next one. &lt;/p&gt;

&lt;p&gt;He scheduled the first interview.&lt;/p&gt;

&lt;p&gt;Let's start with the rounds then. In total there was 4 interview rounds:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Round 1 (1 Hour) Technical Deep Dive&lt;/li&gt;
&lt;li&gt;Round 2 (1.5 Hour) Coding Round&lt;/li&gt;
&lt;li&gt;Round 3 (1 Hour) Web Fundamentals&lt;/li&gt;
&lt;li&gt;Round 4 (1 Hour) Hiring Manager Round&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#round-1-1-hour-technical-deep-dive"&gt;
  &lt;/a&gt;
  Round 1 (1 Hour) Technical Deep Dive
&lt;/h2&gt;

&lt;p&gt;This round heavily focuses on discussions about your own projects (any project) and your work experience.&lt;/p&gt;

&lt;p&gt;I was asked about my work experience at timelessco and what projects I worked on, we talked a lot about the design system &amp;amp; component library I was building at timeless.&lt;/p&gt;

&lt;p&gt;It was like a discussion about the project on how it works, what challenges I faced building it, what things I liked about the projects.&lt;/p&gt;

&lt;p&gt;We also talked about my open source projects, we talked about github-readme-stats and BugVilla.&lt;/p&gt;

&lt;p&gt;Interviwer asked me &lt;strong&gt;"What are the challenges you faced building BugVilla"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I answered, and discussed about how I had to &lt;a href="https://github.com/anuraghazra/BugVilla/pull/3/commits/2b878a35601f2c94993efcf28a9a614e5b389310"&gt;rewrite the whole redux state&lt;/a&gt; management code to add optimistic updates and to fix the laggy behaviour because of wrongly structured state of the application.&lt;/p&gt;

&lt;p&gt;it was a pretty chilling experience and discussion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Study your past projects to get a refresher on your memory before going into this round&lt;/li&gt;
&lt;li&gt;Brag a lot about your projects&lt;/li&gt;
&lt;li&gt;Don't hesitate to say you wrote a bad piece of code&lt;/li&gt;
&lt;li&gt;Justify your answers/approach to solving the problem clearly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-2-15-hour-coding-round"&gt;
  &lt;/a&gt;
  Round 2 (1.5 Hour) Coding Round
&lt;/h2&gt;

&lt;p&gt;This round is a typical coding round it will be on codesandbox.io and you can choose any framework/language to solve the given problem.&lt;/p&gt;

&lt;p&gt;Unlike other companies where you will be given to revert a binary tree, at razorpay you will only get real-world problems to solve. Which is :chefkiss:&lt;/p&gt;

&lt;p&gt;For me this round was more like "pair-programming" than "coding-test",&lt;br&gt;&lt;br&gt;
Interviewer will not just sit around watch you type code, interviewer will also give you hints, tips and discuss the problem with you.&lt;/p&gt;

&lt;p&gt;My question statement was a medium difficulty task, it was carefully created to test your understanding of basic to advanced concepts in FrontEnd development. &lt;/p&gt;

&lt;p&gt;Although it was pretty straightforward (spoiler, but I messed it up) I started explaining what I will do and took some time to plan my approach.&lt;/p&gt;

&lt;p&gt;After that I started implementing one of the core part of the logic where I kinda mess things up, I decided to go with a typical old school approach to the problem but not to mention It did not worked very well, it was kinda broken and I could not deliver the whole thing, but I wasn't too afraid or nervous because it was a fun learning experience for me.&lt;/p&gt;

&lt;p&gt;After finishing the half-baked demo my interviewer asked &lt;strong&gt;"Anurag, how else can you solve this problem?"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just after hearing that question my mind blowed and I got the idea which I totally missed.&lt;/p&gt;

&lt;p&gt;I proposed my solution but since we did not had time I could not implement it.&lt;/p&gt;

&lt;p&gt;Now you might say &lt;em&gt;"Woooww Anurag you totally messed this up!"&lt;/em&gt;&lt;br&gt;&lt;br&gt;
Yes I did, but the cool thing about this interview is that they aren't looking for solid solutions from you, they just want to test out your thought process and approach to solving the problem by thinking it in logical way.&lt;/p&gt;

&lt;p&gt;Even though I could not deliver the solution I was able to come up with the solution and approached the problem in a logical manner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Think out loud, convey all your thought process to the interviewer so that   they know you are solving it in a logical way.&lt;/li&gt;
&lt;li&gt;Ask questions about the problem statement.&lt;/li&gt;
&lt;li&gt;Plan before you write the code, don't jump into it directly.&lt;/li&gt;
&lt;li&gt;If you are stuck discuss with the interviewer about the problem and explain it   to him.&lt;/li&gt;
&lt;li&gt;If you could not deliver the solution at least think of few different approaches to the problem and propose that to interviewer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-3-1-hour-web-fundamentals"&gt;
  &lt;/a&gt;
  Round 3 (1 Hour) Web Fundamentals
&lt;/h2&gt;

&lt;p&gt;This is also a discussion based round where you will be asked various open-ended questions like "How to build X feature", "How X works in Y"&lt;/p&gt;

&lt;p&gt;I just loved this session!! It was like two engineers discussing on how something works. You won't believe how much I learned from this one interview, it was very insightful and learned a lot.&lt;/p&gt;

&lt;p&gt;I got asked about 4 or 5 questions all of which were interconnected to one another.&lt;/p&gt;

&lt;p&gt;First question was pretty straight forward and I had experience with it so I explained it pretty well.&lt;/p&gt;

&lt;p&gt;Then the second question was bit more tricky, there was a few more interconnected questions about web fundamentals and how the web works.&lt;/p&gt;

&lt;p&gt;It was a such a information packed session that I felt knowledgeable after leaving that interview session. ü§Ø&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Just discuss your thoughts clearly.&lt;/li&gt;
&lt;li&gt;You are also the interviewer, so ask questions.&lt;/li&gt;
&lt;li&gt;Focus and study fundamentals of how web works.&lt;/li&gt;
&lt;li&gt;break down problems into smaller chunks and explain them&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#round-4-1-hour-hiring-manager-round"&gt;
  &lt;/a&gt;
  Round 4 (1 Hour) Hiring Manager Round
&lt;/h2&gt;

&lt;p&gt;This round was also a discussion based one, but it was more like a culture fitment round, there was lots of small questions about my own work experience in my previous firm, the teams, how we worked and my day to day work at timeless.&lt;/p&gt;

&lt;p&gt;This round mostly focuses on my:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to resolve conflicts in the team&lt;/li&gt;
&lt;li&gt;Decision making ability&lt;/li&gt;
&lt;li&gt;Which time management method I like most (I like macro management)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were specific questions like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"If a team member proposed a solution which you don't agree with (vice versa) in that case what will you do"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were also behavioural questions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"What motivates you most and what is the one feature which you built you are not proud of?"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interviewer will also explain to you about how the work happens and various things about razorpay. &lt;br&gt;
This is the best chance to clear up any org specific questions if you have.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-clear-this-round"&gt;
  &lt;/a&gt;
  &lt;em&gt;Tips to clear this round:&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Be honest and be "you" because you have to work with a team seamlessly in day-to-day life.&lt;/li&gt;
&lt;li&gt;Be rational about your thought process and answer the questions correctly.&lt;/li&gt;
&lt;li&gt;if you don't have the experience to answer the question, just say "I don't have the experience but If i was in that situation I will do...this that and that..".&lt;/li&gt;
&lt;li&gt;Ask lot of questions.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;And that's it folks! Thanks for reading all the way through.&lt;/p&gt;

&lt;p&gt;My interview experience at razorpay was super smooth and I felt like I could give another 5 rounds without any issue. It was relaxing and a fun learning experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h3&gt;

&lt;p&gt;You will not be the only person learning from the interview, It is a both side interview.&lt;/p&gt;

&lt;p&gt;If interviewer asks you 10 questions, you should also ask 10 questions. Do &lt;a href="https://github.com/viraptor/reverse-interview/"&gt;reverse interview&lt;/a&gt;!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask questions.&lt;/li&gt;
&lt;li&gt;Think out loud.&lt;/li&gt;
&lt;li&gt;Plan your approach.&lt;/li&gt;
&lt;li&gt;Make sure you have projects to showcase and brag about.&lt;/li&gt;
&lt;li&gt;Don't be nervous, take the interviews as a fun learning experience :).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this writeup will help you pass your next interview at Razorpay (hope to see you soon in the team)&lt;/p&gt;

&lt;p&gt;I would like to thank you the wonderful onboarding and interview team at razorpay and especially Kamlesh, he guided me through the whole process and even gave me personal guidance on career.  &lt;/p&gt;

&lt;p&gt;Finally also like to thank you timeless.co for being so nice and respecting my decision.&lt;/p&gt;

&lt;p&gt;Thanks! Bye!&lt;/p&gt;

</description>
      <category>interview</category>
      <category>job</category>
      <category>career</category>
    </item>
    <item>
      <title>Top 3 best Laravel CRM Packages</title>
      <author>sanjanasingh</author>
      <pubDate>Wed, 25 Aug 2021 16:38:53 +0000</pubDate>
      <link>https://dev.to/sanjanasingh202/top-3-best-laravel-crm-packages-3e13</link>
      <guid>https://dev.to/sanjanasingh202/top-3-best-laravel-crm-packages-3e13</guid>
      <description>&lt;p&gt;There are many CRM platforms available in the market.&lt;a href="https://daybydaycrm.com/"&gt;DayBydayCRM&lt;/a&gt;, &lt;a href="https://laraadmin.com/"&gt;LaraAdmin&lt;/a&gt;, &lt;a href="https://krayincrm.com/"&gt;Krayin&lt;/a&gt; are Top 3 Laravel open source CRM packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel&lt;/strong&gt; is the most popular PHP framework nowadays due to its simplicity, clearity and flexibility that make projects more secure and scalable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#daybydaycrm"&gt;
  &lt;/a&gt;
  DayByDayCRM:-
&lt;/h2&gt;

&lt;p&gt;DayByDay CRM is an open source CRM system written in PHP Laravel.&lt;br&gt;
The platform allows you to easily &lt;strong&gt;create projects&lt;/strong&gt; and assign them to clients and users.&lt;/p&gt;

&lt;p&gt;DayByDayCRM github Repository:&lt;a href="https://github.com/Bottelet/DaybydayCRM"&gt;https://github.com/Bottelet/DaybydayCRM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbDv1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://daybydaycrm.com/clients_overview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWSbDv1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://daybydaycrm.com/clients_overview.png" alt="DayByDayCRM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The platform provides Lead Control features so that you and your team will not forget to follow up with the clients and DayByDay CRM collects all the important notes from previous meetings and details about the clients.&lt;/p&gt;

&lt;p&gt;It offers many other features like &lt;strong&gt;task control&lt;/strong&gt;, &lt;strong&gt;user access&lt;/strong&gt;, managing contracts and documents and many more.&lt;/p&gt;

&lt;p&gt;DayByDay CRM Live Demo:-&lt;a href="https://demo.daybydaycrm.com/login"&gt;https://demo.daybydaycrm.com/login&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laraadmin"&gt;
  &lt;/a&gt;
  LaraAdmin
&lt;/h2&gt;

&lt;p&gt;LaraAdmin is a Open source CRM for easily starting Admin applications with features available like Advanced CRUD Generation, Schema Manager and Workflows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBIaimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://laraadmin.com/img/laraadmin/laraadmin-row-view.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GmBIaimc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://laraadmin.com/img/laraadmin/laraadmin-row-view.jpg" alt="LaraAdmin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LaraAdmin Github Repository:&lt;a href="https://github.com/dwijitsolutions/laraadmin-crm"&gt;https://github.com/dwijitsolutions/laraadmin-crm&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#krayin"&gt;
  &lt;/a&gt;
  Krayin:-
&lt;/h2&gt;

&lt;p&gt;Laravel CRM helps to manage your business more effectively. Krayin CRM is powerful software that connects all the data from sales leads and customers all in one place.&lt;/p&gt;

&lt;p&gt;Krayin Github Repository:-  &lt;a href="https://github.com/krayin/laravel-crm"&gt;https://github.com/krayin/laravel-crm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It offers functionality like &lt;a href="https://krayincrm.com/how-to-create-leads-in-krayin-crm/"&gt;Lead Management&lt;/a&gt;, &lt;strong&gt;Activities Management&lt;/strong&gt;, &lt;strong&gt;ACL system&lt;/strong&gt; and Contact Management, Custom Fields and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTSrFPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://krayincrm.com/wp-content/themes/krayincrm/images/webp/krayin-lead.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTSrFPW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://krayincrm.com/wp-content/themes/krayincrm/images/webp/krayin-lead.webp" alt="Krayin CRM Software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Krayin is very flexible and easy to use even for non-tech savvies and as It is open source project customization can be done very easily even at the core level too.&lt;/p&gt;

&lt;p&gt;Krayin Live Demo:- &lt;a href="https://demo.krayincrm.com/admin/login"&gt;https://demo.krayincrm.com/admin/login&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KrayinCRM offers Kanban view displays so that leads can be organized based on their stages to give an idea of their progress and how much revenue is expected to be generated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let us know your thought on the above CRM system in comments below&lt;/em&gt;&lt;/p&gt;

</description>
      <category>laravelcrm</category>
      <category>opensourcecrm</category>
      <category>crm</category>
    </item>
    <item>
      <title>Publish to NPM using GitHub Actions</title>
      <author>Andrea Stagi</author>
      <pubDate>Wed, 25 Aug 2021 16:06:51 +0000</pubDate>
      <link>https://dev.to/astagi/publish-to-npm-using-github-actions-23fn</link>
      <guid>https://dev.to/astagi/publish-to-npm-using-github-actions-23fn</guid>
      <description>&lt;p&gt;I recently needed to find a way to publish packages to NPM automatically and since all my projects are hosted on GitHub I thought why not using GitHub actions? In this article I explain how to do that in 3 simple steps!&lt;/p&gt;

&lt;p&gt;üëâüèª Pssst... you can also check some real life examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/oruga-ui/oruga"&gt;Oruga UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ministero-salute/dcc-utils"&gt;DCC-Utils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#generate-a-new-token-on-npm"&gt;
  &lt;/a&gt;
  Generate a new token on NPM
&lt;/h2&gt;

&lt;p&gt;First of all you need to create a new NPM token that will be used to publish packages to NPM.&lt;/p&gt;

&lt;p&gt;From NPM dashboard open main menu and select "Access token", then click on "Generate new token"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXRwjVmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kd3phl8qnlt7u12hn55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXRwjVmr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kd3phl8qnlt7u12hn55.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;select "Automation" token to bypass two-factor authentication when publishing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBfwTtbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84caxmk7f7fn8dc7jj8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBfwTtbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84caxmk7f7fn8dc7jj8k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then copy your token, it will be used as a &lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;GitHub secret&lt;/a&gt; as explained in the next section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1e_INyMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvq0dblsbi40w8b4i69n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e_INyMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvq0dblsbi40w8b4i69n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#store-your-token-as-a-github-secret"&gt;
  &lt;/a&gt;
  Store your token as a GitHub secret
&lt;/h2&gt;

&lt;p&gt;GitHub Actions can access your GitHub secrets, so that's the perfect place where to store your token! &lt;/p&gt;

&lt;p&gt;Under "Settings" -&amp;gt; "Secrets" click on "New repository secret" and add your NPM Token your previously copied (in this example I use &lt;code&gt;NPM_TOKEN&lt;/code&gt; label to identify it)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_WOTn5tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn55nojstxu272gceq04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_WOTn5tp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn55nojstxu272gceq04.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to write some code and create a new action to publish your package!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-your-action"&gt;
  &lt;/a&gt;
  Write your action
&lt;/h2&gt;

&lt;p&gt;Create a new GitHub Action &lt;code&gt;publish.yml&lt;/code&gt; inside your project under &lt;code&gt;.github/workflows&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish to NPM&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;created&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Node&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14.x'&lt;/span&gt;
          &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://registry.npmjs.org'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies and build üîß&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install &amp;amp;&amp;amp; npm run build&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish package on NPM üì¶&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This action should run only when you create a new release on GitHub&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;created&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The steps it executes are really clear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout code&lt;/li&gt;
&lt;li&gt;Setup Node.js environment (using Node.js 14.x here) &lt;/li&gt;
&lt;li&gt;Install dependencies and build your package (if needed)&lt;/li&gt;
&lt;li&gt;Publish to NPM! As you can see this step uses our &lt;code&gt;NPM_TOKEN&lt;/code&gt; secret to initialize &lt;code&gt;NODE_AUTH_TOKEN&lt;/code&gt; env variable
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish package to NPM üì¶&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm publish&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-release"&gt;
  &lt;/a&gt;
  Create a new release
&lt;/h2&gt;

&lt;p&gt;In order to see your action running, you need to &lt;a href="https://docs.github.com/en/github/administering-a-repository/releasing-projects-on-github/managing-releases-in-a-repository"&gt;create a new release on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx8jtW0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjtkj6lxke8erg7yqopi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx8jtW0_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjtkj6lxke8erg7yqopi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that your package will be successfully published to NPM üéâ&lt;/p&gt;

</description>
      <category>node</category>
      <category>github</category>
    </item>
    <item>
      <title>Canary deployment of Lambdas using CDK Pipelines</title>
      <author>Ryan Dsouza</author>
      <pubDate>Wed, 25 Aug 2021 15:18:15 +0000</pubDate>
      <link>https://dev.to/ryands17/canary-deployment-of-lambdas-using-cdk-pipelines-1l0b</link>
      <guid>https://dev.to/ryands17/canary-deployment-of-lambdas-using-cdk-pipelines-1l0b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#in-this-post-we-shall-perform-a-canary-deployment-of-our-lambdas-we-will-be-using-cdk-pipelines-for-automated-deployments"&gt;
  &lt;/a&gt;
  In this post, we shall perform a Canary deployment of our Lambdas. We will be using CDK pipelines for automated deployments.
&lt;/h2&gt;

&lt;p&gt;Canary is a deployment strategy that releases an application incrementally to a subset of users. This is done to limit the blast radius and for an easy rollback in case of a failure.&lt;/p&gt;

&lt;p&gt;What we would like to achieve is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automate our API deployment using CDK Pipelines&lt;/li&gt;
&lt;li&gt;Use CodeDeploy's Deployment Groups to perform a Canary deployment using a Lambda alias. This will perform a weighted routing between the current function and the previous function version.&lt;/li&gt;
&lt;li&gt;Create an alarm to check for any errors in the Lambda and rollback if any.&lt;/li&gt;
&lt;li&gt;Perform a simple load test to check if everything works.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the repo for those who want to dive right in or follow along with the walkthrough.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ryands17"&gt;
        ryands17
      &lt;/a&gt; / &lt;a href="https://github.com/ryands17/lambda-canary-deployments"&gt;
        lambda-canary-deployments
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      API Gateway and Lambda with weighted routing to the latest function deployed
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CDK prerequisites like &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html"&gt;bootstrapping&lt;/a&gt; and setting up AWS CLI with the &lt;code&gt;default&lt;/code&gt; profile is assumed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As our repository will be on GitHub, we need to create an access token for CodePipeline to fetch our repository. To perform this, create a Personal Access Token on GitHub with the &lt;code&gt;repo&lt;/code&gt; and &lt;code&gt;admin:repo_hook&lt;/code&gt; options checked.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNX6p58f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwzuj4l980alzu31za5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNX6p58f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwzuj4l980alzu31za5e.png" alt="Creating a Personal Access Token on GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then, you need to create a Secrets Manager secret that will store this token and we will fetch this later in our CDKPipelines construct.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bVEuvIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwiu1gr56v4o501p9qdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bVEuvIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwiu1gr56v4o501p9qdn.png" alt="Create a simple secret in Secrets Manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're done with the prerequisites. Let's move on to creating the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-stack"&gt;
  &lt;/a&gt;
  API Stack
&lt;/h2&gt;

&lt;p&gt;This stack will contain an API Gateway REST API with a Lambda Proxy integration. We will also add a CodeDeploy Deployment Group that will perform the required traffic shifting from the current to the latest deployed version.&lt;/p&gt;

&lt;p&gt;In case our deployment is erroneous for some reason, CodeDeploy should rollback to the current version. For this, we will use &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"&gt;CloudWatch Alarms&lt;/a&gt; that will check if our Lambda give any errors and if the alarm is in an &lt;strong&gt;Alarm&lt;/strong&gt; state, CodeDeploy will rollback.&lt;/p&gt;

&lt;p&gt;Let's start with the Lambda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/api-stack.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aliasName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apiHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apiHandlerStage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;aliasName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentVersion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We create a Lambda function named &lt;code&gt;apiHandler&lt;/code&gt; and an alias named &lt;code&gt;apiHandlerStage&lt;/code&gt; which we will point to the current version. When we deploy a new version, CodeDeploy will perform a weighted routing using the alias that will point both to the current version and the latest deployed version.&lt;/p&gt;

&lt;p&gt;Next, we will create the REST API.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/api-stack.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;apiGw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaRestApi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;restApi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;deployOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;staging&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;CDK provides us with a neat construct named &lt;code&gt;LambdaRestApi&lt;/code&gt; that automatically routes any request arriving to the Lambda that we specify using Lambda Proxy integration. And here we have specified &lt;code&gt;stage&lt;/code&gt; which is actually an alias.&lt;/p&gt;

&lt;p&gt;Moving on to the important step, i.e configuring an alarm for rollbacks in case of errors.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/api-stack.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;failureAlarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Alarm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambdaFailure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;alarmDescription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The latest deployment errors &amp;gt; 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;metric&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Metric&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;metricName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AWS/Lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;statistic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dimensionsMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;aliasName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;FunctionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;period&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;evaluationPeriods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's break this down. First, we create a description for this alarm named &lt;code&gt;lambdaFailure&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We then specify a metric based on which we want the alarm to react to. The metric here is an AWS provided metric named &lt;code&gt;Errors&lt;/code&gt; under the &lt;code&gt;AWS/Lambda&lt;/code&gt; namespace.&lt;/p&gt;

&lt;p&gt;We want the observe the total number of errors so we specify &lt;code&gt;sum&lt;/code&gt; as the statistic. The time period over which we want this statistic to apply is specified in &lt;code&gt;period&lt;/code&gt; and we set that to be &lt;strong&gt;1 minute&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The dimensions that we need to specify are &lt;code&gt;FunctionName&lt;/code&gt; i.e. our Lambda function name and &lt;code&gt;Resource&lt;/code&gt; which will be our Lambda alias name in this case. The alias name will always be the &lt;code&gt;functionName:aliasName&lt;/code&gt;. We will be watching the &lt;strong&gt;Error&lt;/strong&gt; metric of this function specifically.&lt;/p&gt;

&lt;p&gt;We then specify the &lt;code&gt;threshold&lt;/code&gt; which in simple terms means that how many errors should occur before the alarm goes in an &lt;strong&gt;Alarm&lt;/strong&gt; state. Even if we encounter &lt;strong&gt;1&lt;/strong&gt; error, we would like to trigger the alarm in this case. &lt;/p&gt;

&lt;p&gt;Finally, we specify &lt;code&gt;evaluationPeriods&lt;/code&gt; which is the number of periods over which the statistic is compared to the threshold. We have set this to &lt;strong&gt;1&lt;/strong&gt; because what we want is to trigger the alarm in a period of 1 minute if the Lambda errors 1 or more times.&lt;/p&gt;

&lt;p&gt;We created the alarm, now let's use this in our Deployment Group.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/api-stack.ts&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaDeploymentGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canaryDeployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;deploymentConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaDeploymentConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CANARY_10PERCENT_5MINUTES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alarms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;failureAlarm&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We create a CodeDeploy Deployment Group specifying our Lambda alias and a Canary deployment of 10% in 5 minutes. &lt;/p&gt;

&lt;p&gt;So for the first 5 minutes, we will be serving 90% of our current Lambda version and 10% of the newly deployed Lambda version. After 5 minutes, the entire traffic will be shifted over to the newly deployed Lambda version and that will become the current version. We also provided the created alarm in &lt;code&gt;alarms&lt;/code&gt;. Note that we can specify more than one alarm.&lt;/p&gt;

&lt;p&gt;Finally, let's look at our Lambda function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// functions/apiHandler.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;API version 1 has been deployed!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a simple Lambda function that returns a 200 with a message. Now let's look at creating a Stage for our pipeline that will deploy our API.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#stage-stack"&gt;
  &lt;/a&gt;
  Stage Stack
&lt;/h3&gt;

&lt;p&gt;We need to define an application stage for our pipeline. A pipeline can have multiple stages like &lt;em&gt;dev&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt;, and &lt;em&gt;production&lt;/em&gt;. In this case, we will define a staging stage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/stages.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApiStack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./api-stack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;StagingStage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StageProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApiStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ApiStackStaging&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We create a new stage named &lt;code&gt;StagingStage&lt;/code&gt; and create our an instance of the &lt;code&gt;ApiStack&lt;/code&gt; here. This stage will be bootstrapping our API and Lambda function and we will use this stage in our pipeline.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cdk-pipelines"&gt;
  &lt;/a&gt;
  CDK Pipelines
&lt;/h3&gt;

&lt;p&gt;Let's start by creating our CDK Pipeline that will contain values for our repo, artifacts, and our synth step.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/pipeline-stack.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sourceArtifact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cloudAssemblyArtifact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Artifact&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;pipelines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CdkPipeline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deployApi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cloudAssemblyArtifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sourceAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;codepipelineActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GitHubSourceAction&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GH&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sourceArtifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;oauthToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SecretValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretsManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github-token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ryands17&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lambda-canary-deployments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;synthAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pipelines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SimpleSynthAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;standardYarnSynth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;cloudAssemblyArtifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sourceArtifact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's break this down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First we have our artifacts that will be stored in S3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we specify a &lt;code&gt;GitHubSourceAction&lt;/code&gt; with the above created &lt;code&gt;sourceArtifact&lt;/code&gt;, &lt;code&gt;oAuthToken&lt;/code&gt; that we created as a prerequisite, repo, owner, and branch that CodePipeline will pull from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we specify a synth action and here CDK automatically provides us with a &lt;code&gt;standardYarnSynth&lt;/code&gt; that installs the dependencies and runs the &lt;code&gt;synth&lt;/code&gt; command to create the corresponding CloudFormation template. If you're using NPM, you need to use &lt;code&gt;standardNpmSynth&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moving on, let's add the &lt;code&gt;Staging&lt;/code&gt; stage to this pipeline.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/pipeline-stack.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stagingStage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StagingStage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;staging&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;us-east-2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addApplicationStage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stagingStage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We create an instance of our &lt;code&gt;StagingStage&lt;/code&gt; and add it to our pipeline using the &lt;code&gt;addApplicationStage&lt;/code&gt; method. This will deploy our REST API (&lt;code&gt;ApiStack&lt;/code&gt;) that we created in the &lt;code&gt;StagingStage&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#deploying-the-app"&gt;
  &lt;/a&gt;
  Deploying the app
&lt;/h3&gt;

&lt;p&gt;We're done with the constructs. Now let's deploy the app using &lt;code&gt;yarn cdk deploy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: If you're using your own repository for this instead of mine, then you need to first push this code to your repo and then run &lt;code&gt;yarn cdk deploy&lt;/code&gt; otherwise it won't find your repository.&lt;/p&gt;

&lt;p&gt;After deploying, we can see the pipeline being run for the first time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlKWuZgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gzs9yoihzq6qoiphk69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlKWuZgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gzs9yoihzq6qoiphk69.png" alt="CodePipeline first run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this is completed, head over to CloudFormation and fetch the API Gateway URL from the Outputs section of your stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xc0EW6Os--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcxrsa2rhupbhuddw7cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xc0EW6Os--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcxrsa2rhupbhuddw7cx.png" alt="Stack Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On opening this, we see the message we sent from our Lambda successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yJEILF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq4krb43hmonoda9vshs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yJEILF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq4krb43hmonoda9vshs.png" alt="API output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's change the message in our Lambda to &lt;code&gt;API version 2&lt;/code&gt;. On performing a commit and push, we can see that CodePipeline automatically fetches the source and continues with the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTf1DYe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hcr93r3jp34fyxev20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTf1DYe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1hcr93r3jp34fyxev20.png" alt="Pipeline reacts on api version 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On checking our Lambda function, we can see that the alias is performing a weighted routing to our current version and the newly deployed one. If you try the API URL in your browser, you will see both messages, &lt;code&gt;API version 1&lt;/code&gt; and &lt;code&gt;API version 2&lt;/code&gt; on refreshing multiple times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMiCUpna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbup2qj51tfc8at5g3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMiCUpna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbup2qj51tfc8at5g3z.png" alt="Lambda alias weighted routing between versions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here version 1 is our current version (&lt;code&gt;API version 1&lt;/code&gt;) and version 2 is our newly deployed version (&lt;code&gt;API version 2&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9eaoXsu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxsecpms88vohqsqewoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9eaoXsu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxsecpms88vohqsqewoe.png" alt="Traffic shifted successfully"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that our Deployment Group shifted the traffic successfully after 5 minutes as there were no errors.&lt;/p&gt;

&lt;p&gt;Finally, let's simulate an error by adding an explicit error to the function in the hopes of triggering our CloudWatch alarm:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// functions/apiHandler.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;an unexpected error occured!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;API version 2 has been deployed!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;On pushing this code, we can see that the pipeline is triggered, and now we shall load test our API using a tool called &lt;a href="https://artillery.io/"&gt;artillery&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;artillery quick &lt;span class="nt"&gt;-c&lt;/span&gt; 30 &lt;span class="nt"&gt;-n&lt;/span&gt; 100 &lt;span class="nt"&gt;-d&lt;/span&gt; 10 &lt;span class="nv"&gt;$API_URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjwDV_t2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gkcunuaipccsabm7j3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjwDV_t2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gkcunuaipccsabm7j3.png" alt="Load testing our erroneous commit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, a lot of 502 responses from the API. Let's check on our alarm now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HApy-vKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpznyt14t5f72kqvwqpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HApy-vKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpznyt14t5f72kqvwqpm.png" alt="Alarm triggered and in the Alarm State"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voila! The alarm is triggered due to Lambda erroring out. On checking CodePipeline, we can see that the deployment failed and our original &lt;code&gt;API version 2&lt;/code&gt; is back. Let's run artillery again to see if our API works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1LjdBZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl6blgnbf2qj21utnm0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1LjdBZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kl6blgnbf2qj21utnm0x.png" alt="Pipeline fails due to the alarm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEs2BbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35zvkrhtxf9p0gfyb1vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEs2BbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35zvkrhtxf9p0gfyb1vk.png" alt="Successfully rolled back"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we get all 200! Let's fix the nasty error and commit updating the message to &lt;code&gt;API version 3&lt;/code&gt;. This will again run the pipeline and the message &lt;code&gt;API version 3&lt;/code&gt; will be displayed after a successful deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVvrsrfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c8sq2uf59hmo1cn5x36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVvrsrfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c8sq2uf59hmo1cn5x36.png" alt="Latest deployment after fixing the error"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#when-not-to-canary"&gt;
  &lt;/a&gt;
  When not to Canary
&lt;/h3&gt;

&lt;p&gt;I had a discussion with &lt;a href="https://twitter.com/sheenbrisals"&gt;Sheen Brisals&lt;/a&gt; about a point where Canary deployments are not recommended and that is when you're updating Lambda permissions.&lt;/p&gt;

&lt;p&gt;In this case, we don't want to have a state where there's a permission mismatch and errors due to this will always trigger the alarm and rollback.&lt;/p&gt;

&lt;p&gt;In this case, it would be better to replace &lt;em&gt;Canary&lt;/em&gt; with &lt;em&gt;All at Once&lt;/em&gt; in your Deployment Group as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaDeploymentGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canaryDeployment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// deploymentConfig: cd.LambdaDeploymentConfig.CANARY_10PERCENT_5MINUTES,&lt;/span&gt;

  &lt;span class="na"&gt;deploymentConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LambdaDeploymentConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL_AT_ONCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;alarms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;failureAlarm&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So whenever there's a configuration change i.e. change in IAM permissions, you perform an &lt;code&gt;ALL_AT_ONCE&lt;/code&gt; deployment and switch to Canary for the next deployment.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Here's the repo again for those who haven't checked it out yet.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ryands17"&gt;
        ryands17
      &lt;/a&gt; / &lt;a href="https://github.com/ryands17/lambda-canary-deployments"&gt;
        lambda-canary-deployments
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      API Gateway and Lambda with weighted routing to the latest function deployed
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also don't forget to &lt;strong&gt;destroy the stack&lt;/strong&gt; using &lt;code&gt;yarn cdk destroy&lt;/code&gt; and also delete the &lt;code&gt;StagingStack&lt;/code&gt; from the CloudFormation console to not incur extra charges.&lt;/p&gt;

&lt;p&gt;And we're done! Thanks for reading this and I would love to hear your thoughts on this in the comments! If you liked this post, do give it a like and share, and follow me on &lt;a href="https://twitter.com/ryands1701"&gt;Twitter&lt;/a&gt;. Until next time!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cdk</category>
      <category>lambda</category>
      <category>typescript</category>
    </item>
    <item>
      <title>I made a battle game out of Kaboom.js - Something you Devs can enjoy.</title>
      <author>ùêãùêÑùëΩùêàùë®ùêìùêáùêÄùêç Programming</author>
      <pubDate>Wed, 25 Aug 2021 15:16:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-made-a-battle-game-out-of-kaboom-js-2i60</link>
      <guid>https://dev.to/leviathanprogramming/i-made-a-battle-game-out-of-kaboom-js-2i60</guid>
      <description>&lt;p&gt;&lt;a href="https://kaboomjs.com/"&gt;Kaboom.js&lt;/a&gt; is a new javascript game development framework made from &lt;a href="https://replit.com"&gt;replit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I entered a competition where you had to make something with it and I came up with a Lord Of The Rings battle game somewhat like a basic version of warcraft/command&amp;amp;conquer.&lt;/p&gt;

&lt;p&gt;I just thought it'd be something you all would want to see and help me test out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://replit.com/talk/share/Battle-of-Five-Armies-Youll-regret-not-playing-this/144601"&gt;https://replit.com/talk/share/Battle-of-Five-Armies-Youll-regret-not-playing-this/144601&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun and feel free to share your thoughts on it.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>showdev</category>
      <category>testdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>animation-wrapper-view, declarative animations with imperative controls</title>
      <author>Swapnil Tiwari</author>
      <pubDate>Wed, 25 Aug 2021 15:16:10 +0000</pubDate>
      <link>https://dev.to/swapnil1104/animation-wrapper-view-declarative-animations-with-imperative-controls-533k</link>
      <guid>https://dev.to/swapnil1104/animation-wrapper-view-declarative-animations-with-imperative-controls-533k</guid>
      <description>&lt;p&gt;animation-wrapper-view is a collection of a well-defined set of component-level animations, that a developer can utilize just by providing some configurations. AnimationWrapperView will add plug and play type support to the already robust Animated API and will take care of all the intricate details of each animation type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Power animation payload from anywhere (backend ? üòâ)&lt;/li&gt;
&lt;li&gt;Extremely light-weight (4KB gzipped + minified).&lt;/li&gt;
&lt;li&gt;Out-of-box support for iOS, Android and RNW.&lt;/li&gt;
&lt;li&gt;Great selection of well defined animations. &lt;/li&gt;
&lt;li&gt;Declarative transformation animations with JSON.&lt;/li&gt;
&lt;li&gt;Imperative controls to the animation state. (start/pause/reset)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out this snack, play around with the library.&lt;br&gt;
Snack Link: &lt;a href="https://snack.expo.dev/@swapnil1104/animationwrapperview-playground"&gt;https://snack.expo.dev/@swapnil1104/animationwrapperview-playground&lt;/a&gt;&lt;br&gt;
Library Link: &lt;a href="https://github.com/flipkart-incubator/animation-wrapper-view"&gt;https://github.com/flipkart-incubator/animation-wrapper-view&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People looking for solving complex animation use-cases with JSON-based payload, potentially server-driven, can definitely have a look! Looking forward to any feedback/feature requests!&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Micro-Frontends using Module Federation,  presets for React and Storybook, TypeScript compiler plugins, and more in Nx 12.8!</title>
      <author>Brandon Roberts</author>
      <pubDate>Wed, 25 Aug 2021 15:06:05 +0000</pubDate>
      <link>https://dev.to/nx/micro-frontends-using-module-federation-presets-for-react-and-storybook-typescript-compiler-plugins-and-more-in-nx-12-8-1ago</link>
      <guid>https://dev.to/nx/micro-frontends-using-module-federation-presets-for-react-and-storybook-typescript-compiler-plugins-and-more-in-nx-12-8-1ago</guid>
      <description>&lt;p&gt;Nx 12.8 includes many fixes, and new features, including support for Micro-frontends using Module Federation and Angular, presets for React and Storybook, support for TypeScript compiler plugins, and more!&lt;/p&gt;

&lt;p&gt;Nx is a smart, extensible build framework to help you architect, test, and build at any scale‚Ää-‚Ääintegrating seamlessly with modern technologies and libraries while providing a robust CLI, computation caching, dependency management, and more.&lt;/p&gt;

&lt;p&gt;If you aren't familiar with it, learn about Nx at &lt;a href="https://nx.dev/angular"&gt;nx.dev/angular&lt;/a&gt;, &lt;a href="https://nx.dev/react"&gt;nx.dev/react&lt;/a&gt;, and &lt;a href="https://nx.dev/node"&gt;nx.dev/node&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nx-conf-is-coming-in-september"&gt;
  &lt;/a&gt;
  Nx Conf is coming in September!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xS5Y8rFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc508ozllaqjeva79dt4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xS5Y8rFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc508ozllaqjeva79dt4.jpeg" alt="Nx Conf logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nx Conf is a new, online &amp;amp; free-to-attend, 2-day conference featuring members of the Nx team and community. Join us as we share our ideas and expertise about making development faster, more scalable, and more collaborative.&lt;/p&gt;

&lt;p&gt;In addition to the conference there will be a &lt;strong&gt;2-day workshop on September 14th and 15th&lt;/strong&gt; on &lt;strong&gt;How to Develop at Scale with Nx Monorepos&lt;/strong&gt;, presented by members of the Nx Core Team. Workshop registration is $800 per attendee.&lt;/p&gt;

&lt;p&gt;Grab your &lt;a href="https://ti.to/nrwl/nx-conf-2021?utm_source=devto"&gt;FREE Nx Conf ticket&lt;/a&gt; and save your workshop seat today!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-for-microfrontends-with-module-federation-and-angular"&gt;
  &lt;/a&gt;
  Support for Micro-frontends with Module Federation and Angular
&lt;/h2&gt;

&lt;p&gt;Webpack 5 introduced a Module Federation Plugin enabling multiple, independently built and deployed bundles of code to form a single application. This is the foundation of Micro-Frontend Architecture and the Module Federation Plugin makes implementing such an architecture much simpler.&lt;/p&gt;

&lt;p&gt;Building on top of the work down by &lt;a href="https://github.com/angular-architects/module-federation-plugin/blob/main/libs/mf/README.md"&gt;Manfred Steyer and the community&lt;/a&gt;, we have updated our Angular executors and generators to better support this use case out of the box. &lt;/p&gt;

&lt;p&gt;Colum Ferry does a walkthrough of starting a Micro-Frontend project with Angular in the video below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e8-hBYw5bx0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This makes getting up and running with Module Federation more manageable and consistent at scale, allow you to scaffold and build a Micro-Frontend Architecture from a monorepo with all the additional benefits of Nx.&lt;/p&gt;

&lt;p&gt;Read more in our guide on &lt;a href="https://nx.dev/latest/angular/guides/setup-mfe-with-angular"&gt;how to setup a Micro-Frontend with Angular&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#preset-for-react-and-storybook"&gt;
  &lt;/a&gt;
  Preset for React and Storybook
&lt;/h2&gt;

&lt;p&gt;In Nx 12.7, we added a dedicated Storybook preset for React which dramatically simplifies the Storybook setup and makes sure that Storybook uses the same Webpack configuration as your React applications running within an Nx workspace.&lt;/p&gt;

&lt;p&gt;Here are the main differences to the previous versions of Nx:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No additional webpack.config.js needed; Custom webpack configurations can be added in the &lt;code&gt;webpackFinal&lt;/code&gt; property of the &lt;code&gt;main.js&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;main.js&lt;/code&gt; file now contains a predefined Storybook preset exported by &lt;code&gt;@nrwl/react/plugins/storybook&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The video below by Juri Strumpflohner gives a walkthrough of the new feature to simplify the Storybook and React setup.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oUE74McS_NY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Storybook support has also been extended to projects using Web Components and &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-for-typescript-compiler-plugins%C2%A0with-nestjs"&gt;
  &lt;/a&gt;
  Support for TypeScript compiler plugins¬†with NestJS
&lt;/h2&gt;

&lt;p&gt;TypeScript Plugins are quite popular as they allow plugin authors to alter the code of the consumers using an Abstract Syntax Tree (AST). The TypeScript Transformer API hooks into the TypeScript transform process. &lt;/p&gt;

&lt;p&gt;To better support this, Nx now supports adding TypeScript compiler plugins to the &lt;code&gt;build&lt;/code&gt; config for Node/NestJS projects.&lt;/p&gt;

&lt;p&gt;An example would be using the NestJS Swagger plugin to generate DTOs.&lt;/p&gt;

&lt;p&gt;First, install the &lt;code&gt;@nestjs/swagger&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @nestjs/swagger@4.8.2 &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, add the &lt;code&gt;@nestjs/swagger/plugin&lt;/code&gt; to the &lt;code&gt;tsPlugins&lt;/code&gt; array in your &lt;code&gt;build&lt;/code&gt; target options:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;An example DTO below shows the class before the plugin ins applied.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And the compiled output included the bundle.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Watch a more detailed walkthrough from Chau Tran using compiler plugins with NestJS and Swagger.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ct_ybXIN8rI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-npm-preset-for-workspaces"&gt;
  &lt;/a&gt;
  New npm preset for workspaces
&lt;/h2&gt;

&lt;p&gt;There is a misconception that Nx is best for apps and, it is not used for publishing to npm. The Nx repo itself, which consists primarily out of publishable packages, is built with Nx.&lt;/p&gt;

&lt;p&gt;The publishable &lt;code&gt;npm&lt;/code&gt; use case has always worked well, but in 12.8 we added a new preset &lt;code&gt;npm&lt;/code&gt; that creates a new workspace closer to what you're familiar with. It's pre-configured for when you want to use Nx in combination with &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;yarn&lt;/code&gt;, or &lt;code&gt;pnpm&lt;/code&gt; workspaces. &lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;npm&lt;/code&gt; preset when creating a new workspace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nx-workspace --preset=npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you already have an existing workspace with publishable packages, you can add Nx to it by running:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx add-nx-to-monorepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This adds a minimal amount of packages and configuration for Nx to be integrated into your existing workspace. This gives you all the benefits of Nx, without having to go "all-in" and keeping your existing structure in place. &lt;/p&gt;

&lt;p&gt;Read more in our &lt;a href="https://nx.dev/latest/react/guides/lerna-and-nx"&gt;Nx and Lerna/Yarn Workspace&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;We've also minimized the amount of scripts and dependencies added for new workspaces.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;You can always find the full list of commands by using the &lt;code&gt;help&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx nx &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#other-highlights"&gt;
  &lt;/a&gt;
  Other Highlights
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Refreshed guides and documentation.&lt;/li&gt;
&lt;li&gt;Support has been added for Next.js 11.1.&lt;/li&gt;
&lt;li&gt;Support has been added for Cypress 8.x.&lt;/li&gt;
&lt;li&gt;Added fast refresh support for Webpack 5 with React.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;--changedSince&lt;/code&gt; flag to jest runner for React.&lt;/li&gt;
&lt;li&gt;The computation cache directory can now be set with an environment variable.&lt;/li&gt;
&lt;li&gt;Nx now detects the package manager used to create new workspaces and installs the dependencies using that package manager, whether it be &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;yarn&lt;/code&gt;, or &lt;code&gt;pnpm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-to-update%C2%A0nx"&gt;
  &lt;/a&gt;
  How to Update¬†Nx
&lt;/h2&gt;

&lt;p&gt;Updating Nx is done with the following command, and will update your Nx workspace dependencies and code to the latest version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After updating your dependencies, run any necessary migrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate &lt;span class="nt"&gt;--run-migrations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#explore-more"&gt;
  &lt;/a&gt;
  Explore More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Get our &lt;a href="https://youtu.be/2mYLe9Kp9VM"&gt;free basic Nx workspaces course on YouTube&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Purchase our premium video course on advanced practices for Nx workspaces: &lt;a href="https://nxplaybook.com/p/advanced-nx-workspaces"&gt;here&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Be sure to click the ‚ù§Ô∏è so other people will see it. Follow us &lt;a href="https://twitter.com/NxDevTools"&gt;on Twitter&lt;/a&gt;, and subscribe to the &lt;a href="https://youtube.com/nrwl_io?sub_confirmation=1"&gt;YouTube Channel&lt;/a&gt; for more information on &lt;a href="https://angular.io"&gt;Angular&lt;/a&gt;, &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://nx.dev"&gt;Nx&lt;/a&gt;, and more!&lt;/p&gt;

&lt;p&gt;As always, if you are looking for enterprise consulting, training and support, you can find out more about how we work with our clients &lt;a href="https://nrwl.io/services/consulting"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nx</category>
      <category>angular</category>
      <category>react</category>
      <category>nestjs</category>
    </item>
    <item>
      <title>Generate YAML files in Golang.</title>
      <author>SagarTrimukhe</author>
      <pubDate>Wed, 25 Aug 2021 14:55:36 +0000</pubDate>
      <link>https://dev.to/sagartrimukhe/generate-yaml-files-in-golang-29h1</link>
      <guid>https://dev.to/sagartrimukhe/generate-yaml-files-in-golang-29h1</guid>
      <description>&lt;p&gt;This is post is about converting go struct/map into a yaml using this amazing go package &lt;a href="https://github.com/go-yaml/yaml"&gt;go-yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using &lt;a href="https://pkg.go.dev/gopkg.in/yaml.v2#Marshal"&gt;yaml.Marshal&lt;/a&gt; method to convert a struct into yaml.&lt;/p&gt;

&lt;p&gt;Each of the examples will have complete code, so that users can copy paste and quickly run and experiment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-very-basic-example-of-converting-a-struct-to-yaml"&gt;
  &lt;/a&gt;
  Example 1: Very basic example of converting a struct to yaml.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "gopkg.in/yaml.v2"
)

type Student struct {
    Name string
    Age  int
}

func main() {
    s1 := Student{
        Name: "Sagar",
        Age:  23,
    }

    yamlData, err := yaml.Marshal(&amp;amp;s1)

    if err != nil {
        fmt.Printf("Error while Marshaling. %v", err)
    }

    fmt.Println(" --- YAML ---")
    fmt.Println(string(yamlData))  // yamlData will be in bytes. So converting it to string.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS D:\Programming Languages\Go\src\yaml_conversion&amp;gt; go run .\main.go
 --- YAML ---
name: Sagar
age: 23 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-2-providing-custom-tags"&gt;
  &lt;/a&gt;
  Example 2: Providing custom tags.
&lt;/h3&gt;

&lt;p&gt;Let's say we want to have different key names in output yaml. Then we can do that by adding tags. This very similar to JSON tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "gopkg.in/yaml.v2"
)

type Student struct {
    Name string `yaml:"student-name"`
    Age  int    `yaml:"student-age"`
}

func main() {
    s1 := Student{
        Name: "Sagar",
        Age:  23,
    }

    yamlData, err := yaml.Marshal(&amp;amp;s1)
    if err != nil {
        fmt.Printf("Error while Marshaling. %v", err)
    }

    fmt.Println(" --- YAML with custom tags---")
    fmt.Println(string(yamlData))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS D:\Programming Languages\Go\src\yaml_conversion&amp;gt; go run .\main.go
 --- YAML with custom tags---
student-name: Sagar
student-age: 23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Tip: Make sure there is no gap between yaml: and "tag". (Wasted 30 mins of my time to figure out why tags are not coming in output)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-structure-with-arrays-and-maps"&gt;
  &lt;/a&gt;
  Example 3: Structure with Arrays and Maps.
&lt;/h3&gt;

&lt;p&gt;Here I have used another structure to store marks. A simple map also works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
    "gopkg.in/yaml.v2"
)

type MarksStruct struct {
    Sceince     int8 `yaml:"science"`
    Mathematics int8 `yaml:"mathematics"`
    English     int8 `yaml:"english"`
}

type Student struct {
    Name   string      `yaml:"student-name"`
    Age    int8        `yaml:"student-age"`
    Marks  MarksStruct `yaml:"subject-marks"`
    Sports []string
}

func main() {
    s1 := Student{
        Name: "Sagar",
        Age:  23,
        Marks: MarksStruct{
            Sceince:     95,
            Mathematics: 90,
            English:     90,
        },
        Sports: []string{"Cricket", "Football"},
    }

    yamlData, err := yaml.Marshal(&amp;amp;s1)

    if err != nil {
        fmt.Printf("Error while Marshaling. %v", err)
    }

    fmt.Println(" --- YAML with maps and arrays ---")
    fmt.Println(string(yamlData))
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS D:\Programming Languages\Go\src\yaml_conversion&amp;gt; go run .\main.go
 --- YAML with maps and arrays ---
student-name: Sagar
student-age: 23
subject-marks:
  science: 95
  mathematics: 90
  english: 90
sports:
- Cricket
- Football
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-4-sometimes-we-want-to-actually-create-a-yaml-file"&gt;
  &lt;/a&gt;
  Example 4: Sometimes we want to actually create a YAML file.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main
import (
    "fmt"
    "io/ioutil"

    "gopkg.in/yaml.v2"
)

type MarksStruct struct {
    Sceince     int8 `yaml:"science"`
    Mathematics int8 `yaml:"mathematics"`
    English     int8 `yaml:"english"`
}

type Student struct {
    Name   string      `yaml:"student-name"`
    Age    int8        `yaml:"student-age"`
    Marks  MarksStruct `yaml:"subject-marks"`
    Sports []string
}

func main() {
    s1 := Student{
        Name: "Sagar",
        Age:  23,
        Marks: MarksStruct{
            Sceince:     95,
            Mathematics: 90,
            English:     90,
        },
        Sports: []string{"Cricket", "Football"},
    }

    yamlData, err := yaml.Marshal(&amp;amp;s1)

    if err != nil {
        fmt.Printf("Error while Marshaling. %v", err)
    }

    fileName := "test.yaml"
    err = ioutil.WriteFile(fileName, yamlData, 0644)
    if err != nil {
        panic("Unable to write data into the file")
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output will be a file named test.yaml file.&lt;/p&gt;

&lt;p&gt;Thank you for reading. Hope this helps.&lt;/p&gt;

</description>
      <category>go</category>
      <category>yaml</category>
    </item>
    <item>
      <title>How I got Linus Torvalds in my contributors on GitHub</title>
      <author>?#@*&amp;%!</author>
      <pubDate>Wed, 25 Aug 2021 14:54:39 +0000</pubDate>
      <link>https://dev.to/martiliones/how-i-got-linus-torvalds-in-my-contributors-on-github-3k4g</link>
      <guid>https://dev.to/martiliones/how-i-got-linus-torvalds-in-my-contributors-on-github-3k4g</guid>
      <description>&lt;p&gt;Before starting, you can see for yourself by clicking on the link ‚Üí &lt;a href="https://github.com/martiliones/icon-set-creator"&gt;https://github.com/martiliones/icon-set-creator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;* don't forget to star project if you like it :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h1&gt;

&lt;p&gt;One day I wondered why my commits were not showing up in the activity overview. I googled and &lt;a href="https://stackoverflow.com/a/19183663/10939574"&gt;found on StackOverflow&lt;/a&gt; that GitHub uses your git email to link to the profile instead of the authentication data. So I thought that maybe I can change git email to get a commit from another user without his participation&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#realisation"&gt;
  &lt;/a&gt;
  Realisation
&lt;/h1&gt;

&lt;p&gt;First of all, you need to get e-mail address of a target user. At first my idea was to get the email address from the user's git repository, but then I found that I could use the GitHub API to get it. Here is the GET API method you can run in your browser&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.github.com/users/REPLACE_WITH_USERNAME/events/public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get list of user events and you can easily find e-mail with search box in your browser (&lt;code&gt;ctrl + F&lt;/code&gt; in most browsers, or if "Filter JSON" for Firefox)&lt;/p&gt;

&lt;p&gt;Once we get the email address, we can create a commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nt"&gt;-c&lt;/span&gt; user.name&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Linus Torvalds'&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; user.email&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'torvalds@linux-foundation.org'&lt;/span&gt; commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"JavaScript is my favorite language üíï"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To display your commits in target user Activity Overview &lt;strong&gt;at least one&lt;/strong&gt; of the following must be true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User is a collaborator on the repository or are a member of the organization that owns the repository.&lt;/li&gt;
&lt;li&gt;User have forked the repository.&lt;/li&gt;
&lt;li&gt;User have opened a pull request or issue in the repository.&lt;/li&gt;
&lt;li&gt;User have starred the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h1&gt;

&lt;p&gt;You can do this with anyone as long as you have a user's email address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Uq80k2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76sots36it7nt0inx6sx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Uq80k2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76sots36it7nt0inx6sx.png" alt="Linus Torvalds commit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGi8elep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs8jmuwnt1mki89nq1sl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGi8elep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs8jmuwnt1mki89nq1sl.png" alt="Contributors Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I think GitHub should fix this bug to prevent attacks on profiles. If the target user starred your repository, you can draw something in his Activity Overview as example&lt;/p&gt;

&lt;p&gt;Thank you for your time. Share your opinion about it in the comments üëá&lt;/p&gt;

</description>
      <category>news</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Characteristics of Serverless Computing</title>
      <author>BPB Publications</author>
      <pubDate>Wed, 25 Aug 2021 14:41:55 +0000</pubDate>
      <link>https://dev.to/bpb_online/characteristics-of-serverless-computing-2ij4</link>
      <guid>https://dev.to/bpb_online/characteristics-of-serverless-computing-2ij4</guid>
      <description>&lt;p&gt;Serverless Computing is the newest cloud hosting and execution model offered by cloud vendors. It is widely adopted by Cloud Architects to build highly scalable new generation cloud solutions. It is cheap and comes with a lot of useful features that classic cloud hosting models may not offer. Serverless Computing model is used by cloud giants like Microsoft and Amazon to build their in-house products.&lt;/p&gt;

&lt;p&gt;Serverless Computing does not mean that no servers are hosting the application code. Application code cannot be hosted or executed without a server. In the case of Serverless Computing, application code always executes on a server. However, the server infrastructure, operating system, hosting, and execution environment is abstracted to you. You build the application code and deploy it to the Serverless environment. You need not worry about the underlying hosting and execution mechanism that is handled by the cloud vendor.&lt;/p&gt;

&lt;p&gt;It is highly essential to understand the characteristics of Serverless Computing before adopting it. Serverless Computing exhibits the following characteristics.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On-Demand execution&lt;/li&gt;
&lt;li&gt;Elastic&lt;/li&gt;
&lt;li&gt;No host&lt;/li&gt;
&lt;li&gt;Distributed&lt;/li&gt;
&lt;li&gt;Shorter execution time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these characteristics has an impact on the Serverless solution that you are developing. You should develop Serverless solutions by taking these characteristics into account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On-Demand execution&lt;/strong&gt;&lt;br&gt;
Serverless solutions are event-driven. They execute on-demand when invoked and remain idle until events invoke them. And once invoked, they start doing their task. An array of events can trigger Serverless solutions. Following are few of the popular events that can trigger a Serverless solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP Triggers&lt;/li&gt;
&lt;li&gt;Cloud Storage Queue based events like adding an item to a queue or deleting an item from a queue.&lt;/li&gt;
&lt;li&gt;Databases operations like adding a record or deleting a record. Operations in Modern databases like AWS DynamoDB or - &lt;/li&gt;
&lt;li&gt;Azure Cosmos DB can invoke Serverless Solutions.&lt;/li&gt;
&lt;li&gt;External social media triggers an incoming message to a Twitter handle.&lt;/li&gt;
&lt;li&gt;Another Serverless Solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Elastic&lt;/strong&gt;&lt;br&gt;
Serverless solutions scale on demand. You need not configure either manual scaling or automatic scaling while building Serverless solutions. 8nderlying cloud platform managed by the cloud vendor does the scaling. The cloud vendor makes sure that all necessary infrastructure and servers are in place to support scaling. And the solution can scale out automatically during peak hours and scale in when there is less load. However, dynamically scaling is not that simple as it appears. Every cloud vendor has a limit to the number of instances that the solution can scale. While designing a Serverless solution, you should take into account the maximum number of instances that the Serverless service scales up. Else that would result in a bottleneck and can bring down the performance of the Serverless solution. Usually, cloud vendors provide multiple pricing tiers for the Serverless services based on the number of instances they can scale. In a nutshell, scaling cannot be controlled by you, and you depend on the underlying platform for the cloud solution to scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No host&lt;/strong&gt;&lt;br&gt;
No host does not mean that you do not deploy Serverless solutions to a hosting environment in the server. In the case of Serverless solutions, the cloud vendor abstracts the underlying server and the hosting environment from you. You have no control over the underlying infrastructure. You host the code in the Serverless environment, and the cloud vendor takes care of the underlying hosting infrastructure managed by the cloud vendor.&lt;/p&gt;

&lt;p&gt;You should design the Serverless applications very carefully because you have no control to tune the hosting environment based on the application requirements. You have to be very sure that the underlying infrastructure runs the application as-is without having a necessity to modify the underlying hosting environment. Else your application may not be the right candidate for Server hosting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributed&lt;/strong&gt;&lt;br&gt;
Serverless solutions are distributed by design. They strictly follow the Single Responsibility pattern. Each of the Serverless solution components should perform the task it needs to. For example, one of the Serverless components reads the data from the database. Another component massages the data and pushes it to a queue. A third component processes the data in the queue. Serverless solutions are clean and support complex design patterns like Microservices architecture.&lt;/p&gt;

&lt;p&gt;Data consistency for the Serverless application can be a concern like any other distributed systems. When one Serverless component is writing to the database, then the Serverless component performing the read operation should wait for the write operation to complete. Else there can be read errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shorter execution time&lt;/strong&gt;&lt;br&gt;
Application code hosted on Serverless services must complete execution in a short span. They should not keep on executing for a long time. Application code on a Serverless service executes whenever an event invokes the service. The execution must complete quickly.&lt;/p&gt;

&lt;p&gt;The cloud vendors impose the execution restriction at the platform level. They set a time limit beyond which the application code execution times out. The application code must complete execution before the time limit set by the cloud vendor. &lt;/p&gt;

&lt;p&gt;Cloud vendors offer a wide range of pricing tiers based on the maximum code execution time. You should use the appropriate pricing tier that is best suited for the application.&lt;/p&gt;

&lt;p&gt;Hope this was helpful.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>serverless</category>
      <category>cloudcomputing</category>
      <category>serverlesscomputing</category>
    </item>
    <item>
      <title>Generating Awesome User Avatars is Easy</title>
      <author>Ashik Chapagain</author>
      <pubDate>Wed, 25 Aug 2021 14:40:07 +0000</pubDate>
      <link>https://dev.to/chapagainashik/generating-awesome-user-avatars-is-easy-cjj</link>
      <guid>https://dev.to/chapagainashik/generating-awesome-user-avatars-is-easy-cjj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-developers"&gt;
  &lt;/a&gt;
  Hey Developers
&lt;/h1&gt;

&lt;p&gt;Whenever user signups, we as a developer either ask them to upload an avatar or add a simple avatar placeholder that looks too boring. &lt;/p&gt;

&lt;p&gt;So, today I'll be sharing, how you guys can create an amazing avatar for your users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's Start
&lt;/h1&gt;

&lt;p&gt;There's a tool name  &lt;a href="https://avatars.dicebear.com/"&gt;DiceBear Avatars&lt;/a&gt;  which will help you create an amazing avatar using the user's name. And this is too easy to use. This will generate different avatars based on your options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="https://avatars.dicebear.com/api/male/Ashik%20Chapagain.svg"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you'll get.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yZ-2tC47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629899694752/NrZhP7sKD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yZ-2tC47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629899694752/NrZhP7sKD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just of one type. DiceBear Avatars provides you 10 types of avatars.&lt;/p&gt;

&lt;p&gt;Let's look at them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#avatars-types"&gt;
  &lt;/a&gt;
  Avatars Types
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#male"&gt;
  &lt;/a&gt;
  Male
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/male/Lalit%20Kishore.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you'll get.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xavmqnjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629899867456/K4V2LXuyZT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xavmqnjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629899867456/K4V2LXuyZT.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#female"&gt;
  &lt;/a&gt;
  Female
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/female/Some Girl Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--thiRLWVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900051149/A2E5MUJKC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--thiRLWVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900051149/A2E5MUJKC.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#human"&gt;
  &lt;/a&gt;
  Human
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/human/Some Person Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rd89FLy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900122934/X87sSvHUY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rd89FLy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900122934/X87sSvHUY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avataaars"&gt;
  &lt;/a&gt;
  Avataaars
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/avataaars/Some Person Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WSHHzHc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900248911/GK_nrcfhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSHHzHc_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900248911/GK_nrcfhi.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottts"&gt;
  &lt;/a&gt;
  Bottts
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/bottts/Some Person Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DpQ4t_aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900322272/TlMfWrvjQd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DpQ4t_aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900322272/TlMfWrvjQd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#micah"&gt;
  &lt;/a&gt;
  Micah
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/micah/Some Person Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1owUZzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900364573/i88p6ovq-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1owUZzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900364573/i88p6ovq-.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initials"&gt;
  &lt;/a&gt;
  Initials
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/initials/Some Person Name.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGm9C199--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900483780/9oUgD1VI6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGm9C199--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900483780/9oUgD1VI6.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identicon"&gt;
  &lt;/a&gt;
  Identicon
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/identicon/Ashik Chapagain.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci01dMcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900512984/eWR682w2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci01dMcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900512984/eWR682w2h.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jdenticon"&gt;
  &lt;/a&gt;
  Jdenticon
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/jdenticon/Ashik Chapagain.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxhOw4dV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900552113/hUttmb1HjP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxhOw4dV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900552113/hUttmb1HjP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gridy"&gt;
  &lt;/a&gt;
  Gridy
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://avatars.dicebear.com/api/gridy/Ashik Chapagain.svg"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iwZ_atle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900578845/PYOgkVo95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iwZ_atle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629900578845/PYOgkVo95.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for today guys. &lt;/p&gt;

</description>
      <category>html</category>
      <category>tips</category>
      <category>tutorials</category>
      <category>ui</category>
    </item>
  </channel>
</rss>
