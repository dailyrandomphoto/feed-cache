<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Job Opportunities - Freelancing Developer </title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 28 Apr 2021 02:26:23 +0000</pubDate>
      <link>https://dev.to/krowser/job-opportunities-freelancing-developer-o7i</link>
      <guid>https://dev.to/krowser/job-opportunities-freelancing-developer-o7i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-us"&gt;
  &lt;/a&gt;
  About Us
&lt;/h2&gt;

&lt;p&gt;Established in 2020 by Kayinajah Inyang, Krowser Web Services (KWS) creates hybrid applications built with creativity for more speed &amp;amp; data saving while protecting your privacy.&lt;/p&gt;

&lt;p&gt;Krowser Web Services has raised a total of $62.3M in funding over 9 rounds. Our latest funding was raised on Mar 22, 2021, from a Series A round.&lt;/p&gt;

&lt;p&gt;LinkedIn: &lt;a href="https://linkedin.com/company/krowser"&gt;https://linkedin.com/company/krowser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Website:&lt;br&gt;
&lt;a href="http://kws.uk.to"&gt;http://kws.uk.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CrunchBase: &lt;a href="https://www.crunchbase.com/organization/krowser-web-services"&gt;https://www.crunchbase.com/organization/krowser-web-services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl6qo7ty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7ie4m55vblsxb9j7iot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gl6qo7ty--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7ie4m55vblsxb9j7iot.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-opportunity"&gt;
  &lt;/a&gt;
  About The Opportunity
&lt;/h2&gt;

&lt;p&gt;As a way of helping upcoming developers, we are recruiting freelancing developers, they will find their clients and complete the job on behalf of Krowser Web Services and keep all the revenue.&lt;/p&gt;

&lt;p&gt;We will also provide them with some of the necessary tools they need and funding to obtain the core software development certifications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#location"&gt;
  &lt;/a&gt;
  Location
&lt;/h2&gt;

&lt;p&gt;Remote, you can be based in any country of the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#skill-amp-qualifications"&gt;
  &lt;/a&gt;
  Skill &amp;amp; Qualifications
&lt;/h2&gt;

&lt;p&gt;Basic programming skills, as this is an entry-level job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-apply"&gt;
  &lt;/a&gt;
  How To Apply
&lt;/h2&gt;

&lt;p&gt;Apply on LinkedIn: &lt;a href="https://www.linkedin.com/jobs/view/2485126700"&gt;https://www.linkedin.com/jobs/view/2485126700&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;/p&gt;

&lt;p&gt;Send your CV to: &lt;a href="mailto:krowser@aol.com"&gt;krowser@aol.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please feel free to leave questions in the comments section.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>career</category>
    </item>
    <item>
      <title>Managing loading status for React is much easier with loadio</title>
      <author>Mustafa KURU</author>
      <pubDate>Wed, 28 Apr 2021 02:21:52 +0000</pubDate>
      <link>https://dev.to/hepter/managing-loading-status-for-react-is-much-easier-with-loadio-1n8n</link>
      <guid>https://dev.to/hepter/managing-loading-status-for-react-is-much-easier-with-loadio-1n8n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Many projects contain asynchronous calls. The operation of these may be unaware of the user, or the user may need to know about that status. &lt;/p&gt;

&lt;p&gt;In order to notify the user of this, the loading component is shown on the screen and the user is informed that something is running. At this point, the management of asynchronous methods should be managed in various ways and the component should be demonstrated.&lt;/p&gt;

&lt;p&gt;Today, I will show you how you can handle this in an easy way with loadio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loadio"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/loadio"&gt;loadio&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This package is a simple to use tool that allows you to manage status information with promises.&lt;/p&gt;

&lt;p&gt;Install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Yarn&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add loadio

&lt;span class="c"&gt;# NPM&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;loadio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wrap the method you want to follow the status information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStatus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loadio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or add promise directly into it with PoolManager&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;PoolManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get/data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all. You can easily view the status on your home page by calling the new method you have wrapped in place of the old one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStatus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loadio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStatus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loaded!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myWrappedfetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get/data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It also generates a percentage of information according to the number of tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;runningTasks&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A complete example with React Component is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withPool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStatus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loadio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loaded!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get/data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/example-usage-loadio-loz1y?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzpI10jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Example usage - loadio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By wrapping promise methods or else adding them directly, we have made it easy to show the loading status with percentage information.&lt;br&gt;
You can view the details of the package by clicking &lt;a href="https://www.npmjs.com/package/loadio"&gt;here&lt;/a&gt;.&lt;br&gt;
Thanks.&lt;/p&gt;

</description>
      <category>react</category>
      <category>npm</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Build Better Machine Learning Models</title>
      <author>Rishit Dagli</author>
      <pubDate>Wed, 28 Apr 2021 02:19:57 +0000</pubDate>
      <link>https://dev.to/rishitdagli/how-to-build-better-machine-learning-models-3ff0</link>
      <guid>https://dev.to/rishitdagli/how-to-build-better-machine-learning-models-3ff0</guid>
      <description>&lt;p&gt;Hello developers 👋. If you have built Deep Neural Networks before, you might know that it can involve a lot of experimentation.&lt;/p&gt;

&lt;p&gt;In this article, I will share with you some useful tips and guidelines that you can use to better build better deep learning models. These tricks should make it a lot easier for you to develop a good network.&lt;/p&gt;

&lt;p&gt;You can pick and choose which tips you use, as some will be more helpful for the projects you are working on. Not everything mentioned in this article will straight up improve your models’ performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-highlevel-approach-for-hyperparameter-tuning"&gt;
  &lt;/a&gt;
  A high-level approach for Hyperparameter tuning🕹️
&lt;/h2&gt;

&lt;p&gt;One of the more painful things about training Deep Neural Networks is the large number of hyperparameters you have to deal with.&lt;/p&gt;

&lt;p&gt;These could be your learning rate α, the discounting factor ρ, and epsilon ε if you are using the RMSprop optimizer (&lt;a href="https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf"&gt;Hinton et al.&lt;/a&gt;) or the exponential decay rates β₁ and β₂ if you are using the Adam optimizer (&lt;a href="https://arxiv.org/abs/1412.6980"&gt;Kingma et al.&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You also need to choose the number of layers in the network or the number of hidden units for the layers. You might be using learning rate schedulers and would want to configure those features and a lot more 😩! We definitely need ways to better organize our hyperparameter tuning process.&lt;/p&gt;

&lt;p&gt;A common algorithm I tend to use to organize my hyperparameter search process is Random Search. Though there are other algorithms that might be better, I usually end up using it anyway.&lt;/p&gt;

&lt;p&gt;Let’s say for the purpose of this example you want to tune two hyperparameters and you suspect that the optimal values for both would be somewhere between one and five.&lt;/p&gt;

&lt;p&gt;The idea here is that instead of picking twenty-five values to try out like (1, 1) (1, 2) and so on systematically, it would be more effective to select twenty-five points at random.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8CPa6BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4y2a099qx0subwq5rgf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z8CPa6BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4y2a099qx0subwq5rgf.png"&gt;&lt;/a&gt;&lt;br&gt;Based on Lecture Notes of &lt;a href="https://www.andrewng.org/"&gt;Andrew Ng&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;Here is a simple example with TensorFlow where I try to use Random Search on the Fashion MNIST Dataset for the learning rate and the number of units in the first Dense layer:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here I suspect that an optimal number of units in the first Dense layer would be somewhere between 32 and 512, and my learning rate would be one of 1e-2, 1e-3, or 1e-4.&lt;/p&gt;

&lt;p&gt;Consequently, as shown in this example, I set my minimum value for the number of units to be 32 and the maximum value to be 512 and have a step size of 32. Then, instead of hardcoding a value for the number of units, I specify a range to try out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;hp_units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'units'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp_units&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We do the same for our learning rate, but our learning rate is simply one of 1e-2, 1e-3, or 1e-4 rather than a range.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;hp_learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'learning_rate'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1e-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1e-4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;optimizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optimizers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Adam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;learning_rate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hp_learning_rate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we perform Random Search and specify that among all the models we build, the model with the highest validation accuracy would be called the best model. Or simply that getting a good validation accuracy is the goal.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tuner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_builder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;objective&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'val_accuracy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                        &lt;span class="n"&gt;max_trials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'random_search_starter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;project_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'intro_to_kt'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="n"&gt;tuner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;validation_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label_test&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After doing so, I also want to retrieve the best model and the best hyperparameter choice. Though I would like to point out that using the &lt;code&gt;get_best_models&lt;/code&gt; is usually considered a shortcut.&lt;/p&gt;

&lt;p&gt;To get the best performance you should retrain your model with the best hyperparameters you get on the full dataset.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Which was the best model?
&lt;/span&gt;&lt;span class="n"&gt;best_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tuner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_best_models&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# What were the best hyperparameters?
&lt;/span&gt;&lt;span class="n"&gt;best_hyperparameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tuner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_best_hyperparameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I won’t be talking about this code in detail in this article, but you can read about it in &lt;a href="https://towardsdatascience.com/the-art-of-hyperparameter-tuning-in-deep-neural-nets-by-example-685cb5429a38"&gt;this article&lt;/a&gt; I wrote some time back if you want.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#use-mixed-precision-training-for-large-networks"&gt;
  &lt;/a&gt;
  Use Mixed Precision Training for large networks🎨
&lt;/h2&gt;

&lt;p&gt;The bigger your neural network is, the more accurate your results (in general). As model sizes grow, the memory and compute requirements for training these models also increase.&lt;/p&gt;

&lt;p&gt;The idea with using Mixed Precision Training (NVIDIA, &lt;a href="https://arxiv.org/abs/1710.03740"&gt;Micikevicius et al.&lt;/a&gt;) is to train deep neural networks using half-precision floating-point numbers which let you train large neural networks a lot faster with no or negligible decrease in the performance of the networks.&lt;/p&gt;

&lt;p&gt;But, I’d like to point out that this technique should only be used for large models with more than 100 million parameters or so.&lt;/p&gt;

&lt;p&gt;While mixed-precision would run on most hardware, it will only speed up models on recent NVIDIA GPUs (for example Tesla V100 and Tesla T4) and Cloud TPUs.&lt;/p&gt;

&lt;p&gt;I want to give you an idea of the performance gains when using Mixed Precision. When I trained a ResNet model on my GCP Notebook instance (consisting of a Tesla V100) it was almost three times better in the training time and almost 1.5 times on a Cloud TPU instance with almost no difference in accuracy. The code to measure the above speed-ups was taken from &lt;a href="https://www.tensorflow.org/guide/mixed_precision"&gt;this example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To further increase your training throughput, you could also consider using a larger batch size — and since we are using float16 tensors you should not run out of memory.&lt;/p&gt;

&lt;p&gt;It is also rather easy to implement Mixed Precision with TensorFlow. With TensorFlow you could easily use the &lt;a href="https://www.tensorflow.org/api_docs/python/tf/keras/mixed_precision/"&gt;tf.keras.mixed_precision&lt;/a&gt; Module that allows you to set up a data type policy (to use float16) and also apply loss scaling to prevent underflow.&lt;/p&gt;

&lt;p&gt;Here is a minimalistic example of using Mixed Precision Training on a network:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;In this example, we first set the &lt;code&gt;dtype&lt;/code&gt; policy to be float16 which implies that all of our model layers will automatically use float16.&lt;/p&gt;

&lt;p&gt;After doing so we build a model, but we override the data type for the last or the output layer to be float32 to prevent any numeric issues. Ideally, your output layers should be float32.&lt;/p&gt;

&lt;p&gt;Note: I’ve built a model with so many units so we can see some difference in the training time with Mixed Precision Training since it works well for large models.&lt;/p&gt;

&lt;p&gt;If you are looking for more inspiration to use Mixed Precision Training, here is an image demonstrating speedup for multiple models by Google Cloud on a TPU:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fpb8aKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619499585936/xdSEWTHP9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fpb8aKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619499585936/xdSEWTHP9.png" alt="Speedups on a Cloud TPU"&gt;&lt;/a&gt;**&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ceim9deP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di96vmr13vamw0341vrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ceim9deP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di96vmr13vamw0341vrn.png"&gt;&lt;/a&gt;&lt;br&gt;Speedups on a Cloud TPU
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-grad-check-for-backpropagation"&gt;
  &lt;/a&gt;
  Use Grad Check for backpropagation✔️
&lt;/h2&gt;

&lt;p&gt;In multiple scenarios, I have had to custom implement a neural network. And implementing backpropagation is typically the aspect that’s prone to mistakes and is also difficult to debug.&lt;/p&gt;

&lt;p&gt;With incorrect backpropagation your model could learn something which might look reasonable, which makes it even more difficult to debug. So, how cool would it be if we could implement something which could allow us to debug our neural nets easily?&lt;/p&gt;

&lt;p&gt;I often use Gradient Check when implementing backpropagation to help me debug it. The idea here is to approximate the gradients using a numerical approach. If it is close to the calculated gradients by the backpropagation algorithm, then you can be more confident that the backpropagation was implemented correctly.&lt;/p&gt;

&lt;p&gt;As of now, you can use this expression in standard terms to get a vector which we will call &lt;code&gt;dθ[approx]&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PD5zXHu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6p1fpca2td24ncfv855.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PD5zXHu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6p1fpca2td24ncfv855.png"&gt;&lt;/a&gt;&lt;br&gt;Calculate approx gradients‌‌
  &lt;/p&gt;

&lt;p&gt;In case you are looking for the reasoning behind this, you can find more about it in &lt;a href="https://towardsdatascience.com/debugging-your-neural-nets-and-checking-your-gradients-f4d7f55da167"&gt;this article&lt;/a&gt; I wrote.&lt;/p&gt;

&lt;p&gt;So, now we have two vectors &lt;code&gt;dθ[approx]&lt;/code&gt; and &lt;code&gt;dθ&lt;/code&gt; (calculated by backprop). And these should be almost equal to each other. You could simply compute the Euclidean distance between these two vectors and use this reference table to help you debug your nets:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIXKWqi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlx2i0bpbdq79041fp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIXKWqi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmlx2i0bpbdq79041fp5.png"&gt;&lt;/a&gt;&lt;br&gt;Reference table
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cache-datasets"&gt;
  &lt;/a&gt;
  Cache Datasets💾
&lt;/h2&gt;

&lt;p&gt;Caching datasets is a simple idea but it’s not one I have seen used much. The idea here is to go over the dataset in its entirety and cache it either in a file or in memory (if it is a small dataset).&lt;/p&gt;

&lt;p&gt;This should save you from performing some expensive CPU operations like file opening and data reading during every single epoch.&lt;/p&gt;

&lt;p&gt;This does also means that your first epoch would comparatively take more time📉 since you would ideally be performing all operations like opening files and reading data in the first epoch and then caching them. But the subsequent epochs should be a lot faster since you would be using the cached data.&lt;/p&gt;

&lt;p&gt;This definitely seems like a very simple to implement idea, right? Here is an example with TensorFlow showing how you can very easily cache datasets. It also shows the speedup 🚀 from implementing this idea. Find the complete code for the below example in &lt;a href="https://gist.github.com/Rishit-dagli/5d06c69c69e990f9e15249e15002bb07"&gt;this gist&lt;/a&gt; of mine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JLxKrD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va5iww3hhi0ko8ixrbfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JLxKrD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/va5iww3hhi0ko8ixrbfp.png"&gt;&lt;/a&gt;&lt;br&gt;A simple example of caching datasets and the speedup with it
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-tackle-overfitting"&gt;
  &lt;/a&gt;
  How to tackle overfitting ⭐
&lt;/h2&gt;

&lt;p&gt;When you’re working with neural networks, overfitting and underfitting might be two of the most common problems you face. This section talks about some common approaches that I use when tackling these problems.&lt;/p&gt;

&lt;p&gt;You might know this, but high bias will cause you to miss a relationship between features and labels (underfitting) and high variance will cause the model to capture the noise and overfit to the training data.&lt;/p&gt;

&lt;p&gt;I believe the most effective way to solve overfitting is to get more data — though you could also augment your data. A benefit of deep neural networks is that their performance improves as they are fed more and more data.&lt;/p&gt;

&lt;p&gt;But in a lot of situations, it might be too expensive to get more data or it simply might not be possible to do so. In that case, let’s talk about a couple of other methods you could use to tackle overfitting.&lt;/p&gt;

&lt;p&gt;Apart from getting more data or augmenting your data, you could also tackle overfitting either by changing the architecture of the network or by applying some modifications to the network’s weights. Let’s look at these two methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-model-architecture"&gt;
  &lt;/a&gt;
  Changing the Model Architecture
&lt;/h3&gt;

&lt;p&gt;A simple way to change the architecture such that it doesn’t overfit would be to use Random Search to stumble upon a good architecture. Or you could try pruning nodes from your model, essentially lowering the capacity of your model.&lt;/p&gt;

&lt;p&gt;We already talked about Random Search, but in case you want to see an example of pruning you could take a look at the &lt;a href="https://www.tensorflow.org/model_optimization/guide/pruning"&gt;TensorFlow Model Optimization Pruning Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifying-network-weights"&gt;
  &lt;/a&gt;
  Modifying Network Weights
&lt;/h3&gt;

&lt;p&gt;In this section, we will see some methods I commonly use to prevent overfitting by modifying a network’s weights.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#weight-regularization"&gt;
  &lt;/a&gt;
  Weight Regularization
&lt;/h4&gt;

&lt;p&gt;Iterating back on what we discussed, “simpler models are less likely to overfit than complex ones”. We try to keep a bar on the complexity of the network by forcing its weights only to take small values.&lt;/p&gt;

&lt;p&gt;To do so we will add to our loss function a term that can penalize our model if it has large weights. Often L₁ and L₂ regularizations are used, the difference being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;L1 - The penalty added is ∝ to |weight coefficients|&lt;/li&gt;
&lt;li&gt;L2 - The penalty added is ∝ to |weight coefficients|²&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;where |x| represents absolute values.&lt;/p&gt;

&lt;p&gt;Do you notice the difference between L1 and L2, the square term? Due to this, L1 might push weights to be equal to zero whereas L2 would have weights tending to zero but not zero.&lt;/p&gt;

&lt;p&gt;In case you are curious about exploring this further, &lt;a href="https://towardsdatascience.com/solving-overfitting-in-neural-nets-with-regularization-301c31a7735f"&gt;this article&lt;/a&gt; goes deep into regularizations and might help.&lt;/p&gt;

&lt;p&gt;This is also the exact reason why I tend to use L2 more than L1 regularization. Let’s see an example of this with TensorFlow.&lt;/p&gt;

&lt;p&gt;Here I show some code to create a simple Dense layer with 3 units and the L2 regularization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;
&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kernel_regularizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regularizers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To provide more clarity on what this does, as we discussed above this would add a term (0.1 × weight_coefficient_value²) to the loss function which works as a penalty to very big weights. Also, it is as easy as replacing L2 to L1 in the above code to implement L1 for your layer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dropouts"&gt;
  &lt;/a&gt;
  Dropouts
&lt;/h4&gt;

&lt;p&gt;The first thing I do when I am building a model and face overfitting is try using dropouts (&lt;a href="https://jmlr.org/papers/v15/srivastava14a.html"&gt;Srivastava et al.&lt;/a&gt;). The idea here is to randomly drop out or set to zero (ignore) x% of output features of the layer during training.&lt;/p&gt;

&lt;p&gt;We do this to stop individual nodes from relying on the output of other nodes and prevent them from co-adapting from other nodes too much.&lt;/p&gt;

&lt;p&gt;Dropouts are rather easy to implement with TensorFlow since they are available as layers. Here is an example of me trying to build a model to differentiate images of dogs and cats with Dropout to reduce overfitting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conv2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'same'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;input_shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMG_HEIGHT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMG_WIDTH&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxPooling2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conv2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'same'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxPooling2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flatten&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'relu'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;activation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'sigmoid'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you could see in the code above, you could directly use &lt;code&gt;tf.keras.layers.dropout&lt;/code&gt; to implement the dropout, passing it the fraction of output features to ignore (here 20% of the output features).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#early-stopping"&gt;
  &lt;/a&gt;
  Early stopping
&lt;/h4&gt;

&lt;p&gt;Early stopping is another regularization method I often use. The idea here is to monitor the performance of the model at every epoch on a validation set and terminate the training when you meet some specified condition for the validation performance (like stop training when loss &amp;lt; 0.5)&lt;/p&gt;

&lt;p&gt;It turns out that the basic condition like we talked about above works like a charm if your training error and validation error look something like in this image. In this case, Early Stopping would just stop training when it reaches the red box (for demonstration) and would straight up prevent overfitting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It (Early stopping) is such a simple and efficient regularization technique that Geoffrey Hinton called it a “beautiful free lunch”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-Hands-On Machine Learning with Scikit-Learn and TensorFlow by Aurelien Geron&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6lGNJn90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r1zz9c69yy7xz2ev56q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6lGNJn90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r1zz9c69yy7xz2ev56q.png"&gt;&lt;/a&gt;&lt;br&gt;Adapted from &lt;a href="https://link.springer.com/chapter/10.1007/978-3-642-35289-8_5"&gt;Lutz Prechelt&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;However, for some cases, you would not end up with such straightforward choices for identifying the criterion or knowing when Early Stopping should stop training the model.&lt;/p&gt;

&lt;p&gt;For the scope of this article, we will not be talking about more criteria here, but I would recommend that you check out “&lt;a href="https://link.springer.com/chapter/10.1007/978-3-642-35289-8_5"&gt;Early Stopping — But When, Lutz Prechelt&lt;/a&gt;” which I use a lot to help decide criteria.&lt;/p&gt;

&lt;p&gt;Let’s see an example of Early Stopping in action with TensorFlow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;

&lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EarlyStopping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monitor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'loss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patience&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keras&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sequential&lt;/span&gt;&lt;span class="p"&gt;([...])&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(...,&lt;/span&gt; &lt;span class="n"&gt;callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;In the above example, we create an Early Stopping Callback and specify that we want to monitor our loss values. We also specify that it should stop training if it does not see noticeable improvements in loss values in 3 epochs. Finally, while training the model, we specify that it should use this callback.&lt;/p&gt;

&lt;p&gt;Also, for the purpose of this example, I show a Sequential model — but this could work in the exact same manner with a model created with the functional API or sub-classed models, too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h2&gt;

&lt;p&gt;Thank you for sticking with me until the end. I hope you will benefit from this article and incorporate these tips in your own experiments.&lt;/p&gt;

&lt;p&gt;I am excited to see if they help you improve the performance of your neural nets, too. If you have any feedback or suggestions for me please feel free to &lt;a href="https://twitter.com/rishit_dagli"&gt;reach out to me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>deeplearning</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to make masonry with CSS columns property</title>
      <author>Mahmoud Ibrahiam</author>
      <pubDate>Wed, 28 Apr 2021 00:20:19 +0000</pubDate>
      <link>https://dev.to/_zoka/how-to-make-masonry-with-css-columns-property-37k4</link>
      <guid>https://dev.to/_zoka/how-to-make-masonry-with-css-columns-property-37k4</guid>
      <description>&lt;p&gt;There are many ways to make a masonry layout with CSS but today we will use columns property to build it.&lt;/p&gt;

&lt;p&gt;At first, we will build a simple card to use in our layout.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/officialzoka/embed/zYNXzvq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#column-property"&gt;
  &lt;/a&gt;
  Column property
&lt;/h2&gt;

&lt;p&gt;Second, let's make our masonry container and give it some CSS rules, I will make it 3 columns on large screens, two columns on medium screens, and one column on small screens.&lt;/p&gt;

&lt;p&gt;we will use the &lt;code&gt;column-count&lt;/code&gt; property to do that and the &lt;code&gt;gap&lt;/code&gt; to set the space between cards.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/officialzoka/embed/jOyRwVg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-add-some-magic"&gt;
  &lt;/a&gt;
  let's add some magic
&lt;/h3&gt;

&lt;p&gt;In real-life projects, all cards aren't the same height, so you need to remove unnecessary height of cards, And for that, we will use &lt;code&gt;height:auto&lt;/code&gt; to do that, see what I mean in the next pen.&lt;/p&gt;

&lt;p&gt;one more problem that the card may be broke for a new column, And to solve that will we use &lt;code&gt;break-inside:avoid&lt;/code&gt; to prevent cards from broken.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/officialzoka/embed/wvgZemb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-test-layout"&gt;
  &lt;/a&gt;
  let's test layout
&lt;/h4&gt;

&lt;p&gt;I think that you need to see the masonry layout dynamically with more cards, let's add more cards with javascript to see the layout.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/officialzoka/embed/MWJRoZb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading, I wish this article is more useful for you.&lt;/p&gt;

&lt;p&gt;You can look at my &lt;a href="https://darker.vercel.app"&gt;tints and shades generator tool&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>404 not found page demo</title>
      <author>jasonohdz1501</author>
      <pubDate>Wed, 28 Apr 2021 00:04:03 +0000</pubDate>
      <link>https://dev.to/jasondev/404-not-found-page-demo-21e</link>
      <guid>https://dev.to/jasondev/404-not-found-page-demo-21e</guid>
      <description>&lt;p&gt;Hi pals! I've just made a simple 404 not found page design. Hope you can give feedback:&lt;br&gt;
&lt;a href="https://404-not-found-demo-page.netlify.app"&gt;https://404-not-found-demo-page.netlify.app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>design</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to start a TypeScript project [2021]</title>
      <author>Craig Holliday</author>
      <pubDate>Tue, 27 Apr 2021 23:39:44 +0000</pubDate>
      <link>https://dev.to/craigaholliday/how-to-start-a-typescript-project-2021-2h6l</link>
      <guid>https://dev.to/craigaholliday/how-to-start-a-typescript-project-2021-2h6l</guid>
      <description>&lt;p&gt;If you are learning TypeScript you can have a hard time finding out a simple way to start TypeScript projects from scratch. Depending on if you are coming from JavaScript or a statically typed language like Go, Swift, or Kotlin you may have an expectation for how your project should work.&lt;/p&gt;

&lt;p&gt;For my JavaScript friends, you may just want something to start working right now.&lt;/p&gt;

&lt;p&gt;For the statically typed crowd, you may want auto-completion, compiler errors in your IDE, and a simple zero-config compilation. For anything related to the IDE &lt;a href="https://code.visualstudio.com/docs/languages/typescript"&gt;use VSCode&lt;/a&gt; and you will be golden.&lt;/p&gt;

&lt;p&gt;To satisfy everyone, let's go over simple ways to set up a TypeScript project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-in-mind"&gt;
  &lt;/a&gt;
  Keep in mind
&lt;/h2&gt;

&lt;p&gt;TypeScript is a statically typed language that is a superset of JavaScript. Because of this TypeScript transcompiles to JavaScript.&lt;/p&gt;

&lt;p&gt;How? Well with a compiler of course. &lt;a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html"&gt;TypeScript compiler (TSC)&lt;/a&gt; or &lt;a href="https://babeljs.io/docs/en/babel-preset-typescript"&gt;Babel&lt;/a&gt; to be exact.&lt;/p&gt;

&lt;p&gt;No matter what platform or tool you are using, at some point, they will use a TypeScript compiler because at the end of the day we still have to execute JavaScript.&lt;/p&gt;

&lt;p&gt;If you want to learn the fundamentals of TypeScript go ahead and check out &lt;a href="https://www.typescriptlang.org/docs/handbook/"&gt;the official handbook&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-typescript-project-the-absolute-simplest-way"&gt;
  &lt;/a&gt;
  Setting up a TypeScript Project (The absolute simplest way)
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;In my opinion,&lt;/em&gt; the simplest way to execute JavaScript is by installing Node and running &lt;code&gt;node coolfile.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So &lt;em&gt;in my opinion,&lt;/em&gt; the easiest way to compile and execute TypeScript is by installed Node and a package called &lt;a href="https://github.com/TypeStrong/ts-node"&gt;ts-node&lt;/a&gt; and using &lt;a href="https://github.com/TypeStrong/ts-node"&gt;ts-node&lt;/a&gt; to execute your TypeScript the same way you would with node.&lt;/p&gt;

&lt;p&gt;The short of what &lt;a href="https://github.com/TypeStrong/ts-node"&gt;ts-node&lt;/a&gt; does is run node and tsc together to compile then run the compiled JavaScript in a single command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Locally in your project.
npm install -D typescript
npm install -D ts-node

# Or globally with TypeScript.
npm install -g typescript
npm install -g ts-node

# Execute a script as `node` + `tsc`.
ts-node script.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-a-typescript-project-libraries"&gt;
  &lt;/a&gt;
  Setting up a TypeScript Project (Libraries)
&lt;/h2&gt;

&lt;p&gt;There is another simple way to start a project for experimenting or for platform-agnostic libraries.&lt;/p&gt;

&lt;p&gt;The simple way is by using a &lt;a href="https://github.com/formium/tsdx"&gt;zero-config CLI called TSDX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this, you'll create a library with TSDX which will set up everything you need to run, build, lint, and test your project or library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsdx create mylib
cd mylib
yarn start
yarn build
yarn lint
yarn test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I found out about TSDX via TailwindCSS's TailwindLabs GitHub where they have a &lt;a href="https://github.com/tailwindlabs/tailwindcss-intellisense"&gt;tailwindcss-intellisense&lt;/a&gt; project (a VSCode extension for Tailwind autocomplete, syntax highlighting, and linting). This project contains a &lt;a href="https://github.com/tailwindlabs/tailwindcss-intellisense/tree/master/packages/tailwindcss-language-service"&gt;"language service" package&lt;/a&gt; that is agnostic to the platform it is being used in hence TSDX being a good use case for the library.&lt;/p&gt;

&lt;p&gt;TSDX also works with React but I have not tried using it for that yet. I would usually rely on the CLI that comes with whatever framework I am using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-typescript-project-frameworks"&gt;
  &lt;/a&gt;
  Setting up a TypeScript Project (Frameworks)
&lt;/h2&gt;

&lt;p&gt;If you are starting a TypeScript project with a framework you are in luck, most if not all of the frameworks support TypeScript now.&lt;/p&gt;

&lt;p&gt;Let's go over a few frameworks to show the support and provide some useful links.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h3&gt;

&lt;p&gt;Angular uses TypeScript as the primary language for development. So for Angular, all you have to do is continue to use the Angular CLI as usual.&lt;/p&gt;

&lt;p&gt;If you've been using Angular you are probably way ahead of the game on using TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/typescript-configuration"&gt;https://angular.io/guide/typescript-configuration&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;For React we have some frameworks in our frameworks.&lt;/p&gt;

&lt;p&gt;Here are the most popular React frameworks and links about adding or their support for TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/adding-typescript/"&gt;Create React App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/"&gt;Gatsby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/basic-features/typescript"&gt;Next.js&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h3&gt;

&lt;p&gt;Vue 3 is written in TypeScript so there is no additional tooling needed to use TypeScript with Vue 3.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/typescript-support.html#official-declaration-in-npm-packages"&gt;https://v3.vuejs.org/guide/typescript-support.html#official-declaration-in-npm-packages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are still using Vue 2 for some reason, the Vue CLI still had support for TypeScript so you are all good.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vuejs.org/v2/guide/typescript.html"&gt;https://vuejs.org/v2/guide/typescript.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  Node
&lt;/h3&gt;

&lt;p&gt;Getting TypeScript set up with some Node.js frameworks has been a bit of a pain here and there but that is a larger discussion.&lt;/p&gt;

&lt;p&gt;The issue is really with getting these frameworks to be very strict with TypeScript.&lt;/p&gt;

&lt;p&gt;Either way, you should be able to set up TypeScript for &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; or &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; fine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/typescript-with-node-js-and-express/"&gt;Here's a quick Typescript with Express tutorial from LogRocket.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/docs/v1.14.x/TypeScript/"&gt;Fastify has Typescript support&lt;/a&gt; and I've recently used &lt;a href="https://www.npmjs.com/package/fastify-typescript-generator"&gt;this generator package&lt;/a&gt; to get a project started quickly. There were some small changes I made to the generated project to fit my TypeScript style.&lt;/p&gt;

&lt;p&gt;Lastly, take a look at &lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt; because this framework is doing a lot of cool stuff. It has full TypeScript support, is built like Angular, and unfortunately has a learning curve.&lt;/p&gt;

&lt;p&gt;I'm interested to hear about &lt;em&gt;your&lt;/em&gt; experience with Node frameworks and TypeScript so let me know!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Those are some of the simple ways to start a project in TypeScript. TypeScript and web tooling can be scary and cumbersome as you are starting out. Especially if you are used to all-in-one platforms.&lt;/p&gt;

&lt;p&gt;TypeScript enables a great new way to develop web applications and can help a lot with some of the confusion for new developers jumping into web development. (Of course, that always comes with tradeoffs 😅)&lt;/p&gt;

&lt;p&gt;Remember to not get bogged down about a tool or tools to work correctly at first and don't try to do everything at once for your first TypeScript project.&lt;/p&gt;

&lt;p&gt;Most importantly, have fun!&lt;/p&gt;

&lt;p&gt;If you like what you read also check out my brother and my blog where we post this and tons of other content! &lt;br&gt;
👉 &lt;a href="https://koalatea.io/"&gt;https://koalatea.io/&lt;/a&gt; 👈&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/"&gt;TypeScript Handbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/bootstrap"&gt;TypeScript Bootstrap (Lots of links to different tools and platforms)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/TypeStrong/ts-node"&gt;ts-node&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/formium/tsdx"&gt;TSDX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/adding-typescript/"&gt;Create React App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/"&gt;Gatsby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/basic-features/typescript"&gt;Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build Your Slack App Home in Golang Using Socket Mode</title>
      <author>Alexandre Couedelo</author>
      <pubDate>Tue, 27 Apr 2021 23:18:26 +0000</pubDate>
      <link>https://dev.to/xnok/build-your-slack-app-home-in-golang-using-socket-mode-4o5e</link>
      <guid>https://dev.to/xnok/build-your-slack-app-home-in-golang-using-socket-mode-4o5e</guid>
      <description>&lt;p&gt;This tutorial feature implementing an &lt;a href="https://api.slack.com/start/overview#app_home"&gt;App Home&lt;/a&gt; in Golang with the &lt;a href="https://github.com/slack-go/slack"&gt;slack-go&lt;/a&gt; library and using &lt;a href="https://api.slack.com/apis/connections/socket"&gt;Slack Socket Mode&lt;/a&gt;. It is inspired by this &lt;a href="https://api.slack.com/tutorials/app-home-with-modal"&gt;article&lt;/a&gt; in the slack documentation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is an App home?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;App home&lt;/code&gt; is that space with your App's name that appears under the App section in the conversation list. It is a fully customizable space to provide documentation and interaction with your App.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yw8JMO3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzl06mvenckengleeahi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yw8JMO3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzl06mvenckengleeahi.png" alt="App Homes in Slack UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why Socket Mode, you may ask?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With socket mode, you don't need a server with a publicly available IP address. In other words, your laptop, your raspberry pi, or a private server can host your bot. Socket mode is perfect for small Application that you do not intend to distribute via &lt;a href="https://slack.com/apps"&gt;App Directory&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-configure-your-application"&gt;
  &lt;/a&gt;
  Step 1: Configure your Application
&lt;/h2&gt;

&lt;p&gt;To start this tutorial, you will need a Slack Application with the proper permissions and Socket Mode activated.&lt;/p&gt;

&lt;p&gt;Please refer yourself to the documentation &lt;a href="https://api.slack.com/tutorials/app-home-with-modal#building-a-home-for-your-app---learn-how-to-create-the-app-home-view-and-use-the-modals__setting-up-your-app"&gt;Setting up your App&lt;/a&gt; to create your App and add the permissions.&lt;/p&gt;

&lt;p&gt;Also, activate Socket Mode in the appropriate section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2okomrqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5na231g00dzyz31mes72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2okomrqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5na231g00dzyz31mes72.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-the-project-repository"&gt;
  &lt;/a&gt;
  Step 2: Create the project repository
&lt;/h2&gt;

&lt;p&gt;First, create a new go project and import &lt;code&gt;slack-go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init
go get -u github.com/slack-go/slack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use my fork of slack-go in this tutorial because the feature I am demonstrating has not yet been merged &lt;a href="https://github.com/slack-go/slack/pull/904"&gt;#PR904&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To use a fork, we need to add a replace statement in &lt;code&gt;go.mod&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;replace github.com/slack-go/slack =&amp;gt; github.com/xnok/slack v0.8.1-0.20210415015007-5ceeab881540
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we force that change to be taken into consideration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod tidy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can create the following project structure or refer to it as we progress in the tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+ controllers
`- appHomeController.go
+ drivers
`- slack.go
+ views
`+ appHomeViewsAssets
  `- AppHomeView.json
   - CreateStickieNoteModal.json
   - NoteBlock.json
`- apphomeViews.go
+ main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#drivers-gt-slackgo"&gt;
  &lt;/a&gt;
  Drivers &amp;gt; slack.go
&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;drivers/slack.go&lt;/code&gt;, we create a utility function to initialize our Slack client using environment variables &lt;code&gt;SLACK_APP_TOKEN&lt;/code&gt; and &lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt;. In addition, it would be a good idea to add some validation. Slack provides two types of tokens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;SLACK_APP_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xapp-xxxxxxxxx
&lt;span class="nv"&gt;SLACK_BOT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;xoxb-xxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore I validate if the token exists and the beginning of the token to prevent inverting by mistake.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xNok/slack-go-demo-socketmode/blob/main/drivers/slack.go"&gt;Slack driver code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-controllers-gt-apphomecontrollergo"&gt;
  &lt;/a&gt;
  Step 3: Create Controllers &amp;gt; appHomeController.go
&lt;/h2&gt;

&lt;p&gt;I create a &lt;a href="https://github.com/xNok/slack-go-demo-socketmode/blob/main/controllers/appHomeController.puml"&gt;sequence diagrame&lt;/a&gt; using &lt;a href="https://plantuml.com/"&gt;PlantUML&lt;/a&gt;, inspired by &lt;a href="https://api.slack.com/tutorials/app-home-with-modal#building-a-home-for-your-app---learn-how-to-create-the-app-home-view-and-use-the-modals__setting-up-your-app"&gt;Tomomi Imura's&lt;/a&gt;, to visually represent what we are about to code. I believe that it is convenient to keep such diagrams alongside my code. It should make it much easier to follow this tutorial. Besides, I added references to the diagram in my code as comments. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cTU3S_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ci05nblfh3uvhpir4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cTU3S_p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ci05nblfh3uvhpir4q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-events"&gt;
  &lt;/a&gt;
  Handling events
&lt;/h3&gt;

&lt;p&gt;First, In &lt;code&gt;controllers/appHomeController.go&lt;/code&gt; create a &lt;strong&gt;struct&lt;/strong&gt; representing our Controller to handle dependencies injection. So far, we only require &lt;code&gt;socketmode.SocketmodeHandler&lt;/code&gt; to register Slack Events we want to handle. But in a more extensive application, you might have other dependencies such as &lt;strong&gt;repositories&lt;/strong&gt; to handle database requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;AppHomeController&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SocketmodeHandler&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, create an initialization function for our Controller. This function is in charge of registering which Event we want to receive and which function should handle that Event. If you refer to the &lt;a href="//../controllers/appHomeController.puml"&gt;sequence diagrame&lt;/a&gt; this Controller needs listening to 3 events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Event API called &lt;code&gt;app_home_opened&lt;/code&gt; (2)&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;interaction&lt;/code&gt; with the create button (12)&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;interaction&lt;/code&gt; with the modal submit button (22).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To register an event with &lt;code&gt;EventHandler&lt;/code&gt;, you need first to identify what type of event we need to handle. At this point, you should get familiar with slack terminology, including &lt;em&gt;Event API&lt;/em&gt;, &lt;em&gt;Interaction&lt;/em&gt;, &lt;em&gt;Block Action&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Event comes from &lt;a href="https://api.slack.com/events"&gt;Event API&lt;/a&gt;: use &lt;code&gt;HandleEventsAPI&lt;/code&gt; function, and don't forget to subscribe to that Event as explained in &lt;a href="https://api.slack.com/tutorials/app-home-with-modal#building-a-home-for-your-app---learn-how-to-create-the-app-home-view-and-use-the-modals__setting-up-your-app"&gt;Setting up your App&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If it is an &lt;a href="https://api.slack.com/interactivity/handling"&gt;interaction&lt;/a&gt;: use &lt;code&gt;HandleInteraction&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;If it is an &lt;a href="https://api.slack.com/reference/interaction-payloads/block-actions"&gt;interaction with a block action&lt;/a&gt;: use &lt;code&gt;HandleInteractionBlockAction&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of those handler functions works the same way. You provide the type of Event you expect (use autocompletion to find the one you need) and a callback function. The callback function requires:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a pointer to the Event (&lt;code&gt;*socketmode.Event&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;a pointer to the Socket mode Client (&lt;code&gt;*socketmode.Client&lt;/code&gt;). &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For instance, this is a valid function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A better alternative is to use a &lt;code&gt;method&lt;/code&gt; that belongs to &lt;code&gt;AppHomeController&lt;/code&gt;. That way, we benefit from the dependencies injected in &lt;code&gt;AppHomeController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func (c *AppHomeController) callback(evt *socketmode.Event, clt *socketmode.Client) {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To conclude this section, here is my initialization constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewAppHomeController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eventhandler&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SocketmodeHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AppHomeController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;AppHomeController&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;eventhandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// App Home (2)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleEventsAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;slackevents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppHomeOpened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;publishHomeTabView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create Stickie note Triggered (12)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleInteractionBlockAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddStockieNoteActionID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;openCreateStickieNoteModal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create Stickie note Submitted (22)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventHandler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleInteraction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteractionTypeViewSubmission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createStickieNote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, our Controller is ready. We only need to implement each of our three Event handling methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;publishHomeTabView&lt;/li&gt;
&lt;li&gt;openCreateStickieNoteModal&lt;/li&gt;
&lt;li&gt;createStickieNote&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#implementing-publishhometabview"&gt;
  &lt;/a&gt;
  Implementing publishHomeTabView
&lt;/h3&gt;

&lt;p&gt;the goal of this function is simply to display the App Home Tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFZUMUdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtqewpsnv1gf9h9q2k2z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFZUMUdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtqewpsnv1gf9h9q2k2z.png" alt="GIF App Home with Add Stickies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of our Handlers have roughly the same structure:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cast &lt;code&gt;socketmode.Event&lt;/code&gt; into the desired type. &lt;code&gt;socketmode.Event&lt;/code&gt; is the generic struct for all Events, but when registering this handler, we specified which event type we are expecting. Therefore converting struct, in that case, is granted.&lt;/li&gt;
&lt;li&gt;Create the View. We have not implemented any View yet, so create placeholder functions for now. I prefer introducing how to make views in the same section.&lt;/li&gt;
&lt;li&gt;Send the View to Slack
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;AppHomeController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;publishHomeTabView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// we need to cast our socketmode.Event into slackevents.AppHomeOpenedEvent&lt;/span&gt;
    &lt;span class="n"&gt;evt_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slackevents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EventsAPIEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;evt_app_home_opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;evt_api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InnerEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slackevents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppHomeOpenedEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// create the view using block-kit&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppHomeTabView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Publish the view (3)&lt;/span&gt;
    &lt;span class="c"&gt;// We get the Api client from `clt` and post our view&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetApiClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PublishView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evt_app_home_opened&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//Handle errors&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR publishHomeTabView: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implementing-opencreatestickienotemodal"&gt;
  &lt;/a&gt;
  Implementing openCreateStickieNoteModal
&lt;/h3&gt;

&lt;p&gt;This method opens a Modal whenever a user clicks &lt;code&gt;Add a Stickie&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJYIFa9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi97c505sdobdx1dj0hu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJYIFa9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi97c505sdobdx1dj0hu.gif" alt="GIF App Home with an open modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same structure as &lt;code&gt;publishHomeTabView&lt;/code&gt;, except that we must &lt;code&gt;acknowledge&lt;/code&gt; that we received the Event; otherwise, our users will see an error symbol on their side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;AppHomeController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;openCreateStickieNoteModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// we need to cast our socketmode.Event&lt;/span&gt;
    &lt;span class="n"&gt;interaction&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteractionCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Make sure to respond to the server to avoid an error&lt;/span&gt;
    &lt;span class="n"&gt;clt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// create the view using block-kit&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateStickieNoteModal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Open Modal (13)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetApiClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OpenView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TriggerID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//Handle errors&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR openCreateStickieNoteModal: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implementing-createstickienote"&gt;
  &lt;/a&gt;
  Implementing createStickieNote
&lt;/h3&gt;

&lt;p&gt;The last part is updating the App Home when the user submits its information via the modal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLrLW3RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/v1/./assets/apphome3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLrLW3RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/v1/./assets/apphome3.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, same structure. We &lt;code&gt;acknowledge&lt;/code&gt; the Event because it is an interaction. Extracting the values to create the sticky note is a bit tricky, I found. &lt;/p&gt;

&lt;p&gt;Slack requires unique ID in the UI to identify Blocks and Action. To minimize error I created constants :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;views.ModalDescriptionBlockID&lt;/li&gt;
&lt;li&gt;views.ModalDescriptionActionID&lt;/li&gt;
&lt;li&gt;views.ModalColorBlockID&lt;/li&gt;
&lt;li&gt;views.ModalColorActionID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those constants are defined in &lt;code&gt;views\appHomeViews.go&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;AppHomeController&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;createStickieNote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;socketmode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// we need to cast our socketmode.Event into slack.InteractionCallback&lt;/span&gt;
    &lt;span class="n"&gt;view_submission&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InteractionCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Make sure to respond to the server to avoid an error&lt;/span&gt;
    &lt;span class="n"&gt;clt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;evt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Create the model&lt;/span&gt;
    &lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StickieNote&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view_submission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalDescriptionBlockID&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalDescriptionActionID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;view_submission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalColorBlockID&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalColorActionID&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectedOption&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Timestamp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// create the view using block-kit&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppHomeCreateStickieNote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Publish the view (23)&lt;/span&gt;
    &lt;span class="c"&gt;// We get the Api client from `clt` and post our view&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;clt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetApiClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PublishView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view_submission&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;//Handle errors&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ERROR createStickieNote: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-views-gt-apphomeviewsgo"&gt;
  &lt;/a&gt;
  Step 4: Views &amp;gt; appHomeViews.go
&lt;/h2&gt;

&lt;p&gt;For all Views, we will utilize the power of &lt;a href="https://api.slack.com/block-kit"&gt;slack block-kit&lt;/a&gt; to its total capacity. Therefore we create a View by storing the &lt;code&gt;JSON payload&lt;/code&gt; provided by Block-kit into files. Then we can load them when needed. To achieve that, I decided to use the newest &lt;strong&gt;Golang 1.16&lt;/strong&gt; feature created to help manage static assets, namely &lt;a href="https://github.com/akmittal/go-embed"&gt;embed&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This way, we manage our slack Application like a simple web MVC application, with the views stored as static assets. It makes updating our App much easier using block-kit and copy-pasting the result.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I covered this process in detail in another article: &lt;a href="https://couedeloalexandre.medium.com/manage-static-assets-with-embed-golang-1-16-75c89c3eea39"&gt;Manage Static Assets with &lt;code&gt;embed&lt;/code&gt; (Golang 1.16)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic structure of &lt;code&gt;views/appHomeViews.go&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"bytes"&lt;/span&gt;
    &lt;span class="s"&gt;"embed"&lt;/span&gt;
    &lt;span class="s"&gt;"html/template"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/slack-go/slack"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;// Define Action_id as constant so we can refet to them in the controller&lt;/span&gt;
    &lt;span class="n"&gt;AddStockieNoteActionID&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"add_note"&lt;/span&gt;
    &lt;span class="n"&gt;ModalDescriptionBlockID&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"note_description"&lt;/span&gt;
    &lt;span class="n"&gt;ModalDescriptionActionID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"content"&lt;/span&gt;
    &lt;span class="n"&gt;ModalColorBlockID&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"note_color"&lt;/span&gt;
    &lt;span class="n"&gt;ModalColorActionID&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"color"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;StickieNote&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Color&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Timestamp&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;//go:embed appHomeViewsAssets/*&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;appHomeAssets&lt;/span&gt; &lt;span class="n"&gt;embed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FS&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#publish-the-app-home-view"&gt;
  &lt;/a&gt;
  Publish the App Home View
&lt;/h4&gt;

&lt;p&gt;Save the &lt;a href="https://app.slack.com/block-kit-builder/T0B5XJYR2#%7B%22type%22:%22home%22,%22blocks%22:%5B%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22mrkdwn%22,%22text%22:%22*Welcome!*%20%5CnThis%20is%20a%20home%20for%20Stickers%20app.%20You%20can%20add%20small%20notes%20here!%22%7D,%22accessory%22:%7B%22type%22:%22button%22,%22action_id%22:%22add_note%22,%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Add%20a%20Stickie%22%7D%7D%7D,%7B%22type%22:%22divider%22%7D%5D%7D"&gt;Block-kit&lt;/a&gt; payload in &lt;code&gt;views/appHomeViewsAssets/AppHomeView.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we create a function that reads &lt;code&gt;AppHomeView.json&lt;/code&gt; and unmarshals into &lt;code&gt;slack.HomeTabViewRequest&lt;/code&gt;, so we can send it as is via slack API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;AppHomeTabView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HomeTabViewRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;appHomeAssets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appHomeViewsAssets/AppHomeView.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to read view `AppHomeView`: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HomeTabViewRequest&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#opening-a-modal-dialog"&gt;
  &lt;/a&gt;
  Opening a modal dialog
&lt;/h4&gt;

&lt;p&gt;Save the modal &lt;a href="https://app.slack.com/block-kit-builder/T0B5XJYR2#%7B%22title%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Create%20a%20stickie%20note%22,%22emoji%22:true%7D,%22submit%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Create%22,%22emoji%22:true%7D,%22type%22:%22modal%22,%22blocks%22:%5B%7B%22type%22:%22input%22,%22block_id%22:%22note01%22,%22element%22:%7B%22type%22:%22plain_text_input%22,%22placeholder%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Take%20a%20note...%20%22%7D,%22multiline%22:true%7D,%22label%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Note%22%7D%7D,%7B%22type%22:%22input%22,%22element%22:%7B%22type%22:%22static_select%22,%22action_id%22:%22color%22,%22options%22:%5B%7B%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22yellow%22%7D,%22value%22:%22yellow%22%7D,%7B%22text%22:%7B%22type%22:%22plain_text%22,%22text%22:%22blue%22%7D,%22value%22:%22blue%22%7D%5D%7D,%22label%22:%7B%22type%22:%22plain_text%22,%22text%22:%22Color%22%7D%7D%5D%7D"&gt;Block-kit&lt;/a&gt; payload into &lt;code&gt;views/appHomeViewsAssets/CreateStickieNoteModal.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we create a function that reads &lt;code&gt;CreateStickieNoteModal.json&lt;/code&gt; and unmarshals into &lt;code&gt;slack.ModalViewRequest&lt;/code&gt;, so we can send it via slack API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateStickieNoteModal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalViewRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;appHomeAssets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appHomeViewsAssets/CreateStickieNoteModal.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to read view `CreateStickieNoteModal`: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModalViewRequest&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#updating-the-app-home-view"&gt;
  &lt;/a&gt;
  Updating the App Home view
&lt;/h4&gt;

&lt;p&gt;Save the sticky note &lt;a href="https://app.slack.com/block-kit-builder/T0B5XJYR2#%7B%22type%22:%22home%22,%22blocks%22:%5B%7B%22type%22:%22context%22,%22elements%22:%5B%7B%22type%22:%22mrkdwn%22,%22text%22:%222021-04-05%2017:57:07%20-0400%20EDT%22%7D%5D%7D,%7B%22type%22:%22section%22,%22text%22:%7B%22type%22:%22mrkdwn%22,%22text%22:%22Test%22%7D,%22accessory%22:%7B%22type%22:%22image%22,%22image_url%22:%22https://cdn.glitch.com/0d5619da-dfb3-451b-9255-5560cd0da50b%252Fstickie_yellow.png%22,%22alt_text%22:%22Test%20stickie%20note%22%7D%7D,%7B%22type%22:%22divider%22%7D%5D%7D"&gt;Block-kit&lt;/a&gt; payload as &lt;code&gt;views/appHomeViewsAssets/NoteBlock.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This view is slightly more complicated because it is dynamically generated. &lt;/p&gt;

&lt;p&gt;First, this view is the combination of &lt;code&gt;views/appHomeViewsAssets/CreateStickieNoteModal.json&lt;/code&gt; and &lt;code&gt;views/appHomeViewsAssets/NoteBlock.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Second, we collected the modal information and stored them in a struct &lt;code&gt;views.StickieNote&lt;/code&gt;. Well! We want that information to appear on our sticky. Therefore, we use &lt;a href="https://golang.org/pkg/text/template/"&gt;Go template&lt;/a&gt; for that. The placeholder &lt;code&gt;{{ .Timestamp }}&lt;/code&gt;, &lt;code&gt;{{ .Description }}&lt;/code&gt; and, &lt;code&gt;{{ .Color }}&lt;/code&gt; are added &lt;code&gt;NoteBlock.json&lt;/code&gt; wherever the content should be dynamic.&lt;/p&gt;

&lt;p&gt;The following function generates our final view. If you need more explanation, read the dedicated article &lt;a href="https://couedeloalexandre.medium.com/manage-static-assets-with-embed-golang-1-16-75c89c3eea39"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;AppHomeCreateStickieNote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt; &lt;span class="n"&gt;StickieNote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HomeTabViewRequest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c"&gt;// Base elements&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;appHomeAssets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"appHomeViewsAssets/AppHomeView.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to read view `AppHomeView`: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HomeTabViewRequest&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// New Notes&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParseFS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;appHomeAssets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"appHomeViewsAssets/NoteBlock.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tpl&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Buffer&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tpl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tpl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;note_view&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;slack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HomeTabViewRequest&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;note_view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;note_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Blocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BlockSet&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#try-the-app"&gt;
  &lt;/a&gt;
  Try the app
&lt;/h3&gt;

&lt;p&gt;Once you have successfully completed the tutorial, you can run your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run ./main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also directly clone &lt;a href="https://github.com/xNok/slack-go-demo-socketmode"&gt;my repository&lt;/a&gt; to try it beforehand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-improve-it"&gt;
  &lt;/a&gt;
  Can you improve it?
&lt;/h3&gt;

&lt;p&gt;I only covered the fundamentals here, so there is more that can be done. For instance, you may have noticed that you keep overriding the same sticky note over and over again. Not ideal, right?&lt;/p&gt;

</description>
      <category>go</category>
      <category>slack</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learn React in Plain English</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 27 Apr 2021 23:16:30 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/learn-react-in-plain-english-3php</link>
      <guid>https://dev.to/ubahthebuilder/learn-react-in-plain-english-3php</guid>
      <description>&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small, isolated and reusable pieces of code which are called “components”.&lt;/p&gt;

&lt;p&gt;You can install and use React in two major ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using npm to install &lt;strong&gt;create-react-app&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Manually download &lt;strong&gt;React.js&lt;/strong&gt; and &lt;strong&gt;ReactDOM.js&lt;/strong&gt; files from their website and including it in the script tags of your HTML page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create React App&lt;/strong&gt; is a React code generator which creates scaffolding for your project. With it, you won't have to do much manual configurations and set-up. Under the hood, it uses Babel and webpack, so you really don’t need to know anything about them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank God. Webpack isn't really fun to me&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main use of babel is to convert or &lt;em&gt;compile&lt;/em&gt; JSX into native JavaScript code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is JSX?&lt;/strong&gt; Don’t worry. We’re coming to that.&lt;/p&gt;

&lt;p&gt;When you’re ready to deploy to production, running &lt;strong&gt;npm run build&lt;/strong&gt; will create an optimized build of your app in the build folder. Running this command set's up your development environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app test-app
cd test-app
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React components are defined as &lt;strong&gt;classes&lt;/strong&gt;. If you're coming from an ES6 background, you should know what classes are.&lt;/p&gt;

&lt;p&gt;Classes are simply &lt;strong&gt;blueprints&lt;/strong&gt; for objects. To illustrate, you can think of an &lt;strong&gt;architectural plan for a building&lt;/strong&gt; as a &lt;em&gt;class&lt;/em&gt;, and the final building gotten from that plan as an object. The architectural plan won't have properties such as its color, kind of furniture to be used etc. All of those properties will be supplied when "constructing" the building, which is the object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope that made sense?  Lol.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you then instantiate a class by calling its constructor method, you "construct" an object.&lt;/p&gt;

&lt;p&gt;When you define a React component, you use the ES6 Class syntax.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want a detailed tutorial on ES6 JavaScript, which includes lessons on the "this" keyword you'll see in the below code block, consider buying my  &lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Web Development Beginners Guide eBook&lt;/a&gt; . I included &lt;em&gt;You Don't know JS - ES6 and beyond&lt;/em&gt; for free!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class ProfileDetails extends React.Component {
  constructor (props) {
      this.state = {
      occupation: "student"  }
 }

  render() {
    return (
      &amp;lt;div className="profile"&amp;gt;
        &amp;lt;h1&amp;gt;Profile for {this.props.name}&amp;lt;/h1&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;Male&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;{{this.props.age}}&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;{{this.state.occupation}}&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down that code snippet fellas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ProfileDetails is the name of this component&lt;/li&gt;
&lt;li&gt;The "extends" keywords indicates that you're extending the parent React Component to build this component. This gives you access to certain functionalities from React.&lt;/li&gt;
&lt;li&gt;The constructor method is where you define what is going to happen when you instantiate this class. This happens when you register this element in a parent element. In our case, we inherit the properties passed from the parent component with the "props" argument. We're also setting a local &lt;em&gt;state&lt;/em&gt; data. Don't know what state is? We'll get to that soon. The "this" there is a reference to this current class.&lt;/li&gt;
&lt;li&gt;The props? We’ll get into that very soon as well.&lt;/li&gt;
&lt;li&gt;The render method is a very important method. It returns the entire markup for this component. Without this, the view part of a component cannot be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, you noticed some XML-like syntax in the code. Well guess what, that isn’t HTML. It is &lt;strong&gt;JSX&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX&lt;/strong&gt; is a JavaScript extension created with the aim of simplifying the process of creating elements in React.&lt;/p&gt;

&lt;p&gt;Without JSX, this is how you would typically create a React element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;React.createElement(
"div",
null,
React.createElement(HelloWorld, null), React.createElement("br", null), React.createElement( "a", { href: "ubahthebuilder.tech" }, "Great JS Resources" ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to JSX, it’s like you are writing HTML inside of React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;     
  &amp;lt;HelloWorld/&amp;gt;     
  &amp;lt;br/&amp;gt;     
  &amp;lt;a href=" ubahthebuilder.tech "&amp;gt;Great JS Resources&amp;lt;/a&amp;gt; 
&amp;lt;/div&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;That’s why JSX is useful!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Say you have a "myForm" component class, it's render method should have elements like  and other relevant elements because those will constitute the view of "MyForm".&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;render()&lt;/strong&gt;, You can return any set of &lt;strong&gt;W3C&lt;/strong&gt; elements, such as divs, spans, h1 etc, as well as other custom react components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-props"&gt;
  &lt;/a&gt;
  REACT PROPS
&lt;/h3&gt;

&lt;p&gt;In HTML, when passing a property to an element, you do something like this:&lt;/p&gt;

&lt;p&gt;div class="main"&lt;/p&gt;

&lt;p&gt;When you're passing Properties to a React element, you &lt;strong&gt;should&lt;/strong&gt; always remember that you can ONLY pass properties from the context of a parent element, which is also the point in which you're registering/instantiating the child element.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Parent Class
class App extends React.Component {
    render() {
      return (
         &amp;lt;div className="profileSection"&amp;gt;
           &amp;lt;ProfileDetails name="Kingsley" age=21 /&amp;gt; // Child Component Instantaited
         &amp;lt;/div&amp;gt;
       );
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code snippets are self-explanatory. You only pass in properties (name and age) to the child element (ProfileDetails) from the parent (App). The child class then accesses these properties by using the &lt;strong&gt;this.props.NAME&lt;/strong&gt; syntax.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: A class becomes an element when it gets instantiated by a parent.&lt;br&gt;
Just like elements, you can pass in any of the W3C properties such as title, width, etc as well as define your own custom properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#states"&gt;
  &lt;/a&gt;
  STATES
&lt;/h3&gt;

&lt;p&gt;Another way you can pass data around a React component is with states. States, like Props, are also attributes of a React element. The &lt;strong&gt;main difference&lt;/strong&gt; between a Props and State is that while &lt;em&gt;state is defined inside the class in question&lt;/em&gt;, Props can &lt;em&gt;only be passed from a parent element&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};  }

  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;It is {this.state.date.toLocaleTimeString()}.&amp;lt;/h2&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component-lifecycle-methods"&gt;
  &lt;/a&gt;
  COMPONENT LIFECYCLE METHODS
&lt;/h3&gt;

&lt;p&gt;The typical lifecycle of a human being is &lt;em&gt;birth, pregnancy, infancy, the toddler years, childhood, puberty, older adolescence, adulthood, middle age, and the matured years&lt;/em&gt;. &lt;br&gt;
Well guess what? &lt;strong&gt;Components also have lifecycles&lt;/strong&gt;. They can be broadly classified into these three:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;MOUNTING (BIRTH)&lt;/strong&gt;: When any component is created and inserted into DOM(which happens when you call reactDOM.render()), some lifecycle methods used are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;constructor()&lt;/li&gt;
&lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;componentDidMount()&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;UPDATING (GROWTH/CHANGE)&lt;/strong&gt;: Any changes to the attributes (Props and State) supplied to a component is will trigger a rerender of that Component, which is also known as the updating phase. In this phase,  the following lifecycle methods which get called&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate()&lt;/li&gt;
&lt;li&gt;render()&lt;/li&gt;
&lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt;
&lt;li&gt;componentDidUpdate()&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;UNMOUNTED (DEATH)&lt;/strong&gt;: This method is called during the unmounting/destruction of any component:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;component willUnmount()&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#common-ones-in-detail"&gt;
  &lt;/a&gt;
  COMMON ONES IN DETAIL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;constructor()&lt;/strong&gt;: This lifecycle method runs during the mounting phase of a component. When defining the constructor method, it's very important you inherit Props by using super(props), before any other statements. This method is also the place to define a local state object for the Component. You should not modify the state directly from here, any update has to be done with the setState method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;render()&lt;/strong&gt;: this method returns the components view in JSX, which is a JavaScript extension similar to HTML. When the parents render method gets called, the action also triggers those of the children components. The parent's render call is complete only after those of it's children's. A rerender (subsequent renders) is triggered whenever any component is updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;componentDidMount()&lt;/strong&gt;: This runs after the component is successfully mounted to the DOM. Here, the DOM (Document Object Model) has been painted and is available for further manipulations. This is an apt place to call the setState method. &lt;br&gt;
In addition, any API calls and browser interaction can be made here as well. It is also important to note that this method will run only once, when the component is created.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;shouldComponentUpdate()&lt;/strong&gt;: In this method you can return a Boolean value that specifies whether React should continue with rerendering the UI or not.
The default value is true. However, you can specify false or an expression that evaluates to false.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;render()&lt;/strong&gt;: This is the subsequent render mentioned earlier. This happens after the UI Component has received new Props or State.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;getSnapshotBeforeUpdate()&lt;/strong&gt;: As its name implies, This method has access to both the Props and State data just before rerendering/update.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;componentDidUpdate()&lt;/strong&gt;: Very similar to componentDidMount(), this method is called after the component is updated in the DOM.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;component willUnmount()&lt;/strong&gt;: It works as the clean up for any element constructed during componentWillMount.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you really want to go into React in-depth, get the  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML to React Course&lt;/a&gt; by SleeplessYogi . It's really good!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React is by far one of the most popular and widely-used JavaScript UI library and it is important for web developers to learn (or an alternative) it if they are to build websites professionally.&lt;/p&gt;

&lt;p&gt;I will be creating more articles around React, including React Hooks. So make sure you follow this blog and stay updated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My experience with the Odin Project</title>
      <author>Amen</author>
      <pubDate>Tue, 27 Apr 2021 23:07:37 +0000</pubDate>
      <link>https://dev.to/amen6/my-experience-with-the-odin-project-4o0n</link>
      <guid>https://dev.to/amen6/my-experience-with-the-odin-project-4o0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-odin-project"&gt;
  &lt;/a&gt;
  What is The Odin Project
&lt;/h2&gt;

&lt;p&gt;The Odin Project is an open-source online curriculum for learning web development. It helps students to learn the skills they need to get hired as a web developer. It also has its own community which helps students too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TOP&lt;/strong&gt; have lots of advantages, some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You will be doing projects from the beginning, which will give you a better understand, better experience, and it will prevent you from falling into the &lt;strong&gt;Tutorial Hell&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's &lt;strong&gt;free!&lt;/strong&gt; It won't cost you anything, you even can access content without signing up, but if you want to keep up your progress, you need to signup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't need previous experience, you will start from zero, which is very helpful for newbies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has its own community, so you can connect with other students, so you can stay motivated and learn faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will be able to land a job when finishing, you won't get a certificate, but your projects will be good to land a job.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There was a disadvantage that really annoys me, which is &lt;strong&gt;repetition&lt;/strong&gt;, sometimes they will assign a bunch of articles to read, you won't notice a big difference, it will just be re-reading the same information but on a different source.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-opinion"&gt;
  &lt;/a&gt;
  My opinion
&lt;/h2&gt;

&lt;p&gt;For me, The Odin Project is very good for beginners, it will give you a good experience, also interesting projects for your portfolio.&lt;br&gt;
&lt;strong&gt;It worth a shot!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Build your own digital clock using JavaScript</title>
      <author>Abdur Rehman Khalid</author>
      <pubDate>Tue, 27 Apr 2021 22:59:50 +0000</pubDate>
      <link>https://dev.to/abdurrehmaan/build-your-own-digital-clock-using-javascript-456h</link>
      <guid>https://dev.to/abdurrehmaan/build-your-own-digital-clock-using-javascript-456h</guid>
      <description>&lt;p&gt;Source code : &lt;a href="https://github.com/abdurrehmaan/DigitalClock"&gt; Github &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zU7QsgWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/29798155/115163471-c12d4080-a0c2-11eb-87cb-915e6fd4d581.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zU7QsgWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/29798155/115163471-c12d4080-a0c2-11eb-87cb-915e6fd4d581.gif" alt="1212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I am going to show you how to design a simple animated Digital Clock in JavaScript. Since, a browser executes a JavaScript program at the client side, the script will pick up time from the client's computer and display it.
&lt;/p&gt;

&lt;h3 id="what-we-want-to-have"&gt;What we want to have&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Display current date&lt;/li&gt;
&lt;li&gt;Display current time&lt;/li&gt;
&lt;li&gt;Increment the time on it's own&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="technology-we-use"&gt;Technology we use&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Vanilla javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="the-javascript"&gt;The Javascript&lt;/h3&gt;

&lt;p&gt;The entire code for the working of the clock is written within the &lt;code&gt;tick()&lt;/code&gt; function. Inside this function, an object of the &lt;code&gt;Date()&lt;/code&gt; is created which allows you to call year, date, hour, minute, second.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const now = new Date();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our code, this object is used for getting the current hours, minutes and seconds which are stored in different variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const h = now.getHours();
const m = now.getMinutes();
const s = now.getSeconds();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The obtained hours, minutes and seconds will be displayed in single digit if less than 10. For example, the current hour will be displayed as 7 instead of 07. To always display the elements of time in two-digit format, a 0 is appended before them whenever they are less than 10&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span&amp;gt;${h &amp;lt; 10 ? "0"+h:h}&amp;lt;/span&amp;gt;:
&amp;lt;span&amp;gt;${m &amp;lt; 10 ? "0"+m:m}&amp;lt;/span&amp;gt;:
&amp;lt;span&amp;gt;${s &amp;lt; 10 ? "0"+s:s}&amp;lt;/span&amp;gt;`;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now once our time is ready, let's display it in the div which we made before. This is done by obtaining the div using the document.getElementById method and give our time as the content of the div using the innerHTML property.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const clock = document.querySelector('.clock');
const html = `
&amp;lt;span&amp;gt;${h &amp;lt; 10 ? "0"+h:h}&amp;lt;/span&amp;gt;:
&amp;lt;span&amp;gt;${m &amp;lt; 10 ? "0"+m:m}&amp;lt;/span&amp;gt;:
&amp;lt;span&amp;gt;${s &amp;lt; 10 ? "0"+s:s}&amp;lt;/span&amp;gt;`;
clock.innerHTML = html;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="base-design"&gt;Base design&lt;/h2&gt;

&lt;p&gt;Make the basic html structure&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Digital Clock&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="clock-body"&amp;gt;
        &amp;lt;div class="inner-body"&amp;gt;
            &amp;lt;div class="clock"&amp;gt;
            
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach CSS&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="css/digitalclock.css"&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attach Javascript file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src="js/digitalclock.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="the-styling"&gt;The Styling&lt;/h2&gt;

&lt;p&gt;Will add a nice font it will center the hero div and make the background fit nicely&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css?family=Orbitron');
.clock-body {
    margin: 200px auto;
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
}
.inner-body{
    width: 30%;
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    border: 5px solid #2BC511;
    background-color: black;
    border-radius:12px;
}
.clock{
    font-size: 4em;
    font-weight: 700;
    text-align: center;
    color:#2BC511;
    font-family: 'Orbitron', sans-serif;
}
.clock span {
    padding: 20px;
}&lt;/code&gt;&lt;/pre&gt;

</description>
      <category>javascript</category>
      <category>digitalclock</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Enums in JavaScript</title>
      <author>Marcos Molina</author>
      <pubDate>Tue, 27 Apr 2021 22:53:20 +0000</pubDate>
      <link>https://dev.to/marcosmol204/enums-in-javascript-1274</link>
      <guid>https://dev.to/marcosmol204/enums-in-javascript-1274</guid>
      <description>&lt;h1&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#who-i-am"&gt;
  &lt;/a&gt;
  Who I Am?
&lt;/h2&gt;

&lt;p&gt;My name is Marcos Molina a Junior Full-Stack Developer based in Israel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-do"&gt;
  &lt;/a&gt;
  What I Do?
&lt;/h2&gt;

&lt;p&gt;Sharing knowledge, the purpose of each of my posts is to share a solution to a problem I faced in the industry, side projects, or open-source contributions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Because seeing real examples helps me more than the same To-Do List examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-enums-are"&gt;
  &lt;/a&gt;
  What Enums are?
&lt;/h2&gt;

&lt;p&gt;A data type that allows us to specify a list of values for a type.&lt;br&gt;
In my side project "Askii" that allows users to answer questions, send it to their friend and see all the answers I used enums for "type" all the possible kinds of questions. &lt;br&gt;
Binary question: Yes or No.&lt;br&gt;
Numeric questions: 1 ,2, etc.&lt;br&gt;
Text questions: Yes, I do love coffee.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-they-do"&gt;
  &lt;/a&gt;
  What they do?
&lt;/h2&gt;

&lt;p&gt;2)They force you to think about all the possible values that a variable can take.&lt;br&gt;
Once I create an enum on my project, I know that I need to handle three different scenarios in the front-end and in the back-end: binary, numeric, and text questions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enums-vs-list-of-numbers"&gt;
  &lt;/a&gt;
  Enums vs list of numbers.
&lt;/h2&gt;

&lt;p&gt;Enums are a constant rather than a list of numbers, increasing the readability of the code. &lt;br&gt;
*This point will be demonstrated in the code example.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-should-we-use-enums"&gt;
  &lt;/a&gt;
  When should we use enums?
&lt;/h2&gt;

&lt;p&gt;We should use enums if there are a definite number of fixed values for a variable. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-enums-can-be-implemented"&gt;
  &lt;/a&gt;
  How enums can be implemented?
&lt;/h2&gt;

&lt;p&gt;JavaScript doesn't support enums "built-in", therefore there are some ways to implement them.&lt;/p&gt;

&lt;p&gt;Let's build the solution&lt;br&gt;
&lt;em&gt;Note: by convention we use Uppercase letters, written 'binary' but should be 'BINARY'&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNkNPyHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4E22AQGDMomDl4V0lw/feedshare-shrink_2048_1536/0/1614451410589%3Fe%3D1622678400%26v%3Dbeta%26t%3D-XMbNn1erNPtlSgxFL5Un_bCOfzuxJwNSblZCtUU3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNkNPyHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4E22AQGDMomDl4V0lw/feedshare-shrink_2048_1536/0/1614451410589%3Fe%3D1622678400%26v%3Dbeta%26t%3D-XMbNn1erNPtlSgxFL5Un_bCOfzuxJwNSblZCtUU3Dg" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;With the solution presented, the power of enums can be achieved as there is in some programming languages. For example TypeScript, Java, and C#.&lt;/p&gt;

&lt;p&gt;I hope I could share with you some knowledge.&lt;br&gt;
Did you learn something new ? Let me know in the comments. ❤️&lt;br&gt;
Did you love ? Share it with your friends. 👏🏽&lt;br&gt;
Do you know another solution? 👆🏽&lt;br&gt;
Don't be afraid to post your thoughts. I'm here to learn from you. 😇&lt;br&gt;
Networking? &lt;a href="https://www.linkedin.com/in/marcos-mol/"&gt;LinkedIn&lt;/a&gt; 🤝🏽&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const moodsEnum = Object.freeze({ 
  GOOD : 'GOOD',
  AMAZING : 'AMAZING',
  SATISFACTORY: 'SATISFACTORY',
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have an moodsEnum.AMAZING day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codequality</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Demystifying GraphQL Queries</title>
      <author>Jaden Baptista</author>
      <pubDate>Tue, 27 Apr 2021 22:44:40 +0000</pubDate>
      <link>https://dev.to/takeshape/demystifying-graphql-queries-4gm</link>
      <guid>https://dev.to/takeshape/demystifying-graphql-queries-4gm</guid>
      <description>&lt;p&gt;It's hard to learn new things, isn't it? When I first started to learn Python, it looked like an indiscriminately shuffled string of stray symbols. But eventually I learned; I connected it with concepts I knew from other languages. Later on, I learned JavaScript and went through the same thing; I didn't understand the syntax, so it just looked like a bunch of meaningless characters to me. But once I saw the similarities with languages I already understood, it started to click. I originally had the same reaction to GraphQL queries. It seemed difficult at first, but I came around after I realized the key to learning it was just like the technologies I'd learned before, and now I use it almost every day. &lt;/p&gt;

&lt;p&gt;I'm just like every other developer: I want to learn new things but sometimes struggle with remembering the details and grasping the &lt;em&gt;why&lt;/em&gt; of it all, so I figured I'd write this post to explain where I started with GraphQL and how I got to where I am now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-conceptualize-the-thing"&gt;
  &lt;/a&gt;
  Step 1: Conceptualize the thing
&lt;/h2&gt;

&lt;p&gt;I can't get anything done until I can work out what's happening in my head.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOXAGLaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.takeshape.io/4d46e476-8704-42c4-8d0d-06ebdd0e3c93/dev/c9830d3a-947f-4b39-ae7e-45a6ce51169c/confused.webp%3Fauto%3Dcompress%252Cformat" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOXAGLaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.takeshape.io/4d46e476-8704-42c4-8d0d-06ebdd0e3c93/dev/c9830d3a-947f-4b39-ae7e-45a6ce51169c/confused.webp%3Fauto%3Dcompress%252Cformat" alt="Me figuring out something new"&gt;&lt;/a&gt;&lt;/p&gt;
Me figuring out something new



&lt;p&gt;I'm grateful though that someone explained GraphQL to me as REST adopting the baby of JSON and SQL. GraphQL is declarative, meaning that you get back what you ask for. No more, no less. When writing a GraphQL query, we're using a syntax that is similar to JSON or a TypeScript interface to define what information we want to get back in our response. Just like how we'd use SQL to define what data to retrieve from a database. Except instead of directly accessing a database with SQL, with GraphQL we're telling an &lt;em&gt;API&lt;/em&gt; what information we're looking for. &lt;/p&gt;

&lt;p&gt;My lack of understanding was the result of seeing GraphQL in action before knowing why someone would use it in the first place. At the time, I had been working on my own attempt at standardizing API responses in JavaScript, so GraphQL was really right up my alley; I just didn't know it. Once I understood that GraphQL could tackle the problems I was having, I realized it that I had to start learning the syntax. That takes me to step 2...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-learn-the-thing"&gt;
  &lt;/a&gt;
  Step 2: Learn the thing
&lt;/h2&gt;

&lt;p&gt;Once I wrapped my mind around the &lt;em&gt;why&lt;/em&gt; of GraphQL, I had to grasp the &lt;em&gt;how&lt;/em&gt; of GraphQL. There's a fantastic quickstart tutorial &lt;a href="https://graphql.org/learn/"&gt;on the official GraphQL website&lt;/a&gt;, but I'll just show the basics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Types&lt;/strong&gt;. Say you want to get some user account information, but you want it to conform to a certain spec. Let's imagine that you want get their first and last name (both strings), their age (an integer, in years), their username (a string), and whether they're subscribed to your newsletter (a boolean). In plain JavaScript, this would be tough (or at least lengthy) to check manually:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// assume we've got everything in an object called "data"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subbed&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subbed&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invalid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Let's be honest, that's a bit excessive, isn't it? It's technically best practice, and in theory, it allows each field to be either its assigned datatype or &lt;code&gt;null&lt;/code&gt;. It just doesn't scale though. Having this after every API request gets old fast.&lt;/p&gt;

&lt;p&gt;GraphQL forces the API to define those datatypes, so you're guaranteed to get back what you're expecting. If the API says that &lt;code&gt;first_name&lt;/code&gt; will be a &lt;code&gt;String&lt;/code&gt;, it will come to me as a &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;. I can count on that in my application. They can even rule out &lt;code&gt;null&lt;/code&gt; too, by making the datatype &lt;code&gt;String!&lt;/code&gt; with the exclamation point. On their side, they're defining a type like this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;subbed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Again, the API does all of this, so we don't have to. We can just count on what's coming in and out.&lt;/p&gt;

&lt;p&gt;When you start working with more advanced GraphQL queries, you might end up implementing types on the client-side too! Check out the &lt;a href="https://graphql.org/learn/schema/"&gt;types docs here on the GraphQL website&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Queries.&lt;/strong&gt; We talked about guaranteeing what types of data we'll get with GraphQL, but now we actually have to get that data, and we do it with queries. This is the part I was talking about when I said it looks like JSON and SQL. You just kind of give it the keys of the JSON object you're looking for, and it'll fill in the values, similar to how SQL fills in the data once you give it the columns you're selecting. &lt;/p&gt;

&lt;p&gt;Say you're trying to retrieve user data from an &lt;a href="http://takeshape.io"&gt;API mesh like TakeShape&lt;/a&gt;, and it's set up so you can trust that the data you get back conforms to the type up above. A query for that would look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f8a5123b9705c8c618043dc206b09c6a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;subbed&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You just give the GraphQL API the keys to the JSON object, and the API will just fill in the values. You can nest this too; say we had the user's first and last name in a nested object. The query might look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;getUser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f8a5123b9705c8c618043dc206b09c6a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;subbed&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;GraphQL is powerful enough to reach down into these nested objects and make sure that everything conforms to the type defined by the API. This way we don't have to worry about getting the wrong information or trying to do all that manual validation in JavaScript anymore.&lt;/p&gt;

&lt;p&gt;This isn't my any means &lt;em&gt;all&lt;/em&gt; the things you can do with GraphQL, but it's enough to get by on, especially if you're just consuming a GraphQL API like the one &lt;a href="http://takeshape.io"&gt;TakeShape's API mesh&lt;/a&gt; provides. If you're fascinated by the possibilities here, I'll point you back to &lt;a href="https://graphql.org/learn/"&gt;the detailed guide on the official GraphQL website here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#step-3-use-the-thing"&gt;
  &lt;/a&gt;
  Step 3: Use the thing
&lt;/h2&gt;

&lt;p&gt;This is the part I struggle with the most. Finding the time and the right opportunity to use a new technology can be a challenge.&lt;/p&gt;

&lt;p&gt;After conceptualizing something new, and learning the syntax, I want to jump head first and start using my newly earned knowledge on a big new project! But, alas, I know  that wouldn't be wise. It's best to start tinkering on a low stakes project. I decided to start simple with a starter blog using &lt;a href="http://takeshape.io"&gt;TakeShape&lt;/a&gt;'s GraphQL API. Playing in this sandbox was like learning Python again. Just pressing buttons, trying new things, and experimenting with different ideas. It wasn't planned or scripted, and there wasn't any particular thing I wanted to make; I was satisfied just exploring what I didn't know before.&lt;/p&gt;

&lt;p&gt;That's the crux of my advice to anyone who is still having trouble demystifying GraphQL queries: just tinker. Experiment. Build something. Anything. You don't have to work it into some polished portfolio-worthy project; you just have to go beyond understanding the &lt;em&gt;why&lt;/em&gt; and the &lt;em&gt;how&lt;/em&gt; and get to actually using GraphQL.&lt;/p&gt;

&lt;p&gt;I hope this guide helped you to go through the same journey with GraphQL queries that I did: conceptualizing it, then learning the syntax, and then  using it in a project. I wouldn't call myself an expert, but I think I'm a better developer for having gone through the process I outlined here, and I hope you'll feel the same. If you're looking for a place to dive into GraphQL more, I've littered this article with links and references to the &lt;a href="https://graphql.org/learn/"&gt;official GraphQL guide&lt;/a&gt; and &lt;a href="http://takeshape.io"&gt;TakeShape&lt;/a&gt;, an easy-to-use example of a GraphQL API.&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to reach out to me at &lt;a href="mailto:jaden@baptista.dev"&gt;jaden@baptista.dev&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
