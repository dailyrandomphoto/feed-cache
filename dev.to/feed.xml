<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why use a css framework when you can use vanilla css?</title>
      <author>Akshat Singhania</author>
      <pubDate>Tue, 11 May 2021 13:08:49 +0000</pubDate>
      <link>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</link>
      <guid>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</guid>
      <description>&lt;h3&gt;
  &lt;a href="#using-a-css-framework-for-projects-is-quite-common-these-days-whether-it-be-big-projects-or-small-side-projects-but-why-do-devs-use-a-css-framework-anyway"&gt;
  &lt;/a&gt;
  Using a CSS framework for projects is quite common these days whether it be big projects or small side projects but why do dev's use a CSS framework anyway
&lt;/h3&gt;

&lt;p&gt;While making a website, it is a tough job to make headers/navbars with minor feature like disappearing it on mobiles and making a menu instead, handle pads and tablets screen sizes, dropdowns so talking about these we come to our first point&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Premade features for easy use and faster development times&lt;br&gt;
though implementing a normal feature like a login page might be easy and quick, adding elements like errors and dialog boxes might be a long and time-consuming task especially dealing with edge cases like overlapping on different screen sizes, messed up animations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huge community/organization support for bug fixes, and implementation for many browsers, screen sizes over the years the framework has existed, that means you can get relieved for common problems in older browsers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help to learn CSS , just getting started with CSS and styling , well it takes a lot of time to learn CSS and proper styling of webpages, you might not know about flex boxes and the new grid layout, well the CSS framework already the easier way to implement it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They come with documentation. If you need help getting started, the framework generally comes with some support files. This can be particularly nice if you are designing a site you will be handing off to a client. You can just let them know what framework you used and refer them to that documentation for support requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>bootstrap</category>
      <category>libary</category>
      <category>readthis</category>
    </item>
    <item>
      <title>Crossposting to dev.to Made Easy</title>
      <author>Atibhi Agrawal</author>
      <pubDate>Tue, 11 May 2021 12:59:16 +0000</pubDate>
      <link>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</link>
      <guid>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</guid>
      <description>&lt;p&gt;Do you often write your articles on Google Docs, Notion or Medium and then have to manually convert it to markdown to post on dev.to?&lt;/p&gt;

&lt;p&gt;If yes, then checkout &lt;a href="https://euangoddard.github.io/clipboard2markdown/"&gt;Paste to Markdown&lt;/a&gt;. Simply paste any text and it will be converted to markdown along with proper formatting!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>markdown</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Git-flow, non-technical intro.</title>
      <author>Shaquil Maria</author>
      <pubDate>Tue, 11 May 2021 12:56:10 +0000</pubDate>
      <link>https://dev.to/theowlsden/git-flow-non-technical-intro-3ahh</link>
      <guid>https://dev.to/theowlsden/git-flow-non-technical-intro-3ahh</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@yancymin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Yancy Min&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/github?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Howdy DEV clan? &lt;/p&gt;

&lt;p&gt;We've all heard of the recommendation and best practice: "Use a version control for your project." While this is true, it might save you from F*CK-ups, not many blogs proclaiming the use of version control mention how to use it or the best way to use it.&lt;/p&gt;

&lt;p&gt;Here comes Git-flow. Git-flow is a git workflow you can use to streamline your use of version control for your whole application. In today's post, I'll go over the basics of Git-flow and how it can improve your git-flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gitflow"&gt;
  &lt;/a&gt;
  What is git-flow?
&lt;/h2&gt;

&lt;p&gt;Git-flow is a git workflow proposed in 2010 by this &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;post&lt;/a&gt;. This workflow is supposed to help you with your software development and DevOps practices. Git-flow defines a branching strategy and releases management for your software.&lt;/p&gt;

&lt;p&gt;Git-flow uses git as its base (it's in the name!). Git was proposed for its distributed nature and "ease of use". Git allows for a simpler branching and merging mechanism compared to some other version control systems. More on &lt;a href="https://git-scm.com/about"&gt;git here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitflow-branches"&gt;
  &lt;/a&gt;
  Git-flow branches
&lt;/h3&gt;

&lt;p&gt;When you create a project and initiate git in it, you have by default your main branch (go on, try it don't be shy). In git-flow, this &lt;em&gt;main&lt;/em&gt; branch HEAD (latest changes committed) should always contain the production-ready software.&lt;/p&gt;

&lt;p&gt;You might be asking: If the main branch is for production-ready code, in which branch should I develop the application then? You guessed it! Your main development branch is called &lt;em&gt;develop&lt;/em&gt;. The &lt;em&gt;develop&lt;/em&gt; branch should always contain the latest changes that are ready for release (ready to be sent to production).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ1UYcgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/main-branches%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ1UYcgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/main-branches%402x.png" alt="https://nvie.com/img/main-branches.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure that your &lt;em&gt;develop&lt;/em&gt; branch only has the code that is ready to be sent to production, you need to separate your development into phases that work towards release. And guess what, git-flow has a solution for that.&lt;/p&gt;

&lt;p&gt;Git-flow consist of three types of branches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature branches&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release branches&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hotfix branches&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a technical level, each branch is the same as the other. But for usage distinction, each type of branch has its specific use and is bound to strict rules for their originated branch (which branch they can be branched off) and their merging targets (which branch they are allowed to branch into).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60lknffe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/git-model%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60lknffe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/git-model%402x.png" alt="https://nvie.com/img/git-model.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-branches"&gt;
  &lt;/a&gt;
  Feature branches
&lt;/h3&gt;

&lt;p&gt;Feature branches are used to develop well, features. Do you want to develop the login feature of your software? You do that in the feature branch. You use feature branches to develop the features you want to add to your software, for a new release or a distant one (maybe you just want to set the base to develop and publish later). &lt;/p&gt;

&lt;p&gt;The feature branch should always branch off from the &lt;em&gt;develop&lt;/em&gt; branch. Why? So that you have the latest version of your to work with. Likewise, the feature branch should always be merged into the &lt;em&gt;develop&lt;/em&gt; branch, this will make the feature ready to be released.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#release-branches"&gt;
  &lt;/a&gt;
  Release branches
&lt;/h3&gt;

&lt;p&gt;Release branches, well they are there to do final tinkering on a release before it goes to production. In these branches, you make minor fixes and final tinkering. Why do you use a release branch if your &lt;em&gt;develop&lt;/em&gt; branch has the latest code?&lt;/p&gt;

&lt;p&gt;Glad you asked (even if you didn't), this is to separate the release from the concurrent development. Let's say you finished three features at the same time (thus merged them into the &lt;em&gt;develop&lt;/em&gt; branch), but you want to release only one. You create a release branch for that specific feature, do the final tinkering, and merge that to the main branch. Easy peasy lemon squeezy, you separated the release of the feature while keeping your &lt;em&gt;develop&lt;/em&gt; branch available to changes from new features.&lt;/p&gt;

&lt;p&gt;Since you are working with code that is ready for release, you can only make a &lt;em&gt;release&lt;/em&gt; branch by branching from &lt;em&gt;develop&lt;/em&gt;. When you are done with the branch, you must merge it into the &lt;em&gt;main&lt;/em&gt; branch and release the code and into the &lt;em&gt;develop&lt;/em&gt; branch (so that your develop branch has the latest changes).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hotfix-branches"&gt;
  &lt;/a&gt;
  Hotfix branches
&lt;/h3&gt;

&lt;p&gt;Finally, we have hotfix branches. They have the same functionality as release branches, prepare your code for production, but they are used specifically for unplanned changes/ improvements. &lt;/p&gt;

&lt;p&gt;Imagine you tested your software against the major ways your software can break, and it passes them all and you released the new feature. Just a day or two after the release, your users start complaining that they get X instead of Y when they click on a button. &lt;/p&gt;

&lt;p&gt;To fix that bug, you don't need to create a feature branch, then merge it into &lt;em&gt;develop&lt;/em&gt; and create a release branch. No! you create a hotfix branch from your main branch and fix that bug, hence &lt;em&gt;hotfix&lt;/em&gt;. After fixing the bug in your code, you must merge the changes into the &lt;em&gt;develop&lt;/em&gt; branch and the &lt;em&gt;main&lt;/em&gt; branch for production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9GuVZBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9GuVZBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif" alt="https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there you have it. Git-flow is a very strict workflow for version controlling your project, and to some, it might look over-engineered and daunting. I recommend to not follow it to the letter, pick bits and pieces, and Frankenstein your way to a development structure that you and your team can easily work with and integrate into your projects.&lt;/p&gt;

&lt;p&gt;I hope that you learned something from this post. Go on and structure your side projects!🤟&lt;/p&gt;

</description>
      <category>devops</category>
      <category>todayilearned</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Bulk SMS Provider in Tanzania</title>
      <author>Alpha Olomi</author>
      <pubDate>Tue, 11 May 2021 12:36:29 +0000</pubDate>
      <link>https://dev.to/alphaolomi/bulk-sms-provider-in-tanzania-1dj4</link>
      <guid>https://dev.to/alphaolomi/bulk-sms-provider-in-tanzania-1dj4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#key-areas-of-concern"&gt;
  &lt;/a&gt;
  Key areas of concern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Price&lt;/li&gt;
&lt;li&gt;Integration/Development experience&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Up time&lt;/li&gt;
&lt;li&gt;Time required to successfully register Sender ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-areas"&gt;
  &lt;/a&gt;
  Other areas
&lt;/h3&gt;

&lt;p&gt;We won't be looking into these at this scope&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API limits&lt;/li&gt;
&lt;li&gt;Auth strategy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#key-providers"&gt;
  &lt;/a&gt;
  Key Providers
&lt;/h2&gt;

&lt;p&gt;Without any order&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AfricasTalking&lt;/li&gt;
&lt;li&gt;NextSMS&lt;/li&gt;
&lt;li&gt;Beem africa&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#africastalking"&gt;
  &lt;/a&gt;
  &lt;a href="https://africastalking.com/"&gt;AfricasTalking&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#pricing-plans"&gt;
  &lt;/a&gt;
  Pricing Plans
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Plan Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 - 499,999&lt;/td&gt;
&lt;td&gt;TZS 22&lt;/td&gt;
&lt;td&gt;Basic Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500,000 - 2,499,999&lt;/td&gt;
&lt;td&gt;TZS 20&lt;/td&gt;
&lt;td&gt;Plus Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2,500,000+&lt;/td&gt;
&lt;td&gt;Contact Sales&lt;/td&gt;
&lt;td&gt;Max Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Plenty of Official SDK's for all major languages and frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Well documented&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextsms"&gt;
  &lt;/a&gt;
  &lt;a href="https://nextsms.co.tz/"&gt;NextSMS&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#price"&gt;
  &lt;/a&gt;
  Price
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plan name&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE A&lt;/td&gt;
&lt;td&gt;16 TSH /sms&lt;/td&gt;
&lt;td&gt;1 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE B&lt;/td&gt;
&lt;td&gt;15 TSH /sms&lt;/td&gt;
&lt;td&gt;6,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE C&lt;/td&gt;
&lt;td&gt;14 TSH /sms&lt;/td&gt;
&lt;td&gt;55,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE D&lt;/td&gt;
&lt;td&gt;13 TSH /sms&lt;/td&gt;
&lt;td&gt;110,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE E&lt;/td&gt;
&lt;td&gt;Contact Sales&lt;/td&gt;
&lt;td&gt;500,001 or more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 bussiness days&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Only API endpoints are documented&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#beem-africa"&gt;
  &lt;/a&gt;
  &lt;a href="https://sms.beem.africa/"&gt;Beem africa&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#price"&gt;
  &lt;/a&gt;
  Price
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 - 1000&lt;/td&gt;
&lt;td&gt;TZS 25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001 - 2500&lt;/td&gt;
&lt;td&gt;TZS 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2501 - 5000&lt;/td&gt;
&lt;td&gt;TZS 22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5001 - 10000&lt;/td&gt;
&lt;td&gt;TZS 20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10001 - 25000&lt;/td&gt;
&lt;td&gt;TZS 19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25001 - 50000&lt;/td&gt;
&lt;td&gt;TZS 18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50001 - 100000&lt;/td&gt;
&lt;td&gt;TZS 17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All Data was retrieved on May, 11 , 2021 from official websites, Am not affiliated with any vendor mention.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>sms</category>
      <category>bulksms</category>
      <category>vendors</category>
    </item>
    <item>
      <title>JavaScript Interview Question #39: How does setTimeout work inside the loop?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Tue, 11 May 2021 12:27:06 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-39-how-does-settimeout-work-inside-the-loop-33lc</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-39-how-does-settimeout-work-inside-the-loop-33lc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCGpWAXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCGpWAXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-39.png" alt="js-test-39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Before we analyze the code snippet, let’s try to simplify it by removing the &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we just leave the plain &lt;code&gt;console.log&lt;/code&gt; in the loop, then the output is all the values of &lt;code&gt;i&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt; printed on each iteration of the loop.&lt;/p&gt;

&lt;p&gt;However, when the &lt;code&gt;setTimeout&lt;/code&gt; is added, the &lt;code&gt;console.log&lt;/code&gt; will be executed after the loop has already been processed and the value of &lt;code&gt;i&lt;/code&gt; is 5.&lt;/p&gt;

&lt;p&gt;As &lt;code&gt;i&lt;/code&gt; was declared with &lt;code&gt;var&lt;/code&gt;, it has the global scope and the intermediary values aren’t stored in closure around the arrow function &lt;code&gt;() =&amp;gt; console.log(i)&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: the value &lt;code&gt;5&lt;/code&gt; will be printed on the screen 5 times. Each time on the new line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>
A container or a package???</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 11 May 2021 12:26:30 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/a-container-or-a-package-30af</link>
      <guid>https://dev.to/emanuel_allely/a-container-or-a-package-30af</guid>
      <description>&lt;p&gt;Fellow developers, I need your help. We are working on something new, and we need your help deciding how we should call one of our features.&lt;/p&gt;

&lt;p&gt;According to you, which word describes the best: " &lt;strong&gt;A sharable folder containing cross-platform code files managing one or more services.&lt;/strong&gt; " ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A container&lt;/li&gt;
&lt;li&gt;A package&lt;/li&gt;
&lt;li&gt;Other, share in comment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks a lot for your help&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>opensource</category>
      <category>wording</category>
      <category>microservices</category>
    </item>
    <item>
      <title>How I started coding, got a job as a dev, built an audience on Twitter, and made my first income online</title>
      <author>Pasca Vlad</author>
      <pubDate>Tue, 11 May 2021 12:18:55 +0000</pubDate>
      <link>https://dev.to/pascavld/how-i-started-coding-got-a-job-as-a-dev-built-an-audience-on-twitter-and-made-my-first-income-online-4e8e</link>
      <guid>https://dev.to/pascavld/how-i-started-coding-got-a-job-as-a-dev-built-an-audience-on-twitter-and-made-my-first-income-online-4e8e</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything started in the last week of 2019&lt;/p&gt;

&lt;p&gt;I was in my first year of high school and my uncle started talking to me about programming&lt;/p&gt;

&lt;p&gt;He was already a senior web developer with over 10 years of experience&lt;/p&gt;

&lt;p&gt;At that time I already wrote a few lines of code at school in C++ but I had no idea what Web Development was&lt;/p&gt;

&lt;p&gt;He told me that I should give this a try and told me to learn Python first&lt;/p&gt;

&lt;p&gt;In the first week of 2020, I started learning Python&lt;/p&gt;

&lt;p&gt;I searched on Reddit for some tutorials I could follow and someone recommended me Codecademy&lt;/p&gt;

&lt;p&gt;I went on their website and started coding&lt;/p&gt;

&lt;p&gt;For one week all I did was code on there&lt;/p&gt;

&lt;p&gt;I fell in love with it in less than a day&lt;/p&gt;

&lt;p&gt;3 months later I was still doing some small Python projects in my free time&lt;/p&gt;

&lt;p&gt;Then the Pandemic came&lt;/p&gt;

&lt;p&gt;Suddenly I had a lot of free time&lt;/p&gt;

&lt;p&gt;So I called my uncle and he told me to continue learning Web Development&lt;/p&gt;

&lt;p&gt;So I went to  &lt;a href="//freecodecamp.org"&gt;FreeCodeCamp&lt;/a&gt; and started learning HTML and CSS&lt;/p&gt;

&lt;p&gt;At that time I was spending a lot of time on Reddit, talking with other developers&lt;/p&gt;

&lt;p&gt;One day I found a subreddit with developers from my country&lt;/p&gt;

&lt;p&gt;I joined it and decided to share my journey on there&lt;/p&gt;

&lt;p&gt;At the end of that post, I said that I'm looking for work to learn more about web development and gain more experience&lt;/p&gt;

&lt;p&gt;A few hours later a developer that had a start-up messaged me and said that they would love to work with me&lt;/p&gt;

&lt;p&gt;The next day we talked on the phone&lt;/p&gt;

&lt;p&gt;I was excited to work with them&lt;/p&gt;

&lt;p&gt;They gave me a few tasks which I solved in a few hours and I got hired&lt;/p&gt;

&lt;p&gt;You can read more about this story from this article I made: &lt;a href="https://blog.vlddev.live/how-i-got-a-job-as-a-developer-at-16-1"&gt;https://blog.vlddev.live/how-i-got-a-job-as-a-developer-at-16-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the next 3 months, I learned a lot from that job&lt;/p&gt;

&lt;p&gt;From JavaScript to Docker and how to work with Git&lt;/p&gt;

&lt;p&gt;After 3 months I left that job since the school was about to start and I wanted to focus more on that&lt;/p&gt;

&lt;p&gt;At that time I wasn't coding that much anymore and my motivation faded away&lt;/p&gt;

&lt;p&gt;One day I decided to join Twitter since lots of developers were talking about it&lt;/p&gt;

&lt;p&gt;So I joined Tech Twitter and started documenting my journey&lt;/p&gt;

&lt;p&gt;I was writing about the concepts I was learning about HTML, CSS, and JavaScript&lt;/p&gt;

&lt;p&gt;In the beginning, no one saw my tweets but I was happy to be part of a community&lt;/p&gt;

&lt;p&gt;Slowly I realized that I would like to create content so I bought a Twitter course and started growing my account&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/886314099"&gt;This &lt;/a&gt; is the Twitter course I bought (highly recommended)&lt;/p&gt;

&lt;p&gt;By the end of 2020, I reached 1000 followers&lt;/p&gt;

&lt;p&gt;I was already building lots of projects with JavaScript at that time while creating content on Twitter&lt;/p&gt;

&lt;p&gt;3 months later and I made my first income online&lt;/p&gt;

&lt;p&gt;How?&lt;/p&gt;

&lt;p&gt;Through affiliate marketing. Why?&lt;/p&gt;

&lt;p&gt;I realized that everyone was asking me what courses they could use to grow on Twitter, to learn Web Design and Web Development&lt;/p&gt;

&lt;p&gt;By that time I already had around 6k followers on Twitter&lt;/p&gt;

&lt;p&gt;For 30 days I continued doing that and hit $1000 in sales&lt;/p&gt;

&lt;p&gt;You can read more about how you can do it  &lt;a href="https://twitter.com/VladPasca5/status/1371823566858035205"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One month later I released my first info product, an eBook for Web Developers&lt;/p&gt;

&lt;p&gt;Over 50 people Pre-Ordered it and after one month it made almost $600 in revenue (with almost 80 customers)&lt;/p&gt;

&lt;p&gt;Now, another month later I'm at over 10k followers&lt;/p&gt;

&lt;p&gt;I made over $1500 online&lt;/p&gt;

&lt;p&gt;All of this because I was consistent&lt;/p&gt;

&lt;p&gt;I took no week off&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because I love what I'm doing&lt;/p&gt;

&lt;p&gt;So my only advice for you is...find something &lt;br&gt;
you enjoy doing and do that!&lt;/p&gt;

&lt;p&gt;Hard work pays off!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS clip-path and filter functions [Video]</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 11 May 2021 12:00:44 +0000</pubDate>
      <link>https://dev.to/thenerdydev/css-clip-path-and-filter-functions-video-4p7f</link>
      <guid>https://dev.to/thenerdydev/css-clip-path-and-filter-functions-video-4p7f</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;I am back with a new video ! &lt;br&gt;
In this video, you will learn about a bunch of CSS properties.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;One is the &lt;strong&gt;clip-path&lt;/strong&gt; CSS property that is used for performing clipping on an image &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second is the &lt;strong&gt;filter&lt;/strong&gt; CSS property that has a couple of functions that you can use to add blur, contrast or change the brightness of an image for example. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the link for the video : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BdAxpCHTIas"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This video is a part of my &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube, check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Also if you have a few spare hours then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Perl modules importing, calling or returning</title>
      <author>Tib</author>
      <pubDate>Tue, 11 May 2021 11:58:41 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/perl-modules-importing-calling-or-returning-l5o</link>
      <guid>https://dev.to/thibaultduponchelle/perl-modules-importing-calling-or-returning-l5o</guid>
      <description>&lt;p&gt;Modules (and CPAN) are one of the "killer feature" of Perl, this article will discuss module importing/calling and some subtleties around this topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-modules-live-do-not-dictate-how-they-are-called"&gt;
  &lt;/a&gt;
  Where modules live do not dictate how they are called.
&lt;/h2&gt;

&lt;p&gt;It is something important to understand early when you learn Perl programming, how you will import a module does not dictate its future package name (how it will be called). &lt;/p&gt;

&lt;p&gt;Let's start with a simple example with a empty module stored in a &lt;code&gt;File.pm&lt;/code&gt; in a subdirectory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Directory
└── Directory
    └── File.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;File.pm&lt;/code&gt; contains nothing but a &lt;code&gt;true&lt;/code&gt; return value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The import is done by pointing to the &lt;strong&gt;path&lt;/strong&gt; of the &lt;strong&gt;pm&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, all good! :D&lt;/p&gt;

&lt;p&gt;But it is too simple, so let's continue with a more real world example that actually &lt;em&gt;calls something&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Foo Bar!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is imported and called like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="c1"&gt;# Import &lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Call&lt;/span&gt;
&lt;span class="nn"&gt;Directory::Directory::File::&lt;/span&gt;&lt;span class="nv"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that &lt;code&gt;Directory::Directory::File::foobar();&lt;/code&gt; matches the package declaration in the module file... Where actually when &lt;em&gt;calling&lt;/em&gt; the modules functions/variables, we have to follow the package name decided by the author for its module (read the doc).&lt;/p&gt;

&lt;p&gt;It could be &lt;code&gt;Directory::Directory::File::foobar()&lt;/code&gt; or something totally different from the &lt;strong&gt;path&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Look at this new example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Directory
└── Directory
    └── File.pm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The module is stored in &lt;code&gt;Directory/Directory/File.pm&lt;/code&gt; but belongs to package &lt;strong&gt;"Misleading"&lt;/strong&gt; and declares/defines once again a function &lt;code&gt;foobar&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Misleading&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Foo Bar!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On importer side, the &lt;code&gt;use&lt;/code&gt; and later the function call are not using the same "id" name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class="c1"&gt;# Import &lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Directory::Directory::&lt;/span&gt;&lt;span class="nv"&gt;File&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# But package is actually named "Misleading" !!!&lt;/span&gt;
&lt;span class="nn"&gt;Misleading::&lt;/span&gt;&lt;span class="nv"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# WON'T WORK!&lt;/span&gt;
&lt;span class="c1"&gt;# Directory::Directory::File::foobar();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;N.B.: Please note that the good practice is to make match path and package name. But you can meet &lt;a href="https://metacpan.org/pod/DDP"&gt;aliases&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-vs-require"&gt;
  &lt;/a&gt;
  use vs require
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; and &lt;code&gt;require&lt;/code&gt; are doing &lt;em&gt;almost&lt;/em&gt; the same thing but at different phases.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://perldoc.perl.org/functions/require"&gt;require documentation&lt;/a&gt; ends with "For a yet-more-powerful import facility, see &lt;code&gt;use&lt;/code&gt; and perlmod."&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;use&lt;/code&gt; keyword executes at compilation phase means before execution even if it's the last line of your program.&lt;/p&gt;

&lt;p&gt;Here is my sample "Bazinga" module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And trying to call the function &lt;code&gt;joke&lt;/code&gt; before to actually import it works very well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'Bazinga::joke(); use Bazinga;'
Bazinga!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would not be the same with imports at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'Bazinga::joke(); require Bazinga;'
Undefined subroutine &amp;amp;Bazinga::joke called at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With runtime imports, I can also import conditionally a module.&lt;/p&gt;

&lt;p&gt;The following example will reload a module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;# Is it already loaded?&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$INC&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga.pm&lt;/span&gt;&lt;span class="p"&gt;"})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Press ENTER to reload module:&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="bp"&gt;STDIN&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;delete&lt;/span&gt; &lt;span class="nv"&gt;$INC&lt;/span&gt;&lt;span class="p"&gt;{"&lt;/span&gt;&lt;span class="s2"&gt;Bazinga.pm&lt;/span&gt;&lt;span class="p"&gt;"};&lt;/span&gt; &lt;span class="c1"&gt;# Remove it from list&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# Reload it&lt;/span&gt;
    &lt;span class="nv"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this code, it will import and execute &lt;code&gt;joke&lt;/code&gt; then reload the module on "Enter" (and run &lt;code&gt;joke&lt;/code&gt; again).&lt;br&gt;
Since it reloads the module, I can even change the module (the content of the &lt;code&gt;joke&lt;/code&gt; function) during the execution of the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Knock Knock Knock Penny!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;";&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And everything becomes more &lt;em&gt;dynamic&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;Bazinga&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Press&lt;/span&gt; &lt;span class="nv"&gt;ENTER&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;reload&lt;/span&gt; &lt;span class="nv"&gt;module:&lt;/span&gt;    
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Knock&lt;/span&gt; &lt;span class="nv"&gt;Penny&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#perl-module-return-value"&gt;
  &lt;/a&gt;
  Perl module return value
&lt;/h2&gt;

&lt;p&gt;Modules have to return a "true" value, it sometimes confuse beginners, but I read somewhere that it comes from &lt;code&gt;Perl 4&lt;/code&gt; where importing a module was much more like executing a subscript. &lt;/p&gt;

&lt;p&gt;So what if we try to return a "false" value?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When importing it, we get in trouble:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'use Boom;'
Boom.pm did not return a true value at -e line.
BEGIN failed--compilation aborted at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why are there is 2 messages here? &lt;br&gt;
There is one about importing and one about compilation because of the "phases" I mentioned just above.&lt;/p&gt;

&lt;p&gt;Just replace &lt;code&gt;use&lt;/code&gt; per &lt;code&gt;require&lt;/code&gt; to change the phase where the import is processed and it will now only print the import failure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -e 'require Boom;'
Boom.pm did not return a true value at -e line 1.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some people are playing with modules return codes like &lt;a href="https://github.com/schwern"&gt;Michael G Schwern&lt;/a&gt; see &lt;a href="https://stackoverflow.com/a/1864035"&gt;his stackoverflow response&lt;/a&gt; or more recently &lt;strong&gt;PEVANS&lt;/strong&gt; with a &lt;code&gt;0x55AA&lt;/code&gt; in its &lt;a href="https://metacpan.org/release/Faster-Maths/source/lib/Faster/Maths.pm#L104"&gt;Faster::Math&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more example of return values thanks to &lt;a href="https://returnvalues.plix.at/values.html"&gt;Acme::ReturnValue&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m"&gt;
  &lt;/a&gt;
  -M
&lt;/h2&gt;

&lt;p&gt;You can import a module with command line switch &lt;code&gt;-M&lt;/code&gt; like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ perl -I. -MBazinga -e 'joke()'
Bazinga!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visibility"&gt;
  &lt;/a&gt;
  Visibility
&lt;/h2&gt;

&lt;p&gt;Namespace pollution and symbols export is an important topic that I will not discuss today but I leave you in &lt;a href="https://perldoc.perl.org/Exporter#Selecting-What-to-Export"&gt;a good company&lt;/a&gt; 😀&lt;/p&gt;

</description>
      <category>perl</category>
      <category>cpan</category>
      <category>modules</category>
    </item>
    <item>
      <title>10+ Tips for Finding Clients as a Freelance Web Developer</title>
      <author>Creative Tim</author>
      <pubDate>Tue, 11 May 2021 11:54:40 +0000</pubDate>
      <link>https://dev.to/creativetim_official/10-tips-for-finding-clients-as-a-freelance-web-developer-1cbe</link>
      <guid>https://dev.to/creativetim_official/10-tips-for-finding-clients-as-a-freelance-web-developer-1cbe</guid>
      <description>&lt;p&gt;It’s tough selling your web development services when you’re new to the freelance market. Programming is a very competitive field because coding is becoming a more common skill each day. Many web developers choose the freelance path whether it is to find more variety in their work or to be their own boss.&lt;/p&gt;

&lt;p&gt;There are enough clients out there for every freelancer, but the trick is finding them. This might seem like an intimidating task, even more so when you’re trying to find clients that are willing to pay for what your work is worth. Your skills may be excellent, but if you don’t learn how to get clients, chances are you won’t make it.&lt;/p&gt;

&lt;p&gt;You can find clients in several different ways, all tested and proven effective by other freelancers before you. To make it easier for you, we put together a list of the tips we find to be most effective in finding clients as a freelance web developer. Read on to find out what they are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-sign-up-for-freelancing-platforms"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Sign up for Freelancing Platforms&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Some people might argue that signing up for freelance platforms is a waste of time. However, you shouldn’t brush off websites like Upwork, Fiverr, and Toptal just because other people didn’t have a good experience with them. While not all freelance projects you come across on such websites are worth your while, you might find some high-income gigs that will surprise you.&lt;/p&gt;

&lt;p&gt;Granted, there is some grinding implied when you first register to such platforms because competition is tough. You might even have to accept some underpaid projects in the beginning to generate 5-star reviews. Later on, you can increase your hourly rates to earn more money and be more selective with your projects.&lt;/p&gt;

&lt;p&gt;Don’t forget to also check regular job platforms for freelancing opportunities. You probably won’t find as many freelancer gigs, but it is worth a shot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-an-awesome-portfolio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Create an Awesome Portfolio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Every freelance developer needs a portfolio. It is a showcase of your work and a great way to convince prospects that your services are worth paying for. Contact former clients and ask them whether you can feature their websites in your portfolio. Be sure also to include your personal side projects to demonstrate your skills.&lt;/p&gt;

&lt;p&gt;You might find this task daunting if you’re a beginner that hasn’t built a single website. In this case, you should find someone that needs a website (like a local small business) and offer to build it for free. They get their website, and you get a project that you can add to your portfolio. An alternative would be to build a website as your own project instead of doing it for somebody else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-reach-out-to-small-businesses-in-your-area"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Reach Out to Small Businesses in Your Area&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Small businesses are the perfect prospects when you’re just starting your freelancing journey, especially those near you. Nothing beats real-life interactions and in-person pitches, so don’t dismiss the door-to-door approach. You can show up at a location and ask to talk to a manager to see if they are interested in a new website or a redesign.&lt;/p&gt;

&lt;p&gt;Engage in friendly conversation with these local business owners and managers and see what comes out of it. Even if they are not looking for any development services at the moment, they could refer you to someone who does.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3C9-pQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/reach-out-small-businesses-1024x685.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3C9-pQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/reach-out-small-businesses-1024x685.jpg" alt="Reach Out to Small Businesses in Your Area"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-network-both-in-real-life-and-online"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Network, Both in Real Life and Online&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Networking can help you kickstart your freelancing career fast. Nowadays, you can network from the comfort of your own home by joining Facebook groups for your niche, attending online events, being active on LinkedIn, or joining communities such as Reddit and quora. There are countless ways to get in touch with people from the web development industry and stumble upon freelancing gigs.&lt;/p&gt;

&lt;p&gt;If you prefer to network in person, search for events and conferences in your city. By attending this type of gathering, you can meet potential employers or even like-minded freelancers that can introduce you to their circle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-reach-out-to-friends-and-acquaintances"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Reach Out to Friends and Acquaintances&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Project opportunities can arise from a large number of sources, and friends and acquaintances make no exception. Someone you know may work for a company that requires web development or might know of someone else who does. You won’t know until you ask.&lt;/p&gt;

&lt;p&gt;Be aware that when accepting a freelance development job through a friend, acquaintance, or even family member, their reputation is on the line. Make sure you accept them only if you are sure you can do an impeccable job.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-build-your-online-presence"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Build Your Online Presence&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;No respectable company or business person would hire a freelance web developer with no website. Given the nature of the occupation, your website can act as your business card and portfolio. The better made your &lt;a href="https://www.creative-tim.com/blog/web-design/10-portfolio-website-templates/?ref=devto"&gt;personal portfolio&lt;/a&gt; website is, the more likely you are to attract clients.&lt;/p&gt;

&lt;p&gt;You mustn’t forget the web development market is highly competitive, which is why you should think of ways to differentiate yourself from everyone else. Think of a unique selling proposition (USP) that will make you stand out from the crowd.&lt;/p&gt;

&lt;p&gt;Build a presence on social media, too, especially on platforms where your prospects spend time. These may include LinkedIn, Facebook, Twitter, or even Instagram. Share your expertise and portray yourself as an authoritative voice on social media. Post about your work, use appealing captions, and engage with other users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-use-the-best-seo-practices"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Use the Best SEO Practices&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Search Engine Optimization is a great way to reach people interested in the type of services you offer. Use the content on your website to rank in the top positions on Google search result pages and generate traffic to your website. If your work showcase, price, and communication are good, you will get clients.&lt;/p&gt;

&lt;p&gt;Research keywords your potential customers are searching for. Start producing relevant content that will engage readers and make them want to hire your services. Make sure you pay special attention to locally relevant SEO practices because local equals convenience, so people in your area are more likely to become clients. Keep in mind SEO is trackable and adjustable, and you can always readjust your keywords and strategy.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQz2gNOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/freelance-web-developer-seo-1024x772.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQz2gNOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativetimblog.com/blog/wp-content/uploads/2021/05/freelance-web-developer-seo-1024x772.jpg" alt="Use the Best SEO Practices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-partner-up-with-other-freelancers-and-agencies"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Partner up with Other Freelancers and Agencies&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;According to Freelancers Union, &lt;a href="https://blog.freelancersunion.org/2014/07/02/independents-united-81-freelancers-refer-work-each-other/"&gt;81% of freelancers have said they referred work to fellow freelancers&lt;/a&gt;, and that proves collaborating with someone will help you get more clients than you would on your own. You can also team up on projects that are too large to take on by oneself or complex projects that involve more than web development.&lt;/p&gt;

&lt;p&gt;Partner up with freelancers or agencies from related fields like web design, content, marketing, etc. Clients that require those services might also need web development services, in which case your partners can refer their existing clients to you. It’s a two-way street, so you can also refer your clients to your partners who cover other niches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-ask-for-referrals-from-existing-clients"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Ask for Referrals from Existing Clients&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Asking for referrals is a bulletproof way of getting new clients because they will trust their acquaintance had a pleasant experience working with you, and it is highly likely that they will as well. If you’ve just finished a project for a client that is satisfied with your work, make sure you ask them if they can refer you to someone else.&lt;/p&gt;

&lt;p&gt;Although the best time to ask for a referral is right after you’ve just completed a project, you can reach out to past clients as well. Stay in touch with the customers you ask to refer you. They might not know of any freelance opportunities at that moment, but they might come across them in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-offer-free-samples-of-your-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Offer Free Samples of Your Work&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Offering free samples of your work can be a great way to reel clients in, but only if the work you do is good enough for them to be willing to pay for it afterward. This is a strategy you should try, at least at the beginning of your freelancing career, when getting clients may prove more difficult. Reach out to prospects and offer your free services, letting them know a paid collaboration is in the books later on.&lt;/p&gt;

&lt;p&gt;A similar strategy is to offer a lower price to your clients, in the beginning, letting them know this is just a promotional offer and they will have to pay the actual price later on. Both these strategies work because clients may be hesitant to pay (full price) for services they haven’t tried before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-do-outreach-and-submit-proposals-to-prospects"&gt;
  &lt;/a&gt;
  &lt;strong&gt;11. Do Outreach and Submit Proposals to Prospects&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Nobody wants to do cold calls. Mainly because of fear of how they might be received. However, they are effective, so don’t shy away from them. Start contacting people on Facebook, LinkedIn, Twitter, Instagram, and so on. Not all the replies you receive will be positive, but some will turn into great opportunities. Even if they end up declining your proposal, thank them and ask them to keep you in mind for the future.&lt;/p&gt;

&lt;p&gt;Do not use a copy-paste message because it won’t be as successful. Instead, write a personal message for each one of the people you contact. Make sure always to follow up in case they might’ve missed your initial message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final Thoughts&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We hope our tips on finding clients as a freelance web developer prove helpful and you manage to raise your client count. There are many reasons you should pursue a &lt;a href="https://www.creative-tim.com/blog/web-development/become-a-web-developer/"&gt;freelance web developer career&lt;/a&gt;, and you shouldn’t get discouraged by the simple task of finding clients. It might indeed require some effort on your behalf at first, but it will be worth it when you turn your invested time into profit.&lt;/p&gt;

&lt;p&gt;If you’re also on the hunt for tools to help you in freelance web development, check out our &lt;a href="https://www.creative-tim.com/templates"&gt;UI kits and dashboard templates&lt;/a&gt;. They are guaranteed to make your work much easier and shorten your coding time considerably.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>freelance</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A Practical Introduction to Svelte</title>
      <author>Asayer Tech Blog</author>
      <pubDate>Tue, 11 May 2021 11:43:43 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/a-practical-introduction-to-svelte-4e5k</link>
      <guid>https://dev.to/asayerio_techblog/a-practical-introduction-to-svelte-4e5k</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.asayer.io/authors/mads-brodt"&gt;Mads Brodt&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hey, and welcome to this tutorial! If you're here, you've probably heard of Svelte before and wanna know what all the fuzz is about. Luckily I'm here to walk you through the basic concepts of Svelte, by building a real-world project that I think you'll really like! So without further ado, let's get started with a primer on what Svelte even is:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-svelte"&gt;
  &lt;/a&gt;
  What is Svelte?
&lt;/h2&gt;

&lt;p&gt;Svelte is a "radical new approach to building user interfaces", according to the official documentation. In practice, Svelte is quite similar to JavaScript frameworks like React, Vue and Angular - it's a way to create websites and web applications using primarily JavaScript. Like these frameworks, Svelte is also based around the idea of components: small "chunks" of code that encapsulates template and logic, to create reusable "building blocks". &lt;/p&gt;

&lt;p&gt;A classic example of a component could be a navigation menu, which is usually present on every page on the website. Having it as a component makes sense, to encapsulate all the related code in one place for easy modification in the future. To accomplish this, Svelte borrows the idea of SFC's (Single File Components) from Vue. The idea is to write all your logic in a &lt;code&gt;&amp;lt;component-name&amp;gt;.svelte&lt;/code&gt; file, which combines all the necessary HTML, CSS and JS for that component.&lt;/p&gt;

&lt;p&gt;While all the major frameworks use components as their key abstraction, Svelte differs from them in a few key areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Svelte is actually a compiler rather than a framework.&lt;/strong&gt; Meaning that while you develop you code in a similar fashion to other frameworks, Svelte will compile it into vanilla JavaScript for the browser to use. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Svelte tries to stay close to the native platform of the web&lt;/strong&gt;. It does this by leveraging "standard" HTML, CSS and JS as much as possible. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These two points are what makes Svelte exciting to me. It's a breath of fresh air, and because Svelte is a compiler, it can include a lot more features "out-of-the-box" since it doesn't have to worry about shipping everything to the browser. That's why Svelte comes with built-in animations, a global store and many other great features.&lt;/p&gt;

&lt;p&gt;Let's explore Svelte by building a real-world project: A Cryptocurrency tracker!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-well-be-building"&gt;
  &lt;/a&gt;
  What we'll be building
&lt;/h2&gt;

&lt;p&gt;We're gonna build an overview page of the most popular cryptocurrencies, by fetching some data from an external API, and displaying it using different Svelte features. This will allow us to get familiar with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Svelte components (using .svelte files)&lt;/li&gt;
&lt;li&gt;Iterating over an array to display some data&lt;/li&gt;
&lt;li&gt;If/else statements in Svelte&lt;/li&gt;
&lt;li&gt;Handling button clicks from the user&lt;/li&gt;
&lt;li&gt;Styling Svelte components&lt;/li&gt;
&lt;li&gt;Dynamically binding classes based on data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our finished project will end up looking like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6p1NA6zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f15p8e3mtuggb4h0gcqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6p1NA6zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f15p8e3mtuggb4h0gcqt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll also include a list of extra feature ideas for you to play around with and implement yourself, to get even more familiar with Svelte.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-and-setup"&gt;
  &lt;/a&gt;
  Installation and setup
&lt;/h2&gt;

&lt;p&gt;So, before we get started, there's a few requirements: You must have NodeJS installed, and access to a terminal/shell. You'll also need a code editor. I recommend VS Code, as it comes with a built-in terminal, but you can use whatever you like.&lt;/p&gt;

&lt;p&gt;With those in place, open up a terminal and create a new project using the official Svelte starter template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit sveltejs/template svelte-crypto-tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; comes built-in with NodeJS, &lt;code&gt;degit&lt;/code&gt; is a project scaffolding tool, &lt;code&gt;sveltejs/template&lt;/code&gt; is the official template, and &lt;code&gt;svelte-crypto-tracker&lt;/code&gt; is the name of our project (feel free to rename it). When that's done, you want to &lt;code&gt;cd&lt;/code&gt; into the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd svelte-crypto-tracker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, install the dependencies and start the project in development mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open up localhost:5000 in your browser to see the official welcome page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1PQ-AKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu1ywju08hh254g38xmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1PQ-AKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu1ywju08hh254g38xmu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you see this, you're up and running! Now open the code folder in your editor, and let's get started on our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;src&lt;/code&gt; folder, there's an &lt;code&gt;App.svelte&lt;/code&gt; component. This is our main component that the template has generated for us, and where we'll be writing most of our logic. Every .svelte file consists of 3 parts (not necessarily in this order): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;script&lt;/code&gt; block, containing all the JavaScript logic&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;style&lt;/code&gt; block, where we can write CSS that will be scoped to this component&lt;/li&gt;
&lt;li&gt;And finally, the rest of the file becomes our template, where we write HTML and use special Svelte features to manipulate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, we're showing &lt;code&gt;Hello {name}&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is a property passed to our component from somewhere else - in this case, the &lt;code&gt;main.js&lt;/code&gt; file responsible for bootstrapping our app. We can see that &lt;code&gt;name&lt;/code&gt; is declared as a variable in the script tag, with &lt;code&gt;export let name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Svelte, any variable defined in the script block is available to use in the template. And if we put &lt;code&gt;export&lt;/code&gt; in front of it, that allows other components to pass a property down into this variable. Start by removing the export and setting the variable to "Crypto Tracker" instead, and then simply display that in the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;script&amp;gt;
  let name = "Crypto Tracker";
&amp;lt;/script&amp;gt;

&amp;lt;main&amp;gt;
  &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! There's really not much else to variables in Svelte, and this simplicity is one of the reasons I enjoy working with it.&lt;/p&gt;

&lt;p&gt;Let's add a button too, that we'll use to fetch the coin data from an API in a moment. We'll do that by adding a special &lt;code&gt;on:click&lt;/code&gt; directive that Svelte gives us, and tell it to call a function when that happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;script&amp;gt;
  let name = "Crypto Tracker";

  function fetchCoins() {
    console.log("Hello world!");
  }
&amp;lt;/script&amp;gt;

&amp;lt;main&amp;gt;
  &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
  &amp;lt;button on:click={fetchCoins}&amp;gt;Fetch Coin Data!&amp;lt;/button&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click the button and check your console to verify that it works - you should see "Hello world!". Now let's get to the meat, and actually fetch some data and show it on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-and-displaying-data"&gt;
  &lt;/a&gt;
  Fetching and displaying data
&lt;/h2&gt;

&lt;p&gt;We're gonna get our data from the &lt;a href="https://documenter.getpostman.com/view/5734027/RzZ6Hzr3?version=latest"&gt;Coinstats API&lt;/a&gt;, so let's update our code by adding a new variable, &lt;code&gt;coins&lt;/code&gt;, and setting it to an empty array - and then change our &lt;code&gt;fetchCoins&lt;/code&gt; function to fetch some data (all in the &lt;code&gt;script&lt;/code&gt; tag):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;script&amp;gt;
  let coins = [];

  async function fetchCoins() {
    const response = await fetch(
      "https://api.coinstats.app/public/v1/coins?skip=0&amp;amp;limit=20"
    );
    const data = await response.json();
    coins = data.coins;
    console.log("coins:", coins);
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a couple of things going on in our function, so lets walk through it. Firstly, we changed our function to be &lt;code&gt;async&lt;/code&gt;, and then call the native browser &lt;code&gt;fetch&lt;/code&gt; function, passing an URL to the API endpoint we get from the &lt;a href="https://documenter.getpostman.com/view/5734027/RzZ6Hzr3?version=latest"&gt;API documentation&lt;/a&gt;. This particular endpoint will fetch the first 20 coins. Try to open the link in your browser to see what kind of data we're getting back.&lt;/p&gt;

&lt;p&gt;We then save this in a response variable, and call the &lt;code&gt;.json()&lt;/code&gt; function on it, to get the data in a format we can work with. Finally, we update our coins array with the fetched coin data, and log it to the console. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6HqxYVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igloak3zk4ua5t918n9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6HqxYVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igloak3zk4ua5t918n9y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! We got some data, now let's show it on the page. We can do this using the svelte &lt;code&gt;{#each}&lt;/code&gt; block. This takes an array (our &lt;code&gt;coins&lt;/code&gt; array), and iterates over it, giving us access to each individual coin object inside the array. Use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;main&amp;gt;
  &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
  &amp;lt;button on:click={fetchCoins}&amp;gt;Fetch Coin Data!&amp;lt;/button&amp;gt;
  {#each coins as coin}
    &amp;lt;p&amp;gt;{coin.name}&amp;lt;/p&amp;gt;
  {/each}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That'll show 20 coin names on our page - neat! But just showing the name isn't that exciting, we also want to see stuff like the current price and recent percentage changes in the price. So for each coin, we're gonna make a new component called &lt;code&gt;CoinCard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;src&lt;/code&gt; folder, create a new file called CoinCard.svelte. Put the following code in the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/CoinCard.svelte
&amp;lt;script&amp;gt;
  export let coin
&amp;lt;/script&amp;gt;

&amp;lt;div&amp;gt;
  {coin.name} - {coin.symbol}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;export let coin&lt;/code&gt; tells Svelte that we expect a coin prop to be passed to this component. Let's switch back to App.svelte and use our new component by importing it at the top of our file, right below the opening &lt;code&gt;script&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
import CoinCard from "./CoinCard.svelte"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we'll use it inside our loop, by replacing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
{#each coins as coin}
  &amp;lt;p&amp;gt;{coin.name}&amp;lt;/p&amp;gt;
{/each}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
{#each coins as coin}
  &amp;lt;CoinCard {coin} /&amp;gt;
{/each}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet! Now we're still iterating our &lt;code&gt;coins&lt;/code&gt; array, and for each coin, we're rendering our CoinCard component, passing down the data for a particular coin as a prop. The &lt;code&gt;{coin}&lt;/code&gt; part of the above code is actually a shorthand for writing &lt;code&gt;coin={coin}&lt;/code&gt;, with the first &lt;code&gt;coin&lt;/code&gt; being the name of the variable in the CoinCard component (that we declared using &lt;code&gt;export let coin&lt;/code&gt;), and the second &lt;code&gt;coin&lt;/code&gt; being the actual value from the array. If we wanted to, we could pass other data by adding something like &lt;code&gt;hello={42}&lt;/code&gt;, and if the CoinCard exported a variable called &lt;code&gt;hello&lt;/code&gt;, it would receive the value &lt;code&gt;42&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#showing-more-data-and-styling"&gt;
  &lt;/a&gt;
  Showing more data and styling
&lt;/h2&gt;

&lt;p&gt;Let's show some more data than just the coin name and symbol. Replace the HTML with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/CoinCard.svelte
&amp;lt;div class="coin-card"&amp;gt;
  &amp;lt;img class="coin-image" src={coin.icon} alt="" /&amp;gt;
  &amp;lt;p class="coin-name"&amp;gt;{coin.name}&amp;lt;/p&amp;gt;
  &amp;lt;div class="coin-details"&amp;gt;
    &amp;lt;div
      class="detail-field price-change"
    &amp;gt;
      {coin.priceChange1w}%
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="detail-field"&amp;gt;{coin.price.toFixed(2)}$&amp;lt;/div&amp;gt;
    &amp;lt;a class="detail-field" href={coin.websiteUrl}&amp;gt;Website &amp;amp;#8594;&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show the coin icon, name, price change over the last week, the current price (fixed to 2 decimal points using the JS function &lt;code&gt;toFixed()&lt;/code&gt;), and a link to the coins website. This is great information, but it doesn't look good. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XOppI4oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipm70nndtwevvv7ck4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XOppI4oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hipm70nndtwevvv7ck4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's fix that. Another cool thing about Svelte is that we can write CSS directly in our component using the &lt;code&gt;style&lt;/code&gt; tags, and this CSS will only apply to elements inside this component. I've written a bunch of CSS for us here to make the CoinCards look a lot better. Paste the below code in your CoinCard.svelte file, on the bottom:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/CoinCard.svelte
&amp;lt;style&amp;gt;
  .coin-card {
    background-color: white;
    border-radius: 20px;
    --tw-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000),
      var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
  }

  .coin-image {
    max-width: 4rem;
    margin-top: 10px;
  }

  .coin-name {
    font-size: 24px;
    font-weight: bold;
    margin-top: 15px;
  }

  .coin-details {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    border-top: 1px solid #d1d5db;
    background-color: #f3f4f6;
  }

  .detail-field {
    font-size: 15px;
    font-weight: bold;
    padding: 15px 0;
  }

  .detail-field:not(:last-child) {
    border-right: 1px solid #d1d5db;
  }

  .price-change {
    color: #dc2626;
  }

  .positive {
    color: #16a34a;
  }

  @media (min-width: 1024px) {
    .detail-field {
      font-size: 18px;
      padding: 15px;
    }
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I won't walk through what all the styles do, but it's mostly organizing the content in a grid and changing font sizes/colors/margins. We'll also need to adjust some things in App.svelte, so go back to that file and add these styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;style&amp;gt;
  main {
    text-align: center;
    padding: 40px 0;
    margin: 0 auto;
  }
  h1 {
    color: #ff3e00;
    text-transform: uppercase;
    font-size: 4em;
    font-weight: 100;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 30px;
  }

  @media (min-width: 640px) {
    main {
      max-width: 1600px;
      padding: 40px 20px;
    }
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also, let's wrap our iterating loop in a &lt;code&gt;grid&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;div class="grid"&amp;gt;
  {#each coins as coin}
    &amp;lt;CoinCard {coin} /&amp;gt;
  {/each}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head back to the app, and it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMqlU8MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6o5gqti6vvi0gddzbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMqlU8MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf6o5gqti6vvi0gddzbp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better, right? Now we're actually showing useful information in a nice grid overview. There's still a few things to do, so let's tackle those next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-some-details"&gt;
  &lt;/a&gt;
  Adding some details
&lt;/h2&gt;

&lt;p&gt;As you might have noticed, all the price changes (shown in percentage) are currently colored red. But wouldn't it be nice if they were colored green to indicate a positive increase, and only red if the price has decreased? This is actually quite easy using Svelte's &lt;code&gt;class&lt;/code&gt; directive. &lt;/p&gt;

&lt;p&gt;Back in CoinCard.svelte, let's add a function to determine if the price change is positive or negative. Paste the code right below the previous &lt;code&gt;export let coin&lt;/code&gt; in the &lt;code&gt;script&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function changeIsPositive(priceChange) { 
  return priceChange &amp;gt;= 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will take a number (the &lt;code&gt;priceChange&lt;/code&gt;) and check if it's greater than or equal to 0. If it is, our function will return &lt;code&gt;true&lt;/code&gt; (and &lt;code&gt;false&lt;/code&gt; if the number is negative).&lt;/p&gt;

&lt;p&gt;Now that we have a way to figure out if the priceChange is positive, we can add a dynamic class binding. Find the &lt;code&gt;div&lt;/code&gt; element with a class of &lt;code&gt;detail-field price-change&lt;/code&gt;, and add the following attribute to the element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class:positive={changeIsPositive(coin.priceChange1w)}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This special Svelte directive will add the &lt;code&gt;positive&lt;/code&gt; class if the &lt;code&gt;changeIsPositive&lt;/code&gt; function returns true when passed the coin's weekly price change, and false otherwise. The &lt;code&gt;positive&lt;/code&gt; class is defined in the &lt;code&gt;style&lt;/code&gt; tag, and simply makes the text green:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.positive {
    color: #16a34a;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your price-change element should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/CoinCard.svelte
&amp;lt;div
  class="detail-field price-change"
  class:positive={changeIsPositive(coin.priceChange1w)}
&amp;gt;
  {coin.priceChange1w}%
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aaaand now our app will show a green number for positive increases:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WWpN1O_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmirjxtr533qv1wiavp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWpN1O_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmirjxtr533qv1wiavp2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost there! Let's add one final detail before wrapping up. I'd prefer if we only show the "Fetch Coin Data!" button when no coins have been loaded. And luckily, we can easily accomplish this using Sveltes {#if} block. Head back to App.svelte and update the template to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// src/App.svelte
&amp;lt;main&amp;gt;
  &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
  {#if coins.length === 0}
    &amp;lt;button on:click={fetchCoins}&amp;gt;Fetch Coin Data!&amp;lt;/button&amp;gt;
  {:else}
    &amp;lt;div class="grid"&amp;gt;
      {#each coins as coin}
        &amp;lt;CoinCard {coin} /&amp;gt;
      {/each}
    &amp;lt;/div&amp;gt;
  {/if}
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're saying, IF the coins array has length 0 (meaning we don't have any coin data yet), show the button to fetch coins. Otherwise, we have already fetched the coin data, so we show the grid and iterate over the coins instead. To make sure this works, visit the app and press the button. It should disappear as the coins get loaded 👍&lt;/p&gt;

&lt;p&gt;Awesome! I think we got a pretty sleek looking app here. However, there's a lot of other features that would be great to add as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observability-for-production-apps"&gt;
  &lt;/a&gt;
  Observability for Production Apps
&lt;/h2&gt;

&lt;p&gt;Debugging your JavaScript apps in production may be challenging and time-consuming. Asayer is a frontend monitoring tool that replays everything your users do and shows how your app behaves and renders for every issue. It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltGKwV9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/eb8f28fc4852447eb750d1747c53e692.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltGKwV9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/eb8f28fc4852447eb750d1747c53e692.png" alt="Asayer Frontend Monitoring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asayer helps to quickly get to the root cause by reproducing issues as if they happened in your own browser. It also monitors your frontend performance by capturing key metrics such as page load time, memory consumption and slow network requests.&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://asayer.io/register.html"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-to-add"&gt;
  &lt;/a&gt;
  Features to add
&lt;/h2&gt;

&lt;p&gt;Now that you know the basics of Svelte and have a working app, I encourage you to try adding some more features on your own. Below is a list for inspiration, but feel free to add whatever you can think of - try to make it your own!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an input field where the user can write a coin name to filter the results&lt;/li&gt;
&lt;li&gt;Allow the user to fetch more coins with a "Load More" button&lt;/li&gt;
&lt;li&gt;Make each coin clickable to show more data on that coin&lt;/li&gt;
&lt;li&gt;Show a graph of price changes for a specific coin&lt;/li&gt;
&lt;li&gt;Allow the user to sort the coins by percentage growth or current price&lt;/li&gt;
&lt;li&gt;Deploy the project to Netlify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! I hope this gave you a nice introduction to Svelte, and that you had as much fun with the project as I did. I really encourage you to add a few extra features and deploy the project to Netlify. You can even add it as a portfolio project on your website if you'd like!&lt;/p&gt;

&lt;p&gt;To learn more about Svelte, check out the official tutorial which has lots of &lt;a href="https://svelte.dev/tutorial/basics"&gt;great, interactive examples&lt;/a&gt;. And keep your eyes out for &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt;, which is an upcoming meta-framework on top of Svelte (kind of like NextJS for React) that's currently in beta.&lt;/p&gt;

&lt;p&gt;Finally, I'd love to know your thoughts on Svelte and this article, so hit me up on Twitter at &lt;a href="https://twitter.com/madsbrodt"&gt;@madsbrodt&lt;/a&gt;. Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>svelte</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 5 JavaScript Console Features 👩‍💻</title>
      <author>Dom (dcode)</author>
      <pubDate>Tue, 11 May 2021 11:33:01 +0000</pubDate>
      <link>https://dev.to/dcodeyt/top-5-javascript-console-features-3jol</link>
      <guid>https://dev.to/dcodeyt/top-5-javascript-console-features-3jol</guid>
      <description>&lt;p&gt;The JavaScript console is a useful tool when developing front-end or server-side applications. &lt;strong&gt;In this post, I'll be going over 5 features of the console which I hoped I knew earlier.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#youtube-video"&gt;
  &lt;/a&gt;
  YouTube Video
&lt;/h1&gt;

&lt;p&gt;I've created a video detailing these features on my YouTube channel, &lt;a href="https://www.youtube.com/dcode-software"&gt;dcode&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you enjoy, subscribe and check out my other 500+ videos on programming and web development 🙂&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VsaDOHqTWCM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-console-groups"&gt;
  &lt;/a&gt;
  1. Console Groups
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;console.group()&lt;/code&gt; function, you can create collapsible groups in the console to group and name your output.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Person Data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name: Dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Age: 32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Outside of the group...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLy7c8gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e033rsceoelb3jylu49v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLy7c8gJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e033rsceoelb3jylu49v.gif" alt="Console Groups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-live-expressions"&gt;
  &lt;/a&gt;
  2. Live Expressions
&lt;/h2&gt;

&lt;p&gt;Available in the Google Chrome Developer Console is the Live Expression feature, which allows you to input a JavaScript expression and receive live updates on it's value.&lt;/p&gt;

&lt;p&gt;These are great for keeping track of variables as you debug, such as X, Y values or the state of the application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiDlEI9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rk67zdsj2ntpeo05dnm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiDlEI9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rk67zdsj2ntpeo05dnm.gif" alt="Live Expressions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-timing-your-code"&gt;
  &lt;/a&gt;
  3. Timing Your Code
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;console.time()&lt;/code&gt; function, you're able to benchmark and time your code. For example, the code below will output how long it took to add 10,000 &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt; tags to the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;addHeadings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeend&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h5&amp;gt;Heading&amp;lt;/h5&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;addHeadings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0For_St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5mxqah3ve9d1dpaajus.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0For_St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5mxqah3ve9d1dpaajus.jpg" alt="Timing Your Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-styling-with-css"&gt;
  &lt;/a&gt;
  4. Styling With CSS
&lt;/h2&gt;

&lt;p&gt;Yes, you heard that right. You can use CSS in the JavaScript console. Using the &lt;code&gt;console.log()&lt;/code&gt; function and multiple arguments, you can add CSS rules to the text.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;%c&lt;/code&gt; in your string, you are saying that any text after it will have the subsequent CSS styles applied.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I am regular and %cI am boldy blue.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color: blue; font-weight: bold;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9t4k8ZIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t95z0xlhl3h6jwky09v9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9t4k8ZIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t95z0xlhl3h6jwky09v9.jpg" alt="Styling With CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-assertions"&gt;
  &lt;/a&gt;
  5. Assertions
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;console.assert()&lt;/code&gt; function, you can test if your code is doing what you expect it to do, similar to unit tests. If the given expression isn't &lt;code&gt;true&lt;/code&gt;, an exception will be thrown.&lt;/p&gt;

&lt;p&gt;While the usefulness of this feature is going to vary from developer to developer, it can be used in place of &lt;code&gt;console.log()&lt;/code&gt; in many scenarios.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXDprBlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfw273wn4rrua7npjxm1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXDprBlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfw273wn4rrua7npjxm1.gif" alt="Assertions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dcode"&gt;
  &lt;/a&gt;
  dcode 📷
&lt;/h2&gt;

&lt;p&gt;If you want to strengthen your web development skills and listen to my voice all day, I recommend taking a look at my YouTube channel, &lt;strong&gt;&lt;a href="https://www.youtube.com/dcode-software"&gt;dcode&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I've got hundreds of videos on HTML, CSS &amp;amp; JavaScript which you might enjoy - if you do, consider subscribing! 🧐&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqBz5KC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4t0vxdlniaisuc01c06.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIqBz5KC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4t0vxdlniaisuc01c06.png" alt="dcode"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
