<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Step Functions for making your text based images searchable</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 23 Jan 2022 18:21:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</link>
      <guid>https://dev.to/aws-builders/step-functions-for-making-your-text-based-images-searchable-334</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/step-functions/"&gt;AWS Step Functions&lt;/a&gt; helps with workflow orchestration with low-code and visual editor available on the AWS web-console. Step Functions had an important announcement which allowed 200+ AWS Services to be integrated with AWS SDK, you can read about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/"&gt;announcement&lt;/a&gt;.&lt;br&gt;
In this blog-post we will look into two such SDK integrations with Step Functions - &lt;a href="https://aws.amazon.com/textract/"&gt;&lt;strong&gt;Amazon Textract&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://aws.amazon.com/dynamodb/"&gt;&lt;strong&gt;Amazon DynamoDB&lt;/strong&gt;&lt;/a&gt;.&lt;br&gt;
My previous blog posts, gives an introduction to Textract.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxOxwlY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---xOiJQij--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/fc1ebf14-25d7-4f09-ae53-807a0a859f9d.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/amazon-textract-with-expense-analyzing-516b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon Textract with expense analyzing&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Oct 17 '21 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#textract&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
To understand Step Functions' &lt;em&gt;Workflow Studio&lt;/em&gt;, you can check out  Sebastian Bille's (@tastefulelk) blog-post&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMOJkW1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---0KMh0T7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/269325/505c1a64-b1d1-4a2f-a52a-fcc2226c2f1d.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/step-functions-workflow-studio-with-serverless-framework-4j8m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Step Functions Workflow Studio with Serverless Framework&lt;/h2&gt;
      &lt;h3&gt;Sebastian Bille for AWS Community Builders  ・ Aug 11 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key take-aways from the blog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#textract-sdk"&gt;Step Functions with Textract SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dynamodb-sdk"&gt;Step Functions with DynamoDB SDK integrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow-overview"&gt;
  &lt;/a&gt;
  Workflow overview
&lt;/h3&gt;

&lt;p&gt;The workflow is simple and could be invoked from the web console with parameters - &lt;code&gt;DocumentName&lt;/code&gt; and &lt;code&gt;BucketName&lt;/code&gt; which are also the parameters used for &lt;em&gt;Textract&lt;/em&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HPGQmWx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppqj9kbu1p2syp5lnrkc.png" alt="Workflow details" width="782" height="682"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"Comment"&lt;/span&gt;: &lt;span class="s2"&gt;"Step Functions for making your text based images searchable which uses Textract and DynamoDB SDK intergrations"&lt;/span&gt;,
  &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;,
  &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"AnalyzeDocument"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"Document"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"S3Object"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Bucket"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;BucketName"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Name.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;,
        &lt;span class="s2"&gt;"FeatureTypes"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;"FORMS"&lt;/span&gt;
        &lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:textract:analyzeDocument"&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="s2"&gt;"ProcessEachText"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Map"&lt;/span&gt;,
      &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"TextIndex.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Index"&lt;/span&gt;,
        &lt;span class="s2"&gt;"TextJSON.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$$&lt;/span&gt;&lt;span class="s2"&gt;.Map.Item.Value"&lt;/span&gt;,
        &lt;span class="s2"&gt;"DocumentName.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"Iterator"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"StartAt"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
        &lt;span class="s2"&gt;"States"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;"Choice"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Choice"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Choices"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
              &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"Or"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"LINE"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;,
                  &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="s2"&gt;"Variable"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.BlockType"&lt;/span&gt;,
                    &lt;span class="s2"&gt;"StringEquals"&lt;/span&gt;: &lt;span class="s2"&gt;"WORD"&lt;/span&gt;
                  &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;]&lt;/span&gt;,
                &lt;span class="s2"&gt;"Next"&lt;/span&gt;: &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;]&lt;/span&gt;,
            &lt;span class="s2"&gt;"Default"&lt;/span&gt;: &lt;span class="s2"&gt;"Skip"&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"DynamoDB PutItem"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Task"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Resource"&lt;/span&gt;: &lt;span class="s2"&gt;"arn:aws:states:::aws-sdk:dynamodb:putItem"&lt;/span&gt;,
            &lt;span class="s2"&gt;"Parameters"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
              &lt;span class="s2"&gt;"TableName"&lt;/span&gt;: &lt;span class="s2"&gt;"TextractKeywordsDB"&lt;/span&gt;,
              &lt;span class="s2"&gt;"Item"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;"pk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;DocumentName"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;,
                &lt;span class="s2"&gt;"sk"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="s2"&gt;"S.$"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TextJSON.Text"&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;,
          &lt;span class="s2"&gt;"Skip"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"Type"&lt;/span&gt;: &lt;span class="s2"&gt;"Pass"&lt;/span&gt;,
            &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
          &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;,
      &lt;span class="s2"&gt;"ItemsPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;params.TextractResult.Blocks"&lt;/span&gt;,
      &lt;span class="s2"&gt;"End"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
      &lt;span class="s2"&gt;"ResultPath"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;&lt;span class="s2"&gt;TranslatedText"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#amazon-textract-analyzedocument"&gt;
  &lt;/a&gt;
  Amazon Textract : AnalyzeDocument
&lt;/h4&gt;

&lt;p&gt;In this step, we would be extracting all the textual data from a image stored on S3 bucket in the same account. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#map-state-proceseachtext"&gt;
  &lt;/a&gt;
  Map State : ProcesEachText
&lt;/h4&gt;

&lt;p&gt;We would have to loop with the &lt;code&gt;Blocks&lt;/code&gt; which is returned from Textract as a response. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBaPNx_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mj36iu9eu41omvvz0wj0.png" alt="Map" width="285" height="100"&gt;&lt;/a&gt;&lt;br&gt;
The inputs from previous step to Maps is defined with &lt;code&gt;parameters&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choice"&gt;
  &lt;/a&gt;
  Choice
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8filyp4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8stbradhklsut3kyqne0.png" alt="choice" width="880" height="193"&gt;&lt;/a&gt;&lt;br&gt;
For each item in &lt;code&gt;Block&lt;/code&gt;, we will validate if that item has &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;. If the condition matches, it proceeds to the DynamoDB step else it will just pass the item.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dynamodb-putitem"&gt;
  &lt;/a&gt;
  DynamoDB : PutItem
&lt;/h4&gt;

&lt;p&gt;For the items which have &lt;code&gt;BlockType&lt;/code&gt; value either as &lt;em&gt;LINE&lt;/em&gt; or &lt;em&gt;WORD&lt;/em&gt;, they are the one which have textual data so we will use the &lt;code&gt;Text&lt;/code&gt; to write into DynamoDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-textract-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with Textract SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With Textract SDK, we would be using &lt;code&gt;AnalyzeDocument&lt;/code&gt; SDK API to get the text from a image stored on S3 bucket. This API requires the &lt;code&gt;Document&lt;/code&gt; as input which has details such as &lt;code&gt;Bucket&lt;/code&gt; name and &lt;code&gt;Name&lt;/code&gt; stored on S3. Also it requires &lt;code&gt;FeatureTypes&lt;/code&gt; which commands Textract to extract text with a form base or table base. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RK82rDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wzqfu1zkfuh1ze7206qw.png" alt="Textract" width="880" height="534"&gt;&lt;/a&gt;&lt;br&gt;
Workflow Studio, also shows the JSON definition of the step where the parameters from StepFunction input is mapped to SDK API input. The result path is also defined as it would be helpful for the Map State to look into the &lt;code&gt;Blocks&lt;/code&gt; list.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;textract:analyzedocument&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-functions-with-dynamodb-sdk-integrations"&gt;
  &lt;/a&gt;
  Step Functions with DynamoDB SDK integrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;DynamoDB SDK allows us to insert the records into DynamoDB table &lt;em&gt;TextractKeywordsDB&lt;/em&gt; with the &lt;code&gt;pk&lt;/code&gt; as the document key itself and &lt;code&gt;sk&lt;/code&gt; as the keyword which is detected from Textract.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vQG8eDME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aj7mwj6h5gx1msd27v6.png" alt="DynamoDB" width="880" height="450"&gt;&lt;/a&gt;&lt;br&gt;
The JSON definition shows how the parameters are mapped with each item of the Map's iterator.&lt;br&gt;
Note : Step Functions role would create &lt;code&gt;dynamodb:putitem&lt;/code&gt; with &lt;code&gt;ALLOW&lt;/code&gt; action.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#executions-view"&gt;
  &lt;/a&gt;
  Executions view
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;AnalyzeDocument&lt;/strong&gt; step when the status changes to &lt;em&gt;Succeeded&lt;/em&gt;, it would show the step's output which is the JSON which Textract returns along with the metadata of each text detected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OA3-wooj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hz42wrf0m1criw4h1hj2.png" alt="AnalyzeDocument" width="880" height="415"&gt;&lt;/a&gt;&lt;br&gt;
Whenever a map step is involved, along with the output of the complete Map execution, it also provides &lt;em&gt;Map iteration details&lt;/em&gt; which gives the overall details of how many iterations were completed, succeeded, failed, cancelled, in progress and pending.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jg2W6-qm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1p7dkeelrsbc9xdcilzw.png" alt="Map" width="880" height="356"&gt;&lt;/a&gt;&lt;br&gt;
We can also navigate through all the items of the map's iterator and view each execution details. For the one which &lt;em&gt;Choice&lt;/em&gt; condition is satisfied, DynamoDB PutItem step is invoked and also successfully completed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZkkN9C5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2c7x0afxu0sbz0hyvbzg.png" alt="Choice" width="880" height="404"&gt;&lt;/a&gt;&lt;br&gt;
During the &lt;em&gt;DynamoDB&lt;/em&gt; step we can view the details of what inputs was passed to the step and you can understand how the JSON mapping would have worked in that iteration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_85ceGl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn2o2uhhtd8r0ro6yrkv.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamodb-queries"&gt;
  &lt;/a&gt;
  DynamoDB queries
&lt;/h3&gt;

&lt;p&gt;Once the execution is completed, all the text which is extracted from the document itself, you can find it in DynamoDB. And then you can build your DynamoDB &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;scan&lt;/code&gt; which suits the search need. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-keywords-of-an-image"&gt;
  &lt;/a&gt;
  Getting all the keywords of an image
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jotw5w9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/covstekcc4u5rkdn5dak.png" alt="query" width="880" height="367"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyjcRdKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyw3k8xnjrmzvpm06o0r.png" alt="all the keywords of an image" width="644" height="886"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#getting-all-the-images-which-matches-the-keyword"&gt;
  &lt;/a&gt;
  Getting all the images which matches the keyword
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMIGJdcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy5o5xkw8x40yvlurwuy.png" alt="scan" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With Step Function and SDK integration it becomes a seemless low-code integration for your serverless workflows as explained in this blog-post. This also eliminates having Lambda functions which would be processing all of these. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>stepfunctions</category>
      <category>serverless</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript ES6</title>
      <author>Buddhadeb Chhetri</author>
      <pubDate>Sun, 23 Jan 2022 18:08:31 +0000</pubDate>
      <link>https://dev.to/buddhadebchhetri/javascript-es6-ilj</link>
      <guid>https://dev.to/buddhadebchhetri/javascript-es6-ilj</guid>
      <description>&lt;p&gt;JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.&lt;/p&gt;

&lt;p&gt;ECMAScript is the official name of the language.&lt;/p&gt;

&lt;p&gt;ECMAScript versions have been abbreviated to ES1, ES2, ES3, ES5, and ES6.&lt;/p&gt;

&lt;p&gt;Since 2016 new versions are named by year (ECMAScript 2016 / 2017 / 2018).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function"&gt;
  &lt;/a&gt;
  Arrow Function
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//prints 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#let-scope"&gt;
  &lt;/a&gt;
  Let Scope
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//prints 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  Const
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//can be assigned only once&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// Here x is 16&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Here x is 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multiline-string"&gt;
  &lt;/a&gt;
  Multiline String
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a multiline string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-string"&gt;
  &lt;/a&gt;
  Template string
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello ${name}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//Prints Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exponent-operator"&gt;
  &lt;/a&gt;
  Exponent Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="c1"&gt;//same as : Math.pow(2,8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,...&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;//[1,2,3,4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-includes"&gt;
  &lt;/a&gt;
  String Includes()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p1))
//Prints true
console.log(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.includes(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//prints false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#string-startswith"&gt;
  &lt;/a&gt;
  String StartsWith()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab.repeat(3))
//prints &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;ababab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-array"&gt;
  &lt;/a&gt;
  Destructuring array
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//7&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destucturing-object"&gt;
  &lt;/a&gt;
  Destucturing object
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-property-assignment"&gt;
  &lt;/a&gt;
  Object property assignment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//before es6:&lt;/span&gt;
&lt;span class="c1"&gt;//obj ={a:a,b:b}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//{a:2,b:5}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#objectassign"&gt;
  &lt;/a&gt;
  Object.Assign()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//{a:1 ,b:2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#promises-with-finally"&gt;
  &lt;/a&gt;
  Promises with finally
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{...})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{..})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//Logic independent of success/error &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>bestofdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PHP crash course : Conditionals, Loops and Functions</title>
      <author>Eric The Coder</author>
      <pubDate>Sun, 23 Jan 2022 18:02:50 +0000</pubDate>
      <link>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</link>
      <guid>https://dev.to/ericchapman/php-crash-course-conditionals-loops-and-functions-ck6</guid>
      <description>&lt;p&gt;Today you will learn conditionals, loops and functions création in PHP.&lt;/p&gt;

&lt;p&gt;This PHP crash course is free and will be posted here on dev.to. I'll be releasing a new article/post every two days or so. To not miss anything, you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conditional-execution"&gt;
  &lt;/a&gt;
  Conditional execution
&lt;/h1&gt;

&lt;p&gt;In PHP, it is possible to execute a line of code only if a condition is true&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code enclosed in the parentheses is called an expression. PHP will execute this code and return its boolean value (true or false).&lt;/p&gt;

&lt;p&gt;If the result is 'true' then the code contained between the { } will be executed.&lt;/p&gt;

&lt;p&gt;If the result is false, nothing will be executed in this if block&lt;/p&gt;

&lt;p&gt;Here is another example with the operator greater than « &amp;gt; »&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) will return true, so shipping will be free.&lt;/p&gt;

&lt;p&gt;It is possible to execute code if the condition is false&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the keyword else executes the code if the expression is 'false'&lt;/p&gt;

&lt;p&gt;Finally, it is possible to have several conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Free shipping'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Shipping 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The elseif keyword is used to test another condition. Note that this condition will be tested only if the first condition is false.&lt;/p&gt;

&lt;p&gt;If both the first and the second condition are false, then the code in the else section will be executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison-operator"&gt;
  &lt;/a&gt;
  Comparison operator
&lt;/h3&gt;

&lt;p&gt;Here are the different operators that can be used in expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===  equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;it is possible to test several expressions at the same time with the operator &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is between 1 and 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same principle applies for the operator or ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is 100$ or 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expressions without a comparison operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The price is not zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the expression ($amount) does not contain a comparison operator, despite this fact, this code is valid. Why ? In PHP each expression is converted into a Boolean value. So here 0 is converted to false. Any other value other than zero (or null) would convert to true.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Conversion to boolean value
&lt;/h3&gt;

&lt;p&gt;Here is the list of values that will be converted to false &lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string equal to zero)&lt;/p&gt;

&lt;p&gt;‘ ’ (empty string)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.toempty%20array"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All other values will convert to true&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-examples-of-conversion-to-boolean-value"&gt;
  &lt;/a&gt;
  Here are some examples of conversion to boolean value
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-if-statement-in-an-html-file"&gt;
  &lt;/a&gt;
  Using IF statement in an HTML file
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each block of PHP code has an opening and closing tag. The particularity here is the “if” and “else” code block. There's no  { }. You can use “:” instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;If we have several conditions, the if, elseif ect. can result in hard-to-read code. In this case, the Switch statement helps to simplify your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to evaluate: switch($color)&lt;/p&gt;

&lt;p&gt;Then just include the possible “cases”.&lt;/p&gt;

&lt;p&gt;The “break” function prevents the execution from continuing&lt;/p&gt;

&lt;p&gt;The “case” default is used if there is no matching case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;New in PHP 8.1, this instruction allows you to return an expression according to a key ⇒ value correspondence&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line represents the expression we want to match: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;On the second line we notice that it is possible to match more than one expression at a time.&lt;/p&gt;

&lt;p&gt;Then follows a list of &lt;strong&gt;key&lt;/strong&gt; ⇒ &lt;strong&gt;value&lt;/strong&gt;. If no &lt;strong&gt;key&lt;/strong&gt;→&lt;strong&gt;value&lt;/strong&gt; is found, the &lt;strong&gt;default&lt;/strong&gt; key will be executed.&lt;/p&gt;

&lt;p&gt;Note that the key can be an expression and the value can also be an expression and even a function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Match&lt;/strong&gt; is visually simpler but &lt;strong&gt;Switch&lt;/strong&gt; allows to execute more than one line of code for each “box”. &lt;strong&gt;Match&lt;/strong&gt; returns a value which &lt;strong&gt;Switch&lt;/strong&gt; does not. In short, I use &lt;strong&gt;Match&lt;/strong&gt; if possible because I find the instruction more visually refined but otherwise I have no problem with the &lt;strong&gt;Switch&lt;/strong&gt; instruction&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;This is a shorthand syntax for an if...else.&lt;/p&gt;

&lt;p&gt;Here is an example with if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the same example but with the Ternary operator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the expression preceding the operator “?” is true then the value following “?” will be used, otherwise the value following the “:” will be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  The null coalescing operator ??
&lt;/h3&gt;

&lt;p&gt;The Null coalescing operator returns its first operand if it exists and is not NULL; otherwise it returns its second operand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignment-with-null-coalescing-operator-"&gt;
  &lt;/a&gt;
  Assignment with Null coalescing operator ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigns the value 'Mike' if the variable $name is null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-safe-operator"&gt;
  &lt;/a&gt;
  Null safe operator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If one of the variables preceding the “?” is null then the value of of the expression will be null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-while-loop"&gt;
  &lt;/a&gt;
  The “while” loop
&lt;/h3&gt;

&lt;p&gt;Allows a block of code to be executed a certain number of times. The number of times will depend on the conditions. As long as the condition is true, the code block will run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the code block will be executed 9 times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-while-loop"&gt;
  &lt;/a&gt;
  “do while” loop
&lt;/h3&gt;

&lt;p&gt;Essentially the same principle as the “while” loop, but in this case the block of code will always execute at least once. The condition being tested only at the end of the code block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-for-loop"&gt;
  &lt;/a&gt;
  The “for” loop
&lt;/h3&gt;

&lt;p&gt;Used to execute a block of code a number of times defined by a condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The parameter is divided into three sections, the first being the definition of the counter ($i = 0). Then the condition to respect to execute the block of code ($i &amp;lt; 20) and finally the code to execute at each iteration ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-foreach-loop"&gt;
  &lt;/a&gt;
  The “foreach” loop
&lt;/h3&gt;

&lt;p&gt;The foreach function executes a block of code for each element of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter is the name of the array to browse, the second parameter represents the reference to the current element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-and-continue"&gt;
  &lt;/a&gt;
  Break and Continue
&lt;/h3&gt;

&lt;p&gt;The break and continue statements are used to modify the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This loop will print the value of $i, only when the value is odd.&lt;/p&gt;

&lt;p&gt;If the value is even ($i % 2 === 0). So we ask the loop to do a &lt;strong&gt;continue&lt;/strong&gt; with the next value.&lt;/p&gt;

&lt;p&gt;It is possible to exit the loop at any time with the &lt;strong&gt;break&lt;/strong&gt; instruction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the loop will stop when $i will have 10 as value&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h1&gt;

&lt;p&gt;In PHP there are several functions already pre-defined. It is also possible to create our own functions.&lt;/p&gt;

&lt;p&gt;Functions allow us to avoid repeating our code several times. They also allow us to divide our application into small pieces that are easier to maintain.&lt;/p&gt;

&lt;p&gt;The syntax for creating a function is quite simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use the keyword “function” followed by the name of our function.&lt;/p&gt;

&lt;p&gt;Once our function has been created, it is possible to launch its execution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to include one or more parameters to our function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The launch of the function must include the parameters in the order they were declared&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default value can be assigned to a parameter which suddenly makes this parameter optional when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that parameters with a default value must absolutely be defined last.&lt;/p&gt;

&lt;p&gt;Since version 8 of PHP it is possible to launch a function by naming the parameters. The call is clearer and the order of the parameters does not have to be respected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#return"&gt;
  &lt;/a&gt;
  Return
&lt;/h3&gt;

&lt;p&gt;Returns a value when calling the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the function returns a concatenated string with first name and last name&lt;/p&gt;

&lt;p&gt;The echo function will display on the web page the value returned by the fullName() function&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-functions-closure"&gt;
  &lt;/a&gt;
  Anonymous functions (closure)
&lt;/h3&gt;

&lt;p&gt;Allows the creation of functions without specifying their name. Here is an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous functions end with a semicolon; And they can't access the parent context variables.&lt;/p&gt;

&lt;p&gt;It is possible to pass a variable from the parent context with the statement &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Callback functions are anonymous functions passed as parameters. here is an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the array_filter() function has an anonymous function as second parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Allows the use of a shortcut syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that for the moment, the Arrow functions allow the execution of only one expression. Arrow functions are executed in the current context so they can use variables without having to use the &lt;strong&gt;use&lt;/strong&gt; statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-type-hint"&gt;
  &lt;/a&gt;
  Function Type Hint
&lt;/h3&gt;

&lt;p&gt;Note that functions can be typed (string, int, etc.). It is possible to define a type for each of the parameters and a type for the return value of the function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the $first and $last parameters must be of type string as well as the return value.&lt;/p&gt;

&lt;p&gt;There are several other things to know about typed functions, we will come back to this later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Here is an example of a function with type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the parameter $a is of type integer. However PHP does not return an error. The reason is that PHP will try to convert the string '10' to an integer. If the conversion is possible then no error is reported.&lt;/p&gt;

&lt;p&gt;There are times when you would like PHP to not allow this conversion and only execute if the parameter is really of the specified type. To do this you must add an instruction at the beginning of your file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here an error is returned because the type of the parameter is not an integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for today, I'll be releasing a new article every two days or so. To be sure not to miss anything you can follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>backends</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Apprendre le PHP : Conditions, boucles et fonctions</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sun, 23 Jan 2022 18:02:22 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</link>
      <guid>https://dev.to/ericlecodeur/apprendre-le-php-conditions-boucles-et-fonctions-1ed1</guid>
      <description>&lt;p&gt;Aujourd'hui, vous apprendrez les conditions, les boucles et les fonctions&lt;/p&gt;

&lt;p&gt;Ce cours accéléré PHP est gratuit et sera publié ici sur dev.to. Je publierai un nouvel article tous les deux jours environ. Pour ne rien manquer, vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Follow @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ex%C3%A9cution-conditionnelle"&gt;
  &lt;/a&gt;
  Exécution conditionnelle
&lt;/h1&gt;

&lt;p&gt;En PHP, il est possible d’exécuter une ligne de code seulement si une condition est vraie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le code inclut entre les parenthèses est ce que l’on appel une expression. PHP va exécuter ce code et retourner sa valeur booléenne (vrai ou faux). &lt;/p&gt;

&lt;p&gt;Si le résultat est ‘vrai’ alors le code contenu entre les { } sera exécuté.&lt;/p&gt;

&lt;p&gt;Si le résultat est faux, rien ne sera exécuté dans ce bloc 'if'&lt;/p&gt;

&lt;p&gt;Voici un autre exemple avec l’opérateur plus grand que '&amp;gt;'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’exécuter du code si la condition est fausse&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le mot-clé 'else' exécute le code si l’expression est ‘false’&lt;/p&gt;

&lt;p&gt;Enfin, il est possible d’avoir plusieurs conditions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison gratuite'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 9.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Livraison 19.95$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le mot-clé 'elseif' permet de tester une autre condition. À noter que cette condition sera testée seulement si la première condition est fausse.&lt;/p&gt;

&lt;p&gt;Si la première et la deuxième condition sont fausses, alors le code dans la section 'else' sera exécuté.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-de-comparaison"&gt;
  &lt;/a&gt;
  Opérateur de comparaison
&lt;/h3&gt;

&lt;p&gt;Voici les différents opérateurs qui peuvent être utilisés dans les expressions.&lt;/p&gt;

&lt;p&gt;==   equal no type check&lt;br&gt;
===   equal with type check&lt;br&gt;
!=   not equal&lt;br&gt;
||   or&lt;br&gt;
&amp;amp;&amp;amp;   and&lt;br&gt;
&amp;gt;   greater than&lt;br&gt;
&amp;lt;   less than&lt;/p&gt;

&lt;p&gt;il est possible de tester plusieurs expressions en même temps avec l’opérateur &amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est entre 1 et 49'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le même principe s’applique pour l’opérateur ou ||&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le prix est 100$ ou 200$'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les expressions sans opérateur de comparaison&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Le montant n est pas de zéro'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici l’expression ($amount) ne contient pas d’opérateur de comparaison, malgré ce fait, ce code est valide. Pourquoi ? En PHP chaque expression est convertie en valeur booléenne. Donc ici 0 est convertie en faux. Toute autre valeur autre que zéro (ou null) serait convertie en vrai.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convertion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Convertion en valeur booléenne
&lt;/h3&gt;

&lt;p&gt;Voici la liste des valeurs qui seront converties en &lt;strong&gt;false&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;false&lt;/p&gt;

&lt;p&gt;0&lt;/p&gt;

&lt;p&gt;0.0&lt;/p&gt;

&lt;p&gt;null&lt;/p&gt;

&lt;p&gt;‘0’ (string égale à zéro)&lt;/p&gt;

&lt;p&gt;‘ ’ (string vide)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.totableau%20vide"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Toutes les autres valeurs seront converties en &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-quelques-exemples-de-conversion-en-valeur-bool%C3%A9enne"&gt;
  &lt;/a&gt;
  Voici quelques exemples de conversion en valeur booléenne
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$messsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$messsage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is set'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Variable is unset'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#utiliser-les-if-dans-un-fichier-html"&gt;
  &lt;/a&gt;
  Utiliser les 'if' dans un fichier HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php $isAdmin = true; ?&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home page&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;?php if ($isAdmin) : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Administrator&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php else : ?&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Welcome Guest&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;?php endif ?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chaque bloc de code PHP a une balise d’ouverture et de fermeture. La particularité ici c’est le bloc de code du &lt;strong&gt;if&lt;/strong&gt; et du &lt;strong&gt;else&lt;/strong&gt; . Il n’y a pas { }. Il est possible d’utiliser les : à la place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#switch"&gt;
  &lt;/a&gt;
  Switch
&lt;/h3&gt;

&lt;p&gt;Si nous avons plusieurs conditions, les 'if', 'elseif' etc.. peuvent donner un code difficile à lire. Dans ce cas l’instruction 'switch' permet justement d’aider à simplifier votre code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Danger'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Warning'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;'green'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Success'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'The color is unknown'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons évaluer : switch($color)&lt;/p&gt;

&lt;p&gt;Ensuite suffit d’inclure les “case” possible.&lt;/p&gt;

&lt;p&gt;La fonction “break” empêche l’exécution de continuer&lt;/p&gt;

&lt;p&gt;Le “case” default est utilisé s'il y a aucun case qui correspond.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match"&gt;
  &lt;/a&gt;
  Match
&lt;/h3&gt;

&lt;p&gt;Nouveauté PHP 8.1, cette instruction permet de retourner une expression selon une correspondance clé ⇒valeur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La première ligne représente l’expression que nous désirons vérifier la correspondance: &lt;strong&gt;match&lt;/strong&gt;($color)&lt;/p&gt;

&lt;p&gt;Sur la deuxième ligne on remarque qu’il est possible de correspondre plus d’une expression à la fois.&lt;/p&gt;

&lt;p&gt;Ensuite s’en suit une liste de &lt;strong&gt;clé&lt;/strong&gt; ⇒ &lt;strong&gt;valeur&lt;/strong&gt;. Si aucune &lt;strong&gt;clé&lt;/strong&gt;→&lt;strong&gt;valeur&lt;/strong&gt; n’est trouvé, la clé &lt;strong&gt;default&lt;/strong&gt; sera exécutée.&lt;/p&gt;

&lt;p&gt;À noter que la clé peut être une expression et que la valeur peut être également, une expression et même une fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openAdmin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;userID&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openUser&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openOther&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#switch-ou-match-"&gt;
  &lt;/a&gt;
  Switch ou Match ?
&lt;/h3&gt;

&lt;p&gt;Chacun possède des plus. &lt;strong&gt;Match&lt;/strong&gt; est plus simple visuellement mais &lt;strong&gt;Switch&lt;/strong&gt; permet d’exécuter plus d’une ligne de code pour chaque “case”. &lt;strong&gt;Match&lt;/strong&gt; permet de retourner une valeur ce que &lt;strong&gt;Switch&lt;/strong&gt; ne fait pas. Bref moi j’utilise &lt;strong&gt;Match&lt;/strong&gt; si possible car je trouve l’instruction plus épurée visuellement mais sinon je n'ai pas de problème avec l’instruction &lt;strong&gt;switch&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ternary-operator-"&gt;
  &lt;/a&gt;
  Ternary operator  ?:
&lt;/h3&gt;

&lt;p&gt;C’est une syntaxe raccourcie pour un if...else. &lt;/p&gt;

&lt;p&gt;Voici un exemple avec if...else&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$isValid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voici le même exemple mais avec l’opérateur Ternary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$isValid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si l’expression qui précède L’opérateur “?” est vraie alors la valeur suivant “?” sera utilisé, sinon c’est la valeur suivant les “:” qui sera utilisé.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  L'opérateur de coalescence Null ??
&lt;/h3&gt;

&lt;p&gt;L'opérateur de coalescence Null renvoie son premier opérande s'il existe et n'est pas NULL ; sinon il renvoie son deuxième opérande&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignation-avec-lop%C3%A9rateur-de-coalescence-null-"&gt;
  &lt;/a&gt;
  Assignation avec l'opérateur de coalescence Null ??
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assigne la valeur ‘Mike’ si la variable $name est null&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#op%C3%A9rateur-null-safe"&gt;
  &lt;/a&gt;
  Opérateur Null safe
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si une des variables qui précède l’opérateur “?” est null alors la valeur de l’expression sera null&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-boucles"&gt;
  &lt;/a&gt;
  Les boucles
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-while"&gt;
  &lt;/a&gt;
  La boucle “while”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un block de code un certain nombre de fois. Le nombre de fois va dépendre de la condition. Tantque la condition est vrai, le block de code va s’exécuter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici le bloc de code sera exécuté 9 fois.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-do-while"&gt;
  &lt;/a&gt;
  La boucle “do while”
&lt;/h3&gt;

&lt;p&gt;Essentiellement le même principe que la boucle “while” mais dans ce cas-ci, le bloc de code va toujours s’exécuter au moins une fois. La condition étant testé seulement à la fin du bloc de code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#la-boucle-for"&gt;
  &lt;/a&gt;
  La boucle “for”
&lt;/h3&gt;

&lt;p&gt;Permet d’exécuter un bloc de code un nombre de fois définit par une condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le paramètre se divise en trois sections, le première étant la définition du compteur (i = 0). Ensuite la condition à respecter pour exécuter le bloc de code ($i &amp;lt; 20)  et enfin le code à exécuter à chaque itération ($i++)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#la-boucle-foreach"&gt;
  &lt;/a&gt;
  La boucle “foreach”
&lt;/h3&gt;

&lt;p&gt;La fonction foreach permet d’exécuter un bloc de code pour chaque élément d’un tableau.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le premier paramètre c’est le nom du tableau à parcourir, le second paramètre représente la référence à l’élément en cours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-et-continue"&gt;
  &lt;/a&gt;
  Break et Continue
&lt;/h3&gt;

&lt;p&gt;Les instructions break et continue permettent de modifier la boucle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette boucle va imprimer la valeur de $i, seulement lorsque la valeur sera impaire.&lt;/p&gt;

&lt;p&gt;Si la valeur est paire ($i % 2 === 0). Alors on demande à la boucle de faire un &lt;strong&gt;continue&lt;/strong&gt; avec la prochaine valeur.&lt;/p&gt;

&lt;p&gt;Il est possible de sortir de la boucle à tout moment avec l’instruction &lt;strong&gt;break&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;br&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la boucle va s’arrêter lorsque $i aura 10 comme valeur&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#les-fonctions"&gt;
  &lt;/a&gt;
  Les fonctions
&lt;/h1&gt;

&lt;p&gt;En PHP il existe plusieurs fonctions déjà pré-définit. Il est également possible de créer nos propres fonctions. &lt;/p&gt;

&lt;p&gt;Les fonctions permettent d’éviter de répéter notre code plusieurs fois. Elles permettent également de diviser notre application en petit morceau plus facile à maintenir.&lt;/p&gt;

&lt;p&gt;La syntaxe pour créer une fonction est assez simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici nous utilisons le mot-clé “function” suivit du nom de notre fonction.&lt;/p&gt;

&lt;p&gt;Une fois notre fonction créée, il est possible de lancer son exécution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il est possible d’inclure un ou des paramètres notre fonction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le lancement de la fonction devra inclure les paramètres dans l’ordre qu’ils ont été déclarés&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une valeur par défaut peut-être attribué à un paramètre ce qui du coup rendra se paramètre optionnel lors de l’appel de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'none'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Mike none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que les paramètres avec une valeur par défaut doivent absolument être définit en dernier ordre.&lt;/p&gt;

&lt;p&gt;Depuis la version 8 de PHP il est possible de lancer une fonction en nommant les paramètres. L’appel est plus clair et l’ordre des paramètres n’a pas à être respecté.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#linstruction-return"&gt;
  &lt;/a&gt;
  L’instruction Return
&lt;/h3&gt;

&lt;p&gt;Permet de retourner une valeur lorsque l’on l'appel la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$firstName&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Doe'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction retourne une string concaténé avec prénom et nom&lt;/p&gt;

&lt;p&gt;La fonction echo va afficher sur la page web la valeur retournée par la fonction fullName()&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonctions-anonymes-closure"&gt;
  &lt;/a&gt;
  Fonctions anonymes (closure)
&lt;/h3&gt;

&lt;p&gt;Permet la création de fonctions sans préciser leur nom. Voici un exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les fonctions anonymes se terminent par un semi colon ;  Et elles ne peuvent pas accéder aux variables du contexte parent.&lt;/p&gt;

&lt;p&gt;Il est possible de passer une variable depuis le contexte parent avec l’instruction &lt;strong&gt;use&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#callback-functions"&gt;
  &lt;/a&gt;
  Callback functions
&lt;/h3&gt;

&lt;p&gt;Les fonctions Callback sont des fonctions anonymes passé comme paramètre. Voici un exemple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Array ( [0] =&amp;gt; iPhone 12 [1] =&amp;gt; iPhone 13 )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici la fonction array_filter() possède une fonction anonyme comme deuxième paramètre. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h3&gt;

&lt;p&gt;Permet l’utilisation d’une syntaxe raccourci:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'iPhone 12'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPhone 13'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iPad'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'iWatch'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$filtered_products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filtered_products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter que pour le moment, les Arrow fonctions permettent l’exécution de seulement une expression. Les Arrow function sont exécuté dans le contexte en cours donc peuvent utiliser les variables sans à avoir à utiliser l’instruction &lt;strong&gt;use&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonction-type-hint"&gt;
  &lt;/a&gt;
  Fonction Type Hint
&lt;/h3&gt;

&lt;p&gt;À noter que les fonctions peuvent être typé (string, int, etc.). Il est possible de définir un type pour chacun des paramètres et un type pour la valeur de retour de la fonction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$last&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici les paramètres $first et $last devront être de type string ainsi que le valeur de retour.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs autres trucs à savoir sur les fonctions typé, nous y reviendrons un peu plus tard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strict-type"&gt;
  &lt;/a&gt;
  Strict Type
&lt;/h3&gt;

&lt;p&gt;Voici un exemple d’une fonction avec type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dans cette exemple le paramètre $a est de type integer. Malgré tout PHP ne retourne pas d’erreur. La raison c’est que PHP va tenter de convertir la string ‘10’ en integer. Si la conversion est possible alors aucune erreur n’est rapporté.&lt;/p&gt;

&lt;p&gt;Il arrive parfois que vous aimeriez que PHP ne permette pas cette conversion et exécute seulement si le paramètre est vraiment du type spécifié. Pour ce faire il faut ajouter un instruction au début de votre fichier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici une erreur est retournée car le type du paramètre n’est pas un integer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, je publierai un nouvel article tous les deux jours environ. Pour être sûr de ne rien rater vous pouvez me suivre sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;Suivre @EricLeCodeur&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>tutoriel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create an Instagram Scraping Bot with Python</title>
      <author>SocialScrape</author>
      <pubDate>Sun, 23 Jan 2022 17:56:56 +0000</pubDate>
      <link>https://dev.to/socialscrape/how-to-create-an-instagram-scraping-bot-with-python-45c8</link>
      <guid>https://dev.to/socialscrape/how-to-create-an-instagram-scraping-bot-with-python-45c8</guid>
      <description>&lt;p&gt;&lt;strong&gt;THIS ARTICLE WAS ORIGINALLY POSTED ON THE SOCIALSCRAPE &lt;a href="https://www.socialscrape.com/post/create-instagram-scraping-bot-python"&gt;BLOG&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to scrape Instagram 📷&lt;/strong&gt;&lt;br&gt;
Instagram is one of the world's largest social media platforms, developed for users to share moments, market new products, and ultimately create their aesthetic reality. With almost 900 million user profiles, it also happens to be a great place to scrape data, and find new trends in any category you can think of! 🌎&lt;/p&gt;

&lt;p&gt;In this article, you are going to understand how to create an Instagram scraping bot in Python using instaPy. You'll also learn how you can scrape Instagram hassle-free with SocialScrape. SocialScrape is an inexpensive content scraping API, with a super friendly UI, that allows you to scrape Instagram in just one step! You even get your first 100 calls free! 📞 😍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation &amp;amp; Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have Python2.7 or Python3 installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip or pip3 installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have Firefox browser installed on your local machine ✅&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some knowledge of Python/Data manipulation ✅&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Why scrape Instagram? 📈&lt;/strong&gt;&lt;br&gt;
Unfortunately, Instagram is one platform that can be difficult to scrape. For starters, it's not guaranteed that an account will hold an abundance of data, and even the ones that are full of data don't have much to choose from. Instagram also uses powerful tools to prevent bottling and catches on easily to "over-active" profiles. But, that's not to say it isn't impossible to do! So, the question remains why would you want to scrape Instagram?&lt;/p&gt;

&lt;p&gt;By scraping user profiles developers can find endless data trends. Due to its ever-increasing user profile count, Instagram estimates to be home to over a billion posts. And with that much digital media, captions, hashtags, etc. developers and data scientists can learn an immense amount about a population, regardless, data-abundant or not.&lt;/p&gt;

&lt;p&gt;Are you, or possibly someone you're writing this script for, an IG influencer? Or, perhaps you're interested in growing a follower count and need to understand the basics of "How to be an influencer". By creating a script that looks for users with 10,000+ followers using the hashtag #beauty, you could find what trends exist amongst other IG beauty influencers through media/captions. Not to mention, find out what the #beauty audience responds most positively to by examining the like count on each media. Once you have all this information, you can even begin thinking about creating bots that execute interactions with real-time users utilizing the obtained data. The opportunities are truly infinite.&lt;/p&gt;

&lt;p&gt;Now that you have some ideas about what you want to do with your data, let's start scraping!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to create an Instagram Scraping Bot&lt;/strong&gt;✨ &lt;br&gt;
This bot will be created using Python, if you are searching to scrape Instagram in other languages such as Node, Ruby, PHP, or Shell. Try heading over to SocialScrape! ✨&lt;/p&gt;

&lt;p&gt;For this example, you'll be creating a script that finds the most up-to-date data trends for the #beauty and #fashion hashtags/audience. Feel free to code along yourself, or follow along with this &lt;a href="https://github.com/socialscrape/scraping_py"&gt;github&lt;/a&gt; repository.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open up your favorite code editor and navigate to a directory you'd like to create your scraping bot in, or create a new ig_scraping directory. Next inside your ig_scraping directory, create a ig_scraping_bot.py file, this is where you'll write your script.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To create this script, you'll first need to import instaPy into the file. You can install &lt;a href="https://pypi.org/project/instapy"&gt;instaPy&lt;/a&gt; by running:&lt;/p&gt;

&lt;p&gt;🚩 If you are using pip3, you may have to run pip3 install instapy instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install instapy&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Import instaPy library into the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instantiate instaPy by passing in an account username and password. You can set the instance to a variable named session.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🚩 It is not recommended to perform scraping on an important/personal account!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Login to the designated scraping IG account using instaPy's login() method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the set relationship_bounds method to determine the attributes a user must have to determine whether you would like to scrape, _in this case also like, it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the user passes the set_relationship_bounds, the post will be liked and returned in the response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that you have some response data from posts you've liked, you can observe the output of creating scripts based on the trend data you're looking for.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of what your scraping bot may look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from instapy import InstaPy

#Turn on VPN or use requests package to create (rotating) proxies

# PASS IN USERNAME, PASSWORD, and TWO HASHTAGS you would like to scrape from

def run_ig_scraping_session(username, password, hashtag1, hashtag2):
    # 1. session -&amp;gt;
    # create a session variable from the InstaPy initialization
    session = InstaPy(username=username, password=password)
    # 2. session.login -&amp;gt;
    #Login into IG with username and password given above.
    session.login()
    # 3. session.set_relationship_bounds -&amp;gt;
    # (from InstaPy Docs:)
    # THIS IS USED TO CHECK THE NUMBER OF
    # FOLLOWERS AND/OR FOLLOWING A USER HAS AND IF
    # THESE NUMBERS EITHER EXCEED THE NUMBER SET OR
    # DOES NOT PASS THE NUMBER SET OR IF THEIR RATIO
    # DOES NOT REACH DESIRED POTENCY RATIO THEN NO
    # FURTHER INTERACTION HAPPENS
        # Arguments
            # potency_ratio: following is higher than follower count
            # delimit_by_numbers: is used to activate &amp;amp; deactivate the usage of max &amp;amp; min values
            # max_followers: maximum of follower count user can have
            # max_following: maximum following count user can have
            # min_followers: minimum follower count user can have
            # min_following: minimum following count user can have
            # min_posts: minimum amount of posts user can have
            # max_posts: maximum amount of posts user can have
    session.set_relationship_bounds(enabled=True,
                    potency_ratio=1.34,
                    delimit_by_numbers=True,
                    max_followers=20000,
                    max_following=4000,
                        min_followers=4000,
                        min_following=800,
                        min_posts=20,
                max_posts=1000)
    # 4. session.like_by_tags -&amp;gt;
    # Establish a liked_photos variable that will return the information liked pictures data
    # created by the session.like_by_tags method, this method will only execute if the post falls
    # within the set_relationship_bounds set above
        # Arguments:
        # amount: Amount of photos set to like for each hashtag passed
        # daysold: How many days old the post is allowed to be
        # max_pic: The maximum amount back the picture is allowed to be found on the users profile (i.e. The 20th most recent pic)
    liked_photos = session.like_by_tags([hashtag1, hashtag2], amount=10)
    # 5. Return liked photos that the method above finds based on the arguments passed
    return "CONTENT: ", liked_photos

    # 6. Now that you have the returned data, you can see what trends are found in the media post
    # (such as trends found in captions, content type, etc.)

run_ig_scraping_session(, , "Fashion", "Beauty")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've run your script, your response should look something like this, keep in mind the responses can get lengthy, so make sure to take advantage of the amount argument passed in above :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;InstaPy Version: 0.6.15
 ._.  ._.  ._.  ._.  ._.  ._.  ._.  ._.  ._.
Workspace in use: "/Users/user1/InstaPy"
OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
INFO [2022-01-17 15:46:47] [&amp;lt;Your Username&amp;gt;]  Session started!
oooooooooooooooooooooooooooooooooooooooooooooooooooooo
INFO [2022-01-17 15:46:47] [&amp;lt;Your Username&amp;gt;]  -- Connection Checklist [1/2] (Internet Connection Status)
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Internet Connection Status: ok
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Current IP is "71.127.218.114" and it's from "United States/US"
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  -- Connection Checklist [2/2] (Hide Selenium Extension)
INFO [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - window.navigator.webdriver response: True
WARNING [2022-01-17 15:46:48] [&amp;lt;Your Username&amp;gt;]  - Hide Selenium Extension: error
INFO [2022-01-17 15:46:55] [&amp;lt;Your Username&amp;gt;]  - Cookie file for user '&amp;lt;Your Username&amp;gt;' loaded...
................................................................
INFO [2022-01-17 15:47:21] [&amp;lt;Your Username&amp;gt;]  Logged in successfully!
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
INFO [2022-01-17 15:47:21] [&amp;lt;Your Username&amp;gt;]  Saving account progress...
INFO [2022-01-17 15:47:25] [&amp;lt;Your Username&amp;gt;]  Tag [1/2]
INFO [2022-01-17 15:47:25] [&amp;lt;Your Username&amp;gt;]  --&amp;gt; b'fashion'
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:359: UserWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  warnings.warn("find_elements_by_* commands are deprecated. Please use find_elements() instead")
INFO [2022-01-17 15:47:36] [&amp;lt;Your Username&amp;gt;]  desired amount: 11  |  top posts [disabled]: 9  |  possible posts: 1043222855
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:426: UserWarning: find_elements_by_* commands are deprecated. Please use find_elements() instead
  warnings.warn("find_elements_by_* commands are deprecated. Please use find_elements() instead")
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:393: UserWarning: find_element_by_* commands are deprecated. Please use find_element() instead
  warnings.warn("find_element_by_* commands are deprecated. Please use find_element() instead")
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:38] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Photo
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Carousel
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Verifying media type: ('Photo', 'Carousel', 'Video', 'IGTV', 'Clip')
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Found media type: Carousel - Video - IGTV
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Post category: Video
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [1/https://www.instagram.com/p/CY2Dd3HJ5zz/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [2/https://www.instagram.com/p/CY19bPxr2k4/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [3/https://www.instagram.com/p/CY2A408lT3n/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [4/https://www.instagram.com/p/CY2CVJSNlwk/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [5/https://www.instagram.com/p/CY183WwosJb/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [6/https://www.instagram.com/p/CY1_gwktViY/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [7/https://www.instagram.com/p/CY2CGKLOdUs/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [8/https://www.instagram.com/p/CY2B5_ArZnZ/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [9/https://www.instagram.com/p/CY2BPldKhZL/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [10/https://www.instagram.com/p/CY2Fp5SqaGB/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [11/https://www.instagram.com/p/CY2FqIUM1SD/]
INFO [2022-01-17 15:47:39] [&amp;lt;Your Username&amp;gt;]  Links retrieved:: [12/https://www.instagram.com/p/CY2Fpo6q6KF/]
INFO [2022-01-17 15:47:44] [&amp;lt;Your Username&amp;gt;]  Like# [1/11]
INFO [2022-01-17 15:47:44] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2Fp5SqaGB/
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Image from: b'estela_fashionmodel'
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Image link: b'https://www.instagram.com/p/CY2Fp5SqaGB/'
INFO [2022-01-17 15:47:47] [&amp;lt;Your Username&amp;gt;]  Description: b'Thank you!\xf0\x9f\x98\x8d @littleattitudeofficial \xf0\x9f\x98\x8d \n\nHow beautiful this sports set, its fantastic, cozy and above all cotton! \n\nYou can find this and many other clothes only at @littleattitudeofficial !\xf0\x9f\xa4\xa9\n\n#gift #collab #amazing #beautiful #model #modellife #modeling #fashion #fashionstyle #fashionista #fashionblogger #fashionable #love #life #live #blogger @estela_fashionmodel \xf0\x9f\xa4\x8d@littleattitudeofficial \xf0\x9f\x92\x9a'
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  User: 'estela_fashionmodel'  |&amp;gt; followers: 26790  |&amp;gt; following: 849  |&amp;gt; relationship ratio: 31.55
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  User 'estela_fashionmodel's followers count exceeds maximum limit  ~skipping user

INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  Like# [2/11]
INFO [2022-01-17 15:47:51] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2FqIUM1SD/
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Image from: b'sagavai_black'
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Image link: b'https://www.instagram.com/p/CY2FqIUM1SD/'
INFO [2022-01-17 15:47:55] [&amp;lt;Your Username&amp;gt;]  Description: b'\xd0\x9f\xd1\x83\xd1\x81\xd1\x82\xd1\x8c \xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd1\x82\xd1\x83\xd1\x82!!\nme #love #instadaily #selfie #photooftheday #fun #followme #smile #summer #swag #instalike #igers #tbt #picoftheday #follow4follow #fashion #like4like #follow #instagood #amazing #cute #friends #bestoftheday #happy #instatag #l4l #beautiful #likeforlike#sagavai_blak #'
INFO [2022-01-17 15:47:59] [&amp;lt;Your Username&amp;gt;]  User: 'sagavai_black'  |&amp;gt; followers: 5481  |&amp;gt; following: 125  |&amp;gt; relationship ratio: 43.84
INFO [2022-01-17 15:47:59] [&amp;lt;Your Username&amp;gt;]  User 'sagavai_black's following count is less than minimum limit  ~skipping user
INFO [2022-01-17 15:48:10] [&amp;lt;Your Username&amp;gt;]  https://www.instagram.com/p/CY2FqDWhwkI/
INFO [2022-01-17 15:48:18] [&amp;lt;Your Username&amp;gt;]  Image from: b'mr_amaan967'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the response snippet is quite long, let's break down what data is received back.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;InstaPy confirms a successful Login attempt to Instagram with the given credentials&lt;/li&gt;
&lt;li&gt;11 posts are retrieved based on the hashtags passed through the like_by_tags method. You may ask why 11, when we specified 5 for each hashtag, well that's because InstaPy likes the first post from the Explore page.&lt;/li&gt;
&lt;li&gt;The links to those 11 posts&lt;/li&gt;
&lt;li&gt;A description of each post including the caption, hashtags used, tagged_users, location, and more depending on what the user chooses to expose.&lt;/li&gt;
&lt;li&gt;You also may notice that some scraped posts respond with "Unavailable Page". This can be due to several reasons, but it just may mean the user is private.&lt;/li&gt;
&lt;li&gt;For this example, I did not include all 11 posts in the response, but rather only the first four to avoid writing an entire response epic. 📖
Congrats on making a Python Instagram scraping bot! 🎉 🤖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scrape Instagram with SocialScrape ⬇&lt;/strong&gt;&lt;br&gt;
Remember how at the beginning of this article, we mentioned that there is in fact, an incredibly easy way to scrape Instagram? Well, let's loop back around to that again, and talk about SocialScrape!&lt;/p&gt;

&lt;p&gt;Although you may have just made an awesome IG scraping bot of your own, chances are you are going to have to make a lot of repairs along the way. Instagram is a stickler about scraping and does whatever it can to prevent it. If not cautious, the account could be blocked from performing certain actions temporarily, or you could even be banned forever! 🚩 This is why it discouraged to perform scraping on an important/personal account! But SocialScrape fixes that all for you. ✅&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://socialscrape.com/"&gt;SocialScrape&lt;/a&gt; allows you to paste in a user's "@" handle, and with just one execution call, all the data is ready for you to use. That's amazing!&lt;/li&gt;
&lt;li&gt;If that's not enough, SocialScrape also handles the burden of rotating proxies for you.&lt;/li&gt;
&lt;li&gt;SocialScrape includes numerous API endpoints that allow you to get all the information you need from any user.
And as mentioned before, the first 100 calls are free!
Check out the SocialScrape &lt;a href="https://docs.socialscrape.com/docs#mag-right-sample-response"&gt;getting started docs&lt;/a&gt; to learn more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, what are you waiting for? Instagram data is awaiting to be scraped.&lt;/p&gt;

</description>
      <category>webscraping</category>
      <category>instagram</category>
      <category>python</category>
      <category>bots</category>
    </item>
    <item>
      <title>Semicolon or No semicolon?</title>
      <author>Sumit Kumar Surana</author>
      <pubDate>Sun, 23 Jan 2022 17:20:40 +0000</pubDate>
      <link>https://dev.to/ssurana2/semicolon-or-no-semicolon-2d7h</link>
      <guid>https://dev.to/ssurana2/semicolon-or-no-semicolon-2d7h</guid>
      <description>&lt;p&gt;I have 10 years of experience being a JavaScript developer and I forget that semicolon is optional. Adding a semicolon in the end is a simple instinct for me.&lt;/p&gt;

&lt;p&gt;From my point of view, if you are using the right tools like jshint or jslint to catch the syntax errors before pushing the code to your repository, it doesn't matter if you use a semicolon or not. &lt;/p&gt;

&lt;p&gt;I use semicolons in the end because I am tuned that way while working with professionals or mentors who end the statement with a semicolon. I also advocate using semicolons in the end because of the following reasons.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-semicolon-assertion"&gt;
  &lt;/a&gt;
  Automatic semicolon assertion
&lt;/h3&gt;

&lt;p&gt;I won’t spend too much time explaining about it since it is really well articulated in ecma specs &lt;a href="https://tc39.es/ecma262/#sec-automatic-semicolon-insertion"&gt;https://tc39.es/ecma262/#sec-automatic-semicolon-insertion&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To put it simply, it is better to handle the semicolon ourselves than relying on a compiler/minifier which has a chance of being unpredictable. Especially, when you are using ‘[‘ or ‘(‘ or binary operator or a regex in the next line without ending the previous statement with a semicolon. Refer &lt;a href="https://tc39.es/ecma262/#sec-asi-interesting-cases-in-statement-lists"&gt;https://tc39.es/ecma262/#sec-asi-interesting-cases-in-statement-lists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prefer lesser risk on my production code and I believe in the statement that if something can go wrong it will definitely go wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  Consistency
&lt;/h3&gt;

&lt;p&gt;Most developers nowadays are full stack developers who have dabbled in one or more backend languages. And most of the popular backend languages (apart from &lt;a href="https://www.python.org"&gt;python&lt;/a&gt; that I know of) have statements ending with semicolon. &lt;/p&gt;

&lt;p&gt;So when a developer tends to switch between other programming languages and JavaScript they don't have to unlearn the idea of not putting the semicolon in the end. Remember it is optional. So no offense if someone puts it or omits it. But the idea is to keep a single standard and consistency so that it doesn't cause any confusion among team members on what to follow. So make sure you choose one or else brace yourself for resolving lots of ideology clashes among the team members like the discussion going on at &lt;a href="https://davidwalsh.name/javascript-semicolons"&gt;https://davidwalsh.name/javascript-semicolons&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Logos for Reco Fans! | Reco PC Server</title>
      <author>Arvinth Krishna</author>
      <pubDate>Sun, 23 Jan 2022 17:13:09 +0000</pubDate>
      <link>https://dev.to/arvinthkrishna/logos-for-reco-fans-reco-pc-server-3bl7</link>
      <guid>https://dev.to/arvinthkrishna/logos-for-reco-fans-reco-pc-server-3bl7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#reco-pc-server-logo"&gt;
  &lt;/a&gt;
  Reco PC Server Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lamm3k3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lamm3k3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reco-pc-server-mobile-logo"&gt;
  &lt;/a&gt;
  Reco PC Server - Mobile Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5hDIdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_Mobile_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server - Mobile Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sw5hDIdZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_Mobile_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reco-pc-server-commander-logo"&gt;
  &lt;/a&gt;
  Reco PC Server - Commander Logo
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88bGTyoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_PC_Server_Desktop_logo.png" class="article-body-image-wrapper"&gt;&lt;img alt="Reco PC Server - Commander Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--88bGTyoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Arvinth-Krishna/Reco-PC-Server/main/reco_logos/Reco_PC_Server_Desktop_logo.png" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-reco-pc-server"&gt;
  &lt;/a&gt;
  What is Reco PC Server?
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Reco PC Server&lt;/strong&gt; is a cross platform PC Controller Discord Bot which helps you to control your system easily &amp;amp; it's written in Python discord.py.&lt;/p&gt;

&lt;p&gt;Using Reco you can easily control your computer remotely and have it do from simple tasks such as shutdown, sleep, and lock to opening a website or executing powershell commands. Currently Reco has more than 35 commands. &lt;a href="https://dev.to/arvinthkrishna/control-your-pc-using-discord-reco-pc-server-3pgd"&gt;To know more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>logo</category>
      <category>reco</category>
      <category>discord</category>
      <category>python</category>
    </item>
    <item>
      <title>Interoperability in Julia</title>
      <author>Ifihan Olusheye</author>
      <pubDate>Sun, 23 Jan 2022 16:20:54 +0000</pubDate>
      <link>https://dev.to/ifihan/interoperability-in-julia-3im9</link>
      <guid>https://dev.to/ifihan/interoperability-in-julia-3im9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;One of the features Julia has to offer is Interoperability. Language interoperability could be defined as the ability for two or more languages to interact or communicate for effective data transmission in a system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S:&lt;/strong&gt; I wrote on &lt;a href="https://ifihan.hashnode.dev/language-interoperability"&gt;Interoperability&lt;/a&gt;; check it out!&lt;/p&gt;

&lt;p&gt;With the help of various packages, Julia can call several programming languages. &lt;a href="https://github.com/JuliaInterop"&gt;JuliaInterop&lt;/a&gt; is a GitHub organization that has created several packages that can be used to integrate Julia with different languages. In this article, we will be looking at integration with Python, R, and C++.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-python"&gt;
  &lt;/a&gt;
  1. Python
&lt;/h3&gt;

&lt;p&gt;It is possible to call Python from Julia using &lt;a href="https://github.com/JuliaPy/PyCall.jl"&gt;PyCall&lt;/a&gt;. Then to install PyCall, run the command in the Julia REPL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("PyCall")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PyCall will download the Miniconda installer and create a separated conda environment just for Julia all by itself.&lt;/p&gt;

&lt;p&gt;An example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; usig PyCall
&amp;gt;&amp;gt;&amp;gt; math = pyimport("math")
&amp;gt;&amp;gt;&amp;gt; math.sin(math.pi / 4) # returns ≈ 1/√2 = 0.70710678...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-r"&gt;
  &lt;/a&gt;
  2. R
&lt;/h3&gt;

&lt;p&gt;To inter-operate Julia with the R language, the &lt;a href="https://github.com/JuliaInterop/RCall.jl"&gt;RCall&lt;/a&gt; package is used. Run the following commands on the Julia REPL&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("RCall")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will automatically install R using Conda if R is not detected. For further customization, check out the &lt;a href="https://juliainterop.github.io/RCall.jl/stable/installation/"&gt;documentation&lt;/a&gt; page &lt;br&gt;
Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; using RCall # This will initialize the R process in the background
julia&amp;gt; num = 7
julia&amp;gt; print(num)
7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Macros transfer can also occur between variables in the R and Julia environments. The copied variable will have the same name as the original.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;julia&amp;gt; x = 57
1

julia&amp;gt; @rput x
57
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More methods can be found on the official &lt;a href="https://juliainterop.github.io/RCall.jl/stable/"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-c"&gt;
  &lt;/a&gt;
  3. C++
&lt;/h3&gt;

&lt;p&gt;It is possible to call C++ into Julia with the package &lt;a href="https://github.com/JuliaInterop/Cxx.jl"&gt;Cxx&lt;/a&gt;. To install the &lt;code&gt;Cxx&lt;/code&gt; package, run the following command on the Julia REPL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Pkg
Pkg.add("Cxx")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For further installation guides (like system requirements), visit the repository &lt;a href="https://github.com/JuliaInterop/Cxx.jl"&gt;README&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;A simple example of embedding a C++ function in Julia&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# include headers
julia&amp;gt; using Cxx
julia&amp;gt; cxx""" #include&amp;lt;iostream&amp;gt; """

# Declare the function
julia&amp;gt; cxx"""
         void mycppfunction() {
            int z = 0;
            int y = 5;
            int x = 10;
            z = x*y + 2;
            std::cout &amp;lt;&amp;lt; "The number is " &amp;lt;&amp;lt; z &amp;lt;&amp;lt; std::endl;
         }
      """
# Convert C++ to Julia function
julia&amp;gt; julia_function() = @cxx mycppfunction()
julia_function (generic function with 1 method)

# Run the function
julia&amp;gt; julia_function()
The number is 52
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;N.B:&lt;/strong&gt; Most of the examples were extracted from the official repository pages of these packages. Check out &lt;a href="https://github.com/JuliaInterop"&gt;Juliainterop&lt;/a&gt; for more examples and guides on other languages that can be called into Julia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;It has been seen how possible it is to call some programming languages from Julia. This also establishes the fact that Julia is a friendly language and can  be the go-to when it comes to building a system with multiple languages (Interoperability).&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>julialang</category>
    </item>
    <item>
      <title>Control your PC using Discord | Reco PC Server</title>
      <author>Arvinth Krishna</author>
      <pubDate>Sun, 23 Jan 2022 16:05:15 +0000</pubDate>
      <link>https://dev.to/arvinthkrishna/control-your-pc-using-discord-reco-pc-server-3pgd</link>
      <guid>https://dev.to/arvinthkrishna/control-your-pc-using-discord-reco-pc-server-3pgd</guid>
      <description>&lt;p&gt;&lt;strong&gt;Reco PC Server&lt;/strong&gt; is a cross platform PC Controller Discord Bot which helps you to control your system easily &amp;amp; it's written in Python discord.py.&lt;/p&gt;

&lt;p&gt;Using Reco you can easily control your computer remotely and have it do from simple tasks such as shutdown, sleep, and lock to opening a website or executing powershell commands. Currently Reco has more than 35 commands.&lt;/p&gt;

&lt;p&gt;Reco PC Server is a self hosted bot, which means that you have to run the bot on your computer - the machine you want to control via discord commands.&lt;/p&gt;

&lt;p&gt;Installing Reco PC Server is an easy 3 minute process. &lt;a href="https://www.youtube.com/playlist?list=PLwfmXAeVRyvkiFj_kyodNsd2uUa-0yrAG"&gt;🎬 YouTube - Reco Playlist&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reco-commands"&gt;
  &lt;/a&gt;
  Reco Commands:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-abort--"&gt;Abort&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-appquitter--"&gt;App Quitter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-battery-level--"&gt;Battery Level&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-battery-report-generator--"&gt;Battery Report Generator&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-camera--"&gt;Camera&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-cmd--"&gt;Cmd&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-clip--"&gt;Clip&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-echo--"&gt;Echo&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-file--"&gt;File&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-help--"&gt;Help&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-hibernate--"&gt;Hibernate&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-launch--"&gt;Launch&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-lock--"&gt;Lock&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-log--"&gt;Log&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-media--"&gt;Media&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-music--"&gt;Music&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-notification--"&gt;Notification&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-powershell--"&gt;Powershell&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-printer--"&gt;Printer&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-processes--"&gt;Processes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-reco--"&gt;Reco&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-restart--"&gt;Restart&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-say--"&gt;Say&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-screenshot--"&gt;Screenshot&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-google-search--"&gt;Search (Google)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-shutdown--"&gt;Shutdown&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-logoff--"&gt;SignOut (LogOff)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-sleep--"&gt;Sleep&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-speedtest--"&gt;Speedtest&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-system-info--"&gt;System Info&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-url-launcher--"&gt;URL Launcher&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-version-checker--"&gt;Version Checker&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-Wake--"&gt;Wake&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-Wlan-Signal--"&gt;Wlan Signal&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-whatsapp--"&gt;WhatsApp&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#-youtube-search--"&gt;YouTube (search)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation-%E2%86%9F"&gt;
  &lt;/a&gt;
  Installation:  &lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server#quick-jumps"&gt;↟&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#text-instructions"&gt;
  &lt;/a&gt;
  Text Instructions:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Download &amp;amp; Install Python&lt;/strong&gt; - Remember: Tick the Add to path checkBox during installation.
-&amp;gt; &lt;a href="https://www.python.org/"&gt;https://www.python.org/&lt;/a&gt;   (Python Version - &lt;a href="https://www.python.org/downloads/release/python-398/"&gt;3.9.8&lt;/a&gt; recommended)&lt;/li&gt;
&lt;li&gt;Create a bot and get its &lt;strong&gt;token&lt;/strong&gt; by following these instructions: &lt;a href="https://youtu.be/-m-Z7Wav-fM"&gt;https://youtu.be/-m-Z7Wav-fM&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;⚠ &lt;strong&gt;Don't forget to turn on these &lt;a href="https://user-images.githubusercontent.com/49812701/149883812-53643ba8-df84-47ee-89e5-cf3177202b7f.png"&gt;three switches&lt;/a&gt;&lt;/strong&gt; in &lt;a href="https://discord.com/developers/applications"&gt;Discord Developer Portal&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Arvinth-Krishna/Reco-PC-Server/releases/download/v7.0/Reco-PC-Server-main.zip"&gt;Download&lt;/a&gt; the Reco PC Server Repository, &lt;strong&gt;run setup.bat on Windows&lt;/strong&gt; or &lt;strong&gt;setup.sh on Linux&lt;/strong&gt; and put your Bot Token in the newly created &lt;strong&gt;.env file&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Get &lt;strong&gt;Webhook URL&lt;/strong&gt; from your Channel and add it in your Webhook tab in your &lt;a href="https://play.google.com/store/apps/details?id=com.gak.reco"&gt;Reco&lt;/a&gt; mobile App. &lt;a href="https://www.youtube.com/watch?v=2Fcvg-Bh7Oo&amp;amp;t=1s"&gt;https://www.youtube.com/watch?v=2Fcvg-Bh7Oo&amp;amp;t=1s&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Launch &lt;strong&gt;reco.pyw&lt;/strong&gt;, right click on the system tray icon and hit Connect to invite Reco Pc Server to your Discord server.&lt;/li&gt;
&lt;li&gt;Enjoy!🥳&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=HbqW0zCIZYg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFO49hi5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://j.gifs.com/J8qwWg.gif" alt="Video Tutorial" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discord</category>
      <category>python</category>
      <category>flutter</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Liman veya Ansible uzak yönetim için WinRM açma</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sun, 23 Jan 2022 16:03:26 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-veya-ansible-uzak-yonetim-icin-winrm-acma-3903</link>
      <guid>https://dev.to/aciklab/liman-veya-ansible-uzak-yonetim-icin-winrm-acma-3903</guid>
      <description>&lt;p&gt;Liman MYS ve Ansible gibi sistemler uzaktan Windows sunuculara erişim için WinRM gibi protokollere ihtiyaç duymaktadır. Windows'un güncel sunucuları kendi içerisinde OpenSSH sunucu servisini de seçmeli olarak sunabilmesine rağmen hala WinRM'in tercih edildiği de görülmekte.&lt;/p&gt;

&lt;p&gt;Aşağıdaki çalışmada WinRM'i SSL'li bir şekilde 5986 portu üzerinden kullanılabilmesi için yapılması gerekenler gösterilecektir.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#i%CC%87lgili-beti%C4%9Fin-windows-sunucuna-indirilmesi-ve-kurulmas%C4%B1"&gt;
  &lt;/a&gt;
  İlgili betiğin Windows sunucuna indirilmesi ve kurulması
&lt;/h1&gt;

&lt;p&gt;İlgili betiği Windows sunucusuna indirmek için aşağıdaki komutu &lt;strong&gt;yetkili kullanıcı ile açılmış&lt;/strong&gt; &lt;em&gt;powershell&lt;/em&gt; veya &lt;em&gt;windows terminal&lt;/em&gt; üzerinden çalıştırmak gerekiyor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;invoke-webrequest -Uri https://liman.dev/winrm -Outfile winrm.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra yetki edinmek için aşağıdaki komutu uygulamanız gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra güvenlik gereği sadece belirli IP'den WinRM isteğinde bulunacaksanız aşağıdaki komutu kullanmanız gerekmektedir. Eğer böyle bir kısıt bulunmuyorsa Instance parametresini kullanmayabilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.\winrm.ps1 -Instance "IP_ADRESI" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu adımdan sonra belirttiğiniz IP Adresinden, 5986 portunu kullanarak SSL'li WinRM sorguları atabilirsiniz.&lt;/p&gt;

</description>
      <category>liman</category>
      <category>ansible</category>
      <category>winrm</category>
    </item>
    <item>
      <title>Share Text Across Near 💻Devices📱 using this website 🔥</title>
      <author>Rajesh Joshi</author>
      <pubDate>Sun, 23 Jan 2022 15:25:22 +0000</pubDate>
      <link>https://dev.to/rajeshj3/share-text-across-near-devices-using-this-website-23hh</link>
      <guid>https://dev.to/rajeshj3/share-text-across-near-devices-using-this-website-23hh</guid>
      <description>&lt;p&gt;Sharing Text data across near devices has always been a headache.&lt;/p&gt;

&lt;p&gt;Some conventional methods to share text data are, Using native cross-platform applications (eg. WhatsApp, WeChat, Telegram, etc.). Or, Using Email Services (Gmail, Yahoo Mail, etc.)&lt;/p&gt;

&lt;p&gt;All such conventional methods needs either installation of Native Applications or Bulky Sites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://temp-share.ml"&gt;&lt;strong&gt;TEMP-SHARE&lt;/strong&gt;&lt;/a&gt;, a fast 🚀, reliable 💪 and secure 🛡️ web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TEMP-SHARE&lt;/strong&gt; meets all your requirements of sharing text data across near devices-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlimited Text Length 🗒️&lt;/p&gt;

&lt;p&gt;Secure 4-characters alpha-numeric random password 🔑&lt;/p&gt;

&lt;p&gt;Your Custom Password 😎&lt;/p&gt;

&lt;p&gt;Max Data Persistence Life of 10 minutes 🤩&lt;/p&gt;

&lt;p&gt;One Time Read Only 🤫&lt;/p&gt;

&lt;p&gt;Most important, Dark/Light Themes 🌒&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Step. 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just visit &lt;a href="https://temp-share.ml"&gt;temp-share.ml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed_zynL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1ekn2a19q1eb8xj4f4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed_zynL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1ekn2a19q1eb8xj4f4r.png" alt="temp-share home page" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Step. 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Enter the Text you want to share, and hit &lt;strong&gt;SUBMIT&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;STEP. 3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'll get a 4-characters alpha-numeric random password 🔑&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OzjkGqfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzzbe2la56zgqo01vhtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OzjkGqfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzzbe2la56zgqo01vhtb.png" alt="Submitted Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Step. 4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Open the same website (&lt;a href="https://temp-share.ml"&gt;temp-share.ml&lt;/a&gt;) on another device and Paste the &lt;strong&gt;passcode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOvyZ65l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/978jhckd7g8zp6sb9od3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOvyZ65l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/978jhckd7g8zp6sb9od3.png" alt="entered passcode" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Step. 5&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just hit &lt;strong&gt;GET TEXT&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EL9jQics--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e84se614rm07hc50oia6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EL9jQics--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e84se614rm07hc50oia6.png" alt="GET TEXT" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you go, you have the text on your other device.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As, we checked &lt;strong&gt;One Time View&lt;/strong&gt;, fetching the text again will return an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--roBpTAXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak08bdyqxkyx8hqjkfwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--roBpTAXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ak08bdyqxkyx8hqjkfwe.png" alt="Error" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Other than this, You can also set your custom password 🔑&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#live"&gt;
  &lt;/a&gt;
  Live ✨
&lt;/h2&gt;

&lt;p&gt;TEMP-SHARE is currently Live at &lt;a href="https://temp-share.ml"&gt;temp-share.ml&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution ✨
&lt;/h2&gt;

&lt;p&gt;TEMP-SHARE is &lt;strong&gt;not Open-Souce yet&lt;/strong&gt;. But, if you want us to Open the Source, please drop a comment explaining why you are interested.&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick introduction to TEMP-SHARE. If so, then please don't forget to drop a Like ❤️&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; 🤩, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! 😃💻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Game Programming Fundamentals</title>
      <author>Fatih Küçükkarakurt</author>
      <pubDate>Sun, 23 Jan 2022 15:24:14 +0000</pubDate>
      <link>https://dev.to/fkkarakurt/game-programming-fundamentals-5cil</link>
      <guid>https://dev.to/fkkarakurt/game-programming-fundamentals-5cil</guid>
      <description>&lt;p&gt;If you are looking for an answer to the question of &lt;strong&gt;How to Develop a Game&lt;/strong&gt;, let's think together. First of all, we are not going to talk about the need to learn a software language or game engines to program games. In fact, the game industry is a field that includes many different industries such as mathematics, art, psychology and even cinema. In other words, it is never enough to master game engines and learn a software language. So what do we need to know? Let's see together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-mechanics"&gt;
  &lt;/a&gt;
  Game Mechanics
&lt;/h2&gt;

&lt;p&gt;One of the biggest reasons why games reach huge audiences today is Game Mechanics. In order to better understand the game mechanics, we have to think of a system. There are various sub-parts that this system controls. To understand this better, you can examine the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBgF4pwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vg0m0uoaqr5htpe8cnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBgF4pwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2vg0m0uoaqr5htpe8cnm.png" alt="Game Mechanics" width="746" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#system"&gt;
  &lt;/a&gt;
  System
&lt;/h2&gt;

&lt;p&gt;As you can see in the diagram above, the system takes on the following tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Runs the load and save part to load the files.&lt;/li&gt;
&lt;li&gt;It then enables the intro animation to run using the audio and graphic parts.&lt;/li&gt;
&lt;li&gt;During the use of the game interface, user inputs ensure that the graphics and sound parts work in harmony. &lt;/li&gt;
&lt;li&gt;Finally, it ensures that the graphics, sound, user input, artificial intelligence and network parts work in harmony in the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resource"&gt;
  &lt;/a&gt;
  Resource
&lt;/h2&gt;

&lt;p&gt;The Resource describes the necessary files for the game located on the hard disk.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These files contain configuration files that describe the configuration in which the game will run by default.&lt;/li&gt;
&lt;li&gt;If available, it contains the video file for the intro that will be played when the game first starts.&lt;/li&gt;
&lt;li&gt;Contains files where the user gets information about the game before the game.&lt;/li&gt;
&lt;li&gt;It contains the files containing the graphics, music and chapter information in the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#game-model"&gt;
  &lt;/a&gt;
  Game Model
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It is the state of the game graphics, music and text files loaded into memory from the resource in memory.&lt;/li&gt;
&lt;li&gt;Image files are stored in memory or in the texture memory of the video card.&lt;/li&gt;
&lt;li&gt;Section, score, etc. information is kept in variables and data structures.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upload-and-save"&gt;
  &lt;/a&gt;
  Upload and Save
&lt;/h2&gt;

&lt;p&gt;This part is the particle that takes the graphics, music and other information from the source and puts it into the memory (game model) and undertakes the process of saving it back to the source in case of new score situations or when the game is recorded.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upload:&lt;/strong&gt; Configuration files, Chapter Files, Image Files, Music and Sound Files, 3D Model Files, Video Files, Help Files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Save:&lt;/strong&gt; Score files and other documents to be saved during the game&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graphics"&gt;
  &lt;/a&gt;
  Graphics
&lt;/h2&gt;

&lt;p&gt;This is the most important and hardest part of the game in my opinion. Because it is impossible to have a game without visuals. This part is responsible for painting the screen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Playing the Video&lt;/li&gt;
&lt;li&gt;Displaying the Game Interface&lt;/li&gt;
&lt;li&gt;Viewing Score, Help and Configuration Information&lt;/li&gt;
&lt;li&gt;Displaying the Game's Own Graphics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-inputs"&gt;
  &lt;/a&gt;
  User Inputs
&lt;/h2&gt;

&lt;p&gt;A game without interaction would be like a movie. User Interaction is definitely one of the sine qua non of game mechanics that connects users to the game. The system is in constant interaction with the user. Keyboard, mouse etc. this is where we're going to use the equipment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the Game Interface&lt;/li&gt;
&lt;li&gt;Reviewing Help Files&lt;/li&gt;
&lt;li&gt;Reviewing Score Files&lt;/li&gt;
&lt;li&gt;Configuring (System and Game Related)&lt;/li&gt;
&lt;li&gt;Controlling the user's character in the game&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sound-and-music"&gt;
  &lt;/a&gt;
  Sound and Music
&lt;/h2&gt;

&lt;p&gt;If you want to understand the importance of sound and music, please turn off the sound while playing games. You will notice that the value of the game drops when there is no sound. We can say that the value of the sound is as valuable as the graphics of the game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Music playing in the background&lt;/li&gt;
&lt;li&gt;Sound effects for collisions and movements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#artificial-intelligence-ai"&gt;
  &lt;/a&gt;
  Artificial intelligence (AI)
&lt;/h2&gt;

&lt;p&gt;Let's consider the intelligence level of the enemies in the game. The more humanoid they look, the more intelligent the behavior and the more fun the game will be. It doesn't just have to be the enemy. In an open world game, citizens passing by look at their wristwatches, wipe the sweat on their foreheads in sunny weather, give way to you, even argue with you, attack you when you treat animals badly, etc. All of them can go into the subject of artificial intelligence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network-listening-and-sending"&gt;
  &lt;/a&gt;
  Network Listening and Sending
&lt;/h2&gt;

&lt;p&gt;This part is the part that allows the game to be played by more than one person. In this part, the parties send information to the game server and the information received by listening to the server is updated in the game. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Establishing the Session:&lt;/strong&gt; The players who will participate in the game agree on which protocol and on which port they will communicate at first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packet Delivery:&lt;/strong&gt; The moves made in the game are sent to the server in packets. Then the server distributes it to all parties after making the necessary change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package Pickup:&lt;/strong&gt; Simultaneously, the parties are aware of the changes made by listening to the server and reflect this to the game.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h1&gt;

&lt;p&gt;Computer game lovers always want better graphics, music, physics and better artificial intelligence. For all this to happen, one of two conditions must be met.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;software optimization should be done, new algorithms should be found,&lt;/li&gt;
&lt;li&gt;appropriate equipment should be used and the processing speed should be increased.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today, new algorithms and code optimization progress much slower than the speed at which hardware develops. Now, instead of new algorithms, the software, focuses on issues such as reusability, code openness, code security (encapsulation). The hardware is trying to increase the processor speed and memory capacity as much as possible for these new requests.&lt;/p&gt;

&lt;p&gt;In this section, we can talk about many different hardware such as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;graphics cards,&lt;/li&gt;
&lt;li&gt;processor,&lt;/li&gt;
&lt;li&gt;motherboard,&lt;/li&gt;
&lt;li&gt;sound cards,&lt;/li&gt;
&lt;li&gt;monitors, speaker and new input devices etc…&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#programming-language"&gt;
  &lt;/a&gt;
  Programming Language
&lt;/h1&gt;

&lt;p&gt;Programming language is a computer language that offers the opportunity to develop commands and software in a certain standard form. Thanks to programming languages, it is possible to control what kind of output a computer can give in which situation. In short, computers and humans can communicate efficiently thanks to programming languages.&lt;/p&gt;

&lt;p&gt;Since our topic is game development, we will focus on this subject. Depending on what you want to do and create, you can develop games with all programming languages. There will be those who insist you learn C++. This is absolutely not true. You can make great games with JavaScript, C#, Python or even C. A choice-based adventure game that only works on the console screen can be great. But if you want to make games that are more professional and reach more people, please keep reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;Since C++ is a high-level language that will teach you the basics of object-oriented programming, it's a good idea to learn it. It is also the language used to create console and Windows games. Also, it uses OpenGL or a similar framework (If you continue reading the guide, I will give a detailed explanation about OpenGL). &lt;/p&gt;

&lt;p&gt;C++ is a fast compiling programming language. You also get a lot of say in memory management. It has extensive libraries useful for designing and powering complex graphics. There's a lot of literature for you to improve on, because it's been the programmer's language of choice for decades, and you'll find online communities ready and willing to answer your questions.&lt;/p&gt;

&lt;p&gt;It would be a lie if we said that C++ is easy to learn. It is difficult to learn compared to other programming languages. But it can be useful not only because C++ games are easy to distribute on various platforms, but also because if you know C++ you can quickly learn C# and other object-oriented languages. Both C++ and C# are only two of the most actively used programming languages today.&lt;/p&gt;

&lt;p&gt;To sum it up, learning C++ is a good choice if you want to create games from scratch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%E2%99%AF"&gt;
  &lt;/a&gt;
  C♯
&lt;/h2&gt;

&lt;p&gt;The benefit of C# lies in the XNA framework. This is a set of tools and workspaces by Microsoft that are particularly suitable for games on Xbox or Windows platforms. &lt;/p&gt;

&lt;p&gt;If you compare C++ and C#, you might consider this example. C++ is like a manual transmission car. C# is like an automatic transmission car. Let's consider the Unity game engine. If you use the Unity game engine, you have to code the scripts in C#. However, the core of this game engine is C++ code.&lt;/p&gt;

&lt;p&gt;The platform you target, the game you want to make, the game engine you will use, etc. factors will affect the language you choose. But yes learning C# would be a great idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  JAVA
&lt;/h2&gt;

&lt;p&gt;Game programmers often use Java because Java supports multithreading and sockets. Multithreading uses less memory and makes the most of available CPU without blocking the user while intensive processes are running in the background. Sockets help in the creation of multiplayer games. Also, Java runs in a virtual machine so the game is easier to deploy.&lt;/p&gt;

&lt;p&gt;Also, if you want to develop applications and games for Android platforms, Java would be a great option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;Making games for browsers is very different from making games for consoles. If you need 3D graphics or complex graphics and a content management system, you will also need SVG or WebGL.&lt;/p&gt;

&lt;p&gt;Flash animation using the programming language ActionScript was common for browser games in the past, but Flash is finished.&lt;/p&gt;

&lt;p&gt;Unity 3D Engine accepts Javascript. A WebGL-enabled Java engine such as &lt;a href="https://playcanvas.com/"&gt;PlayCanvas&lt;/a&gt;, developed at MIT, allows users to simultaneously work in the game with an online browser and publish to multiple platforms.&lt;/p&gt;

&lt;p&gt;Moreover, there are great game engines that you can use JavaScript. To give an example of these, we can definitely say &lt;a href="https://phaser.io/"&gt;PhaserJS&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apis"&gt;
  &lt;/a&gt;
  APIs
&lt;/h1&gt;

&lt;p&gt;What is API? It stands for Application Programming Interface. They are libraries that help us perform specific tasks with a number of functions they provide.&lt;/p&gt;

&lt;p&gt;The APIs we will use in our games will be libraries that allow us to take advantage of them by providing an interface to the graphics and sound hardware. For example OpenGL, GLUT, GLU DirectX (Direct3D, DirectDraw, DirectShow, DirectInput, DirectPlayer, DirectSound, DirectMusic), Java2D, Java3D, JavaMusic, JavaNET, JavaMedia, FMOD, etc…&lt;/p&gt;

&lt;p&gt;I think it will be very useful to learn the OpenGL library. So let's talk a little bit about OpenGL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opengl"&gt;
  &lt;/a&gt;
  OpenGL
&lt;/h2&gt;

&lt;p&gt;OpenGL resides on graphics hardware and provides an interface to that hardware. This interface contains 250 different instruction sets. 200 of them are in the OpenGL core and the other 50 are in the OpenGL Utility Library. You can develop 3D interactive applications thanks to the OpenGL graphics API.&lt;/p&gt;

&lt;p&gt;OpenGL is a platform independent API. It has been designed as an interface that performs a command flow that is run consecutively. In order to ensure this quality, it does not include commands such as windowing tasks and obtaining user input, but instead benefits from the windowing and input services provided by the platform it uses to OpenGL. Likewise, it does not contain commands for creating high-level 3D objects. But with the commands it provides, it can create an automobile, plane or molecule surface. To create the desired models of this type with OpenGL, we make use of the points, lines and polygons in the small toolkit we call the geometric primitive.&lt;/p&gt;

&lt;p&gt;Of course, the creation of a better graphics system can be built on top of OpenGL's core structures. OpenGL Utility Library (GLU) has many high-level modeling features, Quadratic surfaces, NURBS curve and surface rendering. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-operations-performed-during-rendering"&gt;
  &lt;/a&gt;
  What are the Operations Performed During Rendering?
&lt;/h2&gt;

&lt;p&gt;In the following 4 stages, you can briefly see what processes are happening during the rendering process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating shapes and geometric objects with mathematical expressions (OpenGL has tools to create primitive objects such as point, line, polygon, image, bitmap)&lt;/li&gt;
&lt;li&gt;Arrangement of objects in three-dimensional plane and adjustment of perspective&lt;/li&gt;
&lt;li&gt;Calculating the color values of the objects, applying them to the screen by taking into account the light and texture values&lt;/li&gt;
&lt;li&gt;The conversion of the definitions and color values of all object values to pixel values, briefly the realization of the rasterization event.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-opengl-code-example"&gt;
  &lt;/a&gt;
  A Simple OpenGL Code Example
&lt;/h2&gt;

&lt;p&gt;Doing so many options and complex operations with the OpenGL graphics system can make OpenGL complex. But basically, the structure of a program made with OpenGL is very simple. What you're doing is actually defining certain states and putting a control mechanism about which objects OpenGL should render and how it should render.&lt;/p&gt;

&lt;p&gt;You can actually think of OpenGL as a Real Time Rendering Software. Before introducing this programming construct, let's try to grasp some terms.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="n"&gt;initializeAwindowPlease&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;glClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;glClear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="n"&gt;glColor3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;glOrtho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="n"&gt;glBegin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_POLYGON&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;glVertex3f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="n"&gt;glEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
             &lt;span class="n"&gt;glFlush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="n"&gt;UpdateTheWindowAndCheckForEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;First of all, thank you very much to those who have come this far. Our conclusion from this article should be:&lt;/p&gt;

&lt;p&gt;Game development is not just about learning programming languages and game engines.&lt;/p&gt;

&lt;p&gt;You have to master a lot of technology. Among the technologies we did not mention are programs such as Adobe Premier, Adobe After Effects, 3D Studio Max, Lightwave, Maya and Poser. Learning and mastering each of these is only possible with experience.&lt;/p&gt;

&lt;p&gt;That's why we talked about hardware and OpenGL. Love your computer and keyboard rather than focusing on one thing. The best and only rule of thumb to master game development is this:&lt;/p&gt;

&lt;p&gt;Be curious, read a lot and try without fear.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
