<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free Dashboards - 5 Killer Templates for 2021</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 05 Sep 2021 15:51:58 +0000</pubDate>
      <link>https://dev.to/sm0ke/free-dashboards-5-killer-templates-for-2021-4f3g</link>
      <guid>https://dev.to/sm0ke/free-dashboards-5-killer-templates-for-2021-4f3g</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;The article presents a short-list with &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/free-dashboard-templates-2021/"&gt;Free Dashboards&lt;/a&gt;&lt;/strong&gt; recently updated or released by their vendors under permissive licenses. I constantly scan the market for new &lt;strong&gt;open-source dashboards&lt;/strong&gt; and creative designs that developers might use to code hobby or commercial dashboards without an initial investment. The zero-cost aspect might be important especially for beginners that try to build a portfolio or get a first customer at the beginning of their carrier as programmers. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; - Bootstrap 5 Design from Creative-Tim&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard&lt;/a&gt; - Bootstrap 5 design crafted by Themesberg&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://berrydashboard.io/"&gt;Berry Dashboard&lt;/a&gt; - open-source Material-UI React dashboard&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bootstrapdash.com/product/star-admin-free/"&gt;Star Admin&lt;/a&gt; - Bootstrap 5 template (updated recently)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt; - Pixel-perfect Material-based design&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-dashboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The product comes on top of Soft UI Design System, the latest design crafted by Creative-Tim. Designed for those who like bold elements and beautiful websites Soft UI Dashboard is made of hundreds of elements, designed blocks, and fully coded pages - Dashboard Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License, 12k downloads (5 months release)&lt;/li&gt;
&lt;li&gt;70 UI Components, 7 Sample pages&lt;/li&gt;
&lt;li&gt;Bootstrap 5, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Futuristic design, pixel-perfect layout on all devices.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Elements&lt;/strong&gt; - Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files and classes.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lboFblNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q25qgv753yjcrqx1ex57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lboFblNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q25qgv753yjcrqx1ex57.png" alt="Free Dashboard - Soft UI Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#volt-dashboard-bs5"&gt;
  &lt;/a&gt;
  &lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard BS5&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Volt is a free and open-source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages, and 3 plugins with Vanilla JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License, 4k downloads (1-year release)&lt;/li&gt;
&lt;li&gt;100+ Components, 11 Sample pages&lt;/li&gt;
&lt;li&gt;Bootstrap 5, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Distinct UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;100+ Components - There is more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, date pickers, and so on.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99E6Nh8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt48nni2nznd0qs07fav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99E6Nh8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt48nni2nznd0qs07fav.png" alt="Free Dashboard - Volt Bootstrap 5."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#berry-dashboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://berrydashboard.io/"&gt;Berry Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Berry is a beautiful React Admin Template that comes with many ready-to-use blended Material-UI components. Berry helps you to create your backend application even faster than before. You can build anything you want like the User Management app, SaaS-based interface, and many more with high-performance code &amp;amp; fully responsive design.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Material-UI Design, React&lt;/li&gt;
&lt;li&gt;Distinct UI, blazing-fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Berry is a creative free react admin template build using the Material-UI. It is meant to be the best User Experience with highly customizable feature-riched pages. It is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://berrydashboard.io/"&gt;Berry React Dashboard&lt;/a&gt; - product page&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Berry React Dashboard&lt;/a&gt; - Source code (Github)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9f4_WARc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8654dfwu21aonk19xou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9f4_WARc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8654dfwu21aonk19xou.png" alt="Free Dashboard - Berry React Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#star-admin"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.bootstrapdash.com/product/star-admin-free"&gt;Star Admin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Beautifully designed and well-coded admin template, that comes with excellent support from experts. Built using the latest technologies and up to date with the latest trends and tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Bootstrap 5 Design, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Pre-built pages, lightweight design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template is well crafted, with all the components neatly and carefully designed and arranged within the template. Star Admin 2 Free comes with a clean and well-commented code that makes it easy to work with the template. Thus making it an ideal pick for jump-starting your project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.bootstrapdash.com/product/star-admin-free"&gt;Star Admin&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anF3u7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz50qk93mvb22oc7b02k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anF3u7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz50qk93mvb22oc7b02k.png" alt="Free Dashboard - Star Admin"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coreui"&gt;
  &lt;/a&gt;
  &lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;CoreUI is an Open Source Bootstrap Admin Template. But CoreUI is not just another Admin Template. It goes way beyond hitherto admin templates thanks to transparent code and file structure. And if that's not enough, let’s just add that CoreUI consists bunch of unique features and over 1000 high-quality icons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Bootstrap  4, Webpack tooling&lt;/li&gt;
&lt;li&gt;Material-based design&lt;/li&gt;
&lt;li&gt;Complete set of pages and UI Kit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CoreUI is meant to be the UX game changer. Pure &amp;amp; transparent code is devoid of redundant components, so the app is light enough to offer the ultimate user experience. This means mobile devices also, where the navigation is just as easy and intuitive as on a desktop or laptop.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzwS9ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irme3wil9ju1d3bgvmqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzwS9ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irme3wil9ju1d3bgvmqk.png" alt="Free Dashboard - CoreUI"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Admin Dashboards&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published on Dev.to
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dashboards</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Valuable functional programming basics every developer should know</title>
      <author>Dylan Maccora</author>
      <pubDate>Sun, 05 Sep 2021 15:44:38 +0000</pubDate>
      <link>https://dev.to/maccoda/valuable-functional-programming-basics-every-developer-should-know-2a3e</link>
      <guid>https://dev.to/maccoda/valuable-functional-programming-basics-every-developer-should-know-2a3e</guid>
      <description>&lt;p&gt;For a long time there was an idealistic divide between functional and object oriented programming and this was manifested in the languages that came through. In the current landscape however you are spoilt for choice with languages and this divide is closing with a lot of the most popular languages available taking the best aspects of both paradigms. Kotlin is a great example of this where it is initially based on the JVM and follows OO principles with classes, etc but also introduces a lot of functional principles such as first class functions and the scary monad (I am no expert in this but there are a lot of easy to understand properties that you can make use of). Another example is Rust where it cannot easily be classified as either paradigm but uses functional elements such as using the &lt;code&gt;Result&lt;/code&gt; type to promote functions always return a result, as well as object oriented notions such as the dot notation of functions on a type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monad-concepts"&gt;
  &lt;/a&gt;
  Monad Concepts
&lt;/h2&gt;

&lt;p&gt;Monad is a term used a lot in functional programming and especially in the vast theory behind it. I did not wish to delve into such theory here but rather the useful functions that become available because we can treat some objects as a monad. Of particular interest is working with collections or streams of elements. The main reason I personally find these incredibly powerful is that they provide a common language for which we can describe the intention of common functions that can be combined together to achieve our end result. A lot of these functions you can use in place of a &lt;code&gt;for&lt;/code&gt; loop so next time you are looking at iterating over a collection with a &lt;code&gt;for&lt;/code&gt; loop consider if one of the following constructs are what you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-map-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;map&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; function is a transformation of each element from type X to type Y. Depending on the language you are using this may modify the elements in place or create a new collection of the mapped values (in true functional style).&lt;/p&gt;

&lt;p&gt;An easy example is say I have a collection of blog posts and I want to obtain the titles of all these, we can achieve this by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"post 1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                             &lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"post 2"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;blogPostTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// ["post 1", "post 2"]&lt;/span&gt;
&lt;span class="c1"&gt;// Without the syntactic sugar&lt;/span&gt;
&lt;span class="c1"&gt;// val blogPostTitles: Collection&amp;lt;String&amp;gt; = blogPosts.map { post -&amp;gt; post.title }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this example down a bit to what is happening here. The &lt;code&gt;map&lt;/code&gt;&lt;br&gt;
function takes a function as a parameter which we will call our &lt;strong&gt;transform&lt;br&gt;
function&lt;/strong&gt;. This function maps the input type to some other type (this can the&lt;br&gt;
same as the input type). The &lt;code&gt;map&lt;/code&gt; function then iterates through the input list&lt;br&gt;
and creates a new list applying this function to each element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-flatmap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;flatMap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;flatMap&lt;/code&gt; function is actually a combination of the above &lt;code&gt;map&lt;/code&gt; function and the &lt;code&gt;flatten&lt;/code&gt; function (not covered in this post). The &lt;code&gt;flatten&lt;/code&gt; function takes a container of containers type and &lt;strong&gt;flattens&lt;/strong&gt; it to just a container type.&lt;br&gt;
This is quite abstract so lets take a simple example. Say you have a &lt;code&gt;List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; and you want a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;, this in the broad sense what the &lt;code&gt;flatten&lt;/code&gt; function does. In this example the container is the &lt;code&gt;List&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Knowing this it is quite simple to describe the &lt;code&gt;flatMap&lt;/code&gt; function although it may still be difficult to wrap your head around in actual applications. The &lt;code&gt;flatMap&lt;/code&gt; function will apply the transformation specified to the element in the&lt;br&gt;
container and then flatten it. This is typically required when the transformation function returns the same type as the initial type.&lt;/p&gt;

&lt;p&gt;As an example say we have a type that represents the books a customer has read and we want to print all of the books a group of customers have read (we are not concerned about duplicates). Such data may be present as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end type we are wanting is a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; containing all the book titles. Let us first try this without &lt;code&gt;flatMap&lt;/code&gt;  to aide in seeing when to consider using it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BookCustomer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;booksRead&lt;/span&gt;
  &lt;span class="n"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;booksTitles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key thing that using these functional paradigms provides is built in immutability. In the above example we are needing to create a mutable list to get the result. We will see in the below version this is not required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;booksRead&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The transformation we are performing is mapping the &lt;code&gt;BookCustomer&lt;/code&gt; to the list of book titles they have read, then the flatten part of &lt;code&gt;flatMap&lt;/code&gt; handles to reduction of the list of lists into a single list. This leads us into the next section on &lt;code&gt;reduce&lt;/code&gt; which is the general pattern of &lt;code&gt;flatten&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-reduce-endraw-or-raw-fold-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;reduce&lt;/code&gt; or &lt;code&gt;fold&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; functions are more general functions to reduce a container, typically a collection, to a singular value. A simple example we can explore is reducing a collection of integers to their sum.&lt;/p&gt;

&lt;p&gt;Firstly, the difference between the two functions is primarily in the arguments that the functions take. The function signatures are below to make it simple to reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The primary difference between the two functions is that one takes the &lt;code&gt;initial&lt;/code&gt; value of the resulting type and one does not. It instead uses the first value as the initial value. This subtle difference results in the &lt;code&gt;reduce&lt;/code&gt; function requiring a non-empty collection to work on whereas &lt;code&gt;fold&lt;/code&gt; can work on an empty list and just return the &lt;code&gt;initial&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;A simple example to show how these functions work is by implementing a summation function that operates on a collection of integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sumReduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sumFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting element of these is the closure passed of the form &lt;code&gt;(acc: R, cur: T) -&amp;gt; R&lt;/code&gt;. This function is essentially and accumulation function that combines the elements of the collection to the final result. It takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;acc&lt;/code&gt; which is the current accumulated result up to the current element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cur&lt;/code&gt; which is the current element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting this in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sumFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The accumulation function is applied to each element and then the accumulated value is updated and passed along. Stepping through the above example would look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note this is for fold, if using reduce the first row would be omitted as there is no initial value&lt;/em&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;acc&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Accumulation function result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#more-use-cases"&gt;
  &lt;/a&gt;
  More use cases
&lt;/h4&gt;

&lt;p&gt;The power of these functions is how flexible they are, any accumulator function can be provided allowing you to work with any type. If you were inclined you could spend more time studying functional programming and see how this is the basis of a lot of incredibly power combinator functions. For  example we can create &lt;code&gt;flatMap&lt;/code&gt; using &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;. Since this is typically handled in the standard library we will look at a more likely scenario to find in a project.&lt;/p&gt;

&lt;p&gt;The example we will go through is that of some validation framework which leverages the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Validation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;VALID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;INVALID&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine we have a collection of validators and we wish to implement some functionality that requires that all validators to run on the &lt;code&gt;Input&lt;/code&gt; object and it returns &lt;code&gt;VALID&lt;/code&gt; if &lt;strong&gt;all&lt;/strong&gt; validators return &lt;code&gt;VALID&lt;/code&gt; otherwise if even one returns &lt;code&gt;INVALID&lt;/code&gt; it returns &lt;code&gt;INVALID&lt;/code&gt;. The &lt;code&gt;reduce&lt;/code&gt; function can do exactly this as we can evaluate all the validators and then &lt;em&gt;reduce&lt;/em&gt; them to a single result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;
                                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VALID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;INVALID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-filter-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;filter&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function is another helpful function to work with collections which filters the collection based on a provided predicate. If the term predicate is new, it is simply a function that takes an input object and returns a boolean.&lt;/p&gt;

&lt;p&gt;Using another book example let's assume we have the below data type for a book and we want to obtain the list of all books we read, this can be done as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#not-quite-must-knows"&gt;
  &lt;/a&gt;
  Not quite must knows
&lt;/h2&gt;

&lt;p&gt;The above functions and types are extremely valuable in most modern languages. The below types are useful to know but depending on your language choice you may not actually use it but understanding the concept is valuable regardless as it can still have a positive impact on the way you write your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optionmaybe-type"&gt;
  &lt;/a&gt;
  Option/Maybe Type
&lt;/h3&gt;

&lt;p&gt;It is common to have to represent the possibility of some data not being present. Commonly in languages this is represented by some null value but in pure functional programming this is actually represented by a type possibly&lt;br&gt;
called &lt;code&gt;Option&lt;/code&gt; (such as in Rust) or &lt;code&gt;Maybe&lt;/code&gt; (such as in Haskell). The core of this type is to be able to reflect the absence of a value in the type system. This can also be achieved with languages still supporting null such as Kotlin as it surfaces the nullability to the type level.&lt;/p&gt;

&lt;p&gt;Having a container type to represent the absence of a value allows the client of the data to act on it safely without needing to check whether the data is present or not, which is something unable to be achieved with a basic null value alone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;no_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result_some&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Some(5)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result_none&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;no_data&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#resulteither-type"&gt;
  &lt;/a&gt;
  Result/Either Type
&lt;/h3&gt;

&lt;p&gt;In an OO landscape it is typical to handle errors through exception handling. Pure functional languages require this to be represented in the type system, which is quite a powerful model. This is again named differently depending on the language but it is a container type that has two possible representations. If it is called &lt;code&gt;Either&lt;/code&gt; then this will have a &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; type, this is more generic than the &lt;code&gt;Result&lt;/code&gt; type as you are able to represent any arbitrary&lt;br&gt;
type that is a union of two possible types. A more focused point is the &lt;code&gt;Result&lt;/code&gt; type used in Rust to represent explicitly an error as it does not have exceptions. The two types of this union are &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; (for error).&lt;/p&gt;

&lt;p&gt;Again this notion of a type may not be largely applicable in the OO domain but it does promote you to think of handling errors and state in a different manner and representing this in the type system. This concept can easily be implemented&lt;br&gt;
in Kotlin using sealed classes and does not need to just be used for error handling but can be used to create any container class that a client can act on. Again the goal here is having the container class allows the client to work with&lt;br&gt;
the data irrespective of the underlying state.&lt;/p&gt;

</description>
      <category>functional</category>
    </item>
    <item>
      <title>How to create a smart contract to receive donations using Solidity
</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Sun, 05 Sep 2021 15:42:45 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-receive-donations-using-solidity-4k8</link>
      <guid>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-receive-donations-using-solidity-4k8</guid>
      <description>&lt;p&gt;With the ascendancy of blockchains and cryptocurrencies you do not want to be left out of this right?&lt;/p&gt;

&lt;p&gt;In this article i will teach to you how to create a smart contract to receive donations using solidity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-solidity"&gt;
  &lt;/a&gt;
  What is Solidity?
&lt;/h2&gt;

&lt;p&gt;Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. &lt;a href="https://en.wikipedia.org/wiki/Solidity"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragma-version"&gt;
  &lt;/a&gt;
  Pragma Version
&lt;/h2&gt;

&lt;p&gt;First thing we will do after creating a .sol file(solidity extension) is define a pragma version, this is for solidity to understand which version our contract is in and to compile it correctly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-contract"&gt;
  &lt;/a&gt;
  Starting the contract
&lt;/h2&gt;

&lt;p&gt;Now we are going to start our contract, for this we need to call contract + ContractName for solidity to understand where our contract code will be.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//the code will stay here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Solidity supports three types of variables:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;State variables&lt;/strong&gt;: variables whose values are permanently stored in a contract storage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local variables&lt;/strong&gt;: variables whose values are present till function is executing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global variables&lt;/strong&gt;: special variables exists in the global namespace used to get information about the blockchain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#we-are-going-to-create-two-types-of-state-variables"&gt;
  &lt;/a&gt;
  We are going to create two types of state variables:
&lt;/h3&gt;

&lt;p&gt;The variables are written as follows: &lt;code&gt;type + variableName&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;totalDonations&lt;/strong&gt;: totalDonations is a uint that stores the amount of donations that have already been made.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;owner&lt;/strong&gt;: owner is of the payable address type that will be the creator of the contract that will receive the donations.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Obs: all addresses that will accept payment or make payment must be of the payable type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-constructor"&gt;
  &lt;/a&gt;
  Using the constructor
&lt;/h2&gt;

&lt;p&gt;In our solidity contract we have a constructor to set up our contract and set some standards.&lt;/p&gt;

&lt;p&gt;We will define who will be the owner of our contract and that it will be of the payable type, in this case the creator of the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-our-first-function"&gt;
  &lt;/a&gt;
  Creating our first function
&lt;/h2&gt;

&lt;p&gt;Now we are going to create a simple function to return the amount of donations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// public function to return the amount of donations&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalDonations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our function takes three parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;public&lt;/strong&gt;: This function is of the public type and can be called by anyone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;view&lt;/strong&gt;: It means that this function is a view-only function and does not do any transactions and you don't need to pay gas to use it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;returns(uint)&lt;/strong&gt;: Here we are saying that the function will return something of type uint.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-function-to-make-donation"&gt;
  &lt;/a&gt;
  Creating function to make donation
&lt;/h2&gt;

&lt;p&gt;Now we are going to make a function to make the donation, we need say that it is public and payable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//public function to make donate&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;donate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// public function to return total of donations&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalDonations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Obs: you can use &lt;a href="https://docs.openzeppelin.com/contracts/2.x/api/utils"&gt;nonReentrant&lt;/a&gt; to give more secure to your contract.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our function we define that the &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;payable&lt;/code&gt; and that we are going to &lt;code&gt;transfer&lt;/code&gt; to it &lt;code&gt;msg.value&lt;/code&gt;, which is the amount of crypto that is informed by the donor.&lt;/p&gt;

&lt;p&gt;Ready!! we have our first contract ready 😁🥳&lt;/p&gt;

&lt;p&gt;For more content you can follow me here and on my twitter:&lt;br&gt;
&lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>ethereum</category>
      <category>blockchain</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Upgrading the CSS only Multi-line Typewriter effect</title>
      <author>Temani Afif</author>
      <pubDate>Sun, 05 Sep 2021 15:31:31 +0000</pubDate>
      <link>https://dev.to/afif/upgrading-the-css-only-multi-line-typewriter-effect-2269</link>
      <guid>https://dev.to/afif/upgrading-the-css-only-multi-line-typewriter-effect-2269</guid>
      <description>&lt;p&gt;In this post, I will enhance &lt;a href="https://dev.to/afif/a-multi-line-css-only-typewriter-effect-3op3"&gt;The Multi-line Typewriter&lt;/a&gt; to create more fancy variation of "writer effect" using only CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: click the "rerun" button at the bottom right of each embedded Pen to run the animation again.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-filling"&gt;
  &lt;/a&gt;
  The Filling
&lt;/h3&gt;

&lt;p&gt;Let's update the color of an existing text letter by letter. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwWKMeQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sliding"&gt;
  &lt;/a&gt;
  The Sliding
&lt;/h3&gt;

&lt;p&gt;A sliding cursor to reveal the text, why not!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGRwYrg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-one-shot"&gt;
  &lt;/a&gt;
  The One Shot
&lt;/h3&gt;

&lt;p&gt;A letter by letter animation you said? nah! let's show everything at once!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwgGjVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-random"&gt;
  &lt;/a&gt;
  The Random
&lt;/h3&gt;

&lt;p&gt;Not that random but it looks like&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWgjyjE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fragmentation"&gt;
  &lt;/a&gt;
  The Fragmentation
&lt;/h3&gt;

&lt;p&gt;A last one from the future where I will consider the &lt;a href="https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl"&gt;Fragmentation effect I built with the CSS Paint API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only Chrome and Edge support this for now. It should work with a multi-line text but Chrome its a bit buggy with mask when it comes to multi-line.&lt;/p&gt;

&lt;p&gt;Get back to this in 2 years to have a full support everywhere with 0 bugs.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWojOQG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Now you have a plenty of CSS-only typewriter effect. Enjoy 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4u35fIGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/VHrFbmOtBwysbsYnka/giphy.gif%3Fcid%3Decf05e47y9xawp3rscaqcnyycar4v8ngdvb8vkm8wvgs864p%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4u35fIGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/VHrFbmOtBwysbsYnka/giphy.gif%3Fcid%3Decf05e47y9xawp3rscaqcnyycar4v8ngdvb8vkm8wvgs864p%26rid%3Dgiphy.gif%26ct%3Dg" alt="The End"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MutationObserver Web API</title>
      <author>Mikkel</author>
      <pubDate>Sun, 05 Sep 2021 15:10:22 +0000</pubDate>
      <link>https://dev.to/mikkelmbk/mutationobserver-web-api-1779</link>
      <guid>https://dev.to/mikkelmbk/mutationobserver-web-api-1779</guid>
      <description>&lt;h3&gt;
  &lt;a href="#mutationobserver-web-api-what-is-it"&gt;
  &lt;/a&gt;
  MutationObserver Web API, what is it?
&lt;/h3&gt;

&lt;p&gt;The MutationObserver Web API is, according to MDN, an interface which provides the ability to watch for changes being made to the DOM tree. An example of a change made to the DOM tree could be something like a class, id, or any other attribute being added or removed to or from an element. Another example could be something like an element being removed from the DOM, or an element being added to the DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-know-the-mutationobserver"&gt;
  &lt;/a&gt;
  Getting to know the MutationObserver
&lt;/h3&gt;

&lt;p&gt;We start by defining a new instance of the MutationObserver as &lt;strong&gt;observer&lt;/strong&gt;. The callback function in our instance of the MutationObserver is where we can start reacting to events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {

}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to loop through the &lt;strong&gt;mutationsList&lt;/strong&gt; which we receive in said callback as it is an array. Within our loop we can now react to individual events through &lt;strong&gt;mutation&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {
  for(const mutation of mutationsList) {
     console.log("a single mutation: ", mutation);
    }
}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every &lt;strong&gt;mutation&lt;/strong&gt; that our callback provides us with has a mutation type letting us know which sort of mutation we are looking at.&lt;/p&gt;

&lt;p&gt;There are three different mutation types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;childList&lt;/li&gt;
&lt;li&gt;attributes&lt;/li&gt;
&lt;li&gt;characterData
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {
    for(const mutation of mutationsList) {
        if (mutation.type === 'childList') {
            console.log('A child node has been added or removed.');
        }
        else if (mutation.type === 'attributes') {
            console.log('The ' + mutation.attributeName + ' attribute was modified.');
        }
        else if(mutation.type === 'characterData'){
            console.log(mutation);
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our instance of the MutationObserver stored in our variable &lt;strong&gt;observer&lt;/strong&gt;, we can provide it with a reference to an element it should listen to for mutations, as well as a configuration object telling it which mutation types it should let our callback know about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// the observer instance is up here

observer.observe(document.querySelector("#some-id"), { attributes: false, childList: true });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-mutationobserver-in-action"&gt;
  &lt;/a&gt;
  The MutationObserver in action
&lt;/h3&gt;

&lt;p&gt;Using the example that we have been building through this guide, we can see exactly how the MutationObserver behaves.&lt;/p&gt;

&lt;p&gt;Here we are before any changes to the element we are listening to for mutations, have happened. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kG34qBfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d05ggtjbzfgj0jquz7oo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kG34qBfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d05ggtjbzfgj0jquz7oo.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are after having clicked the button to change the title.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yi7gsnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2he2l9ty3wvpexwfe4p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yi7gsnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2he2l9ty3wvpexwfe4p.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here we can see the mutation in details. At the top we can see that a node was added, specifically a text node. This node is the text that our title was changed to. &lt;/p&gt;

&lt;p&gt;Further down we can see that a node was also removed, also a text node. This node is the text that our title contained before it was changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGfAQMnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdhn5df3w94t9c16l1e3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGfAQMnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdhn5df3w94t9c16l1e3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking a closer look at the addedNodes, we can see that the &lt;strong&gt;data&lt;/strong&gt; property indeed contains the text which now resides in our title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN4JF5pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lif5sbvshu1q0q0blsq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN4JF5pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lif5sbvshu1q0q0blsq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Depending on your situation, the MutationObserver can be immensely useful. &lt;/p&gt;

&lt;p&gt;The MutationObserver can do way more than what I covered in this guide, and I have used it to great length and even built a small framework around it to help my coworkers who aren't as strong in JavaScript utilize it.&lt;/p&gt;

&lt;p&gt;If any interest is shown, I might make a guide going through the framework I made and show how you can use the MutationObserver without fully understanding how it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; I am by no means an expert and I do not claim that everything I have said is correct, if you find any misinformation or otherwise misleading or wrong explanations, please reach out to me so I can correct it.&lt;/p&gt;

</description>
      <category>mutationobserver</category>
      <category>javascript</category>
      <category>webapi</category>
      <category>juniordev</category>
    </item>
    <item>
      <title>React useUndo hook</title>
      <author>Bhavesh Mishra</author>
      <pubDate>Sun, 05 Sep 2021 14:19:43 +0000</pubDate>
      <link>https://dev.to/mishrabhavesh/react-useundo-hook-4h34</link>
      <guid>https://dev.to/mishrabhavesh/react-useundo-hook-4h34</guid>
      <description>&lt;p&gt;I am totally new in web development and this is my first blog, any sorts of suggestion or comments is welcome and that will help me to learn and grow.&lt;br&gt;
So lets start with the &lt;code&gt;useUndo&lt;/code&gt; hook.&lt;br&gt;
Last week in our organization came with a requirement that we need to have a card that will have two options &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;Decline&lt;/code&gt;, and after selecting any one of the option we will be giving the user a time period of let say 10 sec and with in this period they can undo their action.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg ---&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOMWe84j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h23st6a3nyzmyjsofsjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOMWe84j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h23st6a3nyzmyjsofsjq.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If they accept/ decline&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fi6KS83v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qhuf2xfakq6llgde0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fi6KS83v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qhuf2xfakq6llgde0z.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what i thought is to make a undo function which can help me with with this and also if i would like to use this undo function anywhere anywhere i will use it. So i came up with an &lt;code&gt;useUndo&lt;/code&gt; hook, which was possible with &lt;code&gt;React lifecycle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so lets discuss with the code and how i had implemented it.&lt;/p&gt;

&lt;p&gt;First i will show the full code and then i will break it in different part and discuss about each of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGgbSs2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xqo4bml7pliglsnca59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGgbSs2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xqo4bml7pliglsnca59.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First i have used &lt;code&gt;useState&lt;/code&gt; react hook to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Invoke the undo function&lt;/li&gt;
&lt;li&gt;store the timeout id&lt;/li&gt;
&lt;li&gt;to check if the method execution is finished or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiiaQZqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22w4uxatnfrui19yxfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiiaQZqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22w4uxatnfrui19yxfw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next is the &lt;code&gt;onUnload&lt;/code&gt; event-lisitener function&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SIxr4Q9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyet2f90rib2mhjbo8cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SIxr4Q9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyet2f90rib2mhjbo8cx.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;what this will do is it will throw and alert if you are trying to close the tab or window. We are doing this because as we are using setTimeout and clearTimeout so these are window scoped and each time we close or open a new tab a new scope is created so if we close the tab the the setTimeout which are web-api will be cleared from the call back queue and will not enter in the execution stack even after the time interval is over.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDAuCA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypumlj4oszbwkusmsbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDAuCA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypumlj4oszbwkusmsbx.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence we will listen for an &lt;code&gt;event-listener&lt;/code&gt; i.e &lt;code&gt;beforeunload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next the most important part according to me in this code is the &lt;code&gt;useEffect&lt;/code&gt; part i.e&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pOLa-J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qatiwjpqt4rxralvgbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pOLa-J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qatiwjpqt4rxralvgbk.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what we are doing here is &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we check if &lt;code&gt;invokeUndo&lt;/code&gt; is true or not and if so we add an event listener &lt;code&gt;beforeunload&lt;/code&gt; on window.
then we put our function inside the timeout which will be executed after 10000ms i.e 10s. Now the &lt;code&gt;setTimeout&lt;/code&gt; web-api return a uniq number everytime you run it, which will be used to clear the timeout fucnction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Inside the setTimeout we call the function which is &lt;code&gt;resolveMethod()&lt;/code&gt; set the &lt;code&gt;undoTimerId&lt;/code&gt; to null as the function  execution is finished, &lt;code&gt;setMethodExecuted&lt;/code&gt; to true which will be returned value and while using the hook if we have any action to perform after execution can be done, &amp;amp;         &lt;code&gt;setInvokeUndo(false)&lt;/code&gt; as the execution is finished.&lt;/p&gt;

&lt;p&gt;Now the important part we need to do some clean-up on component-unmount so we will have a return statement in useEffect which will clear eventListener.&lt;/p&gt;

&lt;p&gt;Now to invoke the undo we have invokeUndoMethod which will be a returned value and while using this hook we can use this.&lt;/p&gt;

&lt;p&gt;we have an &lt;code&gt;undoMethod&lt;/code&gt; which will perform the undo method i.e &lt;code&gt;clearTimeout&lt;/code&gt;, setInvokeUndo to false.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XezKCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5y896e3ak629skiblcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XezKCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5y896e3ak629skiblcd.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will have a final return statement&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tc_cVKiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk4mbrvicy0do4v172e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tc_cVKiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk4mbrvicy0do4v172e1.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;undoMethod&lt;/code&gt; to perform the undo action&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;invokeUndoMethod&lt;/code&gt; to invoke the undo or start undo method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isMethodExecuted&lt;/code&gt; this will tell if the method execution     is completed or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now while using it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTaFjhD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujqi9mdqtdxer6e12i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTaFjhD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujqi9mdqtdxer6e12i.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can import this useUndo hook and pass inside the &lt;code&gt;onAcceptance&lt;/code&gt; method we need to be executed after 10s.&lt;/p&gt;

&lt;p&gt;That's All folks 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why I use React Query</title>
      <author>Tyrel Chambers</author>
      <pubDate>Sun, 05 Sep 2021 14:18:28 +0000</pubDate>
      <link>https://dev.to/imtyrelchambers/why-i-use-react-query-97k</link>
      <guid>https://dev.to/imtyrelchambers/why-i-use-react-query-97k</guid>
      <description>&lt;p&gt;I tend to write my APIs as REST. However, when I implemented GraphQL in one of my projects, I loved the way it provided its fetching status, data and other information.&lt;/p&gt;

&lt;p&gt;Being able to control your UI via variables such as &lt;code&gt;isLoading&lt;/code&gt;, was a lot of fun.&lt;/p&gt;

&lt;p&gt;I used to try and write my own solid way to fetch data from my APIs but controlling my UI becomes a chore. For example, not loading a page before certain data came in used to be more hit or miss than anything else.&lt;/p&gt;

&lt;p&gt;I'd heard of React Query, but I wasn't exactly sure what it did and why I should use it. Like any new project, I decided I'd give it a shot because I like to incorporate something new in every new project. What I was left with was an amazing experience.&lt;/p&gt;

&lt;p&gt;It behaves similarly to GQL in the sense that you have access to a bunch of variables that give you finer control over your calls and therefore, over your UI. &lt;strong&gt;Not only that&lt;/strong&gt;, but it can also replace your global state management.&lt;/p&gt;

&lt;p&gt;I'm by no means an expert on React Query as I've just started using it myself, but maybe I can help you make the decision to give it a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-can-replace-global-state-management"&gt;
  &lt;/a&gt;
  How it can replace global state management
&lt;/h2&gt;

&lt;p&gt;This confused me greatly when I first began using React Query. I wasn't sure how I could get a user, for example, save the data, and use it somewhere else without making a needless call.&lt;/p&gt;

&lt;p&gt;When React Query makes a call, the data is cached (this is your "state"). This means that instead of making another call, it will serve up the data it has in its cache and give it to you. When that becomes stale, it will fetch from the API and the process repeats. You can also specify how long data should stay fresh (stay in the cache without being fetched) and you can also invalid other queries, but let's not get ahead of ourselves.&lt;/p&gt;

&lt;p&gt;In one of my projects, I replaced 90% of my global state with the help of React Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-react-query-is-used"&gt;
  &lt;/a&gt;
  How React Query is used
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This may or may not be correct so please don't call me trash on the internet or I'll tell my mom.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think in order to effectively communicate what I'm thinking, I like to use pictures so I can walk you through my code.&lt;/p&gt;

&lt;p&gt;I'll give you the full snippet here, then break it down piece-by-piece to try and explain it better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// hooks/mutations/useLogin.js
export const useLogin = () =&amp;gt; {
  const history = useHistory();
  const queryClient = useQueryClient();
  const { mutate } = useMutation((data) =&amp;gt; login(data), {
    onSuccess: (res) =&amp;gt; {
      queryClient.invalidateQueries("currentUser");
      const { token } = res.data;

      window.localStorage.setItem("token", token);
      history.push("/dashboard");
    },
  });

  return mutate;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're familiar with GraphQL, then this will look a little familiar to you and it's what I loved about React Query.&lt;/p&gt;

&lt;p&gt;I encourage you not to copy this code if you're learning it for the first time but type it out yourself so you burn that into your memory banks.&lt;/p&gt;

&lt;p&gt;Our useMutation function takes in whatever data we pass to it. If you were to look at my LoginForm, you would see a line of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const login = useLogin()
  login({firstName: "tyrel", lastName: "chambers"})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whatever data you pass to your "login" function (it can be whatever name you want it to be), will get passed as an argument in our useMutation function in our hook. The &lt;code&gt;login(data)&lt;/code&gt; piece you see there, is the API call we make with the data we passed in from the actual login form. In our case, it's the email and password of the user. Now we can send this to the server to be validated and have our user returned.&lt;/p&gt;

&lt;p&gt;In my case, I have a function called &lt;strong&gt;login&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// api/login.js
export const login = ({ email, password } = {}) =&amp;gt; {
  return request.get("/login", {
    params: {
      email,
      password,
    },
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just for the sake of clarity, I've included the function that makes the actual API call.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#we-have-our-user-now-what"&gt;
  &lt;/a&gt;
  We have our user, now what?
&lt;/h3&gt;

&lt;p&gt;Within React Query's mutation and query functions, we have access to the property &lt;code&gt;onSuccess&lt;/code&gt;. This does what you think it would do, when the query or mutation finishes in a successful state, execute &lt;em&gt;this&lt;/em&gt; code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  onSuccess: (res) =&amp;gt; {
    queryClient.invalidateQueries("currentUser");
    const { token } = res.data;

    window.localStorage.setItem("token", token);
    history.push("/dashboard");
  },

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my &lt;code&gt;onSuccess&lt;/code&gt; block, I invalidate my initial user query.&lt;/p&gt;

&lt;p&gt;You can name queries, you see. This is so if you need to invalidate some data (which means to force React Query to fetch it again from an API). The beauty about this is you can use invalidating queries in tandem with your cache (and stale times) to create an effective system for your API calls. When I invalidate my &lt;code&gt;currentUser&lt;/code&gt; query, this means that React Query will make a call to the database to fetch my authorized user instead of using the cached version. This is also helpful if you update your user's profile or account in your web app. You can invalidate that query which would force React Query to fetch from the API again, which returns and caches an up-to-date user object. It's pretty wicked.&lt;/p&gt;

&lt;p&gt;The rest of the block is saving the JWT I receive and redirecting to the dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-react-querys-cache"&gt;
  &lt;/a&gt;
  Accessing React Query's cache
&lt;/h2&gt;

&lt;p&gt;React Query really makes working with API and data, fun. Rather than setting up stores to save my current user (or really anything else), we can use React Query's caching ability. That's where I got a little confused on how to access that data.&lt;/p&gt;

&lt;p&gt;I'll provide another quick example of how you can use React Query's caching ability as your data store.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const useUser = () =&amp;gt; {
  const token = window.localStorage.getItem("token");
  const info = useQuery("currentUser", getUser, {
    enabled: !!token,
    staleTime: 1000 * 60 * 5,
  });

  return { ...info, user: info.data };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is my hook that queries my database for the current authorized user. I supply my JWT and off it goes. When it comes back, I set a longer stale time because it's unlikely the user object will change and when it does change, I'll invalidate it anyway and force React Query to fetch an updated user object.&lt;/p&gt;

&lt;p&gt;Here is how it is used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const { isLoading, user } = useUser();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the function &lt;code&gt;useUser()&lt;/code&gt; is called, it'll do one of two things. First, it'll check to see if this data in its cache is fresh (the data being my user object) and if it isn't it'll do the second action which is fetching the user from the database. So it'll either use the user in cache or it'll fetch a new one.&lt;/p&gt;

&lt;p&gt;I thought that if I included &lt;code&gt;useUser()&lt;/code&gt; that it would call the API regardless so I wasn't sure how to use React Query to avoid that. What I found out is that all I have to do is execute that function call and let React Query do the rest. It'll check its cache and determine whether or not to make a call.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React Query has been an absolute delight to work with. Going from an unstructured, unopinionated way of making API calls and controlling the flow of information to my UI, to one that gives me finer control over how things flow, makes my code feel more stable. I can count on the data I need, to be there and with the variable they expose, I can control the state of my UI by hiding pages or waiting on data to arrive before proceeding in a more effective manner.&lt;/p&gt;

&lt;p&gt;I would 100% recommend you take the time to learn this technology if you're looking for a fun way to make API calls :)&lt;/p&gt;

&lt;p&gt;And that ladies and gentlemen, is Why I use React Query.&lt;/p&gt;

</description>
      <category>api</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>RFC: Why Angular needs a composition API</title>
      <author>Michael Muscat</author>
      <pubDate>Sun, 05 Sep 2021 14:06:32 +0000</pubDate>
      <link>https://dev.to/mmuscat/rfc-why-angular-needs-a-composition-api-3gbh</link>
      <guid>https://dev.to/mmuscat/rfc-why-angular-needs-a-composition-api-3gbh</guid>
      <description>&lt;p&gt;Angular is an opinionated framework, but leaves open the question of how state should be managed in our application. Out of the box we are presented with a mix of imperative and reactive styles for state management, which is a barrier to entry for purely reactive state.&lt;/p&gt;

&lt;p&gt;A composition API solves this by filling in the gaps in Angular's reactive model, providing a consistent pattern for reactive state management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State
&lt;/h3&gt;

&lt;p&gt;Fig 1a. Imperative style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
   &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

   &lt;span class="nx"&gt;handleCountChange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something with count&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleCountChange&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fig 1b. Reactive composition&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something with count&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two examples might look similar, but the latter example has a few advantages already:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We can observe changes to the value of &lt;code&gt;count&lt;/code&gt;, even it's an input or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can extract the logic and side effect into another function, which is not straightforward with the first example.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig 1c. Extraction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// do something with count&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#subscriptions"&gt;
  &lt;/a&gt;
  Subscriptions
&lt;/h2&gt;

&lt;p&gt;Subscriptions are another pain point that Angular leaves us to figure out for ourselves. Current approaches in the ecosystem include:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Declarative&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Out of the box Angular gives us a pipe that automatically handles subscriptions to observable template bindings.&lt;/p&gt;

&lt;p&gt;Fig 2. Async pipe binding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"observable$ | async as value"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefits of this approach is that we do not have to worry about the timing of the subscription, since it will always happen when the view is mounted, and the view will be updated automatically when values change.&lt;/p&gt;

&lt;p&gt;However in real world applications it is easy to accidentally over-subscribe to a value because you forgot to &lt;code&gt;share()&lt;/code&gt; it first. Templates with many temporal async bindings are much harder to reason about than static templates with synchronous state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imperative&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another popular approach is to subscribe to observables in our component class, using a sink to simplify subscription disposal.&lt;/p&gt;

&lt;p&gt;Fig 3. Subscription sink with imperative subscribe&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="nx"&gt;sink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;

   &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;changeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;
            &lt;span class="nx"&gt;changeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sinks are a good way to deal with imperative subscriptions, but results in more verbose code. Other approaches use &lt;code&gt;takeUntil&lt;/code&gt;, but that has its own pitfalls. The only guaranteed way to dispose of a subscription is to call its &lt;code&gt;unsubscribe&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The downside to this approach is we have to manually handle change detection if using the &lt;code&gt;OnPush&lt;/code&gt; change detection strategy. The timing of the subscription here also matters, causing more confusion.&lt;/p&gt;

&lt;p&gt;Let's see how composition solves these problems.&lt;/p&gt;

&lt;p&gt;Fig 4. Composable subscriptions with reactive state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"count &amp;gt; 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The composition API runs in an &lt;strong&gt;Execution Context&lt;/strong&gt; with the following behaviour:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Subscriptions are deferred until the view has mounted, after all inputs and queries have been populated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change detection runs automatically whenever a value is emitted, after calling the observer. State changes are batched to prevent unnecessary re-renders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Subscriptions are automatically cleaned up when the view is destroyed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reactive values are unwrapped in the component template for easy, synchronous access.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lifecycle"&gt;
  &lt;/a&gt;
  Lifecycle
&lt;/h2&gt;

&lt;p&gt;The imperative style of Angular's lifecycle hooks work against us when we want truly reactive, composable components.&lt;/p&gt;

&lt;p&gt;Fig 5. A riddle, wrapped in a mystery, inside an enigma&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngDoCheck&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngAfterContentInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngAfterContentChecked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngAfterViewChecked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
   &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The composition API provides a &lt;strong&gt;Layer of Abstraction&lt;/strong&gt; so we don't have to think about it.&lt;/p&gt;

&lt;p&gt;Fig 6. Composition API lifecycle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// checked on ngDoCheck&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ContentChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// checked on ngAfterContentChecked&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// checked on ngAfterViewChecked&lt;/span&gt;

   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ngAfterViewInit&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="c1"&gt;// ngOnDestroy&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;view&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fine tune control is also possible using a custom scheduler.&lt;/p&gt;

&lt;p&gt;Fig 7. Before/After DOM update hooks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SchedulerLike&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;beforeUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;auditTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// pass 1 for afterUpdate&lt;/span&gt;
   &lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;beforeUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// after count changes, before DOM updates.&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#change-detection"&gt;
  &lt;/a&gt;
  Change Detection
&lt;/h2&gt;

&lt;p&gt;Angular's default change detection strategy is amazing for beginners in that it "just works", but not long after it becomes necessary to optimise performance by using the &lt;code&gt;OnPush&lt;/code&gt; strategy. However in this change detection mode you must manually trigger change detection after an async operation by calling &lt;code&gt;detectChanges&lt;/code&gt; somewhere in your code, or implicitly with the &lt;code&gt;async&lt;/code&gt; pipe.&lt;/p&gt;

&lt;p&gt;By comparison, the composition API schedules change detection automatically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a reactive input changes&lt;/li&gt;
&lt;li&gt;Whenever a reactive value returned from a &lt;code&gt;ViewDef&lt;/code&gt; emits&lt;/li&gt;
&lt;li&gt;Whenever a subscribed observable emits&lt;/li&gt;
&lt;li&gt;With or without zone.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fig 8. Composition API change detection&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// reactive change detection&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="c1"&gt;// reactive change detection&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// bound to reactive input&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ViewDef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Changes to reactive state are batched so that the view is only checked once when multiple values are updated in the same "tick".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-composition-api"&gt;
  &lt;/a&gt;
  Angular Composition API
&lt;/h2&gt;

&lt;p&gt;This RFC includes a &lt;a href="https://github.com/mmuscat/angular-composition-api"&gt;reference implementation&lt;/a&gt;. Install it with one of the commands below. Currently requires Angular 12.x with RxJS 6.x.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @mmuscat/angular-composition-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @mmuscat/angular-composition-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#built-for-ivy"&gt;
  &lt;/a&gt;
  Built for Ivy
&lt;/h3&gt;

&lt;p&gt;Angular Composition API wouldn't be possible without the underlying changes brought by the Ivy rendering engine. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-for-rxjs"&gt;
  &lt;/a&gt;
  Built for RxJS
&lt;/h3&gt;

&lt;p&gt;Other libraries achieve reactivity by introducing their own reactive primitives. Angular Composition API builds on top of the existing RxJS library. The result is a small api surface area and bundle size. You already know how to use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-for-the-future"&gt;
  &lt;/a&gt;
  Built for the future
&lt;/h3&gt;

&lt;p&gt;There is currently talk of adding a view composition API to a future version of Angular. It is hoped that this library can provide inspiration for that discussion and potentially integrate with any new features that might bring.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#request-for-comment"&gt;
  &lt;/a&gt;
  Request for Comment
&lt;/h2&gt;

&lt;p&gt;If you are interested in improving this proposal, leave a comment in this &lt;a href="https://github.com/mmuscat/angular-composition-api/issues/9"&gt;Github issue&lt;/a&gt;. Alternatively, you can try out the reference implementation from the links below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/node-x8aq3m"&gt;Angular Composition API on Stackblitz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mmuscat/angular-composition-api/tree/master/packages/core"&gt;Angular Composition API on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@mmuscat/angular-composition-api"&gt;Angular Composition API on NPM&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prior-arts"&gt;
  &lt;/a&gt;
  Prior Arts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Vue Composition API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/stupidawesome/getting-started-with-angular-effects-2pdh"&gt;Angular Effects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cleaner models with Laravel Eloquent Builders</title>
      <author>Marinus van Velzen</author>
      <pubDate>Sun, 05 Sep 2021 14:02:44 +0000</pubDate>
      <link>https://dev.to/rocksheep/cleaner-models-with-laravel-eloquent-builders-12h4</link>
      <guid>https://dev.to/rocksheep/cleaner-models-with-laravel-eloquent-builders-12h4</guid>
      <description>&lt;p&gt;Over the past few years I have created tons and tons of models in Laravel. These models have always blown up in size with tons of accessors and added scopes. For the unintroduced, model scopes are methods containing queries that can be chained while retrieving data from the database. In example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Models/Article.php&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;scopePublished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'published_at'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage of the scope&lt;/span&gt;
&lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you might imagine it these methods will add up after a while resulting in bloated models, but what if I tell you that you can clean this up easily?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-your-own-eloquent-builder"&gt;
  &lt;/a&gt;
  Writing your own Eloquent Builder
&lt;/h2&gt;

&lt;p&gt;It's possible to create your own Eloquent Builder and bind it to your models. This can be done by creating a class which extends the Eloquent Builder. I'll use the example above for the model that we will clean up. So let's start by creating a ArticleBuilder. It doesn't really matter where you place it, but I tend to create a directory for it in the App namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\EloquentBuilders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleBuilder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Builder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;self&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'published_at'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it uses the same methods of before, because the scope uses a query builder in the background! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-your-brand-new-eloquent-builder"&gt;
  &lt;/a&gt;
  Registering your brand new Eloquent Builder
&lt;/h2&gt;

&lt;p&gt;Now all that's left is to bind our custom query builder to the Article Model. This can be done by overriding the newEloquentBuilder method. After overriding it you can remove any of the old scopes. Your end result will look something like this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\EloquentBuilders\ArticleEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;newEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Builder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArticleEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-our-new-builder"&gt;
  &lt;/a&gt;
  Using our new builder
&lt;/h2&gt;

&lt;p&gt;Using your brand new query builder is just the same as with the scopes. All you need to do is chain it on your query like you usually do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end nothing changed functionality wise, but your model just became a lot cleaner. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Typescript Record utility</title>
      <author>es404020</author>
      <pubDate>Sun, 05 Sep 2021 13:59:48 +0000</pubDate>
      <link>https://dev.to/es404020/typescript-record-utility-4mc2</link>
      <guid>https://dev.to/es404020/typescript-record-utility-4mc2</guid>
      <description>&lt;p&gt;Record&lt;/p&gt;

&lt;p&gt;Constructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example
interface CatInfo {
  age: number;
  breed: string;
}

type CatName = "miffy" | "boris" | "mordred";

const cats: Record&amp;lt;CatName, CatInfo&amp;gt; = {
  miffy: { age: 10, breed: "Persian" },
  boris: { age: 5, breed: "Maine Coon" },
  mordred: { age: 16, breed: "British Shorthair" },
};

cats.boris;

const cats: Record&amp;lt;CatName, CatInfo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Released:&lt;br&gt;
typescript 2.1&lt;/p&gt;

&lt;p&gt;reference :Typescript offical documentation.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Complete guides to React useReducer() Hook </title>
      <author>Ahmed Mkahal</author>
      <pubDate>Sun, 05 Sep 2021 13:51:44 +0000</pubDate>
      <link>https://dev.to/ahmedm1999/complete-guides-to-react-usereducer-hook-5j7</link>
      <guid>https://dev.to/ahmedm1999/complete-guides-to-react-usereducer-hook-5j7</guid>
      <description>&lt;p&gt;&lt;code&gt;useReducer()&lt;/code&gt; is a React.js Hook which manage complex state in your application and update it based on the 'action' you send to.&lt;br&gt;
It's used as an alternative for &lt;code&gt;useState&lt;/code&gt; if you have a complex states or can be used both together according to your application requirements.&lt;br&gt;
It's very similar to &lt;code&gt;Redux&lt;/code&gt; if you want to not use a 3rd-party library.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;First&lt;/h2&gt;

&lt;p&gt;You should import &lt;code&gt;useReducer&lt;/code&gt; from react js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useReducer } from 'react';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Second :&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; Hook accepts a reducer function, and an initial state.&lt;br&gt;
It's returns an array with 2 values:&lt;br&gt;
The first one is the &lt;code&gt;state&lt;/code&gt; value, and the second value is the &lt;code&gt;dispatch&lt;/code&gt; function which is used to trigger an action with the help of ES6 destructuring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialState);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;initialState :&lt;/h5&gt;

&lt;p&gt;The initial state that we want to start working on it&lt;/p&gt;

&lt;h5&gt;reducer :&lt;/h5&gt;

&lt;p&gt;Which we'll use to manipulate our state.&lt;/p&gt;

&lt;h1&gt;Let's go with simple example&lt;/h1&gt;

&lt;p&gt;Let's say you're displaying some products in your app, and you want to :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a product to the cart when user click on &lt;code&gt;add to cart&lt;/code&gt; button and list it in cart page.&lt;/li&gt;
&lt;li&gt;Remove the product from cart list if the user click on &lt;code&gt;remove from cart&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;User can switch the application (dark/light mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Create &lt;code&gt;Reducer.js&lt;/code&gt; component to add our reducer in it.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;How to use it ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, we will define the reducer function that will manipulate our state:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Reducer.js
const reducer = (state, action) =&amp;gt; {
  // reducer function accepts two arguments 
  /* 
   the first one is `state` which is going to be the state 
   before the update.
  */ 
  /* 
   the second one is `action` which is what are we trying to do.
  */ 
}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Second step, we will define the initial state object which contains our initial values :
&lt;p&gt;1- &lt;code&gt;cart&lt;/code&gt; array property which holds products user added to his/her cart.&lt;/p&gt;
&lt;p&gt;2- &lt;code&gt;mode&lt;/code&gt; property which holds the app mode and it's by default will be &lt;code&gt;light&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll put those in our file, but outside of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Reducer.js
export const initialState = {
    cart: [],
    mode: 'light'
};

const reducer = (state, action) =&amp;gt; {
    switch (action.type) {
        case 'ADD_TO_CART':
            return {
                ...state,
                cart: [...state.cart, action.item]
            };

        case 'REMOVE_FROM_CART':
            const index = state.cart.findIndex(item =&amp;gt; action.id === item.id);
            let newCart = [...state.cart];
            if (index &amp;gt;= 0) {
                newCart.splice(index, 1);
            }

            if (newCart.length === 0) {
                return {
                    ...state,
                    cart: newCart,
                }
            } else {
                return {
                    ...state,
                    cart: newCart,
                }
            };
        case 'CHANGE_MODE':
            return {
                ...state,
                mode: action.mode
            }
        default: return state
    }

}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's imagine we have a &lt;code&gt;Product.js&lt;/code&gt; component that return a products to be displayed in your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Product.js
import React from 'react'

function Product({ name, image }) {
    const addToCart= () =&amp;gt; {
        // some code
    }
    return (
        &amp;lt;div className="product"&amp;gt;
            &amp;lt;img src={`${image}`} /&amp;gt;
            &amp;lt;p&amp;gt;{name}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={addToCart}&amp;gt;add to cart&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Product

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The fourth step, our reducer is all setup, now let's define then use it.
To be able to use the reducer function you must define it in everywhere you need like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useReducer} from 'react'
import reducer, {initialState} from './Reducer';

function Product({ name, image }) {
    const [state, dispatch] = useReducer(reducer, initialState) ;
    .
    .
    .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly you need to import &lt;code&gt;useReducer&lt;/code&gt; from React, then import the &lt;code&gt;reducer&lt;/code&gt; and &lt;code&gt;initialState&lt;/code&gt; to be used.&lt;br&gt;
Now we will define our reducer using &lt;code&gt;useReducer()&lt;/code&gt; hook&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialState) ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The useReducer hook will return two things in an array: the state, and a dispatcher to update the state.&lt;/p&gt;

&lt;p&gt;We will grab those with array destructuring, similar to state and setState with the useState.&lt;/p&gt;

&lt;h2&gt;Dispatch actions :&lt;/h2&gt;

&lt;p&gt;Every time the user clicks on &lt;code&gt;add to cart&lt;/code&gt; button, &lt;code&gt;addToCart&lt;/code&gt; function will be called to &lt;strong&gt;dispatch&lt;/strong&gt; the action to the reducer function to do some changes in that state.&lt;br&gt;
So, the &lt;code&gt;addToCart&lt;/code&gt; function will contains the following code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addToCart= () =&amp;gt; {
        dispatch({
            type: 'ADD_TO_CART',
            item: {
                image,
                name
            }
        })
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We sent the action name to the reducer function to know what kind of changes will be happened, in this case the action is &lt;code&gt;ADD_TO_CART&lt;/code&gt; action. Also we sent the item or the product which user need to add to the card to be added to the &lt;code&gt;state.cart&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;Product.js&lt;/code&gt; component will be :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useReducer} from 'react'
import reducer, {initialState} from './Reducer';

function Product({ name, image }) {
    const [state, dispatch] = useReducer(reducer, initialState) ;
    const addToCart= () =&amp;gt; {
        dispatch({
            type: 'ADD_TO_CART',
            item: {
                image,
                name
            }
        })
    }
    return (
        &amp;lt;div className="product"&amp;gt;
            &amp;lt;img src={`${image}`} /&amp;gt;
            &amp;lt;p&amp;gt;{name}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={addToCart}&amp;gt;add to cart&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Product

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We will be satisfied with ADD_TO_CART, others actions will be the same but with deferent functionality&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Accessing state&lt;/h2&gt;

&lt;p&gt;Now you can accessing the state and make on it anything you want like mapping cart array and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;useReducer Hook is extremely useful when working on complex and different states depend on each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useReducer is very similar to Redux if you want to not use a 3rd-party library or if it's only for a component or two.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this article helped you to understand useReducer hook what is exactly.&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙌&lt;br&gt;
-Ahmad Mukahal&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The future is JAMstack</title>
      <author>Tabassum Khanum</author>
      <pubDate>Sun, 05 Sep 2021 13:02:40 +0000</pubDate>
      <link>https://dev.to/codewithtee/the-future-is-jamstack-2ld</link>
      <guid>https://dev.to/codewithtee/the-future-is-jamstack-2ld</guid>
      <description>&lt;p&gt;JAMstack is a revolutionary new architecture introduced by Mathias Biilman, CEO at Netlify. Designed to make the web faster, to support the new tools and workflows used in modern development. JAMstack implies the combination of three basic elements: &lt;strong&gt;JavaScript, API &amp;amp; Markup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOSLWU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2020/02/jamstack-breakdown-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOSLWU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2020/02/jamstack-breakdown-3.jpg" alt="jamstack full form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;br&gt;
Dynamic functionalities are handled by JavaScript. There is no restriction on which framework or library you must use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;br&gt;
Server side operations are abstracted into reusable APIs and accessed over HTTPS with JavaScript. These can be third party services or your custom function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Markup&lt;/em&gt;&lt;br&gt;
Websites are served as static HTML files. These can be generated from source files, such as Markdown, using a Static Site Generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem with the legacy web&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" alt="old architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A traditional website is actually a program that has to run on a web server at all times.&lt;/p&gt;

&lt;p&gt;Running sites this way needlessly slows things down, provides way too many opportunities for attack, and is expensive to scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of JAMstack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Faster performance&lt;/em&gt;&lt;br&gt;
Serve pre-built markup and assets over a CDN.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More secure&lt;/em&gt;&lt;br&gt;
No need to worry about server or database vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Less expensive&lt;/em&gt;&lt;br&gt;
Hosting of static files is cheap or even free.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Better developer experience&lt;/em&gt;&lt;br&gt;
Front end developers can focus on the front end, without being tied to a monolithic architecture. This usually means quicker and more focused development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Scalability&lt;/em&gt;&lt;br&gt;
If your product suddenly goes viral and has many active users, the CDN seamlessly compensates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workflow&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code and push it to a source repository&lt;/li&gt;
&lt;li&gt;Design prebuilt content&lt;/li&gt;
&lt;li&gt;Ship built files to CDN (Content Delivery Network).&lt;/li&gt;
&lt;li&gt;A user requests a page (there is no need to interact with the origin server because the prebuilt content is available from CDN)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi68mran--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mobidev.biz/wp-content/uploads/2021/07/jamstack-workflow.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi68mran--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mobidev.biz/wp-content/uploads/2021/07/jamstack-workflow.jpg" alt="overflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As regards core updates, they are pushed through Git. This allows re-building the site via up-to-date tools. Static site generators like Gatsby or Hugo are good examples of such tools because they form an integral part of the JAMstack approach.&lt;br&gt;
World-renowned companies like Mozilla, Nike, Smashing Magazine are using JAMstack. A reason why they’re choosing this solution differs. The primary factor is to reduce reliance on a server by means of solving tasks on the client-side, accelerating load and improving performance.&lt;/p&gt;

&lt;p&gt;According to Netlify’s survey, typical business use cases for Jamstack include consumer software – 45%, internal tooling – 36%, and enterprise software – 35% (the total volume is higher than 100% because respondents could select multiple options).&lt;/p&gt;

&lt;p&gt;JAMstack is great for providing high availability for large sites serving millions of users yearly. But it’s not suitable for web application development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JAMstack Projects&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.nexxus.com/us/en/"&gt;Nexxus&lt;/a&gt;&lt;br&gt;
&lt;a href="//www.panmacmillan.com"&gt;Pan Macmillian&lt;/a&gt;&lt;br&gt;
&lt;a href="//covidtracking.com"&gt;Covid Tracking Project&lt;/a&gt;&lt;br&gt;
&lt;a href="//docs.citrix.com"&gt;Citrix product documentation&lt;/a&gt; &lt;br&gt;
&lt;a href="//www.butcherbox.com"&gt;Butcher Box&lt;/a&gt;&lt;br&gt;
&lt;a href="//www.victoriabeckhambeauty.com"&gt;Victoria Beckham Beauty&lt;/a&gt;&lt;br&gt;
&lt;a href="https://jamstack.org/examples/"&gt;more...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://www.netlify.com/jamstack/"&gt;Mathias Biilmann (CEO &amp;amp; Co-founder of Netlify).&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
