<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Votre première introduction à Django REST Framework</title>
      <author> Eric Le Codeur</author>
      <pubDate>Wed, 01 Sep 2021 12:06:11 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/votre-premiere-introduction-a-django-rest-framework-j8k</link>
      <guid>https://dev.to/ericlecodeur/votre-premiere-introduction-a-django-rest-framework-j8k</guid>
      <description>&lt;p&gt;Suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
Un développeur web digne de ce nom ce dois d'être capable de créer un REST API. Cet article vous permettra de comprendre tout ce qu'il y a à savoir pour permettre de créer votre premier API à l'aide du langage Python et de Django REST Framework.
&lt;h1&gt;
  &lt;a href="#questce-quune-api-"&gt;
  &lt;/a&gt;
  Qu'est-ce qu'une API ?
&lt;/h1&gt;

&lt;p&gt;API est l'acronyme d'Application Programming Interface (interface de programmation d'application), une solution logicielle qui permet à deux applications de communiquer entre elles. &lt;/p&gt;

&lt;p&gt;Dans le cas du développement web,  l'application qui s'exécute dans le navigateur appelé 'frontend' communique/envoi une requête au serveur appelé 'backend'&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#exemple"&gt;
  &lt;/a&gt;
  Exemple
&lt;/h3&gt;

&lt;p&gt;Supposons que l'application frontend désir la liste de tous les articles d'un blog, elle pourrait envoyer au serveur une requêtes HTTP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://www.myblog.com/posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le serveur Django va traiter cette requête, lire la base de donnée et va retourner la liste des articles en format JSON (texte structuré). Cette liste pourrait ensuite être traité et affiché dans l'application frontend.&lt;/p&gt;

&lt;p&gt;Comment Django peut-il savoir comment traiter cette requête ? En faite, il ne le peut pas. Il ne sera pas quoi faire de la requête. C'est pourquoi nous devons créer une API. C’est-à-dire une application serveur qui déterminera comment répondre à différentes requêtes à propos d'une ressource spécifique. Dans ce cas-ci les articles du blog.&lt;/p&gt;

&lt;p&gt;À noter que toutes les requêtes au serveurs se font via des actions HTTP. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requ%C3%AAtes-http"&gt;
  &lt;/a&gt;
  Requêtes HTTP
&lt;/h3&gt;

&lt;p&gt;Indiquent l'action que l'on souhaite réaliser sur la ressource indiquée. Bien qu'on rencontre également des noms (en anglais), ces méthodes sont souvent appelées verbes HTTP&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-les-actionsverbes-http-les-plus-souvent-utilis%C3%A9es"&gt;
  &lt;/a&gt;
  Voici les actions/verbes HTTP les plus souvent utilisées
&lt;/h3&gt;

&lt;p&gt;GET : &lt;br&gt;
La méthode GET demande une représentation de la ressource spécifiée. Les requêtes GET doivent uniquement être utilisées afin de récupérer des données.&lt;/p&gt;

&lt;p&gt;POST : &lt;br&gt;
La méthode POST est utilisée pour envoyer une entité vers la ressource indiquée. Cela  entraîne généralement un changement d'état ou des effets de bord sur le serveur.&lt;/p&gt;

&lt;p&gt;PUT : &lt;br&gt;
La méthode PUT remplace toutes les représentations actuelles de la ressource visée par le contenu de la requête.&lt;/p&gt;

&lt;p&gt;PATCH : &lt;br&gt;
La méthode PATCH est utilisée pour appliquer des modifications partielles à une ressource.&lt;/p&gt;

&lt;p&gt;DELETE : &lt;br&gt;
La méthode DELETE supprime la ressource indiquée.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fin-de-la-th%C3%A9orie"&gt;
  &lt;/a&gt;
  Fin de la théorie
&lt;/h3&gt;

&lt;p&gt;La théorie c’est bien beau mais il est beaucoup plus facile de comprendre un concept en le mettant en pratique.&lt;/p&gt;

&lt;p&gt;Nous allons donc dans les sections qui suivent créer un API REST avec Django&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#pr%C3%A9requis-installation-de-python-et-django"&gt;
  &lt;/a&gt;
  Pré-requis : Installation de Python et Django.
&lt;/h1&gt;

&lt;p&gt;La dernière version de Python peut être téléchargé ici : &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suivre les instructions sur ce site selon votre système d'exploitation (MAC, Windows ou Linux)&lt;/p&gt;

&lt;p&gt;Pour vérifier si Python est correctement installé vous pouvez exécuter cette commande à partir de votre terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="c1"&gt;# Python 3.9.6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#environnement-virtuel"&gt;
  &lt;/a&gt;
  Environnement virtuel
&lt;/h3&gt;

&lt;p&gt;Lorsque l'on travaille sur un projet Python, on est amené à travailler avec plusieurs librairies comme Django et Django REST Framework. &lt;/p&gt;

&lt;p&gt;Selon la date de création du projet. Il est possible par exemple que la librairie Django REST Framework ne soit pas exactement au même no de version dans les autres projets.&lt;/p&gt;

&lt;p&gt;Comment faire pour permettre à chaque projet d'avoir sa propre version de Python et ses propres versions de librairies ?&lt;/p&gt;

&lt;p&gt;Nous allons utiliser les environnements virtuels.&lt;/p&gt;

&lt;p&gt;Python met à votre disposition un système qui permet de créer des environnements virtuels. &lt;/p&gt;

&lt;p&gt;Une fois l'environnement créé et activé, toutes les librairies installées pourront être utilisé seulement dans l'environnement auquel ils appartiennent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-cr%C3%A9er-un-environnement-virtuel"&gt;
  &lt;/a&gt;
  Comment créer un environnement virtuel
&lt;/h3&gt;

&lt;p&gt;Normalement nous plaçons un environnement virtuel dans le dossier du projet.&lt;/p&gt;

&lt;p&gt;Créer et accéder à un dossier pour notre projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir myblog
cd myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À partir de ce dossier vous pouvez maintenant créer l'environnement virtuel qui sera attaché au projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -m venv env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici on lance python3 avec l'option module venv (-m venv). env est le nom que l'on donne à notre environnement virtuel.&lt;/p&gt;

&lt;p&gt;Une fois créer vous pouvez l'activer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source env/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà c'est tout ! Vous avez maintenant un environnement virtuel Python créer pour votre projet. Normalement le terminal vous indiquera que votre environnement est activé en affichant son nom.&lt;/p&gt;

&lt;p&gt;À noter que pour désactiver l'environnement virtuel vous devez exécuter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;desactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installation-de-django"&gt;
  &lt;/a&gt;
  Installation de Django
&lt;/h3&gt;

&lt;p&gt;À partir du dossier projet myblog et avec l'environnement virtuel activé exécuter la commande d'installation suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;et&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install djangorestframework
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En faite à partir de ce point, chaque fois que je vous demanderai d'exécuter une commande dans le terminal, je vais présumer que vous êtes dans le dossier du projet 'myblog' et que l'environnement virtuel est activé&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cr%C3%A9ation-du-projet"&gt;
  &lt;/a&gt;
  Création du projet
&lt;/h3&gt;

&lt;p&gt;Django permet de créer une configuration de projet et ensuite plusieurs applications associées à ce projet.&lt;/p&gt;

&lt;p&gt;Par exemple le projet 'myblog' pourrait avoir une application pour la gestion des articles et une autre application pour la gestion des commentaires.&lt;/p&gt;

&lt;p&gt;Chaque application partage la même configuration de projet.&lt;/p&gt;

&lt;p&gt;Il existe une commande Django permettant de créer une configuration de projet.&lt;/p&gt;

&lt;p&gt;Exécuter la commande suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject config .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La commande 'startproject' permet de créer une configuration de projet portant le nom 'config'. Le point '.' spécifie que nous voulons que le projet soit créer dans le dossier en cours&lt;/p&gt;

&lt;p&gt;Il peut vous sembler étrange que le nom 'config' fut choisie pour le projet. En faite, c'est logique, car il  s'agit de la configuration du projet. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cr%C3%A9ation-de-lapplication"&gt;
  &lt;/a&gt;
  Création de l'application
&lt;/h3&gt;

&lt;p&gt;Le projet 'config' est seulement la partie configuration. Pour ajouter des fonctions à votre application, vous devez créer une ou des applications. &lt;/p&gt;

&lt;p&gt;Pour ce faire exécuter cette commande :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;djangoadmin startapp posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La commande 'startapp' permet de créer une application portant le nom 'posts' (articles). C'est dans cette application que nous allons créer notre API.&lt;/p&gt;

&lt;p&gt;Le projet 'config' et l'application 'posts' ont été créer avec une structure de dossier et des fichiers.&lt;/p&gt;

&lt;p&gt;Voici un exemple des fichiers créé :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oLizia3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630084492552/Eu03meXBE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oLizia3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630084492552/Eu03meXBE.png" alt="Screen Shot 2021-08-27 at 1.14.38 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tous ces dossiers et fichiers peuvent sembler exhaustif, mais ne vous en faite pas, ils sont là pour simplifier le développement de l'application. Je vais les expliquer un à un en temps et lieu.&lt;/p&gt;

&lt;p&gt;Dernier petit point, nous devons ajouter les lignes de code suivantes au fichier de configuration du projet 'config' settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# config/settings/py

INSTALLED_APPS = [
    ...
    ...

    'rest_framework',
    'rest_framework.authtoken',
    'posts',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici nous indiquons au projet que nous désirons utiliser ces trois applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rest_framework: nous permettra de créer notre API&lt;/li&gt;
&lt;li&gt;rest_framework.authtoken: nous permettra d'ajouter une sécurité à notre API&lt;/li&gt;
&lt;li&gt;posts indique à Django d'utiliser notre application posts&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cr%C3%A9ation-notre-premier-lapi"&gt;
  &lt;/a&gt;
  Création notre premier l'API
&lt;/h1&gt;

&lt;p&gt;La première étape est de créer le modèle de donnée Django qui contiendra nos articles&lt;/p&gt;

&lt;p&gt;Ouvrez le fichier 'models.py' dans le dossier de l'application 'posts' et saisir le code suivant&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# posts/models.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;

&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;created_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À noter qu'avec chaque projet Django il y a un modèle User et des librairies d'authentification créer automatiquement. Le modèle User contient entre autre les champs: username, email, first_name, last_name et password.&lt;/p&gt;

&lt;p&gt;Nous utilisons  'User = get_user_model()' afin de récupérer la référence vers ce modèle. &lt;/p&gt;

&lt;p&gt;Enfin, ce fichier 'models.py' servira d'instruction à Django  pour la création d'une base de donnée qui contiendra une table et des champs avec les mêmes définitions que dans ce fichier.&lt;/p&gt;

&lt;p&gt;Pour créer la base de donnée, il faut créer un fichier de migration. Le fichier de migration est le plan, le "blueprint" de ce que doit contenir la base de donnée.&lt;/p&gt;

&lt;p&gt;Django permet de créer automatiquement ce fichier de migration avec la commande suivante&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py makemigrations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une fois le fichier de migration créer, nous pouvons l'exécuter et Django va créer une base de donnée avec les instructions contenue dans la migration.&lt;/p&gt;

&lt;p&gt;La commande pour lancer la migration est la suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enfin, il est nécessaire de créer notre premier utilisateur. Django met à notre disposition une commande pour créer un super utilisateur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette commande vous demandera le username, email et password pour ensuite créer le user&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ajouter-le-mod%C3%A8le-post-%C3%A0-ladmin-panel"&gt;
  &lt;/a&gt;
  Ajouter le modèle Post à l'admin panel
&lt;/h2&gt;

&lt;p&gt;Pour utiliser le modèle Post à partir de l'Admin Panel de Django vous devez ajouter le code suivant&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# posts/admin.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;posts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visiter-ladmin-panel"&gt;
  &lt;/a&gt;
  Visiter l'Admin Panel
&lt;/h2&gt;

&lt;p&gt;Afin de s'assurer que tout ce que nous avons fait a fonctionné, lancer serveur et visiter l'Admin Panel&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La commande runserver va lancer un serveur Django&lt;/p&gt;

&lt;p&gt;Pour accéder à l'Admin Panel, visitez la l'adresse :  &lt;a href="http://127.0.0.1:8000/admin/"&gt;http://127.0.0.1:8000/admin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Une page vous demandera username et password&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iqE9WFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630325697926/zco8g0Her.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iqE9WFr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630325697926/zco8g0Her.png" alt="Screen Shot 2021-08-30 at 8.14.07 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ensuite vous devriez voir une page avec les tables Groups, Users, et Posts&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBC8bAGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630325709787/bmhjCnvHa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBC8bAGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630325709787/bmhjCnvHa.png" alt="Screen Shot 2021-08-30 at 8.14.33 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#comprendre-la-logique-de-django-restframework"&gt;
  &lt;/a&gt;
  Comprendre la logique de Django rest-framework
&lt;/h2&gt;

&lt;p&gt;Django rest-framework met à votre disposition des librairies qui permettent de créer un API de A à Z. Le rest-framework utilise une certaine logique qu'il vous faudra comprendre si vous désirez créer un API&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#questce-que-vous-d%C3%A9sirez-cr%C3%A9er-comme-api-"&gt;
  &lt;/a&gt;
  Qu'est-ce que vous désirez créer comme API ?
&lt;/h3&gt;

&lt;p&gt;L'API que nous désirons créer est en faite une interface pour lire, créer et modifier des articles (posts)&lt;/p&gt;

&lt;p&gt;Voici les 6 actions et chemins que nous voulons créer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lire la liste de tous nos articles :  GET api/posts&lt;/li&gt;
&lt;li&gt;Lire un article en particulier: GET api/posts/1&lt;/li&gt;
&lt;li&gt;Créer un article : POST api/posts&lt;/li&gt;
&lt;li&gt;Modifier un article : PUT api/posts/1&lt;/li&gt;
&lt;li&gt;Modifier partiellement un article : PATCH api/posts/1&lt;/li&gt;
&lt;li&gt;Effacer un article : DELETE api/posts/1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#format-d%C3%A9change-de-donn%C3%A9e"&gt;
  &lt;/a&gt;
  Format d'échange de donnée
&lt;/h3&gt;

&lt;p&gt;L'échange de donnée entre le backend et le frontend se fait sous format texte structuré au format JSON.&lt;/p&gt;

&lt;p&gt;Le rest-framework prévoit donc une conversion entre le format Django et un format compatible JSON. Cette conversion utilise la classe Serializer.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cr%C3%A9er-un-serializer"&gt;
  &lt;/a&gt;
  Créer un Serializer
&lt;/h3&gt;

&lt;p&gt;La première étape est donc de créer un serializer. Pour ce faire créer un fichier nommé serializers.py sous le dossier de l’application posts et ajouter ces lignes de code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# posts/serializers.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'__all__'&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà, ce n’est pas plus compliquer ! En faite, le gros du travail est fait par la librairie rest-framework. Ici, il suffit de mentionner quel modèle et quels champs nous désirons utiliser pour l'API. &lt;/p&gt;

&lt;p&gt;À noter qu'a la place de '&lt;strong&gt;all&lt;/strong&gt;' vous auriez pu spécifier le nom de chaque champ voulu&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cr%C3%A9er-la-view"&gt;
  &lt;/a&gt;
  Créer la view
&lt;/h3&gt;

&lt;p&gt;Une fois le serializer de créer, rien ne nous empêche de créer l'API pour le modèle Post&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apiview-vs-viewset"&gt;
  &lt;/a&gt;
  ApiView vs ViewSet
&lt;/h3&gt;

&lt;p&gt;Django REST Framework permet de créer la logique de notre API en utilisant deux techniques différentes :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apiview"&gt;
  &lt;/a&gt;
  ApiView
&lt;/h3&gt;

&lt;p&gt;Utiliser la classe ApiView est la technique la plus longue pour créer un API, mais elle permet une très grande personnalisation. Si vous avez des besoins particuliers, le ApiView est votre option de choix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewset"&gt;
  &lt;/a&gt;
  ViewSet
&lt;/h3&gt;

&lt;p&gt;Utiliser la classe ViewSet est la technique la plus rapide afin de créer un API basé sur un modèle Django lié à une base de donnée. La classe ViewSet va créer pour vous les 7 actions les plus souvent utilisées lorsque l'on crée un API: list, create, retreive, update, partial_update et destroy. C'est donc beaucoup plus rapide que créer chaque action manuellement comme avec les APIView. Par contre, si vous avez des besoins très particulier il ne sera pas possible de personnaliser votre API autant qu'avec les APIView&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apiview-ou-viewset-pour-notre-projet-"&gt;
  &lt;/a&gt;
  APIView ou ViewSet pour notre projet ?
&lt;/h3&gt;

&lt;p&gt;Étant donné que nous allons créer un API basé sur un modèle Django et que celui-ci sera sans vraiment de personnalisation,  j'ai choisi d'utiliser les ViewSet.&lt;/p&gt;

&lt;p&gt;À partir du fichier views.py dans le dossier de l’application posts. Saisir le code suivant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PostSerializer&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Encore une fois, vous avez une démonstration de la force de rest-framework. Il suffit de créer une view basé sur le 'ModelViewSet' et ensuite spécifier quel est le serializer et d'où proviendrons les données.&lt;/p&gt;

&lt;p&gt;Avec ce simple code vous aurez accès au 6 actions tous héritées du ModelViewSets et de ses 6 méthodes équivalente : list, create, retrieve, update, partial_update et destroy&lt;/p&gt;

&lt;p&gt;Une fois les 6 views disponible via PostViewSet il faut créer un chemin url pour chacune des 6 views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cr%C3%A9er-le-chemin-url"&gt;
  &lt;/a&gt;
  Créer le chemin URL
&lt;/h3&gt;

&lt;p&gt;Nous avons les views maintenant il ne reste plus qu'une étape et c'est de créer un chemin URL pour accéder à ces 6 actions.&lt;/p&gt;

&lt;p&gt;Encore là pas besoin de créer 6 routes manuellement, rest-framework met à notre disposition la classe Router.&lt;/p&gt;

&lt;p&gt;Créer un fichier urls.py sous le dossier de l'application posts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# posts/urls.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.routers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;

&lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DefaultRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ce code va créer les 6 chemin URL suivants:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /posts (affiche la list view)&lt;/li&gt;
&lt;li&gt;GET /posts/ 1 (affiche le post avec id=1)&lt;/li&gt;
&lt;li&gt;POST /posts (create)&lt;/li&gt;
&lt;li&gt;PUT /posts/1 (update)&lt;/li&gt;
&lt;li&gt;PATCH /posts/1 (partial update)&lt;/li&gt;
&lt;li&gt;DELETE /posts/1 (Destroy post avec id=1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La seule chose qui vous manque, c’est de relier ces routes à votre projet. Pour ce faire saisir le code suivant dans le fichier urls.py sous le projet config&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'api/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'profiles_api.urls'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Les routes créer sous posts/urls.py seront toutes utilisé sous l'url api/&lt;br&gt;
Ex. api/posts&lt;/p&gt;

&lt;p&gt;Enfin, il est temps de tester le tout en lançant le serveur&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visitez ensuite l'adresse: &lt;a href="http://127.0.0.1:8000/api"&gt;http://127.0.0.1:8000/api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vL0y90i1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630344714905/PuqVfi8d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vL0y90i1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630344714905/PuqVfi8d6.png" alt="Screen Shot 2021-08-30 at 1.31.01 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cette page est créé automatiquement par le rest-framework afin de vous permettre de tester votre API.&lt;/p&gt;

&lt;p&gt;Si vous cliquer sur l'API "posts". Une autre page s'ouvrira avec la liste de tous vos posts&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChculPbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630344783422/JzFBL_Z4W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChculPbo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630344783422/JzFBL_Z4W.png" alt="Screen Shot 2021-08-30 at 1.31.16 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il est maintenant possible à l'aide de cette interface rest-framework de tester les 6 actions et chemin urls que nous avons créé plus tôt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fin-de-la-premi%C3%A8re-partie"&gt;
  &lt;/a&gt;
  Fin de la première partie
&lt;/h3&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Dans la prochaine partie nous allons aborder l'authentification avec token et la protection de certaines actions/urls&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer cliqué Follow et/ou suivez-moi également sur Twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use Python to sum a list?</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 01 Sep 2021 12:01:51 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-python-to-sum-a-list-234e</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-python-to-sum-a-list-234e</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how we can use Python to find the &lt;code&gt;sum()&lt;/code&gt; of a list. We look at the various methods to do this along with their limitations. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-python-sum-list"&gt;
  &lt;/a&gt;
  Table of Contents - Python Sum List
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-sum-list"&gt;Using Sum to find the sum of a List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#how-to-use-the-raw-sum-endraw-function"&gt;How to use the sum() function?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-and-caveats-python-sum-list"&gt;Limitation and Caverts - Python Sum List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-sum-list"&gt;
  &lt;/a&gt;
  Python Sum List:
&lt;/h2&gt;

&lt;p&gt;While using Python, there are sure to be numerous use cases where you might have to calculate the sum of an iterable. For the purpose of this blog, we mainly focus on lists; however, the same method can be applied to other iterables as well.&lt;/p&gt;

&lt;p&gt;An example of a use case is the use of &lt;code&gt;sum()&lt;/code&gt; to return the sum of a list that contains the weekly income of employees to calculate monthly income.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-the-raw-sum-endraw-function"&gt;
  &lt;/a&gt;
  How to use the &lt;code&gt;sum()&lt;/code&gt; function?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;sum()&lt;/code&gt; function returns the sum of an iterable. &lt;code&gt;Sum()&lt;/code&gt; takes a list (iterable) and returns the sum of the numbers within the list. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-syntax-is-as-follows"&gt;
  &lt;/a&gt;
  The syntax is as follows:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Iterable&lt;/code&gt; - Required, iterable can be a list, tuples, and dictionary&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Start&lt;/code&gt; - Optional, if passed it the value will be added returned sum&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Using range to create list of numbers
&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;sum_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 45
&lt;/span&gt;
&lt;span class="c1"&gt;#Passing an argument as start
&lt;/span&gt;&lt;span class="n"&gt;sum_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output - 55
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the above code snippet, the &lt;code&gt;sum()&lt;/code&gt; function is used to add the values in the range that has been specified. You can similarly use the function for various operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-and-caveats-python-sum-list"&gt;
  &lt;/a&gt;
  Limitation and Caveats - Python Sum List
&lt;/h2&gt;

&lt;p&gt;A common error that arises while using the &lt;code&gt;sum()&lt;/code&gt; function, is when the list contains a string. Since it is not possible to add int values in strings, Python returns a &lt;code&gt;TypeError&lt;/code&gt;. Let us look at such an instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Creating a list of number and a string
&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;sum_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Python returns this output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"C:\Users\Python\Using_sum.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;sum_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unsupported&lt;/span&gt; &lt;span class="n"&gt;operand&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'int'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;'str'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As explained, the int value in the string causes the &lt;code&gt;TypeError&lt;/code&gt;. Other than this limitation, you can make use of the &lt;code&gt;sum()&lt;/code&gt; function in Python with ease for all summing operations.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Quick 10-Second Programming Joke For Today</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Wed, 01 Sep 2021 12:00:24 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/a-quick-10-second-programming-joke-for-today-11k1</link>
      <guid>https://dev.to/dailydeveloperjokes/a-quick-10-second-programming-joke-for-today-11k1</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1vfNh5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259a6b60d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1vfNh5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259a6b60d2.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Build a REST API with Go - For Beginners</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Wed, 01 Sep 2021 12:00:22 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/build-a-rest-api-with-go-for-beginners-3gp</link>
      <guid>https://dev.to/karanpratapsingh/build-a-rest-api-with-go-for-beginners-3gp</guid>
      <description>&lt;p&gt;In this article, we will build a simple REST CRUD API with Go.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bFYZrEuEDLE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also created a video if you will like to follow along!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Let's initialize a simple Go project and to keep things simple we won't be connecting to any database in this article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the code from this article is available &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/go/crud"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init github.com/karanpratapsingh/tutorials/go/crud
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's create our &lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ touch main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I will also install &lt;a href="https://github.com/gorilla/mux"&gt;Mux&lt;/a&gt; which will help us with routing.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gorilla"&gt;
        gorilla
      &lt;/a&gt; / &lt;a href="https://github.com/gorilla/mux"&gt;
        mux
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A powerful HTTP router and URL matcher for building Go web servers with 🦍
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
gorilla/mux&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://godoc.org/github.com/gorilla/mux" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/36b483d6887a540490293976bc6cac080eee833c92cb0d894ea7f61cde4e4537/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f72696c6c612f6d75783f7374617475732e737667" alt="GoDoc"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/gorilla/mux" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ea1231fd473ab82923a3cb06ce5d52bac48d6114de28945ad4122ae4299e9803/68747470733a2f2f636972636c6563692e636f6d2f67682f676f72696c6c612f6d75782e7376673f7374796c653d737667" alt="CircleCI"&gt;&lt;/a&gt;
&lt;a href="https://sourcegraph.com/github.com/gorilla/mux?badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d584c269a1337aa5d286753677562618d385f765f1c6f9fbda2e6fa902f424a/68747470733a2f2f736f7572636567726170682e636f6d2f6769746875622e636f6d2f676f72696c6c612f6d75782f2d2f62616467652e737667" alt="Sourcegraph"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a62a5e2040257dd8787001ffa5d95964d7bc77024aa2ba3d94e64ec1e151228e/68747470733a2f2f636c6f75642d63646e2e7175657374696f6e61626c652e73657276696365732f676f72696c6c612d69636f6e2d36342e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/a62a5e2040257dd8787001ffa5d95964d7bc77024aa2ba3d94e64ec1e151228e/68747470733a2f2f636c6f75642d63646e2e7175657374696f6e61626c652e73657276696365732f676f72696c6c612d69636f6e2d36342e706e67" alt="Gorilla Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gorillatoolkit.org/pkg/mux" rel="nofollow"&gt;https://www.gorillatoolkit.org/pkg/mux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Package &lt;code&gt;gorilla/mux&lt;/code&gt; implements a request router and dispatcher for matching incoming requests to
their respective handler.&lt;/p&gt;
&lt;p&gt;The name mux stands for "HTTP request multiplexer". Like the standard &lt;code&gt;http.ServeMux&lt;/code&gt;, &lt;code&gt;mux.Router&lt;/code&gt; matches incoming requests against a list of registered routes and calls a handler for the route that matches the URL or other conditions. The main features are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It implements the &lt;code&gt;http.Handler&lt;/code&gt; interface so it is compatible with the standard &lt;code&gt;http.ServeMux&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Requests can be matched based on URL host, path, path prefix, schemes, header and query values, HTTP methods or using custom matchers.&lt;/li&gt;
&lt;li&gt;URL hosts, paths and query values can have variables with an optional regular expression.&lt;/li&gt;
&lt;li&gt;Registered URLs can be built, or "reversed", which helps maintaining references to resources.&lt;/li&gt;
&lt;li&gt;Routes can be used as subrouters: nested routes are only tested if the parent route matches. This is useful to define groups of routes that share common conditions…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gorilla/mux"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hello world&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
  &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API is running!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":4000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's run our app!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#organize"&gt;
  &lt;/a&gt;
  Organize
&lt;/h2&gt;

&lt;p&gt;Before proceeding further, let's organize our code because we don't want to write all the code in &lt;code&gt;main.go&lt;/code&gt;. We will create the following project structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── cmd
│   └── main.go
├── pkg
│    ├── handlers
│    │   ├── AddBook.go
│    │   ├── DeleteBook.go
│    │   ├── GetAllBooks.go
│    │   ├── GetBook.go
│    │   └── UpdateBook.go
│    ├── mocks
│    │   └── book.go
│    └── models
│        └── book.go
├── go.sum
└── go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: This is just a sample structure, feel free to create our own project structure if you like!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cmd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's move our &lt;code&gt;main.go&lt;/code&gt; to &lt;code&gt;cmd&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/handlers"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Here we'll define our api endpoints&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API is running!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":4000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's define our Book model at &lt;code&gt;pkg/models/book.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt;     &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
    &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
    &lt;span class="n"&gt;Desc&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"desc"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Mocks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create our mocks &lt;code&gt;pkg/mocks/book.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;mocks&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/models"&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;"Golang"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Gopher"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Desc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"A book for Go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handlers"&gt;
  &lt;/a&gt;
  Handlers
&lt;/h2&gt;

&lt;p&gt;Now, let's start defining our handlers!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get all Books&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add our endpoint to &lt;code&gt;cmd/main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new handler &lt;code&gt;pkg/handlers/GetBooks.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this handler, we'll simply return all our mock books.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/mocks"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server and try it out in Postman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should print all the books we have, currently, it should print our mock books&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7-s5-8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474069-763d8206-ff7f-4acb-803e-7326251b5320.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7-s5-8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474069-763d8206-ff7f-4acb-803e-7326251b5320.png" alt="get-books"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add a new Book&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add our endpoint to &lt;code&gt;cmd/main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new handler &lt;code&gt;pkg/handlers/AddBook.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this handler we'll do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read to request body&lt;/li&gt;
&lt;li&gt;Append to the Book mocks&lt;/li&gt;
&lt;li&gt;Send a &lt;code&gt;201 created&lt;/code&gt; response
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"math/rand"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/mocks"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;AddBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read to request body&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Append to the Book mocks&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Intn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Send a 201 created response&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCreated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Created"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server and try it out in Postman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should be able to add a new book by providing &lt;code&gt;json&lt;/code&gt; body&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c46zjiDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474103-1c9ecf7e-7a7d-492a-9a5b-3beb2ff704f8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c46zjiDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474103-1c9ecf7e-7a7d-492a-9a5b-3beb2ff704f8.png" alt="add-book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get a Book by Id&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add our endpoint to &lt;code&gt;cmd/main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new handler &lt;code&gt;pkg/handlers/GetBook.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this handler we'll do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read dynamic id parameter&lt;/li&gt;
&lt;li&gt;Iterate over all the mock books&lt;/li&gt;
&lt;li&gt;If ids are equal send book as a response
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/mocks"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Iterate over all the mock books&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// If ids are equal send book as a response&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server and try it out in Postman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edUwGLdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474110-8de676ba-3231-4b3c-b741-b426f3707f40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edUwGLdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474110-8de676ba-3231-4b3c-b741-b426f3707f40.png" alt="get-book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update a Book by Id&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add our endpoint to &lt;code&gt;cmd/main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new handler &lt;code&gt;pkg/handlers/UpdateBook.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this handler we'll do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read dynamic id parameter&lt;/li&gt;
&lt;li&gt;Read request body&lt;/li&gt;
&lt;li&gt;Iterate over all the mock Books&lt;/li&gt;
&lt;li&gt;Update and send a response when book Id matches dynamic Id
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/mocks"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;UpdateBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Read request body&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Iterate over all the mock Books&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// Update and send a response when book Id matches dynamic Id&lt;/span&gt;
            &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;
            &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;
            &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Desc&lt;/span&gt;

            &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;

            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server and try it out in Postman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYLNxl9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474112-9f3e8036-abe4-426e-b91e-826b654879dd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYLNxl9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474112-9f3e8036-abe4-426e-b91e-826b654879dd.png" alt="update-book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Delete a Book by Id&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add our endpoint to &lt;code&gt;cmd/main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDelete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new handler &lt;code&gt;pkg/handlers/DeleteBook.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this handler we'll do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the dynamic id parameter&lt;/li&gt;
&lt;li&gt;Iterate over all the mock Books&lt;/li&gt;
&lt;li&gt;Delete book and send a response if the book Id matches dynamic Id
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/karanpratapsingh/tutorials/go/crud/pkg/mocks"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DeleteBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read the dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Iterate over all the mock Books&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// Delete book and send a response if the book Id matches dynamic Id&lt;/span&gt;
            &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;mocks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deleted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server and try it out in Postman&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V_JVx_3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474108-0c33f982-da37-4148-a553-477c2c865a1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V_JVx_3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/131474108-0c33f982-da37-4148-a553-477c2c865a1e.png" alt="delete-book"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;So, we built a basic CRUD API with Go! Our next step could be to connect our API with a real DB like PostgreSQL, which we will look into in the next part!&lt;/p&gt;

&lt;p&gt;As mentioned above, the code is available &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/go/crud"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this was helpful, as always feel free to reach out if you face any issues.&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to set up CodeBuild  test reports in CDK Pipelines (C#)</title>
      <author>Oksana Horlock</author>
      <pubDate>Wed, 01 Sep 2021 11:52:54 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-set-up-codebuild-test-reports-in-cdk-pipelines-c-465p</link>
      <guid>https://dev.to/aws-builders/how-to-set-up-codebuild-test-reports-in-cdk-pipelines-c-465p</guid>
      <description>&lt;p&gt;I'm so happy to get into writing again - we’ve had a few challenging months: we had to self-isolate several times, the whole family was ill with a stomach bug, and our son is going through the terrible twos. So blogging, talks and working on professional development had to be put on the backburner.&lt;/p&gt;

&lt;p&gt;I finally had some time to finish writing this blog post about CDK Pipelines I had been working on probably since the beginning of the year. I had been trying to figure out how to make CodeBuild test reports work with CDK Pipelines. Last week when I got back to this and started working on it again, I saw that the API that was used in Developer Preview has been updated (more information on it &lt;a href="https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/pipelines/ORIGINAL_API.md"&gt;here&lt;/a&gt;). And now it looks like it is easier to plug in the reports to be used with this high level construct. While the old API is still in use, I will focus on the new API.&lt;/p&gt;

&lt;p&gt;The purpose of this blog post is to demonstrate the set-up of CodeBuild test reports in CDK Pipelines for C#.&lt;/p&gt;

&lt;p&gt;I have written a simple .NET Core application which returns the day of the week when you pass in a date in the query string. There are also a couple of XUnit tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public class UnitTests
{
    [Fact]
    public void DateInPast_ReturnsCorrectResult()
    {
        var controller = new HomeController();
        var date = new DateTime(1983, 2, 3);
        var expected = $"{String.Format("{0:d}", date)} was Thursday";
        var actual = controller.Get(date) as OkObjectResult;
        Assert.Equal(expected, actual.Value);
    }

    [Fact]
    public void DateInFuture_ReturnsCorrectResult()
    {
        var controller = new HomeController();
        var date = new DateTime(2033, 12, 9);
        var expected = $"{String.Format("{0:d}", date)} will be Friday";            
        var actual = controller.Get(date) as OkObjectResult;
        Assert.Equal(expected, actual.Value);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file tree looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lD8LxW-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4gnjtmrxmgwoxyuol0.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lD8LxW-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4gnjtmrxmgwoxyuol0.JPG" alt="file tree"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LjCkxlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32fvyz5h6nl5rllm94u.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LjCkxlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32fvyz5h6nl5rllm94u.JPG" alt="file tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the task of creating CodeBuild test reports only without actually deploying the app, we will only work with &lt;em&gt;CdkPipelinesPipelineStack.cs&lt;/em&gt;. In my case this was the file created automatically on &lt;code&gt;cdk init&lt;/code&gt;, and it will contain the main pipeline.&lt;/p&gt;

&lt;p&gt;Firstly, before we build the pipeline, we need to create a connection to our Github repo and get its ARN. I wrote a post about it a while back – &lt;a href="https://oxiehorlock.com/2021/03/15/cdk-pipelines-and-github-fun/"&gt;AWS CDK Adventure Part 2: CDK Pipelines and GitHub fun&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;namespace CdkPipelines
{
    public class CdkPipelinesPipelineStack : Stack
    {
        internal CdkPipelinesPipelineStack(Construct scope, string id, IStackProps props = null) : base(scope, id, props)
        {
            var connectionArn = "arn:aws:codestar-connections:eu-west-1:01234567890:connection/12ae43b8-923e-4a01-ba4e-274454669859";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then create a report group:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var reportGroup = new ReportGroup(this, "MyReports", new ReportGroupProps
{
    ReportGroupName = "MyReports"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, we use the &lt;em&gt;CodePipeline&lt;/em&gt; construct in the &lt;em&gt;Amazon.CDK.Pipelines&lt;/em&gt; namespace to create the pipeline. If we didn’t want to have any CodeBuild reports, we would set up the pipeline like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var pipeline = new Amazon.CDK.Pipelines.CodePipeline(this, "WhatDayOfWeekPipeline", new CodePipelineProps
{
    PipelineName = "WhatDayOfWeekPipeline",
    SelfMutation = false,
    Synth = new ShellStep("synth", new ShellStepProps()
    {
        Input = CodePipelineSource.Connection("OksanaH/CDKPipelines", "main", new ConnectionSourceOptions()
        {
            ConnectionArn = connectionArn
        }),
        InstallCommands = new string[] { "npm install -g aws-cdk" },
        Commands = new string[] { 
            "cd App", "dotnet restore WhatDayOfWeekTests/WhatDayOfWeekTests.csproj",
            "dotnet test -c release WhatDayOfWeekTests/WhatDayOfWeekTests.csproj --logger trx --results-directory ./testresults",
            "cd ..", 
            "cdk synth" }
    })
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the &lt;em&gt;CodePipelineProps&lt;/em&gt; is &lt;em&gt;SelfMutation&lt;/em&gt;: when set to false, it’s quite handy when doing development work – you can just run &lt;code&gt;cdk deploy&lt;/code&gt; and your local changes to the pipeline will be deployed bypassing the GitHub repo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Synth&lt;/em&gt; property is used to set up the pipeline to pull from the GitHub repo, and also run the commands needed to produce the cloud assembly.&lt;/p&gt;

&lt;p&gt;In order to set up the reports, we need to customize the CodeBuild project, and it can be done by using &lt;em&gt;CodeBuildStep&lt;/em&gt; class instead of &lt;em&gt;ShellStep&lt;/em&gt;. &lt;em&gt;CodeBuildStepProps&lt;/em&gt; class, in turn, has a &lt;em&gt;PartialBuildSpec&lt;/em&gt; property, which we can use to define the reports. The reports part of a &lt;em&gt;buildspec.yml&lt;/em&gt; file usually looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 0.2
phases:
  ...

reports:
  XUnitTestResults:
    file-format: VisualStudioTrx
    files:
      - '**/*'
    base-directory: './testresults'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CDK for C# the value of &lt;em&gt;PartialBuildSpec&lt;/em&gt; has to be created using &lt;em&gt;Dictionary&lt;/em&gt;, and the reports bit translated to CDK is below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var reports = new Dictionary&amp;lt;string, object&amp;gt;()
{                
    {
        "reports", new Dictionary&amp;lt;string, object&amp;gt;()
        {
            {
                reportGroup.ReportGroupArn, new Dictionary&amp;lt;string,object&amp;gt;()
                {
                    { "file-format", "VisualStudioTrx" },
                    { "files", "**/*" },
                    { "base-directory", "App/testresults" }
                }
            }
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing that needs to be created to be able to work with CodeBuild test reports is a policy, otherwise you might see an error like this when you try to deploy the stack:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tixlRKQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wle1t074486fd5qt1tnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tixlRKQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wle1t074486fd5qt1tnh.png" alt="auth error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The policy allows several report-related actions on the report group we have created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var policyProps = new PolicyStatementProps()
{
    Actions = new string[] { 
        "codebuild:CreateReportGroup",
        "codebuild:CreateReport",
        "codebuild:UpdateReport",
        "codebuild:BatchPutTestCases",
        "codebuild:BatchPutCodeCoverages" 
    },
    Effect = Effect.ALLOW,
    Resources = new string[] { reportGroup.ReportGroupArn }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we can define necessary &lt;em&gt;CodeBuildStepProps&lt;/em&gt; to set up reports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var step = new CodeBuildStep("Synth", new CodeBuildStepProps
{
    Input = CodePipelineSource.Connection("OksanaH/CDKPipelines", "main", new ConnectionSourceOptions()
    {
        ConnectionArn = connectionArn
    }),
    PrimaryOutputDirectory = "cdk.out",
    InstallCommands = new string[] { "npm install -g aws-cdk" },
    Commands = new string[] { 
        "cd App", 
        "dotnet restore WhatDayOfWeekTests/WhatDayOfWeekTests.csproj",                        
        "dotnet test -c release WhatDayOfWeekTests/WhatDayOfWeekTests.csproj --logger trx --results-directory ./testresults",
        "cd ..",
        "cdk synth"  
    },
    PartialBuildSpec = BuildSpec.FromObject(reports),
    RolePolicyStatements = new PolicyStatement[] { new PolicyStatement(policyProps) }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, what is left to do is to use the &lt;em&gt;CodeBuildStep&lt;/em&gt; as the value of the &lt;em&gt;Synth&lt;/em&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var pipeline = new Amazon.CDK.Pipelines.CodePipeline(this, "WhatDayOfWeekPipeline", new CodePipelineProps
{
    PipelineName = "WhatDayOfWeekPipeline",
    Synth = step
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we can commit the changes, run &lt;code&gt;cdk deploy&lt;/code&gt; and check the CodeBuild test report in the console:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2S9J1SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmx98edcm5tsm3ar4ke6.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2S9J1SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmx98edcm5tsm3ar4ke6.JPG" alt="codebuild test reports"&gt;&lt;/a&gt;&lt;br&gt;
Beautiful!&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/cdk_pipeline.html"&gt;AWS Documentation on CDK Pipelines&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cdkworkshop.com/40-dotnet/70-advanced-topics/100-pipelines.html"&gt;CDK Workshop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/pipelines"&gt;CDK Pipelines in GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>cdk</category>
      <category>devops</category>
    </item>
    <item>
      <title>Deploying Multi-Node Kubernetes Cluster on AWS Using Ansible Automation</title>
      <author>Suraj Warbhe</author>
      <pubDate>Wed, 01 Sep 2021 11:31:55 +0000</pubDate>
      <link>https://dev.to/surajwarbhe/deploying-multi-node-kubernetes-cluster-on-aws-using-ansible-automation-1b7e</link>
      <guid>https://dev.to/surajwarbhe/deploying-multi-node-kubernetes-cluster-on-aws-using-ansible-automation-1b7e</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usecase"&gt;
  &lt;/a&gt;
  USE-CASE
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Create Ansible Playbook to launch 3 AWS EC2 Instance&lt;/li&gt;
&lt;li&gt;Create Ansible Playbook to configure Docker over those instances&lt;/li&gt;
&lt;li&gt;Create Playbook to configure K8S Master, K8S Worker Nodes on the above created EC2 Instances using kubeadm&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite-for-rhel8"&gt;
  &lt;/a&gt;
  Pre-requisite: (FOR RHEL-8)
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Controller node should be setup with ansible installation and configuration, when controller node is RHEL8&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;IAM&lt;/code&gt; user having Administrator Access and note down their &lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create one &lt;code&gt;Key pair&lt;/code&gt; in &lt;code&gt;(.pem)&lt;/code&gt; format on AWS Cloud, download it in your local system and transfer it over RHEL-8 through &lt;code&gt;WinSCP&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-1-ansible-installation-and-configuration"&gt;
  &lt;/a&gt;
  STEP 1 : Ansible Installation and Configuration
&lt;/h3&gt;

&lt;p&gt;Install Ansible on Base OS (RHEL8), configure ansible configuration file. &lt;br&gt;
To do this use below commands-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install python3 -y

pip3 install ansible -y

vim /etc/ansible/ansible.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: &lt;code&gt;Python&lt;/code&gt; should be installed on your OS to setup Ansible.&lt;br&gt;
Write below commands in your configuration &lt;code&gt;ansible.cfg&lt;/code&gt; file. For this you can prefer any editor like &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;gedit&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[defaults]
inventory=/root/ip.txt  #inventory path
host_key_checking=False
command_warnings=False
deprecation_warnings=False
ask_pass=False
roles_path= /root/roles      #roles path
force_valid_group_names = ignore
private_key_file= /root/awskey.pem   #your key-pair 
remote_user=ec2-user

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-create-ansible-roles"&gt;
  &lt;/a&gt;
  STEP 2 : Create Ansible Roles
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside your roles workspace&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use Below commands to create 3 different roles&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For Kubernetes Cluster&lt;/li&gt;
&lt;li&gt;For Kubernetes Master&lt;/li&gt;
&lt;li&gt;For Kubernetes Slaves
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-galaxy init &amp;lt;role_name&amp;gt;

ansible-galaxy init kube_cluster
ansible-galaxy init k8s_master
ansible-galaxy init k8s_slave
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-write-role-for-kubernetes-cluster"&gt;
  &lt;/a&gt;
  STEP 3 : Write role for Kubernetes Cluster
&lt;/h3&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 I am going to create cluster over &lt;code&gt;Amazon Linux instances&lt;/code&gt;.&lt;br&gt;
Write below source code inside it-&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: Installing boto &amp;amp; boto3 libraries
  pip:
    name: "{{ item }}"
    state: present
  loop: "{{ lib_names }}"

- name: Creating Security Group for K8s Cluster
  ec2_group:
    name: "{{ sg_name }}"
    description: Security Group for allowing all port
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    rules:
    - proto: all
      cidr_ip: 0.0.0.0/0
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0

- name: Launching three EC2 instances on AWS
  ec2:
    key_name: "{{ keypair }}"
    instance_type: "{{ instance_flavour }}"
    image: "{{ ami_id }}"
    wait: true
    group: "{{ sg_name }}"
    count: 1
    vpc_subnet_id: "{{ subnet_name }}"
    assign_public_ip: yes
    region: "{{ region_name }}"
    state: present
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    instance_tags:
      Name: "{{ item }}"
  register: ec2
  loop: "{{ instance_tag }}"

- name: Add 1st instance to host group ec2_master
    add_host:
    hostname: "{{ ec2.results[0].instances[0].public_ip }}"
    groupname: ec2_master

- name: Add 2nd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[1].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Add 3rd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[2].instances[0].public_ip }}"
    groupname: ec2_slave

- name: Waiting for SSH
  wait_for:
    host: "{{ ec2.results[2].instances[0].public_dns_name }}"
    port: 22
    state: started

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are using &lt;code&gt;pip&lt;/code&gt; module to install two packages — &lt;code&gt;boto&lt;/code&gt; &amp;amp; &lt;code&gt;boto3&lt;/code&gt;, because these packages has the capability to contact to AWS to launch the EC2 instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ec2_group&lt;/code&gt; module to create Security Group on AWS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ec2&lt;/code&gt; module to launch instance on AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;register&lt;/code&gt; keyword will store all the Metadata in a variable called &lt;code&gt;ec2&lt;/code&gt; so that in future we can parse the required information from it. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;loop&lt;/code&gt; which again using one variable which contains one list. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;item&lt;/code&gt; keyword we are calling the list values one after another.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_host&lt;/code&gt; module which has the capability to create one dynamic inventory while running the playbook. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; keyword tells the values to store in the dynamic host group.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;wait_for&lt;/code&gt; module to hold the playbook for few seconds till all the node’s SSH service started.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;access key&lt;/code&gt; and &lt;code&gt;secret key&lt;/code&gt; are stored inside &lt;code&gt;vault&lt;/code&gt; files to hide it from other users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔶 Go inside the vars folder. We have to write entire variables inside this folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can directly mention variables inside tasks file but it is good practice to write them inside &lt;code&gt;vars&lt;/code&gt; files so that we can change according to our requirements.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/kube_cluster/vars

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;instance_tag:
        - master
        - slave1
        - slave2

lib_names:
        - boto
        - boto3

sg_name: Allow_All_SG
region_name: ap-south-1
subnet_name: subnet-49f0e521
ami_id: ami-010aff33ed5991201
keypair: awskey
instance_flavour: t2.small
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-write-role-for-kubernetes-master"&gt;
  &lt;/a&gt;
  STEP 4 : Write role for Kubernetes Master
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s master-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm, kubelet &amp;amp; kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Ip tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting kubeadm service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting HOME directory for .kube Directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copying file config file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing Addons e.g flannel&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the token&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store output of token in a file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_master/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "systemctl"
  shell: "sysctl --system"

- name: "Starting kubeadm service"
  shell: "kubeadm init  --ignore-preflight-errors=all"

- name: "Creating .kube Directory"
  file:
     path: $HOME/.kube
     state: directory

- name: "Copying file config file"
  shell: "cp -i /etc/kubernetes/admin.conf $HOME/.kube/config"
  ignore_errors: yes

- name: "Installing Addons e.g flannel"
  shell: "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"

- name: "Creating the token"
  shell: "kubeadm token create --print-join-command"
  register: token

- debug:
       msg: "{{ token.stdout }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#explanation-of-source-code"&gt;
  &lt;/a&gt;
  Explanation of Source Code:
&lt;/h4&gt;

&lt;p&gt;1.We need to install &lt;code&gt;kubeadm&lt;/code&gt; program on our master node to setup K8s cluster.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are installing &lt;code&gt;Docker&lt;/code&gt;, &lt;code&gt;Kubeadm&lt;/code&gt; &amp;amp; &lt;code&gt;iproute-tc&lt;/code&gt; packages on our Master Instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;service&lt;/code&gt; module is used to start the docker &amp;amp; kubelet service. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;command&lt;/code&gt; module to run kubeadm command which will pull all the Docker Images required to run Kubernetes Cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to change our Docker default cgroup to &lt;code&gt;systemd&lt;/code&gt;, otherwise kubeadm won't be able to setup K8s cluster. To do that at first using &lt;code&gt;copy&lt;/code&gt; module we are creating one file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; &amp;amp; putting some content in it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module we are initializing the cluster &amp;amp; then using &lt;code&gt;shell&lt;/code&gt; module we are setting up &lt;code&gt;kubectl&lt;/code&gt; command on our Master Node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next using &lt;code&gt;command&lt;/code&gt; module I deployed &lt;code&gt;Flannel&lt;/code&gt; on the Kubernetes Cluster so that it create the overlay network setup.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the 2nd &lt;code&gt;command&lt;/code&gt; module is used to get the token for the slave node to join the cluster. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;register&lt;/code&gt; I stored the output of 2nd &lt;code&gt;command&lt;/code&gt; module in a variable called &lt;code&gt;token&lt;/code&gt;. Now this token variable contain the command that we need to run on slave node, so that it joins the master node.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-5-write-role-for-kubernetes-slaves"&gt;
  &lt;/a&gt;
  STEP 5 : Write role for Kubernetes Slaves
&lt;/h3&gt;

&lt;p&gt;🔶 Following are the steps which have to include in role for configuring the k8s slaves-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Installing docker and iproute-tc&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the Yum repo for Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installing kubeadm,kubelet kubectl program&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enabling the docker and Kubernetes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pulling the config images&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the docker daemon.json file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restarting the docker service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuring the IP tables and refreshing sysctl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the join command which we store while configuring master&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔶 Go inside the tasks folder. We have to write entire tasks inside this folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /roles/k8s_slave/tasks

vim main.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write below source code inside it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- name: "Installing docker and iproute-tc"
  package:
     name:
         - docker
         - iproute-tc
     state: present

- name: "Configuring the Yum repo for kubernetes"
  yum_repository:
     name: kubernetes
     description: Yum for k8s
     baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
     enabled: yes
     gpgcheck: yes
     repo_gpgcheck: yes
     gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubeadm,kubelet kubectl program"
  yum:
     name:
        - kubelet
        - kubectl
        - kubeadm
     state: present

- name: "Enabling the docker and kubenetes"
  service:
     name: "{{ item }}"
     state: started
     enabled: yes
  loop:
        - kubelet
        - docker

- name: "Pulling the config images"
  shell: kubeadm config images pull

- name: "Confuring the docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

- name: "Restarting the docker service"
  service:
     name: docker
     state: restarted

- name: "Configuring the Ip tables and refreshing sysctl"
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: "systemctl"
  shell: "sysctl --system"

- name: joining to Master
  command: "{{ hostvars[groups['ec2_master'][0]]['token']['stdout'] }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-write-ansible-vault-files"&gt;
  &lt;/a&gt;
  STEP 6 : Write Ansible Vault Files
&lt;/h3&gt;

&lt;p&gt;🔶 Go to your roles workspace&lt;br&gt;
🔶 Run below command and create vault file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ansible-vault create &amp;lt;filename&amp;gt;.yml

ansible-vault create cred.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 It will ask to provide one vault password &amp;amp; provide as per your choice.&lt;br&gt;
🔶 Then, open it with editor, create two variables in this file &amp;amp; put your AWS &lt;code&gt;access key&lt;/code&gt; &amp;amp; &lt;code&gt;secret key&lt;/code&gt; as values. &lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;access_key: ABCDEFGHIJKLMN
secret_key: abcdefghijklmn12345
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Save the file with command &lt;code&gt;(:wq)&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-create-setup-file"&gt;
  &lt;/a&gt;
  STEP 7 : Create Setup file
&lt;/h3&gt;

&lt;p&gt;Now it's finally the time to create the &lt;code&gt;setup.yml&lt;/code&gt; file inside same workspace which we gonna run to setup this entire infrastructure on AWS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- hosts: localhost
  gather_facts: no
  vars_files:
         - cred.yml
  tasks:
         - name: "Running kube_cluster role"
           include_role:
                name: kube_cluster


- hosts: ec2_master
  gather_facts: no
  tasks:
    - name: Running K8s_Master Role
      include_role:
        name: k8s_master

- hosts: ec2_slave
  gather_facts: no
  tasks:
    - name: Running K8s_Slave Role
      include_role:
        name: k8s_slave
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🔶 Write proper &lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;vault file name&lt;/code&gt; and &lt;code&gt;role name&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-7-run-your-ansible-playbook"&gt;
  &lt;/a&gt;
  STEP 7 : RUN your Ansible Playbook
&lt;/h3&gt;

&lt;p&gt;🔶 use below commands to run your ansible playbook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook setup.yml --ask-vault-pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔶 Next it will prompt you to pass the password of your Ansible Vault (cred.yml file), provide your password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X5koXwdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld3ws1d8924uk8my86jt.png" alt="root@localhost__roles 01-09-2021 02_48_38 PM"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_v9VMzyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgb8fos6gc47z1d042zb.png" alt="root@localhost__roles 01-09-2021 02_49_15 PM"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tn8d4EUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a77ho2409cm8gq3sh7kd.png" alt="root@localhost__roles 01-09-2021 02_49_46 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#yay-it-run-successfully-and-setup-entire-infrastructure"&gt;
  &lt;/a&gt;
  YAY!, IT RUN SUCCESSFULLY AND SETUP ENTIRE INFRASTRUCTURE
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyFtWs4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5ex40ovdf3i6bbhn6hh.png" alt="Connect to instance _ EC2 Management Console - Google Chrome 01-09-2021 02_57_17 PM"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-8-testing"&gt;
  &lt;/a&gt;
  STEP 8 : TESTING...
&lt;/h3&gt;

&lt;p&gt;🔶 Now lets check our multi-node cluster is using below commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl get nodes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A79PrMSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6nvsc2xhy6msybh71b4.png" alt="Select root@ip-172-31-35-184_~ 01-09-2021 02_53_32 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#here-we-can-see-our-who-cluster-is-launched-successfully-and-our-all-nodes-is-ready-phase"&gt;
  &lt;/a&gt;
  🔶 Here we can see our who cluster is launched successfully and our all nodes is ready phase.
&lt;/h6&gt;

&lt;p&gt;🔶 Now lets create a deployment on master node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl create deployment myd --image=httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WOJXS35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w9w3hjsnzg5xg3rvlkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WOJXS35--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w9w3hjsnzg5xg3rvlkg.png" alt="root@ip-172-31-35-184_~ 01-09-2021 02_57_06 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔶 here we can see our deployment is created successfully&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#github-link-httpsgithubcomsurajwarbhek8smasterslaveonaws"&gt;
  &lt;/a&gt;
  GitHub Link: &lt;a href="https://github.com/surajwarbhe/K8s-master-slave-on-aws"&gt;https://github.com/surajwarbhe/K8s-master-slave-on-aws&lt;/a&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#linkedin-profile-httpswwwlinkedincominsurajwarbhe"&gt;
  &lt;/a&gt;
  LinkedIn profile: &lt;a href="https://www.linkedin.com/in/suraj-warbhe/"&gt;https://www.linkedin.com/in/suraj-warbhe/&lt;/a&gt;
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hgxzl7Ad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yybi3w53tdcy9ct6uk38.gif" alt="68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f776174747061642d6d656469612d736572766963652f53746f7279496d6167652f69346776387341505f5f586746673d3d2d3931363135303430372e3136316636643238343363343039646134303138393"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ansible</category>
      <category>kubernetes</category>
      <category>aws</category>
      <category>ansiblegalaxy</category>
    </item>
    <item>
      <title>VueUse as must-have library for Vue 3</title>
      <author>Roman Harmyder</author>
      <pubDate>Wed, 01 Sep 2021 11:26:15 +0000</pubDate>
      <link>https://dev.to/harmyderoman/vueuse-as-must-have-library-for-vue-3-5o2</link>
      <guid>https://dev.to/harmyderoman/vueuse-as-must-have-library-for-vue-3-5o2</guid>
      <description>&lt;p&gt;For those who are unfamiliar with this &lt;a href="https://vueuse.org/"&gt;library&lt;/a&gt;, I advise you to try it, as it can de facto become the standard for use in Vue 3 projects, as, for example, once there was a lodash library for almost any js projects.&lt;br&gt;
Others have probably already checked out all the extensive functionality that it provides. Some have already used it in Vue 2, but not all new features support the old version. The library's arsenal is impressive, there are simple utilities like getting mouse coordinates, and various complex integrations with Firebase, Axios, Cookies, QR, local storage, browser, RxJS, animation, geolocation, extensions for standard Vue hooks, a media player and much more. Evan You himself is noted among the sponsors of the library, which seems to be a good sign. The library receives regular updates, bug fixes, and the community grows. So, it has everything for success.&lt;br&gt;
In this article I will only talk about 4 features, but, of course, all the others need attention.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-onclickoutside-endraw-clicks-outside-the-element"&gt;
  &lt;/a&gt;
  &lt;code&gt;onClickOutside&lt;/code&gt; - clicks outside the element
&lt;/h2&gt;

&lt;p&gt;I'm sure you can handle the installation of the library by yourself, so let's go straight to the interesting features. To warm up, consider a simple hook that tracks clicks outside a given element - &lt;a href="https://vueuse.org/core/onClickOutside/"&gt;onClickOutside&lt;/a&gt;. There are many packages that provide this functionality, and almost everyone has probably written that function by themselves. Usually it is implemented by adding a custom Vue directive to the desired element, for example &lt;code&gt;v-clickOutside&lt;/code&gt;, but the use of a hook is unusual.&lt;br&gt;
I used this hook in my todo app, in the &lt;code&gt;ToDoItem.vue&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"todoItem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"!editable"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"editable = !editable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ todo.text ? todo.text : "Click to edit Todo" }}
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
      &lt;span class="na"&gt;v-else&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;"todo.text"&lt;/span&gt;
      &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;keyup.enter=&lt;/span&gt;&lt;span class="s"&gt;"editable = !editable"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PropType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ToDo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@/models/ToDoModel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onClickOutside&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TodoItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;PropType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ToDo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todoItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;onClickOutside&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;editable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todoItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;editable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I removed the extra code to avoid distraction, but the component is still large enough. Pay attention to the code inside the setup hook, first we create an empty todoItem link, which we hang on the desired element in the template, and then we pass the first parameter to the &lt;code&gt;onClickOutside&lt;/code&gt; hook, and the second parameter is a callback with the actions we need. When you click on the span tag, it will be replaced with an input tag, and if you click outside the li tag with the &lt;code&gt;ref="todoItem"&lt;/code&gt; attribute, then the input will be replaced with a span tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-usestorage-endraw-and-raw-createglobalstate-endraw-reactive-local-storage"&gt;
  &lt;/a&gt;
  &lt;code&gt;useStorage&lt;/code&gt; and &lt;code&gt;createGlobalState&lt;/code&gt; - reactive local storage
&lt;/h2&gt;

&lt;p&gt;The next function I'll talk about is useStorage. This function allows data to be stored in &lt;code&gt;Window.localStorage&lt;/code&gt;. It is convenient to use it in conjunction with &lt;code&gt;createGlobalState&lt;/code&gt;, which is used to create a global storage. Now the data will be saved, updated and deleted automatically, and will not disappear after the page is reloaded. Below is the example of using these functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// @/store/index.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createGlobalState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/models/NoteModel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// state&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useGlobalNotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlobalState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;useStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-notes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;[]),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// actions&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useGlobalNotes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// for local use&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteGlobalNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;noteId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first parameter of the useStorage function accepts a key under which it will save your data in &lt;code&gt;localStorage&lt;/code&gt;, and the second is initial value. createGlobalState creates a wrapper function to pass state to components. By calling this function (in our case it is &lt;code&gt;useGlobalNotes()&lt;/code&gt;) in Vue-components or right here in this file, we will get a reactive list of notes. The notes array can be used as usual, remembering that since this is a proxy object, and the list itself is stored in notes.value. No need to add &lt;code&gt;.value&lt;/code&gt; to markup templates in components.&lt;br&gt;
For comparison, it's also helpful to see the useStorage example from the authors of the library. The difference is that in setup, you need to work with reactive storage not directly, but through its value property. In the html template, everything is as usual.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-userefhistory-endraw-history-of-changes"&gt;
  &lt;/a&gt;
  &lt;code&gt;useRefHistory&lt;/code&gt; - history of changes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useRefHistory&lt;/code&gt; is a hook that will record the history of data changes and provide undo/redo functionality. I used it to create the Undo and Redo buttons on the note editing page. First, I created a reactive variable using ref. I used it there and also got a typing error. Let's take a closer look at the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// Note.vue
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  // ...
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"undo"&lt;/span&gt; &lt;span class="na"&gt;:disabled=&lt;/span&gt;&lt;span class="s"&gt;"!canUndo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Undo&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"redo"&lt;/span&gt; &lt;span class="na"&gt;:disabled=&lt;/span&gt;&lt;span class="s"&gt;"!canRedo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Redo&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  // ...
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRefHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vueuse/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ToDo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
              &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;clear&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addNewTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ToDo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onRemoveTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;addNewTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;onRemoveTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;updateTitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;undo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;redo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;canUndo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;canRedo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;clear&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create a reactive variable using ref, pass it to the useRefHistory hook, denote deep: true in the hook parameters, for nested objects. Using destructuring assignment from useRefHistory we get &lt;code&gt;history&lt;/code&gt;, &lt;code&gt;undo&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;canUndo&lt;/code&gt;, &lt;code&gt;canRedo&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt;. The &lt;code&gt;canUndo&lt;/code&gt; and &lt;code&gt;canRedo&lt;/code&gt; properties hang on the disabled attributes in buttons. &lt;code&gt;clear&lt;/code&gt; - needed to clear history after finishing editing records. The &lt;code&gt;useManualRefHistory&lt;/code&gt; hook does almost the same thing, but saving to history occurs only when the &lt;code&gt;commit()&lt;/code&gt; command is called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I have covered only 4 functions from the large arsenal of VueUse tools for Vue 3 development. For a more in-depth study, I advise you to visit the &lt;a href="https://vueuse.org/"&gt;site&lt;/a&gt; of this wonderful library. While the documentation could still be improved, it is regularly being updated as well as the library itself.&lt;br&gt;
The complete code of my polygon, where I tested this library, can be viewed here.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How Coil supports the open-source projects we use</title>
      <author>Uchi Uchibeke</author>
      <pubDate>Wed, 01 Sep 2021 11:02:02 +0000</pubDate>
      <link>https://dev.to/coil/how-coil-supports-the-open-source-projects-we-use-1fb1</link>
      <guid>https://dev.to/coil/how-coil-supports-the-open-source-projects-we-use-1fb1</guid>
      <description>&lt;p&gt;For the past three months at Coil, we have started to develop &lt;a href="https://github.com/interledger/rafiki"&gt;Rafiki&lt;/a&gt;, an open-source All-In-One Solution for Interledger Wallets. Throughout the process, we have continued to think more deeply about how we support the open-source community and the packages that we use in Rafiki and at Coil. In this blog post, we are sharing some discoveries and decisions about what we want sustaining open-source to look like at Coil.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supporting-opensource-projects-and-maintainers"&gt;
  &lt;/a&gt;
  Supporting open-source projects and maintainers
&lt;/h3&gt;

&lt;p&gt;Thinking about how we want to support the projects that we depend on, we derived for principles to consider: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#equitably-support-all-projects"&gt;
  &lt;/a&gt;
  Equitably support all projects
&lt;/h4&gt;

&lt;p&gt;Currently, when you want to fund or donate to an open-source project, your contribution only touches the single package you choose. This approach benefits that package but leaves out the numerous packages that it depends on. If those dependency packages are smaller, don't have a very strong community to back them, or do not run promotions to sustain the project, the gap in support grows even more. This is unfortunately built into most systems. With funding options like GitHub Sponsors, Open Collective, Buy Me A Coffee, and others, donations only go to the single package and maintainers, and not packages that they depend on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#promote-transparency-for-all-maintainers"&gt;
  &lt;/a&gt;
  Promote transparency for all maintainers
&lt;/h4&gt;

&lt;p&gt;With many open-source projects, we can see the history of maintenance, yet we cannot see a history of where donated funds go. Funds sometimes go to events, travel, and compensation for the core team, but not to the packages that enable the parent package to receive funds.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fund-projects-that-drive-impact-for-the-community-and-coil"&gt;
  &lt;/a&gt;
  Fund projects that drive impact for the community and Coil
&lt;/h4&gt;

&lt;p&gt;When we use open-source projects, we want to be able to fund those projects and the projects they depend on. All of the packages used, all the way down the dependency tree&lt;br&gt;
should receive some money from Coil’s monthly donation. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#drive-sustainability"&gt;
  &lt;/a&gt;
  Drive sustainability
&lt;/h4&gt;

&lt;p&gt;We want our contribution to open source to drive sustainability for all projects that we use, not only the extremely popular projects. After all, it’s not just the popular projects that are used in our production codebase: it’s every dependency we have, all the way down the dependency trees, that make Coil as amazing as it is.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://xkcd.com/2347/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxE7YJ2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ma3ndu4d7p4jhuucov0.png" alt="dependency_2x"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Title text: Someday ImageMagick will finally break for good and we'll have a long period of scrambling as we try to reassemble civilization from the rubble.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#coil-supports-opensource-projects-with-flossbank"&gt;
  &lt;/a&gt;
  Coil supports open-source Projects with Flossbank
&lt;/h3&gt;

&lt;p&gt;As we continue to promote a free and open web, maintainers and communities continue to be a top priority. That’s why we’ve sponsored student Hackathons with Major league Hacking, and MozFest, and W3C’s TPAC, and that’s also why we’re announcing support for project maintainers through &lt;a href="https://flossbank.com/"&gt;Flossbank&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We chose Flossbank as our donation mechanism because of its ability to traverse dependency trees and it's unique way of distributing our donation at each level. It’s by no means perfect, but we’re excited to see the effort being put toward a more equitable distribution of donations.&lt;/p&gt;

&lt;p&gt;Some of the benefits of using Flossbank are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank is maintenance-free.&lt;/strong&gt; It’s impossible for us to continuously determine what our top open-source dependencies are, so we’re thrilled that Flossbank can automatically check out our GitHub to determine what packages should receive our donation, and how much of the donation they should receive.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank supports a wide range of dependencies.&lt;/strong&gt; We believe our open-source dependences are just as valuable as the code our engineers write, down to each and every line. Why should we not compensate the engineers maintaining the open-source code the same way we compensate our own engineers?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flossbank only take a fee to keep the lights on.&lt;/strong&gt; Compared to other donation mechanisms, Flossbank takes only 1% of a donation, which means 99% of our donation hits the maintainers’ bank accounts. Compared to others, which take 10%, this is a huge marginal impact increase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Os-fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwhj90o02mmif5onsraf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3Os-fcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwhj90o02mmif5onsraf.png" alt="Flossbank"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#donation-impact"&gt;
  &lt;/a&gt;
  Donation impact
&lt;/h4&gt;

&lt;p&gt;With Flossbank, we can measure the impact of our donations and see all the packages our donations have been allocated to. Every month, our donation is spread to the current packages that Coil is using. Over the past few months, this is how it’s shaken out:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#total-toplevel-packages-supported"&gt;
  &lt;/a&gt;
  Total top-level packages supported
&lt;/h5&gt;

&lt;p&gt;During the month of August 2021, we supported 804 top-level Dependencies. These are dependencies we use across all  of our organization’s Github repositories that are defined within our package manifests, files like package.json and requirements.txt, and Gemfile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AllK-3jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1l5h7qy4vqdtc39ijhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AllK-3jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1l5h7qy4vqdtc39ijhm.png" alt="Coil supports open-source projects with Flossbank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#total-packages-supported"&gt;
  &lt;/a&gt;
  Total packages supported
&lt;/h4&gt;

&lt;p&gt;During the month of August 2021, we supported 2,509 Total Current Package Dependencies. These include our top-level packages, as well as every dependency of those packages, and dependencies of those packages, etc., etc. For example, we use and support node-fetch and, all of the dependencies that node-fetch uses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enterprise.flossbank.com/organization/6041493a8aa076242464df62/ledger"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZD8Hi_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t904r9nbpdt6h65qek39.png" alt="Coil funds over 2,000 open-source projects with Flossbank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As Coil develops more open-source technologies like Rafiki, we think it’s important to compensate developers who have open-sourced their code and actively maintain it. We think Flossbank is the first step to a more equitable and just method of doing so, and we’re excited to see where the open-source community heads from here, and how Coil will play a part in it.&lt;/p&gt;

&lt;p&gt;To learn more about some projects Coil supports, see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flossbank at &lt;a href="https://flossbank.com/"&gt;flossbank.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Rafiki at &lt;a href="https://github.com/interledger/rafiki"&gt;github.com/interledger/rafiki&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tigerbeetle at &lt;a href="https://www.tigerbeetle.com/"&gt;tigerbeetle.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Developer events at &lt;a href="https://developers.coil.com/community/developer-events"&gt;developers.coil.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>coil</category>
      <category>interledger</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>10 reasons why nobody is reading your articles and how to fix it</title>
      <author>Andrew Baisden</author>
      <pubDate>Wed, 01 Sep 2021 10:09:11 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/10-reasons-why-nobody-is-reading-your-articles-and-how-to-fix-it-36b6</link>
      <guid>https://dev.to/andrewbaisden/10-reasons-why-nobody-is-reading-your-articles-and-how-to-fix-it-36b6</guid>
      <description>&lt;p&gt;It can feel like you are a ghost when your articles get zero likes and low engagement. This is something that many writers have to deal with unfortunately and some never understand why it is happening to them. I have been writing since 2020 and learned a lot during that time. Here are my thoughts on this topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-dont-have-a-strong-brand-presence-yet"&gt;
  &lt;/a&gt;
  1. You don't have a strong brand presence yet
&lt;/h2&gt;

&lt;p&gt;Articles that perform well, tend to be written by writers who are already established. When you are established you have credibility. It can take weeks or months at the very least before you have some sort of brand that people can recognise. If you have just started writing and you are not well known by anyone yet then you don't really have the reputation to go along with the words that you are writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-content-that-you-write-is-off-brand"&gt;
  &lt;/a&gt;
  2. The content that you write is off brand
&lt;/h2&gt;

&lt;p&gt;You have to write in your element and stay on brand if you intend on growing your following. For example if you are not known for building products on ProductHunt then don't write an article about it because you don't have the experience or proof to back it up. If one day you do become good in that area then you have just given yourself credibility to write that article.&lt;/p&gt;

&lt;p&gt;In another example say you are well known for creating marketing products that help people grow on Twitter. And then you write an article about how to create CSS Art. If you have never talked about it before then people are not going to associate you with it and you are likely to get low engagement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-topic-is-boring-and-not-well-known"&gt;
  &lt;/a&gt;
  3. The topic is boring and not well known
&lt;/h2&gt;

&lt;p&gt;If you write an article about something niche that is not popular and nobody is talking about. Then you can't be surprised when nobody reads it. You see search terms are important when it comes to generating ideas for articles. If it is a popular topic like JavaScript frameworks or building a website then it is highly likely that many people will be searching for information on it.&lt;/p&gt;

&lt;p&gt;You can't expect people to be excited about something that is not going to help them generate money, find work or keep them interested.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-it-is-a-copy-and-paste-generic-topic"&gt;
  &lt;/a&gt;
  4. It is a copy and paste generic topic
&lt;/h2&gt;

&lt;p&gt;Holding someones interest is key to getting noticed. There are so many blog articles out there already it is almost impossible to be unique. However if you choose to write a topic that has been talked about so many times lately that it has become repetitive. Then you just become another &lt;strong&gt;me too&lt;/strong&gt; person and it is unlikely that people will want to read the same content over again in such a short space of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-all-text-and-no-media-content"&gt;
  &lt;/a&gt;
  5. All text and no media content
&lt;/h2&gt;

&lt;p&gt;Let me first start by saying that you don't need images, gifs or videos to make your articles interesting. However if all of your articles are going to be big blocks of texts with lots of paragraphs then it is going to look unappealing and too long to read. So many people have short attention spans if you put a big block of text in front of them to read they will loose interest fast. Social media and its quick dopamine hits has made this really prevalent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-you-have-a-small-following"&gt;
  &lt;/a&gt;
  6. You have a small following
&lt;/h2&gt;

&lt;p&gt;This one is quite obvious. If you barely have any followers then of course you are unlikely to have a lot of people reading your content. When you grow and become more popular your articles will perform much better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-your-posting-schedule-is-bad"&gt;
  &lt;/a&gt;
  7. Your posting schedule is bad
&lt;/h2&gt;

&lt;p&gt;Timing is everything. Remember that we all live in different time zones so your articles are likely to perform differently depending on where you live. I have posted some articles in the morning which started to perform quite slowly. But as the day progressed the views and engagements started to increase a lot. Don't forget that people are busy too they are not going to be looking at your blog 24/7. Give it some time maybe even a few days for your article to get out there and then the engagement will rise.&lt;/p&gt;

&lt;p&gt;If you choose to post an article right before you go to bed then it is possible that it will get lost in the search results and pushed down the rankings by articles that get posted the following morning when people wake up again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-you-have-a-poor-writing-style"&gt;
  &lt;/a&gt;
  8. You have a poor writing style
&lt;/h2&gt;

&lt;p&gt;This is an area that you can fix overtime and with practice. The more you write the better you will get at it. Using an app like &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt; will improve your writing style as well as clearing up any spelling mistakes. Good writers know how to engage with their audience this is why their books sell in the millions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-your-articles-have-a-beginning-but-no-end"&gt;
  &lt;/a&gt;
  9. Your articles have a beginning but no end
&lt;/h2&gt;

&lt;p&gt;Writing is basically the art of storytelling. There needs to be a beginning, middle and end to the content that you write. So for example if you are writing about an experience that you had or something that you learned then the audience is expecting there to be a resolution so they know how it ended and how they can relate and learn from it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-the-article-never-left-your-head"&gt;
  &lt;/a&gt;
  10. The article never left your head
&lt;/h2&gt;

&lt;p&gt;If you have something to say then say it. It's no good talking about what you are going to write and then not actually doing it. Nobody can read your work if its stuck in your head we are not mind readers. This is a problem that many aspiring writers have. Instead of actually writing that article they just put it off indefinitely and create excuses for themselves.&lt;/p&gt;

&lt;p&gt;Tough love but nothing will change until you take action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>writing</category>
    </item>
    <item>
      <title>Configuring Github on your Dev Environment Part One</title>
      <author>Asaju Enitan</author>
      <pubDate>Wed, 01 Sep 2021 09:58:26 +0000</pubDate>
      <link>https://dev.to/x1k/configuring-github-on-your-dev-environment-part-one-gl6</link>
      <guid>https://dev.to/x1k/configuring-github-on-your-dev-environment-part-one-gl6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#configuring-github-on-your-dev-environment-part-one"&gt;
  &lt;/a&gt;
  Configuring Github on your Dev Environment Part One
&lt;/h2&gt;

&lt;p&gt;Terms&lt;br&gt;
&lt;code&gt;$&lt;/code&gt; means running the command as a normal user but make sure to remote it from your command as it already exists on your terminal  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;The first step in setting up git on your dev environment is installing the git to your environment. Although you can use Git with the web version with &lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;, most of the time you will be interacting with Github from within your dev environment using either Terminal and/or applications.&lt;br&gt;
First go to &lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt; and install for your OS.&lt;br&gt;
For Windows user, using the installer will also install the git bash application which you can use to run &lt;code&gt;git&lt;/code&gt; commands.&lt;br&gt;&lt;br&gt;
Linux users will have to download for their distribution &lt;a href="https://git-scm.com/download/linux"&gt;https://git-scm.com/download/linux&lt;/a&gt;&lt;br&gt;&lt;br&gt;
While MacOS users can use &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; to install by running &lt;code&gt;brew install git&lt;/code&gt;. Make sure to install &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; if you don't have it already.&lt;br&gt;&lt;br&gt;
If you like living on the edge, you can build from source with the tarballs from &lt;a href="https://www.kernel.org/pub/software/scm/git"&gt;kernel.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-configuration"&gt;
  &lt;/a&gt;
  Basic Configuration
&lt;/h2&gt;

&lt;p&gt;After going through the installation process for your OS, you will need to make configurations. But before that, you should make sure that &lt;code&gt;git&lt;/code&gt; installed successfully on your environment. For Windows users, during installation, you will be asked if you want to install to path, if you didn't check the box, you will need to add it to your environment variables.&lt;br&gt;&lt;br&gt;
Git comes with a tool called &lt;code&gt;git config&lt;/code&gt; that lets add and read configuration variables that control how you use Git. These variables can be saved in three different places;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/etc/gitconfig&lt;/code&gt; file: The variables saved in this location applies to every user on your system and all the repositories. To save configuration variables to this file you must pass &lt;code&gt;--system&lt;/code&gt; flag to the &lt;code&gt;git config&lt;/code&gt; command. You will need administrative or superuser privilege to use this command because it writes to a system file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$HOME/.gitconfig&lt;/code&gt; or &lt;code&gt;$HOME/.config/git/config&lt;/code&gt; file: The configuration variables saved to this file apply only to a single user, You. You can save configuration variables to this file by passing &lt;code&gt;--global&lt;/code&gt; flag to the &lt;code&gt;git config&lt;/code&gt; command. The variables in this file affects only the repositories that you manage.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;config&lt;/code&gt; file in the Git directory i.e &lt;code&gt;.git/&lt;/code&gt; in your project directory. To know if you have this directory in your project folder, you can run &lt;code&gt;ls -al&lt;/code&gt; which displays all the hidden files/folders in your project, you can also access see this by checking &lt;strong&gt;Show hidden files&lt;/strong&gt; in your OS's file explorer.
Now that you know where to store files. Let's add some configuration variables. You will be going with the second option because you will want to apply to yourself and all the repositories you own.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#setting-your-identity"&gt;
  &lt;/a&gt;
  Setting Your Identity
&lt;/h3&gt;

&lt;p&gt;The first thing you should do when you install Git is to set your user name and email address. Git uses this to bind every commit towards you. This is important so that you will be able to keep track of every commit you make.&lt;br&gt;
Open your preferred terminal and type the following;&lt;br&gt;
&lt;code&gt;$ git config --global user.name "John Happer"&lt;/code&gt; This command sets the user name. Replace the &lt;code&gt;John Happer&lt;/code&gt; with your full name.&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global user.email "johnhapper@example.com"&lt;/code&gt; This commands sets the email address. Make sure you replace &lt;code&gt;johnhapper@example.com&lt;/code&gt; with the email you registered your github account with. Using the &lt;code&gt;--global&lt;/code&gt; flag makes sure to set these variables to only you but affects all the repositories.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#editor"&gt;
  &lt;/a&gt;
  Editor
&lt;/h3&gt;

&lt;p&gt;You have set up your identity, you can configure the default text editor that will be used when you need to type messages or make amends to commits. It is not a must though as Git will make use of your system's default editor.&lt;br&gt;&lt;br&gt;
But if you want to use a different editor, for example VSCode, you can run the command like this&lt;br&gt;
&lt;code&gt;$ git config --global core.editor code&lt;/code&gt;. This will use the VSCode executable &lt;code&gt;code&lt;/code&gt;. For windows users, you will need to specify the full path to the editor you want to use. For example, if you want to use VSCode on windows, you will need to type something like this;&lt;br&gt;&lt;br&gt;
&lt;code&gt;$ git config --global core.editor "C:/Program Files/Visual Studio Code/code.exe"&lt;/code&gt;&lt;br&gt;&lt;br&gt;
Make sure you get the correct path as this can cause issues when Git attempts to open the executable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#default-branch"&gt;
  &lt;/a&gt;
  Default Branch
&lt;/h3&gt;

&lt;p&gt;By default, when you run &lt;code&gt;git init&lt;/code&gt; to initialize a new repository for your project, Git will create a branch called &lt;strong&gt;master&lt;/strong&gt;. But you can set a different name for the initial branch. For example to set &lt;strong&gt;main&lt;/strong&gt; as the default branch name, type&lt;br&gt;
&lt;code&gt;$ git config --global init.defaultBranch main&lt;/code&gt; and it will set &lt;strong&gt;main&lt;/strong&gt; as your default initial branch every time you run &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Phew!, you have done a lot. To check the current variables you have set, you can use the &lt;code&gt;git config --list&lt;/code&gt; to show the list of everything Git has set. This command reads from all the Git &lt;code&gt;config&lt;/code&gt; files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --list
user.name=John Happer
user.email=johnhapper@example.com
core.editor=vim
color.status=auto
color.branch=auto
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;...&lt;/code&gt; The rest of the variables have been truncated.&lt;br&gt;
At any point if you forgot a command, you can run &lt;code&gt;$ git help &amp;lt;verb&amp;gt;&lt;/code&gt; to get a comprehensive manual for that command. For example you can get the documentation for &lt;code&gt;git commit&lt;/code&gt; by running &lt;code&gt;$ git help config&lt;/code&gt;. For short and concise help options, you can use the &lt;code&gt;$ git &amp;lt;verb&amp;gt; -h&lt;/code&gt; for example &lt;code&gt;$ git add -h&lt;/code&gt; to get help for the github add command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;usage: git add [&amp;lt;options&amp;gt;] [--] &amp;lt;pathspec&amp;gt;...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    --renormalize         renormalize EOL of tracked files (implies -u)
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --chmod (+|-)x        override the executable bit of the listed files
    --pathspec-from-file &amp;lt;file&amp;gt;
                          read pathspec from file
    --pathspec-file-nul   with --pathspec-from-file, pathspec elements are separated with NUL character
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all about basic setup for your github. Next up, we will look at setting up your git commit messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-files"&gt;
  &lt;/a&gt;
  Adding Files
&lt;/h3&gt;

&lt;p&gt;You have made changes to your code, and now you need to push to the remote repository. To do that, you will use the &lt;code&gt;git add&lt;/code&gt; command. You can add files in several ways. Running &lt;code&gt;git add .&lt;/code&gt; will add all modified and new files and stage them for commit and push. But you can also specify which file you want to add by running &lt;code&gt;git add path/to/file/in/the/repositiry&lt;/code&gt; i.e &lt;code&gt;git add app/controllers/user.js&lt;/code&gt; will add only the &lt;code&gt;user.js&lt;/code&gt; file and stage it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-files"&gt;
  &lt;/a&gt;
  Removing Files
&lt;/h3&gt;

&lt;p&gt;You can also remove files i.e unstage them from commits by running &lt;code&gt;git rm path/to/file/in/the/repository&lt;/code&gt;. The &lt;code&gt;git rm .&lt;/code&gt; also unstages all files and folders. Not to be confused with &lt;code&gt;git stash&lt;/code&gt;, this command clears the current commit and reverts to the last push commit in the log which can be accessed using the &lt;code&gt;git log&lt;/code&gt; command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commit-messages"&gt;
  &lt;/a&gt;
  Commit Messages
&lt;/h3&gt;

&lt;p&gt;Commit messages are a way to keep note tracks of your project updates. It is very important because it helps when you revisit the codebase or share the repository with someone else. It is very important to make sure your commit messages as descriptive as possible. Avoid short messages such as &lt;em&gt;updated app.js&lt;/em&gt;, &lt;em&gt;the change here is now working&lt;/em&gt;, these kind of messages leave little space for understanding your code and can waste productive time.&lt;br&gt;&lt;br&gt;
That being said, how should you write a good commit message. A good commit message needs to follow a good idea of what the update is about, a summary or it and full text explaining to an extent what the update to the commit is.&lt;br&gt;&lt;br&gt;
An example of this is &lt;code&gt;&amp;lt;scope&amp;gt; &amp;lt;summary&amp;gt; &amp;lt;full text&amp;gt;&lt;/code&gt;.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope
&lt;/h4&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;scope&amp;gt;&lt;/code&gt; is the feature/function of the commit, i.e is it a feature, a test, a breaking change or a fix.&lt;br&gt;
A way you can do this is using keywords, these keywords has to be descriptive enough, listed below are some examples;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feat&lt;/li&gt;
&lt;li&gt;fix&lt;/li&gt;
&lt;li&gt;breaking changes&lt;/li&gt;
&lt;li&gt;new&lt;/li&gt;
&lt;li&gt;improve&lt;/li&gt;
&lt;li&gt;refactor, 
etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; shows the TL;DR version of the commit. For example, what function was refactored or what issue was resolved. It is advisable to keep this at 20 words max as you will still give a detailed explanation in the &lt;code&gt;&amp;lt;full text&amp;gt;&lt;/code&gt;. Example might be, &lt;em&gt;Added validator to the create user endpoint&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#full-text"&gt;
  &lt;/a&gt;
  Full Text
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;full text&lt;/code&gt; contains the full detailed explanation of the explanation, will it affect any other commit?, is there a command that must be run for it work?. You can type as much as you want here since it will help you or anyone checking the code to grasp a full explanation of the commit.&lt;/p&gt;

&lt;p&gt;So a full commit message will be something like &lt;code&gt;$ git commit -m "UPDATE(Added validator to the create user endpoint): To avoid a security issue, user registration now requires the email to be of the email format, username must be more than 3 characters and password must be at least 8 characters. This is going to affect the registration endpoint which might generate error."&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#alias"&gt;
  &lt;/a&gt;
  Alias
&lt;/h4&gt;

&lt;p&gt;That being said, typing all these for every commit can be sometimes very tiring 😫. That being said, Git has a tool to exactly help with that and that is the &lt;code&gt;git config --global alias&lt;/code&gt;🙂. With this command, you can set at much as aliases as you want. Let\'s set an alias to make an set a commit message for the &lt;em&gt;initial&lt;/em&gt; commit.&lt;br&gt;&lt;br&gt;
&lt;code&gt;git config --global alias.int '!f() { git commit -m "🎊 INITIAL COMMIT($1): $2; }; f'&lt;/code&gt; Running this command will add the alias command to your &lt;code&gt;config&lt;/code&gt; file. Then when you run &lt;code&gt;git int "Project Setup" "Setting up the base files, we will be using this technology etc..."&lt;/code&gt; it will translate to &lt;code&gt;$ git commit -m "🎊 INITIAL COMMIT(Project Setup): Setting up the base files, we will be using this technology etc..."&lt;/code&gt; which looks cool and you get to type less.&lt;br&gt;&lt;br&gt;
You can add more of these alias and more with the &lt;code&gt;git config --global alias.&amp;lt;keyword&amp;gt;&lt;/code&gt; command. I will share my &lt;code&gt;config&lt;/code&gt; file so you can see how I did mine and edit according to your preference.&lt;/p&gt;

&lt;p&gt;With this all set up, you are well on your way of becoming adept at using git. This is the first in the series and I will be updating as soon as I can.&lt;/p&gt;

&lt;p&gt;Link to my &lt;a href="https://gist.github.com/en1tan/9b9a9c13878aa76c40f0de35bd46539e#file-gitconfig"&gt;config&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you next time 😉❤️&lt;/p&gt;

</description>
      <category>github</category>
      <category>environment</category>
      <category>os</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tile Navigation - How to make navbar for web page with HTML CSS and JS in 2021</title>
      <author>Modern Web</author>
      <pubDate>Wed, 01 Sep 2021 09:57:35 +0000</pubDate>
      <link>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</link>
      <guid>https://dev.to/kunaal438/tile-navigation-how-to-make-navbar-for-web-page-with-html-css-and-js-in-2021-eap</guid>
      <description>&lt;p&gt;Hello, welcome. In today's blog, we'll see how to make awesome fully working tile navigation system for your website.&lt;/p&gt;

&lt;p&gt;Tile navigation is very unique navigation that you'll not found most. Make a good impression by using tile navigation on your portfolio. This navigation has good UX which makes better experience than normal navbar.&lt;/p&gt;

&lt;p&gt;For demo, code tutorial with explanation. You can watch the video below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LeaWb_3UDK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to miss more amazing upcoming projects. Make sure to subscribe me on youtube. It really motivates me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, without wasting more time let's see how to code this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;You can get my all project's source code in just 5$ membership on &lt;a href="https://www.patreon.com/modernweb"&gt;patreon&lt;/a&gt;. Support my work for more awesome and amazing projects. This is just a beginning.&lt;a href="https://www.patreon.com/posts/55615263"&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the tile navigation, we need 3 files - &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;style.css&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt;. And of course we have an &lt;code&gt;img&lt;/code&gt; folder for images.&lt;/p&gt;

&lt;p&gt;So let's start with simply making the NAVIGATION heading. Start by basic HTML Template and give title to it, link &lt;code&gt;style.css&lt;/code&gt; file and don't forget to add &lt;code&gt;app.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;navigation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8Ffu9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pxmts85q92gsh00v1i.png" alt="Frame 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's make the important thing tiled navbar. For that make a container which will hold all the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And inside this container make &lt;code&gt;a&lt;/code&gt; tag as we use this to create links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, maybe you don't know that we can give images inside &lt;code&gt;a&lt;/code&gt; to create images element. Well I didn't knew that before.&lt;/p&gt;

&lt;p&gt;So we need images as a links of course.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- links --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy this &lt;code&gt;a&lt;/code&gt; tag 4 more time and change the image path.&lt;/p&gt;

&lt;p&gt;The output will look terrible because of the big images. So let's style the links.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give &lt;code&gt;links-container&lt;/code&gt; display to &lt;code&gt;flex&lt;/code&gt;. This will make the &lt;code&gt;link&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; side by side. And position &lt;code&gt;fixed&lt;/code&gt; because we want it to stay on the screen irrespective of scroll.&lt;/p&gt;

&lt;p&gt;Now style the &lt;code&gt;a&lt;/code&gt; tag along with its image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VenMv9np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxe58tk1otir6akxjzq6.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add hover effect to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-2deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:hover&lt;/code&gt; this simply means when being hover. So, the whole line or selector simply means give these style to the &lt;code&gt;img&lt;/code&gt; element when &lt;code&gt;.link&lt;/code&gt; element is being hover.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got the effect, but its very bright. And not looking that much appealing. So, let's make a black overlay to the &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For overlay we'll use &lt;code&gt;::after&lt;/code&gt; css pseudo element. You can find about this in detail &lt;a href="https://dev.to/kunaal438/all-about-css-before-and-after-element-css-pseudo-elements-5g1n"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.link&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGXp8c05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l3664esymrutixqj2w2.gif" alt="Untitled design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now as you have seen in the demo, we have texts on the bottom also. So let's make them. To make text just add &lt;code&gt;p&lt;/code&gt; element inside &lt;code&gt;a&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links-container hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 1.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img 2.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;project&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    +3 links more
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see the page, You'll not able to see the text. Because texts are behind the images. To make them at top give some CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.link&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ixWmKuaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9ovbzxybuepii4tzpp5.PNG" alt="Capture2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to create toggle button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- toggle btn --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Style the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izlJJlGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacjqcdov22pdek0scq4.PNG" alt="Capture3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now of course we want the cross X effect. For that rotate the spans by 45 deg when toggle button have &lt;code&gt;active&lt;/code&gt; class. Like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle-btn.active&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;active&lt;/code&gt; class to &lt;code&gt;toggle-btn&lt;/code&gt; to see the output.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAg65coB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkx7k23gawahc2qdzyux.PNG" alt="Capture4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And to hide the links. We'll use &lt;code&gt;hide&lt;/code&gt; class for &lt;code&gt;links-container&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.links-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;previous&lt;/span&gt; &lt;span class="err"&gt;styles&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links-container.hide&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pointer-events&lt;/code&gt; property is used to set elements pointer interactivity. In this case we are setting all kind of pointer interaction as a default. But setting no interaction when the links are hidden using &lt;code&gt;hide&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now of course we want JS here to make the classes toggle. We can make this whole effect with pure CSS using check boxes. But we'll do that some other day.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app.js&lt;/code&gt; and first select &lt;code&gt;toggle-btn&lt;/code&gt; and &lt;code&gt;links-container&lt;/code&gt; using &lt;code&gt;querySelector&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.toggle-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linksContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.links-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after that, add click event to &lt;code&gt;toggle-btn&lt;/code&gt; and toggle the classes inside that click event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;linksContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEhIE5_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvd8fiiwdcjxi552mr8q.gif" alt="Untitled design (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are done. I hope you understood each and everything. If you have doubt or I missed something let me know in the comments. I have made another tile navigation tutorial. But unfortunately that time I don't used to write blogs. You can check it &lt;a href="https://youtu.be/EsD3QY_wFm8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-awesome-wavy-button-hover-effect-pure-css-wavy-design-1722"&gt;Wave Button Hover Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I really appreciate if you can subscribe my youtube channel. I create awesome web contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What the FOUC is happening: Flash of Unstyled Content</title>
      <author>Estee Tey</author>
      <pubDate>Wed, 01 Sep 2021 09:51:51 +0000</pubDate>
      <link>https://dev.to/lyqht/what-the-fouc-is-happening-flash-of-unstyled-content-413j</link>
      <guid>https://dev.to/lyqht/what-the-fouc-is-happening-flash-of-unstyled-content-413j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#case-study"&gt;
  &lt;/a&gt;
  Case Study
&lt;/h2&gt;

&lt;p&gt;Recently while I was browsing Instagram stories on my phone, a certain ad by Kopidate caught my eye. Despite having 'date' as part of its name, I thought it was interesting that they say it is not a matchmaking site but for humanising 1:1 connections. The "human" part was something that I felt resonating. So I clicked on it to visit the site, but oh boy, it was yet another website that is plagued by the FOUC problem. Observe the difference in styling from when the page just loaded and when the page finishes loading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXXDv6bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXXDv6bO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064543661/7dXClR9lH.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This phenomenon is known as Flash of Unstyled Content (FOUC), and it is a topic covered by a question included in the &lt;a href="https://h5bp.org/Front-end-Developer-Interview-Questions/questions/general-questions/"&gt;hp5b Frontend Interviewer Questions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flash-of-unstyled-content"&gt;
  &lt;/a&gt;
  What is Flash of Unstyled Content?
&lt;/h2&gt;

&lt;p&gt;FOUC is the short moment of truth when you catch your friend turning their head without the zoom filter applied - and often, it is &lt;em&gt;aesthetically less appealing&lt;/em&gt;, just like the example above before the transition happened. FOUC poses a very bad user experience, especially for new visitors who are not aware of this phenomenon. They might even think that your website poses a security threat (my mom asks me that a lot for new sites she visit). Even for users who know of this phenomenon, by its existence, the lag and abruptness of the transition decreases the legitimacy and professionalism of a website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-the-flash-of-unstyled-content-happen"&gt;
  &lt;/a&gt;
  Why does the Flash of Unstyled Content happen?
&lt;/h2&gt;

&lt;p&gt;Dave Hyatt, an author from &lt;em&gt;Webkit&lt;/em&gt;, the open-sourced web browser engine used by Safari sheds the light on the FOUC problem in great detail in this &lt;a href="https://webkit.org/blog/66/the-fouc-problem/"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In particular, the "general how":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This situation occurs whenever a Web browser ends up showing your Web page’s content without having any style information yet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and the "exactly how":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;when/how a browser ends up committing the crime of FOUCing depends heavily on how the browser’s engine is architected and on interesting assumptions made by Web site authors when designing their sites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rest of his article focuses on how to mitigate FOUC specifically for browsers that implement web engines, and for the &lt;strong&gt;typical web developer&lt;/strong&gt;, accounting for how the web browser engine works is usually out of their usual scope of work, so we will not discuss that here.&lt;/p&gt;

&lt;p&gt;Instead, let's see if we can dig deeper into the latter part which was previously highlighted by the author to avoid FOUC - &lt;em&gt;assumptions made by web site authors when designing their sites.&lt;/em&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#revisiting-the-case-study"&gt;
  &lt;/a&gt;
  Revisiting the Case Study
&lt;/h2&gt;

&lt;p&gt;For emulating what I saw for &lt;a href="https://kopidate.com/"&gt;Kopidate&lt;/a&gt; on my mobile but on my laptop's browser, at the Google Chrome Inspector Network Tab: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changed the network to Fast 3G mode&lt;/li&gt;
&lt;li&gt;Disable cache&lt;/li&gt;
&lt;li&gt;Start recording the process&lt;/li&gt;
&lt;li&gt;Observe the logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try it out too 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiRcoS9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiRcoS9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064728496/wx5n8su5W.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the .GIF animation below, you can see that it took roughly &lt;strong&gt;11s&lt;/strong&gt; for Fast 3G mode to load finish. The transition felt very laggy and the time it took to load is simply painful for &lt;em&gt;many&lt;/em&gt; mobile users. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-eLk-7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-eLk-7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1630064736958/4GT25We4E.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what is the device's browser doing in that 11s? A few observations as a normal user: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text styles changing gradually&lt;/li&gt;
&lt;li&gt;brand image appearing&lt;/li&gt;
&lt;li&gt;text and button being moved down&lt;/li&gt;
&lt;li&gt;a big flash of red background image and changing of the entire style shown in viewport&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And if you're playing around the network logs, you would then roughly understand what is causing the above to happen. For those that are not familiar with the network inspector, although the names of the files that are being retrieved are some randomized junk and not meant to be understood, we can still see the type of the data that is retrieved e.g. base64 is usually image. Then we can click such files to see which image(s) are exactly being retrieved. &lt;/p&gt;

&lt;p&gt;Interestingly, it was spending the majority of the first 2s - 10s fetching and loading a lot of other images that the user cannot see beyond their &lt;a href="https://www.w3schools.com/css/css_rwd_viewport.asp"&gt;device viewport&lt;/a&gt;. It was only in the last second before it finally fetched the red background portion and show the intended layout of styles correctly in the area that the user's device viewport covers. This probably indicates the presence of some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mask"&gt;css mask&lt;/a&gt; property where the text will appear differently based on the background image, as the web designer probably assumed the background image is always there and didn't create a fallback for the text styling in the absence of the background image.&lt;/p&gt;

&lt;p&gt;For reference, I was previously using 5G data network to see that the abrupt transition on my phone happening in 1s. So that means that &lt;strong&gt;depending on the network speed, the user's experience will be different&lt;/strong&gt; as well. In summary, the negligence for both the FOUC problem and performance would very likely result in a major turn off of web applications, possibly turning away many potential users.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#now-the-finale-how-to-fouc-off"&gt;
  &lt;/a&gt;
  Now the finale: how to FOUC off!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#for-vanilla-websites-that-only-uses-html-css-with-no-shiny-framework"&gt;
  &lt;/a&gt;
  For vanilla websites that only uses HTML, CSS with no shiny framework
&lt;/h3&gt;

&lt;p&gt;At the start of the .html file, put a style for hiding your site&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;doctype&lt;/span&gt; &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;html&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style1.css"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style2.css"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"style3.css"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the end of the last css file to be loaded i.e. &lt;code&gt;style3.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✅ The above guarantees that your html does not show until all the css files have been loaded. So there will not be a shitty transition happening.&lt;/p&gt;

&lt;p&gt;✅ This is also a recommended solution for supporting devices/browsers that don't have Javascript enabled.&lt;/p&gt;

&lt;p&gt;❌ If your website that has a lot of static content, even your &lt;em&gt;fast&lt;/em&gt; 3G users will still be staring at a blank screen for quite some time. Do consider integrating with &lt;a href="https://web.dev/browser-level-image-lazy-loading/"&gt;browser level image lazy-loading&lt;/a&gt; for a more holistic solution!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-are-using-a-shiny-component-framework-like-react-vue-angular-etc"&gt;
  &lt;/a&gt;
  If you are using a shiny component framework like React, Vue, Angular etc
&lt;/h3&gt;

&lt;p&gt;A simple fix is to do something similar to the solution provided above for vanilla websites, but using &lt;strong&gt;component state management&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;An example with React without fallback 📘&lt;br&gt;
What it does is that the side effect hook ensures that the component is mounted before rendering. And if it is mounted, that means that sequentially in the code, the import statement for the stylesheet would have been triggered before the code block for component, ensuring that it gets the stylesheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppWithoutFallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example for alternative fallback layout that is not dependent on CSS files. Of course for this you have to design it so that when it switches between the states, the transition doesn't look super abrupt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppWithFallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;loading&lt;/span&gt; 
            &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Fallback content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, for the above, you can incorporate the code with some lazy loading libraries too to improve performance - these will be provided in the resources section later.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this article! &lt;/p&gt;

&lt;p&gt;If you enjoyed reading, please leave some reactions 💌 &lt;/p&gt;

&lt;p&gt;I will be very happy to receive any feedback from you too 🌻&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;p&gt;If you find this article to be too short, feel free to browse through the resources that I've looked at below too.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Mask: &lt;a href="https://web.dev/css-masking/"&gt;https://web.dev/css-masking/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Native Lazy Loading: &lt;a href="https://web.dev/browser-level-image-lazy-loading/"&gt;https://web.dev/browser-level-image-lazy-loading/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;React libraries that help with performance

&lt;ul&gt;
&lt;li&gt;Ready Lazy Loading Images: &lt;a href="https://levelup.gitconnected.com/lazy-loading-images-in-react-for-better-performance-5df73654ea05"&gt;https://levelup.gitconnected.com/lazy-loading-images-in-react-for-better-performance-5df73654ea05&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;React loadable: &lt;a href="https://github.com/jamiebuilds/react-loadable"&gt;https://github.com/jamiebuilds/react-loadable&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Side-server rendering with styled-components as a possible solution to FOUC &lt;a href="https://cleverbeagle.com/blog/articles/look-for-simple-fixes-first"&gt;https://cleverbeagle.com/blog/articles/look-for-simple-fixes-first&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;StackOverflow thread on FOUC &lt;a href="https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506"&gt;&lt;/a&gt;&lt;a href="https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506"&gt;https://stackoverflow.com/questions/3221561/eliminate-flash-of-unstyled-content/43823506&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>react</category>
    </item>
  </channel>
</rss>
