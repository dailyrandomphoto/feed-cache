<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MySwiftUI Notes 3.1</title>
      <author>4-in-1 Telecommunications</author>
      <pubDate>Tue, 04 May 2021 03:30:01 +0000</pubDate>
      <link>https://dev.to/tookooltech/myswiftui-notes-3-1-3gi6</link>
      <guid>https://dev.to/tookooltech/myswiftui-notes-3-1-3gi6</guid>
      <description></description>
      <category>swiftui</category>
      <category>xcode</category>
      <category>ios</category>
      <category>github</category>
    </item>
    <item>
      <title>Azure App Service Authentication (Ez Auth) with Azure AD B2C</title>
      <author>Christos Matskas</author>
      <pubDate>Tue, 04 May 2021 01:29:46 +0000</pubDate>
      <link>https://dev.to/425show/azure-app-service-authentication-ez-auth-with-azure-ad-b2c-30k4</link>
      <guid>https://dev.to/425show/azure-app-service-authentication-ez-auth-with-azure-ad-b2c-30k4</guid>
      <description>&lt;p&gt;The new version of the Azure App Service Authentication (aka EZ Auth) was announced a couple months back and we recently had one of the PMs, Yafet Woldegabriel, as a guest on the &lt;a href="https://aka.ms/425show"&gt;425 Show&lt;/a&gt; to talk to us about it. You can catch the recording here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EmaHxGOzwS8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But we wanted to take things one step further and configure Ez Auth to work with Azure AD B2C. Since this is not as straightforward as configuring Azure AD, this blog shows you how to do it step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-app-registration-in-b2c"&gt;
  &lt;/a&gt;
  Configure the App Registration in B2C
&lt;/h2&gt;

&lt;p&gt;In Azure AD B2C, create a new App Registration. Give it a name and press &lt;strong&gt;Register&lt;/strong&gt;. Make a note of the &lt;code&gt;Client ID&lt;/code&gt; in the overview tab. Next, open the &lt;strong&gt;Secrets and certificates&lt;/strong&gt; tab and create a new secret. Make a note of it. Last step, navigate to the &lt;strong&gt;Authentication&lt;/strong&gt; tab and add a new &lt;strong&gt;Platform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I chose Web App since I'm running a .NET Core Web App using Razor Pages. The &lt;strong&gt;Redirect URI&lt;/strong&gt; needs to have the following format:&lt;br&gt;
&lt;code&gt;&amp;lt;your webapp url&amp;gt;/.auth/login/aad/callback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You also need to, unfortunately, configure Implicit Flow by checking both the ID and Access Tokens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAT4p5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg0lndt21et2qwfm3ufc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAT4p5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg0lndt21et2qwfm3ufc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're all done with the App Registration&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-user-flow-in-b2c"&gt;
  &lt;/a&gt;
  Update the User Flow in B2C
&lt;/h2&gt;

&lt;p&gt;Select the sign in/sign up user flow you wish to use with your application. Navigate to the &lt;strong&gt;Properties&lt;/strong&gt; and search for the &lt;strong&gt;Token Compatibility settings&lt;/strong&gt; section. In the &lt;strong&gt;Issuer&lt;/strong&gt; dropdown, update it to use the one with the user flow name in the URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GX-miK2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf8qqinkpehn815ixrlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX-miK2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf8qqinkpehn815ixrlr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to press &lt;strong&gt;Save&lt;/strong&gt; to persist the changes... Finally, you want to press the &lt;strong&gt;Run user flow&lt;/strong&gt; so that we can copy the issuer URL. Copy the value, leaving out everything after &lt;code&gt;v2.0/&lt;/code&gt; as per the picture below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNz8hfjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/barukf6vmluu9qs3v8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNz8hfjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/barukf6vmluu9qs3v8b5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-authentication-in-the-azure-web-app"&gt;
  &lt;/a&gt;
  Configure the Authentication in the Azure Web App
&lt;/h2&gt;

&lt;p&gt;Navigate to your Web App in the Azure Portal and select the new Authentication tab (the old once has &lt;code&gt;classic&lt;/code&gt; next to it).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkyLuqj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqtlb921u5rr003812wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkyLuqj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqtlb921u5rr003812wz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;strong&gt;Add identity provider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the next tab, select Microsoft and configure the necessary settings based on the information we collected in the previous steps&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FzYEGP8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemw0vy6n9n9m59wwgrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FzYEGP8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemw0vy6n9n9m59wwgrt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client ID: the Azure AD B2C App Registration Client ID&lt;/li&gt;
&lt;li&gt;Client Secret: the secret we created earlier&lt;/li&gt;
&lt;li&gt;Issuer URL: should look like this &lt;code&gt;https://&amp;lt;your B2C Name&amp;gt;.b2clogin.com/tfp/&amp;lt;your B2C Name&amp;gt;.onmicrosoft.com/&amp;lt;your user flow name, e.g B2C_1_susi&amp;gt;/v2.0/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leave everything else as default&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcwX4EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmfwt9ml2ucurtj7erjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcwX4EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmfwt9ml2ucurtj7erjv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Restart your web app and try to navigate to it. You should be presented with the sign in page of your user flow, as per the gif below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkPniVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e8zh7rzj6drj7fi6jh8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkPniVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e8zh7rzj6drj7fi6jh8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-user-claims"&gt;
  &lt;/a&gt;
  Accessing User Claims
&lt;/h2&gt;

&lt;p&gt;Although Ez Auth is fairly rudimental (an on/off switch for auth), you can still access the user claims via a special URL. This is all documented &lt;a href="https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Principal ID&lt;/code&gt; and &lt;code&gt;Principal Name&lt;/code&gt; values are available as headers in the HTTP Request so your app can look into these. You can also use a specially crafted URL to get the full user claims. the URL is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;your azure web app URL&amp;gt;/.auth/me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJfmF2Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phlixljjnbb76xm9x7e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJfmF2Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phlixljjnbb76xm9x7e0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also documented &lt;a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-authentication-how-to#access-user-claims"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Ez Auth is a great solution for certain scenarios. And now, there is a way to authenticate users to your Azure Web Apps and Azure Functions using B2C and Ez Auth.&lt;/p&gt;

&lt;p&gt;Give it a go and let us know if you have any feedback or questions in the comments.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Configurar EsLint, Prettier junto con VScode</title>
      <author>mrLuisFer</author>
      <pubDate>Tue, 04 May 2021 00:19:06 +0000</pubDate>
      <link>https://dev.to/mrluisfer/configurar-eslint-prettier-junto-con-vscode-3h00</link>
      <guid>https://dev.to/mrluisfer/configurar-eslint-prettier-junto-con-vscode-3h00</guid>
      <description>&lt;h2&gt;
  &lt;a href="#que-es-eslint"&gt;
  &lt;/a&gt;
  ¿Que es EsLint?
&lt;/h2&gt;

&lt;p&gt;ESLint es una herramienta de código abierto enfocada en el proceso de "lintig" para javascript (o más correctamente para ECMAScript)&lt;br&gt;
ESLint es la herramienta predominante para la tarea de "limpiar" código javascript tanto en el servidor (node.js) como en el navegador&lt;/p&gt;

&lt;p&gt;Bueno, ESLint es una herramienta de "linting", por lo que te puede ayudar a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mostrarte errores de sintaxis.&lt;/li&gt;
&lt;li&gt;Mostrarte errores cuando no se siguen buenas prácticas.&lt;/li&gt;
&lt;li&gt;Proveer sugerencias para mejorar tu código.&lt;/li&gt;
&lt;li&gt;Mantener un estilo consistente en tu código o reforzar reglas internas de tu propio equipo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#que-es-prettier"&gt;
  &lt;/a&gt;
  ¿Que es Prettier?
&lt;/h2&gt;

&lt;p&gt;Es una herramienta para formatear el código, tiene soporte para HMTL, CSS, JavaScript, JSX, TypeScript, GraphQL, etc.&lt;/p&gt;

&lt;p&gt;Se encarga de garantizar que el código se ajuste a un estilo consistente de manera automática. Para ello, analiza el código y lo re-escribe cada vez que se ejecuta.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#que-es-vscode"&gt;
  &lt;/a&gt;
  ¿Que es VScode?
&lt;/h2&gt;

&lt;p&gt;Es un editor de código multiplataforma, totalmente gratis desarrollado por Microsoft&lt;/p&gt;

&lt;p&gt;Incluye soporte para la depuración, control integrado de Git, resaltado de sintaxis, finalización inteligente de código, fragmentos y refactorización de código. &lt;/p&gt;

&lt;p&gt;También es personalizable, por lo que los usuarios pueden cambiar el tema del editor, los atajos de teclado y las preferencias.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#configuraci%C3%B3n"&gt;
  &lt;/a&gt;
  Configuración:
&lt;/h1&gt;

&lt;p&gt;Ahora configuraremos las dependencias que necesitaremos, lo primero es crear nuestro proyecto utilizando&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Inicializa un proyecto utilizando npm para instalar paquetes&lt;/span&gt;
npm init &lt;span class="nt"&gt;--yes&lt;/span&gt;
&lt;span class="c"&gt;# ó&lt;/span&gt;
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Después de eso instalaremos las dependencias necesarias para empezar a configurar Eslint y Prettier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# --sabe-dev Guarda las dependencia en forma de desarrollo&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint prettier eslint-config-prettier 
eslint-plugin-prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  EsLint
&lt;/h3&gt;

&lt;p&gt;La forma de configurar esLint es creando un archivo de configuración el cual podemos crear o podemos utilizar un comando para crear este archivo según nuestras necesidades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .eslintrc.js&lt;/span&gt;
module.exports &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  extends: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'eslint:recommended'&lt;/span&gt;,
    &lt;span class="s1"&gt;'plugin:prettier/recommended'&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  rules: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'prettier/prettier'&lt;/span&gt;: &lt;span class="s1"&gt;'warn'&lt;/span&gt;,
  &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;De esta manera será ESLint el que se encargará de ejecutar Prettier.&lt;/p&gt;

&lt;p&gt;O podemos utilizar el siguiente comando que nos mostrara unos pasos para tener pre configurado nuestro archivo de EsLint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Crea el archivo eslint&lt;/span&gt;
npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nos mostrara una pequeña serie de pasos para crear nuestro archivo de EsLint:&lt;/p&gt;

&lt;p&gt;Primero seleccionaremos como queremos usar EsLint, si solo para revisar la sintaxis, encontrar problemas o forzar un estilo del codigo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e325nmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtelav1z4a6napajyd9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e325nmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtelav1z4a6napajyd9t.png" alt="Forzar estilo de codigo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora seleccionaremos el tipo de módulos queremos usar, si utilizar &lt;code&gt;import&lt;/code&gt; o &lt;code&gt;require&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9YYHRJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fevafw8pd690184vjl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9YYHRJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fevafw8pd690184vjl0.png" alt="Modulos en eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora podemos seleccionar el Framework que utilizaremos en nuestro proyecto, si &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;VueJs&lt;/strong&gt; o &lt;strong&gt;Vanilla Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiMJziWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0njafakbtkpetfqx0jbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiMJziWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0njafakbtkpetfqx0jbf.png" alt="FrameWork para eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;También podemos seleccionar si queremos o estamos utilizando TypeScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTxE3yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaafdmxbiqu8awa5pp8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTxE3yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaafdmxbiqu8awa5pp8d.png" alt="Typescript con Eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y ahora podemos seleccionar el tipo de &lt;strong&gt;Enviroment&lt;/strong&gt; o &lt;strong&gt;Entorno&lt;/strong&gt; para la ejecución de nuestro proyecto si en el Navegador o entorno de NodeJs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGIMeC_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8gatyjvzp2ipcbxk4yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGIMeC_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8gatyjvzp2ipcbxk4yj.png" alt="Entorno de web o nodejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y ahora una parte un tanto importante.&lt;/p&gt;

&lt;p&gt;Podemos utilizar una guía de estilo ya definida, inspeccionar nuestros archivos JavaScript, etc&lt;/p&gt;

&lt;p&gt;En este caso utilizaremos una style guide ya definida&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oVNOXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jupehqqlhwsmu30x0ghf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oVNOXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jupehqqlhwsmu30x0ghf.png" alt="Styled Guide de eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora puedes seleccionar que guía de estilo quieres utilizar en tu proyecto, siendo estas las mas populares, están muy bien construidas y con buenas configuraciones&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;Si estas utilizando React, una recomendación es utilizar la guía de Airbnb&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9UgvqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/murvm23j84jpkj3n3aay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9UgvqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/murvm23j84jpkj3n3aay.png" alt="Airbnb guide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seleccionaremos el formato que queremos utilizar para nuestro archivo de configuración.&lt;/p&gt;

&lt;p&gt;Esto es basado en gustos o preferencias de cada proyecto, en este caso utilizaremos &lt;strong&gt;JSON&lt;/strong&gt; pero cualquier otro formato funciona de la misma manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O31Wl_cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/henxdusoi5f6cuf00n70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O31Wl_cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/henxdusoi5f6cuf00n70.png" alt="formato JSON"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de estas opciones comprobara las dependencias necesarias, y si no están te mostrara que puedes instalar las dependencias necesarias dependiendo de la configuración antes hecha, y las colocara como dependencia de desarrollo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plkpGxOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sdcuu99zqtw864ik6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plkpGxOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sdcuu99zqtw864ik6f.png" alt="Devdependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con esto tendremos nuestro archivo &lt;strong&gt;.eslintrc.json&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h3&gt;

&lt;p&gt;Ahora configuremos Prettier, en la misma documentacion se ha recomendado usar un diferentes formatos como JSON, YAML, TOML y JS&lt;br&gt;
En este ejemplo usaremos JSON que es lo mas sencillo para empezar a configurar&lt;/p&gt;

&lt;p&gt;Entonces crearemos un archivo &lt;strong&gt;.prettierrc&lt;/strong&gt; y dentro del archivo colocaremos las opciones que necesitamos en nuestro proyecto&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"trailingComma"&lt;/span&gt;: &lt;span class="s2"&gt;"es5"&lt;/span&gt;,
  &lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 2,
  &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"singleQuote"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si tenemos un archivo especifico que queremos o no formatear, por ejemplo los archivos de &lt;strong&gt;Test&lt;/strong&gt;&lt;br&gt;
Podemos colocar en expresiones regulares, que se ignore todos los archivos con cierta extensión&lt;/p&gt;

&lt;p&gt;Inclusive dentro de cada cierto archivo puedes colocar ciertas opciones especificas&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"overrides"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"files"&lt;/span&gt;: &lt;span class="s2"&gt;"*.test.js"&lt;/span&gt;,
      &lt;span class="s2"&gt;"options"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,&lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 2
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"files"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*.html"&lt;/span&gt;, &lt;span class="s2"&gt;"legacy/**/*.js"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
      &lt;span class="s2"&gt;"options"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 4
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora dentro de nuestro archivo de configuración podemos crear diferentes reglas las cuales ayudaran a dar un mejor estilo a nuestro código o para seguir buenas practicas&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYbyZtOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usd48w5jr5k522adl16t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYbyZtOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usd48w5jr5k522adl16t.png" alt="Buenas practicas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h3&gt;

&lt;p&gt;Con todo listo podemos crear &lt;strong&gt;scripts&lt;/strong&gt; lo cual nos ayudara a automatizar el "linteo" o formatear nuestros archivos simplemente con un comando&lt;/p&gt;

&lt;p&gt;Dentro de nuestro package.json vamos a la sección de scripts, tendremos uno llamado "test" que no utilizaremos por el momento, o si ya tienes mas scripts en tu proyecto, simplemente agrega una coma y puedes colocar estas 3 opciones que explicaremos cada una de sus funciones&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_hE3jyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sugeajc1g8pk0fkp3vjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_hE3jyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sugeajc1g8pk0fkp3vjt.png" alt="Scripts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lint&lt;/strong&gt;&lt;br&gt;
Ejecuta eslint para "lintear" y revisar la sintaxis de &lt;strong&gt;todos&lt;/strong&gt; nuestros archivos en nuestro proyecto&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lint-fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecuta eslint con el flag &lt;strong&gt;—fix&lt;/strong&gt; que hace que si encuentra un estilo que no se sigue una regla la cual causa un conflicto con eslint, la corrige&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecuta Prettier para formatear todos nuestros archivos&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora solo ejecuta &lt;strong&gt;npm nombreDelComando&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run lint
npm run lint-fix
npm run format
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VScode
&lt;/h3&gt;

&lt;p&gt;Si estas utilizando el editor de código Visual Studio Code o VScode&lt;/p&gt;

&lt;p&gt;Puedes integrar &lt;strong&gt;EsLint y Prettier&lt;/strong&gt; dentro del mismo editor utilizando las extensiones con el mismo nombre:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDiWaaC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3el8c9mnf7nba9i4hhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDiWaaC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3el8c9mnf7nba9i4hhw.png" alt="Eslint extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8paGKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7per4r0yfui73qofigz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8paGKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7per4r0yfui73qofigz.png" alt="Prettier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probablemente te aparezca con la palabra &lt;strong&gt;Install&lt;/strong&gt; le darás click ahí para instalarlas&lt;/p&gt;

&lt;p&gt;Después de que estén instaladas, nos iremos a la configuración de Visual Studio Code&lt;/p&gt;

&lt;p&gt;Puedes presionar el shortcut &lt;strong&gt;ctrl + ,&lt;/strong&gt; o en la esquina inferior donde hay un símbolo de una tuerca, darás click y darás en settings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx9VT9oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727pyp0v6v2j8iywpnnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx9VT9oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727pyp0v6v2j8iywpnnh.png" alt="Ajustes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Te saldrá una ventana nueva, y arriba a la derecha estará un símbolo o icono el cual debes presionar para abrir la configuración en formato JSON ya que así es como se configura VScode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZkn6Yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu62n0jm1g2rjbcc08qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZkn6Yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu62n0jm1g2rjbcc08qn.png" alt="Ajustes de VsCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y agregaremos estas configuraciones &lt;strong&gt;básicas&lt;/strong&gt; para tener funcionando las extensiones de Eslint y Prettier en nuestro editor sin necesidad de crear los archivos, lo cual es mas recomendable utilizar en proyectos con mas personas ya que cada desarrollador y desarrolladora tiene su propia configuración&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"editor.defaultFormatter"&lt;/span&gt;: &lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.formatOnSave"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.formatOnPaste"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.codeActionsOnSave"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;"source.fixAll.eslint"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;También podemos definir estilos en nuestra configuración para un lenguaje especifico:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"[javascript]"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"editor.defaultFormatter"&lt;/span&gt;: &lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;,
    &lt;span class="s2"&gt;"editor.formatOnSave"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
    &lt;span class="s2"&gt;"editor.tabSize"&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="s2"&gt;"[python]"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"editor.tabSize"&lt;/span&gt;: 4
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y con esto tendremos listo nuestra integración de eslint y prettier en vscode :D&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>prettier</category>
    </item>
    <item>
      <title>"Web Developer Basics"</title>
      <author>Cale Cabrera</author>
      <pubDate>Tue, 04 May 2021 00:17:48 +0000</pubDate>
      <link>https://dev.to/caledev/web-developer-basics-4hei</link>
      <guid>https://dev.to/caledev/web-developer-basics-4hei</guid>
      <description>&lt;h1&gt;
  &lt;a href="#web-developers-abc"&gt;
  &lt;/a&gt;
  Web Developers ABC 👶🏻
&lt;/h1&gt;

&lt;p&gt;Every single developer in the world or at least every developer I've met on my journey, when you ask them "Where should I start if I want to become a web developer?" They all will tell you "HTML, CSS and JavaScript". So, let's break it down! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML 1️⃣ 🧡
&lt;/h2&gt;

&lt;p&gt;First, our dear friend HTML. Most people say HTML is the "skeleton" of your website and I agree. HTML allows you to structure and give a shape to your page, like the skeleton of your body. It is really important to learn and absorb it completely, you must be able to understand how it works and how to manipulate it for sure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS 2️⃣ 💙
&lt;/h2&gt;

&lt;p&gt;Beautiful and stylish CSS, the perfect words to define CSS. If you have a skeleton, so, you need a skin on it, a tool to beautify this hollow and empty skeleton. Once you master it, once you are able to apply content box, animations, flexbox, grid, etc. Probably, you think you're a master of CSS, let me broke your little heart and tell you that there's a wonderful world beyond CSS, from preprocessors such as sass, stylus and less to frameworks such as bootstrap, materialize, tailwind and so much more to learn. Don't worry, I promise you it's really cool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript 3️⃣ 💛
&lt;/h2&gt;

&lt;p&gt;Last but not least, JavaScript. If HTML is the skeleton and CSS the skin, what is JavaScript? JavaScript my friend is the essence of the body for me. It's what brings life to your static and boring website. JavaScript has the power of adding more fun and dynamism to any website. Simply beautiful.&lt;br&gt;
After a while using JavaScript and doing some dynamic pages, you'll ask yourself if there's a way to create more complex websites such as Facebook, YouTube, Netflix and even Only Fans 🙀 Just kidding, but yes. Here's where frameworks come out! React, Angular and Vue are the most popular and probably one of the frameworks you'll use sooner than later. Front-end frameworks are a really helpful and valuable tool for web developers and I'm pretty sure I'll be writing a post about in the future. For now, JavaScript is more than enough and a MUST for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it-is-it"&gt;
  &lt;/a&gt;
  That's it, is it? 🤔
&lt;/h3&gt;

&lt;p&gt;To sum up, do not be scared of technologies, love them indeed. Doing your own research and find out what's your favorite and what you'll be using to grow as a web developer. Master the basics and go further. 🚀&lt;/p&gt;

&lt;p&gt;What about you? Do you start learning HTML, CSS and JavaScript? 👀&lt;/p&gt;

&lt;p&gt;Your buddy,&lt;br&gt;
Cale ⌨🖱&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Everything you need to know about Styled Components
</title>
      <author>Paul Ccari</author>
      <pubDate>Tue, 04 May 2021 00:12:08 +0000</pubDate>
      <link>https://dev.to/paulclindo/everything-you-need-to-know-about-styled-components-2a6a</link>
      <guid>https://dev.to/paulclindo/everything-you-need-to-know-about-styled-components-2a6a</guid>
      <description>&lt;p&gt;When I started learning CSS, it seems pretty straightforward to play with some selectors and apply styles to any elements but as bigger, as my projects get, my style sheets look more chaotic and you've probably experienced it for yourself. At some point, it gets hard to figure out a good way to organize your styles.&lt;/p&gt;

&lt;p&gt;Then you probably jump to use some preprocessors like SASS, LESS which add a lot of useful features but they don't do much to control CSS specificity unless you start using some methodologies like BEM (Block, Element, Modifier) which allows reuse of existing code without duplications and divide UI into independent blocks.&lt;/p&gt;

&lt;p&gt;After a couple of years, a new paradigm of CSS-in-JS appears and tries to solve these problems to construct and manage our styles in a component-specific manner to allows us to create custom, exportable components.&lt;/p&gt;

&lt;p&gt;One of them is Styled Components, it provides us many cool features to style our React components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It generates unique class names for your styles which means that you won't have any issues with duplication, overlap, or misspellings.&lt;/li&gt;
&lt;li&gt;You can adapt styles of a component based on its props which makes dynamic styling.&lt;/li&gt;
&lt;li&gt;Easier to maintain styles no matter how big is your application while still writing CSS you know&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Styled components are available both for React and React Native&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You can install it running a single command and you're ready to roll:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#style-an-html-element"&gt;
  &lt;/a&gt;
  Style an HTML element
&lt;/h3&gt;

&lt;p&gt;We are going to create a Title component based in an HTML element like &lt;code&gt;h1&lt;/code&gt; to give some styles like giving a purple color and align it to center to use is it in Blog Page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    color: purple;
    text-align: center;
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Personal Blog &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BlogPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#style-a-react-component"&gt;
  &lt;/a&gt;
  Style a React Component
&lt;/h3&gt;

&lt;p&gt;What if we already have a set of custom React components and we want to extend styles? It's almost similar, when you want to style an HTML element, you put a dot. If you want to style the components, you put parentheses and pass the actual component. In this case, we are gonna style a button from &lt;code&gt;material-ui&lt;/code&gt; and adjust his size with css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FullWidthButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
    width: 300px;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that you can style pseudo-selectors and classes inside of the styled component if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    ...

    :hover {
        color: blue;
    }

    ::before {
        content: ' ';
        ...
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Styled components works with Tagged template literal under the hood. If you don't know much about it, you can find more info here &lt;a href="https://www.freecodecamp.org/news/a-quick-introduction-to-tagged-template-literals-2a07fd54bc1d/"&gt;FreeCodeCamp&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-global-styles"&gt;
  &lt;/a&gt;
  Creating Global Styles
&lt;/h3&gt;

&lt;p&gt;To give global style, we need to use &lt;code&gt;createGlobalStyle&lt;/code&gt; and create a constant from it and anything inside of here will be styled in our entire application. This will be a component that needs to be called at the Root component and make sure it starts with an uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="s2"&gt;`
    body {
        font-family: Roboto;
    }
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlobalStyles&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adjust-style-based-on-props"&gt;
  &lt;/a&gt;
  Adjust Style based on props
&lt;/h3&gt;

&lt;p&gt;We can set dynamic styles according to props that can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on conditionals.&lt;/p&gt;

&lt;p&gt;A simple case would be to give some styles to stand out recent blog posts we published from all the list. I'm gonna give a gradient color to the background of card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
    ...
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNewPost&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="s2"&gt;`
                background: linear-gradient(to right, red, orange);
            `&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogList&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogCard&lt;/span&gt; 
                &lt;span class="na"&gt;isNewPost&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Everything you need to know about Styled Components"&lt;/span&gt;
                &lt;span class="err"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogCard&lt;/span&gt; 
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Learning Tips from my experience as developer"&lt;/span&gt;
                &lt;span class="err"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#style-a-component-based-on-complex-props"&gt;
  &lt;/a&gt;
  Style a component based on complex props
&lt;/h3&gt;

&lt;p&gt;In some scenarios, we will have a prop that can be a string and not only a boolean value which means we will have more conditionals. &lt;/p&gt;

&lt;p&gt;Eg. I have a list of blog post cards and I would love to change the color of its category according to its value. If it's &lt;code&gt;personal&lt;/code&gt; we'll set it to purple color, if it's &lt;code&gt;react&lt;/code&gt; should be orange and if it's &lt;code&gt;git&lt;/code&gt; let's change it to red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CategoryName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="s2"&gt;`
    font-size: 0.875rem;
    color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;personal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogCard&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CategoryName&lt;/span&gt; &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CategoryName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h3&gt;

&lt;p&gt;To create animations in styled components, we need to import &lt;code&gt;keyframes&lt;/code&gt; and start writing our css animation code. Then we need to reuse that variable where we needed.&lt;/p&gt;

&lt;p&gt;In this case, we'll animate the position of an &lt;code&gt;h1&lt;/code&gt; to go from left ro right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX(100%)
    }
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    animation: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 2s ease infinite;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-and-use-a-theme"&gt;
  &lt;/a&gt;
  Create and use a Theme
&lt;/h3&gt;

&lt;p&gt;To ingrate a theme on our application, we need to use the &lt;code&gt;ThemeProvider&lt;/code&gt;  and pass an object to it's &lt;code&gt;theme&lt;/code&gt; prop. We will use this theme to set colors and fonts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// create Theme object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#123123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#2563eb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Roboto, sans-serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Montserrat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// how to use it in a styled component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    text-align: center;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    font-family: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; // destructuring props
`&lt;/span&gt;

&lt;span class="c1"&gt;// Call ThemeProvider in your Root Component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello its from the theme&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-css-endraw-prop-to-define-styles"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;css&lt;/code&gt; prop to define styles
&lt;/h3&gt;

&lt;p&gt;Sometimes we don't want to create an extra component to just apply a bit of styling and there it comes &lt;code&gt;css&lt;/code&gt; prop. It works on HTML tags as well as components and supports everything styled components support including props, theme and custom components.&lt;/p&gt;

&lt;p&gt;To enable support for the css prop you have to use a babel plugin or macro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage with the &lt;a href="https://styled-components.com/docs/tooling#babel-plugin"&gt;babel plugin&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Babel plugin does that automatically!&lt;/span&gt;

&lt;span class="c1"&gt;// HTML element&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    background: papayawhip;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Custom component&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;
  &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"padding: 0.5em 1em;"&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Usage with Babel macro&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// You need to import it manually&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/macro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Custom component&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
  &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    background: papayawhip;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that Babel plugin or macro turns any elements with a css prop into a styled components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-as-endraw-prop-to-reassign-the-html-tag"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;as&lt;/code&gt; prop to reassign the HTML tag
&lt;/h3&gt;

&lt;p&gt;In some instances, we want to keep all styling we've applied to a component but just change what element/component is rendering. &lt;/p&gt;

&lt;p&gt;I usually use it when it comes about anchor tags and buttons. We don't need to rewrite the css rules and create a component for our anchor tag when it has the same look and feel with our buttons. Instead, we can use &lt;code&gt;as&lt;/code&gt; and then pass the attributes the anchor needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    ...
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.google.com.pe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-attrs-endraw-method-to-add-html-attributes"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;attrs&lt;/code&gt; method to add HTML attributes
&lt;/h3&gt;

&lt;p&gt;It allows us to change and add attributes to our styled elements. The &lt;code&gt;attrs&lt;/code&gt; object accepts either any type of attributes that belongs to HTML tags or a function that receives props to finally merged them into existing component props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// In this case, type `button` is going to override whatever is in component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="s2"&gt;`
    display: inline-block;
    ...
`&lt;/span&gt;

&lt;span class="c1"&gt;// We can use props&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
    display: inline-block;
    ...
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-styled-components-with-the-object-syntax"&gt;
  &lt;/a&gt;
  Use Styled Components with the Object Syntax
&lt;/h3&gt;

&lt;p&gt;There is also another way that we can style components, we can use object-based styling. Let's see how different that is. At the end, both ways do exactly the same thing and they are just different ways of writing styled components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// by default its pixel&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sans-serif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;As you can see, it's actually pretty easy to understand and start using styled-components in your React applications. There are cool features that can help us to custom our component the way we want, make some dynamic styling using props, creating a theme and so on. So I would encourage you to dive into &lt;a href="https://github.com/styled-components/styled-components"&gt;the documentation&lt;/a&gt; and try it out on your projects. &lt;/p&gt;

&lt;p&gt;Here are a few miscellaneous link related that help me to understand more about styled components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/build-your-own-styled-components-library/"&gt;Build your own styled-components library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/a-quick-introduction-to-tagged-template-literals-2a07fd54bc1d/"&gt;A quick introduction to Tagged Template Literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/styled-components/announcing-native-support-for-the-css-prop-in-styled-components-245ca5252feb"&gt;Enabling support for the css prop in Styled components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed it. Thanks for reading! &lt;/p&gt;

&lt;p&gt;... As always, enjoy your own process of learning 🚀&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://paulccari.com"&gt;reach out&lt;/a&gt; if you wanna chat about anything.&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>20 JavaScript Job Interview Questions to Know with Answers</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 03 May 2021 22:50:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/20-javascript-job-interview-questions-to-know-with-answers-1cmc</link>
      <guid>https://dev.to/ubahthebuilder/20-javascript-job-interview-questions-to-know-with-answers-1cmc</guid>
      <description>&lt;p&gt;You applied for a job as a web developer few days back. An interview was scheduled and you're worried that your knowledge of JavaScript is sub-par. &lt;/p&gt;

&lt;p&gt;If that is the case, well you're in luck! If not, you are still going to gain some information for any future interviews you are part of.&lt;/p&gt;

&lt;p&gt;Below are 20 common job interview questions on JavaScript, along with their respective answers:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript
&lt;/h3&gt;

&lt;p&gt;Well let's be honest, You probably will be thinking this is such an easy question. But you may be surprised at how bad you'll fumble when trying to explain what JavaScript is to your potential boss. JavaScript is  the language used to write programs on websites and web apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-dom"&gt;
  &lt;/a&gt;
  What is the DOM
&lt;/h3&gt;

&lt;p&gt;The Document Object Model (DOM) is a tree-like, top down representation of your web page and all it's elements. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLiKmCVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwqm3v7nwavmni35za6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLiKmCVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwqm3v7nwavmni35za6j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mention-5-javascript-methods-for-dom-manipulation-and-explain-their-uses"&gt;
  &lt;/a&gt;
  Mention 5 JavaScript methods for DOM manipulation and explain their uses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;createElement()&lt;/strong&gt;: This method creates a new HTML element in the web page. It takes a single parameter, which is the name of the element to be created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;querySelector()&lt;/strong&gt;: this method is used to target elements based on any CSS selector. It always returns the first element that matches one or more CSS selectors. It takes the selector as parameter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;querySelectorAll()&lt;/strong&gt;: while querySelector returns only the first instance that matches, this method returns all the elements that matches one or more CSS selectors. The elements are returned in a nodelist, which is similar to a JavaScript object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;getElementById()&lt;/strong&gt;: as it's name suggests, this method gets an element based on it's unique id attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;addEventListener()&lt;/strong&gt;: This method attaches an event listener to an element in the DOM. It takes a function as an additional parameter. When that element gets triggered by the set event, the callback function will run.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-variables"&gt;
  &lt;/a&gt;
  What are Variables
&lt;/h3&gt;

&lt;p&gt;All programming languages work with data and variables are simply containers for that data. When assigned to a variable, that data becomes the 'value'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-and-explain-the-variable-declarations-in-javascript"&gt;
  &lt;/a&gt;
  Define and explain the variable declarations in JavaScript
&lt;/h3&gt;

&lt;p&gt;The difference between var, let, and const in JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Var&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is globally scoped&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is reassignable&lt;/li&gt;
&lt;li&gt;It's not block scoped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Const&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is used to store immutable/unchanging values.&lt;/li&gt;
&lt;li&gt;It is not globally scoped&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is block scoped. That is, it's inaccessible outside blocks like if conditionals and for loops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not globally scoped&lt;/li&gt;
&lt;li&gt;It is reassignable&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is block scoped.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you're interested in learning more about modern JavaScript, I'll recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React,: The Ultimate Guide by Sleepless Yogi&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-asynchronous-programming"&gt;
  &lt;/a&gt;
  What is Asynchronous programming
&lt;/h3&gt;

&lt;p&gt;Asynchronous programming is the principle of making code run later and not immediately/sequentially. This is achieved with Callbacks, Promises and other Async patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explain-global-scoping-and-local-scoping"&gt;
  &lt;/a&gt;
  Explain Global scoping and local scoping
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global variables can be accessed from anywhere in the script.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local variables, on the other hand, have function scoping. This means that a variable define in a function is not accessible outside that function. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nodejs-and-what-does-it-do"&gt;
  &lt;/a&gt;
  What is Node.js and what does it do
&lt;/h3&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine for executing JavaScript code. Remember that before JavaScript used to run only on browsers. You couldn't run JavaScript in any other environments. However, with the coming of Node.js, you could now run JavaScript on web servers independent of a web browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-all-the-data-types-in-javascript"&gt;
  &lt;/a&gt;
  List all the data types in JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt; Symbol (ES6)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-currying"&gt;
  &lt;/a&gt;
  What is Currying
&lt;/h3&gt;

&lt;p&gt;Currying is a technique which happens when you take a function that would require multiple arguments and return a series of functions that take exactly one argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Presenting Research&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;415&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3 - 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exhibit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Emerging Scholarship&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6 a.m. - 6 p.m.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jally Ave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;555-555-5555&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exhibit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exhibit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-and-explain-all-array-iterator-methods"&gt;
  &lt;/a&gt;
  List and explain all array iterator methods
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Map()&lt;/strong&gt;: This method loops through an array and always returns an array. You can then define some action which will be applied to all items in the array. For example, you could say that all numbers in an array be divided by two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;filter ()&lt;/strong&gt;: This method loops through an array collection and returns another array based on the filter condition. For example, you say that it should filter only ages which is below 50 and all numbers above 50 will not be included.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find ()&lt;/strong&gt;: This is quite similar to filter(). The main difference is that this method returns only the first instance that matches the condition. Every subsequent match will be ignored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sort()&lt;/strong&gt;: This method loops through an array and returns another re-ordered array. The new order is based on the condition stipulated. For example, you can sort all names alphabetically, either in an ascending or descending order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;forEach()&lt;/strong&gt;: This method loops through an array and performs a consistent action on all items in it. It doesn't return a new array. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reduce()&lt;/strong&gt;: This method is used to  transform an array into a completely new one, making radical changes to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-any-5-new-features-you-know-in-es6"&gt;
  &lt;/a&gt;
  List any 5 new features you know in ES6
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript Classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrow functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Introduction of let and const keywords for variable declarations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The for/of loop. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default Parameter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rest and Spread Operators&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React
&lt;/h3&gt;

&lt;p&gt;React is a modern, u opinionated JavaScript library used to build modular and resusable UI Components like buttons as well as single-page applications. React utilitizes the virtual DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-virtual-dom"&gt;
  &lt;/a&gt;
  What is the virtual DOM
&lt;/h3&gt;

&lt;p&gt;A virtual DOM is a lightweight JavaScript representation of the DOM used in declarative web frameworks such as React and Vue.js, . Updating the virtual DOM is comparatively faster than updating the real DOM, since nothing has to be rendered onto the screen. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-classes-write-a-typical-syntax-for-defining-a-class"&gt;
  &lt;/a&gt;
  What are classes. Write a typical syntax for defining a class
&lt;/h3&gt;

&lt;p&gt;Classes are blueprints for objects.  To illustrate, you can think of an architectural plan for a building as a class, and the final building gotten from that plan as an object. The architectural plan won't have properties such as its color, kind of furniture to be used etc. All of those properties will be supplied when "constructing" the building, which is the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Getter&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calcArea&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Method&lt;/span&gt;
  &lt;span class="nx"&gt;calcArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  What are Objects
&lt;/h3&gt;

&lt;p&gt;When a class gets "instantiated", an object is constructed. Objects are data structures which have attributes that came in name: value pairs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distinguish-arrow-function-from-named-function"&gt;
  &lt;/a&gt;
  Distinguish arrow function from named function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;namedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a named function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is an arrow function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-libraries"&gt;
  &lt;/a&gt;
  What are Libraries
&lt;/h3&gt;

&lt;p&gt;Libraries are already-made packages of code/modules which can be imported into another program to perform a specific task.&lt;/p&gt;

&lt;p&gt;Example of this is lodash, which contains a set of utility functions for some common tasks in programming like sorting etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript-and-when-should-i-use-it"&gt;
  &lt;/a&gt;
  What is Typescript and when should I use it
&lt;/h3&gt;

&lt;p&gt;Typescript is a superset of JavaScript; it contains all of JavaScript's syntax plus some additional functionality. It is used to write strongly typed JavaScript with type checking mechanisms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buy-me-a-pineapple"&gt;
  &lt;/a&gt;
  Buy me a pineapple 😋
&lt;/h3&gt;

&lt;p&gt;Yep! If you liked this article, I'll appreciate you buying me my favorite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>50 Free Online Resources To Improve Your Technical Skills</title>
      <author>Jemima Abu</author>
      <pubDate>Mon, 03 May 2021 22:44:23 +0000</pubDate>
      <link>https://dev.to/jemimaabu/online-resources-to-improve-technical-skills-56ma</link>
      <guid>https://dev.to/jemimaabu/online-resources-to-improve-technical-skills-56ma</guid>
      <description>&lt;p&gt;Online courses are a popular choice for learning technical skills and advancing your career, mostly due to their easy access and multiple options.&lt;/p&gt;

&lt;p&gt;In this article, we've compiled 50 online courses on topics ranging from artificial intelligence to prepping for interviews. &lt;/p&gt;

&lt;p&gt;And the best part is: they're all free.&lt;/p&gt;

&lt;p&gt;(Until May 23, 2021 at least. You can read &lt;a href="https://www.udacity.com/legal/en-eu/one-month-free-access"&gt;this article&lt;/a&gt; for more information.)&lt;/p&gt;

&lt;p&gt;The courses listed in this article are sorted into the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/b3ONV9"&gt;Artificial Intelligence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/OReKbQ"&gt;Autonomous Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/3PJZEK"&gt;Business&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/vnPjVd"&gt;Cloud Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/yRqbkV"&gt;Cybersecurity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/Ke0Xzn"&gt;Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/QOjnnP"&gt;Programming &amp;amp; Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/rnaDDQ"&gt;Career&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#free-artificial-intelligence-courses-5"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Artificial Intelligence Courses (5)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NJrW99T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8twffmwk4n2r43jvkza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NJrW99T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8twffmwk4n2r43jvkza.png" alt="School of Artificial Intelligence"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/WDyddP"&gt; &lt;strong&gt;AI Programming with Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn Python, NumPy, pandas, Matplotlib, PyTorch, Calculus, and Linear Algebra—the foundations for building your own neural network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/oe4L09"&gt; &lt;strong&gt;Become an AI Product Manager&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn to develop AI products that deliver business value. Build skills that help you compete in the new AI-powered world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/jWeyZe"&gt;&lt;strong&gt;Artificial Intelligence for Trading&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complete real-world projects designed by industry experts, covering topics from asset management to trading signal generation. Master AI algorithms for trading, and build your career-ready portfolio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/AoP321"&gt;&lt;strong&gt;Become a Machine Learning Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn advanced machine learning techniques and algorithms -- including how to package and deploy your models to a production environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/7maOOA"&gt;&lt;strong&gt;Expand Your Knowledge of Artificial Intelligence&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn to write programs using the foundational AI algorithms powering everything from NASA's Mars Rover to DeepMind's AlphaGo Zero.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-autonomous-system-courses-4"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Autonomous System Courses (4)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5RHVy6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dxn5yxy55ycysau4bun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5RHVy6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dxn5yxy55ycysau4bun.png" alt="School of Autonomous Systems"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/7maOny"&gt;&lt;strong&gt;Become a C++ Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn C++, a high-performance programming language used in the world's most exciting engineering jobs -- from self-driving cars and robotics, to web browsers, media platforms, servers, and even video games.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/kjOM9N"&gt;&lt;strong&gt;Intro to Self-Driving Cars&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this program, you'll sharpen your Python skills, apply C++, apply matrices and calculus in code, and touch on computer vision and machine learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/rnaDLR"&gt;&lt;strong&gt;Become a Self-Driving Car Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn the skills and techniques used by self-driving car teams at the most advanced technology companies in the world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/DVyeOn"&gt;&lt;strong&gt;Become a Robotics Software Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Build hands-on projects to acquire core robotics software engineering skills: ROS, Gazebo, Localization, Mapping, SLAM, Navigation, and Path Planning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-business-courses-6"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Business Courses (6)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfiCoV0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t7fjme0pitkgjf2vdhq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfiCoV0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5t7fjme0pitkgjf2vdhq.png" alt="School of Business"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/9WLzyy"&gt;&lt;strong&gt;Become a UX Designer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Design impactful user experiences for products in today's digital world. Build a portfolio that showcases your ability to transform user research to high-fidelity interactive designs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/x9L5zv"&gt;&lt;strong&gt;Become a Digital Marketer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gain real-world experience to run live campaigns as you learn from top experts in the field. Launch your career with a 360-degree understanding of digital marketing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/3PJZYd"&gt;&lt;strong&gt;Learn SQL&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Master SQL, the core language for Big Data analysis, and enable insight-driven decision-making and strategy for your business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/9WLzy3"&gt;&lt;strong&gt;Agile Software Development&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn best practices for using the Agile framework to build better products faster and more efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/kjOMJd"&gt;&lt;strong&gt;Become a Product Manager&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Envision and lead the product strategy of industry-defining products, and learn to successfully bring them to market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/gbO6a9"&gt;&lt;strong&gt;Business Analytics&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gain foundational data skills applicable to any industry. Collect and analyze data, model business scenarios, and communicate your findings with SQL, Excel, and Tableau&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-cloud-computing-courses-5"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Cloud Computing Courses (5)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55hcGups--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zmwq7t6yl9teqh4xnnq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55hcGups--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zmwq7t6yl9teqh4xnnq.png" alt="School of Cloud Computing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/QOjnGo"&gt;&lt;strong&gt;Intro to Cloud Computing&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this course, you'll learn foundational cloud computing skills that will set you on your path to a career in cloud computing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/5b5Zq2"&gt;&lt;strong&gt;Become a Cloud Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enroll now to build and deploy production-ready full stack apps at scale on AWS, an essential skill for advancing your web development career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/JrKVoq"&gt;&lt;strong&gt;Become a Cloud DevOps Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enroll now to operationalize infrastructure at scale and deliver applications and services at high velocity, an essential skill for advancing your career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/0J9jXR"&gt;&lt;strong&gt;Become a Cloud Developer using Microsoft Azure&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn to build cloud-based applications on Microsoft Azure, the cloud services platform used by 95% of Fortune 500 companies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/BXnyey"&gt;&lt;strong&gt;Become an AWS Cloud Architect&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lead your organization's cloud computing strategy as an AWS Cloud Architect. Plan, design, and build secure, high availability cloud infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-cybersecurity-courses-6"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Cybersecurity Courses (6)&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/vnPj1v"&gt;&lt;strong&gt;Introduction to Cybersecurity&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get your start in the high growth field of Cybersecurity by building foundational skills in how to evaluate, maintain, and monitor the security of computer systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://imp.i115008.net/x9L5X1"&gt;&lt;strong&gt;Network Security&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Georgia Institute of Technology&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course provides an introduction to computer and network security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://imp.i115008.net/a1OA6R"&gt;&lt;strong&gt;Intro to Information Security&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Georgia Institute of Technology&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course touches on the importance of management and administration, the place information security holds in overall business risk, social issues such as individual privacy, and the role of public policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/Ke0X2N"&gt;&lt;strong&gt;Become A Security Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gain the highly sought-after skills to protect an organization's computer networks and systems from security threats or attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/JrKVQq"&gt;&lt;strong&gt;Become A Security Analyst&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll master the skills necessary to become a successful Security Analyst and learn to identify, correct and respond to security weaknesses and incidents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/doOV3j"&gt;&lt;strong&gt;Become An Ethical Hacker&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meet the growing demand for cybersecurity professionals by gaining the offensive security skills to protect an organization's computer networks and systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-data-science-courses-7"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Data Science Courses (7)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ5dCdHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ngrebiyj59dty4318x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJ5dCdHv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ngrebiyj59dty4318x0.png" alt="School of Data Science"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/MXABjq"&gt;&lt;strong&gt;Programming for Data Science with Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prepare for a data science career by learning the fundamental data programming tools: Python, SQL, command line, and git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/x9L5b1"&gt;&lt;strong&gt;Programming for Data Science with R&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prepare for a data science career by learning the fundamental data programming tools: R, SQL, command line, and git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/9WLzQ5"&gt;&lt;strong&gt;Data Analysis and Visualization with Power BI&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meet the growing demand for data analysis and visualization professionals by gaining the Power BI skills that top companies want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/n1XEbA"&gt;&lt;strong&gt;Become a Data Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Data Engineering is the foundation for the new world of Big Data. Enroll now to build production-ready data infrastructure, an essential skill for advancing your data career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/4eGmKn"&gt;&lt;strong&gt;Become a Data Analyst&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use Python, SQL, and statistics to uncover insights, communicate critical findings, and create data-driven solutions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/NK90PV"&gt;&lt;strong&gt;Become a Data Scientist&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gain real-world data science experience with projects designed by industry experts. Build your portfolio and advance your data science career.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/e41EBO"&gt;&lt;strong&gt;Become a Data Architect&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn how to plan, design and implement enterprise data infrastructure solutions and create the blueprints for your organization's data success.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Advanced&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-programming-amp-development-courses-10"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Programming &amp;amp; Development Courses (10)&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pi4OqlfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxmspjwonkvhnejr8jy3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pi4OqlfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxmspjwonkvhnejr8jy3.png" alt="School of Programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/P0OVW6"&gt;&lt;strong&gt;Learn to Code&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course is your first step towards careers in Web and App Development, Machine Learning, Data Science, AI, and more!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Beginner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/a1OA4j"&gt;&lt;strong&gt;Become A Front End Web Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn how to build high-quality websites and dynamic applications to create stunning user experiences for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/Zd6KRR"&gt;&lt;strong&gt;Introduction to Backend Development&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course presents an overview of a variety of Web backend topics: handling user input, producing templated output, storing information in databases and data stores, and building systems with secure user accounts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/mgOE0D"&gt;&lt;strong&gt;Become A Full Stack Web Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn to design and develop powerful modern web applications that form the foundation for the apps, websites, and systems that people and businesses use every day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/MXABWP"&gt;&lt;strong&gt;Become a Blockchain Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demand for blockchain developers is skyrocketing. In this program, you'll work with the Bitcoin and Ethereum protocols, build projects for real-world application, and gain the essential skills for a career in this dynamic space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/EaEeAX"&gt;&lt;strong&gt;Become a Java Web Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn enterprise scale back-end development with Java, and be prepared for the software engineering jobs that are in demand at a majority of Fortune 500 companies like Google, Amazon, Netflix, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/OReKEA"&gt;&lt;strong&gt;Become a React Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React is completely transforming Front-End Development! Master this powerful UI library from Facebook with this course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/vnPjmA"&gt;&lt;strong&gt;Become an iOS Developer&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Master the Swift programming language, and create a portfolio of iOS apps for iPhone and iPad to showcase your skills!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://imp.i115008.net/yRqboD"&gt;&lt;strong&gt;Android Basics&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Google&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This course is for aspiring Android developers who are new to programming to ensure that you get the real-world skills you need to know how to build and accelerate your journey towards becoming a professional Android Developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/vnPjOA"&gt;&lt;strong&gt;Data Structures and Algorithms&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get hands-on practice with over 100 data structures and algorithm exercises and technical mentor support when needed to help prepare you for interviews and on-the-job scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level:&lt;/strong&gt; Intermediate&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-career-courses-7"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Career Courses (7)&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://imp.i115008.net/BXnyBq"&gt;&lt;strong&gt;Refresh Your Resume&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Grow With Google&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your resume is the first step in the job search. Through this course, you will identify the companies you want to work for, and showcase your key achievements to align with their roles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://imp.i115008.net/OReKan"&gt;&lt;strong&gt;Strengthen Your LinkedIn Network &amp;amp; Brand&lt;/strong&gt;&lt;/a&gt; by &lt;em&gt;Grow With Google&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Networking is an essential job search skill. In this course, you'll learn strategies and tactics for effective networking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/vnPj0j"&gt;&lt;strong&gt;Craft Your Cover Letter&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Introduce yourself with a memorable cover letter. In this short course, you'll use proven writing techniques to show why you are the best person for the job.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/rnaDWG"&gt;&lt;strong&gt;Front-End Interview Prep&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will review common Front-End Web Developer interview topics ranging from palindrome functions to closures, and learn best practices for behavioral questions and whiteboard problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/5b5Zzn"&gt;&lt;strong&gt;Android Interview Prep&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll work through common Android Developer interview topics ranging from explicit and implicit intents to designing a min stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/AoP35R"&gt;&lt;strong&gt;Data Science Interview Prep&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this course, you'll review the common questions asked in data science, data analyst, and machine learning interviews.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imp.i115008.net/XxmnE5"&gt;&lt;strong&gt;Full-Stack Interview Prep&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll review common Full Stack Web Developer interview topics like palindrome functions and data structures.&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>When to useCallback and useMemo in our React projects?</title>
      <author>Brayan Arrieta</author>
      <pubDate>Mon, 03 May 2021 21:49:44 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/when-to-usecallback-and-usememo-in-our-react-projects-199j</link>
      <guid>https://dev.to/brayanarrieta/when-to-usecallback-and-usememo-in-our-react-projects-199j</guid>
      <description>&lt;p&gt;React.js is currently one of the most popular JavaScript libraries for front-end developers.&lt;/p&gt;

&lt;p&gt;React really changed the way we build Single-page applications (SPAs). One of its greatest features is hooks introduced in React 16.8. That new feature enables the possibility of using functional components instead of class components handling the state with the Hooks.&lt;/p&gt;

&lt;p&gt;Today we will talk about when to useCallback and useMemo React hooks in our projects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#memoization"&gt;
  &lt;/a&gt;
  Memoization
&lt;/h1&gt;

&lt;p&gt;First of all, we need to define the concept&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Memoization is an optimization technique which passes a complex function to be memoized. In memoization, the result is “remembered” when the same parameters are passed-in subsequently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In simple terms, memoization is a process that allows us to cache the values of an expensive function calls so the next time that function will be called with the same argument(s), the cached value is returned, without having to re-compute.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usecallback"&gt;
  &lt;/a&gt;
  useCallback
&lt;/h1&gt;

&lt;p&gt;Returns a memoized callback. Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-usecallback-purpose"&gt;
  &lt;/a&gt;
  What is the useCallback purpose?
&lt;/h2&gt;

&lt;p&gt;Inline functions in functional components are cheap, the re-creation of functions on each rendering is not a problem. &lt;em&gt;A few inline functions per component are acceptable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;However, in some cases, you need to maintain one function instance between renderings for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A functional component wrapped inside &lt;em&gt;React.memo()&lt;/em&gt; accepts a function object prop.&lt;/li&gt;
&lt;li&gt;When the function is a dependency to other hooks (useEffect).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That cases are when useCallback is helpful because, given the same dependency value deps, the hook will return the memorized function between renderings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TestComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// handleClick is the same function between renders&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from useCallback&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#good-use-cases-examples"&gt;
  &lt;/a&gt;
  Good Use Cases (Examples)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-component-that-renders-a-list-of-items"&gt;
  &lt;/a&gt;
  A Component that renders a list of items
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#greetinglistcomponent"&gt;
  &lt;/a&gt;
  GreetingListComponent
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GreetingListComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onItemClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onItemClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderItem&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GreetingListComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list could be big, as it doesn't have a specific limit size so to prevent useless list re-renderings, you wrap it into &lt;em&gt;React.memo()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As you can see the parent component provides the function related to the item click (onItemClick).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grettinglistcontainer"&gt;
  &lt;/a&gt;
  GrettingListContainer
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GrettingListContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onItemClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do some stuff&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GreetingListComponent&lt;/span&gt;
      &lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;searchQuery&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;onItemClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onItemClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;GrettingListContainer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The onItemClick callback is memoized by useCallback(). So as long as searchQuery prop is the same, useCallback() will return the same.&lt;/p&gt;

&lt;p&gt;When the GrettingListContainer component re-renders, the onItemClick function object remains the same and doesn’t break the memoization of GrettingListComponent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bad-use-cases-examples"&gt;
  &lt;/a&gt;
  Bad Use Cases (Examples)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#apply-usecallback-hook-in-every-function-as-a-prop"&gt;
  &lt;/a&gt;
  Apply useCallback hook in every function as a prop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TestComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onHandleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do some stuff&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildTestComponent&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildTestComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m an example button example&amp;lt;/button&amp;gt;;
};
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#does-it-make-sense-to-apply-usecallback"&gt;
  &lt;/a&gt;
  Does it make sense to apply useCallback()?
&lt;/h3&gt;

&lt;p&gt;Not and the reasons are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;useCallback() hook is called every time TestComponent renders. Even useCallback() returning the same function object, still, the inline function is re-created on every re-rendering (useCallback() just skips that process).&lt;/li&gt;
&lt;li&gt;The optimization costs more than not having the optimization.&lt;/li&gt;
&lt;li&gt;Increased code complexity. Need to keep the deps of useCallback in sync.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution is not to use useEffect and allow that on every re-render the new function is created every time. &lt;/p&gt;

&lt;p&gt;This is a common problem because in the majority of the cases some people put an useCallback to every function prop as they can. That is a bad practice we need to make sure where and what could be the best approach in every case.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usememo"&gt;
  &lt;/a&gt;
  useMemo
&lt;/h1&gt;

&lt;p&gt;Returns a memoized callback. Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;computeExpensiveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#warning"&gt;
  &lt;/a&gt;
  Warning
&lt;/h2&gt;

&lt;p&gt;Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.&lt;/p&gt;

&lt;p&gt;If no array is provided, a new value will be computed on every render.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-usememo-purpose"&gt;
  &lt;/a&gt;
  What is the useMemo purpose?
&lt;/h2&gt;

&lt;p&gt;The useMemo hook can help to improve the performance of an application by “remembering” expensive functions and preventing a re-render every time there is a change in the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-use-cases"&gt;
  &lt;/a&gt;
  Good use cases
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#expensive-computed-values"&gt;
  &lt;/a&gt;
  Expensive computed values
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TestComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Factorial&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The factorial method can potentially be a very expensive operation to execute for large numbers, so, in the code above, is used useMemo to memoize it. It will now only run whenever the counter state changes.&lt;/p&gt;

&lt;p&gt;Other cases that can be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Filters&lt;/li&gt;
&lt;li&gt;Math operations&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Reducers functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bad-use-cases"&gt;
  &lt;/a&gt;
  Bad use cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Apply useMemo to every case value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is a bad practice we need to make sure where and what could be the best approach in every case because the main idea is to avoid re-compute heavy operations.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Any optimization added too early is a risk because the optimized code may change many times during the process, so the recommendation is to apply optimization after the main core of code related to a specific feature or code was done.&lt;/li&gt;
&lt;li&gt;Is necessary to check the performance render before and after useCallback and useMemo just to make sure that render speed increases.&lt;/li&gt;
&lt;li&gt;Be careful with increasing complexity in the components when using useCallback and useMemo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The useCallback and useMemo hooks are some of the awesome features that React provides. Need to consider every specific case of use, just to make sure the best performance and render time speed in our React projects. I will be updating this post based on your comments so let me know in any case thanks for all! 👍&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://es.reactjs.org/docs/hooks-reference.html#usecallback"&gt;React useCallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://es.reactjs.org/docs/hooks-reference.html#usememo"&gt;React useMemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>programming</category>
    </item>
    <item>
      <title>Get to know Redux in 2021</title>
      <author>Semir Teskeredzic</author>
      <pubDate>Mon, 03 May 2021 21:42:30 +0000</pubDate>
      <link>https://dev.to/semirteskeredzic/get-to-know-redux-in-2021-226c</link>
      <guid>https://dev.to/semirteskeredzic/get-to-know-redux-in-2021-226c</guid>
      <description>&lt;p&gt;Redux is something you really need to know if you are going to do anything professionally with JS and especially React. For some time it seemed quite complex with a lot of boilerplate so I mostly used MobX and more recently React context.&lt;br&gt;
However, my curiosity got better of me and I had to dig a bit deeper to comprehend the great Redux. In this post I will try to simplify basic concepts of how Redux works so you can try and not just build but also comprehend a React-Redux app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Redux?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"Redux is a predictable state container for JavaScript apps." (&lt;a href="https://redux.js.org/introduction/getting-started"&gt;https://redux.js.org/introduction/getting-started&lt;/a&gt;). It is a place that manages the state and makes changes according to the provided actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is it for?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For use cases when you need to have data available across the application i.e. when passing data through props is not possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is it powerful?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is highly predictable which makes debugging much easier since you know what is happening where. It is also scalable so it is a good fit for production grade apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brief overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you're making an app that increments the count. This app has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Count value,&lt;/li&gt;
&lt;li&gt;Increment button,&lt;/li&gt;
&lt;li&gt;Decrement button,&lt;/li&gt;
&lt;li&gt;Change with value,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is then happening?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;When you want to increment a count, you dispatch an action. This action then through special function called reducer takes the previous state, increments it and returns it. Component that listens through &lt;code&gt;Selector&lt;/code&gt; re-renders on change of state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's go to the code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to create the "Counter" app with React and Redux, we need to add following packages to your React app (I will assume you know how to create a basic Create React App):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @reduxjs/toolkit react-redux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the first thing we will do is to create a Store and provide it to the entry point of your App, in this case it is Index.js&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/store.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from "@reduxjs/toolkit";

export const Store = configureStore({
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;code&gt;configureStore&lt;/code&gt; from Redux toolkit which is a function that requires passing a reducer. We will get back to it in a second.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/index.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { StrictMode } from "react";
import ReactDOM from "react-dom";
import { Provider } from "react-redux";

import App from "./App";
import { Store } from "./app/store";

const rootElement = document.getElementById("root");
ReactDOM.render(
  &amp;lt;StrictMode&amp;gt;
    &amp;lt;Provider store={Store}&amp;gt;
      &amp;lt;App /&amp;gt;
    &amp;lt;/Provider&amp;gt;
  &amp;lt;/StrictMode&amp;gt;,
  rootElement
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using &lt;code&gt;Provider&lt;/code&gt; to provide our Redux store to all wrapped Components.&lt;br&gt;
Believe it or not, we are half way there! &lt;/p&gt;

&lt;p&gt;Next, we need to populate the core of our Redux logic and that is the Slice. You can think of Slice as a collection of Redux reducer logic &amp;amp; actions for a single feature in the app.&lt;br&gt;
(in a blogging app there would be separate Slices for users, posts, comments etc.).&lt;br&gt;
Our Slice will contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial value&lt;/li&gt;
&lt;li&gt;Increment logic&lt;/li&gt;
&lt;li&gt;Decrement logic&lt;/li&gt;
&lt;li&gt;Change by value logic
Let's go:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;/src/features/counterSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSlice } from "@reduxjs/toolkit";

export const Slice = createSlice({
  name: "counter",
  initialState: {

  },
  reducers: {

  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we have a named import for &lt;code&gt;createSlice&lt;/code&gt; from toolkit. In this function we are giving it a name, setting initial state, and providing logic as reducers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/counterSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
export const Slice = createSlice({
  name: "counter",
  initialState: {
    value: 0
  },
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we set the initial state to 0, every time we refresh our application it will be defaulted to 0. More likely scenario here would be fetching the data from external source via async function. We won't be covering that here but you can read more about async logic with &lt;code&gt;Thunks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our reducers object we will have increment, decrement, and changeByValue:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/counterSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
reducers: {
    increment: state =&amp;gt; {
      state.value += 1;
    },
    decrement: state =&amp;gt; {
      state.value -= 1;
    },
    changeByValue: (state, action) =&amp;gt; {
      state.value += action.payload;
    }
  }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it starts to make sense. When we dispatch an action from our component we are referencing one of these in the reducers object. Reducer is acting as an "event listener" that handles events based on received action type while Dispatching actions is "triggering events".&lt;br&gt;
With &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;decrement&lt;/code&gt; we are updating state value, while &lt;code&gt;changeByValue&lt;/code&gt; takes action payload to determine the exact value of that update.&lt;br&gt;
Only thing left to do in the slice is to export Actions, State reducer, and state value. Here is a complete file&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/counterSlice.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createSlice } from "@reduxjs/toolkit";

export const Slice = createSlice({
  name: "counter",
  initialState: {
    value: 0
  },
  reducers: {
    increment: state =&amp;gt; {
      state.value += 1;
    },
    decrement: state =&amp;gt; {
      state.value -= 1;
    },
    changeByValue: (state, action) =&amp;gt; {
      state.value += action.payload;
    }
  }
});
export const selectCount = (state) =&amp;gt; state.counter.value;

export const { increment, decrement, changeByValue } = Slice.actions;
export default Slice.reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Important note here is that Reducers are not allowed to modify existing state. They have to make immutable updates which basically means copying the state and modifying that copy. Here &lt;code&gt;createSlice()&lt;/code&gt; does the heavy-lifting for us and creates immutable updates, so as long you are inside &lt;code&gt;createSlice()&lt;/code&gt; you are good with immutability rule 👌&lt;/p&gt;

&lt;p&gt;We now need to update our store with reducers we made:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/app/store.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { configureStore } from "@reduxjs/toolkit";
import counterReducer from "../features/counterSlice";

export const Store = configureStore({
  reducer: {
    counter: counterReducer
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing left to do is to create a component that will be the UI for our app:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/Counter.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";

const Counter = () =&amp;gt; {
return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Counter app&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Count: &amp;lt;/p&amp;gt;
      &amp;lt;button&amp;gt;Increment&amp;lt;/button&amp;gt;
      &amp;lt;button&amp;gt;Decrement&amp;lt;/button&amp;gt;
      &amp;lt;button&amp;gt;
        Change by Value
      &amp;lt;/button&amp;gt;
      &amp;lt;input/&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are starting from this base. We will need a way to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show current count status &lt;/li&gt;
&lt;li&gt;Increment on click of button&lt;/li&gt;
&lt;li&gt;Decrement on click of button&lt;/li&gt;
&lt;li&gt;Input value for change&lt;/li&gt;
&lt;li&gt;Apply value to the count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have already exported the current state from the Slice like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/Counter.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const selectCount = (state) =&amp;gt; state.counter.value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use this to show current value using &lt;code&gt;useSelector()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { useSelector } from "react-redux";
import { selectCount } from "./counterSlice";

const Counter = () =&amp;gt; {
  const count = useSelector(selectCount);

return (
    &amp;lt;&amp;gt;
      ...
      &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
      ...
    &amp;lt;/&amp;gt;
  );
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we mentioned earlier, we will use &lt;code&gt;useDispatch()&lt;/code&gt; to dispatch actions we need -&amp;gt; increment, decrement, changeByValue:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/Counter.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
import { useDispatch, useSelector } from "react-redux";
import {
  increment,
  decrement,
  changeByValue,
  selectCount
} from "./counterSlice";

const Counter = () =&amp;gt; {
  const count = useSelector(selectCount);
  const dispatch = useDispatch();

  return (
    &amp;lt;&amp;gt;
      ...
      &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(increment())}&amp;gt;Increment&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(decrement())}&amp;gt;Decrement&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(changeByValue(value))}&amp;gt;
        Change by Value
      &amp;lt;/button&amp;gt;
      ...
    &amp;lt;/&amp;gt;
  );
};
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Increment and Decrement are pretty much self-explanatory, but with changeByValue we have a variable &lt;code&gt;value&lt;/code&gt; that we need to define in order to send it as a payload. We will use React local state for this with &lt;code&gt;onChange&lt;/code&gt; and &lt;code&gt;handleChange()&lt;/code&gt; to set this value properly. With those additions we have a complete component:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;/src/features/Counter.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  increment,
  decrement,
  changeByValue,
  selectCount
} from "./counterSlice";

const Counter = () =&amp;gt; {
  const count = useSelector(selectCount);
  const dispatch = useDispatch();
  const [value, setValue] = useState();

  const handleChange = (e) =&amp;gt; {
    const num = parseInt(e.target.value);
    setValue(num);
  };

  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Counter app&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;Count: {count}&amp;lt;/p&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(increment())}&amp;gt;Increment&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(decrement())}&amp;gt;Decrement&amp;lt;/button&amp;gt;
      &amp;lt;button onClick={() =&amp;gt; dispatch(changeByValue(value))}&amp;gt;
        Change by Value
      &amp;lt;/button&amp;gt;
      &amp;lt;input onChange={(e) =&amp;gt; handleChange(e)} /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

export default Counter;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this addition, we have a working React Redux app. Congrats! You can install Redux dev tools to your browser to see what is exactly happening and how actions mutate the state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After seeing how everything connects together, here is the recap of the update cycle that happens when the user clicks a button to increment/decrement count:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User clicks a button&lt;/li&gt;
&lt;li&gt;App dispatches an action to Redux store&lt;/li&gt;
&lt;li&gt;Store runs reducer function with previous state and current action after which it saves return value as the new state&lt;/li&gt;
&lt;li&gt;Store notifies all subscribed parts of the UI&lt;/li&gt;
&lt;li&gt;Each UI component that needs data checks if it is what it needs&lt;/li&gt;
&lt;li&gt;Each UI component that has its data changed forces re-render with the new data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diving into Redux might seem daunting but once you get hang of basic principles it becomes a powerful weapon in your coding arsenal. &lt;/p&gt;

&lt;p&gt;Thank you for reading,&lt;/p&gt;

&lt;p&gt;'Take every chance to learn something new'&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 7</title>
      <author>David Tetreau</author>
      <pubDate>Mon, 03 May 2021 21:38:18 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-7-3gld</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-7-3gld</guid>
      <description>&lt;p&gt;For Part 7, we will continue talking about functions. During Part 6, we learned about inner variables (local variables) and outer variables (global variables). This is the first topic I will expand on. Open up your repl and code along! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function scope
&lt;/h2&gt;

&lt;p&gt;It is important to know that variables defined inside a function cannot be accessed from anywhere outside the function. Take this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// A function with local variables
function incrementLocalVariables() {
  let num1 = 2//local variable
  let num2 = 3//local variable
  num1++;//increments num1
  num2++;//increments num2
  return num1 + num2;//returns the variables added together
}

incrementLocalVariables();//calls the function


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that in the example above, the function has local variables. If you wanted to console.log(num1) or console.log(num2) from outside the function you could not do it. Go ahead and try it in your repl. The local variables can only be used inside of the function. You can also try putting a console.log after num1++ and num2++ to see that the variables were increased by one i.e. console.log(num1) after the variables are incremented. Now, try to copy and paste num1 and num2 outside the function and remove them from inside the function. Also, put a console.log outside the function to see the results. Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let num1 = 2//a global variable
let num2 = 3//a global variable

// A function with local variables
function incrementLocalVariables() {
  num1++;//increments num1
  num2++;//increments num2
  return num1 + num2;//returns the variables added together
}

incrementLocalVariables();//calls the function
console.log(num1);//shows the value of num1 was changed

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because programs run top to bottom and left to right this program has a certain order to it. For example, num1 and num2 were declared outside the function, then the function ran because it was called by incrementLocalVariables(). Then, the global variables were incremented by the function, then we returned the global variables after they were incremented. Go ahead and experiment with this function and moving local and global variables around. Also, try to figure out what value was returned when we ran the function. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nested-functions"&gt;
  &lt;/a&gt;
  Nested Functions
&lt;/h2&gt;

&lt;p&gt;Now that we have a better understanding of scope, I would like to move on to a more advanced topic regarding scope. First, a function defined inside another function can also access all variables defined in its parent function, and any other variables to which the parent function has access. Example(inspired by the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;MDN Web Docs&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// The following variables are defined in the global scope
let name = 'David';

// A nested function example
function getScore() {
  let num1 = 2;//local variable
  let num2 = 3;//local variable

  //inner function
  function add() {
    return name + ' scored ' + (num1 + num2);
  }

  return add();
}

getScore(); // Returns "David scored 5"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a lot going on here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Starting from the top, look at how the name variable is declared. This variable is in the global scope. That means it can be accessed by the inner and the outer function. &lt;/li&gt;
&lt;li&gt;Then, we get to the getScore function which is the outer function. This function has two local variables inside of it. Those variables are num1 and num2. Both of these variables can be accessed by the inner and the outer function. However, you cannot access them and use them outside of the function. - The inner function returns a concatenated string that consists o the value stored in the global variable, the string ' scored' (with a space in it), both local variables added together. &lt;/li&gt;
&lt;li&gt;Notice that when the local variables were added together they were put inside of parenthesis. This is similar to what you would see in arithmetic. This signifies that this operation is set apart from others. Since those variables are concatenated with the (+) operator, the result becomes part of the string. &lt;/li&gt;
&lt;li&gt;Finally, the return statement in the outer function consists of calling the inner function. Therefore, whatever the inner function returns becomes the return for the outer function. This is a lot to take in. Please take time to fully understand everything and experiment with it in your repl. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Because functions are so important, here is some additional reading on the topics we discussed in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/javascript-nested-functions/"&gt;https://www.geeksforgeeks.org/javascript-nested-functions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/javascript/javascript_nested_functions.htm"&gt;https://www.tutorialspoint.com/javascript/javascript_nested_functions.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>SPA JWT stateless authorization</title>
      <author>Tomasz</author>
      <pubDate>Mon, 03 May 2021 21:23:38 +0000</pubDate>
      <link>https://dev.to/tomaszgaluszka/spa-jwt-stateless-authorization-34c7</link>
      <guid>https://dev.to/tomaszgaluszka/spa-jwt-stateless-authorization-34c7</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I've been recently learning different ways to secure SPA's.&lt;/p&gt;

&lt;p&gt;The first one which took my attention was the Oauth 2.0 extension called PKCSE. I liked it, but it has some disadvantages: where to securely store the access_token and long lived refresh_token ...(local storage in memory etc. is not a case because of XSS)&lt;/p&gt;

&lt;p&gt;The second approach was to use a back-end for front-end server under the same domain (same nginx with routing all /api/* calls into my backend server). In this case the Oauth client will be my back-end server which can just implement the authorization flow.&lt;br&gt;
At the end of it it will redirect browser to the SPA home page with the following COOKIE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ACCESS_TOKEN=API_ACCESS_TOKEN&lt;/li&gt;
&lt;li&gt;secure: true&lt;/li&gt;
&lt;li&gt;httpOnly: true&lt;/li&gt;
&lt;li&gt;SameSite: secure&lt;/li&gt;
&lt;li&gt;expire: API_ACCESS_TOKEN_EXPIRE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cookie from the above will be included into the all AJAX requests from SPA to my back-end api (via nginx - same domain). Also it will mitigate the risk of XSS and CSRF attacks.&lt;/p&gt;

&lt;p&gt;What do you think about this approach, do you have any better ideas of securing SPA ? Please share your thoughts.&lt;/p&gt;

&lt;p&gt;Links:&lt;br&gt;
&lt;a href="https://www.pingidentity.com/en/company/blog/posts/2021/refresh-token-rotation-spa.html"&gt;https://www.pingidentity.com/en/company/blog/posts/2021/refresh-token-rotation-spa.html&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/questions/20963273/spa-best-practices-for-authentication-and-session-management"&gt;https://stackoverflow.com/questions/20963273/spa-best-practices-for-authentication-and-session-management&lt;/a&gt;&lt;br&gt;
&lt;a href="https://curity.io/resources/learn/spa-best-practices/"&gt;https://curity.io/resources/learn/spa-best-practices/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jwt</category>
      <category>oauth</category>
      <category>authorization</category>
      <category>stateless</category>
    </item>
    <item>
      <title>Proxy Pattern in JavaScript</title>
      <author>Beto Muniz</author>
      <pubDate>Mon, 03 May 2021 21:03:24 +0000</pubDate>
      <link>https://dev.to/obetomuniz/proxy-pattern-in-javascript-egn</link>
      <guid>https://dev.to/obetomuniz/proxy-pattern-in-javascript-egn</guid>
      <description>&lt;p&gt;Just a catch up about how the Proxy object works on JavaScript to allow us to implement Proxy patterns.&lt;/p&gt;

&lt;p&gt;📌 JavaScript's Proxy object allows us to intercept and modifies any JavaScript object.&lt;/p&gt;

&lt;p&gt;📌 JavaScript's Proxy object is an elegant and safe way for creating or extending libraries, caching, error handling, and complex data manipulation on JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;arrProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// "default value"&lt;/span&gt;
&lt;span class="nx"&gt;arrProxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 What are the use cases that you most liked to use such a JavaScript feature? &lt;/p&gt;

&lt;p&gt;📚 Still, for a detailed API spec of Proxy's object in JavaScript, take a look in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;MDN docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;💌 If you thought this brief content useful for your web dev studies and want to receive more, &lt;a href="https://www.getrevue.co/profile/obetomuniz"&gt;subscribe to my newsletter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
