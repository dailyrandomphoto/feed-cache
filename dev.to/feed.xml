<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Wrapping React Spring's useSpring Hook (A Use Case for Wrapping External Libraries)</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 21 Dec 2021 21:45:18 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/wrapping-react-springs-usespring-hook-a-use-case-for-wrapping-external-libraries-18lp</link>
      <guid>https://dev.to/michaelmangial1/wrapping-react-springs-usespring-hook-a-use-case-for-wrapping-external-libraries-18lp</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/michaelmangial1/wrapping-react-querys-usequery-a-use-case-for-wrapping-external-libraries-34ed"&gt;In my previous post&lt;/a&gt;, I discussed some potential improvements by wrapping React Query's &lt;code&gt;useQuery&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;In this post, I'd like to aim for similar improvements with React Spring's &lt;code&gt;useSpring&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useSpring&lt;/code&gt; hook you to animate an element's style by controlling its style &lt;em&gt;from&lt;/em&gt; when first appears &lt;em&gt;to&lt;/em&gt; when the animation completes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without an abstraction, there is no way to make the animations reusable.&lt;/p&gt;

&lt;p&gt;One way to make the animation reusable is to create a file that exports an object associating a &lt;code&gt;{ from, to, ...etc }&lt;/code&gt; config (the argument that &lt;code&gt;useSpring&lt;/code&gt; takes) with an animation name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// animations.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;animations&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the easiest solution, but we have to inconveniently  import from two places.&lt;/p&gt;

&lt;p&gt;We can improve upon this by export &lt;code&gt;react-spring&lt;/code&gt; modules plus our &lt;code&gt;animations&lt;/code&gt; object from a single file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// animations.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can improve upon this even more by not having to import &lt;code&gt;animated&lt;/code&gt;, &lt;code&gt;animations&lt;/code&gt;, and &lt;code&gt;useSpring&lt;/code&gt;, and then scope &lt;code&gt;animations.fadeIn&lt;/code&gt; to &lt;code&gt;useSpring&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead, we can expose &lt;code&gt;use[AnimationName]&lt;/code&gt; hooks that return all that we need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// animations.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFadeIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFadeIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFadeIn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively to creating a hook for every animation, you could expose a more generic but similar &lt;code&gt;useSpring&lt;/code&gt; wrapper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// animations.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;useBaseSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fadeIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PRESETS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;preset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBaseSpring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PRESETS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./animations&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;preset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PRESETS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fadeIn&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Personally, I like creating a hook for every animation, just as you would create a CSS class to encapsulate a certain set of styles.&lt;/p&gt;

&lt;p&gt;🎉 We've brainstormed ways to improve upon React Spring's &lt;code&gt;useSpring&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;How would you wrap this hook?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Mastering Frontend Interviews - For real</title>
      <author>David Lorenz</author>
      <pubDate>Tue, 21 Dec 2021 21:32:17 +0000</pubDate>
      <link>https://dev.to/activenode/mastering-frontend-interviews-for-real-3pkl</link>
      <guid>https://dev.to/activenode/mastering-frontend-interviews-for-real-3pkl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-should-you-listen-to-me"&gt;
  &lt;/a&gt;
  Why should you listen to me?
&lt;/h2&gt;

&lt;p&gt;I am a Frontend Architect with People Management Experience (So besides the technical experience I was happy to be working together with People Management and building up interviews etc.)&lt;/p&gt;

&lt;p&gt;Amazon, Mercedes-Benz.io, JvM, nodus medical and many more gave me the opportunity to work for them (meaning: I got an actual offer). Besides those few mentioned there were &lt;strong&gt;innumerable&lt;/strong&gt; amounts of other interviews I was allowed to be part of - both as candidate as well as interviewer. I don't like to have tunnel vision when it comes to jobs. I do like to check opportunities from time to time because that helps me understanding the options out there as well as helps me staying in the routine of interviews - hence making them easier to master.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-this-post-is-about"&gt;
  &lt;/a&gt;
  What this post is about
&lt;/h2&gt;

&lt;p&gt;This post is not about which exact weird technical challenge you should prepare for (No you don't have to learn the Quicksort implementation in 10 languages by heart other than if you are applying for a company that's name is "Quicksort in 10 languages Inc"). This post is about understanding what's behind the curtains of every good interview. I won't be talking about salary in this post because salary is just something so unique that it wouldn't fit the overall context of this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cv-and-your-application-letter"&gt;
  &lt;/a&gt;
  The CV and your application letter
&lt;/h2&gt;

&lt;p&gt;I appreciate your effort but honestly no one is special enough for anyone to read a book load of pages about what you've been doing and what kind of food you eat at 5am in the morning.&lt;/p&gt;

&lt;p&gt;Most of the companies love a one page CV, one page application letter. If you say "that doesn't fit on simply one page" then you are showing your incapability of prioritisation. I know you want to show everything but the company just doesn't have the time to read the story of your life.&lt;/p&gt;

&lt;p&gt;So if you have worked with 30 different stacks and technologies then you are very much kicking yourself out of being even invited if you list all of those next to each other. Being a FE Developer you should be highlighting your primary FE Skills. If you have worked with Cloud Technologies and Backend then that's cool but keep it short e.g. "Also I have worked with a lot of cloud and backend technologies and I love getting my hands dirty at databases". &lt;/p&gt;

&lt;p&gt;Also don't send the exact same letter for every single position. If the role you are applying for states "You will be working on an Angular 9 Product" then it is helping you a lot if you highlight that technology first. This can obviously lead to the fact that you &lt;strong&gt;should&lt;/strong&gt; mention your cloud technologies if the role specifically states that this is beneficial - if not, leave it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prepare"&gt;
  &lt;/a&gt;
  Prepare
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#prepare-structurally"&gt;
  &lt;/a&gt;
  Prepare structurally
&lt;/h3&gt;

&lt;p&gt;If you get invited to an interview and the interview process is professional then the recruiter / HR person is superhappy to tell you how the interview will be structured - if you ask for it. If you don't ask for it you will literally be expecting anything.&lt;/p&gt;

&lt;p&gt;Send the responsible person a nice Mail and ask "Could you tell me how the interviewing process is structured? Will there be time for questions and will there be a live challenge?" etc.&lt;/p&gt;

&lt;p&gt;There is nothing wrong with asking how the interview will be processed and what to expect - every client can be different so every interview can have different workflows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prepare-contentual"&gt;
  &lt;/a&gt;
  Prepare contentual
&lt;/h3&gt;

&lt;p&gt;I remember those times of "inform yourself about what the company does". IMO this is not necessary anymore. No one will reject to hire you only because you didn't know that the company has 120 employees - so forget about that stuff.&lt;/p&gt;

&lt;p&gt;But you should still prepare and inform yourself about the company to be able to ask proper questions and hence impressing with also showing your motivation which allows both of you to see if it is a fit or not. You don't necessarily have to "lie" liking the products the company creates. It is sufficient if you like its process around the development part that is part of the products.&lt;/p&gt;

&lt;p&gt;If you read on the roles description: "We are a high performing team" and you feel that this sounds like "we are doing a lot of over-hours" then write it down and prepare to ask if they can clarify what "high performing team" means. &lt;/p&gt;

&lt;p&gt;But not just that. Ask what &lt;strong&gt;exactly&lt;/strong&gt; you'd be doing. That is a completely valid question. As in "So I read you are working for multiple clients here, how does a typical Frontend Coders Day/Week look like in your company?".&lt;/p&gt;

&lt;p&gt;Also ask about the culture which helps both of you identifying if this is what you are searching for / they are searching for.&lt;/p&gt;

&lt;p&gt;But first and foremost: Don't start asking questions in the beginning like "Ok before we start I got some questions". I did that sometimes if I felt that if it's not clarified it wouldn't make sense to continue but I still do not recommend it as it can have an impression of being rude if you are not being very diplomatic. So rather don't and wait for the Interviewer to give you space for questions. &lt;/p&gt;

&lt;p&gt;If the interviewer does not give you space for questions it is very much encouraged to say: "Okay thanks for this interviewing process . [...] May I ask some questions about the company and the job role?".&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No question is a "dumb" question if stated friendly and with honest interest.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-interviewing"&gt;
  &lt;/a&gt;
  Let's talk about Interviewing
&lt;/h2&gt;

&lt;p&gt;Coders be like "Oh shit, what if I can't answer this?". And then they might fall into a deep black hole if there was a question that they felt uncomfortable with and at that point I have seen many interviews failing.&lt;/p&gt;

&lt;p&gt;The Problem is that many don't understand what the point of interviewing is. It is checking your capabilities of solving problems at the base of your current level. That means: I can ask the EXACT same questions in an interview to a senior as to a junior but I'd be expecting completely different outcomes and both could be hired respectively.&lt;/p&gt;

&lt;p&gt;What's the trick? Act curious instead of being challenged. Try to imagine all of it less as a "test" and more like a "tell me more discussion". And not only that. Think and explain in pseudocode if you can't provide legit facts.&lt;br&gt;
Literally the worst thing you say do is "I don't know". A few "I don't know"'s and you are out. And not because you didn't know but because you showed that you aren't even trying to solve the problem - not even slightly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenarios"&gt;
  &lt;/a&gt;
  Scenarios
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#sorting-algorithm-question"&gt;
  &lt;/a&gt;
  Sorting Algorithm Question
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Interviewer&lt;/strong&gt;: "Do you know which is the fastest Sorting Algorithm?" &lt;br&gt;&lt;br&gt;
&lt;strong&gt;You&lt;/strong&gt;: "Sorry, no" - Awkward silence 🙅🏽‍♀️😐&lt;/p&gt;

&lt;p&gt;This is close to ending the meeting soon. Here is a proposal of being curious instead:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You&lt;/strong&gt;: "I don't have that at hand but I would love to know where the answer to this would help within your products scope if I may. I'd be assuming that JS engines would to their best to have a fast sorting algorithm. If that wouldn't be enough I would make sure to research properly how to improve the performance if there is a need detected." - 🤗&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-typeof-null-endraw-question"&gt;
  &lt;/a&gt;
  &lt;code&gt;typeof null&lt;/code&gt; Question
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Interviewer&lt;/strong&gt;: "Do you happen to know what &lt;code&gt;typeof null&lt;/code&gt; is?"&lt;/p&gt;

&lt;p&gt;Even if you know the answer to this question (it is 'object') then be rest assured that this is not a key-value test. These questions normally come with a follow up question. There is always "context" around a question.&lt;/p&gt;

&lt;p&gt;So say you didn't know that &lt;code&gt;typeof null&lt;/code&gt; equals &lt;code&gt;object&lt;/code&gt;. Then the worst thing you can do is random guessing. This is not playing lotto and the interviewer doesn't like to be played. They will notice.&lt;br&gt;
If you have a really good guess or you slightly remember something then explain your guess and let the interviewer follow your thoughts: &lt;strong&gt;Think out loud&lt;/strong&gt;! Nothing worse than awkward silence because you think you need to think silently.&lt;/p&gt;

&lt;p&gt;If you have no clue then simply say something like: "I am pretty sure there is a good reason you asked this. Would you mind to tell me the solution and eventually have a follow-up question on this?"&lt;/p&gt;

&lt;p&gt;Even though not knowing you are showing your willingness to go with further questions in this context after being told the solution. A very much follow-up question probably is: "Can you imagine this check being problematic?" - Now, same rules: Start to think loud. Speak up what you think - as if you were googling. Start one by one: "Okay so if &lt;code&gt;typeof null&lt;/code&gt; is &lt;code&gt;object&lt;/code&gt; then that implies that a nullish/falsy value can be seen as object if checked with &lt;code&gt;typeof&lt;/code&gt;. That means that one shouldn't check for something being an object only with &lt;code&gt;typeof&lt;/code&gt; because it could be also &lt;code&gt;null&lt;/code&gt;." - You are literally explaining it to yourself AND to the interviewer and hence showing your skills to solve problems at hand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seniors-seniors-seniors"&gt;
  &lt;/a&gt;
  Seniors, Seniors, Seniors
&lt;/h2&gt;

&lt;p&gt;There is some addendum that is important for Senior Frontend Engineers. The huge difference between Juniors and Seniors is that a Senior actually should be able to answer most of the questions asked at the expert level they present themselves with. And by that I am not saying "They must know every single property / function by heart".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does that mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With Juniors I mostly ask the same kind of questions. With Seniors that's different. I know you cannot keep up with every single technology but you must be extremely proficient in a specific technology and the basics (HTML, JS, CSS) so tldr: Your primary skill of the last project + Basics.&lt;/p&gt;

&lt;p&gt;That is why I completely adapt interviews with Seniors &lt;em&gt;on-demand&lt;/em&gt;. I do ask the Senior beforehand about the proficiencies. If the person is being honest saying "I think I missed out one some CSS in the last 2 years but I am really good at XYZ" then I am happy to be gentle with CSS questions (as stated above, it's hard to keep up with everything). If a senior tells me that the proficiency lies in Angular I will focus on asking Angular-specific questions. Even if it is a position as a React Developer. The reason is simple: If the Senior can elaborate on my questions considering the provided proficiency on expert level then I have no doubt that this person has the capability of understanding the architecture of another framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And now comes the pitfall&lt;/strong&gt;: Seniors often don't expect me to ask &lt;em&gt;basic&lt;/em&gt; questions which is honestly shocking for me every single time. And with &lt;em&gt;basic&lt;/em&gt; I don't mean "Which exact CSS property will let boxes to be aligned next to each other" -  it is sufficent to know that &lt;code&gt;display: flex&lt;/code&gt; exists and that you can do a lot of alignments whichever way with it. Details: Google.&lt;/p&gt;

&lt;p&gt;But if a senior starts telling me that &lt;code&gt;float: left&lt;/code&gt; is the best way nowadays to align boxes then it shows that that person must've ignored every single news on the internet in the last past years.&lt;/p&gt;

&lt;p&gt;Also one of my favourite questions for seniors is to explain me the arrow function. And if a senior says "It's a function but with a different syntax" then this is a &lt;strong&gt;definite reason to be rejected&lt;/strong&gt;. For good reason: The arrow function binds context - and it binds it in a way that is unchangeable. So even the functions &lt;code&gt;.bind&lt;/code&gt;, &lt;code&gt;.apply&lt;/code&gt; and &lt;code&gt;.call&lt;/code&gt; cannot change that context. But they also wouldn't throw an error. So if a senior does not know that an arrow function changes context immutably then that Senior would've a hard time debugging if there was a legacy library that would be making use of older functions but now providing arrow functions leads to problems - without throwing errors.&lt;/p&gt;

&lt;p&gt;In my experience Seniors often oversell. So if you are insecure about being Senior then rather sell as Intermediate and surprise with more knowledge then sell as Senior and surprise with less knowledge. When I do ask "How would you rank your JS knowledge on a scale from 1 to 10" they often go to 8 or 9. Because they don't do much of self-reflection anymore. That backfires. And this happens in a &lt;strong&gt;lot&lt;/strong&gt; of interviews. And this is something that really only happens with Seniors, rarely with Intermediates or Juniors. The problem is that seniors are often doing something very specific in a project. And more often than never they are solving the product needs with that specific solution and that might be perfectly fine and in a way that is senior'ish. The problem is that they forget that they are often "living in a technology tunnel" without learning new things and keeping up with how JS evolves. But they &lt;strong&gt;must&lt;/strong&gt; make sure to keep up with the basics. &lt;br&gt;
And not just that. They also must ensure to not forget the basics. Because if they need to dig deeper (not every 3d-party library is perfectly working) they might need to be working outside of the scope of the framework with pure JavaScript. And that shouldn't be a huge challenge for them.&lt;/p&gt;

&lt;p&gt;My suggestion here is simple: Stay humble and at least subscribe to 1 JavaScript Newsletter. That should already be a good start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rejection-handling"&gt;
  &lt;/a&gt;
  Rejection Handling
&lt;/h2&gt;

&lt;p&gt;Rejections are hard. As always in life. And you must prepare for being rejected. Expect to be rejected. &lt;br&gt;
And if you get rejected then see it as just one step of a &lt;em&gt;potentially large&lt;/em&gt; but definitely &lt;em&gt;finite&lt;/em&gt; ladder. Because every single rejection can be seen as "a practice step for the next interview". This is hard but crucial for your mental wellbeing and for getting better.&lt;/p&gt;

&lt;p&gt;Also don't just be mad. Answer all rejections with the question for feedback: "Thank you for having invited me. Although it wasn't a fit I would be extremely happy if you could provide me more insights and feedback that will allow me to improve". You'd be surprised how much feedback you will get - Sure, there's exceptions but the worst thing that can happen is that you don't get an answer.&lt;/p&gt;

&lt;p&gt;Feedback gives you useful insights what exactly was wrong. &lt;br&gt;
Many don't ask for feedback and simply lower their self-esteem with the implication of "simply not being good enough" instead of acknowledging that it's only a step of becoming better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-last-note"&gt;
  &lt;/a&gt;
  A last note
&lt;/h2&gt;

&lt;p&gt;Try to be yourself. Yes it can happen to "struggle" oneself into a position but that doesn't come with a bunch of happiness. &lt;/p&gt;

&lt;p&gt;Sometimes it just isn't a fit. Everyone's different, everyone's special. Just like Friends and Relationships: Not all people bond well together. That's fine.&lt;/p&gt;




&lt;p&gt;Phew. That was a bunch of text. I hope it helps.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>interview</category>
    </item>
    <item>
      <title>Optimize your sites with post processing on Netlify</title>
      <author>Phil Hawksworth</author>
      <pubDate>Tue, 21 Dec 2021 20:29:31 +0000</pubDate>
      <link>https://dev.to/netlify/optimize-your-sites-with-post-processing-on-netlify-4137</link>
      <guid>https://dev.to/netlify/optimize-your-sites-with-post-processing-on-netlify-4137</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Throughout December we'll be &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;highlighting a different Netlify feature each day&lt;/a&gt;. It might just be the thing you need to unlock those creative juices, and &lt;a href="https://www.netlify.com/blog/2021/12/01/dusty-domains-your-forgotten-domains-raise-money-for-charity/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;dust off that domain&lt;/a&gt; you registered but never deployed! Keep an eye &lt;a href="https://www.netlify.com/blog/2021/12/01/highlighting-a-different-netlify-feature-each-day-in-december/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;on the blog&lt;/a&gt; and on &lt;a href="https://twitter.com/netlify"&gt;Twitter&lt;/a&gt; for each feature!&lt;br&gt;
There are multiple ways to improve the performance of your website. From minifying resources to tree shaking, compressing files, reducing the amount of server requests, etc. Netlify can help in your quest to build the fastest sites with post-processing features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's have a look at what's available!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snippet-injection"&gt;
  &lt;/a&gt;
  Snippet injection
&lt;/h3&gt;

&lt;p&gt;I highlighted snippet injection in &lt;a href="https://www.netlify.com/blog/2021/12/20/how-to-add-features-to-your-site-via-snippet-injection/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;yesterday's post&lt;/a&gt;, it's just one of the services available as post-processing and it's super handy. If you'd like to add some small feature to your site without bundling it as part of your codebase, maybe try snippet injection! Analytics or other scripts can be added at serve time in a simple step, either in the &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; of your HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYuIOfe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-snippet-injection-empty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYuIOfe6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-snippet-injection-empty.png" alt="Snippet injection UI" width="880" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asset-optimization"&gt;
  &lt;/a&gt;
  Asset optimization
&lt;/h3&gt;

&lt;p&gt;Even though some of you may be handling asset optimization through Webpack or other tools inside your codebase, you can also do it via the Netlify UI!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWTbsNxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-asset-optimization.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWTbsNxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-asset-optimization.png" alt="Asset optimisation options" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These can also be configured in your &lt;code&gt;netlify.toml&lt;/code&gt; file, using the &lt;code&gt;processing&lt;/code&gt; property, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build.processing.js]&lt;/span&gt;
  &lt;span class="py"&gt;bundle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="py"&gt;minify&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prerendering"&gt;
  &lt;/a&gt;
  Prerendering
&lt;/h3&gt;

&lt;p&gt;If you want to improve your SEO, you can enable prerendering for your site to allow search engines to crawl your app's pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkHXYulZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-prerendering.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkHXYulZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-prerendering.png" alt="Prerendering UI" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#form-detection"&gt;
  &lt;/a&gt;
  Form detection
&lt;/h3&gt;

&lt;p&gt;We looked at Netlify Forms earlier this month. You can &lt;a href="https://dev.to/blog/2021/12/16/accepting-form-submissions-without-a-server/"&gt;read about how they work in this post&lt;/a&gt;. But if you're &lt;strong&gt;not&lt;/strong&gt; using Netlify Forms on your site, you might want to disable form detection to speed up your deploys. By default, Netlify's build bots scan new and updated HTML files to automatically handle forms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jtp844j_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-form-detection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jtp844j_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/blog/blog-post-form-detection.png" alt="Form processing options" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these features can be found in your site's settings page, under &lt;strong&gt;Build &amp;amp; Deploy &amp;gt; Post processing.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More information
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/post-processing/snippet-injection/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;Docs: Snippet injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing#post-processing"&gt;Docs: Post processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/post-processing/prerendering/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;Docs: Prerendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/site-deploys/post-processing/form-detection/?utm_campaign=featdaily21&amp;amp;utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_content=post-processing"&gt;Docs: Form detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>netlify</category>
      <category>performance</category>
      <category>optimization</category>
    </item>
    <item>
      <title>I share my Notion template with over 440 pages of web development content</title>
      <author>Damian Demasi</author>
      <pubDate>Tue, 21 Dec 2021 19:59:58 +0000</pubDate>
      <link>https://dev.to/colocodes/i-share-my-notion-template-with-over-440-pages-of-web-development-content-22cf</link>
      <guid>https://dev.to/colocodes/i-share-my-notion-template-with-over-440-pages-of-web-development-content-22cf</guid>
      <description>&lt;p&gt;I guess Santa came a bit early this Christmas! 🎅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6ZtdulyqqoJjWB6U/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6ZtdulyqqoJjWB6U/giphy.gif" width="451" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In one of my last posts, &lt;a href="https://dev.to/colocodes/using-notion-to-organise-programming-topics-4ida"&gt;Using Notion to organise programming topics&lt;/a&gt;, a lot of people asked me to share the Notion template I was using to build my commonplace book about Web Development. So, after spending quite some time removing personal information from it, and polishing it a bit, I would like to share with you a template you can use to create your own commonplace book.&lt;/p&gt;




&lt;p&gt;👉 You can download the template by clicking &lt;a href="https://chipper-designer-8106.ck.page/b0a239f6ae"&gt;here&lt;/a&gt;. 👈&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81hMOXv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640116402489/fnOA05rjX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81hMOXv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640116402489/fnOA05rjX.png" alt="Template" width="880" height="814"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this template, you will find over 440 pages containing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Over 270 HTML and CSS related questions to practice your knowledge in a spaced repetition manner.&lt;/li&gt;
&lt;li&gt;Dozens and dozens of useful links.&lt;/li&gt;
&lt;li&gt;Information about CSS, HTML, JavaScript, ReactJS, Ruby on Rails, SQL, and more!&lt;/li&gt;
&lt;li&gt;Cheatsheets.&lt;/li&gt;
&lt;li&gt;Link to free tutorials and courses.&lt;/li&gt;
&lt;li&gt;Mindset (to stay strong in the web development journey).&lt;/li&gt;
&lt;li&gt;Information and links about APIs, tools, libraries, web development resources, etc.&lt;/li&gt;
&lt;li&gt;Resources for code practice.&lt;/li&gt;
&lt;li&gt;Problem-solving strategies.&lt;/li&gt;
&lt;li&gt;Lists of interesting articles.&lt;/li&gt;
&lt;li&gt;Useful blogs, podcasts and newsletters.&lt;/li&gt;
&lt;li&gt;The best YouTube channels I could find.&lt;/li&gt;
&lt;li&gt;And much, much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please, feel free to create a copy of this template and adapt it to your own needs. I found it very useful in my journey of becoming a Web Developer, and I still use it almost every day. It has become an extension of my brain, and I rely on it every time I have a question or doubt.&lt;/p&gt;

&lt;p&gt;I did my best to remove any copyrighted or personal content but, if you find any, please let me know so I can delete it.&lt;/p&gt;

&lt;p&gt;I would like to know any suggestions on how to improve this template, and I'm even considering uploading it to GitHub so I can transform it into a collaborative commonplace repository. Let me know what you think about that.&lt;/p&gt;

&lt;p&gt;I hope you enjoy it!&lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is HTML?</title>
      <author>Oscar Ortiz</author>
      <pubDate>Tue, 21 Dec 2021 19:45:01 +0000</pubDate>
      <link>https://dev.to/cleveroscar/what-is-html-4ea4</link>
      <guid>https://dev.to/cleveroscar/what-is-html-4ea4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hyper-text-markup-language"&gt;
  &lt;/a&gt;
  Hyper Text Markup Language
&lt;/h2&gt;

&lt;p&gt;So how exactly do we write code for our web pages? There is this amazing language known as &lt;strong&gt;HyperText Markup Language&lt;/strong&gt; or HTML in short. It is easy to learn for beginners who are just trying to code. I don't mean &lt;strong&gt;EASY&lt;/strong&gt; as learning your &lt;strong&gt;ABC's&lt;/strong&gt; but its a great way to start learning &lt;strong&gt;terminology&lt;/strong&gt;, &lt;strong&gt;syntax&lt;/strong&gt;, &lt;strong&gt;code editors&lt;/strong&gt;, &lt;strong&gt;developer tools&lt;/strong&gt;, and &lt;strong&gt;more&lt;/strong&gt;. Before trying to learn how to &lt;strong&gt;style&lt;/strong&gt; web pages or add &lt;strong&gt;functionalities&lt;/strong&gt;, we need to learn some fundamentals that will carry on with us throughout our career as a developer. With these simple tricks and tips, we will pick up other languages a bit quicker and efficiently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-code"&gt;
  &lt;/a&gt;
  Reading Code
&lt;/h2&gt;

&lt;p&gt;Anytime we are trying to learn a new language to help us develop any type of software or web pages. We first need to understand the languages' &lt;strong&gt;syntax&lt;/strong&gt;. In &lt;strong&gt;HTML&lt;/strong&gt; we use &lt;strong&gt;element tags&lt;/strong&gt; to tell the web browser what exactly we want to display on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt; HTML Syntax: header element &amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt; Paragraph element &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Syntax&lt;/em&gt;&lt;/strong&gt;: the arrangement of words and phrases to create well-formed sentences in a language. You can think of this as the set of rules to create out Web Page Structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-element-tags"&gt;
  &lt;/a&gt;
  HTML Element Tags
&lt;/h2&gt;

&lt;p&gt;Here is a quick reference of very commonly used HTML Tags&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// used for headers
&amp;lt;h1&amp;gt; &amp;lt;/h1&amp;gt;
&amp;lt;h2&amp;gt; &amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt; &amp;lt;/h3&amp;gt;
&amp;lt;h4&amp;gt; &amp;lt;/h4&amp;gt;
&amp;lt;h5&amp;gt; &amp;lt;/h5&amp;gt;
&amp;lt;h6&amp;gt; &amp;lt;/h6&amp;gt;


// used for paragraphs or text
&amp;lt;p&amp;gt; &amp;lt;/p&amp;gt;

// used for lists

&amp;lt;ul&amp;gt; &amp;lt;/ul&amp;gt;
&amp;lt;ol&amp;gt; &amp;lt;/ol&amp;gt;

// used to handle user forms

&amp;lt;form&amp;gt; &amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to dive more on &lt;strong&gt;HTML Tags&lt;/strong&gt; check out this &lt;a href="https://www.w3schools.com/tags/default.asp"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-tags"&gt;
  &lt;/a&gt;
  Working with tags
&lt;/h2&gt;

&lt;p&gt;As you can see we usually include &lt;strong&gt;two&lt;/strong&gt; element &lt;strong&gt;tags&lt;/strong&gt; when trying to pass in any content to the browser. We need a &lt;strong&gt;&lt;em&gt;Opening Tag&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Closing Tag&lt;/em&gt;&lt;/strong&gt;. Inside the tags is where we put in our context that we want to show on the browser. &lt;/p&gt;

&lt;p&gt;Here we have a &lt;code&gt;h1&lt;/code&gt; &lt;strong&gt;&lt;em&gt;element tag&lt;/em&gt;&lt;/strong&gt;. The opening tag will usually be between our &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; so it will look like &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, now we put our context right after our element, once we are done with our context we add another tag but this time we add a &lt;code&gt;/&lt;/code&gt; right before our &lt;code&gt;element tag&lt;/code&gt; name, so it will look like &lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; and that will be our closing tag for this &lt;code&gt;header&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt; Header Element &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-for-the-web"&gt;
  &lt;/a&gt;
  Code for the web
&lt;/h2&gt;

&lt;p&gt;So how can we get our &lt;strong&gt;HTML&lt;/strong&gt; code to work and show something onto the browser? There are so many ways to get code onto the web to do the same thing in modern web browsing. We would use a &lt;strong&gt;&lt;em&gt;Integrated development environment&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;IDE&lt;/em&gt;&lt;/strong&gt; to write code and communicate with the computer to create software. We can download some locally onto our machine, or we can use online code editors too! However, you would need to have one onto your local machine to create real-world projects in the real world. Online editors are fantastic for testing out new features or trying some methods before putting them into your project. So there are pros and cons for each of their own. However, it is recommended to use your &lt;strong&gt;OWN&lt;/strong&gt; IDE for this project to get comfortable using the tools and even use them at your real job.&lt;/p&gt;

&lt;p&gt;We will be using &lt;strong&gt;VS CODE&lt;/strong&gt; as our &lt;strong&gt;IDE&lt;/strong&gt; for this project. If you would like to download &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; then check out this link. Just make sure to download for the correct machine you are using. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WIqlFlv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oczethdyqqgpyyjpa5rs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WIqlFlv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oczethdyqqgpyyjpa5rs.png" alt="VS Code editor" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-html-page"&gt;
  &lt;/a&gt;
  Creating HTML Page
&lt;/h2&gt;

&lt;p&gt;Let's go ahead and open up our &lt;strong&gt;code editor&lt;/strong&gt; to create a &lt;strong&gt;html file&lt;/strong&gt;. When we create our &lt;strong&gt;code files&lt;/strong&gt; we have to add the type of language we are using at the end of the file to let the computer know what type of program we are trying to create within the file. So for example if we want to write &lt;strong&gt;HTML&lt;/strong&gt; code we would create a file like with a name of our choosing and add &lt;strong&gt;period&lt;/strong&gt; &lt;code&gt;.&lt;/code&gt; at the end of the file name and add &lt;code&gt;html&lt;/code&gt; right after. &lt;/p&gt;

&lt;p&gt;Once our file is created, we can write &lt;strong&gt;HTML Tags&lt;/strong&gt; onto our file. We will write a &lt;code&gt;header&lt;/code&gt; tag to create simple text on the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt; Hello World &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;e.g. &lt;code&gt;file_name.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpiErjRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rj5mu9m8ci0egs1d2xr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpiErjRt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rj5mu9m8ci0egs1d2xr.gif" alt="create html file" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-live-page"&gt;
  &lt;/a&gt;
  HTML Live Page
&lt;/h2&gt;

&lt;p&gt;Now that we know how to create HTML files, we can open them in the browser. There are numerous ways to start up our HTML file, but for this example, we will manually open it onto our web browser by clicking on our file. Depending on our default browser, it will vary on what browser it will open up. If we have multiple browsers, be sure to pick the most comfortable one.  We will be using google chrome for this guide since it provides beneficial developer debugging tools to help make our lives easier when we need to fix our broken code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Locate where you saved your &lt;code&gt;file_name.html&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Right click the file&lt;/li&gt;
&lt;li&gt;Open with (choose a browser)&lt;/li&gt;
&lt;li&gt;Browser opens HTML file and displays content&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GO9-LCCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/BjICwJdqqOyMLVhWDM/giphy.gif%3Fcid%3D790b761169ac82e34ed0f9db7621caaa320b89eba4b84cdc%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GO9-LCCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.giphy.com/media/BjICwJdqqOyMLVhWDM/giphy.gif%3Fcid%3D790b761169ac82e34ed0f9db7621caaa320b89eba4b84cdc%26rid%3Dgiphy.gif%26ct%3Dg" alt="live html" width="480" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! We just learned how to create &lt;strong&gt;HTML files&lt;/strong&gt;, open it with our browser, and wrote out our first &lt;strong&gt;HTML Tags&lt;/strong&gt;! This is just the beginning of a whole new world! Soon enough you will be able to create much more attractive web pages with color, images, and sections to help readers find what they are looking for easier. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope by the end of this article you managed to learn how to create and understood what is going on in every line of code. It is very important to understand how your code fully works, not only does it help you become a better developer but can also help you use the tools you are working with more efficient.&lt;/p&gt;

&lt;p&gt;These articles are mostly intended for personal use on becoming a better programmer, writer, and grow my programming skills. Feel free to drop any feedback or corrections that you believe that should be made to help me and others. Thank you for your time for sticking this far!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Per-user global stores in Sveltekit </title>
      <author>coyotte508</author>
      <pubDate>Tue, 21 Dec 2021 19:17:25 +0000</pubDate>
      <link>https://dev.to/coyotte508/per-user-global-stores-in-sveltekit-k94</link>
      <guid>https://dev.to/coyotte508/per-user-global-stores-in-sveltekit-k94</guid>
      <description>&lt;p&gt;Svelte is really nice with stores. You can have a separate folder like this with named global stores:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stores/user.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stores/products.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove products on log out&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Simple caching mechanism&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then you can directly import the stores in your components, no hassle!&lt;/p&gt;

&lt;p&gt;On SvelteKit, though it doesn't work. Or rather, it works, but the stores are shared among all users:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mutating any shared state on the server will affect all clients, not just the current one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So... how do we get around this?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-session-as-the-key"&gt;
  &lt;/a&gt;
  Step 1: Session as the key
&lt;/h2&gt;

&lt;p&gt;It already exists! Sort of...&lt;/p&gt;

&lt;p&gt;It's the session, available through &lt;code&gt;input.session&lt;/code&gt; in a &lt;code&gt;load(input)&lt;/code&gt; function, or through &lt;code&gt;getStores().session&lt;/code&gt; within a component.&lt;/p&gt;

&lt;p&gt;But the session can only contain POJO data, or JSON with Maps and Sets. It's the limits imposed by &lt;a href="https://github.com/Rich-Harris/devalue"&gt;devalue&lt;/a&gt; which is used by SvelteKit.&lt;/p&gt;

&lt;p&gt;So, no dice for putting the store inside the session. But there's a nifty feature of javascript called a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap"&gt;WeakMap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So you can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to get the stores associated with the current user, you can do either &lt;code&gt;stores.get(input.session)&lt;/code&gt; when in a &lt;code&gt;load&lt;/code&gt; function or &lt;code&gt;stores.get($session)&lt;/code&gt; when in a component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-adding-a-bit-of-tooling"&gt;
  &lt;/a&gt;
  Step 2: Adding a bit of tooling
&lt;/h2&gt;

&lt;p&gt;Wouldn't a standardized way of accessing the stores be great?&lt;/p&gt;

&lt;p&gt;First, we need an easy way to get the current session, no matter where we are.&lt;/p&gt;

&lt;p&gt;It's easy when in a component: we can just call &lt;code&gt;getStores()&lt;/code&gt;. Inside a &lt;code&gt;load&lt;/code&gt; function, there's no built-in way, however.&lt;/p&gt;

&lt;p&gt;So, we're going to need a constraint: create a &lt;code&gt;useLoad&lt;/code&gt; function, that is called during &lt;code&gt;load&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function load(input) {
  useLoad(input, func1, func2, ...);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will execute &lt;code&gt;func1&lt;/code&gt;, &lt;code&gt;func2&lt;/code&gt; and so on with the session in &lt;code&gt;input.session&lt;/code&gt; as the context.&lt;/p&gt;

&lt;p&gt;And then we will create &lt;code&gt;useSession()&lt;/code&gt; that can get the current session from anywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useLoad.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LoadInput&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sveltejs/kit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SessionData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sessionData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;WeakMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SessionData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Typescript magic&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ReturnTypes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;infer&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;ReturnTypes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useLoad&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoadInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ReturnTypes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;sessionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sessionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;loadSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loadSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useSession.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getStores&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$app/stores&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sessionData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../useLoad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SessionData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loadSession&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getStores&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sessionData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Call useLoad before calls to useSession&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useLoad(input, ...)&lt;/code&gt; that needs to be called inside the load function.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useSession()&lt;/code&gt; which can get the current session, even within the load function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-3-definestore"&gt;
  &lt;/a&gt;
  Step 3: defineStore()
&lt;/h2&gt;

&lt;p&gt;It's inspired by the excellent Vue libary &lt;a href="https://pinia.esm.dev/introduction.html"&gt;pinia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Svelte has a wonderfully simple way of creating global stores, unfortunately in the SSR context we're going to need to recreate a &lt;code&gt;defineStore&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;It's going to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useUser.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./defineStore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useProducts.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$app/env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./defineStore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Remove products on log out. Only execute client-side&lt;/span&gt;
  &lt;span class="c1"&gt;// to prevent memory leaks&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the products store can even look up the &lt;code&gt;user&lt;/code&gt; store!&lt;/p&gt;

&lt;p&gt;How does this work? &lt;code&gt;defineStore&lt;/code&gt; takes a function as a parameter. The first time the store is needed for the current session, the function is executed. The subsequent times, the cached result is returned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useSession&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy peasy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-using-sveltekits-raw-fetch-endraw-"&gt;
  &lt;/a&gt;
  Step 4: Using SvelteKit's &lt;code&gt;fetch&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One particularity about SvelteKit is that it provides a &lt;code&gt;fetch&lt;/code&gt; function that should be used within &lt;code&gt;load&lt;/code&gt;. The reason is so that when the same calls are executed both serverside &amp;amp; clientside, the cached value can be used clientside instead of repeating the call.&lt;/p&gt;

&lt;p&gt;Maybe you noticed, but in the above &lt;code&gt;useLoad&lt;/code&gt;, we stored &lt;code&gt;input.fetch&lt;/code&gt; in &lt;code&gt;sessionData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To access it, we can create a &lt;code&gt;useFetch&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can now improve our &lt;code&gt;useProducts&lt;/code&gt; function to add &lt;code&gt;loadProducts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// useProducts.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$app/env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./defineStore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./useUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineStore&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;loadProducts&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-using-our-raw-usexxx-endraw-functions-in-the-code"&gt;
  &lt;/a&gt;
  Step 5: Using our &lt;code&gt;useXxx&lt;/code&gt; functions in the code
&lt;/h2&gt;

&lt;p&gt;Some of you maybe wondering why the &lt;code&gt;useXxx&lt;/code&gt; naming. Are we doing React? 😅&lt;/p&gt;

&lt;p&gt;I find that this naming convention has been adopted for functions that need to be called in a particular context - the immediate context for the component.&lt;/p&gt;

&lt;p&gt;It's used by another excellent Vue library, &lt;a href="https://vueuse.org/"&gt;vueuse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we decide it means a function that can be called either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the immediate context of a component&lt;/li&gt;
&lt;li&gt;Through &lt;code&gt;useLoad&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, let's say we wanted to load the products inside a &lt;code&gt;load&lt;/code&gt; function. Here is what it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;storeGet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoad&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$lib/use/useLoad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useProduct&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$lib/use/useProduct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoadInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useProducts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;storeGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is what it would look like inside a component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useProduct&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$lib/use/useProduct&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useProducts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loadProducts&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// reloads products each time user changes&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

{#each ($products || []) as product}
  &lt;span class="nt"&gt;&amp;lt;Product&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
{/each}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that's it! We now have a uniform way of accessing per-user global stores, whether we're serverside or clientside, and whether we're in a &lt;code&gt;load&lt;/code&gt; function or inside a component.&lt;/p&gt;

&lt;p&gt;As a bonus, we also have a uniform way of accessing the correct &lt;code&gt;fetch&lt;/code&gt; function ;)&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>ssr</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Stylify.dev. Dynamic CSS Generator for fluent and rapid development.</title>
      <author>Vladimír Macháček</author>
      <pubDate>Tue, 21 Dec 2021 18:48:26 +0000</pubDate>
      <link>https://dev.to/machy8/stylifydev-dynamic-css-generator-1cbe</link>
      <guid>https://dev.to/machy8/stylifydev-dynamic-css-generator-1cbe</guid>
      <description>&lt;p&gt;&lt;a href="https://stylify.dev"&gt;Stylify&lt;/a&gt; is a library that generates CSS dynamically based on what you write. Write HTML. Get CSS. 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-me-tell-you-a-story"&gt;
  &lt;/a&gt;
  Let me tell you a story
&lt;/h2&gt;

&lt;p&gt;Recently, I have been working on multiple projects. One project uses Bootstrap, second one Tailwind and some other vanilla CSS with own utility and components classes.&lt;/p&gt;

&lt;p&gt;Even though those tools are great and approaches not "bad", &lt;strong&gt;learning and remembering the classes, configurations, selectors all over again is just simply anoying and time consuming&lt;/strong&gt;. IDE plugins for whispering classes sometimes come to me as pure despair.&lt;/p&gt;

&lt;p&gt;I asked myself many times, &lt;strong&gt;why there is no framework or a library that uses natural CSS properties and their values as selectors&lt;/strong&gt;, that developers already knows. Yes, the selectors will maybe be a bit longer but there would be nothing to study in order to use it.&lt;/p&gt;

&lt;p&gt;Because I have could not find any, I have created my own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-idea-to-project"&gt;
  &lt;/a&gt;
  From Idea to Project
&lt;/h2&gt;

&lt;p&gt;It took me a year of development and I have finally released the first version 🎉. &lt;br&gt;
&lt;a href="https://stylify.dev"&gt;Stylify&lt;/a&gt; is a library that comes with a &lt;a href="https://stylify.dev/docs/stylify/native-preset"&gt;Native Preset&lt;/a&gt; that can match &lt;strong&gt;678 (probably all)&lt;/strong&gt; CSS properties from &lt;code&gt;Chrome, Mozilla, Opera, Safari and Edge&lt;/code&gt;. The size is less than &lt;strong&gt;28 kB&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The syntax is simple: &lt;code&gt;cssProperty:value&lt;/code&gt; and in case you need screens and pseudo classes &lt;code&gt;screen:pseudoClass:property:value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In practice, the usage of the Stylify looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-size:24px hover:color:red md:font-size:48px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Hello World!
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@stylify/stylify@latest/dist/stylify.native.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because some values can contain a space and a quote, I have decided to add a special syntax. When writting a selector its value should contain a space, you can use &lt;code&gt;__&lt;/code&gt;(two underscores) and for a quote &lt;code&gt;^&lt;/code&gt; (hat).&lt;/p&gt;

&lt;p&gt;This allows you to write selectors like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
 border:12px__solid__steelblue 
 font-family:^Arial^,__sans-serif
"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Hello World!
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When compiled and mangled, it generates the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;._nmed&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;steelblue&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;._l4hja&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;'Arial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#another-features"&gt;
  &lt;/a&gt;
  Another Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#macros"&gt;Dynamic selectors&lt;/a&gt;&lt;/strong&gt;: Define a macro and use it however you want &lt;code&gt;width:240px&lt;/code&gt;, &lt;code&gt;width:10%&lt;/code&gt;, &lt;code&gt;width:30rem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#logical-operands-in-screens"&gt;Dynamic screens&lt;/a&gt;&lt;/strong&gt;: You can combine screens using logical operands like &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; =&amp;gt; &lt;code&gt;sm&amp;amp;&amp;amp;tolg:font-size:48px xl&amp;amp;&amp;amp;dark:color:rgba(200,200,200,0.5)&lt;/code&gt; and use any value you want &lt;code&gt;minw123px:font-size:24px&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Selectors mangling&lt;/strong&gt;: Stylify can convert long selectors &lt;code&gt;transition:color__0.3s__ease-in-out&lt;/code&gt; to &lt;code&gt;_abc123&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Spliting CSS&lt;/strong&gt;: CSS can be generated for each file separately. Thanks to that you can split CSS for example for a page and layout.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#components"&gt;Components&lt;/a&gt;&lt;/strong&gt;: Define for example a &lt;code&gt;button&lt;/code&gt; with dependencies like &lt;code&gt;background:#000 color:#fff padding:24px&lt;/code&gt; and use it in a whole project. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#variables"&gt;Variables&lt;/a&gt;&lt;/strong&gt;: Define variables for repetetative values. They can be injected into code as CSS variables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#plainselectors"&gt;Plain selectors&lt;/a&gt;&lt;/strong&gt;: Allows you to style selectors like &lt;code&gt;article &amp;gt; h1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://stylify.dev/docs/stylify/compiler#helpers"&gt;Helpers&lt;/a&gt;&lt;/strong&gt;: Can be used when the CSS is generated for example for recalculating units and etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#seamless-integration"&gt;
  &lt;/a&gt;
  Seamless Integration
&lt;/h2&gt;

&lt;p&gt;Stylify can be integrated easily into frameworks like &lt;a href="https://stylify.dev/docs/integrations/nextjs"&gt;Next.js&lt;/a&gt;, &lt;a href="https://stylify.dev/docs/integrations/nuxtjs"&gt;Nuxt.js&lt;/a&gt;, &lt;a href="https://stylify.dev/docs/integrations/vitejs"&gt;Vite.js&lt;/a&gt;, &lt;a href="https://stylify.dev/docs/integrations/symfony"&gt;Symfony Framework&lt;/a&gt;, &lt;a href="https://stylify.dev/docs/integrations/nette"&gt;Nette Framework&lt;/a&gt;, &lt;a href="https://stylify.dev/docs/integrations/laravel"&gt;Laravel&lt;/a&gt; and etc. Also it works great along with &lt;a href="https://stylify.dev/docs/integrations/webpack"&gt;Webpack&lt;/a&gt; and &lt;a href="https://stylify.dev/docs/integrations/rollupjs"&gt;Rollup.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For easier integration there is a &lt;a href="https://stylify.dev/docs/nuxt-module/installation-and-usage"&gt;@stylify/nuxt-module&lt;/a&gt; for Nuxt.js and a &lt;a href="https://stylify.dev/docs/bundler/installation-and-usage"&gt;@stylify/bundler&lt;/a&gt; that can be used with already mentioned Rollup.js and Webpack or in any other tool.&lt;/p&gt;

&lt;p&gt;When integrating into an existing project, it is possible to generate CSS for each page separately (even for small components) and &lt;a href="https://stylify.dev/docs/get-started/migrating-to-stylify"&gt;slowly rewrite the website&lt;/a&gt; without increasing it's size or breaking anything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-me-know-what-you-think"&gt;
  &lt;/a&gt;
  Let me know what you think!
&lt;/h2&gt;

&lt;p&gt;I will be very glad if you &lt;a href="https://stylify.dev"&gt;try Stylify&lt;/a&gt; and let me know any (positive and negative) feedback or idea that could make the Stylify better and therefore more usefull for developers when working on their next project 🙂.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Let's Understand Classes And Objects In Programming  for Simplicity.</title>
      <author>Shrikant Dhayje</author>
      <pubDate>Tue, 21 Dec 2021 18:43:07 +0000</pubDate>
      <link>https://dev.to/shriekdj/lets-understand-classes-and-objects-in-programming-for-simplicity-24ni</link>
      <guid>https://dev.to/shriekdj/lets-understand-classes-and-objects-in-programming-for-simplicity-24ni</guid>
      <description>&lt;p&gt;There is An programming called&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OOP : Object Oriented Programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This Was Very Hard To Understand in my school because the teacher directly horify us with words like polymorphism, Inheritance and other Words.&lt;/p&gt;

&lt;p&gt;At here we will try to Understand What Are they not learn.&lt;/p&gt;

&lt;p&gt;While Creating classes and objects in our program we should consider ourself something similar to A God, a virtual god and our software(app) as our virtual world.&lt;/p&gt;

&lt;p&gt;We Create a Blueprint for our Characters in World Which is Class for example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Human&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total_hands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total_nose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;is_alive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And The Objects are actual Characters of Our virtual world.&lt;/p&gt;

&lt;p&gt;Same goes for other parts of the software program like vehicle, plant, machines, etc.,&lt;/p&gt;

&lt;p&gt;There is Also An Scope for our Characters in virtual world.&lt;br&gt;
Like Public The Part Visible to Everyone similar to face;&lt;br&gt;
Private the part which is not visible or accesible to everyone directly similar to organs and last protected which is publicly available or visible under some rules like authority given by the Character to Other Characters.&lt;/p&gt;

</description>
      <category>class</category>
      <category>object</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Pull Request Paradox: Merge Faster By Promoting Your PR</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 21 Dec 2021 18:28:09 +0000</pubDate>
      <link>https://dev.to/linearb/the-pull-request-paradox-merge-faster-by-promoting-your-pr-2dbo</link>
      <guid>https://dev.to/linearb/the-pull-request-paradox-merge-faster-by-promoting-your-pr-2dbo</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-pull-request-paradox-explained"&gt;
  &lt;/a&gt;
  The Pull Request Paradox explained
&lt;/h3&gt;

&lt;p&gt;I just wrote some code that can have a positive effect on our customers and I’m motivated to release it as quickly as possible. I need your help but you are busy and motivated to continue working on your own code. This conflict is The Pull Request Paradox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UopbzvyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct731isdisk99bo2w79u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UopbzvyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ct731isdisk99bo2w79u.png" alt="The Pull Request Paradox" width="880" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-very-very-brief-history-of-pull-requests"&gt;
  &lt;/a&gt;
  A very, very brief history of pull requests
&lt;/h3&gt;

&lt;p&gt;Pull requests came from the open source world and were born out of necessity. We needed a way to help open source projects manage submissions from contributors all around the world. GitHub built a solution for open source and Git flow went on to become widely adopted in the corporate world too. Despite the fact that most teams using it were working in the office. Of course in the last two years we’ve come full circle with remote work. So does that mean pull requests are more relevant than ever? Maybe.&lt;/p&gt;

&lt;p&gt;But the rise of PRs means all of a sudden we have this new gate between us and merging/releasing. We used to review each other’s work in the same room. Either through pairing or sync review sessions. When we were done, we merged. Today, most PRs are completed asynchronously with a lot of back-and-forth. And that back-and-forth introduces idle time into the process that was never there before. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-pull-request-paradox-hurts-developers"&gt;
  &lt;/a&gt;
  The Pull Request Paradox hurts developers
&lt;/h2&gt;

&lt;p&gt;So what’s the big deal with idle time? It’s not like we’re waiting around for someone else to review our work. We issue a PR and then move onto the next thing. It turns out idle time, particularly in the pull request process, is a developer flow killer. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh8RX_Cm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56sxokfknmjl224lgeqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh8RX_Cm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56sxokfknmjl224lgeqf.png" alt="Hours later..." width="880" height="662"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data science team at LinearB studied 733,000 pull requests and 3.9 million comments from 26,000 developers and found that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50% of pull requests were idle for 50.4% of their lifespan &lt;/li&gt;
&lt;li&gt;33% of pull requests were idle for (a whopping) 77.8% of their lifespan &lt;/li&gt;
&lt;li&gt;The average &lt;a href="http://linearb.io/cycle-time"&gt;cycle time&lt;/a&gt; for the developers studied was 6 days + 5 hours&lt;/li&gt;
&lt;li&gt;The average &lt;a href="https://linearb.io/blog/reducing-pr-review-time/"&gt;pull request review time&lt;/a&gt; for these developers was 4 days + 7 hours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This translates to an average of two days of idle time for every single chunk of work!&lt;/strong&gt; My team struggles with this. Not only is it frustrating, it creates real productivity problems: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We can’t merge and release.&lt;/strong&gt; Our mission is to solve problems (often through writing impactful code) and get our solutions into the hands of customers as quickly as possible. Idle time hurts our ability to merge and release our code which stops us from delivering value. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Idle time leads to reduced situational awareness, lower code quality and wasted effort.&lt;/strong&gt; The cognitive load for revisiting our code increases every hour that passes after we open a new PR. If I get questions or a request for changes a day or two later, it’s very difficult to get back into the flow state I was originally in. Sort of like how every time I leave this blog I have to re-read the whole thing before I can start writing again 😂 Idle time hurts quality because when a problem occurs in production on code I wrote days or weeks ago, it’s a lot harder to debug. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V747wZNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hig0yoj336oj9vc1xx93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V747wZNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hig0yoj336oj9vc1xx93.png" alt="Unfinished Work" width="880" height="958"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our team misses commitments.&lt;/strong&gt; Our team leads already have a hard enough time with accurate sprint planning. Idle time and longer cycles make our work less predictable and cause us to miss commitments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to help us fix the pull request paradox?&lt;/strong&gt; We would love to get your feedback on our pull request promoter – &lt;a href="https://linearb.io/pull-request-promoter/"&gt;sign up for the beta and be the first to get access.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-we-get-rid-of-pull-requests"&gt;
  &lt;/a&gt;
  Should we get rid of pull requests?
&lt;/h2&gt;

&lt;p&gt;Many people have proposed alternatives to pull requests:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“True” continuous integration.&lt;/strong&gt; It’s popular these days to say that CI and PRs are mutually exclusive. Trunk-based development allows devs to commit directly to the main branch without any kind of review or merge process. This approach might work for the most elite teams, but I think it has more cons than pros for 95% of us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zFCGVpxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv00p7dbfgcltdr8eou0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFCGVpxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv00p7dbfgcltdr8eou0.png" alt="&amp;quot;Don't use pull requests, use CI instead&amp;quot;" width="880" height="679"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ship / Show / Ask&lt;/strong&gt; is defined by Rouan Wilsenach as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“A branching strategy that combines the features of Pull Requests with the ability to keep shipping changes. Changes are categorized as either Ship (merge into mainline without review), Show (open a pull request for review, but merge into mainline immediately), or Ask (open a pull request for discussion before merging).“&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I really like this approach. Not all pull requests are created equal. For low risk work, merging directly with no review or review after the fact makes sense. The problem with this approach is that today most teams I’ve seen don’t have the definitions, process and automation in place to make it work. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cRLjh34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajv9xzf2laptwtz5vd57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cRLjh34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajv9xzf2laptwtz5vd57.png" alt='"Ship / Show / Ask"' width="880" height="741"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pair programming:&lt;/strong&gt; Pairing is awesome. Though it’s a bit harder now that we all work remotely. I know a lot of dev teams that use pairing to compliment async pull request reviews and I’ve never personally worked on a team that uses it to replace PRs. &lt;/p&gt;

&lt;p&gt;I don’t think pull requests are going away. In my experience, having a teammate review your code before your merge is the best, cheapest way to increase quality and reduce bugs. PRs are especially effective at catching maintainability bugs which are hard to detect with automated tests. &lt;/p&gt;

&lt;p&gt;I polled the members of the &lt;a href="https://discordapp.com/channels/771397800835022858/771400927479463996/917838953615327263"&gt;Dev Interrupted Discord community&lt;/a&gt; and found quite a few developers who agree PRs are a great tool for improving quality while learning and teaching. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnhfd6BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpzxtvvhsbg9lsyb4p3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnhfd6BC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpzxtvvhsbg9lsyb4p3a.png" alt="mjg" width="880" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of professional software developers is expected to double from 20M to 40M over the next 10 years. That’s a lot of new developers who will benefit from having another set of eyes on their code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PkPj09r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rvgjt3izesq09pj67vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PkPj09r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rvgjt3izesq09pj67vc.png" alt="Dan Wiloughby" width="880" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PRs have value but also a fundamental flaw. So how do we change the process to get the value and also cut idle time and merge faster? Our team started experimenting with a new thing earlier this year that’s making a big difference 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promote-your-pull-request-and-merge-faster"&gt;
  &lt;/a&gt;
  Promote your pull request and merge faster
&lt;/h2&gt;

&lt;p&gt;For a long time I thought nothing could be done about this paradox. It is what it is. Then I ran across a research study &lt;a href="https://arxiv.org/pdf/2003.01153.pdf"&gt;Which Pull Requests Get Accepted and Why&lt;/a&gt;. The paper shows smaller PRs are more likely to get accepted. It’s proof of the old saying… Show me a small PR and I’ll show you one with multiple thoughtful comments. Show me a large PR and I’ll show you one comment that says  “LGTM” 🤣&lt;/p&gt;

&lt;p&gt;It makes sense. When I’m considering picking up a teammate’s pull request, I’m personally much more likely to pick it up sooner if I know it’s small and I can squeeze it in between other tasks. &lt;/p&gt;

&lt;p&gt;That got me thinking… What other information about a pull request would make me more likely to pick it up quickly? And what would make me less likely to pick it up? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#every-pull-request-has-a-buyer-and-a-seller"&gt;
  &lt;/a&gt;
  Every pull request has a buyer and a seller
&lt;/h3&gt;

&lt;p&gt;As developers, our job does not end until we merge. And we can’t merge without help from our teammates. And our teammates have their own work to do. So at LinearB we have adopted the mentality that, when you open your PR, it’s your job to sell it to your teammates. We give as much information as possible to make it easy for our teammates to pick up faster and give feedback faster. We just spent all of this time writing this really important code, the least we can do for ourselves and our teammates is take 5 more minutes presenting our work with the relevant context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seller-context-checklist"&gt;
  &lt;/a&gt;
  Seller context checklist
&lt;/h3&gt;

&lt;p&gt;We came up with a list of 10 pieces of context that we share to help our teammates. We would love your help adding to the list. Please comment or &lt;a href="https://www.linkedin.com/in/dan-lines/"&gt;connect with me on Linkedin&lt;/a&gt; if you have any ideas. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Less Likely to Pick Up Quickly&lt;/th&gt;
&lt;th&gt;More Likely to Pick Up Quickly&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Number of files changed&lt;/td&gt;
&lt;td&gt;I don’t know how many files have been changed or I know it’s a lot&lt;/td&gt;
&lt;td&gt;I know only a few files have been changed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PR size&lt;/td&gt;
&lt;td&gt;I don’t know how big the PR is or I know it’s over 500 changes&lt;/td&gt;
&lt;td&gt;Less than 200 changes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Review time&lt;/td&gt;
&lt;td&gt;I don’t know how long the review will take or I know it will take a long time&lt;/td&gt;
&lt;td&gt;I know how long the review will take and/or I know it will take 15 minutes or less&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Related issue&lt;/td&gt;
&lt;td&gt;I don’t what project issue the PR is related to&lt;/td&gt;
&lt;td&gt;I can see the PR is related to a hot fix, P0 bug or super important feature&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release&lt;/td&gt;
&lt;td&gt;I don’t know if this PR is meant to be included in an imminent release&lt;/td&gt;
&lt;td&gt;I know this PR is meant to be included in an imminent release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Importance and urgency&lt;/td&gt;
&lt;td&gt;I have no idea how important this PR is to you&lt;/td&gt;
&lt;td&gt;I know that this particular PR is important to you and I can help you by looking at it quickly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test coverage&lt;/td&gt;
&lt;td&gt;I don’t know how much, if any, test coverage there is&lt;/td&gt;
&lt;td&gt;I know there’s 75-100% test coverage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment&lt;/td&gt;
&lt;td&gt;I don’t know why you assigned this particular PR to me&lt;/td&gt;
&lt;td&gt;I know the specific reason you assigned this particular PR to me (e.g. I know/own this area of the codebase, I need to learn this area of the code base, I’m on another team also working on this area of the code base)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pair programming&lt;/td&gt;
&lt;td&gt;I don’t know if you want/need a conversation or to pair on this PR&lt;/td&gt;
&lt;td&gt;I know whether or not you’re looking for a conversation or a pairing session&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Availability&lt;/td&gt;
&lt;td&gt;I don’t know what your availability is if I have questions for you once I start reviewing&lt;/td&gt;
&lt;td&gt;I know specific times I can reach you so I can synchronize my review with your schedule in case I have any questions&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-promoting-your-pull-request"&gt;
  &lt;/a&gt;
  Benefits of promoting your pull request
&lt;/h3&gt;

&lt;p&gt;Our team has been using the seller context checklist for about 5 months and we’re seeing several benefits. Some benefits are expected like we’re merging faster and most people on the team feel less frustrated by the PR process. Some benefits are unexpected like a couple of our more quiet devs are reporting it’s easier for them to get a review now because the context democratizes the process and they don’t have to bug teammates as much for help. &lt;/p&gt;

&lt;p&gt;Another benefit is that we have a constant reminder to break our work into small chunks. Small PRs are the foundation of agile engineering but it’s still really hard to practice. We’ve been tracking our PR pick-up times and found clear evidence that small PRs with lower estimated review time are getting picked up much faster than big PRs with higher estimated review time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7SkEkGVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmzzjzp4kwtdw6g6zjet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7SkEkGVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bmzzjzp4kwtdw6g6zjet.png" alt="Response Time by Estimated Review Time Labels" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can see over that same period of time our average PR size is trending down. Coincidence? I don’t think so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q23pzH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpgyai8ftj2qukoj48u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q23pzH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhpgyai8ftj2qukoj48u.png" alt="PR Size" width="769" height="535"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#help-us-fix-the-pull-request-paradox"&gt;
  &lt;/a&gt;
  Help Us Fix The Pull Request Paradox
&lt;/h2&gt;

&lt;p&gt;We need your help! Our team is using what we’ve learned to build a free tool to help you promote your PRs with all of the context your teammates need. It includes:&lt;/p&gt;

&lt;p&gt;Estimated review time that learns your PRs over time &lt;br&gt;
Number of files changed, commits and lines of code &lt;br&gt;
Field for related ticket, release and other context &lt;br&gt;
A gif or meme to get their attention 😁 &lt;br&gt;
Tons more cool stuff coming in Q1 &lt;br&gt;
We would love your feedback. &lt;a href="https://linearb.io/pull-request-promoter/"&gt;Sign up for the beta and be the first to get access.&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GD8pxtaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzv09ulxipdshifmngbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GD8pxtaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzv09ulxipdshifmngbj.png" alt="Please review my code!" width="880" height="713"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>devops</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>How to become a Technical Writer</title>
      <author>Bonnie</author>
      <pubDate>Tue, 21 Dec 2021 18:02:02 +0000</pubDate>
      <link>https://dev.to/the_greatbonnie/how-to-become-a-technical-writer-47m0</link>
      <guid>https://dev.to/the_greatbonnie/how-to-become-a-technical-writer-47m0</guid>
      <description>&lt;p&gt;Technical writing is a growing field, and technical writers' demand is at an all-time high.&lt;/p&gt;

&lt;p&gt;You can make a side income of $200 to $600 per article as a developer.&lt;/p&gt;

&lt;p&gt;But how can you become a technical writer in the first place?&lt;/p&gt;

&lt;p&gt;Let us find out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-technical-writing"&gt;
  &lt;/a&gt;
  What is technical writing?
&lt;/h2&gt;

&lt;p&gt;Technical writing is writing articles that are supposed to inform, instruct, or direct a specific audience on doing something.&lt;/p&gt;

&lt;p&gt;It involves writing about a particular subject that requires direction, instruction, or explanation.&lt;/p&gt;

&lt;p&gt;To become a technical writer, you can follow the process below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-the-basics-of-programming"&gt;
  &lt;/a&gt;
  Learn the basics of programming
&lt;/h2&gt;

&lt;p&gt;Technical writing mainly involves writing about Softwares or technological products. These products are created using programming technologies.&lt;/p&gt;

&lt;p&gt;To write about such products, you have to be familiar with the technologies used to create them.&lt;/p&gt;

&lt;p&gt;That is why learning the basics of programming is very important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-write"&gt;
  &lt;/a&gt;
  Learn how to write
&lt;/h2&gt;

&lt;p&gt;You need to have good writing skills to become a technical writer.&lt;/p&gt;

&lt;p&gt;Writing skills include all the knowledge and abilities related to expressing ideas through the written word.&lt;/p&gt;

&lt;p&gt;Technical writing requires being able to break down complex information into an easy to understand manner.&lt;/p&gt;

&lt;p&gt;That can't be possible if you don't have good writing skills.&lt;/p&gt;

&lt;p&gt;Some of the writing skills that you need to be a technical writer are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Research&lt;/li&gt;
&lt;li&gt;Outlining&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;li&gt;Reading comprehension.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#start-writing"&gt;
  &lt;/a&gt;
  Start writing
&lt;/h2&gt;

&lt;p&gt;Writing is the best way to improve your writing skills.&lt;/p&gt;

&lt;p&gt;Start writing about your favourite topics or any topics you are interested in tech.&lt;/p&gt;

&lt;p&gt;You can start writing at free blogging platforms like Hashnode, Dev To and Medium.&lt;/p&gt;

&lt;p&gt;You can also write on Twitter by creating valuable content. Actually, that is how I landed my first technical writing gig.&lt;/p&gt;

&lt;p&gt;The best way to improve your writing is by practising daily and reading regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-for-jobs"&gt;
  &lt;/a&gt;
  Apply for jobs
&lt;/h2&gt;

&lt;p&gt;Now that you have worked on your writing skills and have written a few technical articles, you can start applying for technical writing opportunities.&lt;/p&gt;

&lt;p&gt;Most platforms will give you topics that you can write about. Others will ask you to come up with a topic that you want to write about.&lt;/p&gt;

&lt;p&gt;However, some platforms expect to see two or three technical articles you have written before.&lt;/p&gt;

&lt;p&gt;That is why it is important to start writing before applying for technical writing gigs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-writing-a-good-technical-article"&gt;
  &lt;/a&gt;
  Tips for writing a good technical article
&lt;/h2&gt;

&lt;p&gt;There are some things you need to get right to write an excellent technical article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#come-up-with-a-good-structure-or-layout"&gt;
  &lt;/a&gt;
  Come up with a good structure or layout.
&lt;/h3&gt;

&lt;p&gt;The format of an excellent technical article includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A title should be a headline that demands attention and should have keyword combinations that reflect what the article is about.&lt;/p&gt;

&lt;p&gt;The introduction should describe the problem and the solutions the article will cover. Ensure that the introduction lets the reader know what the article is about.&lt;/p&gt;

&lt;p&gt;In the body part of the article, describe the problem and the solution in detail. Try to tell a story. The story should keep the reader engaged at every step. Make a list of your main points. Then progress from one point to another logically to lead to a conclusion.&lt;/p&gt;

&lt;p&gt;The conclusion should essentially include a summary of all the main points mentioned in the body.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-a-lot-of-research"&gt;
  &lt;/a&gt;
  Do a lot of research.
&lt;/h3&gt;

&lt;p&gt;Writing a good technical article is challenging because it can take a lot of your time and often requires research.&lt;/p&gt;

&lt;p&gt;When writing a technical article, doing research will help you understand the problem you are trying to solve and the solutions you can come up with.&lt;/p&gt;

&lt;p&gt;The research will also help you understand your audience and the message you are trying to deliver to them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#know-your-audience"&gt;
  &lt;/a&gt;
  Know your audience
&lt;/h3&gt;

&lt;p&gt;Knowing your audience when writing a technical article is very important because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps you to make decisions about what information you should include.&lt;/li&gt;
&lt;li&gt;It directs you on how you should arrange that information.&lt;/li&gt;
&lt;li&gt;It helps to know what supporting details will be necessary for the reader to understand what you are presenting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping your audience in mind will help you organize your ideas and how best to support your argument.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-examples"&gt;
  &lt;/a&gt;
  Use examples
&lt;/h3&gt;

&lt;p&gt;Use examples to help your audience better understand and relate to key points of the technical article you are writing.&lt;/p&gt;

&lt;p&gt;Examples can be in the form of screenshots or code snippets.&lt;/p&gt;

&lt;p&gt;As a technical writer, examples can serve as evidence to support your general claims or arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-other-technical-articles"&gt;
  &lt;/a&gt;
  Read other technical articles.
&lt;/h3&gt;

&lt;p&gt;Reading other technical articles will help you get inspiration and ideas on writing better articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/970413171/UBAufH"&gt;Learn to build websites without coding.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/970413171/PeYHf"&gt;Get unlimited tweet ideas, master Twitter DMS and learn how to write threads.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Array Related Methods</title>
      <author>Iftakher Hossen</author>
      <pubDate>Tue, 21 Dec 2021 18:00:04 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/javascript-array-related-methods-4ajn</link>
      <guid>https://dev.to/iftakher_hossen/javascript-array-related-methods-4ajn</guid>
      <description>&lt;p&gt;In JavaScript, Array is a variable that stores multiple elements. We used Array to store the list of elements and access with a single name. An array is a reference type, which defines it’s a subclass of Object.&lt;/p&gt;

&lt;p&gt;Example of Array:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48zrQo4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozpzh63m8odfnhuuazb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48zrQo4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozpzh63m8odfnhuuazb2.png" alt="Array Code Example" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many array methods in JavaScript. Let’s know about them: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isArray()&lt;/code&gt;: &lt;code&gt;isArray()&lt;/code&gt; method is used to know if the object is an array or not. When it returns true that means it’s an Array and when it returns false that means it’s not an Array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;concat()&lt;/code&gt;: &lt;code&gt;concat()&lt;/code&gt; method is used to concat/join two or more arrays together. After using this method it returns the new array.  It never changes the existing arrays.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;every()&lt;/code&gt;: &lt;code&gt;every()&lt;/code&gt; method is used to execute a specific function for every element of an array. If the function returns true it clarifies all the elements are true and if the function returns false it clarifies all the elements are false.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;: &lt;code&gt;filter()&lt;/code&gt; method is used to filter out some elements in a specific condition. It creates a new array with the results. It returns all the elements that fulfill the condition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;find()&lt;/code&gt;: &lt;code&gt;find()&lt;/code&gt; method is used to find an element in a specific condition. It returns the first element that fulfills the condition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;findIndex()&lt;/code&gt;: &lt;code&gt;findIndex()&lt;/code&gt; method is used to find out the index of an element that fulfills the condition. If there’s no match it returns -1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;forEach()&lt;/code&gt;: &lt;code&gt;forEach()&lt;/code&gt; method is used to execute a function for each array element. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;indexOf()&lt;/code&gt;: &lt;code&gt;indexOf()&lt;/code&gt;is used to get the index of a specific value. If there’s no match it returns -1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;join()&lt;/code&gt;: &lt;code&gt;join()&lt;/code&gt; method is used to return the array as a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;: &lt;code&gt;map()&lt;/code&gt; method is used to execute a function for each array element. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lastIndexOf()&lt;/code&gt;: &lt;code&gt;lastIndexOf()&lt;/code&gt; is used to get the last index of a specific value. If there’s no match it returns -1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pop()&lt;/code&gt;: &lt;code&gt;pop()&lt;/code&gt; method is used to delete the last element of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;push()&lt;/code&gt;: &lt;code&gt;push()&lt;/code&gt; method is used to add an element to the end of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Reduce()&lt;/code&gt;: &lt;code&gt;Reduce()&lt;/code&gt; method is used to execute a reducer function for an array element to calculate the numbers of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Reverse()&lt;/code&gt;: &lt;code&gt;Reverse()&lt;/code&gt; method is used to reverse the order of the items of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shift()&lt;/code&gt;:  &lt;code&gt;shift()&lt;/code&gt; method is used to delete the first element of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;slice()&lt;/code&gt;: &lt;code&gt;slice()&lt;/code&gt; method is used to get specific elements in a new array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sort()&lt;/code&gt;: &lt;code&gt;sort()&lt;/code&gt; method is used to sort the elements of an array in alphabetical and ascending order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt;: &lt;code&gt;splice()&lt;/code&gt; method is used to delete a specific element of an array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;unshift()&lt;/code&gt;: &lt;code&gt;unshift()&lt;/code&gt; method is used to add an element to the beginning of an array.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>iftakher</category>
    </item>
    <item>
      <title>8 Reasons Why a Good Web Design is Important for Your Business</title>
      <author>Ayesha Sahar</author>
      <pubDate>Tue, 21 Dec 2021 17:46:12 +0000</pubDate>
      <link>https://dev.to/iayeshasahar/8-reasons-why-a-good-web-design-is-important-for-your-business-1pe6</link>
      <guid>https://dev.to/iayeshasahar/8-reasons-why-a-good-web-design-is-important-for-your-business-1pe6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In the current era, the importance of web design is pertinent to most businesses as well as individuals. So, by now, most businesses know that having a good website design (UI+UX) is important. For small businesses or startups, investing in a well-designed, professional website may seem daunting. However, studies point to the fact that good web design is important. Moreover, your business’s website design impacts your customer experience, lead generation, and ultimately your bottom line.&lt;/p&gt;

&lt;p&gt;You may be wondering, why? So, let's answer that why now;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-an-impactful-first-impression"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. An Impactful First Impression&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The time in which it takes a visitor to assess aesthetics and make a conclusion about any site is extremely fast – maybe microseconds. When a user opens a website, a good design can make them feel good. If the website looks in fashion, has bright and beautiful colors, and is well organized, it looks welcoming to visitors and encourages them to stay. But if the website is dark along with outdated graphics and extremely confusing navigation, I myself would never open it ever again so why should I expect anyone to be inclined to continue on through the site?&lt;/p&gt;

&lt;p&gt;First impressions are extremely important! Potential customers are visiting your website, wanting to get to know your business. But if you get off to a bad start due to an unprofessional-looking page with zero design consideration, trying to convince users to stay on the page to learn about what you can offer them is gonna be difficult if not impossible. You put so much money in long-term SEO campaigns just to get visitors to your page. Don’t waste your money or even time by bringing visitors to your website only to have them leave later on. According to stats presented by Adobe, "38% of people will stop engaging with a website if the content/layout is unattractive". For once, just think about how many potential customers and money you could be losing due to poor visuals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-usability"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Usability&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The website design has a huge impact on how easy it is for visitors to find what they’re looking for. Research shows that "86% of your website visitors want to see product or service information, 65% look for contact information, and 52% seek an About page for your business".&lt;/p&gt;

&lt;p&gt;Therefore your website design should make these things as easy to find as possible. Otherwise, you'll frustrate your users or even potential users and may drive them away. Consider using standard conventions e.g put your primary services in your main navigation, feature your phone number in the upper-right-hand corner of your site, etc. It doesn't matter even if your website functions perfectly as a bad website design may make users feel that it’s harder to use or find what they need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-promotes-trust-in-your-brand"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Promotes Trust in Your Brand&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Let's admit it, website design determines how most people judge the integrity of your business. I mean, we all do it, don't we? Beautiful yet professional website designs promote trust. Out of fashion and unprofessional web designs make users doubt your credibility. Consistency in the brand is another way that a decent web design encourages trust. Customers recognize prominent and successful brands by just looking at things like their colors, logos, or styles, etc. &lt;/p&gt;

&lt;p&gt;Therefore, it is very important to ensure things that your customers identify your business with are clearly reflected in your website design. Make sure that the outline, styles, and fonts are the same throughout every page on your site. If every single page had a completely different design with no consistency, your site will appear unattractive and unprofessional. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-your-competitors-are-already-utilizing-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Your competitors are already utilizing it&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The most crucial reason why web design is important is that your competitors are already utilizing a good web design. If you want to retain your competitive relationship with them, you must use a good web design for your site. Everybody wants their website to stand out from the competition. If you have an old fashioned low-quality website, your competitors are gonna outrank you. Their well-designed fashionable website will ultimately perform better than yours. This means that you’ll lose to your competitors. They’ll attract more and more customers to their website because their website is visually more appealing.&lt;/p&gt;

&lt;p&gt;Actually, your website’s design is a golden opportunity for you to set your business apart from the competition. When competing with other businesses, you and your competitors generally have the same services and similar pricing. But you need one thing that will make your business stand out from them. A well-designed fashionable website is an opportunity for your business to showcase its unique features. You can visually show your audience why they should choose your business over others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ease-in-navigation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Ease in Navigation&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A good design makes your website easy to navigate. Most professional designers apply Hick’s Law while designing websites. This law states that the duration a person takes to make a decision is proportional to the number of choices available. If there are many choices, it's gonna take you much longer to make a decision, and vice versa.&lt;/p&gt;

&lt;p&gt;When professional designers build website navigation while having this Hick’s Law in mind, they want to simplify and reduce the number of options. They do this so that visitors can easily decide what action to take or where to go. This makes your site easy to navigate so an optimum number of options should be five or less. Analyze your product menu and if you find similar options, merge them into one. In this way, visitors or potential customers will find your website easy to navigate and easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-seo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. SEO&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Various components and techniques related to web design have a huge impact on your site’s content publishing capability. This ultimately influences how top search engines crawl and rank your page. Also, some web design components can hurt your SEO strategy. According to some studies, more than 60% of users have mobiles as their primary devices so having a fast, responsive website is imperative to SEO.&lt;/p&gt;

&lt;p&gt;In order to enhance the visibility of your page, you should make use of SEO-friendly web-design elements and techniques. If you think that this is not part of your expertise, hire a competent SEO company that will optimize your website for search engines and drive organic traffic to your site as this will end up enhancing your online presence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-improvement-in-website-loading-speed"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Improvement in Website Loading Speed&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A well-designed site loads quickly on all types of devices. A page loads in seconds because of high-quality responsive visual media. Any visitor is more likely to stay way longer on websites that load faster than on ones that take ages to load. One study found that 53% of mobile users will leave a website if pages are unresponsive or even take a significant amount of time to load. Think about it, what do you do when a website takes long to load? You leave right? That's the same for other visitors too! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-reduces-bounce-rates"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Reduces Bounce Rates&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Bounce rate is the percentage of users who visit a website but abandon it after checking out just one page. As we have already discussed it, a well-designed website with a fast loading speed means that users will interact with your website longer. This will in turn lower your bounce rate. If users spend more time on your site, they will be more likely to open other pages on your website. They will also learn more about you and your business while also checking out your products. Perhaps they would make a purchase too ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Website design is not a simple matter and should never be taken lightly. After all, it has the potential to make or break your online business! A well-designed website can help you gain many benefits. It can also help you nurture your leads and get more conversions. Moreover, it provides a good user experience, helping visitors to access and navigate your website with ease. Make sure that your website is designed user-friendly. Even if you already have a website, conduct site audits and optimize it to provide better accessibility and user experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's connect!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://twitter.com/IAyeshaSahar"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;✨ &lt;a href="https://github.com/AyeshaSahar"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>design</category>
      <category>ux</category>
      <category>ui</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
