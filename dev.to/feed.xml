<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Keep Configuration Secrets out of a Django Project</title>
      <author>TinoMuchenje</author>
      <pubDate>Wed, 02 Jun 2021 21:58:55 +0000</pubDate>
      <link>https://dev.to/tino_muc/how-to-keep-configuration-secrets-out-of-a-django-project-k07</link>
      <guid>https://dev.to/tino_muc/how-to-keep-configuration-secrets-out-of-a-django-project-k07</guid>
      <description>&lt;p&gt;It is best practice to hide your configuration details and not include them in version control for the sake of security and independence of project instance. Getting straight to the point here is how to do it using python decouple library.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-summary"&gt;
  &lt;/a&gt;
  Quick Summary
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Install decouple pip install python-decouple or [&lt;a href="https://pypi.org/project/python-decouple/"&gt;https://pypi.org/project/python-decouple/&lt;/a&gt;].&lt;/li&gt;
&lt;li&gt;Create file named .env or .ini under the route of your project.&lt;/li&gt;
&lt;li&gt;Add ignore for .env if you are using git.&lt;/li&gt;
&lt;li&gt;Retrieve the settings by importing decouple into the settings.py file and replacing variables to hide with config.
5 . Test the application&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#detailed-steps"&gt;
  &lt;/a&gt;
  Detailed Steps
&lt;/h1&gt;

&lt;p&gt;This is how our initial exposed settings.py looks like before exclusion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'3izb^ryglmyscret_key_here'&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'HELLO_DJANGO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'TINO'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'thepasswordhere'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'0000'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1-installing-decouple"&gt;
  &lt;/a&gt;
  1. Installing decouple
&lt;/h2&gt;

&lt;p&gt;run&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;pip install python-decouple&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 or if you prefer downloading [&lt;a href="https://pypi.org/project/python-decouple/"&gt;https://pypi.org/project/python-decouple/&lt;/a&gt;]&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-env-file"&gt;
  &lt;/a&gt;
  2. Create .env file
&lt;/h2&gt;

&lt;p&gt;Add variables to hide or exclude by copying values from settings.py making sure you do not include quotes("").&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;izb&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;ryglmyscret_key_here&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HELLO_DJANGO&lt;/span&gt;
&lt;span class="n"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TINO&lt;/span&gt;
&lt;span class="n"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;thepasswordhere&lt;/span&gt;
&lt;span class="n"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-ignoring-env-from-version-controlgit"&gt;
  &lt;/a&gt;
  3. Ignoring .env from version control(git)
&lt;/h2&gt;

&lt;p&gt;Go into your gitignore file and add .env as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Environments
&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make sure our file with variables is not tracked by the source control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-retrieve-the-settings-or-values-on-variables-set-in-the-env-file"&gt;
  &lt;/a&gt;
  4. Retrieve the settings or values on variables set in the .env file
&lt;/h2&gt;

&lt;p&gt;Import config from decouple as below and reference variables as strings&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decouple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'SECRET_KEY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#NB casting here for boolean
&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_NAME'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'USER'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_USER'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'HOST'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DB_HOST'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;'PORT'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please Note: On non string values we need to cast to the type e.g&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;DEBUG = ('DEBUG', cast=bool)&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 as DEBUG expects boolean True or False&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-test-to-see-if-your-application-still-run-the-same"&gt;
  &lt;/a&gt;
  5. Test to see if your application still run the same
&lt;/h2&gt;

&lt;p&gt;Execute&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;py manage.py runserver&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 to make sure your application still run smoothly.&lt;/p&gt;

&lt;p&gt;I have tried to go straight to the point for easier implementation. My motivation to write this down was the struggle I had to find similar information which is helpful. Feel free to suggest different implementations or suggestions. &lt;/p&gt;

&lt;p&gt;Happy Coding!!! &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>security</category>
      <category>deployment</category>
    </item>
    <item>
      <title>How I became a freelance web developer</title>
      <author>Marc</author>
      <pubDate>Wed, 02 Jun 2021 21:37:14 +0000</pubDate>
      <link>https://dev.to/webdevchallenges/how-to-become-a-freelance-web-developer-31ad</link>
      <guid>https://dev.to/webdevchallenges/how-to-become-a-freelance-web-developer-31ad</guid>
      <description>&lt;p&gt;I write this post because I think freelancing in web development is a good career and has a lot of advantages over traditional permanent positions.&lt;/p&gt;

&lt;p&gt;If you can manage to have enough customers to be occupied full time, working as a freelancer should make you a significant amount more money than permanent positions. Also being able to work on your own schedule is a huge plus in my book. It enables you to take time off whenever you feel you need that without an employer insisting in you being present.&lt;/p&gt;

&lt;p&gt;A lot of employers advertise their positions with terms like “work-life-balance” and other nice sounding words but I made the experience that they are used to lure developers into their positions and once you signed the contract, their promises are no longer relevant. I made this experience multiple times but I’m sure there are nice companies to work for in permanent positions too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-i-became-a-web-developer"&gt;
  &lt;/a&gt;
  How I became a web developer
&lt;/h1&gt;

&lt;p&gt;I live in germany, took 12 years of school and always planned to study an IT related subject on university. It was always a dream and I idolized studying on university for some reason. Maybe because it was something I was looking forward to because I didn’t like school that much.&lt;/p&gt;

&lt;p&gt;Anyways, once the time came and school ended I did not want to work while studying because I’m a lazy boy and neither did I want to take a loan. I decided to apply for apprenticeships as a software engineer. I actually did not find an employer willing to invest time into training me. So I applied for another apprenticeship path in system administration and found a nice company.&lt;/p&gt;

&lt;p&gt;During my apprenticeship which started in 2014 I learned a lot of basic sysadmin stuff that is very relevant to software engineers like setting up and securing linux servers for hosting web applications. I also was always very interested in programming. In the school part of the apprenticeship we learned Java which intrigued me.&lt;/p&gt;

&lt;p&gt;I spent time in my spare time programming some pretty useless applications, connecting to a mysql database from vanilla Java etc. Later I started to learn basic web development technologies like HTML, CSS (+Bootstrap) and JavaScript (+jQuery) with &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I also dug into Node.js because the idea of not needing to learn a whole new language for writing backend code was appealing to me.&lt;/p&gt;

&lt;p&gt;So towards the end of my apprenticeship I put together all the things I learned about Linux hosting, Node.js (MVC), HTML, CSS, Bootstrap and JavaScript and built a website which I used to apply to web development positions. I ordered an EC2 Instance from AWS which was free for their lowest tier and installed CentOS 7 on there. My Node.js application got served with pm2 and reverse proxied through NGINX which also handled SSL. The certificate was obtained through LetsEncrypt for free.&lt;/p&gt;

&lt;p&gt;I applied to positions towards the end of 2016 and found a web agency in munich where I began to work for them as a web developer from the beginning of 2017.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-first-permanent-position"&gt;
  &lt;/a&gt;
  My first permanent position
&lt;/h1&gt;

&lt;p&gt;An apprenticeship does not pay very well but you obviously are supposed to do a lot of learning and less earning in that period. So the first year paid 750€ montly, the second one 850€ monthly and the third year 950€ monthly. Usual pay in the area I did my apprenticeship in and with the level of experience after an apprenticeship is around 2500€ monthly. My first position was at 3000€ monthly which was more than I expected. The position was in Munich which is one of the reasons why the pay was a little better than in rural areas.&lt;/p&gt;

&lt;p&gt;These numbers are all before taxes and social security charges.&lt;/p&gt;

&lt;p&gt;To sum up my first position, I learned a lot about basic web development first. Did a project with jQuery which got more and more complicated over time. I regretted the decision to use jQuery very soon but I didn’t know any better. Later on I dove into learning Angular and developing Single Page Applications (SPAs). So I specialized more and more in frontend development. Sadly I did not learn a lot of backend development even though that is something I always have been interested in alot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-second-permanent-position"&gt;
  &lt;/a&gt;
  My second permanent position
&lt;/h1&gt;

&lt;p&gt;Through the projects on my first job, I gathered a lot of knowledge in Angular because I was the sole frontend developer responsible for the whole frontend code of our projects. The first company I worked at had financial problems which had multiple reasons and I want to go deeper into one of them in a later post. It was clear that this company would not make it and would go bankrupt sooner or later.&lt;/p&gt;

&lt;p&gt;So towards the end I got contacted by the CEO of another company on a social media for work which was popular in germany back then called XING. They searched for a frontend developer specialized in Angular which I was a good fit for so they hired me in Januar 2019. The pay was 4300€ monthly. I learned new stuff there, worked on developing an in-house web application in the real estate business.&lt;/p&gt;

&lt;p&gt;They previously had a freelance developer build their Angular application which I continued to develop. He was still working on some parts and basically transferred the project to me. This guy was very knowledgeable in this field but I was not far behind and I was also able to show him some stuff like state management that he did not have experience with yet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-entry-to-freelancing"&gt;
  &lt;/a&gt;
  My entry to freelancing
&lt;/h1&gt;

&lt;p&gt;I was already wondering if I too could be a freelance developer in the future. I worked for that company for 6 months. Ending the employment was mainly my decision and the reason behind this is a topic I want to discuss in a further post aswell.&lt;/p&gt;

&lt;p&gt;Anyways, I started to work on a personal project which I dumped a lot of time into. Working both on the backend and on the frontend was very fun to me and I learned a lot. Even though I did not pursue this project to have a real userbase I think the time spent was not wasted there.&lt;/p&gt;

&lt;p&gt;Two months after quitting at my previous company, the freelance developer I worked there together with contacted me. He said he is working on a different project as a freelancer and has some work for me if I’m interested. I saw this as a huge opportunity and I’m very grateful that he contacted me.&lt;/p&gt;

&lt;p&gt;So I said that I’m interested, registrated my business and started to work on this project. That was in Q3 2019 so I have been a freelance developer for almost two years now and I really enjoy it way more than working in a permanent position.&lt;/p&gt;

&lt;p&gt;My initial hourly rate was 65€ which we bumped up to 70€ after the first month. I think the rate is not very high but it’s not too low either. He knew how I worked and what I was capable of doing so we agreed to this rate which was fair in my opinion.&lt;/p&gt;

&lt;p&gt;That project lasted until the beginning of 2020. I immediately found another freelance gig afterwards and I want to create a separate post about finding work as a freelance developer soon.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me if you have any questions.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 10 Small Business Website Marketing Tips</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 02 Jun 2021 20:58:45 +0000</pubDate>
      <link>https://dev.to/krowser/top-10-small-business-website-marketing-tips-1n87</link>
      <guid>https://dev.to/krowser/top-10-small-business-website-marketing-tips-1n87</guid>
      <description>&lt;p&gt;If you’re running a small business and just now getting started with website marketing, I’ve got some great tips to help you get started. But these tips are just as valuable for veteran online marketers, too. It’s a good idea to always learn as many website marketing tips as you can to keep sharpening your saw.&lt;/p&gt;

&lt;p&gt;Here are my 10 favorite small business website marketing tips to help you get better results with your website:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Turn your website into a lead generation machine.&lt;br&gt;
The point of a website is not to make sales. The point of a website is to capture leads. Never forget that. Every single page on your website should be focused around capturing new leads by obtaining name and email at the very least.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use email marketing to follow-up with your leads.&lt;br&gt;
When I use the term “website marketing” I’m really talking about everything that happens online, and that includes email. As I pointed out above, your first objective is to capture new leads. Once you have those new leads, you need to build an email marketing follow-up system to stay connected to them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blog frequently and consistently to build search engine presence.&lt;br&gt;
To get email leads that can grow your business, you need people to visit your website. To get website visitors, you need lots and lots of content. Your prospects are using Google every day to search for what they want. One of the most reliable ways to show up in Google results is to blog about lots of topics your customers care about.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Follow the new SEO rules — not the old SEO rules.&lt;br&gt;
Chances are good you’ve already done some research about Online Marketing. And chances are also good that you’ve read a few things about SEO. Just be sure you’re making a distinction between “Old SEO” strategy and “New SEO” strategy. The Old SEO stuff is manipulative and wonky. It’s all about link building and other weak practices. The New SEO stuff is about quality and value. It’s all about content, authority, and reputation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build an active presence on the top social media networks.&lt;br&gt;
When your prospects aren’t using Google, they’re using Facebook, Twitter, Google Plus, LInkedIn, and Pinterest. You need a presence on at least 3 of these top 5 networks. Ideally, you should be updating them several times each week or even every single day if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on the most important rule in marketing: Content Is King!&lt;br&gt;
Burn this one into your brain forever. This is the golden rule of marketing — Content Is King! It’s the rule you need to follow in every medium where you’re creating new marketing messages: email, blogging, social media, web content, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn everything you can about Direct Response Marketing.&lt;br&gt;
If you took a marketing class in college, you can pretty much throw everything you learned (including the textbook) right out the window. Branding and institutional advertising is for corporations with multi-million dollar advertising budgets. You need to follow the rules of direct response marketing to be sure you get measurable, trackable results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember that Web Marketing is still just marketing.&lt;br&gt;
The goal of marketing is to grow your business. If you’re not doing that, then what’s the point? There are plenty of talking heads out there that will try to convince you that your online marketing strategy needs to be like a secret covert option to make your prospects your best friends rather than making them your best customers. It’s simply not true. Your number one goal is to grow your business.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Combine offline marketing with online marketing.&lt;br&gt;
Yes, it’s true, print media is still alive and well. It might seem strange that I’m suggesting offline marketing in a list of online marketing tips. But when in doubt, just read tip #8 above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test, track, measure, and improve your results.&lt;br&gt;
This is the most critical item on the list. If there’s any massive advantage that web marketing has over any other form of marketing, it’s that tracking and analyzing is far easier in this environment. Be sure you’re constantly measuring what you’re doing for best results.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Small Business Website Marketing Tips&lt;/strong&gt;&lt;br&gt;
I wrote this list to be punchy and direct so you can take quick action on at least a few of these items right away. Remember: all the theory and ideas in the world won’t help you if you don’t actually take action. Speed of implementation is the key to long-term success in business.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please feel free to leave questions in the comments section.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Next.js Beginner's Guide</title>
      <author>Eric Chapman</author>
      <pubDate>Wed, 02 Jun 2021 20:57:14 +0000</pubDate>
      <link>https://dev.to/ericchapman/next-js-beginner-s-guide-8l3</link>
      <guid>https://dev.to/ericchapman/next-js-beginner-s-guide-8l3</guid>
      <description>&lt;h2&gt;What is Next.js?&lt;/h2&gt;

&lt;p&gt;It's a React frontend development web framework that enables functionality such as server-side rendering and static site generation.&lt;/p&gt;

&lt;h3&gt;Server-side rendering?&lt;/h3&gt;

&lt;p&gt;In a traditional React app the entire app is loaded and rendered on the client. Next.js allow the first page load to be rendered by the server, which is great for SEO and performance.&lt;/p&gt;

&lt;h3&gt;Next.js other benefits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy page routing&lt;/li&gt;
&lt;li&gt;server Api routes&lt;/li&gt;
&lt;li&gt;Static site generation (like Gadsby)&lt;/li&gt;
&lt;li&gt;Easy Deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Create Next.js first project&lt;/h2&gt;

&lt;p&gt;To install and create a Next.js projet you can use the handy node npx command 'create-next-app my-app-name'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-next-app my-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with Tailwind CSS pre-configure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-next-app -e with-tailwindcss my-app-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a folder and create all files, configs and everything you need to start a Next.js app.&lt;/p&gt;

&lt;p&gt;Once the app is created you can launch it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd your-app-name
$ npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch your Next.js empty app. By default a welcome page is already created for you.&lt;/p&gt;

&lt;h2&gt;Pages and Routing&lt;/h2&gt;

&lt;p&gt;In Next.js to manage routes we dont have to use a routing library. &lt;/p&gt;

&lt;p&gt;Next.js routing is very easy to implement.&lt;/p&gt;

&lt;p&gt;When you create a new Next.js app with the create-next-app command, the app create by default a folder name 'pages'&lt;/p&gt;

&lt;p&gt;This 'pages' folder is your routes management. So every react components file in the folder will be treated as a specific route.&lt;/p&gt;

&lt;p&gt;For example, if the folder is containing those files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.js&lt;/li&gt;
&lt;li&gt;about.js&lt;/li&gt;
&lt;li&gt;blog.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This file will automatically be converted in 3 routes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The index page localhost/index&lt;/li&gt;
&lt;li&gt;The about page localhost/about&lt;/li&gt;
&lt;li&gt;The blog page localhost/blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see the principle is very easy. &lt;/p&gt;

&lt;p&gt;Also, if you visit a route that dont exist like 'localhost/home' Next.js will automatically show a not found 404 page&lt;/p&gt;

&lt;p&gt;Here an example of about.js page. Like you can see nothing is specified about the page. It is just a regular React functional component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AboutPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;AboutPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Nested routes&lt;/h3&gt;

&lt;p&gt;How about nested routes like localhost/blog/contact?&lt;/p&gt;

&lt;p&gt;To create nested routes you need to create a sub folder.&lt;/p&gt;

&lt;p&gt;For example: pages/blog&lt;/p&gt;

&lt;p&gt;Inside that folder you can create your 'contact.js' react component and that will create the page localhost/blog/contact&lt;/p&gt;

&lt;p&gt;If you create a index.js file in that sub folder, Next.js will use that component to represent your root route. ex: localhost/blog will render pages/blog/index.js&lt;/p&gt;

&lt;p&gt;If you create a file in pages/blog.js and another one under pages/blog/index.js. Both represent the same localhost/blog route. In that case Next.js will render only the blog.js file. &lt;/p&gt;

&lt;p&gt;What about dynamic routes where each blog post have it's own route:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;localhost/blog/my-first-blog&lt;/li&gt;
&lt;li&gt;localhost/blog/my-second-blog-post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Next.js you can create a dynamic route using the brackets notation.&lt;/p&gt;

&lt;p&gt;For example: pages/blog/[slug].js&lt;/p&gt;

&lt;p&gt;Yes that look a bit weird to include brackets to a file name but that's the way.&lt;/p&gt;

&lt;p&gt;If slug variable can be extract from the route using the useRoute hook.&lt;/p&gt;

&lt;p&gt;Here a example of the [slug].js page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My post: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a basic example. In a real app, the slug variable will be use to load the post file or lookup in a database for the corresponding post.&lt;/p&gt;

&lt;h2&gt;Routes links&lt;/h2&gt;

&lt;p&gt;Now that you created your first route. I guess you are wondering how to link pages to those routes? To do that you need 'next/link'&lt;/p&gt;

&lt;p&gt;Here a example of the home page with a link to the about page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the about page, if you want to create a link to come back to the home page. You can type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to style the link you have to use this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'/about'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-blue-500"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About this project&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Route redirect&lt;/h2&gt;

&lt;p&gt;What if you want to force a redirect to a specific page? For example on a click of a button? You can use 'router.push' for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is the about page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Return to home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Where you put components?&lt;/h2&gt;

&lt;p&gt;Many time you will want to create a components or a layout file. For example a component to render navbar. &lt;/p&gt;

&lt;p&gt;Up until now we only have use the pages folder. What if you dont want your component to be a route page? You dont want user to go open page like: localhost/navbar &lt;/p&gt;

&lt;p&gt;That's what will append if you put Navbar.js component inside the pages folder. &lt;/p&gt;

&lt;p&gt;What to do in that case? Easy, you need to place all your 'not a page' components inside another folder.&lt;/p&gt;

&lt;p&gt;By convention most Next.js use a folder name 'components' and this folder is created at the root folder of your apps.&lt;/p&gt;

&lt;p&gt;So for example if you want to create a layout component you can do it in the new components folder: /components/Layout.js&lt;/p&gt;

&lt;p&gt;That React component can be use anywhere in your app but will ne be reference as a route page.&lt;/p&gt;

&lt;h2&gt;Head compoment&lt;/h2&gt;

&lt;p&gt;Next.js server side render first page load. To do so it manipulate the html of you page. Including the header section.&lt;/p&gt;

&lt;p&gt;To provide header section tag like title or meta you need to use the Next.js Head component.&lt;/p&gt;

&lt;p&gt;Here's an example of a Layout component using the Head component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Layout.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'description'&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'keywords'&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;keywords&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;

&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my app title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my app description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;keywords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web, javascript, react, next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Custom 404 not found page&lt;/h2&gt;

&lt;p&gt;It is possible to create a custom 404 not found page. You may want to personalize the message or include your own page layout. &lt;/p&gt;

&lt;p&gt;Create 404.js file in the pages folder.&lt;/p&gt;

&lt;p&gt;Next.js will then automatically redirect to this page when a 404 is encounter. &lt;/p&gt;

&lt;p&gt;Here a example of a custom 404 page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/404.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NotFoundPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Sorry the page you are looking is no where to be found.        
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NotFoundPage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Import shortcut alias&lt;/h2&gt;

&lt;p&gt;As your app grow more and more. Some components can be nested deep in your app folder structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to create a shortcut to help you save some key stroke and get a result like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/Layout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The @ char is a shortcut syntax.&lt;/p&gt;

&lt;p&gt;To create this shortcut and more you need to create a file name 'jsconfig.json' at the root of your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;jsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"@/components/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"components/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Server-side data fetching&lt;/h2&gt;

&lt;p&gt;Instead of fetching data on the client side, Next.js can&lt;br&gt;
enables server-side rendering in a page and allows your to do initial data population, it means sending the page with the data already populated from the server. &lt;/p&gt;

&lt;p&gt;To implement that server-side data fetching you have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch data on each request&lt;/li&gt;
&lt;li&gt;Fetch data only once at build time (static site)&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Fetch data on each request&lt;h3&gt;
&lt;br&gt;
To server-side render on each request you need to use the getServerSideProps function.

&lt;/h3&gt;
&lt;/h3&gt;
&lt;p&gt;You can add this function at the end of your component file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://server-name/api/items`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If that function is present in your component file, Next.js will automatically fill you component props with the getServerSideProps object.&lt;/p&gt;


&lt;h3&gt;Fetch data at build time&lt;h3&gt;
&lt;br&gt;
To server-side render at build time you need to use the getStaticProps function.

&lt;/h3&gt;
&lt;/h3&gt;
&lt;p&gt;You can add this function at the end of your component file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://server-name/api/items`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Image optimization&lt;/h2&gt;

&lt;p&gt;Next.js has a built-in Image Component and Automatic Image Optimization.&lt;/p&gt;

&lt;p&gt;The Next.js Image Component, next/image, is an extension of the HTML &lt;a href="" class="article-body-image-wrapper"&gt;&lt;img&gt;&lt;/a&gt; element, evolved for the modern web.&lt;/p&gt;

&lt;p&gt;Images are lazy loaded by default. That means your page speed isn't penalized for images outside the viewport. Images load as they are scrolled into viewport.&lt;/p&gt;

&lt;p&gt;First import the Image Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use it in your component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/image.png"&lt;/span&gt;
  &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Picture of the author"&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to know more about Next.js Image component you can read the official documentation: &lt;a href="https://nextjs.org/docs/api-reference/next/image"&gt;https://nextjs.org/docs/api-reference/next/image&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. I still have a lot of posts coming about React so if you want to be sure to miss nothing click follow me!&lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me!: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My Autistic son and how we are going to reach him</title>
      <author>Adam Crockett</author>
      <pubDate>Wed, 02 Jun 2021 20:41:58 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/my-autistic-son-and-how-we-are-going-to-reach-him-2h0o</link>
      <guid>https://dev.to/adam_cyclones/my-autistic-son-and-how-we-are-going-to-reach-him-2h0o</guid>
      <description>&lt;p&gt;Three point five years ago, Logan was born prematurely, he scared me out of my whits! I remember racing to the hospital doing a speed &amp;gt; the speed limit. I don't remember arriving at the car park, only the birthing suite, I burst in to the entrance... The lady said. "Mother and baby haven't been very well, I will take you through in a moment".&lt;/p&gt;

&lt;p&gt;I remember the feeling, then thinking, oh god I have lost them, We walked into the hospital together laughing and I will be leaving on my own... &lt;/p&gt;

&lt;p&gt;She's taking me in, down some small corridor that felt 10 miles long, I'm crying now as I write this, as I always do... thinking about this moment, I heard something, it grew louder, we want through the double doors. Like a freight train just plowed through my chest, I heard it again, it sounded like a duck! 🦆 it was my son! Me being late as usual, I had missed the birth - shouldn't have taken that shower before I left!&lt;/p&gt;

&lt;p&gt;I spent 2 weeks in hospital visiting every day- my girlfriend the hero of this story was suffering, she's not aloud to see him for a few days! I'm his sole carer for the time being, what the hell am I doing, this baby is now in a glass House, I have to step up!&lt;br&gt;
I drive home late, living off junk, energy drinks and Costa coffee.&lt;/p&gt;

&lt;p&gt;Finally the day comes, I show my girlfriend what I have learned, how we feed him through a tube up his nose, change him and bath him. Her parents come... Mine, well its personal but I don't have any, not a typical childhood, it's me, I learn to be a dad from this day forward.&lt;/p&gt;

&lt;p&gt;Logan was Two when I started to look forward to having conversations, little questions to answer and hearing his voice, then one day he said "doggie", our dog Lizzie the jack, she brought out his first word 👏👏&lt;/p&gt;

&lt;p&gt;But then, nothing&lt;/p&gt;

&lt;p&gt;Other children, friends of ours, Thier kids all now walking and talking, Logan finally decided to start cruising, one a 2 months later, he walks! It took a while and this is expected, the impact of prematurity is bigger than I had ever understood or anticipated.&lt;/p&gt;

&lt;p&gt;He doesn't speak again for at-least six months, he knows maybe 10 words now, we read every night, 3 books a night. It's hard not to compare, we are desperately worried now, he can't or won't talk, our friends kids, full sentences and back chat!&lt;/p&gt;

&lt;p&gt;COVID hits, everyone in doors, we spend a long time indoors, he is regressing again, we need to do something fast, we learn British sign language from books from Amazon, everything comes from Amazon now, welcome to the desert that is our house.&lt;/p&gt;

&lt;p&gt;He's three now, and we have a few words he finally starts answering questions with no, not grunts... Although I'm now fluent in grunts, we sign around the house, even talk to eachother like this, it's easier for us. A very useful fascinating langue system you should absolutely learn by the way!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-point"&gt;
  &lt;/a&gt;
  The point
&lt;/h3&gt;

&lt;p&gt;Today we try PECS it's a system of communication similar to a Jira board.&lt;br&gt;
3 columns, now, next and later&lt;br&gt;
You stick your pictograms describing an activity to the column, he sees pictures and understands the plan. We think he has autism but it's a really long process in the UK to find out.. We know he hates change.&lt;/p&gt;

&lt;p&gt;So to help us all out, we have purchased a pecs board 🤘&lt;br&gt;
It sucks... It works but it sucks because we need more columns sometimes, less sometimes, different pictures. And when he's screaming the house down, we need favourite pictures quick sharp. Lastly like all things of this nature, it's badly drawn, as a UI guy this triggers me... We need an app, there is an app for everything right?&lt;br&gt;
Wrong, I think I need to write one, maybe it will help parents all over the place?&lt;/p&gt;

&lt;p&gt;So that's the plan, like many of my plans they never finish. I need a way to make this quick, get it out the door and onto an app store, I know web tech, what should I choose?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>a11y</category>
      <category>javascript</category>
      <category>android</category>
    </item>
    <item>
      <title>You don't know Redis</title>
      <author>SandorTuranszky</author>
      <pubDate>Wed, 02 Jun 2021 20:09:22 +0000</pubDate>
      <link>https://dev.to/sandorturanszky/you-don-t-know-redis-3onh</link>
      <guid>https://dev.to/sandorturanszky/you-don-t-know-redis-3onh</guid>
      <description>&lt;p&gt;In my previous &lt;a href="https://dev.to/sandorturanszky/how-to-create-linkedin-like-reactions-with-serverless-redis-4cad"&gt;post&lt;/a&gt;, I touched on the point that Redis is more than just an in-memory cache. &lt;/p&gt;

&lt;p&gt;Most people do not even consider Redis as a primary database. There are a lot of use cases where Redis is a perfect choice for non-cache related tasks. &lt;/p&gt;

&lt;p&gt;In this article, I will demonstrate how I built a fully functional Q&amp;amp;A board for asking and upvoting the most interesting questions. &lt;strong&gt;Redis will be used as a primary database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I will use Gatsby (React), Netlify serverless functions and &lt;a href="https://upstash.com?utm_source=sndr_2"&gt;Upstash Serverless Redis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Upstash has been a good choice so far and I decided to try it out in a more serious project. I love everything serverless and how it makes things simpler for me. &lt;/p&gt;

&lt;p&gt;Serverless will be a great choice for most tasks however you need to know the pros and cons of the tech you are using. I encourage you to learn more about serverless to get the most out of it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qampa-board-features"&gt;
  &lt;/a&gt;
  Q&amp;amp;A board features
&lt;/h3&gt;

&lt;p&gt;As you may know, I run a tech newsletter for recruiters where I explain complex tech in simple terms. I have an idea to collect questions from recruiters using a Q&amp;amp;A board and let them vote for questions.&lt;/p&gt;

&lt;p&gt;All questions will eventually be answered in my newsletter, however, the most upvoted questions will be addressed first. &lt;/p&gt;

&lt;p&gt;Anyone can upvote a question and registration is not required.&lt;/p&gt;

&lt;p&gt;Questions will be listed in three tabs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Active - questions sorted by votes and available for voting.&lt;/li&gt;
&lt;li&gt;Most recent - questions sorted by date (newest first).&lt;/li&gt;
&lt;li&gt;Answered - only questions that have answers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upvoting&lt;/strong&gt; will be one of the most frequently used features and Redis has a data type and optimized commands for it.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://redis.io/topics/data-types#sorted-sets"&gt;Sorted set&lt;/a&gt; is ideal for this task because all its members are automatically sorted by the score.&lt;/p&gt;

&lt;p&gt;Scores are numeric values that we will associate with votes. It is very easy to increment a score (add a vote) by using the &lt;a href="https://redis.io/commands/zincrby"&gt;ZINCRBY&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;We will also leverage scores for handling unmoderated questions by setting the score for them to &lt;code&gt;0&lt;/code&gt;. All approved questions will have a score of &lt;code&gt;1+&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It allows us to fetch all unmoderated questions by simply using the &lt;a href="https://redis.io/commands/ZRANGEBYSCORE"&gt;ZRANGEBYSCORE&lt;/a&gt; command specifying the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; arguments as &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To fetch all approved questions sorted by the score (highest first) we can use the &lt;a href="https://redis.io/commands/ZREVRANGEBYSCORE"&gt;ZREVRANGEBYSCORE&lt;/a&gt; command setting the &lt;code&gt;min&lt;/code&gt; score argument to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is great that by using just a few Redis commands we can also solve logical tasks along the way. &lt;strong&gt;Lower complexity is a huge benefit&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We will also use sorted sets for sorting questions by date or filtering questions that have answers. I will explain it in more detail in a moment.&lt;/p&gt;

&lt;p&gt;Less frequent operations, namely creating, updating and deleting questions are also easy to accomplish using &lt;a href="https://redis.io/topics/data-types#hashes"&gt;hashes&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-details"&gt;
  &lt;/a&gt;
  Implementation details
&lt;/h3&gt;

&lt;p&gt;The most interesting part is always the actual implementation. I use serverless functions and the &lt;a href="https://github.com/luin/ioredis"&gt;ioredis&lt;/a&gt; library and I will link the source code explaining what it does.&lt;/p&gt;

&lt;p&gt;This article is dedicated to client-facing functionality. Although I will explain admin-related functions, in the final source code there will be no backend interface. You will need to use Postman or a similar tool to call the admin related endpoints.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the API endpoints and what they do.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-a-question"&gt;
  &lt;/a&gt;
  Add a question
&lt;/h4&gt;

&lt;p&gt;Users can create questions. All questions require moderation before they become visible.&lt;/p&gt;

&lt;p&gt;A question is an object and Redis hash is a perfect data type to represent objects. &lt;/p&gt;

&lt;p&gt;This is the structure of a questions:&lt;br&gt;
&lt;code&gt;{"datetime":"1633992009", "question":"What are Frontend technologies?", "author":"Alex", "email":"alex@email.com", “score:” “0”, “url”: “www.answer.com” }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will store questions in hashes using the &lt;a href="https://redis.io/commands/HMSET"&gt;HMSET&lt;/a&gt; command which takes a key and multiple key-value pairs.&lt;/p&gt;

&lt;p&gt;The key schema is &lt;code&gt;question:{ID}&lt;/code&gt; where &lt;code&gt;ID&lt;/code&gt; is the question ID generated using the &lt;a href="https://github.com/uuidjs/uuid"&gt;uuid&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;This is a new question and there is no answer yet. We skip the &lt;code&gt;url&lt;/code&gt; property but it will be an easy task to add it later using the &lt;a href="https://redis.io/commands/hset"&gt;HSET&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;The score for a newly created question is &lt;code&gt;0&lt;/code&gt; by default. By our design, it means that this question needs moderation and will not be listed because we only fetch questions with scores starting from &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we keep the score value in a hash, we’ll need to update it whenever it changes. There is a &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command that we can use to easily increment values in hashes.&lt;/p&gt;

&lt;p&gt;As you can see, using Redis hashes solves a lot more for us than just storing data.&lt;/p&gt;

&lt;p&gt;Now that we know how we’ll store questions, we also need to keep track of questions to be able to fetch them later.&lt;/p&gt;

&lt;p&gt;For that, we add the &lt;code&gt;ID&lt;/code&gt; of a question to a sorted set with a score of &lt;code&gt;0&lt;/code&gt; using the &lt;a href="https://redis.io/commands/zadd"&gt;ZADD&lt;/a&gt; command. A sorted set will allow us to fetch question IDs sorted by scores.&lt;/p&gt;

&lt;p&gt;As you can see, we are setting the score to &lt;code&gt;0&lt;/code&gt; just like we do it for the &lt;code&gt;score&lt;/code&gt; property in the hash above. The reason why we duplicate the score in a hash is that we need it when showing the most recent questions or questions that have answers. &lt;/p&gt;

&lt;p&gt;For instance, the most recent questions are stored in a separate sorted set with timestamp as a score hence the original score value is not available unless it’s duplicated in a hash.&lt;/p&gt;

&lt;p&gt;Since we store the score in two places, we need to make sure that values are updated both in a hash and in a sorted set. We use the &lt;a href="https://redis.io/commands/multi"&gt;MULTI&lt;/a&gt; command to execute commands in a manner where either all commands are executed successfully or they are rolled back. Check &lt;a href="https://redis.io/topics/transactions"&gt;Redis Transactions&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;We will use this approach where applicable. For example, &lt;code&gt;HMSET&lt;/code&gt; and &lt;code&gt;ZADD&lt;/code&gt; will also be executed in a transaction (see source code below).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZADD&lt;/code&gt; command takes a key and our schema for it is &lt;code&gt;questions:{boardID}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All questions are mapped to a &lt;code&gt;boardID&lt;/code&gt;. For now, it’s a hardcoded value because I need one board only. In the future, I may decide to introduce more boards, for example, separately for Frontend, Backend, QA and so on. It’s good to have the needed structure in place.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;POST /api/create_question&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_create.js"&gt;create_question&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#approve-a-question"&gt;
  &lt;/a&gt;
  Approve a question
&lt;/h4&gt;

&lt;p&gt;Before a question becomes available for voting, it needs to be approved. Approving a question means the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update the score value in hash from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; using &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;Update the score value in the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; using the &lt;a href="https://redis.io/commands/ZADD"&gt;ZADD&lt;/a&gt; command.&lt;/li&gt;
&lt;li&gt;Add the question &lt;code&gt;ID&lt;/code&gt; to the &lt;code&gt;questions:{boardID}:time&lt;/code&gt; sorted set with the timestamp as the score to fetch questions sorted by date (most recent questions) using the same &lt;code&gt;ZADD&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can get the timestamp by looking up the question by its &lt;code&gt;ID&lt;/code&gt; using the &lt;a href="https://redis.io/commands/hget"&gt;HGET&lt;/a&gt; command.&lt;/p&gt;

&lt;p&gt;Once we have it, we can execute the remaining three commands in a transaction. This will ensure that the score value is identical in the hash and the sorted set. &lt;/p&gt;

&lt;p&gt;To fetch all unapproved questions the &lt;a href="https://redis.io/commands/ZRANGEBYSCORE"&gt;ZRANGEBYSCORE&lt;/a&gt; command is used with the &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; values as &lt;code&gt;0&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ZRANGEBYSCORE&lt;/code&gt; returns elements ordered by a score from low to high while &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; - from high to low. We’ll use the latter to fetch questions ordered by the number of votes. &lt;/p&gt;

&lt;p&gt;Endpoint for fetching all unapproved questions:&lt;br&gt;
&lt;code&gt;GET /api/questions_unapproved&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Endpoint for approving a question:&lt;br&gt;
&lt;code&gt;PUT: /api/question_approve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_unapproved.js"&gt;questions_unapproved&lt;/a&gt; serverless function. For the most part, this code is similar to other &lt;code&gt;GET&lt;/code&gt; endpoints and I will explain it in the next section.&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_approve.js"&gt;question_approve&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-approved-questions"&gt;
  &lt;/a&gt;
  Fetch approved questions
&lt;/h4&gt;

&lt;p&gt;To fetch all approved questions we use the &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; command setting the &lt;code&gt;min&lt;/code&gt; argument to &lt;code&gt;1&lt;/code&gt; in order to skip all unapproved questions.&lt;/p&gt;

&lt;p&gt;As a result, we get a list of IDs only. We will need to iterate over them to fetch question details using the &lt;a href="https://redis.io/commands/hgetall"&gt;HGETALL&lt;/a&gt; command. &lt;/p&gt;

&lt;p&gt;Depending on the number of questions fetched, this approach can become expensive and block the event loop in Node (I am using Node.js). There are a few ways to mitigate this potential problem. &lt;/p&gt;

&lt;p&gt;For example, we can use &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; with the optional &lt;code&gt;LIMIT&lt;/code&gt; argument to only get a range of elements. However, if the offset is large, &lt;a href="https://redis.io/commands/zrangebyscore"&gt;it can add up to O(N) time complexity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or we can use a Lua script to extend Redis by adding a custom command to fetch question details based on IDs from a stored set without us doing it manually in the application layer. &lt;/p&gt;

&lt;p&gt;In my opinion, it would be overhead in this case. Besides that, one must be very careful with Lua scripts because they block Redis and you can’t do expensive tasks with them without introducing performance degradation. This approach may be cleaner however we would still use the &lt;code&gt;LIMIT&lt;/code&gt; to avoid large amounts of data.&lt;/p&gt;

&lt;p&gt;Always research the pros and cons before the final implementation. As long as you understand the potential issues and have evaluated ways to mitigate them, you are safe.&lt;/p&gt;

&lt;p&gt;In my case, I know that it will take significant time before I will have enough questions to face this issue. No need for &lt;a href="https://en.wikipedia.org/wiki/Program_optimization"&gt;premature optimization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;GET /api/questions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions.js"&gt;questions&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vote-for-a-question"&gt;
  &lt;/a&gt;
  Vote for a question
&lt;/h4&gt;

&lt;p&gt;The process of upvoting a question consists of two important steps that both need to be executed as a transaction.&lt;/p&gt;

&lt;p&gt;However, before manipulating the score, we need to check if this question has no answer (&lt;code&gt;url&lt;/code&gt; property). In other words, we do not allow anyone to vote for questions that have been answered. &lt;/p&gt;

&lt;p&gt;The vote button is disabled for such questions. But we do not trust anyone on the internet and therefore check on the server if a given &lt;code&gt;ID&lt;/code&gt; exists in the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set using the &lt;a href="https://redis.io/commands/zscore"&gt;ZSCORE&lt;/a&gt; command. If so, we do nothing.&lt;/p&gt;

&lt;p&gt;We use the &lt;a href="https://redis.io/commands/hincrby"&gt;HINCRBY&lt;/a&gt; command to increment the score in the hash by &lt;code&gt;1&lt;/code&gt; and the &lt;a href="https://redis.io/commands/zincrby"&gt;ZINCRBY&lt;/a&gt; command to increment the score in the sorted set by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/question_upvote&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_upvote.js"&gt;question_upvote&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-most-recent-approved-questions"&gt;
  &lt;/a&gt;
  Fetch most recent approved questions
&lt;/h4&gt;

&lt;p&gt;It’s very similar to how we fetch all approved questions with the only difference being that we read another sorted set where the key schema is &lt;code&gt;questions:{boardID}:time&lt;/code&gt;. Since we used the timestamp as a score, the &lt;code&gt;ZREVRANGEBYSCORE&lt;/code&gt; command returns IDs sorted in descending order.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/questions_recent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_recent.js"&gt;questions_recent&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#update-a-question-with-an-answer"&gt;
  &lt;/a&gt;
  Update a question with an answer
&lt;/h4&gt;

&lt;p&gt;Updating or adding new properties to hashes is simple with the &lt;code&gt;HSET&lt;/code&gt; command. However, when we add an answer, we move the question from the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set to the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; one preserving the score.&lt;/p&gt;

&lt;p&gt;To do so, we need to know the score of the question and we obtain it using the &lt;a href="https://redis.io/commands/zscore"&gt;ZSCORE&lt;/a&gt; command. Answered questions will be sorted by score in descending order.&lt;/p&gt;

&lt;p&gt;Then we can: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;update the hash with the &lt;code&gt;url&lt;/code&gt; property using the &lt;code&gt;HSET&lt;/code&gt; command; &lt;/li&gt;
&lt;li&gt;add the hash to the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set using &lt;code&gt;ZADD&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;remove the question from the &lt;code&gt;questions:{boardID}&lt;/code&gt; sorted set running the &lt;code&gt;ZREM&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;remove the question from the &lt;code&gt;questions:{boardID}:time&lt;/code&gt; sorted set running the &lt;code&gt;ZREM&lt;/code&gt; command.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All four commands are executed in a transaction. &lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/question_add_answer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/question_add_answer.js"&gt;question_add_answer&lt;/a&gt; serverless function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fetch-questions-with-answers"&gt;
  &lt;/a&gt;
  Fetch questions with answers
&lt;/h4&gt;

&lt;p&gt;Again, the process is similar to fetching all approved questions. This time from the &lt;code&gt;questions:{boardID}:answered&lt;/code&gt; sorted set.&lt;/p&gt;

&lt;p&gt;Endpoint:&lt;br&gt;
&lt;code&gt;PATCH /api/questions_unswered&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code for the &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis/blob/main/lambda/questions_unswered.js"&gt;questions_unswered&lt;/a&gt; serverless function.&lt;/p&gt;




&lt;p&gt;Full &lt;a href="https://github.com/sandorTuranszky/questions-and-answers-board-built-with-redis"&gt;source code&lt;/a&gt;.&lt;br&gt;
Working &lt;a href="https://techforitrecruiters.com/questions"&gt;DEMO&lt;/a&gt; on my website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Redis has a lot of use-cases going way beyond cache. I’ve demonstrated only one of the multiple applications for Redis that one can consider instead of reaching for an SQL database right away.&lt;/p&gt;

&lt;p&gt;Of course, if you already use a database, adding yet another one may be an overhead. &lt;/p&gt;

&lt;p&gt;Redis is very fast and scales well. Most commercial projects have Redis in their tech stack and often use them as an auxiliary database, not just in-memory cache.&lt;/p&gt;

&lt;p&gt;I strongly recommend learning about &lt;a href="https://redislabs.com/redis-best-practices/introduction/"&gt;Redis data patterns and best practices&lt;/a&gt; to realize how powerful it is and benefit from this knowledge in the long run. &lt;/p&gt;

&lt;p&gt;Check my previous article where I created &lt;a href="https://dev.to/sandorturanszky/how-to-create-linkedin-like-reactions-with-serverless-redis-4cad"&gt;LinkedIn-like reactions with Serverless Redis&lt;/a&gt; if you haven’t already.&lt;/p&gt;

&lt;p&gt;Follow for more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>database</category>
    </item>
    <item>
      <title>Building a Contact Manager with Python, Flask, and HarperDB</title>
      <author>LordGhostX</author>
      <pubDate>Wed, 02 Jun 2021 19:45:13 +0000</pubDate>
      <link>https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53</link>
      <guid>https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-harperdb"&gt;
  &lt;/a&gt;
  What is HarperDB?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://studio.harperdb.io/sign-up?utm_source=solomon"&gt;HarperDB&lt;/a&gt; is an easy database solution that helps collect, distribute, and analyze data throughout your organization. It provides unmatched flexibility, speed, security, and value for every data use case your organization and project require.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-using-harperdb-in-your-next-project"&gt;
  &lt;/a&gt;
  Benefits of Using HarperDB in Your Next Project
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Seamless integration into any project and tool using a straightforward REST API. It also comes with support for multiple languages via various drivers and plugins.&lt;/li&gt;
&lt;li&gt;HarperDB provides the ability to run your database anywhere, ranging from edge to cloud and anywhere in between.&lt;/li&gt;
&lt;li&gt;Support for executing complex, performant, ACID-compliant SQL queries on JSON with no data duplication.&lt;/li&gt;
&lt;li&gt;Functionality to search databases with JSON filters and SQL queries without the need of an ORM.&lt;/li&gt;
&lt;li&gt;You enjoy the flexibility of a NoSQL database with the security, consistency, and durability of an RDBMS by leveraging a dynamic schema with attribute level and role-based security in a single storage engine.&lt;/li&gt;
&lt;li&gt;HarperDB Studio offers a sleek and intuitive management UI that allows you to browse, query, and manage data all in one place, with no coding required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-with-harperdb"&gt;
  &lt;/a&gt;
  Getting Started with HarperDB
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-harperdb-database-instance"&gt;
  &lt;/a&gt;
  Creating the HarperDB Database Instance
&lt;/h2&gt;

&lt;p&gt;We need to create a database for the contact manager. If you have not created an account on HarperDB before now, create one on &lt;a href="https://studio.harperdb.io/sign-up?utm_source=solomon"&gt;HarperDB’s website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the dashboard, click on &lt;code&gt;Create New HarperDB Cloud Instance&lt;/code&gt; as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvkFPImT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gtfhfpd6y5dgrvieg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvkFPImT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x20gtfhfpd6y5dgrvieg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, select a database instance type. A HarperDB instance is where you host your database. It can either be local (user-installed instance) or configured and managed on HarperDB servers (cloud instance). In this tutorial, we will be using the cloud instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB3nPLJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdwatm8tuiuqfw5hu6cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB3nPLJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdwatm8tuiuqfw5hu6cx.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to provide information about your cloud instance, like name and authentication credentials. Click on the &lt;code&gt;Instance Details&lt;/code&gt; button after supplying this information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ROputW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36n1g53vovrx6pp79y1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4ROputW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36n1g53vovrx6pp79y1q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Store the credentials somewhere secure and easily retrievable as we will need them in later parts of this tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are also required to provide the specification of the cloud instance. HarperDB allows you to choose the RAM, storage size, and region your instance should have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdiBpB1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc95trszs9rsncquue6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdiBpB1P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hc95trszs9rsncquue6u.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have provided all the configuration details for the cloud instance, click on the &lt;code&gt;Confirm Instance Details&lt;/code&gt; button, then finalize everything to create it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Cloud instances take several minutes to create. You’ll need to wait throughout this process. HarperDB also sends notifications via email on the instance creation status.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsnC5P29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1esdhzd4ipe23zf8g18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsnC5P29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1esdhzd4ipe23zf8g18.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-database-schemas"&gt;
  &lt;/a&gt;
  Creating the Database Schemas
&lt;/h2&gt;

&lt;p&gt;Let’s set up the necessary database &lt;code&gt;schema&lt;/code&gt; for our application. A &lt;code&gt;schema&lt;/code&gt; is a collection of tables in HarperDB, analogous to a database in SQL. Without schemas, you cannot store data in the database.&lt;/p&gt;

&lt;p&gt;To create a schema, first select the cloud instance in your dashboard, navigate to the &lt;code&gt;schemas&lt;/code&gt; section by the left, and then provide a name for it. In this tutorial, we will be using the name &lt;code&gt;contacts_repo&lt;/code&gt; as displayed in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqvNCF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqmedmlrrsom79jm9pqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjqvNCF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqmedmlrrsom79jm9pqa.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vmtS_OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz4npej2r7pcz8s5s2js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vmtS_OK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz4npej2r7pcz8s5s2js.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-schema-tables"&gt;
  &lt;/a&gt;
  Creating the Schema Tables
&lt;/h2&gt;

&lt;p&gt;Let’s set up &lt;code&gt;tables&lt;/code&gt; in our database schema. A &lt;code&gt;table&lt;/code&gt; is analogous to &lt;code&gt;tables&lt;/code&gt; in SQL databases like MySQL and &lt;code&gt;collections&lt;/code&gt; in NoSQL databases like MongoDB.&lt;/p&gt;

&lt;p&gt;To create a table. First, navigate to the &lt;code&gt;tables&lt;/code&gt; section by the left side of your dashboard, then provide a name and &lt;code&gt;hash_attribute&lt;/code&gt; for it. A &lt;code&gt;hash_attribute&lt;/code&gt; identifies every record in the database uniquely, and it is synonymous with &lt;code&gt;Primary Keys&lt;/code&gt; in a relational database.&lt;/p&gt;

&lt;p&gt;Here, we will set the name to &lt;code&gt;contacts&lt;/code&gt; and &lt;code&gt;hash_attribute&lt;/code&gt; to &lt;code&gt;contact_id&lt;/code&gt; as shown in the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--loguxW7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my0xs0o44kukw62gulny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--loguxW7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my0xs0o44kukw62gulny.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHPJHhJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2vgu71r45z6v1gdlnts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHPJHhJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2vgu71r45z6v1gdlnts.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-the-demo-application"&gt;
  &lt;/a&gt;
  Setting Up the Demo Application
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#cloning-the-contact-manager-repository"&gt;
  &lt;/a&gt;
  Cloning the Contact Manager Repository
&lt;/h2&gt;

&lt;p&gt;For the sake of convenience, I have written the user interface of the contact manager (with Flask and Bootstrap) that we will use in this article. To get started, you will need to clone &lt;a href="https://github.com/LordGhostX/harperdb-contact-manager"&gt;my repository&lt;/a&gt; and initialize the app like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/LordGhostX/harperdb-contact-manager
&lt;span class="nb"&gt;cd &lt;/span&gt;harperdb-contact-manager
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZE-L_0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ahfl5ffpog51loy8ob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZE-L_0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ahfl5ffpog51loy8ob.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;user-interface&lt;/code&gt; directory contains only the user interface of the contact manager. In contrast, the &lt;code&gt;full-application&lt;/code&gt; directory contains the entire application (HarperDB + Python + Flask) that we will build in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-projects-requirements"&gt;
  &lt;/a&gt;
  Installing the Project’s Requirements
&lt;/h2&gt;

&lt;p&gt;You need to install the contact manager’s requirements before you can run it. In your terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;user-interface  
pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the application to make sure it’s working. In your terminal, type:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxpdVdJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewfymxxmsotxz3gz45w5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxpdVdJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewfymxxmsotxz3gz45w5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view the user interface of our application, head to your browser and open the URL &lt;code&gt;http://127.0.0.1:5000&lt;/code&gt;, you should get a response similar to the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5KSIhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ybmqika6sn4wvllqcm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5KSIhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ybmqika6sn4wvllqcm4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#integrating-harperdb-with-python-and-flask"&gt;
  &lt;/a&gt;
  Integrating HarperDB with Python and Flask
&lt;/h1&gt;

&lt;p&gt;Now that we have set up the base application and database schemas, let’s move to communicating with the database using Python, as shown in the &lt;a href="https://github.com/HarperDB/harperdb-sdk-python"&gt;SDK documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-harperdb-python-sdk"&gt;
  &lt;/a&gt;
  Installing HarperDB Python SDK
&lt;/h2&gt;

&lt;p&gt;We need to get the Python SDK for HarperDB. It provides functionalities that allow an application to make queries to the HarperDB database instance. It’s available on pip, making it installable with a single command in the terminal.&lt;/p&gt;

&lt;p&gt;In the terminal, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;harperdb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-harperdb-python-sdk"&gt;
  &lt;/a&gt;
  Configuring HarperDB Python SDK
&lt;/h2&gt;

&lt;p&gt;We need to import the HarperDB SDK into our Flask application to use it. To do this, add the following code to the &lt;code&gt;app.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;harperdb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have to initialize the Python SDK client with the database instance authentication credentials we saved earlier. Add the following code to the &lt;code&gt;app.py&lt;/code&gt; file right after initializing the Flask app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SECRET_KEY"&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harperdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HarperDB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_USERNAME"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"HARPERDB_PASSWORD"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Don’t forget to replace the credentials placeholders with the appropriate values for your application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;HARPERDB_URL&lt;/code&gt; is present in the HarperDB dashboard, where all the database instances are displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mC90y_kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg29y116ui5s8uc5v4i1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mC90y_kr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg29y116ui5s8uc5v4i1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-harperdb-database-connection"&gt;
  &lt;/a&gt;
  Testing the HarperDB Database Connection
&lt;/h2&gt;

&lt;p&gt;To test our HarperDB cloud instance and credentials, we will be querying our database for its description. To do this, add the block of code below right before running the application in the &lt;code&gt;app.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y91BlHla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ct1ash8a5nzjsd087a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y91BlHla--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36ct1ash8a5nzjsd087a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;app.py&lt;/code&gt; file. If you get a response like an image below, the configuration is correct. If you don’t, check if your credentials are valid and correct.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HIDZJzSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4nt7mafk9hr5xmcpp5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HIDZJzSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4nt7mafk9hr5xmcpp5a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#making-queries-to-harperdb"&gt;
  &lt;/a&gt;
  Making Queries to HarperDB
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#creating-new-documents-in-harperdb"&gt;
  &lt;/a&gt;
  Creating New Documents in HarperDB
&lt;/h2&gt;

&lt;p&gt;To create new documents in our HarperDB schema, we need to run an &lt;code&gt;INSERT&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to insert data into the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;insert&lt;/code&gt; method of the Python SDK to insert data into the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"INSERT INTO contacts_repo.contacts (name, email) VALUES ('LordGhostX', 'lordghostx@email.com')"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"LordGhostX"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"lordghostx@email.com"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE: If you omit the &lt;code&gt;hash_attribute&lt;/code&gt; metadata when executing an &lt;code&gt;INSERT&lt;/code&gt; query, HarperDB will automatically generate one for you and store it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above executes an &lt;code&gt;INSERT&lt;/code&gt; query to your HarperDB cloud database. It creates a document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; metadata.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the &lt;code&gt;contacts&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/contacts/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contacts&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;contact_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"job"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"job"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"addContact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully added new contact"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ-bfq9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t79id6vnfbizhvdsygww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZ-bfq9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t79id6vnfbizhvdsygww.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-documents-from-harperdb"&gt;
  &lt;/a&gt;
  Reading Documents from HarperDB
&lt;/h2&gt;

&lt;p&gt;To read documents from our HarperDB tables, we need to run a &lt;code&gt;SELECT&lt;/code&gt; or &lt;code&gt;SEARCH&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to select the data from the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using either the &lt;code&gt;search_by_hash&lt;/code&gt; or &lt;code&gt;search_by_value&lt;/code&gt; methods of the Python SDK to select data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SELECT * FROM contacts_repo.contacts"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_by_hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# returns all documents with the specified hash attributes
&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"LordGhostX"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns all documents with the specified values
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes a &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;SEARCH&lt;/code&gt; query to your HarperDB cloud database. It fetches all the documents in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified hash attributes or values.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the rendering of the &lt;code&gt;contacts&lt;/code&gt; route in the &lt;code&gt;app.py&lt;/code&gt; file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;contacts_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"SELECT * FROM contacts_repo.contacts ORDER BY name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contacts_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;contacts_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYsGRsFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3m1ceub30pqsa5t0n7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYsGRsFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3m1ceub30pqsa5t0n7o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to update the contacts page to render the data fetched from the HarperDB request. Update the contacts table body &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; in the &lt;code&gt;contacts.html&lt;/code&gt; file with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
  {% for contact in contacts_data %}
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactName-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.name }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactEmail-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.email }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactPhone-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.phone }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contactJob-{{ contact.contact_id }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ contact.job }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;"#contactModal"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"displayContactInfo('{{ contact.contact_id }}')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;View Details&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMF6RAMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrd46pn332eayyxusqza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMF6RAMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrd46pn332eayyxusqza.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-documents-in-harperdb"&gt;
  &lt;/a&gt;
  Updating Documents in HarperDB
&lt;/h2&gt;

&lt;p&gt;To update documents in our HarperDB tables, we need to run an &lt;code&gt;UPDATE&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to update the data in the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;update&lt;/code&gt; method of the Python SDK to update data in the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UPDATE contacts_repo.contacts SET email='lordghostx@newemail.com' WHERE contact_id='sample_hash_attribute'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;"contact_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sample_hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"lordghostx@newemail.com"&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes an &lt;code&gt;UPDATE&lt;/code&gt; query to your HarperDB cloud database. It updates the document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified hash attributes with the new values supplied.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the action handling in the &lt;code&gt;contacts&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"updateContact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"contact_id"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contactID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully updated contact information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OTG8IiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1k9ti0jt9wdumw7612o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OTG8IiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1k9ti0jt9wdumw7612o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NR6kukh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sqxk8a3ibf93acgx93b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NR6kukh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2sqxk8a3ibf93acgx93b.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgig-0AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvdxfwn5btr3tps5m5o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lgig-0AZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltvdxfwn5btr3tps5m5o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-documents-from-harperdb"&gt;
  &lt;/a&gt;
  Deleting Documents from HarperDB
&lt;/h2&gt;

&lt;p&gt;To delete documents from our HarperDB tables, we need to run a &lt;code&gt;DELETE&lt;/code&gt; query in the database via the Python SDK. HarperDB provides two methods to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The SQL way: This involves running a SQL query to delete the data from the database.&lt;/li&gt;
&lt;li&gt;The NoSQL way: This involves using the &lt;code&gt;delete&lt;/code&gt; method of the Python SDK to delete data from the database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is sample Python code to demonstrate both methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# SQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE FROM contacts_repo.contacts WHERE name='LordGhostX'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# NoSQL way
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"sample_hash_attribute"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above executes a &lt;code&gt;DELETE&lt;/code&gt; query to your HarperDB cloud database. It deletes the document in the &lt;code&gt;contacts&lt;/code&gt; table, in the &lt;code&gt;contacts_repo&lt;/code&gt; schema with the specified &lt;code&gt;hash_attribute&lt;/code&gt;, or has the value &lt;code&gt;LordGhostX&lt;/code&gt; in the &lt;code&gt;name&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;We can integrate this into our contact manager by updating the &lt;code&gt;logout&lt;/code&gt; route with the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/contacts/delete/&amp;lt;string:contact_id&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts_repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;contact_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully deleted contact information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contacts"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoiB-pav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq33tr58ggecxug58sy4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoiB-pav--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq33tr58ggecxug58sy4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By integrating HarperDB with Python and Flask, we built a contact manager with CRUD functionalities with minimal effort. We saw how to create cloud databases, manage them, and execute queries using HarperDB.&lt;/p&gt;

&lt;p&gt;The source code of the contact manager is available on &lt;a href="https://github.com/LordGhostX/harperdb-contact-manager"&gt;GitHub&lt;/a&gt;. It was exciting integrating HarperDB into a Flask application, and I can’t wait to see the amazing things you create with it!&lt;/p&gt;

&lt;p&gt;If you have any questions, don't hesitate to contact me on Twitter: &lt;a href="https://twitter.com/LordGhostX"&gt;@LordGhostX&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Werewolf: A New Neo-Noir VSCode Theme</title>
      <author>Yao-Hui Chua</author>
      <pubDate>Wed, 02 Jun 2021 18:48:33 +0000</pubDate>
      <link>https://dev.to/yaaooo/werewolf-a-new-vscode-theme-2l5b</link>
      <guid>https://dev.to/yaaooo/werewolf-a-new-vscode-theme-2l5b</guid>
      <description>&lt;p&gt;Telltale's &lt;em&gt;The Wolf Among Us&lt;/em&gt; was released in 2013 and is arguably one of the company's strongest entries in its catalog of story-driven games. The series isn't perfect, but it does have a very cinematic quality to it. The art design and narrative elements blend together really well to create a world which oscillates between fantasy and reality.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_htfCzTjCpA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The game's thoughtful use of colors, in particular, stood out to me so much that I felt compelled to port some of its neo-noir vibes over to my workspace. A brand new VSCode theme was the perfect way to capture the spirit of this masterpiece.&lt;/p&gt;

&lt;p&gt;You can find the final product &lt;a href="https://marketplace.visualstudio.com/items?itemName=yaaooo.werewolf"&gt;on the VSCode Marketplace&lt;/a&gt; and its corresponding repository &lt;a href="https://github.com/yaaooo/werewolf-vscode-theme"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#helpful-resources"&gt;
  &lt;/a&gt;
  Helpful Resources
&lt;/h2&gt;

&lt;p&gt;Before I started working on my new theme, I searched for tutorials that could lead me through this process.&lt;/p&gt;

&lt;p&gt;To save you time, the best guide out there at this moment is &lt;a href="https://css-tricks.com/creating-a-vs-code-theme/"&gt;Sarah Drasner's article on CSS Tricks&lt;/a&gt;. It's a handy resource that walks you through the initial setup, configuration basics, and even some important points on accessibility. Alternatively, you can also take a peek at VSCode's official documentation for &lt;a href="https://code.visualstudio.com/api/get-started/your-first-extension"&gt;getting started with your first extension&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Throughout the theming process, I had some takeaways that I'll briefly share with you in this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#referencing-art"&gt;
  &lt;/a&gt;
  Referencing Art
&lt;/h2&gt;

&lt;p&gt;If you're basing your color palette on some art you've discovered, you might want to find a couple of expressive images that capture the look and feel you're gunning for. While working on my theme, I used the following piece of concept art pulled from ArtStation by &lt;a href="https://www.artstation.com/artwork/N9v45"&gt;Gray Rogers&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqVSr5vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k402kr3vn3ela7q3gtfo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqVSr5vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k402kr3vn3ela7q3gtfo.jpg" alt="Fabletown at Night from ArtStation by Gray Rogers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This depiction of the cityscape was important in helping me determine the kind of mood I wanted to evoke with my choice of colors. I understood that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The theme's backdrop had to be a mix of darker shades (variants of purple and red) &lt;/li&gt;
&lt;li&gt;Points of interest could be highlighted with bursts of neon (variants of blue and green) or yellow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This eventually led to combinations of colors like the one you see below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_KbOEkmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5ukwqg3pucx0i1wh9ub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_KbOEkmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5ukwqg3pucx0i1wh9ub.png" alt="A glimpse of my theme in Python"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each time I spun up VSCode to iterate on my theme's colors, I adjusted my IDE's window and positioned it right next to my reference image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKfW46aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwnubnc0i52fjltq255o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKfW46aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwnubnc0i52fjltq255o.png" alt="Placing my IDE and my reference image side by side"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This provided me with a sanity check of sorts. I was able to look at the current state of my theme and compare it to the art piece: If my theme felt like an extension of its source of inspiration, then I knew I was on the right track.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calibrating-colors"&gt;
  &lt;/a&gt;
  Calibrating Colors
&lt;/h2&gt;

&lt;p&gt;As you might've noticed in some of the code snippets, not every noteworthy piece of syntax can be differentiated with single versions of blue, green, and yellow.&lt;/p&gt;

&lt;p&gt;Thus, I had to expand my selection of colors by exploring different compositions of RGB values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVDx9i0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgpurazy9cromwiqqqie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVDx9i0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgpurazy9cromwiqqqie.png" alt="A glimpse of my theme in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, I used &lt;a href="https://www.color-hex.com/color/43bf90"&gt;#43BF90&lt;/a&gt; for &lt;strong&gt;integers/floats&lt;/strong&gt; and &lt;a href="https://www.color-hex.com/color/7accc9"&gt;#7ACCC9&lt;/a&gt; for &lt;strong&gt;strings&lt;/strong&gt;. Both hex codes have a substantial amount of green in them (which makes them appear somewhat similar) but the latter also has a substantial amount of blue (which gives string primitives a more tealish glow and helps them stand out slightly from their numerical counterparts).&lt;/p&gt;

&lt;p&gt;You can imagine extending this approach to type annotations as well. In my case, I used a darker orange for primitive type references (e.g. &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;) and used a color resembling gold for complex object types (e.g. &lt;code&gt;Props&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To me, it makes sense to use RGB values that are slight variations of each other when coloring tokens that are functionally similar, because it feels like an intuitive way of classifying related chunks of information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theming-the-ui-before-the-syntax"&gt;
  &lt;/a&gt;
  Theming the UI before the Syntax
&lt;/h2&gt;

&lt;p&gt;To be clear, building a VSCode theme mostly just involves assigning hex values to keys in a JSON file that permits common violations such as trailing commas and comments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Werewolf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activityBar.background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#220033&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#1D0622&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// ... VSCode interface colors&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tokenColors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;punctuation.definition.comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;settings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foreground&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#6464B3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// ... Syntax highlighting colors &lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two major sections here: &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;tokenColors&lt;/code&gt;.  &lt;code&gt;colors&lt;/code&gt; manages the different components in your VSCode interface (e.g. your editor, sidebar, terminal, etc), while &lt;code&gt;tokenColors&lt;/code&gt; handles syntax highlighting. &lt;/p&gt;

&lt;p&gt;My suggestion is to work through your preferred &lt;code&gt;colors&lt;/code&gt; first by going through the &lt;a href="https://code.visualstudio.com/api/references/theme-color"&gt;list of available options in the VSCode docs&lt;/a&gt;. You can think of these &lt;code&gt;color&lt;/code&gt; settings as being responsible for composing the "frame" within which your code will be displayed. Updating the background colors of your editor, sidebar, and terminal is enough to radically change the overall appearance of your IDE.&lt;/p&gt;

&lt;p&gt;Configuring &lt;code&gt;tokenColors&lt;/code&gt;, on the other hand, is a trickier task that I wouldn't want to front-load. &lt;a href="https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide"&gt;Syntax highlighting&lt;/a&gt; can be as involved as you'd like it to be; you can easily find yourself tinkering with minor details that demand a lot of consideration (e.g. your preferred colors for brackets, comments, etc).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-back"&gt;
  &lt;/a&gt;
  Looking Back
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B0EEG0vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os1zzcwb04iquzezl7vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B0EEG0vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os1zzcwb04iquzezl7vz.png" alt="Custom banner by Natalie Christian Tan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I named this theme &lt;em&gt;Werewolf&lt;/em&gt; (after the main character of the series) and &lt;a href="https://marketplace.visualstudio.com/items?itemName=yaaooo.werewolf"&gt;shared it publicly&lt;/a&gt; a few months ago. Some minor administration was required too; I had to set up proper channels and templates for submitting pull requests and issue reports on the &lt;a href="https://github.com/yaaooo/werewolf-vscode-theme"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking back, I'm not sure this project taught me substantial things about web development, but spending those hours playing around with a bunch of colors like a kid was a pretty fun and relaxing experience.&lt;/p&gt;

&lt;p&gt;My only regret is not shipping this out earlier because &lt;em&gt;The Wolf Among Us&lt;/em&gt; is a pretty dated game at this point. If there's a certain visual language out there that inspires you, I encourage you to take a couple of evenings off to give theming your VSCode a shot!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>DEV Community Caption Contest</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Wed, 02 Jun 2021 18:41:56 +0000</pubDate>
      <link>https://dev.to/devteam/dev-community-caption-contest-gh0</link>
      <guid>https://dev.to/devteam/dev-community-caption-contest-gh0</guid>
      <description>&lt;p&gt;&lt;em&gt;This week, we're going to try a lighthearted contest here on DEV. Below is a picture without a caption. Your task is to fill in the blank to make a hilarious programming/tech/developer meme.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are the rules...&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Write in your idea of the funniest caption for the picture as a comment below.&lt;/li&gt;
&lt;li&gt;Keep the humor appropriate (see our &lt;a href="//dev.to/codeofconduct"&gt;Code of Conduct&lt;/a&gt; ) and developer/software/tech-related&lt;/li&gt;
&lt;li&gt;Include your Instagram &lt;em&gt;and&lt;/em&gt; twitter handle in your submission comment if you have accounts on those platforms (and don't mind sharing)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Then...&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;We'll pick several submissions to be featured in a Twitter poll via &lt;a href="//twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; in the coming days&lt;/li&gt;
&lt;li&gt;The community will vote on their favorite caption&lt;/li&gt;
&lt;li&gt;Finally, we'll post the winner on our &lt;a href="//instagram.com/thepracticaldev"&gt;Instagram&lt;/a&gt; and Twitter, and tag them if they shared an Instagram handle. We'll also give the winner a special DEV profile badge!&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, let's get to the meme-age 🙃 &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#fill-in-the-blank"&gt;
  &lt;/a&gt;
  Fill in the blank...
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TP5vUWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq3yesxggmo69y1xoc3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TP5vUWF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq3yesxggmo69y1xoc3l.png" alt="One real bird on a branch with a blank text box next to a Marshmallow Peep candy with a blank text box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Photograph taken by &lt;a href="https://www.rd.com/list/hilarious-bird-photos-you-shouldnt-miss/"&gt;Nancy Uggla&lt;/a&gt; )&lt;/em&gt; &lt;/p&gt;

</description>
      <category>devmeme</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>The Art Of Making A Navbar 👩‍🎨</title>
      <author>Rajat Gupta</author>
      <pubDate>Wed, 02 Jun 2021 18:37:35 +0000</pubDate>
      <link>https://dev.to/rajatetc/the-art-of-making-a-navbar-11cf</link>
      <guid>https://dev.to/rajatetc/the-art-of-making-a-navbar-11cf</guid>
      <description>&lt;p&gt;Perhaps, after reading the title you are like - what's the art in it? Well, I for one, think that it takes skill to create simple components like a navbar. And eventually, if you want to create something amazing like &lt;a href="https://stripe.com/en-in"&gt;Stripe's &lt;/a&gt; navbar - it is important to get the basics right. &lt;/p&gt;

&lt;p&gt;If you are sold - let's start building the navbar.&lt;/p&gt;

&lt;p&gt;We will follow the mobile-first design approach, ie, we will first design our website for the smaller screen and then set it up for a bigger screen.&lt;/p&gt;

&lt;p&gt;Demo: &lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/adoring-williams-mrmic"&gt;
&lt;/iframe&gt;
  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;Let's begin by writing some HTML. &lt;/p&gt;

&lt;p&gt;In this project, I will be using free icons from Font Awesome. We can easily use them by linking to the CDN or through download. We will be using the CDN. &lt;/p&gt;

&lt;p&gt;The HTML will contain a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; for better accessibility. This div will act as a container for all things. In this div, we will place our links to various pages in our website, navbar toggle button, and social media icons.&lt;/p&gt;

&lt;p&gt;Don't worry about all the class names for now. Their use will become more clear when we write some CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Navbar Demo&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- font-awesome --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
      &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- styles --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"../src/styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js-logo.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fas fa-bars"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"home.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"about.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"contact.html"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social-icons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://linkedin.com"&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-linkedin-in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://github.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-github"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- javascript --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../src/index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Points to note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't forget to link the stylesheet, add the font awesome link, and finally the script source.&lt;/li&gt;
&lt;li&gt;Be careful with the relative file paths. If you have the files in the same directory, use &lt;code&gt;"./filename",&lt;/code&gt; if it's in a different folder, like src, use &lt;code&gt;"../src/filename"&lt;/code&gt;. Also, use file extension, for example, if it's a &lt;code&gt;.css&lt;/code&gt; file - use &lt;code&gt;filename.css&lt;/code&gt; and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Now that we have our HTML in place, let's write some CSS. &lt;/p&gt;

&lt;p&gt;Let's start with setting some variables. &lt;strong&gt;CSS variables&lt;/strong&gt; work just like any other variable. We set a value and can use it anywhere.&lt;/p&gt;

&lt;p&gt;You might ask why to bother with these variables. Well, if you are using a value say at 5 places in your program and you want to change its value. With the CSS variable, you can change the value at one place and it will be reflected all over. It will make more sense when we write the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we set some global styles. These are mainly for the look and feel of our website. You may skip this step - this won't affect the functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#small-screen-layout"&gt;
  &lt;/a&gt;
  Small Screen Layout
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue-JBT4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618916190958/6A0FswrDE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue-JBT4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618916190958/6A0FswrDE.png" alt="small_screen.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let set up styles for the small screen. We will set up the layout using flexbox. The way it will work is that on the small screen - we will have a nav header container that will contain the logo and toggle button. We will set up functionality through JS that such that when we click on the button - the links will be displayed. By, default links will not be displayed. Also, social icons will not be displayed on the small screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.nav-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav-toggle&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--spacing&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.social-icons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.show-links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Points to note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are using the transition and spacing variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#big-screen-layout"&gt;
  &lt;/a&gt;
  Big Screen Layout
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdW7fpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618916208842/_s_9DZK8I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCdW7fpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618916208842/_s_9DZK8I.png" alt="big_screen.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we will set up a big-screen layout using media queries such that when the screen size goes above 800px - we will change our layout.&lt;/p&gt;

&lt;p&gt;Now, we will use the nav center class. Within the nav center container - we will first show the logo, then the links, and finally the social media icons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav-center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1170px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.nav-toggle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.links&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.social-icons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.social-icons&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--transition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.social-icons&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We had &lt;code&gt;height : 0&lt;/code&gt; for links which we change to &lt;code&gt;height: auto&lt;/code&gt;. And for social media icons, we had &lt;code&gt;display: none&lt;/code&gt; which now becomes &lt;code&gt;display: flex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are done with the CSS. You might have noticed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.show-links&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the class we will use to toggle our links on a smaller screen through JS. By default, we have height as 0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h2&gt;

&lt;p&gt;We select the nav toggle button and the links container. We add a &lt;code&gt;click&lt;/code&gt; event listener on the nav toggle button and add &lt;code&gt;show-links&lt;/code&gt; class using the inbuilt toggle method. The way it works is basically if the class is not there it adds it on click and vice-versa. The class will give height to the container if present. I recommend opening up the console and see how the class gets added and removed to the DOM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.links&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;navToggle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;show-links&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, we can set up if statements instead of the toggle method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-links&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-links&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-links&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are done. If you encounter any issues - you can check out the code sandbox link at the start.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Welcome Thread - v127</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 02 Jun 2021 18:23:19 +0000</pubDate>
      <link>https://dev.to/devteam/welcome-thread-v127-3jb7</link>
      <guid>https://dev.to/devteam/welcome-thread-v127-3jb7</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6ZtpxSZbQRRnwCKQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6ZtpxSZbQRRnwCKQ/giphy.gif" alt="wizard dog saying welcome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Language Creation with Edaqa Mortoray &amp; Sam Scott</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 02 Jun 2021 18:08:59 +0000</pubDate>
      <link>https://dev.to/devteam/language-creation-with-edaqa-mortoray-sam-scott-4dhb</link>
      <guid>https://dev.to/devteam/language-creation-with-edaqa-mortoray-sam-scott-4dhb</guid>
      <description>&lt;p&gt;DevDiscuss, we like to talk about both the burning questions that directly impact your life as a developer &lt;em&gt;and&lt;/em&gt; the programming topics that are endlessly fascinating, but you might not have directly encountered in your own journey (yet).&lt;/p&gt;

&lt;p&gt;Depending on your circumstances, this week's episode might fit into both categories... &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e4-have-you-ever-wanted-to-create-your-own-language"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E4 - Have You Ever Wanted To Create Your Own Language?&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e4-have-you-ever-wanted-to-create-your-own-language" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e4-have-you-ever-wanted-to-create-your-own-language" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e4-have-you-ever-wanted-to-create-your-own-language" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e4-have-you-ever-wanted-to-create-your-own-language" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e4-have-you-ever-wanted-to-create-your-own-language"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e4-have-you-ever-wanted-to-create-your-own-language"&gt;
      &lt;img id="episode-profile-image" alt="S5:E4 - Have You Ever Wanted To Create Your Own Language?" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;This week, we're talking about creating your own programming language with two people who have done exactly what the title of this episode indicates:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/mortoray"&gt;Edaqa Mortoray&lt;/a&gt;, Puzzle Designer at Edaqa’s Room and creator of the Leaf programming language&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/samososos"&gt;Sam Scott&lt;/a&gt;, co-founder and CTO of Oso, which is powered by the language they created called Polar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P.S. Check out this great post by &lt;a class="mentioned-user" href="https://dev.to/mortoray"&gt;@mortoray&lt;/a&gt;
, which we talked about on the show:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mortoray" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZR3fyEDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gje84odD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/16729/332ce8ed-1887-41dc-b8df-b14e172486d8.jpg" alt="mortoray image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mortoray/sadly-i-must-say-goodbye-to-leaf-my-programming-language-d6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Sadly, I must say goodbye to Leaf (my programming language)&lt;/h2&gt;
      &lt;h3&gt;edA‑qa mort‑ora‑y ・ Aug 7 '18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#life&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inspiration&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devdiscuss/id151305388"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/30FEuaQl67Oty9InxzhGDJ"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzM3?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjo-OaexPnwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e4-have-you-ever-wanted-to-meKR17iftIw/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=163491002"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devdiscuss/episodes/168"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🗣️🗣️🗣️
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>language</category>
    </item>
  </channel>
</rss>
