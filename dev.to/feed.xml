<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Starter template for Nextjs, TailwindCSS &amp; TypeScript ( with Redux )</title>
      <author>Krishna Neupane</author>
      <pubDate>Tue, 17 Aug 2021 15:22:56 +0000</pubDate>
      <link>https://dev.to/krishneup/starter-template-for-nextjs-tailwindcss-typescript-with-redux-3kco</link>
      <guid>https://dev.to/krishneup/starter-template-for-nextjs-tailwindcss-typescript-with-redux-3kco</guid>
      <description>&lt;p&gt;Looking for a Starter Template for Nextjs, TailwindCSS &amp;amp; TypeScript? Then, this might be the kickstarter for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/krishneup/nextjs-typescript-tailwindcss-starter"&gt;https://github.com/krishneup/nextjs-typescript-tailwindcss-starter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Light/dark mode toggle. The dark mode state is globally saved in redux store and also saved in localstorage as well.&lt;/li&gt;
&lt;li&gt;Page transition loader&lt;/li&gt;
&lt;li&gt;TailwindCSS theming&lt;/li&gt;
&lt;li&gt;Typescript &amp;amp; Redux Implementation&lt;/li&gt;
&lt;li&gt;Mobile Responsive Navbar&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>tailwindcss</category>
      <category>redux</category>
    </item>
    <item>
      <title>A Vim Guide for Veteran Users</title>
      <author>Matthieu Cneude</author>
      <pubDate>Tue, 17 Aug 2021 15:10:46 +0000</pubDate>
      <link>https://dev.to/phantas0s/a-vim-guide-for-veteran-users-3p50</link>
      <guid>https://dev.to/phantas0s/a-vim-guide-for-veteran-users-3p50</guid>
      <description>&lt;p&gt;This article is the fifth of the series aimed to teach Vim from the ground up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-beginner/"&gt;Vim for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-veteran/"&gt;Vim for Veteran Users&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can you picture an adventurer, going deeper and deeper into a mysterious cave, knowing what's waiting for her (mostly rocks and bats) but at the same time wishing to be surprised by some rare gems and abandoned treasures?&lt;/p&gt;

&lt;p&gt;This is how I feel when I'm adventuring deeper and deeper into Vim's world. I know that I'll always find something valuable: a new keystroke, a fierce command, or a little subtlety, increasing the control I have over my favorite editor.&lt;/p&gt;

&lt;p&gt;Over the last few articles, I tried to guide you in the Vim caves helping you discover the finest diamonds. We'll continue this endeavour in this article by exploring the following:b&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some keystrokes used for completion in INSERT mode.&lt;/li&gt;
&lt;li&gt;Useful keystrokes we can use in COMMAND-LINE mode.&lt;/li&gt;
&lt;li&gt;What are abbreviations and how to use them.&lt;/li&gt;
&lt;li&gt;How to save the global options and mappings of the current Vim instance into a file.&lt;/li&gt;
&lt;li&gt;How to save and restore Vim sessions.&lt;/li&gt;
&lt;li&gt;What's the purpose of the viminfo file (or the shada file for Neovim).&lt;/li&gt;
&lt;li&gt;How to redirect Vim command output into a file or a register.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take your backpack, your headlamp, your rope, and let's go spot some new treasures for the mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#completion-in-insert-mode"&gt;
  &lt;/a&gt;
  Completion in Insert Mode
&lt;/h2&gt;

&lt;p&gt;We have already looked at useful keystrokes in INSERT mode &lt;a href="https://thevaluable.dev/vim-adept/"&gt;in the last article&lt;/a&gt;. There are other interesting ones you can use for completion. These keystrokes are all prefixed with another one, &lt;code&gt;CTRL+x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vim needs to be compiled with the &lt;code&gt;+insert_expand&lt;/code&gt; feature for these keystrokes to work.&lt;/p&gt;

&lt;p&gt;The first couple of them allow you to scroll up and down your buffer without leaving INSERT mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL+y&lt;/code&gt; - Scroll up&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL+e&lt;/code&gt; - Scroll down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The others are only useful if you want to complete what you've already typed. Here are, in my opinion, the most useful ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL-l&lt;/code&gt; - Complete a whole line from the content of one of your buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL-f&lt;/code&gt; - Complete the filepath under the cursor. It expands environment variables if it contains a filepath too.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x s&lt;/code&gt; - Complete with spelling suggestions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL+v&lt;/code&gt; - Complete with the command line history.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+x CTRL+i&lt;/code&gt; - Complete with the keywords in the current and included files. These files are in the option &lt;code&gt;path&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use the completion from a thesaurus or a dictionary, or even the omni-completion to auto-complete programming languages. If you want to dive deeper in these ideas, Vim's help is waiting for your curiosity to be unleashed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help i_CTRL-x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help ins-completion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help compl-omni-filetypes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keystrokes-in-commandline-mode"&gt;
  &lt;/a&gt;
  Keystrokes in Command-Line Mode
&lt;/h2&gt;

&lt;p&gt;There was a lot of love poured into INSERT and VISUAL mode keystrokes in this series of article. What about COMMAND-LINE mode? It's time to pay some respect to this old chap. &lt;/p&gt;

&lt;p&gt;First, some good news: The keystrokes in INSERT mode will mostly work in COMMAND-LINE mode too. In one sentence, we already have a bunch of keys we can play with. How sweet is that?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copying-from-the-buffers-to-the-commandline"&gt;
  &lt;/a&gt;
  Copying From the Buffers to the Command-Line
&lt;/h3&gt;

&lt;p&gt;Did you ever have the urge to copy something from your buffer in COMMAND-LINE mode? The boring way would be to come back to your buffer in NORMAL mode, copy what you want in a register, come back to COMMAND-LINE mode, and spit what you want. Like in INSERT mode, you can use &lt;code&gt;CTRL+r&lt;/code&gt; followed by the name of a register to copy its content in COMMAND-LINE mode.&lt;/p&gt;

&lt;p&gt;Or you can use these keystrokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CTRL+r CTRL+f&lt;/code&gt; - Copy the &lt;code&gt;f&lt;/code&gt;ilename under the buffer's cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+r CTRL+w&lt;/code&gt; - Copy the &lt;code&gt;w&lt;/code&gt;ord under the buffer's cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+r CTRL+a&lt;/code&gt; - Copy the WORD under the buffer's cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CTRL+r CTRL+l&lt;/code&gt; - Copy the &lt;code&gt;l&lt;/code&gt;ine under the buffer's cursor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;p&gt;If the option &lt;code&gt;incsearch&lt;/code&gt; is set, it will highlight the search you're doing while typing it. That's not all: you'll also be able to use &lt;code&gt;CTRL+g&lt;/code&gt; and &lt;code&gt;CTRL+t&lt;/code&gt; to go through every match without leaving COMMAND-LINE mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-commands-on-one-line"&gt;
  &lt;/a&gt;
  Multiple Commands on One Line
&lt;/h3&gt;

&lt;p&gt;This one is not a keystroke but it can be useful nevertheless. You can run more than one command in one line if you separate them with a pipe. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:set filetype?|echo "it's done!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This won't work if the command accepts a pipe as an argument. For example: &lt;code&gt;:!ls | wc&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help Command-line-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help ex−edit−index&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#abbreviations"&gt;
  &lt;/a&gt;
  Abbreviations
&lt;/h2&gt;

&lt;p&gt;Let's now look at something totally different: Vim abbreviations. This feature can replace a word with another one automatically after pressing &lt;code&gt;SPACE&lt;/code&gt;. You can use abbreviations in INSERT and COMMAND-LINE modes.&lt;/p&gt;

&lt;p&gt;For example, if you often misspell "the" with "teh" (it happens to the best of us), you can automatically replace "teh" with "the".&lt;/p&gt;

&lt;p&gt;Let's see the commands you can use to output and manipulate abbreviations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:abbreviate&lt;/code&gt; or &lt;code&gt;:ab&lt;/code&gt; - List all the abbreviations created.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:abbreviate &amp;lt;string&amp;gt;&lt;/code&gt; or &lt;code&gt;:ab &amp;lt;string&amp;gt;&lt;/code&gt; - List abbreviations beginning with the string &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:abbreviate &amp;lt;string&amp;gt; &amp;lt;replacement&amp;gt;&lt;/code&gt; or &lt;code&gt;:ab &amp;lt;string&amp;gt; &amp;lt;replacement&amp;gt;&lt;/code&gt; - Create a new abbreviation for every mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:unabbreviate &amp;lt;ab&amp;gt;&lt;/code&gt; or &lt;code&gt;:una &amp;lt;ab&amp;gt;&lt;/code&gt; - Remove the abbreviation &lt;code&gt;&amp;lt;ab&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:abclear&lt;/code&gt; or &lt;code&gt;:abc&lt;/code&gt; - Remove all abbreviations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you list abbreviations using &lt;code&gt;:ab&lt;/code&gt;, you'll see different letters in the first column of the output. They indicate in what mode you can use them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;i&lt;/code&gt; for &lt;code&gt;i&lt;/code&gt;nsert mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c&lt;/code&gt; for &lt;code&gt;c&lt;/code&gt;ommand line mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!&lt;/code&gt; for both.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to list or create abbreviations for one precise mode, you can use &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; at the beginning of the command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:iab&lt;/code&gt; - List every abbreviation available in INSERT mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cab &amp;lt;string&amp;gt; &amp;lt;replacement&amp;gt;&lt;/code&gt; - Create a new abbreviation only available in COMMAND-LINE mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;iabc&lt;/code&gt; - Remove all abbreviations in INSERT mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works a bit differently if you decide to use the long forms of the commands. For example, &lt;code&gt;:iabbreviate&lt;/code&gt; won't work; instead, use "abbrev", like in &lt;code&gt;:iabbrev&lt;/code&gt;, &lt;code&gt;:cabbrev&lt;/code&gt;, or &lt;code&gt;:iunabbrev&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use abbreviations for different purposes as shown in these different examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:iab @@ myemail@email.com&lt;/code&gt; - Insert your email&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:iab BTW by the way&lt;/code&gt; - Expand an acronym&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:iab sign Jane Doe™&amp;lt;cr&amp;gt;jane@doe.com&lt;/code&gt; - Insert your signature&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:iab &amp;lt;expr&amp;gt; cdate strftime('%Y-%m-%d')&lt;/code&gt; - Insert the &lt;code&gt;c&lt;/code&gt;urrent date&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:cab uuidgen r! uuidgen&lt;/code&gt; - Insert a UUID when running the command &lt;code&gt;:uuidgen&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, if you've typed an abbreviation but you don't want to expand it when hitting &lt;code&gt;SPACE&lt;/code&gt;, use &lt;code&gt;CTRL+v&lt;/code&gt; and then &lt;code&gt;SPACE&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help abbreviations&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saving-vims-options-and-mapping-in-a-file"&gt;
  &lt;/a&gt;
  Saving Vim's Options and Mapping in a File
&lt;/h2&gt;

&lt;p&gt;Let's now go into the crux of this article: persisting your current options, keystroke mappings, or your whole sessions into a file.&lt;/p&gt;

&lt;p&gt;If you were experimenting in Vim by changing a bunch of options and mappings but you don't remember what exactly, or if you wonder what command run when you hit a keystroke, you can output every option and global mappings (different from Vim's defaults) into a file.&lt;/p&gt;

&lt;p&gt;To do so, you can run the command &lt;code&gt;:mkexrc &amp;lt;filepath&amp;gt;&lt;/code&gt; or &lt;code&gt;:mk &amp;lt;file&amp;gt;&lt;/code&gt; to output these options and mappings into the file &lt;code&gt;&amp;lt;filepath&amp;gt;&lt;/code&gt;. If you use a relative path, it will be relative to the working directory you're in (to display it, use &lt;code&gt;:pwd&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can also add a bang &lt;code&gt;!&lt;/code&gt; to &lt;code&gt;:mk&lt;/code&gt; to overwrite a file. For example, &lt;code&gt;:mk! myfile&lt;/code&gt; will create the file &lt;code&gt;myfile&lt;/code&gt; or overwrite it if it already exists.&lt;/p&gt;

&lt;p&gt;From there, you can open the file you've written and copy whatever options or mapping you want in your vimrc. You can also source the file directly into another instance of Vim with the command &lt;code&gt;:source &amp;lt;filepath&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I've already written about the &lt;code&gt;:source&lt;/code&gt; command in &lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt; in order to reload your vimrc. You can source any file containing some Vimscript with this command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vim-sessions"&gt;
  &lt;/a&gt;
  Vim Sessions
&lt;/h2&gt;

&lt;p&gt;If you want to save and restore much more than options and global mappings, you can use Vim sessions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-loading-a-session"&gt;
  &lt;/a&gt;
  Creating and Loading a Session
&lt;/h3&gt;

&lt;p&gt;A session is constituted of all the views (a view is a collection of settings attached to a window) and the global settings of your current Vim instance.&lt;/p&gt;

&lt;p&gt;Wouldn't it be fun to save your session in a file and open it later in another Vim instance? It would allow you to recover all your buffers, windows, and local settings! Life would be even more colorful then.&lt;/p&gt;

&lt;p&gt;To do so, you can use the commands &lt;code&gt;:mksession &amp;lt;filepath&amp;gt;&lt;/code&gt; or &lt;code&gt;:mks &amp;lt;filepath&amp;gt;&lt;/code&gt;. You can then source the session in another instance of Vim with &lt;code&gt;:source &amp;lt;filepath&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As usual, you can add a bang &lt;code&gt;!&lt;/code&gt; to the command to overwrite the file if it already exists.&lt;/p&gt;

&lt;p&gt;For example, here are some mappings I've written in my &lt;code&gt;vimrc&lt;/code&gt; to manipulate sessions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;ss :mksession! $VIMCONFIG/sessions/&lt;/code&gt; - Mapping to &lt;code&gt;s&lt;/code&gt;ave a &lt;code&gt;s&lt;/code&gt;ession&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;sl :source $VIMCONFIG/sessions/&lt;/code&gt; - Mapping to &lt;code&gt;l&lt;/code&gt;oad a &lt;code&gt;s&lt;/code&gt;ession&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each time I press &lt;code&gt;LEADER ss&lt;/code&gt;, I can type the name of the session and save it. All my sessions are gathered in the same directory.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fine-tuning-vims-sessions"&gt;
  &lt;/a&gt;
  Fine Tuning Vim's Sessions
&lt;/h3&gt;

&lt;p&gt;The option &lt;code&gt;sessionoptions&lt;/code&gt; contains a bunch of values separated with comma &lt;code&gt;,&lt;/code&gt;. These values will decide what will be saved in your session file and, as a result, what will be restored when the file is sourced.&lt;/p&gt;

&lt;p&gt;Here are the most interesting values you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;blank&lt;/code&gt; - Save windows containing buffers without names.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;buffers&lt;/code&gt; - Save hidden and unloaded buffers. Only buffers in windows are restored without this value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;curdir&lt;/code&gt; - Save the current directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;folds&lt;/code&gt; - Save folds information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;globals&lt;/code&gt; - Save the global variables beginning with uppercase and containing at least one uppercase in their names.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; - Save the help windows.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;localoptions&lt;/code&gt; - Save local options and mappings to a window or a buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;options&lt;/code&gt; - Save all options and mappings.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resize&lt;/code&gt; - Save the size of your windows.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tabpages&lt;/code&gt; - Save all the tab open. Without this value, only the current tab is saved.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;terminal&lt;/code&gt; - Save the terminal window.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the default global options or global mappings are not saved in a session file. It means that if you have an instance of Vim open and you've already modified some default values, loading a session won't reset them to their defaults.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help :sessionoptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help views-sessions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help :mksession&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-files-viminfo-or-shada"&gt;
  &lt;/a&gt;
  The files viminfo or shada
&lt;/h2&gt;

&lt;p&gt;Vim also saves information automatically into a file when you close the editor. This file is different depending on what you're using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Vim, it's the viminfo file.&lt;/li&gt;
&lt;li&gt;For Neovim, it's the shada file (for &lt;code&gt;sh&lt;/code&gt;ared &lt;code&gt;da&lt;/code&gt;ta). It can't be a symlink.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On Unix systems (Linux and macOS), each file can be found at these file paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;viminfo - &lt;code&gt;$HOME/.viminfo&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;shada - &lt;code&gt;$XDG_DATA_HOME/nvim/shada/main.shada&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change the name for your shada or viminfo file by setting the value of &lt;code&gt;shadafile&lt;/code&gt; or &lt;code&gt;viminfofile&lt;/code&gt; respectively. You can also set the value &lt;code&gt;NONE&lt;/code&gt; if you don't want to use these files.&lt;/p&gt;

&lt;p&gt;Each time you close a Vim instance, you can save the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The command-line history.&lt;/li&gt;
&lt;li&gt;The search history.&lt;/li&gt;
&lt;li&gt;The input-line history.&lt;/li&gt;
&lt;li&gt;Contents of non-empty registers.&lt;/li&gt;
&lt;li&gt;Lowercase marks for several files.&lt;/li&gt;
&lt;li&gt;File marks (uppercase marks).&lt;/li&gt;
&lt;li&gt;Last search or substitute pattern.&lt;/li&gt;
&lt;li&gt;The buffer list.&lt;/li&gt;
&lt;li&gt;The global variables (only if they're different from the default values).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can configure what to save more precisely by changing the values of the following option:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Vim, the option &lt;code&gt;viminfo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For Neovim, the option &lt;code&gt;shada&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The option's values are separated with a comma &lt;code&gt;,&lt;/code&gt;. Here are the most useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;!&lt;/code&gt; - Save and restore global variables (their names should be without lowercase letter).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add a number after each of these values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt; - Specify the maximum of lines saved for each register. All the lines are saved if this is not included. If you don't want to save your registers, use the value &lt;code&gt;&amp;lt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; - Save and restore the buffer list. You can specify the maximum number of buffer stored with a number.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'&lt;/code&gt; - Specify the maximum number of marked files remembered. It also saves the jump list and the change list we saw in a &lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;previous article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt; - Number of search patterns and entries from the command-line history saved. The option &lt;code&gt;history&lt;/code&gt; is used if it's not specified.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f0&lt;/code&gt; - Don't store any uppercase mark.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - Specify the maximum size of an item's content in KiB (kilobyte).

&lt;ul&gt;
&lt;li&gt;For the viminfo file, it only applies to register.&lt;/li&gt;
&lt;li&gt;For the shada file, it applies to all items except for the buffer list and header.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, &lt;code&gt;:set shada=!,'100,&amp;lt;50,s100&lt;/code&gt; save global variables, a maximum of 100 files marked, a maximum of 50 lines per register, and a maximum of 100Kib for each item. The equivalent for vim would be &lt;code&gt;:set viminfo=!,'100,&amp;lt;50,s100&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vim writes the viminfo file when you close the editor, and it's loaded when you open a new instance. That said, you can also output, save, or load the file with these commands:&lt;/p&gt;

&lt;p&gt;For Vim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:oldfiles&lt;/code&gt; or &lt;code&gt;:ol&lt;/code&gt; - Display all marked files stored in the viminfo file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:rviminfo&lt;/code&gt; or &lt;code&gt;:rv&lt;/code&gt; - Read the viminfo file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:wviminfo&lt;/code&gt; or &lt;code&gt;:wv&lt;/code&gt; - Write the viminfo file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Neovim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:oldfiles&lt;/code&gt; or &lt;code&gt;:o&lt;/code&gt; - Display all files with a mark stored in the shada file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:rshada&lt;/code&gt; or &lt;code&gt;:rs&lt;/code&gt; -  Read the shada file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:wshada&lt;/code&gt; or &lt;code&gt;:ws&lt;/code&gt; - Write the shada file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a bang to these commands (&lt;code&gt;:rv!&lt;/code&gt; or &lt;code&gt;:rs!&lt;/code&gt; for example) to allow everything set in your file overwriting everything in your current Vim instance.&lt;/p&gt;

&lt;p&gt;The viminfo file is written in its one dialect. You can modify it directly if you feel even more adventurous. The shada file use the &lt;a href="https://msgpack.org/"&gt;messagepack&lt;/a&gt; format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help viminfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'viminfo'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'viminfofile'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#neovim-help"&gt;
  &lt;/a&gt;
  Neovim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help shada&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'shada'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'shadafile'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#redirections"&gt;
  &lt;/a&gt;
  Redirections
&lt;/h2&gt;

&lt;p&gt;What if you want to save the output of Vim commands in a file or in a register? The command &lt;code&gt;:redir&lt;/code&gt; is here to fulfill your desires. More precisely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:redir &amp;gt; &amp;lt;file&amp;gt;&lt;/code&gt; - Write every command's output to the file &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;:redir!&lt;/code&gt; (with a bang &lt;code&gt;!&lt;/code&gt;) to overwrite the file.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;gt;&lt;/code&gt; to append to the file.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:redir @&amp;lt;reg&amp;gt;&lt;/code&gt; - Write every command's output to the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:redir @&amp;lt;reg&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; - Append every command's output to the register &lt;code&gt;&amp;lt;reg&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:redir =&amp;gt; &amp;lt;var&amp;gt;&lt;/code&gt; - Write every command's output to the variable &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:redir END&lt;/code&gt; - End the redirection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you want to set the variable &lt;code&gt;sessionoptions&lt;/code&gt; in your &lt;code&gt;.vimrc&lt;/code&gt; with the current value, you can do something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:redir &amp;gt;&amp;gt; $VIMCONFIG/.vimrc
:set sessionoptions?
:redir END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running &lt;code&gt;:redir END&lt;/code&gt;, nothing more will be written into the file. You can only have one redirection going on, so declaring a new one will automatically close the previous one.&lt;/p&gt;

&lt;p&gt;Let's look at another example. You can run the following to append the declaration of the option &lt;code&gt;sessionoptions&lt;/code&gt; with the current value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:redir @+&amp;gt;&amp;gt;
:set sessionoptions?
:redir END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the uppercase version of the named registers (the ones from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;z&lt;/code&gt;) will append the output of Vim's commands without the need to use &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. For example, &lt;code&gt;:redir @A&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A final example, using a variable to store the output of the command this time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:redir =&amp;gt; my_var
:set sessionoptions?
:redir END
:echo my_var
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help :redir&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-commands-output"&gt;
  &lt;/a&gt;
  Filtering Commands Output
&lt;/h2&gt;

&lt;p&gt;It's nice to be able to save command output in Vim, but what if we want to filter them?&lt;/p&gt;

&lt;p&gt;To do so, we can use the command &lt;code&gt;:filter /&amp;lt;pattern&amp;gt;/ &amp;lt;cmd&amp;gt;&lt;/code&gt;: it will filter the command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; according to the pattern &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's take some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:filter /content/ buffers&lt;/code&gt; - Only output the buffers with part of the filepath matching &lt;code&gt;content&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:filter /archives/ oldfiles&lt;/code&gt; - Only output the marked files with part of the filepath matching &lt;code&gt;archives&lt;/code&gt;.
As you can see, the pattern doesn't have to match the whole line, only part of it. You can add a bang &lt;code&gt;!&lt;/code&gt; to the command &lt;code&gt;filter&lt;/code&gt; (&lt;code&gt;filter!&lt;/code&gt;) to inverse the match, that is, output everything which &lt;em&gt;doesn't match&lt;/em&gt; the pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This command doesn't work with all Ex commands. For example, it won't work with the command &lt;code&gt;:register&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:help :filter&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-step-vim-for-expert-users"&gt;
  &lt;/a&gt;
  Next Step: Vim for Expert Users
&lt;/h2&gt;

&lt;p&gt;What did we learn in this article?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use a new INSERT mode submenu with the keystroke &lt;code&gt;CTRL+x&lt;/code&gt; followed by another keystroke.&lt;/li&gt;
&lt;li&gt;You can use most keystrokes for INSERT mode in COMMAND-LINE mode. You can also use &lt;code&gt;CTRL+r&lt;/code&gt; with a second keystroke to copy what's in your buffer directly in your command-line.&lt;/li&gt;
&lt;li&gt;Abbreviations are meant to stop beating your keyboard because you can't stop doing the same spelling mistakes. It's not the only use case; the sky's the limit.&lt;/li&gt;
&lt;li&gt;You can source any file containing Vimscript commands using the command &lt;code&gt;:source&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can save the current settings of your Vim instance with &lt;code&gt;:mk &amp;lt;file&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can also save your current Vim session with the command &lt;code&gt;:mks &amp;lt;file&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every time you close Vim, your viminfo file is written (if the &lt;code&gt;viminfo&lt;/code&gt; options is not empty). If you use Neovim, the viminfo file is replaced with the shada file.&lt;/li&gt;
&lt;li&gt;Every time you open Vim, the viminfo file (or shada file) is read.&lt;/li&gt;
&lt;li&gt;You can use the redirection (command &lt;code&gt;:redir&lt;/code&gt;) to persist in files or registers the output of the different Vim commands.&lt;/li&gt;
&lt;li&gt;You can filter the output of some Vim commands using the command &lt;code&gt;:filter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout this series, we've seen many functionalities The Glorious Vanilla Vim offers us on a tasty platter. But the real power of Vim lies in its flexibility. That's why in the next article, Vim for Expert Users, we'll become Apprentice Gods (or Goddesses) and look at different ways to shape our Vim world according to our deeper needs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#becoming-mouseless"&gt;
  &lt;/a&gt;
  Becoming Mouseless
&lt;/h2&gt;

&lt;p&gt;Do you want to build a &lt;a href="https://themouseless.dev"&gt;Mouseless Development Environment&lt;/a&gt; where the Linux shell and Vim have a central role?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themouseless.dev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkZumQAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themouseless.dev/images/small_cover.webp" alt="building your mouseless development environment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Switching between the keyboard and the mouse costs cognitive energy. This book will guide you step by step to set up a Linux-based development environment that keeps your hands on your keyboard.&lt;/p&gt;

&lt;p&gt;Take the brain power you've been using to juggle input devices and focus it where it belongs: on what you create.&lt;/p&gt;




</description>
      <category>vim</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to become an AWS Community Builder</title>
      <author>Stephen Sennett</author>
      <pubDate>Tue, 17 Aug 2021 15:09:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-become-an-aws-community-builder-2m79</link>
      <guid>https://dev.to/aws-builders/how-to-become-an-aws-community-builder-2m79</guid>
      <description>&lt;p&gt;You're an ambitious but humble person, with a hunger to learn. You're passionate about sharing the power of cloud computing with the world and meeting others who feel the same. You may also feel uncertain if really 'good enough' for this program or where to get started.&lt;/p&gt;

&lt;p&gt;Don't worry; there are hundreds of us out there. In fact, we even have a name for ourselves.&lt;/p&gt;

&lt;p&gt;Welcome, you're a potential AWS Community Builder! And this is the resource I wish I'd had when I first considered applying.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-you-apply"&gt;
  &lt;/a&gt;
  How do you apply?
&lt;/h1&gt;

&lt;p&gt;Applications are open twice a year by AWS and can be made on the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builder&lt;/a&gt; page; the best and most up-to-date resource on the process. The application will ask for information both about yourself and your involvement in the AWS Community.&lt;/p&gt;

&lt;p&gt;Prospective Community Builders from backgrounds not traditionally represented in the tech sector are highly encouraged to apply!&lt;/p&gt;

&lt;p&gt;This is also a great stepping stone for anyone who wants to progress in the AWS Community. While there's no formal pathway or shortcuts for anyone asking "How to become an AWS Hero?" becoming a Community Builder is an excellent place to start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-they-looking-for"&gt;
  &lt;/a&gt;
  What are they looking for?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvFkpeAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du2w9tv8pb5id37jliwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvFkpeAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du2w9tv8pb5id37jliwh.png" alt="AWS Community Builder Swag laid out on a desk, including a hat, insulated mug, and card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's no secret, and the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builder&lt;/a&gt; page explains it best:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"AWS enthusiasts and emerging thought leaders who are passionate about sharing knowledge and connecting with the technical community"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No specific criteria are set, so don't worry about needing to publish ten blog posts, shot five YouTube videos, requiring three years of industry experience, or anything like that. Some people aren't the best at particular things, and that's okay.&lt;/p&gt;

&lt;p&gt;Conversely, there's also no shortcut criteria. It's not enough simply to have spent years building on AWS, nor to have attained any number of certifications.&lt;/p&gt;

&lt;p&gt;The key is that they want people eager to share their excitement and passion for all things AWS with the wider community.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-should-i-do-to-get-involved"&gt;
  &lt;/a&gt;
  What should I do to get involved?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfFQtID5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5g1ndd6bju21nzysx4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfFQtID5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5g1ndd6bju21nzysx4c.png" alt="Banner Collage of photos: 1) The author presenting a video to a camera, 2) Writing a blog post on a laptop at a coffee shop, 3) The author giving a talk on a stage, 4) Electronic components being used to build something on a desk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even with a passion for sharing your knowledge and enthusiasm for AWS, it can be hard to know where to start. &lt;/p&gt;

&lt;p&gt;There's no "one thing" that's best to do, and nothing guarantees acceptance into the program. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#volunteer"&gt;
  &lt;/a&gt;
  🤚 Volunteer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/usergroups/"&gt;AWS User Groups&lt;/a&gt; and similar meetups are a great way to get involved in the AWS Community and meet others interested in your local area.&lt;/p&gt;

&lt;p&gt;This doesn't mean you need to create or lead a group on your own. Most groups are happy to have others willing to help, and an excellent place to start is talking with the organizers. This could be helping set up the venue, working with sponsors, organizing catering, or coordinating speakers. Which brings us to the next idea...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-speaking"&gt;
  &lt;/a&gt;
  📣 Public Speaking
&lt;/h2&gt;

&lt;p&gt;Meetup Groups are absolutely crying out for more speakers for their events, and in the pandemic era of virtual meetups, your options are more varied than ever, with meetups around the world.&lt;/p&gt;

&lt;p&gt;Most groups don't need you to be an expert or a veteran keynote speaker. Identify topics you're knowledgeable and experienced in and projects you can discuss as a starting point.&lt;/p&gt;

&lt;p&gt;Reach out to the organizers of Meetup groups, and chat with them. Most are very willing to work with you to find a topic their audience would be interested in. Don't worry if this isn't the option for you; there are plenty of others!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  ✍️ Blogging
&lt;/h2&gt;

&lt;p&gt;Sharing your ideas through blogging is another brilliant way to get involved in the AWS Community and far less intimidating. And with platforms like &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt;, it's easier than ever to get started.&lt;/p&gt;

&lt;p&gt;Here are a few topics you might blog about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Answer a question you've had to solve yourself&lt;/strong&gt; - Found a tricky 'gotcha' that AWS doesn't make clear in their documentation? Chances are other people have had that question too&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Review a new AWS service&lt;/strong&gt; - New services get released every other week, and most people don't get a chance to try them. Give it a try, and share your initial thoughts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Share your experience from a project&lt;/strong&gt; - Even a somewhat dull project is a learning opportunity. You may have run into limitations when using CloudFormation, which meant you had to use Terraform. This lesson might benefit others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideas that are worth sharing should be shared. It's also a great way to build your professional writing skills. Writing a guide on making an S3 bucket isn't contributing knowledge to the AWS Community, but how you may have used it to store static objects on your company's website to save money has valuable outcomes for the readers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reddit-and-forums"&gt;
  &lt;/a&gt;
  💻 Reddit and Forums
&lt;/h2&gt;

&lt;p&gt;Not everything you write needs to be an article, and helping people on Reddit is also really useful.  Subreddits like &lt;a href="https://reddit.com/r/aws"&gt;/r/aws&lt;/a&gt; are both a great place to share your knowledge and learn from others.&lt;/p&gt;

&lt;p&gt;Participating in discussions also opens your mind to other scenarios beyond what you might deal with in your day job. Helping others is a great way to expand your own knowledge.&lt;/p&gt;

&lt;p&gt;Beyond just Reddit, there's also other sites like &lt;a href="https://stackoverflow.com/"&gt;Stack Overflow&lt;/a&gt;, &lt;a href="https://www.spiceworks.com/"&gt;Spiceworks&lt;/a&gt;, or the &lt;a href="https://forums.aws.amazon.com/"&gt;AWS Forums&lt;/a&gt; which are great ways to share your knowledge with others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  📱 Social Media
&lt;/h2&gt;

&lt;p&gt;We also have a great opportunity to share our thoughts and learn from each other through social media, including some of the titans of our industry.&lt;/p&gt;

&lt;p&gt;Twitter and LinkedIn are the two most popular platforms, with many people posting with the hashtags &lt;code&gt;#aws&lt;/code&gt; or &lt;code&gt;#awscommunity&lt;/code&gt;. The community also extends to other platforms like Facebook, Instagram, and even TikTok (&lt;a href="https://www.tiktok.com/@forrestbrazeal/?"&gt;Forrest Brazeal's cloud tunes&lt;/a&gt; get stuck in my head for weeks at a time...)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  🎥 YouTube
&lt;/h2&gt;

&lt;p&gt;Looking for an excuse to start your own YouTube Channel? Here you go! Along with being a great way to share your knowledge, it's also a great way to learn a new skill set in producing videos.&lt;/p&gt;

&lt;p&gt;The types of content you can create are endless, from demonstrations of processes to building complete projects, short web series, or routine vlogs about your experiences in cloud technology.&lt;/p&gt;

&lt;p&gt;If you've never made a YouTube video before, check out this &lt;em&gt;outstanding&lt;/em&gt; guide from my friend and Azure MVP, Gwyneth Peña-Siguenza, and her &lt;a href="https://github.com/madebygps/7-day-youtube-starterkit"&gt;7-day-cloud-youtube-starterkit&lt;/a&gt;, walking you through the steps to your first video. Don't worry about lots of fancy equipment; you can make do with a half-decent phone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-podcast"&gt;
  &lt;/a&gt;
  🎙 Podcast
&lt;/h2&gt;

&lt;p&gt;Another great option if you'd rather not be on camera. This could either be hosting your own podcast or being a guest on podcasts hosted by others.&lt;/p&gt;

&lt;p&gt;If you know of any great podcasts on cloud technology, reach out to the hosts; there's usually a link in the show notes if they're looking for guests. Some sites also help podcasters find guests for their shows, which can help you connect to show hosts.&lt;/p&gt;

&lt;p&gt;If you're interested in hosting your own, find a niche, and plan out your first few episodes. Identify friends and colleagues who may be interested in becoming guests for an episode. They also don't need to be hour-long episodes, and you might favour shorter lightning talk discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-things"&gt;
  &lt;/a&gt;
  🛠️ Build things
&lt;/h2&gt;

&lt;p&gt;This isn't just about building things on AWS as part of your day job, although that can provide lessons worth sharing. Build things in the cloud as part of your side projects, and share them with the community.&lt;/p&gt;

&lt;p&gt;These could be publicly available services that help others, built on AWS technologies. Tools that you use to make building in the cloud easier, that you make available as open source to share with others. You might even work to document open source projects relating to AWS.&lt;/p&gt;

&lt;p&gt;Unsure where to start? Chat with others who may already be doing similar work.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#can-i-ask-anyone-for-advice"&gt;
  &lt;/a&gt;
  Can I ask anyone for advice?
&lt;/h1&gt;

&lt;p&gt;Of course! One of the best resources is to chat with AWS Community Builders. There's plenty of us out there, and you may already know some! &lt;/p&gt;

&lt;p&gt;Search LinkedIn for any AWS Community Builders in your network, and reach out. You may also know Community Builders through your local AWS User Group or other Meetups.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-if-i-dont-get-in"&gt;
  &lt;/a&gt;
  What if I don't get in?
&lt;/h1&gt;

&lt;p&gt;The program is competitive, and not everyone will be accepted on their first application. And that's okay.&lt;/p&gt;

&lt;p&gt;Applications rounds reopen twice a year, so there will be more opportunities. Using some of the tips from the article and advice from other Community Builders, you can also strengthen your application next time. &lt;strong&gt;Your chance of success only ever improves.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's only one surefire way to know if you'll succeed, and that's to apply.&lt;/p&gt;

&lt;p&gt;Every one of us is excited to welcome you! 🙌&lt;/p&gt;

</description>
      <category>aws</category>
      <category>career</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Como fazer perguntas sobre códigos e lidar com as respostas, um guia prático</title>
      <author>Felippe Regazio</author>
      <pubDate>Tue, 17 Aug 2021 14:56:11 +0000</pubDate>
      <link>https://dev.to/felipperegazio/como-fazer-perguntas-sobre-codigos-e-lidar-com-as-respostas-um-guia-pratico-1cf7</link>
      <guid>https://dev.to/felipperegazio/como-fazer-perguntas-sobre-codigos-e-lidar-com-as-respostas-um-guia-pratico-1cf7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#como-fazer-perguntas-sobre-c%C3%B3digos-e-lidar-com-as-respostas"&gt;
  &lt;/a&gt;
  Como fazer perguntas sobre códigos e lidar com as respostas
&lt;/h1&gt;

&lt;p&gt;Pro resto da sua vida vc como dev vc esbarrará em coisas que vc não faz A MENOR ideia nem de por onde começar. Como vc conduzirá essa situação definirá muito o tipo de profissional que vc é e será. A maneira que vc colocará os problemas, os organizará e os apresentará aos outros deve ser vista como parte da solução de um problema. Então vamos a alguns pontos importantes:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-identifique-a-raiz-da-d%C3%BAvida"&gt;
  &lt;/a&gt;
  1. Identifique a raiz da dúvida
&lt;/h2&gt;

&lt;p&gt;Vc pegou a task mas não entendeu a descrição? Então não adianta perguntar pro Dev ao lado "hey, não sei como fazer isso, pode me ajudar?". Mesmo que ele te explique vc não entenderá, pq vc não compreendeu nem o que é pra fazer, que dirá como fazer.&lt;/p&gt;

&lt;p&gt;Não tem problema em não compreender briefing. Tem problema em fingir que compreendeu, tentar se virar e ficar travado/a. Vc leu que é pra fazer algo no login mas não sabe "que login?", pergunte. Falta info na descrição? Avise. Realmente não entendeu, pergunte pro Lead, PM, PO...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cuidado-com-a-batata-quente"&gt;
  &lt;/a&gt;
  2. Cuidado com a "Batata quente"
&lt;/h2&gt;

&lt;p&gt;Imaginemos então que vc pegou uma task: mostrar uma mensagem nova após o login. Vc puxou a task, entendeu o briefing, começou a codar, mas de repente nada faz sentido. Nada funciona. Aqui é onde muito iniciante comete o primeiro erro: Repassar a task inconscientemente.&lt;/p&gt;

&lt;p&gt;Muitas vezes o reflexo do Dev é chamar um colega e dizer: "Preciso mostrar uma mensagem após o login mas não to conseguindo, como eu poderia fazer?". &lt;/p&gt;

&lt;p&gt;Isso não é uma dúvida, isso é repassar a task. A pessoa basicamente te dirá como trabalhar.&lt;/p&gt;

&lt;p&gt;Repassar inconscientemente a task no começo é SUPER OK. Beleza vc estar perdido e pedir ajuda. Mas se isso começa a ficar recorrente, daí é melhor seguir os proximos passos:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primeiro-identifique-seu-problema"&gt;
  &lt;/a&gt;
  Primeiro identifique seu problema
&lt;/h3&gt;

&lt;p&gt;Vc não consegue começar pq não sabe em que arquivo mexer? Não sabe que função utilizar? Sabe os arquivos mas na hora de mostrar a mensagem não sabe fazer o modal? Ou tem alguma lib pra mostrar a mensagem e vc não sabe?&lt;/p&gt;

&lt;p&gt;Essas são duvidas reais. Veja que aí a forma de construir sua duvida mudaria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hey, preciso mostar uma mensagem após o login mas nao sei em que arquivo ou função ele está, pode me mostrar?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ou&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To dando um console log pq não sei fazer o modal, ou se devo usar lib, poderia me dar uma luz?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ou seja, antes de declarar pra alguem que vc nao faz IDEIA NENHUMA DO QUE FAZER e precisa de ajuda pra dar baby steps, vale mais a pena tentar, olhar pra si mesmo e pensar: o que exatamente não to conseguindo fazer. Faça uma pergunta depois da outra se precisar, no prob.&lt;/p&gt;

&lt;p&gt;Veja ainda que nao to falando que vc não pode pedir pra alguem te mostrar algo por inteiro. To falando pra isso não virar modus operandi pq a equipe vai sacar. Tente fazer primeiro, entenda suas proprias dificuldades, liste-as e peça ajuda de forma objetiva, e não "socorro". Dessa forma vc ajuda a si mesmo a aprender, e ajuda a equipe a te ajudar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-tenha-ownership-da-sua-tarefa"&gt;
  &lt;/a&gt;
  3. Tenha ownership da sua tarefa
&lt;/h2&gt;

&lt;p&gt;Digamos então que vc entendeu o briefing, fez a tarefa, pediu ajuda, subiu a task e DEU UM BUG.&lt;/p&gt;

&lt;p&gt;A pior coisa que vc pode fazer ao ser informado do bug é dizer: "Mas eu fiz do jeito que fulano me falou pra fazer".&lt;/p&gt;

&lt;p&gt;Informe de bug não é culpabilização. Se alguem te informa um bug, vc escuta e resolve. Fim. &lt;/p&gt;

&lt;p&gt;Às vezes vc pode dizer isso sem ser por mal, mas é como tentar responsabilizar o outro por uma consequencia inexistente ainda por cima.&lt;/p&gt;

&lt;p&gt;Se vc faz uma task, pede ajuda e depois diz "mas fiz do jeito que fulano falou pra fazer" se algo errado ocorre, provavelmente a pessoa que te ajudou vai pensar 10x antes de te ajudar de novo. Mesmo que não dê em nada. Lembre-se: vc pode pedir ajuda mas a task é sua.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-pe%C3%A7a-por-um-pair-programming"&gt;
  &lt;/a&gt;
  4. Peça por um Pair Programming
&lt;/h2&gt;

&lt;p&gt;Digamos que realmente vc não consegue organizar a sua cabeça, vc tem ownership da task, não quer responsabilizar ngm, mas simplesmente não vai, vc não faz ideia, precisa pedir pra alguem desensroscar: PEÇA UM PAIR.&lt;/p&gt;

&lt;p&gt;Se realmente a coisa não desenrosca e vc ta mais perdido que cego em tiroteio, ao inves de mandar uma mensagem ou cutucar o outro e pedir implicitamente pra "te explicar como fazer sua task", peça um pair: dentre outras coisas é pra isso que serve pair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-seja-francoa-na-duvida"&gt;
  &lt;/a&gt;
  5. SEJA FRANCO/A na duvida
&lt;/h2&gt;

&lt;p&gt;Não faça perguntas fingindo saber mais do que vc realmente sabe, ou com vergonha. Ta tudo bem perguntar. Precisa de um pair e ta perdido/a, pode falar: Hey, pareia comigo pq to enroscado/a aqui e realmente não sei o que fazer. A pessoa ja vai preparada.&lt;/p&gt;

&lt;p&gt;Se o que vc tem é uma duvida pontual, seja franco/a: Hey, li a documentação do useState do React, fiz o que tava lá, experimentei umas coisas mas a task nãos ai, ta bugando, acho que nao entendi, me ajuda?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Se vc tiver um time legal, o time vai te acolher e vcs todos vão crescer juntos com as duvidas e dando apoio um para o outro, sem deformações de ownership, sem sentimento de culpa, simplesmente por: saber como perguntar. Thats all folks.&lt;/p&gt;

&lt;p&gt;Cover image by NeONBRAND on Unsplash.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>showdev</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Write Simple Unit Tests in JavaScript with Mocha and Chai </title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 17 Aug 2021 14:52:57 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-write-simple-unit-tests-in-javascript-with-mocha-and-chai-3e30</link>
      <guid>https://dev.to/ubahthebuilder/how-to-write-simple-unit-tests-in-javascript-with-mocha-and-chai-3e30</guid>
      <description>&lt;p&gt;In this article, I will give a simple illustration of what unit testing is as well as show you how to unit test functions in JavaScript with Mocha and Chai.&lt;/p&gt;

&lt;p&gt;Before we dive into the technical part of Unit testing, let’s consider a scenario:&lt;/p&gt;




&lt;p&gt;Imagine that you are helping your little sibling work on her assignment. In her assignment, she is told to mix together a group of colours which will eventually rise to the Green colour. &lt;/p&gt;

&lt;p&gt;After doing a bit of research, you find out that a mixture of blue, red and green paint will eventually give rise to the black colour.&lt;/p&gt;

&lt;p&gt;You proceed to the store to buy the three colours of paint you need. Each of the paint is stored in a translucent container which has the colour as it’s label. Now you can just start mixing up the three colours. You have to be sure that each colour (aka unit) is the right shade needed. So, you drop test each colour by dropping a little on white cloth and inspecting it’s look. &lt;/p&gt;

&lt;p&gt;If that particular colour matches to your desired colour, then that test is said to be passed. If not, then the test has failed. If all tests passed, which means that all a colours are correct, then you can be rest assured that mixing together the three of them will indeed give rise to black.&lt;/p&gt;

&lt;p&gt;You can say that the black is made up of 3 units: The green, the blue and the red. Before mixing up the three colours and submitting the homework, you made sure to test every of it’s unit to make sure it gives the expected output.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#unit-testing-in-software-development"&gt;
  &lt;/a&gt;
  UNIT TESTING IN SOFTWARE DEVELOPMENT
&lt;/h4&gt;

&lt;p&gt;Before any software is released into the market, it has to be vigorously tested.&lt;/p&gt;

&lt;p&gt;Software testing is the process of examining for the accuracy, completeness and quality of computer software before it gets released to the market. It is geared towards checking for errors(bugs) and fixing those errors.&lt;/p&gt;

&lt;p&gt;Unit testing is the most foundational level of software testing. In this level of testing, individual functionality, modules, procedures or even lines of code within the larger application are tested in isolation to make sure they work correctly or give the expected output on their own.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-is-unit-testing-important"&gt;
  &lt;/a&gt;
  WHY IS UNIT TESTING IMPORTANT?
&lt;/h4&gt;

&lt;p&gt;Running unit tests gives you a very granular perspective of how your application works. Since you understand how the individual pieces work on its own, you have far more control over your application. &lt;/p&gt;

&lt;p&gt;At that level, it is far easier to change or integrate more functionality because it is at a very basic level.&lt;/p&gt;

&lt;p&gt;Unit tests are also faster to perform, faster than other levels of testing. Since you are testing very minute units, and not interconnected parts or even whole systems,  you can run lots of tests in a very short amount of time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unit-testing-in-javascript"&gt;
  &lt;/a&gt;
  UNIT TESTING IN JAVASCRIPT
&lt;/h4&gt;

&lt;p&gt;In JavaScript, you can run unit test on individual modules. Unit tests can be run using test frameworks. Some of the most popular testing frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mocha (with Chai)&lt;/li&gt;
&lt;li&gt;Jest&lt;/li&gt;
&lt;li&gt;Jasmine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and many others.&lt;/p&gt;

&lt;p&gt;All of these frameworks are basically the same. Whatever difference they may have lies mostly in their syntax.  Most of these testing frameworks use the expect syntax. Expect is a popular language for making test assertions.&lt;/p&gt;

&lt;p&gt;Chai is an assertion library which supports the Expect syntax.&lt;/p&gt;

&lt;p&gt;Here are some of the main methods supported by Chai. Here you pass in the actual values—as returned by the module/function—to expect() and use the following&lt;br&gt;
methods to compare those returned values with your expected values which you hardcoded in the tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Expects the value to be equal with JavaScript’s triple equal sign === (checks for value and type, not just value)&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Expects the value to be deep-equal&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Expects obj to have property (b) either on it or on the prototype object&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;own&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Expects obj  to have property (b) physically defined in it&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;have&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Expects obj  to have any of the keys (b or c) defined on it&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Expects value to be of string type&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Expects value to be of object type&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;null&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Expects value to be of null type&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// Expects value to be undefined type&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;an&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Expects value to be of Error type&lt;/span&gt;

&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Expects value to be of promise type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can visit the  &lt;a href="https://www.chaijs.com/api/bdd/"&gt;Chai API documentation&lt;/a&gt;  to see the full BDD syntax and test combinations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-your-testing-project"&gt;
  &lt;/a&gt;
  SETTING UP YOUR TESTING PROJECT
&lt;/h4&gt;

&lt;p&gt;To start this project, you need to have node and npm installed. You can install them here. Next, we will need to initialize our project.&lt;/p&gt;

&lt;p&gt;To do this, we go to the command line and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;project&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create a project named project-name (replace with your own name) inside the current directory. If you already have a directory you want to use instead, navigate to that folder and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running any of those two commands will generate a package.json file for your project. Go with the default options and skip some of the fields don’t understand.&lt;/p&gt;

&lt;p&gt;Next, we are going to install our test frameworks. In this tutorial, we will be using Mocha and Chai.&lt;/p&gt;

&lt;p&gt;To install both these frameworks, we go over to our command line and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install –-save -dev mocha chai
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The –save-dev flag is used to install them as a dev dependency, because we will not be using the tests in production mode, just when developing. You typically install test frameworks as a dev dependency.&lt;/p&gt;

&lt;p&gt;With our dependencies now all set, we have to create two folders in the root directory:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/libraries&lt;/code&gt;: This folder will contain the modules/functions we want to unit test&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/test&lt;/code&gt;: This folder will contain the corresponding tests for each of the modules we want to test&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s now time to write some tests!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unit-test-example-with-mocha"&gt;
  &lt;/a&gt;
  UNIT TEST EXAMPLE WITH MOCHA
&lt;/h4&gt;

&lt;p&gt;Our first test will be to test for the strict equality of a function’s return value. We do this with &lt;code&gt;to.be.equal()&lt;/code&gt; method. In this test, we create a function which takes in a word and returns it in uppercase. &lt;/p&gt;

&lt;p&gt;First we need to create the module in the libraries folder of our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* FOLDER

/libraries/capitalize.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to write a test for this module. This test checks to see if the capitalized name returned by the above module is strictly equal to the expected value. &lt;/p&gt;

&lt;p&gt;First we will need to import the module we want to unit test, and then we also import the Expect utility from chai.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../libraries/capitalize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;expect&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#capitalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capitalizes the first word in a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HELLO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="cm"&gt;/* FOLDER

/test/capitalize.test.js
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You are have probably already made what does constructs do, but in case you are feeling a bit lost, let me break it down a bit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Describe()&lt;/code&gt; is used to define  the test suite, which is just a set of tests we are going to run together&lt;/p&gt;

&lt;p&gt;&lt;code&gt;It()&lt;/code&gt;  is used to create and describe a test case, describing what that case is going to test for.&lt;/p&gt;

&lt;p&gt;Also, the capitalize.test.js is a naming convention for tests. That is, the test.js is added to the actual name of the module to be tested, which in this case is &lt;code&gt;capitalize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, we need run the test. To do this, we navigate to our project directory and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;node_modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;mocha&lt;/span&gt;


&lt;span class="c1"&gt;// This should return the following result on the command line:&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;
    &lt;span class="nx"&gt;ÔêÜ&lt;/span&gt; &lt;span class="nx"&gt;capitalizes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;


  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;passing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* This indicates that the test was passed and the value returned by capitalize is strictly equal  (===) to the value we passed.*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming we altered the expected value a bit, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#capitalize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;capitalizes the first word in a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HALLO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the same command will give the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;capitalizes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;


  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;passing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;failing&lt;/span&gt;

  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;
       &lt;span class="nx"&gt;capitalizes&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

      &lt;span class="nx"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HELLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;equal&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HALLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;actual&lt;/span&gt;

      &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;HELLO&lt;/span&gt;
      &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;HALLO&lt;/span&gt;

      &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;anonymous&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="nx"&gt;processImmediate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;timers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;456&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* This indicates that the test had failed. Why? Because HELLO is not strictly equal to HALLO (HELLO !==HALLO)*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The error information returned also provides us with detailed info about what actually went wrong and the precise line number where we can find the problem in our script.&lt;br&gt;
Now, you don’t have to run the following command on your terminal anytime you want to execute a test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;node_modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;mocha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can easily automate this task by inserting the following script into your package.json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a simple test tutorial with mocha and chai &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley uabh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ISC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.3.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mocha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^9.0.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//BEFORE EDITING&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a simple test tutorial with mocha and chai &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node_modules/.bin/mocha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;testing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley uabh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ISC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.3.4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mocha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^9.0.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;After&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Replace&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;inside&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we can run simple unit tests with a testing framework like Mocha and Chai. You can use other kinds of assertions to create a wide variety of tests.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  WRAPPING UP
&lt;/h4&gt;

&lt;p&gt;Software testing is a very important process which all applications must go through before getting released to end users.&lt;/p&gt;

&lt;p&gt;Unit testing is the most basic level of software testing. It involves the testing of an isolated chunk of functionality or procedure to make sure that it behaves the way it is expected to.&lt;/p&gt;

&lt;p&gt;In JavaScript, unit testing can be carried out with testing frameworks. One of the popular choice for that is Mocha. Mocha is usually used alongside Chai to implement BDD assertions.&lt;/p&gt;

&lt;p&gt;I hope you got something useful from this article. &lt;/p&gt;

&lt;p&gt;YOU MIGHT ALSO LIKE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/user-authentication-vs-user-authorization-what-do-they-mean-in-back-end-web-development"&gt;User Authentication vs User Authorization, what's the difference?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ubahthebuilder.tech/what-are-object-prototypes-explaining-prototype-inheritance-to-a-five-year-old"&gt;All You Need to Know Object Prototypes&lt;/a&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and see you soon.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating a custom progress indicator </title>
      <author>Daniel Ko</author>
      <pubDate>Tue, 17 Aug 2021 14:30:10 +0000</pubDate>
      <link>https://dev.to/danko56666/creating-a-custom-progress-indicator-346e</link>
      <guid>https://dev.to/danko56666/creating-a-custom-progress-indicator-346e</guid>
      <description>&lt;p&gt;Disclaimer: I figured I add this just in case some people get confused. The images are cropped images and the actual widget is just the circle part and not the rectangle with rounded corners.&lt;/p&gt;

&lt;p&gt;    Hello! Today, I will be covering something I recently encountered in a project that I thought I'd share on what I learned and hopefully you guys can learn from it too! I will be going over how to create a custom progress indicator. Bad title and bad intro aside, this is an example of what I am referring to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_m-gESha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KnbQKSr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_m-gESha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KnbQKSr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this blog, I am assuming you have basic knowledge of Flutter widgets and won't go into details of everything. Custom Paint will be the main focus here. Also, before I dive into this, feel free to checkout the project I'm working on here: &lt;a href="https://github.com/Dan-Y-Ko/Flutter-Dart-Playground/tree/master/flutter/ui/banking_app_ui"&gt;https://github.com/Dan-Y-Ko/Flutter-Dart-Playground/tree/master/flutter/ui/banking_app_ui&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core-widgets-involved"&gt;
  &lt;/a&gt;
  Core Widgets involved
&lt;/h2&gt;

&lt;p&gt;The widgets that are used are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container&lt;/li&gt;
&lt;li&gt;Stack&lt;/li&gt;
&lt;li&gt;CustomPaint&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The basics
&lt;/h2&gt;

&lt;p&gt;    First we want to create the actual circle. To do this we can use simple container. But, we also want to overlap with our custom progress indicator so we will need to wrap it in a stack as well. The code should look like the following (it should be straightforward):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromARGB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;copyWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;scaffoldBackgroundColor:&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;80.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSFtoD2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8flWVz3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSFtoD2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/8flWVz3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#deep-dive-on-custom-paint"&gt;
  &lt;/a&gt;
  Deep dive on Custom Paint
&lt;/h2&gt;

&lt;p&gt;    This is where things get fun! I hope you remember your trigonometry and your unit circle (just kidding, Google is around). I just want to add a disclaimer that you can literally create anything with Custom Paint and going over every single possible scenario would end up being quite a long blog so I am only covering one aspect of it.&lt;/p&gt;

&lt;p&gt;    The main thing a Custom Paint widget should take is a Custom Painter implementation.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-create-custom-painter"&gt;
  &lt;/a&gt;
  How to create Custom Painter?
&lt;/h3&gt;

&lt;p&gt;Custom Painter implementation will consist of the following as a base:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extending Custom Painter class&lt;/li&gt;
&lt;li&gt;implement paint method&lt;/li&gt;
&lt;li&gt;implement shouldRepaint method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before going over paint method, let's go over what shouldRepaint is. It is essentially as it sounds. It returns a boolean value and if we want to create a new instance of this Custom Painter, we should return true. We do not need this however, so we will set it to false in this example.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#breaking-down-the-paint-method"&gt;
  &lt;/a&gt;
  Breaking down the paint method
&lt;/h3&gt;

&lt;p&gt;The paint method takes in a size and uses the Canvas to do the actual drawing. To learn more about the different things you can create, have a look here: &lt;a href="https://api.flutter.dev/flutter/dart-ui/Canvas-class.html"&gt;https://api.flutter.dev/flutter/dart-ui/Canvas-class.html&lt;/a&gt;. There are many things you can create: rectangle, circle, lines, and even custom paths. For this example we will be focusing on Arc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 2&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="c1"&gt;// 3&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;
      &lt;span class="c1"&gt;// 4&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrokeCap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;butt&lt;/span&gt;
      &lt;span class="c1"&gt;// 5&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PaintingStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stroke&lt;/span&gt;
      &lt;span class="c1"&gt;// 6&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// 7&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 8&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawArc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;center:&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;radius:&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;As mentioned, we are creating an Arc so the drawArc method is used. The 1st argument is a Rect class, from which there are several options but we want a Circle and Rect.fromCircle will give us that effect. The other arguments will be discussed in a bit. The second argument specifies where we want the arc to start. The third argument specifies where we want the arc to end. The fourth argument specifies if we want to use the center to connect the arc to. This would create a line from the border to the center, which we do not want. The fifth argument is something created from the Paint class which will be discussed in a bit. Have a look here for reference: &lt;a href="https://api.flutter.dev/flutter/dart-ui/Canvas/drawArc.html"&gt;https://api.flutter.dev/flutter/dart-ui/Canvas/drawArc.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The Paint class is responsible for the visual effects of our custom progress indicator. This needs to get passed into the drawArc method.&lt;/li&gt;
&lt;li&gt;This gives the color.&lt;/li&gt;
&lt;li&gt;There are several options here, and what we choose here will decide what the "ends" of the arc will look like. For example, StrokeCap.round will cap our arc with a circle. I'm really not sure how else to explain so if you're still confused, have a look here: &lt;a href="https://api.flutter.dev/flutter/dart-ui/StrokeCap-class.html"&gt;https://api.flutter.dev/flutter/dart-ui/StrokeCap-class.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We can use either fill or stroke here. We want to paint the color over a specific width only so we will use stroke in this example.&lt;/li&gt;
&lt;li&gt;This goes hand in hand with #5 and determines the thickness of the stroke. We want to specify the width to go along with PaintingStyle.stroke.&lt;/li&gt;
&lt;li&gt;Offset specifies specific points on x and y axis respectively. This center value gets passed into Rect.fromCircle.&lt;/li&gt;
&lt;li&gt;We get the radius by subtracting the width of the entire circle and the width of the "border". This radius value gets passed into Rect.fromCircle.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before going into startAngle and sweepAngle, this is what your code should look like so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import 'dart:math' as math;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromARGB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;copyWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;scaffoldBackgroundColor:&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;//     required this.startAngle,&lt;/span&gt;
&lt;span class="c1"&gt;//     required this.endAngle,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//   final double startAngle;&lt;/span&gt;
&lt;span class="c1"&gt;//   final double endAngle;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;80.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;CustomPaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;painter:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;//               startAngle: startAngle,&lt;/span&gt;
&lt;span class="c1"&gt;//               sweepAngle: endAngle,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;size:&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorPainter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;//     required this.startAngle,&lt;/span&gt;
&lt;span class="c1"&gt;//     required this.sweepAngle,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//   final double startAngle;&lt;/span&gt;
&lt;span class="c1"&gt;//   final double sweepAngle;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrokeCap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;butt&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PaintingStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stroke&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//     canvas.drawArc(&lt;/span&gt;
&lt;span class="c1"&gt;//       Rect.fromCircle(center: center, radius: radius),&lt;/span&gt;
&lt;span class="c1"&gt;//       startAngle,&lt;/span&gt;
&lt;span class="c1"&gt;//       sweepAngle,&lt;/span&gt;
&lt;span class="c1"&gt;//       false,&lt;/span&gt;
&lt;span class="c1"&gt;//       paint,&lt;/span&gt;
&lt;span class="c1"&gt;//     );&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;shouldRepaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="n"&gt;oldDelegate&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to comment out the code same place as I have or you will have errors.&lt;/p&gt;

&lt;p&gt;The output should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6pd398rC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NhVFKjK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pd398rC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NhVFKjK.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-startangle-and-sweepangle"&gt;
  &lt;/a&gt;
  What is startAngle and sweepAngle?
&lt;/h3&gt;

&lt;p&gt;At a high level overview, startAngle and sweepAngle is what will determine where our arc will start and end (as was previously mentioned).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;startAngle: By default, the starting position is at 0 radians in the unit circle. Another thing to note is that the direction in this arc is clockwise, instead of counter-clockwise. Instead of overcomplicating things, I just referenced the unit circle and added negative sign to everything. For example, if I wanted start position at the π/2 position on the unit circle, I'd set startAngle as -π/2.&lt;/li&gt;
&lt;li&gt;sweepAngle: The way this works is whatever value is specified here will get added to the startAngle and that will be where the arcs ends. For example, referencing the unit circle, if we wanted an arc from π/2 to 0, we would need startAngle of -π/2 and sweepAngle of π/2. -π/2 + π/2 = 0. Yay, math class!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#the-final-result"&gt;
  &lt;/a&gt;
  The final result
&lt;/h3&gt;

&lt;p&gt;So back to the example referenced at the beginning:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_m-gESha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KnbQKSr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_m-gESha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KnbQKSr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to go about it? Well, to change the progress indicators, we just need to tinker with the startAngle and sweepAngle only. Referencing the unit circle it looks to start at 2π/3 and end at 11π/6. Unfortunately, I couldn't really figure out an easy way to figure out the sweepAngle when using a custom startAngle like this. Simply adding doesn't really always work. Here's how I approached it. In quadrant I, we have the full quandrant so that's π/2. In quadrant II and IV, we have 2 π/6 slices. So that's π/6 + π/6 + π/2 which is 5π/6. This will be our sweepAngle. Full code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:math'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromARGB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;copyWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;scaffoldBackgroundColor:&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;startAngle:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;endAngle:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;80.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;CustomPaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;painter:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;startAngle:&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;sweepAngle:&lt;/span&gt; &lt;span class="n"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;size:&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorPainter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrokeCap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;butt&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PaintingStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stroke&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawArc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;center:&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;radius:&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;shouldRepaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="n"&gt;oldDelegate&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;If you want to use degrees instead of radians, it's pretty simple. Just accept the value into the Custom Painer as degrees and then convert it to radians before adding it as argument to the drawArc method. All the other concepts are the same, just the actual values are different. Here's final code with degrees implemented:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:flutter/material.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:math'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromARGB&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;copyWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;scaffoldBackgroundColor:&lt;/span&gt; &lt;span class="n"&gt;darkBlue&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;debugShowCheckedModeBanner:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;startAngle:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;endAngle:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorButton&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorButton&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;80.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;CustomPaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;painter:&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;borderWidth&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;startAngle:&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;sweepAngle:&lt;/span&gt; &lt;span class="n"&gt;endAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="n"&gt;buttonSize&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;20.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="nl"&gt;shape:&lt;/span&gt; &lt;span class="n"&gt;BoxShape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;size:&lt;/span&gt; &lt;span class="mf"&gt;30.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProgressIndicatorPainter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ProgressIndicatorPainter&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sweepAngle&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeCap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StrokeCap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;butt&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PaintingStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stroke&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;startAngleRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startAngle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;sweepAngleRad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sweepAngle&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Offset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawArc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;center:&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;radius:&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;startAngleRad&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;sweepAngleRad&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;shouldRepaint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomPainter&lt;/span&gt; &lt;span class="n"&gt;oldDelegate&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bonus-two-more-examples"&gt;
  &lt;/a&gt;
  Bonus! Two more examples
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBEBufII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/J0TTTC5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBEBufII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/J0TTTC5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same process. We have startAngle of 0 which we can also write as 0.0 in the code. As for sweepAngle, we have full quadrant in quadrant IV plus one π/6 slice in quadrant III. So that's π/6 + π/2 which is 4π/6 which will be our sweepAngle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_9MEMqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QCv8QWp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_9MEMqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/QCv8QWp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A little bit of a twist but still the same concepts. Here, we have &lt;br&gt;
startAngle of -5π/4. For sweepAngle, we have full quadrant in quadrant II, then in quadrant III we have π/6 slice and π/12 slice. π/2 + π/6 + π/12 = 3π/4. This will be the sweepAngle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The way I calculate the startAngle and sweepAngle is probably not the most ideal but it works. Anyways, I hope you learned something and if you have any questions feel free to reach out to me directly or leave a comment :)&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
    </item>
    <item>
      <title>🎬Simple Countdown Timer | Vanilla JavaScript⏱️</title>
      <author>Robson Muniz</author>
      <pubDate>Tue, 17 Aug 2021 14:23:42 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/simple-countdown-timer-vanilla-javascript-3ldl</link>
      <guid>https://dev.to/robsonmuniz16/simple-countdown-timer-vanilla-javascript-3ldl</guid>
      <description>&lt;p&gt;Hello, DEV, sometimes, you’re going to need to build a JavaScript countdown clock. &lt;br&gt;
You may have an event, a sale, a promotion, or a game. You can build a clock in Vanilla JavaScript rather than reaching for the nearest plugin.&lt;br&gt;
You’ll have more control. You will have built the clock to behave exactly the way you want it to (rather than trying to bend a plugin to your will).&lt;br&gt;
So, here’s how to make your own countdown clock in just a few lines of JavaScript.&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nhaAARFE3MY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;🧠 &lt;strong&gt;Concepts covered in this project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set a valid end date.&lt;/li&gt;
&lt;li&gt;Calculate the time remaining. &lt;/li&gt;
&lt;li&gt;Convert the time to a usable format. (Milliseconds)&lt;/li&gt;
&lt;li&gt;Output the clock data as a reusable object&lt;/li&gt;
&lt;li&gt;Display the clock on the page &lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Internet Computer: Web App Decentralized Database Architecture</title>
      <author>David Dal Busco</author>
      <pubDate>Tue, 17 Aug 2021 14:16:47 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/internet-computer-web-app-decentralized-database-architecture-2llk</link>
      <guid>https://dev.to/daviddalbusco/internet-computer-web-app-decentralized-database-architecture-2llk</guid>
      <description>&lt;p&gt;We are developing a proof of concept to port our web app, &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt;, to &lt;a href="https://dfinity.org"&gt;DFINITY's Internet Computer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After having validated the hosting and password-less authentication integration, we are tackling the last question of our POC: persisting user data and presentations in the blockchain.&lt;/p&gt;

&lt;p&gt;Along the way, we tried out two concepts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a “conservative” one: a data persistence in a single database-like storage&lt;/li&gt;
&lt;li&gt;a “futuristic 🤯” one: generate a database-like smart contract on the fly for each deck created by a user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I present these two approaches.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;The scope of this blog post is limited to simple key-value database concepts. That kind of persistence is the one we rely on in DeckDeckGo.&lt;/p&gt;

&lt;p&gt;I do not know if anyone has already implemented heavier concepts with the IC (Internet Computer), such as a fully functional SQL database running on the blockchain.&lt;/p&gt;

&lt;p&gt;You can of course challenge these by commenting on the blog post or by reaching out 😃.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-nowadays"&gt;
  &lt;/a&gt;
  The “Nowadays”
&lt;/h3&gt;

&lt;p&gt;Before digging into the Internet Computer, let's first review some common, old fashion concepts.&lt;/p&gt;

&lt;p&gt;Nowadays, server-less or not, the data persistence is often solve with one database for all information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LWwyNqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AeWuHlblTCJMdrJVNllri9Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LWwyNqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AeWuHlblTCJMdrJVNllri9Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users use the (web) application. It calls endpoint(s) to persist and read data and, it returns the results to the users.&lt;/p&gt;

&lt;p&gt;In a microservice architecture, the application(s) is split as a collection of services but, to some extension, the outcome is based on the same concept.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLce-_hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A3mAmSM4_l4QDF0aK2I_esA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLce-_hS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A3mAmSM4_l4QDF0aK2I_esA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users use the (web) application. It calls a dedicated service which in turn calls endpoint(s) to persist and read data and, returns the results to the users.&lt;/p&gt;

&lt;p&gt;Regardless of these architectures, mono- or micro-services, the data is stored in a monolithic database.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#code-snippet"&gt;
  &lt;/a&gt;
  Code Snippet
&lt;/h4&gt;

&lt;p&gt;I do not know the exact architecture of Google &lt;a href="https://firebase.google.com/docs/firestore/quickstart"&gt;Firestore&lt;/a&gt; but, from a user and outside point of view, it looks like a mono-database hosted in the cloud.&lt;/p&gt;

&lt;p&gt;If we develop, for example, an application that lists the kind of animals our users own, we would most probably define a db collection of &lt;code&gt;pets&lt;/code&gt; to collect their entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akVYY41Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AI4CP0N8GvViWCuAzRLa3UA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akVYY41Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AI4CP0N8GvViWCuAzRLa3UA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To query and persist the data, we would then implement getter (&lt;code&gt;get&lt;/code&gt; ) and setter (&lt;code&gt;add&lt;/code&gt; ) functions in our web application that would call the cloud database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/firestore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entryId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pets&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entryId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;entryId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pets&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cat&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entryId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All users would use the same entry point and their data would also be saved in the same collection (&lt;code&gt;firestore.collection('pets')&lt;/code&gt; ).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-conservative"&gt;
  &lt;/a&gt;
  The “Conservative”
&lt;/h3&gt;

&lt;p&gt;The Internet Computer does not provide a built-in, just-add-water database solution, that is not the goal of the DFINITY foundation (my understanding). They provide a futuristic blockchain network, that can run web applications too. That's "all".&lt;/p&gt;

&lt;p&gt;It is up to the makers to build features on top of it. They can implement features and unleash these on the IC through canister smart contracts.&lt;/p&gt;

&lt;p&gt;I picture a "canister" as a container that runs a set of functions in the cloud, except that it is actually a decentralized blockchain network 😉. It can basically do anything that can be implemented, from computing to data persistence.&lt;/p&gt;

&lt;p&gt;After studying the &lt;a href="https://sdk.dfinity.org/docs/introduction/welcome.html"&gt;documentation&lt;/a&gt; of the SDK, &lt;a href="https://github.com/dfinity/examples"&gt;examples&lt;/a&gt; and the “&lt;a href="https://github.com/dfinity/linkedup/"&gt;linkedup&lt;/a&gt;” demo,  our first approach had then for goal to replicate the approach we are familiar with, i.e. the “Nowadays" or "monolithic" database approach.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwEr9i6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AGK30d2fOgC-7UVWdAnrQFA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwEr9i6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AGK30d2fOgC-7UVWdAnrQFA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, given the blockchain nature of the Internet Computer, it may be good to imagine the architecture in a decentralized way with data shared in the form of blocks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4BzwVgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjI-CDFohigqIZCibwWrcqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4BzwVgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjI-CDFohigqIZCibwWrcqw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we omit the blockchain aspect (and the decentralization), it basically works the same as what I am familiar with, doesn't it?&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#code-snippet"&gt;
  &lt;/a&gt;
  Code Snippet
&lt;/h4&gt;

&lt;p&gt;The way we can picture the persistence of the data within a canister, like we would for our "pets" web application, would be again quite similar to the previous architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GaZ9YG8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ADcChK7ojaMYGqExH6F-YtQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GaZ9YG8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ADcChK7ojaMYGqExH6F-YtQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of a key-value database collection -- as there are no built-in databases available -- our actor would simply have an attribute holding the data.&lt;/p&gt;

&lt;p&gt;That attribute can for example be a &lt;a href="https://sdk.dfinity.org/docs/base-libraries/trie"&gt;Trie&lt;/a&gt;, a functional map (and set) whose representation is “canonical”, and independent of operation history.&lt;/p&gt;

&lt;p&gt;To query (&lt;code&gt;get&lt;/code&gt; ) and persist (&lt;code&gt;add&lt;/code&gt; ) the data,  we would be able to implement an actor, a canister, as following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Canisters and features unleashed in the Internet Computer can commonly either be written in &lt;a href="https://sdk.dfinity.org/docs/language-guide/motoko.html"&gt;Motoko&lt;/a&gt; or &lt;a href="https://www.rust-lang.org"&gt;Rust&lt;/a&gt;. Motoko is published and maintained by the DFINITY foundation and most of the documentation’s examples are provided in that particular programming language. That is mostly why we developed our proof of concept with Motoko.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Trie "mo:base/Trie";
import Nat32 "mo:base/Nat32";

actor {

    type PetId = Nat32;

    type Data = {
        dog: Bool;
        cat: Bool;
        userId: Text;
    };

    private stable var entryId: PetId = 0;

    private stable var pets : Trie.Trie&amp;lt;PetId, Data&amp;gt; = Trie.empty();

    public func add(userId: Text, dog: Bool, cat: Bool): async () {
        let data = {
            userId = userId;
            dog = dog;
            cat = cat;
        };

        pets := Trie.replace(
            pets,
            key(entryId),
            Nat32.equal,
            ?data,
        ).0;

        entryId += 1;
    };

    public query func get(entryId: Nat32) : async ?Data {
        let result = Trie.find(pets, key(entryId), Nat32.equal);
        return result;
    };

    private func key(x : PetId) : Trie.Key&amp;lt;PetId&amp;gt; {
        return { hash = x; key = x };
    };

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data would be saved in the canister smart-contract, replicated and decentralized, while using an approach we are familiar with.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;a href="https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1638333901"&gt;Link&lt;/a&gt; to related Motoko Playground to try and play with above example.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-futuristic-"&gt;
  &lt;/a&gt;
  The “Futuristic 🤯”
&lt;/h3&gt;

&lt;p&gt;Our first "Conservative" approach validated the hypothesis that data persistence for our web application in the Internet Compute could be done. But what about scalability?&lt;/p&gt;

&lt;p&gt;In our first approach, we did not use a &lt;code&gt;Trie&lt;/code&gt; as in the example; instead we store the data in a &lt;code&gt;HashMap&lt;/code&gt;. That way, it would have made the system a bit more scalable, as data would have potentially been still delivered more quickly, even with a large amount of data. However, at some point, we might have hit some limits anyway.&lt;/p&gt;

&lt;p&gt;In addition, a canister can only store 4GB of memory pages due to the limitations of WebAssembly implementations (&lt;a href="https://medium.com/dfinity/a-technical-overview-of-the-internet-computer-f57c62abc20f"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That is why, we challenged our first idea and, and tried to find a more scalable design.&lt;/p&gt;

&lt;p&gt;It resulted in an architecture in which a main actor acts as a a manager that -- on the fly, upon object creation -- generates a decentralized secure simple key-value database-like for each single data persistence of each user 🤯.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJdYzktF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ADnw7c5hNpF8cm49nCmT3JA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJdYzktF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ADnw7c5hNpF8cm49nCmT3JA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above diagram I displayed only two users and, did not reflect the blockchain nature of the network but, hopefully, it pictures well the idea.&lt;/p&gt;

&lt;p&gt;A user, through the web app, requests  the manager to get him/her a personal decentralized secure simple key-value data persistence canister. Once obtained, he/she uses this dedicated private space to query and persist his/her data.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#code-snippet"&gt;
  &lt;/a&gt;
  Code Snippet
&lt;/h4&gt;

&lt;p&gt;We would need two actors to implement such a solution. One that acts as a “manager”, the canister that generates other canisters on the fly, and an implementation for the canisters that take care of the data persistence, those that are generated on the fly.&lt;/p&gt;

&lt;p&gt;The “manager” might have to track or not the list of canisters it has generated, unless end users save on their side their references. However, in the following snippet we will assume it does have to keep track of what it generates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9vdgRmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ai1UedTMw4GxvoiwkQI9gvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9vdgRmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ai1UedTMw4GxvoiwkQI9gvw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The base implementation of the manager is close to what we already implemented. However, instead of &lt;code&gt;Trie&lt;/code&gt;, I used a &lt;a href="https://sdk.dfinity.org/docs/base-libraries/hashmap"&gt;HashMap&lt;/a&gt; to keep track of the IDs of the canisters that has been generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import HashMap "mo:base/HashMap";
import Principal "mo:base/Principal";
import Cycles "mo:base/ExperimentalCycles";
import Iter "mo:base/Iter";

import Pet "./Pet";

actor {

  type CanisterId = Principal;
  type UserId = Principal;

  private func isPrincipalEqual(x: Principal, y: Principal): Bool {
    x == y 
  };

  private var canisters: HashMap.HashMap&amp;lt;UserId, CanisterId&amp;gt; = 
    HashMap.HashMap&amp;lt;UserId, CanisterId&amp;gt;(10, isPrincipalEqual,  
                                        Principal.hash);

  private stable var upgradeCanisters: [(Principal, CanisterId)] = 
    [];

  public shared({caller}) func create(): async (CanisterId) {
    Cycles.add(1_000_000_000_000);
    let canister = await Pet.Pet();
    let id: CanisterId = await canister.id();
    canisters.put(caller, id);

    return id;
  };

  public shared query({caller}) func get() : async ?CanisterId {
    let id: ?CanisterId = canisters.get(caller);
    return id;
  };

  system func preupgrade() {
    upgradeCanisters := Iter.toArray(canisters.entries());
  };

  system func postupgrade() {
    canisters := HashMap.fromIter&amp;lt;UserId, CanisterId&amp;gt;     
                  (upgradeCanisters.vals(), 10, 
                  isPrincipalEqual, Principal.hash);
                  upgradeCanisters := [];
  };

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function &lt;code&gt;create&lt;/code&gt; takes care of unleashing new users' canisters in the Internet Computer, those that will be used for the data persistence. It first allocates a minimal cycle count for the new actors.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; function returns, if it exists, the ID of the user’s canister.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;preupgrade&lt;/code&gt; and &lt;code&gt;postupgrade&lt;/code&gt; are used to persist the memory between upgrades (see &lt;a href="https://sdk.dfinity.org/docs/language-guide/upgrades.html"&gt;documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Once the manager developed, we would be able to implement an &lt;code&gt;actor&lt;/code&gt; dedicated to the personal data persistence of a user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Principal "mo:base/Principal";

actor class Pet() = this {

  type Data = {
    dog: Bool;
    cat: Bool;
  };

  private stable var myPet: ?Data = null;
  public func set(dog: Bool, cat: Bool): async () {
    myPet := ?{
      dog = dog;
      cat = cat;
    };
  };

  public query func get() : async ?Data {
    return myPet;
  };

  public query func id() : async Principal {
    return Principal.fromActor(this);
  };

};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Its implementation looks familiar to what we have seen before, except for a small (but important) modification: there is no &lt;code&gt;entryId&lt;/code&gt; anymore and, there is no &lt;code&gt;Trie&lt;/code&gt; neither.&lt;/p&gt;

&lt;p&gt;Each user has his/her own little kingdom. That's why he/she does not need an identifier to lookup the data in a big pot of data. It doesn't even have to memorize the &lt;code&gt;userId&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is the user's kingdom, it contains only the personal data of that particular user!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51uCmj7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ALfdwUX1sVqLI9zp0WSWO_w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51uCmj7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ALfdwUX1sVqLI9zp0WSWO_w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: &lt;a href="https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=4031577968"&gt;Link&lt;/a&gt; to related Motoko Playground to check out above example.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros And Cons
&lt;/h3&gt;

&lt;p&gt;The ultimate architecture is really scalable, as every user operates in his/her own realm. It also separates the concern in clear ownerships and fits well a secure approach.&lt;/p&gt;

&lt;p&gt;However, it is worth noting that it is linked with more administration, whether during upgrade of their codes or handling their costs.&lt;/p&gt;

&lt;p&gt;Nevertheless, we are big fans of this architecture and think that the advantages are totally worth it. Therefore, it is the concept we would use if our proof of concept would turn into a real live productive use case.&lt;/p&gt;

&lt;p&gt;After all, great power comes with great responsibility!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;It is quite a tricky subject. I hope I was able to communicate the main idea behind these architectures and, most importantly, behind the one I called the “Futuristic one 🤯”.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; or my &lt;a href="https://daviddalbusco.com"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#grant-program"&gt;
  &lt;/a&gt;
  Grant Program
&lt;/h3&gt;

&lt;p&gt;We are incredibly lucky to have been selected for DFINITY &lt;a href="https://dfinity.org/grants/#utm_source=home&amp;amp;utm_medium=banner&amp;amp;utm_campaign=grants"&gt;Developer Grant Program&lt;/a&gt; to support the developer ecosystem, award teams to build dapps, tooling, and infrastructure on the Internet Computer.&lt;/p&gt;

&lt;p&gt;I cannot stress enough the fact that if you have a great project you should definitely apply. It has been so far nothing less than an amazing experience and, just give the feeling to take part to something that is ahead of its time.&lt;/p&gt;




&lt;p&gt;All figures of this article have been developed with &lt;a href="https://excalidraw.com/"&gt;Excalidraw&lt;/a&gt;, what a slick drawing tool.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>serverless</category>
      <category>database</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Exploring the Synergy of Content Creation &amp; Marketing</title>
      <author>Bala Priya C </author>
      <pubDate>Tue, 17 Aug 2021 14:14:50 +0000</pubDate>
      <link>https://dev.to/balapriya/exploring-the-synergy-of-content-creation-marketing-4llo</link>
      <guid>https://dev.to/balapriya/exploring-the-synergy-of-content-creation-marketing-4llo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-is-effective-marketing-strategy-important"&gt;
  &lt;/a&gt;
  Why is Effective Marketing Strategy Important?
&lt;/h2&gt;

&lt;p&gt;Today, the technology spectrum is growing faster than ever before. Companies in the tech sector are trying harder than ever before to be found in the highly competitive markets, to add value to customers, and to create impact in the industry. &lt;/p&gt;

&lt;p&gt;Even within a single industry, there are several companies looking to influence the decision-making process of customers, and drive impact. Therefore, charting out effective marketing strategies is just as important as building useful products, and solutions. &lt;/p&gt;

&lt;p&gt;In this post, we explain effective content marketing strategies that facilitate the generation of valuable inbound traffic, and better sales enablement, thereby positively impacting the organization’s KPIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-valuable-content-to-understand-customers-better"&gt;
  &lt;/a&gt;
  Creating Valuable Content to Understand Customers Better
&lt;/h2&gt;

&lt;p&gt;The success of any product, solution, or service depends on the customers’ decision. A product or solution, however sophisticated, is useful only if there are sufficient users. Therefore, it’s extremely important to understand customers and build solutions that address their problems. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Analyzing how prospective customers react to the created content, their interests, and engagement can often give direction and motivation to product design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This helps gain insights into customer behaviour, preferences, and expectations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-content-to-educate-and-inform-customers"&gt;
  &lt;/a&gt;
  Creating Content to Educate and Inform Customers
&lt;/h2&gt;

&lt;p&gt;Creating quality content that’s aimed at educating and informing the customers about the particular product can be immensely beneficial. For a customer who’s looking to purchase a product, or use a service, creating awareness about the problem or use case in general, followed by specific content that focuses on the advantages of the company’s products, and services helps in building trust and awareness in customers. &lt;/p&gt;

&lt;p&gt;The following are helpful tips to get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create content that answers questions most customers have on how a product can possibly help solve their problems.&lt;/li&gt;
&lt;li&gt;Create educational content that helps build trust and motivate customers to consider the company’s  products, or services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an ideal first step that enables connecting with prospective customers and organically influencing them to consider the company’s solutions without forcing them to become customers by using attractive offers and discounts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-compelling-and-contextuallyrelevant-content"&gt;
  &lt;/a&gt;
  Creating Compelling and Contextually-Relevant Content
&lt;/h2&gt;

&lt;p&gt;When starting the content creation process, companies should always keep the audience in mind. Too many posts on the logistics and functioning of the organization is definitely not what the customers are looking for. Content created that’s aligned with the interests of the customers. &lt;/p&gt;

&lt;p&gt;Here are some relevant questions to answer during the content planning phase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What do the customers want to know about?&lt;/li&gt;
&lt;li&gt;What problems are they seeking solutions for?&lt;/li&gt;
&lt;li&gt;How would the content that we create help them?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, all posts in the blog section of the website should be contextually relevant. Relevant, clear, and creative content can influence the customers immensely. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While blog posts should be optimized for search engines with the right keywords, it’s also extremely important to be concise and expand on one key idea per post instead of talking about many ideas in a single post. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we’ve already oriented the customers to make well-informed decisions, it’s often helpful to create whitepapers that substantiate the products - detailing the problem, solution, and the features that make the product under consideration an optimal choice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leveraging-the-power-of-social-media-platforms"&gt;
  &lt;/a&gt;
  Leveraging the Power of Social Media Platforms
&lt;/h2&gt;

&lt;p&gt;While a good SEO strategy can help the product’s landing page show up in search results organically, it’s important to leverage the use of social media platforms to share and distribute the created content to the target audience, and also interact with them at a closer level to understand their viewpoints better.&lt;/p&gt;

&lt;p&gt;Building an optimal online presence for establishing the company’s brand, and a well thought-out social media marketing strategy can be powerful in driving favorable decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leveraging-content-strategy-for-a-better-endtoend-experience"&gt;
  &lt;/a&gt;
  Leveraging Content Strategy for a Better End-to-End Experience
&lt;/h2&gt;

&lt;p&gt;Etching out effective content marketing strategies can help establish strong authority and relevance. The trust gained by creating and promoting quality content can help companies become thought leaders in the industry. Content marketing goals that are aligned with the goals and vision of the organization, can, therefore, facilitate better end-to-end experience for customers. &lt;/p&gt;

&lt;p&gt;That said, it’s now the time to chalk out effective content marketing strategies and revise existing strategies - for, the journey to becoming a leader in the industry begins today!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Sign Up Form like Instagram with Bootstrap 5.1.0</title>
      <author>Simon Köhler</author>
      <pubDate>Tue, 17 Aug 2021 14:14:28 +0000</pubDate>
      <link>https://dev.to/typo3freelancer/sign-up-form-like-instagram-with-bootstrap-5-1-0-1n8f</link>
      <guid>https://dev.to/typo3freelancer/sign-up-form-like-instagram-with-bootstrap-5-1-0-1n8f</guid>
      <description>&lt;p&gt;A simple example of a sign-up form similar to Instagram's sign-up form using Bootstrap 5, which predominantly uses Bootstrap's built-in classes, as well as floating labels for form fields.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/typo3-freelancer/embed/YzVbJQg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-the-compiled-html"&gt;
  &lt;/a&gt;
  Here's the compiled HTML:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section class="py-4"&amp;gt;
  &amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="row d-flex align-items-center justify-content-center"&amp;gt;
      &amp;lt;div style="max-width:420px;"&amp;gt;
        &amp;lt;form action="#" class="bg-white border py-4 px-5" method="get"&amp;gt;
          &amp;lt;div class="text-center mb-3"&amp;gt;
            &amp;lt;i class="fab fa-bootstrap fa-5x text-secondary mb-2"&amp;gt;&amp;lt;/i&amp;gt;
            &amp;lt;p class="text-muted fw-bold"&amp;gt;
              Sign up to see photos and videos from your friends.
            &amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="mb-3"&amp;gt;
            &amp;lt;a class="btn btn-primary d-block bg-gradient" href="#"&amp;gt;&amp;lt;i class="fab fa-facebook"&amp;gt;&amp;lt;/i&amp;gt; Log in with facebook&amp;lt;/a&amp;gt;
            &amp;lt;p class="my-3 text-center or"&amp;gt;
              OR
            &amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="form-floating mb-3"&amp;gt;
            &amp;lt;input class="form-control" name="email" placeholder="Mobile Number or Email" required="" type="email" /&amp;gt;&amp;lt;label&amp;gt;Mobile Number or Email&amp;lt;/label&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="form-floating mb-3"&amp;gt;
            &amp;lt;input class="form-control" name="fullname" placeholder="Full Name" required="" type="text" /&amp;gt;&amp;lt;label&amp;gt;Full Name&amp;lt;/label&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="form-floating mb-3"&amp;gt;
            &amp;lt;input class="form-control" name="username" placeholder="Username" required="" type="text" /&amp;gt;&amp;lt;label&amp;gt;Username&amp;lt;/label&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="form-floating mb-3"&amp;gt;
            &amp;lt;input class="form-control" name="password" placeholder="Password" required="" type="password" /&amp;gt;&amp;lt;label&amp;gt;Password&amp;lt;/label&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="mb-2"&amp;gt;
            &amp;lt;button class="btn btn-primary fw-bold w-100 bg-gradient" href="#" type="submit"&amp;gt;Sign Up&amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="small text-center"&amp;gt;
            By signing up, you agree to our Terms , Data Policy and Cookies Policy.
          &amp;lt;/div&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;div class="bg-white py-4 px-5 text-center border mt-4"&amp;gt;
          &amp;lt;p class="m-0"&amp;gt;
            Have an account? &amp;lt;a href="#"&amp;gt;Log In&amp;lt;/a&amp;gt;
          &amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Here is the only used additional class ".or", which ensures that there is a smooth line after the word "or". This snippet can also be used for other projects when a visual separator is needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.or{
  position: relative;
}
.or:before{
  content: '';
  height: 1px;
  background: linear-gradient(to right,silver,silver,rgba(255,255,255,0),rgba(255,255,255,0),silver,silver);
  position: absolute;
  left: 0;
  top: 50%;
  width: 100%;
  z-index: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>codepen</category>
      <category>bootstrap</category>
      <category>html</category>
      <category>forms</category>
    </item>
    <item>
      <title>Recording on JMeter</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Tue, 17 Aug 2021 14:13:59 +0000</pubDate>
      <link>https://dev.to/qainsights/recording-on-jmeter-h95</link>
      <guid>https://dev.to/qainsights/recording-on-jmeter-h95</guid>
      <description>&lt;p&gt;Welcome to Learn JMeter Series! This series helps you to learn Apache JMeter in a much simpler way with the relevant examples and exercises. This tutorial focuses on &lt;strong&gt;Recording on JMeter&lt;/strong&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qainsights.com/introduction-to-jmeter-elements/"&gt;Introduction to JMeter Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qainsights.com/downloading-and-installing-jmeter/"&gt;Downloading and Installing JMeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qainsights.com/introduction-to-apache-jmeter/"&gt;Introduction to Apache JMeter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qainsights.com/jmeter-execution-order-and-scoping-rules/" rel="noreferrer noopener"&gt;JMeter Execution Order and Scoping Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;What is Recording?&lt;/h2&gt;

&lt;p&gt;To get started with application performance testing, the first step in JMeter is recording your business transactions. Recording the business flow helps to expedite the process of creating test plans. Otherwise, you will be spending more time manually crafting the requests.&lt;/p&gt;

&lt;p&gt;Almost any GUI based performance testing tool offers a way to record the application via proxy. But CLI based tools such as k6 adopt a different approach when it comes to recording.&lt;/p&gt;

&lt;h2&gt;How to get started with recording in JMeter?&lt;/h2&gt;

&lt;p&gt;In JMeter, by adding a Non-Test element to your test plan, enables you to capture the network traffic. Right click on &lt;strong&gt;Test Plan &amp;gt; Add &amp;gt; Non-Test Elements &amp;gt; HTTP(S) Test Script Recorder&lt;/strong&gt;. This will add the recording capability to JMeter.&lt;/p&gt;

&lt;p&gt;To begin recording, understand the business flow and have your input data ready. Preferably clear your cache and cookies from your favorite browser.&lt;/p&gt;

&lt;h2&gt;Configuring HTTP(S) Test Script Recorder&lt;/h2&gt;

&lt;p&gt;JMeter records the traffic via proxy. By default, JMeter uses 8888, but it can be configured based on your needs. &lt;/p&gt;

&lt;p&gt;Now, open your favorite browser. In this case, I am using Mozilla Firefox, then launch the proxy settings and configure the same proxy as JMeter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUO8m1ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image.png" alt=""&gt;&lt;/a&gt;&lt;strong&gt;Mozilla Firefox Proxy Settings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this series, we are going to use multiple demo websites. To demonstrate the recording capability, we are going to use &lt;strong&gt;Bank of Anthos&lt;/strong&gt; demo app https://bank-of-anthos.xyz/login &lt;/p&gt;

&lt;p&gt;Below is the business flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launch https://bank-of-anthos.xyz/login&lt;/li&gt;
&lt;li&gt;Sign in with the default credentials,&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Deposit Funds&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Enter 10 to the default external account, click on &lt;strong&gt;Deposit&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Sign out &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go back to JMeter, add a &lt;strong&gt;Thread Group&lt;/strong&gt; and in &lt;strong&gt;HTTP(S) Test Script Recorder&lt;/strong&gt;, select the &lt;strong&gt;Target Controller&lt;/strong&gt; as &lt;strong&gt;Test Plan &amp;gt; Thread Group&lt;/strong&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSmNS15n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-2.png" alt="Recording on JMeter"&gt;&lt;/a&gt;Recording on JMeter&lt;/p&gt;

&lt;p&gt;Then, click on &lt;strong&gt;Start&lt;/strong&gt;. If you get a pop-up, that is fine, click on OK, and then go back to Firefox and launch the https://bank-of-anthos.xyz/login URL.&lt;/p&gt;

&lt;p&gt;Once the recording is done, click on the &lt;strong&gt;Stop &lt;/strong&gt;button. In your &lt;strong&gt;Thread Group&lt;/strong&gt;, you can see the recorded elements as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhzHAe0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-3.png" alt="Vanilla Recording"&gt;&lt;/a&gt;Vanilla Recording&lt;/p&gt;

&lt;p&gt;By default, JMeter records everything. It is your responsibility to remove unwanted requests such as ads, fonts, third party calls etc.&lt;/p&gt;

&lt;p&gt;But you can avoid unwanted requests using the network filtering option in JMeter. Click on &lt;strong&gt;Requests Filtering &lt;/strong&gt;in &lt;strong&gt;HTTP(S) Test Script Recorder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Add the below regular expressions under URL Patterns to include.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(?i)bank-of-anthos.xyz(.*)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then repeat the recording. You will get only the relevant HTTP requests for your test plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGb7oVnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-4.png" alt="Optimized Recording"&gt;&lt;/a&gt;Optimized Recording&lt;/p&gt;

&lt;h2&gt;Smoke Test&lt;/h2&gt;

&lt;p&gt;After the recording is done, it is time to smoke test the recorded elements. Add the &lt;strong&gt;View Results Tree&lt;/strong&gt; listener to the test plan, by right-clicking on &lt;strong&gt;Thread Group &amp;gt; Add &amp;gt; Listener &amp;gt; View Results Tree&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will get the below error when you replay the test plan. That is fine. Let us fix this in a moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKuEfkXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-5.png" alt="Smoke Testing"&gt;&lt;/a&gt;Smoke Testing&lt;/p&gt;

&lt;h2&gt;How to fix the test plan?&lt;/h2&gt;

&lt;p&gt;Whenever you work on a web application in JMeter, always add &lt;strong&gt;Cache Manager, Cookie Manager and DNS Cache Manager&lt;/strong&gt; from the &lt;strong&gt;Config Element&lt;/strong&gt; category to the test plan. If you replay now, you will not see any errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/08/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_qlvMWkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/08/image-6.png" alt="Clean Run"&gt;&lt;/a&gt;Clean Run&lt;/p&gt;

&lt;p&gt;Above test plan cannot be used for load testing yet. There are lot of enhancements to be done. Eventually we will cover everything.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this blog, you have learned how to capture business transactions in JMeter via proxy and a couple of tips and tricks for successful smoke testing. In our next blog post, we will discuss &lt;strong&gt;Data Parameterization in JMeter&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Share state using custom hooks</title>
      <author>Francesco Sardo</author>
      <pubDate>Tue, 17 Aug 2021 14:04:25 +0000</pubDate>
      <link>https://dev.to/frankiesardo/share-state-using-custom-hooks-5245</link>
      <guid>https://dev.to/frankiesardo/share-state-using-custom-hooks-5245</guid>
      <description>&lt;p&gt;Many articles have been written about React state management strategies for React, and yes, this is yet another one of them. But rather than talking about a new library and how everyone should adopt it, I want to talk about two different philosophical approach to state: centralised vs decentralised.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-decentralised-state-paradigm"&gt;
  &lt;/a&gt;
  The decentralised state paradigm
&lt;/h2&gt;

&lt;p&gt;Decentralised state has been the battery-included solution since the first version of React. Class components can edit local state to trigger a re-render, and functional components can accomplish the same with the &lt;code&gt;useState&lt;/code&gt; hook. &lt;/p&gt;

&lt;p&gt;Local state is very intuitive to manipulate because it sits near the component that uses it for display and side effects, it's allocated when needed, and disappears when the component is unmounted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-centralised-state-paradigm"&gt;
  &lt;/a&gt;
  The centralised state paradigm
&lt;/h2&gt;

&lt;p&gt;Keeping all mutable state in one place is an approach championed by Elm, ClojureScript and Redux: a single data structure (usually a tree) contains all the state needed to render your React application. When a branch of that tree changes state, the relevant components in your React hierarchy re-render displaying the new information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CO4u-rov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh6fvhqttth686rqcml8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CO4u-rov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jh6fvhqttth686rqcml8.png" alt="Screenshot 2021-08-11 at 21.27.07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A single point of reference for the entire app state is a very neat idea and feels like a natural evolution on top of React itself: React abstracts DOM changes with components, the app state abstracts component changes with a big JSON value.&lt;/p&gt;

&lt;p&gt;Since all changes are represented with data, the logic that transitions the app through different states is very easy to express and to test: it's just a function &lt;code&gt;f(currentState, event) =&amp;gt; newState&lt;/code&gt;. It's also easy to generate many valid UI screens by mocking the app state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4Pi9Qwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpnb4kvtblrwjkhsw9u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4Pi9Qwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpnb4kvtblrwjkhsw9u7.png" alt="Screenshot 2021-08-15 at 21.45.26"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://github.com/frankiesardo/speccards"&gt;speccards&lt;/a&gt; generates random valid UI states based on a spec&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#problems-with-decentralised-state"&gt;
  &lt;/a&gt;
  Problems with decentralised state
&lt;/h2&gt;

&lt;p&gt;Local state becomes problematic when two components need to watch and act on the same state. Think about a simple currency converter where the user can edit either currency text input.&lt;/p&gt;

&lt;p&gt;In this case the naive solution is to "lift the state up" to the closest parent and give all children callback functions to manipulate the state. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--avzR7JC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4r26cibamtwqw1982l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--avzR7JC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc4r26cibamtwqw1982l.png" alt="Screenshot 2021-08-15 at 21.49.56"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;em&gt;&lt;a href="https://reactjs.org/docs/lifting-state-up.html"&gt;Lifting State Up&lt;/a&gt; in vanilla React&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This rarely scales for bigger applications, so something like &lt;a href="https://recoiljs.org/"&gt;Recoil&lt;/a&gt; might be needed for more powerful sharing.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#problems-with-centralised-state"&gt;
  &lt;/a&gt;
  Problems with centralised state
&lt;/h2&gt;

&lt;p&gt;You can easily get started with centralised state with the &lt;code&gt;useReducer&lt;/code&gt; hook and keeping all state inside the top &lt;code&gt;&amp;lt;App/&amp;gt;&lt;/code&gt; component, passing down state as &lt;code&gt;props&lt;/code&gt; wherever they are needed. What you'll find soon enough, though, is that components far away from the root will require forever more information, and you'll have to drill all the props through the tree until they reach the correct component.&lt;/p&gt;

&lt;p&gt;This, again, doesn't scale for large applications, so some forms of &lt;code&gt;subscriptions&lt;/code&gt; to parts of the state tree are required to keep the app performant and easy to extend. You might need something like the &lt;a href="https://react-redux.js.org/api/hooks#useselector"&gt;hook version of Redux&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-the-two-compare-in-terms-of-developer-experience"&gt;
  &lt;/a&gt;
  How the two compare in terms of Developer Experience
&lt;/h2&gt;

&lt;p&gt;I have always been a huge advocate of the centralised approach. It appealed to me because of its functional purity and how it made accessing and manipulate state much easier in the pre-hook era. I have since changed my mind, and I'd like to explain why.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Centralised state gives you the &lt;em&gt;illusion&lt;/em&gt; of correctness&lt;/strong&gt;. The state neatly transitions from one pure value to another thanks little functions that encapsulate your business logic. You might even have tests for those functions that say something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- When button is clicked
- Set the loading indicator to true
- Clear the input field
- Send an http call to the server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Except that when you actually run the app, the behaviour is not what you expected. The problem is that your logic is far removed from your UI components, and while sound and correct in principle, it doesn't play well with your render code. It might be because the state has a different shape, but more often that not, it's because the intended values are not added to the state at the right time.&lt;/p&gt;

&lt;p&gt;Modelling your app as a succession of states works well when you deal mostly with synchronous interactions, like a game, but starts to show its limit with more asynchronous behaviour, like fetching new data over the internet. It's easy to describe how the data changes but not &lt;strong&gt;how the data gets there in the first place&lt;/strong&gt;. So you might end up with an infinite spinner because an action has not been triggered or received at the right time (e.g. when the user navigated to a new screen).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPTp0VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8684vlq0qyi46rpal4a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPTp0VMi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8684vlq0qyi46rpal4a.gif" alt="1_8NJgObmgEVhNWVt3poeTaA"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Annoying when that happens eh?&lt;/em&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#colocating-state-effects-and-ui"&gt;
  &lt;/a&gt;
  Colocating state, effects and ui
&lt;/h2&gt;

&lt;p&gt;Advocates of the centralised state approach have a great argument: UI should not care about state management and side effects, it should just care about displaying values. Extract the logic somewhere else and test it.&lt;/p&gt;

&lt;p&gt;While poignant in principle, this doesn't work well in practice. The reverse tends to be true: it's useful to think about components as fragments of the screen with a well defined behaviour. They can trigger actions, listen to events and manipulate state that affects other components.&lt;/p&gt;

&lt;p&gt;Over the last year I've been writing components with complex behaviour, fully expecting things to break and knowing I'll be refactoring them with some centralised solution. To my surprise, this nontrivial, large app, kept on getting bigger and accumulating new features without getting significantly more complex. I would even say it scaled in ways that Redux, ClojureScript or Elm apps haven't been in the past, even with less "formal proofs" (tests, types) of correctness.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-hook-with-a-name"&gt;
  &lt;/a&gt;
  A hook with a name
&lt;/h2&gt;

&lt;p&gt;Consider this component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;itemsPerPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPerPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To me it clearly communicates its dependencies (inputs) and how it uses them for display. Moreover, these inputs are not just static data but a combination of state and effect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useUser&lt;/code&gt; returns the current user info if logged in, otherwise it triggers an authentication flow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;usePreferences&lt;/code&gt; gets saved data asynchronously from IndexedDB&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useSearch&lt;/code&gt; extracts the query parameters in the current url&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useItems&lt;/code&gt; ties everything together, getting the items server side and caching them for future uses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When each one of these dependencies change (the url parameters, or the local storage being cleared, or the user token expiring) the hooks will take care of re-fetching and re-rendering the component.&lt;/p&gt;

&lt;p&gt;Custom hooks that encapsulate caching are also a great way to share data between components: user, preferences, and remote data all reside in-memory and only need to be fetched once. The first component that uses the hook triggers the async behaviour and all the other components can subsequently access it free of charge.&lt;/p&gt;

&lt;p&gt;You can even go one step beyond and wrap this behaviour in a hook itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useSearchItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;itemsPerPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;usePreferences&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSearch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemsPerPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchQuery&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So you can have the same list of items in two different part of the application (say: the list itself and a Count indicator somewhere else).&lt;/p&gt;

&lt;p&gt;Hooks can be seen as a dependency graph: what they "require" (other hook calls) and what they provide (the returned value). Editing this graph is really easy if you stick with React hooks and don't go outside of it with centralised state management.&lt;/p&gt;

&lt;p&gt;This patterns composes really well and scales as you create new components. Need another components to access this list? It's a one line change. Don't need access to that data anymore? Removing the hook or the component itself means it's not fetched in that screen anymore.&lt;/p&gt;

&lt;p&gt;State (what's cached), behaviour (which effects load and invalidate the data) and UI can be closely linked together again, so they evolve organically together with your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theres-an-app-for-that"&gt;
  &lt;/a&gt;
  There's an app for that
&lt;/h2&gt;

&lt;p&gt;Writing hooks manually that load, cache and invalidate it's obviously time consuming, and there's no need to do that when there are great libraries out there already.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; obviously stands out with its incredible DX. It works with http, graphql and any asynchronous behaviour really (e.g. IndexedDB).&lt;/p&gt;

&lt;p&gt;This library alone gives you so much leverage it might be the only solution you need. If we're talking about state sharing without asynchronous behaviour, then Recoil might be a good addition too. If you're using custom hooks with a descriptive name, it won't really matter which library you use underneath.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Prefer this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRepos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// To this&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;repos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;repoData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.github.com/repos/tannerlinsley/react query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-real-world-example"&gt;
  &lt;/a&gt;
  A real world example
&lt;/h2&gt;

&lt;p&gt;It's always best to show how ideas are implemented in practice rather than just talking about them so I've created &lt;a href="//firebuzz.app"&gt;firebuzz.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDLeDQeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nivmbecfyn416zdcqd0j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDLeDQeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nivmbecfyn416zdcqd0j.jpeg" alt="WhatsApp Image 2021-08-01 at 19.57.27"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Players can buzz to answer questions and receive points&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can browse the source code (and it particular the &lt;code&gt;hooks&lt;/code&gt; folder) over here &lt;a href="https://github.com/frankiesardo/firebuzz"&gt;https://github.com/frankiesardo/firebuzz&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
