<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Resolving ENS Usernames in React</title>
      <author>Rahat Chowdhury</author>
      <pubDate>Tue, 21 Dec 2021 15:38:20 +0000</pubDate>
      <link>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</link>
      <guid>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</guid>
      <description>&lt;p&gt;An awesome part of using a dApp is the fact that you can connect your wallet and and be logged in or signed up for the application right away. The problem that this may bring is that wallets are this large string of alphanumeric characters and don't make the best usernames. See example below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0xd2f8ed343386FB042178c7e133A837CB8043d0dc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ew right? This isn't the greatest way of displaying a username. You could do something like create a form and ask for a preferred username &lt;em&gt;or&lt;/em&gt; we could leverage the decentralized web and look at using existing ENS usernames in our applications. &lt;/p&gt;

&lt;p&gt;Let's take a look at how we can do this using React and the Ethers library. &lt;/p&gt;

&lt;p&gt;I started off by scaffolding out a react application using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then I installed a dependency I need using yarn. (You can use npm instead if you prefer).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add ethers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards I went into App.js and got rid of everything inside the div and then imported the ethers library and useState from React to keep track of the username of the signed in person. If you want to code along with this blog then here is what my App.js looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useState } from 'react';
import { ethers } from 'ethers';

function App() {
  const [name, setName] = useState("");
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too much going on just yet. Let's add a button inside of our app div and give it a function that can execute on click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
      &amp;lt;button className ="button" onClick={() =&amp;gt; handleWalletConnect()}&amp;gt;connect&amp;lt;/button&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this handleWalletConnect function is going to accomplish a couple of things. We want to make sure we get access to the users wallet as well as their ens username if they have one. Here is the function which I'll break down line by line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [name, setName] = useState("");
  const handleWalletConnect = async () =&amp;gt; {
    const { ethereum } = window;
    if(ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum)
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner()
      const address = await signer.getAddress()
      const ens = await provider.lookupAddress(address);
      if (ens !== null) {
        setName(ens)
      } else {
        setName(address)
      }
    } else {
      alert('no wallet detected!')
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we're doing is destructuring the Ethereum object from the Window:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const { ethereum } = window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is something that is injected into the window from a wallet like Metamask. As long as it exists we will continue on with the rest of our code, otherwise we want to alert the user that we aren't detecting any wallets in their browser. &lt;/p&gt;

&lt;p&gt;Next up is creating a provider that will give us access to a lot of methods that makes our life easier. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const provider = new ethers.providers.Web3Provider(ethereum)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A provider is a nice little abstraction of the connection to the Ethereum network. We're leveraging the work that the nice folks at Ethers have already done for us instead of reinventing the wheel. &lt;/p&gt;

&lt;p&gt;The first thing we want to do with our provider is ask for permission to connect to the users wallet which is taken care of with this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await provider.send("eth_requestAccounts", [])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This sends a request over to the wallet asking the user to allow connection with our dApp. &lt;/p&gt;

&lt;p&gt;Next we want to get information about the user. We do this by creating a signer object:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const signer = provider.getSigner()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us access to more methods like this handy one for getting the signer's address:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const address = await signer.getAddress()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in theory we have everything we need to start building out our dApp. We have the address but we want to make things a little more human readable. Our provider has a nice little method of doing a reverse lookup to see if the Ethereum address is linked to an ENS username and that's done in the line below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ens = await provider.lookupAddress(address)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will return the ens username if it exists otherwise we will get back null. Now we can either set the name to be the username or just fall back to the address if they do not have an ens username.&lt;/p&gt;

&lt;p&gt;Now that we can access our user's decentralized identity we can allow for a greater user experience instead of forcing our users to fill out yet another form on profile details for a new service. &lt;/p&gt;

&lt;p&gt;The final code for this can all be found on this repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Rahat-ch/reactensusernames"&gt;https://github.com/Rahat-ch/reactensusernames&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also watch a quick video of this tutorial below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qQBJBJGv_ZA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>web3</category>
      <category>react</category>
    </item>
    <item>
      <title>Media Query (CSS)</title>
      <author>Iftakher Hossen</author>
      <pubDate>Tue, 21 Dec 2021 15:20:29 +0000</pubDate>
      <link>https://dev.to/iftakher_hossen/media-query-css-3akc</link>
      <guid>https://dev.to/iftakher_hossen/media-query-css-3akc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-media-query"&gt;
  &lt;/a&gt;
  What is Media Query
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Media Query&lt;/strong&gt; is introduced on CSS3. Media Query is a very useful tool. Media Query in CSS is used to make responsive designs for various platforms. We use the &lt;code&gt;@media&lt;/code&gt; rule to include a block of CSS properties only if a particular condition is true. You have to mention &lt;code&gt;breakpoint&lt;/code&gt;'s, it defines where certain parts of the design will behave differently. Media queries can be used to check many things, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Width and height of the viewport&lt;/li&gt;
&lt;li&gt;Width and height of the device&lt;/li&gt;
&lt;li&gt;Orientation (Landscape/Portrait)&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use media queries to specify that specific styles are only for printed documents or for screen readers (media-type: print, screen, or speech). Media queries can also be used to change the layout of a page depending on the orientation of the browser.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9apcsthO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gjm1y5v6frpkq204wwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9apcsthO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gjm1y5v6frpkq204wwj.png" alt="Structure" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2y0jlGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk9cm0bcrtyin0fpz8zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2y0jlGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk9cm0bcrtyin0fpz8zz.png" alt="Code Screenshot 02" width="880" height="675"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meaning-of-and-only-amp-not"&gt;
  &lt;/a&gt;
  Meaning of and, only &amp;amp; not:
&lt;/h4&gt;

&lt;p&gt;And : For using two or more media query breakpoints or media types. &lt;br&gt;
Only    : For using media query on an Older version of browsers.&lt;br&gt;
Not : For inverting the meaning of an entire media query.&lt;/p&gt;

&lt;p&gt;You can use external CSS for different media to keep CSS file's more clean and organized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ccjN-Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tf0givs3z8wpw9eeqwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ccjN-Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tf0givs3z8wpw9eeqwi.png" alt="Code Screenshot 03" width="880" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-device-breakpoints"&gt;
  &lt;/a&gt;
  Typical Device Breakpoints
&lt;/h3&gt;

&lt;p&gt;There are tons of screens and devices of different sizes, so it is tough to create an exact breakpoint for each device. To keep things simple you could target five groups:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrqzUu8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/087amm7obo4l2ge0mlr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrqzUu8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/087amm7obo4l2ge0mlr8.png" alt="Code Screenshot 02" width="880" height="758"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h3&gt;

&lt;p&gt;The table data define the first version of the browser support the Media Query -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ov15ht2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn81661gnt8zvre8rjft.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ov15ht2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wn81661gnt8zvre8rjft.jpg" alt="Browser  Support Image" width="702" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Most Important Elements of any Landing Page</title>
      <author>Zack Webster</author>
      <pubDate>Tue, 21 Dec 2021 15:15:55 +0000</pubDate>
      <link>https://dev.to/zaxwebs/the-most-important-elements-of-any-landing-page-3720</link>
      <guid>https://dev.to/zaxwebs/the-most-important-elements-of-any-landing-page-3720</guid>
      <description>&lt;p&gt;A good landing page can boost your campaign sales or signups by up to 10 times. But what are landing pages and how do they differ from general web pages? A landing page is a special type of web page where the focus is on one action such as a signup or sale of a specific product, they are often paired with search and social media advertisements. While general web pages are more about encouraging exploration and offering diverse information.&lt;/p&gt;

&lt;p&gt;So, what makes a good landing page? Let's have a look at the top elements you need to have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headline"&gt;
  &lt;/a&gt;
  Headline
&lt;/h2&gt;

&lt;p&gt;Your headline is the first thing a user is likely to read when going through your landing page. As such you need to make sure you have a compelling one. How does one craft a good headline? You are in luck, there are already some pre-established formulas that are known to work well. Have a look at the list of 5 proven conversion-boosting headline formulas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testimonial&lt;/li&gt;
&lt;li&gt;Khan Academy's Testimonial Headline&lt;/li&gt;
&lt;li&gt;Cliffhanger&lt;/li&gt;
&lt;li&gt;Value Proposition&lt;/li&gt;
&lt;li&gt;Listicle&lt;/li&gt;
&lt;li&gt;How-To&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of headline that works well for you depends on what you are trying to sell. Personal products, for example, can be more receptive to a testimonial headline. Each type of headline has its perks, try out different variations with A/B testing and optimize for conversion.&lt;/p&gt;

&lt;p&gt;Make sure to keep your headlines short and simple, easy to comprehend and remember. If need be, businesses can also use a sub-heading to elaborate a bit more about what is being offered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clearcut-visual-or-video"&gt;
  &lt;/a&gt;
  Clear-cut Visual or Video
&lt;/h2&gt;

&lt;p&gt;"A picture is worth a thousand words", a video even more. The visuals are what will help grab attention and offer more context quickly. This is a major part of your landing page and has to work in sync with your heading. The heading and your primary visual need to go hand in hand to land an impactful first impression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y5TNDm74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7v9resxwlbowa5syayw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y5TNDm74--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7v9resxwlbowa5syayw.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you decide to use a video, make sure it's professional - it must have a good resolution &amp;amp; audio. If you don't have the budget to invest in a good video you might be better off with an image. You can be creative and blend with the type of heading. For example, a photo of a person benefiting from your product goes well with a testimonial heading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-content"&gt;
  &lt;/a&gt;
  Good Content
&lt;/h2&gt;

&lt;p&gt;Provide rich, useful content, so long as it is relevant. Good, confident content inspires trust. Don’t bore the visitor by talking too much about yourself. Tell them what you or your product does for them. Help them picture what makes you or your product something they need to get.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-amp-benefits"&gt;
  &lt;/a&gt;
  Features &amp;amp; Benefits
&lt;/h2&gt;

&lt;p&gt;Adding to good content, a features &amp;amp; benefits list can be quite powerful. Tell your customers the things they get and their benefits in a sentence each. This also helps direct visualization of all the problems the visitor will overcome should they buy your product or service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-proof"&gt;
  &lt;/a&gt;
  Social Proof
&lt;/h2&gt;

&lt;p&gt;According to a report from Nielsen, 70% of people will trust a review from someone they’ve never even met. Social proof is your best friend when it comes to building credibility. Reviews, testimonials, badges, certificates, customer images, case studies, and company logos are all quite effective tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hB1dwlrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxvbhm4rzp1nk41cq41k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hB1dwlrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxvbhm4rzp1nk41cq41k.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;br&gt;
To make sure your social proof is effective, you must keep in mind that all not social proof is equal. It's ideal if the social proof comes from the type of audience that you are marketing to and the source is credible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#single-call-to-action"&gt;
  &lt;/a&gt;
  Single Call to Action
&lt;/h2&gt;

&lt;p&gt;A confused customer is less likely to take any action. If you present too many choices you might be losing quite a few sales. One of our jobs as a designer is to reduce the cognitive load. The more you "direct", the easier things are and the more likely a user will be to do it. The best bet is to use a single call to action, the one goal of your landing page. You can further optimize your CTA buttons by offering a context-based label.&lt;/p&gt;

&lt;p&gt;You can further optimize your CTAs by optimizing your forms. Ask for the bare minimum information you need. The more fields you ask visitors to fill out in your form, the less chance you have of them completing your offer. People dread long tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-speed"&gt;
  &lt;/a&gt;
  Page Speed
&lt;/h2&gt;

&lt;p&gt;While not truly an "element", page speed is one of the most important aspects of a landing page. Nothing on the page matters if your customers leave cause your page took too long to load. We recommend utilizing static assets where possible as those generally can be easily cached and served faster. Use lazy-loading and compressed images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjAI5fM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa585lw9tw6qez8fvlqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjAI5fM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fa585lw9tw6qez8fvlqs.png" alt="Image description" width="432" height="293"&gt;&lt;/a&gt;&lt;br&gt;
Tools like PageSpeed Insights can help you get an idea of what can be changed for faster load times on your existing pages. You should aim around the 90s.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#policies"&gt;
  &lt;/a&gt;
  Policies
&lt;/h2&gt;

&lt;p&gt;Adding links to your policies can help clear additional doubts a user might have. It also helps establish the terms between both parties.&lt;/p&gt;

&lt;p&gt;Here are some policy pages you can link to on your landing page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terms &amp;amp; Conditions&lt;/li&gt;
&lt;li&gt;Privacy Policy&lt;/li&gt;
&lt;li&gt;Refund Policy&lt;/li&gt;
&lt;li&gt;Warranty Policy&lt;/li&gt;
&lt;li&gt;Disclosures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We hope the above has been insightful &amp;amp; will help you create landing pages that convert. If you’d like us to help you build one feel free to reach out.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>beginners</category>
    </item>
    <item>
      <title>TIL: Croc - Securely transfer files via CLI</title>
      <author>An Pham</author>
      <pubDate>Tue, 21 Dec 2021 15:09:31 +0000</pubDate>
      <link>https://dev.to/ancs21/til-croc-securely-transfer-files-via-cli-1ihm</link>
      <guid>https://dev.to/ancs21/til-croc-securely-transfer-files-via-cli-1ihm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/schollz/croc"&gt;croc&lt;/a&gt; is a tool that allows any two computers to simply and securely transfer files and folders.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;macOS
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install croc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ubuntu
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl https://getcroc.schollz.com | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Window
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scoop install croc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Send file or folder
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;croc send [file(s)-or-folder]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Receive the file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;croc [code from output]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More feature, please visit to &lt;a href="https://github.com/schollz/croc"&gt;https://github.com/schollz/croc&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 21 Dec 2021 14:49:39 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4aah</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remote-pairing-tips"&gt;
  &lt;/a&gt;
  Remote pairing tips
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/felvct"&gt;@felvct&lt;/a&gt; has some great tips for making your remote pairing sessions as productive as possible — super helpful in these times of remote work and social distancing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/felvct" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DzmRAca_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7QjpBTfD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/184651/04814e27-25cb-437e-977d-d5bfd8462b36.jpeg" alt="felvct"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/felvct/get-the-most-out-of-your-remote-pair-programming-sessions-2l7g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Get the most out of your (remote) pair programming sessions&lt;/h2&gt;
      &lt;h3&gt;Felix Vaucourt ・ Dec 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#happy-engineers-are-more-productive"&gt;
  &lt;/a&gt;
  "Happy engineers are more productive"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/apkoponen"&gt;@apkoponen&lt;/a&gt; has been in IT for 10 years and picked up a &lt;em&gt;few&lt;/em&gt; tips along the way. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/apkoponen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nyx90Xz_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Lb87kkYo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/341672/1a9fcadb-7312-4a42-9a41-404653df1b54.jpg" alt="apkoponen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/apkoponen/100-tips-on-software-developer-productivity-36if" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;100 Tips on Software Developer Productivity&lt;/h2&gt;
      &lt;h3&gt;Ari Koponen ・ Dec 15 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#avoiding-tutorial-hell"&gt;
  &lt;/a&gt;
  Avoiding tutorial hell
&lt;/h2&gt;

&lt;p&gt;Do you have some spare time to develop a project? &lt;a class="mentioned-user" href="https://dev.to/yuridevat"&gt;@yuridevat&lt;/a&gt; has a great framework for figuring out what to build. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/yuridevat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mqqgu1hQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7pt2folr--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384066/81336f86-4113-4ace-a390-210f80c1b5ac.png" alt="yuridevat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/yuridevat/how-i-come-up-with-project-ideas-and-never-faced-tutorial-hell-3287" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I come up with project ideas (and never faced tutorial hell)&lt;/h2&gt;
      &lt;h3&gt;𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻 ・ Dec 14 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#gotta-catch-em-all"&gt;
  &lt;/a&gt;
  Gotta catch 'em all!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/fidalmathew"&gt;@fidalmathew&lt;/a&gt; shows us how to build a Pokedex using React.js. Super cool!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/fidalmathew" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CN2G9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JgdVRviV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/714983/063558c2-23c2-45e9-b7ca-85ee33e62af8.png" alt="fidalmathew"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fidalmathew/build-pokemon-finder-using-react-and-pokeapi-5b5k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build Pokemon Finder using React and Pokeapi&lt;/h2&gt;
      &lt;h3&gt;Fidal Mathew ・ Dec 18 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-closure-with-javascript"&gt;
  &lt;/a&gt;
  Getting closure with Javascript
&lt;/h2&gt;

&lt;p&gt;In this post, &lt;a class="mentioned-user" href="https://dev.to/aruna"&gt;@aruna&lt;/a&gt; presents a great primer on closures in JS and their purpose.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aruna" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2Uujvez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6Ln-mF0r--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/744146/9920abb3-d96c-4003-918f-382230018c7d.jpg" alt="aruna"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aruna/the-wacky-world-of-closures-what-makes-them-useful-24a7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Wacky World of Closures &amp;amp; What Makes Them Useful&lt;/h2&gt;
      &lt;h3&gt;aruna-x ・ Dec 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-power-of-graphql-amp-apis"&gt;
  &lt;/a&gt;
  The power of GraphQL &amp;amp; APIs
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt; shows us how to get data from a GraphQL API (and shares some helpful definitions along the way). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/whitep4nth3r" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCrpC75f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uqkZs4wv--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/492757/3e8de3e2-8172-4cf6-958c-ed1221225d6a.jpg" alt="whitep4nth3r"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/whitep4nth3r/an-introduction-to-graphql-and-how-to-use-graphql-apis-13i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;An introduction to GraphQL and how to use GraphQL APIs&lt;/h2&gt;
      &lt;h3&gt;Salma Alam-Naylor ・ Dec 14 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#showing-the-world-your-skills-when-github-is-not-an-option"&gt;
  &lt;/a&gt;
  Showing the world your skills when GitHub is not an option
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/deleteman123"&gt;@deleteman123&lt;/a&gt; wrote this post for anyone who lives in a country that is unable to access GitHub. Nobody should be excluded from getting noticed as a developer just because of US export laws! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deleteman123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do_cmJ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fcDG_uU4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77392/2434afcd-acef-4b1f-a3fb-eeab4acec940.jpg" alt="deleteman123"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deleteman123/how-can-you-get-noticed-without-a-github-account-2h1h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How Can You Get Noticed Without a Github Account?&lt;/h2&gt;
      &lt;h3&gt;Fernando Doglio ・ Dec 18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to Dynamically Create Open Graph Images with Cloudinary and Next.js</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 21 Dec 2021 14:47:42 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/how-to-dynamically-create-open-graph-images-with-cloudinary-and-nextjs-1pn3</link>
      <guid>https://dev.to/braydoncoyer/how-to-dynamically-create-open-graph-images-with-cloudinary-and-nextjs-1pn3</guid>
      <description>&lt;p&gt;Have you wondered how sites like &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; create dynamic and engaging social sharing banners on Twitter, LinkedIn and Facebook?&lt;/p&gt;

&lt;p&gt;I &lt;a href="https://braydoncoyer.dev/blog/introducing-my-new-blogfolio"&gt;revamped my blogfolio&lt;/a&gt; this year and knew I didn't want to continue to create banner images for my articles, and manually create Open Graph images for my social outlets. &lt;/p&gt;

&lt;p&gt;I'm extremely happy with the result - now when I share my articles online, my Open Graph images look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNkeRGWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640022889/dynamic_og_images_preview_ovwxw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNkeRGWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640022889/dynamic_og_images_preview_ovwxw9.png" alt="Open Graph image contains article title, author, domain and article banner as an image underlay aligned on the right" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Graph image contains article title, author, domain and article banner as an image underlay aligned on the right&lt;/p&gt;

&lt;p&gt;In this article, I'll show you how to leverage the powerful Cloudinary API to create dynamic Open Graph images and banners for your website or blog. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Want to know the secret right away? We'll be passing various variables to the Cloudinary image request URL which will transform a template image and add an article title and banner image.&lt;/p&gt;

&lt;p&gt;Read on to learn how to do this, or check out my &lt;a href="https://github.com/braydoncoyer/braydoncoyer.dev"&gt;open source blogfolio on GitHub&lt;/a&gt; and see how I accomplished this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-open-graph-meta-tags"&gt;
  &lt;/a&gt;
  What are Open Graph meta tags?
&lt;/h2&gt;

&lt;p&gt;Open Graph meta tags help make your content more clickable, sharable and visible on the web, especially on social media.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;meta&lt;/code&gt; tags are small self-closing tags that inform the web how to display your content. The &lt;a href="https://ogp.me"&gt;Open Graph protocol&lt;/a&gt; is part of Facebook's endeavor to consolidate the various technologies and provide developers a single protocol to adhere to in order to allow content to display more richly on the internet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-cloudinary"&gt;
  &lt;/a&gt;
  Sign up for Cloudinary
&lt;/h2&gt;

&lt;p&gt;First, head to &lt;a href="https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/gle5rlywpxclhxkdtqur"&gt;Cloudinary&lt;/a&gt; and create an account.&lt;/p&gt;

&lt;p&gt;Cloudinary has a free tier containing 25 monthly credits, which can be consumed by transforming images, storing images and videos, and spending the bandwidth needed to access assets in your bucket.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;✨ Cloudinary gifts you extra monthly credits if you follow their social accounts and spread the word about the service through a message on your timeline. Look for these options on your Dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#upload-your-og-template-to-cloudinary"&gt;
  &lt;/a&gt;
  Upload your OG template to Cloudinary
&lt;/h2&gt;

&lt;p&gt;Next, either find or create a template image that will be used as a starting point for all of the Open Graph banners. This takes care of a lot of initial layout positioning and creates consistency for the OG images.&lt;/p&gt;

&lt;p&gt;The Twitter card images shown in the feed are a 1.91:1 ratio. ****If you're creating your own template, ensure to design it at the recommended resolution of 1200x630.&lt;/p&gt;

&lt;p&gt;As an example, here is a preview of the template I created for my blog. It contains the basic layout, a transparent section on the right-hand side for the article banner to be used as an underlay, and most importantly, contains the text that will remain constant for each social sharing image we create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WvHzQZtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023518/dynamic_og_template_preview_tjknx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WvHzQZtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023518/dynamic_og_template_preview_tjknx7.png" alt="For the purpose of this preview, I’ve included a visual transparent section of the template. When you export to png, this will not be visible." width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the purpose of this preview, I’ve included a visual transparent section of the template. When you export to png, this will not be visible.&lt;/p&gt;

&lt;p&gt;Once you've found or created a template, upload the image to Cloudinary under the Media Library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfI0FEvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfI0FEvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640023795/dynamic_og_upload_cloudinary_vzpacl.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-article-images-to-cloudinary"&gt;
  &lt;/a&gt;
  Add Article images to Cloudinary
&lt;/h3&gt;

&lt;p&gt;It’s also important that your article images are hosted on Cloudinary so you can easily reference the image name when performing the transformation via the API.&lt;/p&gt;

&lt;p&gt;You can either upload images to Cloudinary from your computer, or use one of their integrated tools to discover and import images into your media library. I use the built-in Unsplash integration to add my article banners to my library, but you can use other tools like Shutterstock and iStock.&lt;/p&gt;

&lt;p&gt;With the template and article images uploaded to Cloudinary, we're ready to move to Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-shared-seo-component"&gt;
  &lt;/a&gt;
  Create a Shared SEO Component
&lt;/h2&gt;

&lt;p&gt;This part is optional depending on your setup. &lt;/p&gt;

&lt;p&gt;I tend to create reusable layout components that I consume on each page depending on the need and purpose. &lt;/p&gt;

&lt;p&gt;If you already have a preexisting Next.js project, you may already have a reusable layout component. Either way, here's the general idea:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a layout component to be used on your article pages.&lt;/li&gt;
&lt;li&gt;Pass children (the actual page content) and render accordingly.&lt;/li&gt;
&lt;li&gt;Pass meta information to be used for SEO purposes, including information which will be used with Cloudinary.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of a layout component I've created called &lt;code&gt;Container&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`bg-white dark:bg-dark min-h-screen'}&amp;gt;
      &amp;lt;NavMenu /&amp;gt;
      &amp;lt;main className="flex flex-col mx-auto max-w-6xl justify-center px-4 bg-white dark:bg-dark prose prose-lg md:prose-xl dark:prose-dark relative"&amp;gt;
        {children}
      &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the snippet above, you can see that I have passed &lt;code&gt;children&lt;/code&gt; to this component which is rendered inside a &lt;code&gt;main&lt;/code&gt; element with appropriate Tailwind utility classes to achieve my desired layout for my blog.&lt;/p&gt;

&lt;p&gt;Since this component will be reused on every page of my application, we can also include SEO information and dynamically pass information based on which page is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customMeta&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// create a router to be used in the meta object below&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A description about my site&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path-to-an-image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;twitterHandle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://twitter.com/BraydonCoyer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;canonicalUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://braydoncoyer.dev&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customMeta&lt;/span&gt; &lt;span class="c1"&gt;// this replaces any properties that we pass to the component as props&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`bg-white dark:bg-dark min-h-screen'}&amp;gt;

            &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;{meta.title}&amp;lt;/title&amp;gt;
        &amp;lt;meta name="robots" content="follow, index" /&amp;gt;
        &amp;lt;meta content={meta.description} name="description" /&amp;gt;
        &amp;lt;meta
          property="og:url"
          content={`&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//braydoncoyer.dev${router.asPath}`}&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canonicalUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:site_name"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Braydon Coyer"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:card"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"summary_large_image"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:site"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;twitterHandle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article:published_time"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavMenu&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col mx-auto max-w-6xl justify-center px-4 bg-white dark:bg-dark prose prose-lg md:prose-xl dark:prose-dark relative"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this looks like a lot of code, we are simply crafting a meta object to be consumed inside the &lt;code&gt;Head&lt;/code&gt; component that Next.js exposes.&lt;/p&gt;

&lt;p&gt;This is enough to properly have your application leverage SEO: simply pass a few props to the &lt;code&gt;Container&lt;/code&gt; component and you should be good to go! &lt;/p&gt;

&lt;p&gt;However, notice that the &lt;code&gt;meta&lt;/code&gt; tags containing &lt;code&gt;og:image&lt;/code&gt; and &lt;code&gt;twitter:image&lt;/code&gt; using a static image URL. &lt;/p&gt;

&lt;p&gt;Let's make it dynamic with Cloudinary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-dynamic-og-image-with-the-cloudinary-api"&gt;
  &lt;/a&gt;
  Building a Dynamic OG Image with the Cloudinary API
&lt;/h2&gt;

&lt;p&gt;Cloudinary's API supports text and image overlays, providing an easy way to dynamically transform images. &lt;/p&gt;

&lt;p&gt;Utilizing the API is as simple as appending variables to the URL of an image hosted on Cloudinary. &lt;/p&gt;

&lt;p&gt;In the end, the URL may look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://res.cloudinary.com/braydoncoyer/image/upload/w_1200,h_630,c_fill,f_auto/w_580,h_630,c_fill,u_learn_tailwindplay_banner.jpg/fl_layer_apply,g_east/w_630,h_450,c_fit,co_rgb:FFFFFF,g_west,x_45,y_-40,l_text:arial_60_bold:Learn%20Tailwind%20with%20TailwindPlay/og_social_large.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The URL is a bit cumbersome, but let me break it down from top to bottom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;https://res.cloudinary.com/braydoncoyer/&lt;/code&gt; - a base URL containing my Cloudinary account name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image/upload&lt;/code&gt; - the asset type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_1200,h_630&lt;/code&gt; - the width and height for the entire image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c_fill&lt;/code&gt; - crop mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f_auto&lt;/code&gt; - automatically chooses the best format based upon which browser is being used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_580,h_630&lt;/code&gt; - the size of the image underlay.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u_learn_tailwindplay_banner.jpg&lt;/code&gt; - the name of the banner associated with the article.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fl_layer_apply&lt;/code&gt; - applies all chained transformations on the underlaid image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g_east&lt;/code&gt; - informs Cloudinary which sector on the image to place the underlay.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_630,h_450&lt;/code&gt; - the size of a text box&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;co_rgb:FFFFFF&lt;/code&gt; - specifies the text color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g_west,x_45,y_-40&lt;/code&gt; - determines which sector to place the text, and includes exact pixel positions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text:arial_60_bold:&lt;/code&gt; - font name and size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Learn%20Tailwind%20with%20TailwindPlay&lt;/code&gt; - the encoded text value to display on the left-side of the image.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;og_social_large.png&lt;/code&gt; - the name of the template uploaded to Cloudinary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-a-function-to-generate-the-cloudinary-url"&gt;
  &lt;/a&gt;
  Configure a function to generate the Cloudinary URL
&lt;/h3&gt;

&lt;p&gt;Manually creating a URL like this would be extremely tedious and time-consuming. To make the process easier, let's create a function to build the Cloudinary URL and return it to us. &lt;/p&gt;

&lt;p&gt;I've created a file called &lt;code&gt;generateSocialImage&lt;/code&gt; in my &lt;code&gt;lib&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateSocialImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://res.cloudinary.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleFont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;arial&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleExtraConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;580&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;underlayImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textAreaWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textAreaHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textLeftOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textBottomOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FFFFFF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;titleFontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// configure social media image dimensions, quality, and format&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imageHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c_fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f_auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// configure the underlay - the actual article banner&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;underlayClonfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImageWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImageHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`c_fill`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`u_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;underlayImage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/fl_layer_apply`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`g_east`&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// configure the title text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titleConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;`w_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`h_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textAreaHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c_fit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`co_rgb:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;g_west&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`x_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textLeftOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`y_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;textBottomOffset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;`l_text:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;titleFont&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;titleFontSize&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;titleExtraConfig&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// combine all the pieces required to generate a Cloudinary URL&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;cloudinaryUrlBase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imageConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;underlayClonfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;titleConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;imagePublicID&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// remove any falsy sections of the URL (e.g. an undefined version)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// join all the parts into a valid URL to the generated image&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validParts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the most part, you can plug in your information and the function will work as expected. You can tinker with the destructured props to change the position of the text and image to fit your needs.&lt;/p&gt;

&lt;p&gt;I call this function on my article page, where I can pass the article title and banner image to the function. The function returns the new Cloudinary URL and is then provided to the &lt;code&gt;Container&lt;/code&gt; component. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📣 Recall that the &lt;code&gt;Container&lt;/code&gt; component hosts the &lt;code&gt;meta&lt;/code&gt; tags needed for proper search engine optimization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please note the image named passed as &lt;code&gt;imagePublicID&lt;/code&gt; - this is the name of the template image uploaded to Cloudinary. Make sure you swap this name out to match the name of the template you uploaded in your Cloudinary media library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// [slug].ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socialImageConf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generateSocialImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;underlayImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;coverImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coverImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;cloudName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;braydoncoyer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;imagePublicID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og_social_large.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// the OG template image name uploaded in Cloudinary &lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;socialImageConf&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// pass the dynamic URL here&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'article'&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-your-social-sharing-open-graph-images"&gt;
  &lt;/a&gt;
  Testing your social sharing Open Graph images
&lt;/h2&gt;

&lt;p&gt;Once everything is hooked up and configured appropriately, you should be able to run your Next.js project ( &lt;code&gt;npm run dev&lt;/code&gt; ) and see the &lt;code&gt;meta&lt;/code&gt; tags on the DOM under the &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--09n7NdyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--09n7NdyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640024175/dynamic_og_constructued_url_ls7uma.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Look for the &lt;code&gt;og:image&lt;/code&gt; tag, copy the URL and paste it in a new tab. If everything works, you should see your new dynamic Open Graph image that will appear on social media outlets!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-online-tools-to-validate-the-open-graph-images"&gt;
  &lt;/a&gt;
  Using online tools to validate the Open Graph images
&lt;/h3&gt;

&lt;p&gt;Once your application is published, grab the full article slug and paste it into the textbox on &lt;a href="http://socialsharepreview.com"&gt;socialsharepreview.com&lt;/a&gt; - a tool that validates that your meta tags are correctly configured for the web.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvV6fq_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvV6fq_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" alt="https://res.cloudinary.com/braydoncoyer/image/upload/v1640024270/dynamic_og_check_preview_lkzcxh.png" width="832" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And with that - you've now created a system that dynamically creates Open Graph images for social outlets using Cloudinary and Next.js! &lt;/p&gt;

&lt;p&gt;If you've made it this far and completed this article, I'd love for you to reach out to me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt; and send me a link to your blog or website so I can see the Open Graph images at work!  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.contentful.com/blog/2021/09/08/personalized-image-social-sharing-with-cloudinary-nextjs/"&gt;How to build a personalized image social sharing app with Cloudinary and Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.juanfernandes.uk/blog/automated-open-graph-images-with-11ty-and-cloudinary/"&gt;Automated Open Graph Images with 11ty and Cloudinary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://urre.me/writings/dynamic-open-graph-images/"&gt;Dynamic Open Graph Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>cloudinary</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>What is 10DLC, and Why Should You Care?</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 21 Dec 2021 14:44:15 +0000</pubDate>
      <link>https://dev.to/mbogan/what-is-10dlc-and-why-should-you-care-16j8</link>
      <guid>https://dev.to/mbogan/what-is-10dlc-and-why-should-you-care-16j8</guid>
      <description>&lt;p&gt;10DLC stands for Ten Digit Long Code. Those who are familiar with United States phone numbers know that they’re made up of ten digits: a three-digit area code followed by a seven-digit number that identifies a person or business. A 10DLC is, essentially, a phone number in the United States. But more accurately, it is a phone number specifically sanctioned by telecom carriers for use in business messaging.&lt;/p&gt;

&lt;p&gt;In this post, we’ll look at the benefits of 10DLC for your business and the necessary steps to get started with 10DLC. Along the way, we’ll consider options for leveraging existing services to simplify the process of starting your 10DLC journey.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10dlc-numbers-for-customer-communication"&gt;
  &lt;/a&gt;
  10DLC: numbers for customer communication
&lt;/h3&gt;

&lt;p&gt;The use of 10DLC for business messaging is championed by the major telecoms to help protect their customers from spam and the misuse of traditional phone numbers and toll-free text numbers. 10DLC is designed for businesses that want to communicate directly with their customers for low-volume use cases like notifications, reminders, or multi-factor authentications.&lt;/p&gt;

&lt;p&gt;Sometimes, 10DLC is used interchangeably with A2P, which stands for application-to-person. Other times, you’ll see A2P and 10DLC used together. They all refer to the same thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-benefits-do-you-get-with-10dlc"&gt;
  &lt;/a&gt;
  What benefits do you get with 10DLC?
&lt;/h2&gt;

&lt;p&gt;The major benefit you get with 10DLC is &lt;strong&gt;consistency&lt;/strong&gt;. You’re contacting your customer base because you need to provide information or get them to take action in some way. Examples include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide a login code for two-factor authentication&lt;/li&gt;
&lt;li&gt;Remind a patient of a scheduled appointment&lt;/li&gt;
&lt;li&gt;Notify meet-up attendees of a change in location&lt;/li&gt;
&lt;li&gt;Send an updated home value for a recently completed appraisal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On these occasions, it would certainly be a poor user experience for your text to be flagged as spam and prevented from arriving. To use 10DLC for this communication, however, businesses go through an application process (that we’ll discuss in more detail below) to verify their identity and document their use case. By going through this verification process, you get the support and assurance from major carriers that your communication over 10DLC won’t be throttled or flagged as spam.&lt;/p&gt;

&lt;p&gt;In addition to stability and support from your provider, you also get another key aspect of customer communication: &lt;strong&gt;recognition&lt;/strong&gt;. Especially with the uptick in spam calls and texts (&lt;em&gt;By the way, your extended car warranty is expiring soon, so press 2 to speak with a representative&lt;/em&gt;), ensuring your business communication won’t get blocked is critical to a successful customer-business interaction. You even have the option to pick a local number so your customers know that it’s coming from a legitimate place.&lt;/p&gt;

&lt;p&gt;A 10DLC also brings &lt;strong&gt;centralization&lt;/strong&gt; to your business communication. Because 10DLC is text &lt;em&gt;and&lt;/em&gt; voice enabled, you can make calls and send texts from the same number. This is a great benefit to your customers; they can text your 10DLC if they’re unable to talk or call if they’re unable to text. You do, however, have the option to limit the communication channels if you’d like. For example, if you have two 10DLCs, then it’d be reasonable to reserve one for texting and another for calls, with voicemail enabled. This approach provides continuity on both communication paths for your business, providing a better experience for your customers.&lt;/p&gt;

&lt;p&gt;The last notable benefit of 10DLC is &lt;strong&gt;cost savings&lt;/strong&gt;. 10DLCs generally cost around the same as a traditional long code or a toll-free number: around $1 per month. This is in sharp contrast to a short code, which can range from $500 to $1000 per month!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-get-started-with-10dlc"&gt;
  &lt;/a&gt;
  How do you get started with 10DLC?
&lt;/h2&gt;

&lt;p&gt;If you plan to use a provider like T-Mobile or AT&amp;amp;T, your first step for using 10DLC will be to &lt;strong&gt;apply for a 10DLC status&lt;/strong&gt;. A status is a designation recognized by telecom providers that acts as a verification for your business or use case. After you apply, your status will be either unverified or verified.&lt;/p&gt;

&lt;p&gt;An unverified status generally indicates that there was a problem with your application causing your business to not be registered with &lt;a href="https://www.campaignregistry.com/"&gt;The Campaign Registry&lt;/a&gt; (TCR), which is the reputation authority for business messaging. A verified status indicates that your application went through successfully. Having successfully registered with TCR, you can purchase 10DLC numbers and submit applications for messaging use cases (which are called “campaigns”).&lt;/p&gt;

&lt;p&gt;Above, we mentioned that this application for status applies if you want to use T-Mobile or AT&amp;amp;T.&lt;/p&gt;

&lt;p&gt;At the time of writing, Verizon is a bit of a special case, in that they don’t require you to apply for a status. Instead, Verizon uses its own filtering mechanism to determine what communication is spam and what isn’t.&lt;/p&gt;

&lt;p&gt;Each provider has different message throughput limits, and the throughput given to your business also depends on its size. For example, small- to medium-sized businesses using AT&amp;amp;T have a throughput of 75-240 messages per minute. With T-Mobile, throughput for small-ish businesses might be around 2000-10000 messages per day.&lt;/p&gt;

&lt;p&gt;While applying for a 10DLC status is straightforward, where you go from there can quickly become complicated. You also need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase (and manage) your 10DLC numbers&lt;/li&gt;
&lt;li&gt;Send campaign applications to providers to let them know what kinds of messages you plan on sending&lt;/li&gt;
&lt;li&gt;Connect your 10DLC numbers to your messaging application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#go-it-alone-or-leverage-a-service"&gt;
  &lt;/a&gt;
  Go it alone, or leverage a service?
&lt;/h3&gt;

&lt;p&gt;The adventurous types might try to do all of the above on their own, cobbling all the pieces together themselves. In my opinion, it’s probably a better use of your time to leverage existing services that can help you manage these low-level concerns. That way, you can focus on building business value—developing your messaging application and fine-tuning your customer experience.&lt;/p&gt;

&lt;p&gt;There are different services out there that can help bootstrap your 10DLC initiative. Some offerings assist you through the application process with TCR, ensuring you get the best possible messaging throughput for your type of business. You can also get campaign management and a REST API for managing 10DLC numbers and messages.&lt;/p&gt;

&lt;p&gt;One of the tools I found out there is called &lt;a href="https://www.openmarket.com/resources/how-to-get-started-with-10dlc-messaging/"&gt;Numbers&lt;/a&gt;, which comes from OpenMarket (Infobip). It’s an all-encompassing tool, starting with the first step of brand registration all the way through messaging application integrations and APIs.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.infobip.com/docs/api#platform-&amp;amp;-connectivity/numbers"&gt;Numbers API from Infobip&lt;/a&gt; lets you handle all of your number management (purchasing, setting up, configuring), while the &lt;a href="https://www.infobip.com/docs/api#channels/sms"&gt;SMS API&lt;/a&gt; lets you programmatically handle sending, receiving, and scheduling messages, along with coordinating two-factor authentication. Overall, these third-party APIs free up developers from having to roll their own solutions so they can keep their attention on core business needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h3&gt;

&lt;p&gt;We started with this question: &lt;em&gt;Why should you care about 10DLC?&lt;/em&gt; Ultimately, 10DLC provides some key benefits to help your business succeed. A 10DLC gives you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A supported path to communicate with your customers. Using a 10DLC helps you avoid getting flagged as spam which will negatively impact your customer communication. You also get the support of the major telecom providers.&lt;/li&gt;
&lt;li&gt;Savings. 10DLCs cost less to operate than other options like an SMS short code or a toll-free number. Not only is a 10DLC the right tool for communicating with your customers, but it also helps your bottom line!&lt;/li&gt;
&lt;li&gt;Improved reach and recognition. 10DLCs can be local numbers that are recognizable to your customers, and they can be voice &lt;em&gt;and&lt;/em&gt; text enabled. This gives you multiple options for communicating with your customers and also ensures a higher probability of reaching them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With advantages ranging from reputable pathways to cost savings and even improved reach, it’s no wonder so many businesses rely on 10DLCs. Perhaps your company will now join the many others who are already dialing and texting their customers!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Using Variables in CSS</title>
      <author>Tim Smith</author>
      <pubDate>Tue, 21 Dec 2021 14:40:32 +0000</pubDate>
      <link>https://dev.to/iam_timsmith/using-variables-in-css-1a61</link>
      <guid>https://dev.to/iam_timsmith/using-variables-in-css-1a61</guid>
      <description>&lt;p&gt;When I was first starting to learn web development, I remember being annoyed with writing the same hex code for a color over and over then finding out the color had to change and searching through code to find every instance. It was a huge pain! At the time, this was one of the pain points that made &lt;a href="https://www.iamtimsmith.com/blog/how-to-use-styles-in-a-react-js-application"&gt;css preprocessors like Sass&lt;/a&gt; and Less so appealing since they allowed you to use variables in your styles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yYSSBtDgbbRzq/giphy.gif" alt="CSS is hard" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, we live in a golden age of technology for web development where smart and passionate people are pushing the boundaries of what our tooling can do. As such, engineers have been hard at work making improvements to plain old css. One such improvement is the ability to use variables within your &lt;code&gt;.css&lt;/code&gt; files! In this article, I'll teach you how to use variables in your css files and what the limitations are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-are-css-variables-important"&gt;
  &lt;/a&gt;
  Why are CSS variables important?
&lt;/h2&gt;

&lt;p&gt;If you've been writing css for a while (or haven't), I'm sure you've encountered a file with the same color value peppered in throughout the code. Even worse is when you have the same value used across several files. Simply having them there isn't such a big deal, but what if you need to change them down the road? You'll have to find every instance of that color and change it manually. It also means that if you are going to do something like a light and dark theme, you'll have to write duplicate code for each theme based on class. Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body.light {
    background: #fff;
    color: #ff0000;
    font-size: 16px;
}

body.light button {
    background: #ff0000;
    color: #fff;
    border: 1px solid #ff0000;
}

body.dark {
    background: #222;
    color: #c0ffee;
    font-size: 16px;
}

body.dark button {
    background: #c0ffee;
    color: #222;
    border: 1px solid #c0ffee;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously the code above wouldn't be &lt;em&gt;that&lt;/em&gt; big of a deal to change, but if this file continued on and on with these colors you can imagine why it would be useful to make a change in one place and have it update everywhere. The code below shows how this code can work with variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
    background: var(--primary);
    color: var(--secondary);
    font-size: 16px;
}

button {
    background: var(--secondary);
    color: var(--primary);
    border: 1px solid var(--secondary);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how concise the code is in the example. Because the values for variables can be reassigned, the &lt;code&gt;--primary&lt;/code&gt; variable can be changed based on the body class rather than duplicating code with different values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-variables-in-css"&gt;
  &lt;/a&gt;
  How to set up variables in CSS
&lt;/h2&gt;

&lt;p&gt;To create a variable in your CSS, you need to decide what the scope of the variable will be. Variable creation is the same regardless of the scope, so the code below will apply anywhere although the selector may be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.sample-selector {
    --color: purple;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above shows how you can create an element with the &lt;code&gt;sample-selector&lt;/code&gt; class. You will be able to access the &lt;code&gt;--color&lt;/code&gt; variable from any child of the &lt;code&gt;.sample-selector&lt;/code&gt; element. You can also create global css variables by using the &lt;code&gt;:root&lt;/code&gt; selector which targets the &lt;code&gt;html&lt;/code&gt; element. The &lt;code&gt;--color&lt;/code&gt; assignment using the root selector would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
    --color: purple;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the variable is assigned to the root element, you can use it anywhere in the styles with no problem. Going back to the idea of using themes, you could set a different variable value based on what class is assigned to the html element. That would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root.light {
    --primary: #fff;
    --secondary: #ff0000;
}
:root.dark {
    --primary: #222;
    --secondary: #c0ffee;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using CSS variables in this way, you don't have to add styles for both light and dark themes on each element. Instead, you can use and reuse a variable with a different value based on the theme class assigned to a given element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-there-any-limitations"&gt;
  &lt;/a&gt;
  Are there any limitations?
&lt;/h2&gt;

&lt;p&gt;Although css variables have solved a lot of problems for front-end developers, it is not without flaws. If you've spent time writing SCSS or something similar, you may have used variables and mixins to handle media queries. This cannot be done with CSS variables which is a bit of a bummer. In addition, CSS variables can't store a url. This would be useful if you had to reuse an image in different places, but it doesn't work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hGUsHFdmERpc1VpoCA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hGUsHFdmERpc1VpoCA/giphy.gif" alt="I do have boundaries" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Overall, CSS variables are a very cool innovation within your styles. They make it very easy to not only write reusable styles, but update them or expand on them further down the road. I highly recommend checking them out in your next project and seeing what you think about them.&lt;/p&gt;

&lt;p&gt;Have questions? You can find me on Twitter at &lt;a href="https://www.twitter.com/iam_timsmith"&gt;@iam_timsmith&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>tutorials</category>
    </item>
    <item>
      <title>Top React Native UI Component Libraries</title>
      <author>Katarina Harbuzava</author>
      <pubDate>Tue, 21 Dec 2021 14:38:31 +0000</pubDate>
      <link>https://dev.to/anaflatlogic/top-react-native-ui-component-libraries-1afg</link>
      <guid>https://dev.to/anaflatlogic/top-react-native-ui-component-libraries-1afg</guid>
      <description>&lt;p&gt;React Native was created by Facebook to accelerate and reduce the cost of developing mobile applications. It is clear that React Native is currently the best solution for creating cross-platform mobile applications.&lt;/p&gt;

&lt;p&gt;Under the hood React Native uses the Javascript bridge to interpret the UI components for rendering and then calls Objective-C or Java API to display the corresponding iOS or Android component. This bridge is an extra layer of abstraction that may cause a more extended and laborious development process.&lt;/p&gt;

&lt;p&gt;The React Native solution was used in the development of Facebook Ads, Instagram, Pinterest, Skype, Airbnb, Yeti Smart Home, Uber Eats, and many more. The projects speak for themselves.&lt;/p&gt;

&lt;p&gt;With the development of React Native technology and gaining more and more trust from the community, tools began to appear to facilitate and accelerate development based on the technology – such as ready-made React Native libraries and UI components.&lt;/p&gt;

&lt;p&gt;In this article, we will share a list of the best free React Native UI components, which designers and developers can use to jumpstart the design &amp;amp; development of their next mobile project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-react-native-ui-component"&gt;
  &lt;/a&gt;
  What is a React Native UI component?
&lt;/h3&gt;

&lt;p&gt;React Native UI Component is a mobile application element that is isolated from other elements and can be reused several times. For example, it can be a button to buy a product or a subscription.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react-native-ui-component-library"&gt;
  &lt;/a&gt;
  Why use React Native UI component library?
&lt;/h3&gt;

&lt;p&gt;Much like React itself, React Native encourages you to build your UI using isolated components. React Native UI Component libraries and UI toolkits help you save time and build your applications faster using a pre-made set of components.&lt;/p&gt;

&lt;p&gt;React Native UI Kit is a very useful thing. It’s basically a set of ready-made interface elements (and sometimes APIs) you can use when creating your application. Thus, you can release an MVP project in a matter of weeks, saving time on the development of interface components and concentrating on the business logic itself. Of course, there are a lot fewer UI Kits for React Native than there are for React.js, but all of these existing are made by professionals, each in the same style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-choose-a-react-native-ui-component"&gt;
  &lt;/a&gt;
  How to choose a React Native UI component?
&lt;/h3&gt;

&lt;p&gt;In order to choose a library or an already written application with ready-made React Native UI components, you can use the following decision-making criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price&lt;/li&gt;
&lt;li&gt;Easy to start&lt;/li&gt;
&lt;li&gt;Popularity (stars on GitHub)&lt;/li&gt;
&lt;li&gt;Quality and support speed&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#top-react-native-ui-components"&gt;
  &lt;/a&gt;
  Top React Native UI components
&lt;/h3&gt;

&lt;p&gt;Let’s move on to our React Native UI components list. While choosing the following tools we have kept in mind things like trustworthiness, price, documentation, and other important factors one uses for evaluating software.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-elements"&gt;
  &lt;/a&gt;
  React Native Elements
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://react-native-elements.github.io/react-native-elements/"&gt;https://react-native-elements.github.io/react-native-elements/&lt;/a&gt;&lt;br&gt;
GitHub stars: 18.9k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT&lt;br&gt;
Demo: &lt;a href="https://expo.io/@monte9/react-native-elements-app"&gt;https://expo.io/@monte9/react-native-elements-app&lt;/a&gt;&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TkHVyc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzvbppcsbspubggcbyh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TkHVyc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzvbppcsbspubggcbyh5.png" alt="Image description" width="880" height="536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Native Elements is a cross-platform React Native UI toolkit that puts together a number of great open-source UI components made by developers. Here’s what the library’s authors state: “The idea with React Native Elements is more about component structure than actual design, meaning less boilerplate in setting up certain elements but full control over their design”. This seems appealing for both new developers and seasoned veterans.&lt;/p&gt;

&lt;p&gt;The package includes a whole basket of components such as pricing, badge, overlay, divider, and platform-specific search bars. They are easy to use and quite customizable. The props for all the components are defined in one central location, which makes it possible to easily update or modify components. Additionally, it can serve as a platform connecting small teams developing commercial React Native apps with open source contributions.&lt;/p&gt;

&lt;p&gt;If you’re going to design an application that looks universal across platforms, this is a perfect option. The documentation clearly explains how to customize the available components with simplicity, and comes with a set of beautiful icons.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#key-facts"&gt;
  &lt;/a&gt;
  Key facts:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;All-in-one UI kit&lt;/li&gt;
&lt;li&gt;Supports iOS and Android&lt;/li&gt;
&lt;li&gt;Supports Expo&lt;/li&gt;
&lt;li&gt;Comprehensive documentation&lt;/li&gt;
&lt;li&gt;A decent list of small components like avatar, buttons, form elements, icons, typography, sliders&lt;/li&gt;
&lt;li&gt;Complex elements like pricing, rating, card, search bar, checkbox, list items&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#react-native-starter-kit-by-flatlogic"&gt;
  &lt;/a&gt;
  React Native Starter Kit by Flatlogic
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://flatlogic.com/templates/react-native"&gt;https://flatlogic.com/templates/react-native&lt;/a&gt;&lt;br&gt;
GitHub stars: 1k&lt;br&gt;
Price: Free, $99.95, $449.95&lt;br&gt;
License: Mozilla Public License 2.0&lt;br&gt;
Demo: &lt;a href="https://play.google.com/store/apps/details?id=com.reactnativestarter.app"&gt;https://play.google.com/store/apps/details?id=com.reactnativestarter.app&lt;/a&gt;&lt;br&gt;
Type of support: Dedicated support via email&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---3R49Sy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiqy9mtcfx7kdho910ou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3R49Sy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jiqy9mtcfx7kdho910ou.png" alt="Image description" width="568" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Native Starter is a mobile application template that contains many ready-to-use components and pages, including theme support.  The product is actually a mobile application template with lots of built-in components like sidebar, navigation, form elements, etc – all you need to start building your mobile app faster. You won’t spend lots of time building your app from scratch.&lt;/p&gt;

&lt;p&gt;This starter kit is perfect for eCommerce applications, offering lifetime updates and support. The design itself is clean, modern and eye-catching. Trends like color gradients and simple curves are also there.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key features:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Supports iOS and Android;&lt;/li&gt;
&lt;li&gt;16 pre-built components;&lt;/li&gt;
&lt;li&gt;Chat application;&lt;/li&gt;
&lt;li&gt;Multiple colors schemes;&lt;/li&gt;
&lt;li&gt;Selection of UI elements;&lt;/li&gt;
&lt;li&gt;Modular architecture;&lt;/li&gt;
&lt;li&gt;Easy analytics integration (GA, Firebase, etc);&lt;/li&gt;
&lt;li&gt;Sign in/signup screens;&lt;/li&gt;
&lt;li&gt;6 Color Themes;&lt;/li&gt;
&lt;li&gt;Simple customization (using themes and plop generator);&lt;/li&gt;
&lt;li&gt;Built without Expo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#nativebase"&gt;
  &lt;/a&gt;
  NativeBase
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://nativebase.io/"&gt;https://nativebase.io/&lt;/a&gt;&lt;br&gt;
GitHub stars: 13.9k&lt;br&gt;
Price: Free&lt;br&gt;
License: Apache License 2.0&lt;br&gt;
Demo: &lt;a href="https://expo.io/@geekyants/nativebasekitchensink"&gt;https://expo.io/@geekyants/nativebasekitchensink&lt;/a&gt;&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajXl8HBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge5sr5n0md9bwl9fpi2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajXl8HBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge5sr5n0md9bwl9fpi2k.png" alt="Image description" width="880" height="812"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NativeBase is a collection of essential cross-platform React Native components: a good place to start building your app. The components are built with React Native combined with some JavaScript functionality with customizable properties. NativeBase is fully open-source and has 12,000+ stars on GitHub.&lt;/p&gt;

&lt;p&gt;When using NativeBase, you can use any native third-party libraries out of the box. The project itself comes with a rich ecosystem around it, from useful starter kits to customizable theme templates. Here’s a nice starter kit: the template acts as a wrapper on most of the native React components (such as buttons, text fields, views, keyboard views, list views, etc), and enriches them by adding extra functionality (e.g. rounded corners, shadows, etc).&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#what-it-offers"&gt;
  &lt;/a&gt;
  What it offers:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Easy component styling&lt;/li&gt;
&lt;li&gt;Wide range of component options&lt;/li&gt;
&lt;li&gt;Use any native third-party libraries&lt;/li&gt;
&lt;li&gt;Import custom components&lt;/li&gt;
&lt;li&gt;Intuitive component structure&lt;/li&gt;
&lt;li&gt;3 preset themes (Platform, Material, and CommonColor)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lottie-wrapper-for-react-native"&gt;
  &lt;/a&gt;
  Lottie Wrapper for React Native
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://github.com/react-native-community/lottie-react-native"&gt;https://github.com/react-native-community/lottie-react-native&lt;/a&gt;&lt;br&gt;
GitHub stars: 13.1k&lt;br&gt;
Price: Free&lt;br&gt;
License: Apache License 2.0&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owG_ViWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13c4ar545z1mgwpmm5ap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owG_ViWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/13c4ar545z1mgwpmm5ap.png" alt="Image description" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lottie is a mobile library that parses Adobe After Effects animations natively on mobile. It works by exporting animation data in JSON format from an After Effects extension, BodyMovin. This extension is bundled with a JS player to render animations on the web.&lt;/p&gt;

&lt;p&gt;Lottie libraries and plugins are available for free. You can also use the curated collection of animation files to make your apps attractive and interesting. The animation files are small in size and are in vector format, meaning that you won’t experience any impact on your app performance. At the same time, it can spice up your UI and make it more visually appealing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-vector-icons"&gt;
  &lt;/a&gt;
  React Native Vector Icons
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://oblador.github.io/react-native-vector-icons/"&gt;https://oblador.github.io/react-native-vector-icons/&lt;/a&gt;&lt;br&gt;
GitHub stars: 13.5k&lt;br&gt;
Price: Free&lt;br&gt;
License: Apache License 2.0&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Z5_5XQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqhgjr4i1tjkxfnz8dv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Z5_5XQj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqhgjr4i1tjkxfnz8dv2.png" alt="Image description" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This library is basically a set of customizable icons for React Native with support for NavBar/TabBar/ToolbarAndroid, image source, and full styling. The library provides pre-made bundled icon sets out of the box, and here are full examples of all the icons in the library.&lt;/p&gt;

&lt;p&gt;The package supports TabBar and Toolbar Android, as well as the image source and multi-style font. It draws on React Native’s animated library combining it with an icon to create an animated component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-gifted-chat"&gt;
  &lt;/a&gt;
  React Native Gifted Chat
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://github.com/FaridSafi/react-native-gifted-chat"&gt;https://github.com/FaridSafi/react-native-gifted-chat&lt;/a&gt;&lt;br&gt;
GitHub stars: 9.4k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oefkmmyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqxi0n8uocrlb2dfgcii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oefkmmyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqxi0n8uocrlb2dfgcii.png" alt="Image description" width="405" height="780"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React-native-gifted-chat offers fully customizable components, multiline text input, avatars, copying messages to the clipboard, attachment options etc. Written with TypeScript, it includes fully customizable components that help load earlier messages or copy messages to clipboard and more. There’s an InputToolbar too, helping users skip the keyboard.&lt;/p&gt;

&lt;p&gt;To enhance user experience, it enables Avatar as user’s initials, localized dates, multi-line TextInput, quick reply messages (bot) and system message. There’s support for Redux too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-mapview"&gt;
  &lt;/a&gt;
  React Native Mapview
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://github.com/react-native-community/react-native-maps"&gt;https://github.com/react-native-community/react-native-maps&lt;/a&gt;&lt;br&gt;
GitHub stars: 11.2k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJnxva-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4oxxdhb9wcw35x9ok9sd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJnxva-T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4oxxdhb9wcw35x9ok9sd.png" alt="Image description" width="258" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the React Native component libraries that offers map components for Android and iOS is React Native Mapview. Here, common features on any map (such as markers and polygons) are specified as children of the Mapview component.&lt;/p&gt;

&lt;p&gt;There’s a lot you can do to customize the map style. You’ll be able to change map view position, track region/location, and make points of interest clickable on Google Maps. You can enable zooming in to specified markers or coordinates, or even animate them. If you assign an animated region value to the prop, Mapview can utilize the Animated API to control the map’s center and zoom. Unless you specify custom markers, default markers will be rendered.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-ui-kitten"&gt;
  &lt;/a&gt;
  React Native UI Kitten
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://akveo.github.io/react-native-ui-kitten/"&gt;https://akveo.github.io/react-native-ui-kitten/&lt;/a&gt;&lt;br&gt;
GitHub stars: 6.7k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: &lt;a href="https://play.google.com/store/apps/details?id=com.akveo.kittenTricks"&gt;https://play.google.com/store/apps/details?id=com.akveo.kittenTricks&lt;/a&gt;&lt;br&gt;
Type of support: Dedicated support for the paid version&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMaxd2Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxgtji49z0f3d7psaegt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMaxd2Hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxgtji49z0f3d7psaegt.png" alt="Image description" width="610" height="1214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image source: &lt;a href="https://akveo.github.io/react-native-ui-kitten/"&gt;https://akveo.github.io/react-native-ui-kitten/&lt;/a&gt;&lt;br&gt;
React Native UI Kitten – a React Native implementation of the Eva Design system. It offers a set of about 20 general-purpose components styled in the same way to take care of visual appearance. There are a lot of standalone components available as well. The library is based on Eva Design System, containing a set of general-purpose UI components styled in a similar way.&lt;/p&gt;

&lt;p&gt;UI Kitten stores style definitions separately from business logic. UI elements are styled in the same manner. This concept is similar to CSS, where style classes are separate from the code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#shoutem"&gt;
  &lt;/a&gt;
  Shoutem
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://shoutem.github.io/"&gt;https://shoutem.github.io/&lt;/a&gt;&lt;br&gt;
GitHub stars: 4.5k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nb8Au4TB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhuuupicu6uvlsrpyzzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nb8Au4TB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uhuuupicu6uvlsrpyzzj.png" alt="Image description" width="308" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shoutem is an app-building platform that works by using extensions or modular building blocks, somewhat like building a website with plugins on WordPress. Extensions include galleries for photos and videos, products, events, restaurant menus, and more.&lt;/p&gt;

&lt;p&gt;Shoutem offers many mobile back-end services such as analytics, user authentication, layouts, push notifications, and more. Also, there are many well-coded themes for you to use and customize.&lt;/p&gt;

&lt;p&gt;This open-source UI toolkit helps you design professional-looking solutions. Each component has a predefined style and can be composed with others. These predefined components are elegant but seem a bit more biased towards iOS style guidelines. Along with components, it comes with basic Animation that is suitable for using its own UI toolkit and themes to build amazing React Native applications.&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;20+ UI components&lt;/li&gt;
&lt;li&gt;Variety of app themes&lt;/li&gt;
&lt;li&gt;Parallax effects&lt;/li&gt;
&lt;li&gt;Transition animations&lt;/li&gt;
&lt;li&gt;Large extension library&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#react-native-paper"&gt;
  &lt;/a&gt;
  React Native Paper
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://reactnativepaper.com/"&gt;https://reactnativepaper.com/&lt;/a&gt;&lt;br&gt;
GitHub stars: 6k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmSMYVPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0du5vvn6xmeecwlpo31c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmSMYVPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0du5vvn6xmeecwlpo31c.png" alt="Image description" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Native Paper is a cross-platform UI component library that follows the Material Design guidelines. Global theming support and an optional babel plugin to reduce bundle size are also there.&lt;/p&gt;

&lt;p&gt;Paper is cross-platform and works on both web and mobile. There are components and interactions to suit almost every use-case scenario. Most details, including animations, accessibility, and UI logic are taken care of. &lt;/p&gt;

&lt;p&gt;Here are the main features of Paper: it follows material design guidelines, it works on both iOS and Android following platform-specific guidelines and it also has full theming support.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#react-native-material-kit"&gt;
  &lt;/a&gt;
  React Native Material Kit
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="http://xinthink.github.io/react-native-material-kit/"&gt;http://xinthink.github.io/react-native-material-kit/&lt;/a&gt;&lt;br&gt;
GitHub stars: 4.7k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9jWbDsOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orydauwn42gpw4j49yyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jWbDsOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orydauwn42gpw4j49yyh.png" alt="Image description" width="614" height="491"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside React Native Material Kit there are buttons, cards, range sliders, and text fields. You’ll also see spinners and progress bars to display loading, as well as toggles for switches, radio buttons, and checkboxes.&lt;/p&gt;

&lt;p&gt;It provides a complete Material Design solution for the UI and is better maintained than other UI kits available for React Native. It works great even on an iOS device by giving an accurate Android UI feel. It does provide an API to develop your own customized components.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#key-facts"&gt;
  &lt;/a&gt;
  Key facts:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Material Design-based components&lt;/li&gt;
&lt;li&gt;Dynamic components that are not available on some frameworks&lt;/li&gt;
&lt;li&gt;Advanced API for building custom components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#nachos-ui-kit"&gt;
  &lt;/a&gt;
  Nachos UI Kit
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://avocode.com/nachos-ui"&gt;https://avocode.com/nachos-ui&lt;/a&gt;&lt;br&gt;
GitHub stars: 2k&lt;br&gt;
Price: From 15$ per month&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: –&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1n8r71kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62gzyw2ir1dw9vr8h1dd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1n8r71kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/62gzyw2ir1dw9vr8h1dd.png" alt="Image description" width="512" height="908"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nachos UI provides over 30 UI components that are available in plug-n-play mode. It does provide some nice-looking components that can be customized. &lt;/p&gt;

&lt;p&gt;The product facilitates customizable UI components that work on the web. It also provides Jest Snapshot testing and uses a prettier. The components were coded using Avocode, which is a fully-featured platform for sharing, hands-off, and inspecting Photoshop and Sketch designs.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key features:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;30+ pre-coded UI components including typography, radio, spinner, slider, card, etc.&lt;/li&gt;
&lt;li&gt;React Native Web support&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#material-kit-react-native"&gt;
  &lt;/a&gt;
  Material Kit React Native
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://www.creative-tim.com/product/material-kit-pro-react-"&gt;https://www.creative-tim.com/product/material-kit-pro-react-&lt;/a&gt;&lt;br&gt;
native/&lt;br&gt;
GitHub stars: &amp;lt;1k&lt;br&gt;
Price: Free, $149&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: &lt;a href="https://demos.creative-tim.com/material-kit-pro-react-native/"&gt;https://demos.creative-tim.com/material-kit-pro-react-native/&lt;/a&gt;&lt;br&gt;
Type of support: Dedicated support for paid version&lt;br&gt;
Documentation: Full documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eC5mBNrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpc7if808hvddmqi4u5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eC5mBNrk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpc7if808hvddmqi4u5.png" alt="Image description" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Material Kit React Native offers a free native app template with Material Design built with the Galio framework. It’s easy to use, including 100+ handcrafted elements like buttons, cards, navigation, and inputs. All components can take on color variations by making changes to the theme. Additionally, there are five customized plugins and five example pages.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Built over Galio.io&lt;/li&gt;
&lt;li&gt;200 handcrafted elements&lt;/li&gt;
&lt;li&gt;Five customized plugins&lt;/li&gt;
&lt;li&gt;Five example pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#react-native-material-ui"&gt;
  &lt;/a&gt;
  React Native Material UI
&lt;/h4&gt;

&lt;p&gt;Web-site: &lt;a href="https://github.com/xotahal/react-native-material-ui"&gt;https://github.com/xotahal/react-native-material-ui&lt;/a&gt;&lt;br&gt;
GitHub stars: 3.5k&lt;br&gt;
Price: Free&lt;br&gt;
License: MIT License&lt;br&gt;
Demo: &lt;a href="https://github.com/xotahal/react-native-material-ui/blob/master/docs/Demo.md"&gt;https://github.com/xotahal/react-native-material-ui/blob/master/docs/Demo.md&lt;/a&gt;&lt;br&gt;
Type of support: Community support via GitHub issues&lt;br&gt;
Documentation: Limited documentation&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IXAv5khk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b4a1kzwza9u7sgbijah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IXAv5khk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b4a1kzwza9u7sgbijah.png" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The React Native Material UI offers about 20 components for React Native. The components include action buttons, avatars, subheaders, drawers, dividers, toolbars, and more. These components are highly customizable and use Material Design in their construct.&lt;/p&gt;

&lt;p&gt;The components are self-supporting and will integrate (and only integrate) the styles they need to display. They are independent of any global stylesheets. Material-UI is developed for mobile-first application UI design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are the best React Native UI Kits on the market we’ve selected for you. The most advanced solutions, such as the React Native Starter Kit or NativeBase, are presented in the first part. In the second part, we have collected projects you can integrate into your existing project as a good addition. &lt;/p&gt;

&lt;p&gt;All of these tools make your development much faster and more convenient. We recommend you do your own analysis before choosing the best library for your project. This way you will know for sure what suits your project and needs better.&lt;/p&gt;

&lt;p&gt;If you’d like to integrate a library into your existing React Native project, or if you plan to create a cross-platform app from scratch, be sure to contact us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flatlogic"&gt;
  &lt;/a&gt;
  Flatlogic
&lt;/h3&gt;

&lt;p&gt;At Flatlogic we have built a development platform that simplifies the creation of web applications – we call it Web App Generator. The tool allows you to create a fully working full-stack CRUD app in minutes, you just need to choose the stack, design, and define the database model with help of an online interface and that is all. Moreover, you can preview generated code, push it to your GitHub repo and get the automatically generated REST API docs. Try it for free!&lt;/p&gt;

&lt;p&gt;Please see the guide below on how to do the full-stack web app based on React with help of Flatlogic Generator.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-%E2%84%961-choose-your-projects-name"&gt;
  &lt;/a&gt;
  Step №1. Choose your projects name
&lt;/h4&gt;

&lt;p&gt;Any good story starts with a title, any good React App starts with a name. So, summon all of your wit and creativity and write your project’s name into the fill-in bar in Flatlogic’s Full Stack Web App Generator.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2J4yFdHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ms28eim8kpv5calcbmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2J4yFdHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ms28eim8kpv5calcbmd.png" alt="Image description" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-%E2%84%962-select-your-react-app-stack"&gt;
  &lt;/a&gt;
  Step №2. Select your React App Stack
&lt;/h4&gt;

&lt;p&gt;At this step, you will need to choose the frontend, backend, and database stack of your app. And, to correlate with our illustrative React App, we will choose here React for the frontend, Node.js for the back-end, and MySQL for the database.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_77Yr-7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmsfqlni3q1qws3m45b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_77Yr-7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmsfqlni3q1qws3m45b.png" alt="Image description" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-%E2%84%963-choose-your-react-app-design"&gt;
  &lt;/a&gt;
  Step №3. Choose your React App Design
&lt;/h4&gt;

&lt;p&gt;As we’ve already mentioned, design is quite important. Choose any from a number of colorful, visually pleasing, and, most importantly, extremely convenient designs Flatlogic’s Full Stack Web App Generator presents.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vWhF1Rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwp2wv3mmy6aftj06n0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vWhF1Rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwp2wv3mmy6aftj06n0t.png" alt="Image description" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-%E2%84%964-create-your-react-app-database-schema"&gt;
  &lt;/a&gt;
  Step №4. Create your React App Database Schema
&lt;/h4&gt;

&lt;p&gt;You can create a database model with a UI editor. There are options to create custom tables, columns, and relationships between them. So, basically, you can create any type of content. Moreover, you will receive automatically generated REST API docs for your application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVCK9lEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8k5bah04zbafuhlu5ra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVCK9lEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8k5bah04zbafuhlu5ra.png" alt="Image description" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-%E2%84%965-review-and-generate-your-react-app"&gt;
  &lt;/a&gt;
  Step №5. Review and Generate your React App
&lt;/h4&gt;

&lt;p&gt;In the final step, just to make sure everything is as you want it to be, you can review all of the previously made decisions and click the “Create Project” button. After a short time to generate, you will have at your fingertips a beautiful and fully functional React Node.js App. Voila! Nice and easy!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCO3dYps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bodxbxmhnlav6wmvpzsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCO3dYps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bodxbxmhnlav6wmvpzsh.png" alt="Image description" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flatlogic.com/generator"&gt;Try it for free!&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#you-might-also-like-these-articles"&gt;
  &lt;/a&gt;
  You might also like these articles:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/top-10-angular-material-admin-dashboard-templates/"&gt;Top 10 Angular Material Admin Dashboard Templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/top-15-react-app-ideas-for-web-developer-in-2022/"&gt;Top 15 React App Ideas for Web Developers in 2022&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/best-10-ides-for-react-js-for-2021/"&gt;10 Best IDEs for React.JS in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/bootstrap-vs-material-ui-which-one-to-use-for-the-next-web-app/"&gt;Bootstrap vs. Material-UI. Which One to Use for the Next Web App?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flatlogic.com/blog/best-javascript-datepicker-libraries/"&gt;Top JavaScript Datepicker Plugins and Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>4 Kubernetes Anti-Patterns to Avoid</title>
      <author>Michael Bogan</author>
      <pubDate>Tue, 21 Dec 2021 14:32:47 +0000</pubDate>
      <link>https://dev.to/mbogan/4-kubernetes-anti-patterns-to-avoid-5ee7</link>
      <guid>https://dev.to/mbogan/4-kubernetes-anti-patterns-to-avoid-5ee7</guid>
      <description>&lt;p&gt;An &lt;em&gt;anti-pattern&lt;/em&gt; is a high-risk solution to a problem that’s usually ineffective. At first glance, these types of solutions appear appropriate and effective. However, any gains from these patterns tend to be short-term, with the consequences showing anti-patterns to be more trouble than they’re worth.&lt;/p&gt;

&lt;p&gt;When a developer adopts an anti-pattern, there is usually the intention to come back and &lt;em&gt;do it properly&lt;/em&gt; down the road, unless other more pressing needs get in the way (and they always do). Deviating from best-practice design patterns creates &lt;a href="https://en.wikipedia.org/wiki/Technical_debt"&gt;technical debt&lt;/a&gt;, which, sooner or later, must be paid—either in time and effort for refactoring or money due to system unavailability.&lt;/p&gt;

&lt;p&gt;Anti-patterns exist in the Kubernetes world. Container orchestrator solutions, particularly Kubernetes, are used with cloud-native workloads in mind, working best when employing particular design patterns.&lt;/p&gt;

&lt;p&gt;In this article, we’ll cover some common Kubernetes anti-patterns, some design patterns to use instead, and how &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt; can help implement the recommended design patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#antipattern-examples"&gt;
  &lt;/a&gt;
  Anti-pattern Examples
&lt;/h3&gt;

&lt;p&gt;Cloud-native workloads—particularly those running on Kubernetes—assume elasticity (for example, horizontal scaling), fault-tolerance, and highly heterogeneous environments for maintainability and debugging. Developing new distributed systems or migrating legacy systems to Kubernetes without care can lead to several anti-patterns. Here are some anti-patterns you should be aware of:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-lack-of-health-checks"&gt;
  &lt;/a&gt;
  1. Lack of health checks
&lt;/h3&gt;

&lt;p&gt;A health check allows you to validate the status of a service. It helps assess key information like service availability, system metrics, or available database connections. A service can report its status through health endpoints like &lt;code&gt;healthz&lt;/code&gt;, &lt;code&gt;livez&lt;/code&gt;, or &lt;code&gt;readyz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes supports &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes"&gt;Container probes&lt;/a&gt;—namely &lt;code&gt;livenessProbe&lt;/code&gt;, &lt;code&gt;readinessProbe&lt;/code&gt;, and &lt;code&gt;startupProbe&lt;/code&gt;—that allow monitoring services and take actions when the probe is successful. Services without health monitoring cannot take advantage of a lot of functionality that orchestrator solutions can automatically provide.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-not-using-bluegreen-or-canary-deployments-models"&gt;
  &lt;/a&gt;
  2. Not using blue/green or canary deployments models
&lt;/h3&gt;

&lt;p&gt;Most application owners prefer zero downtime for change deployments. This is a necessity for most mission-critical applications. Kubernetes allows you to define &lt;code&gt;Recreate&lt;/code&gt; and &lt;code&gt;RollingUpdate&lt;/code&gt; deployment strategies. &lt;code&gt;Recreate&lt;/code&gt; will kill all the Pods before creating new ones, while &lt;code&gt;RollingUpdate&lt;/code&gt; will update Pods in a rolling fashion and permit configuring &lt;code&gt;maxUnavailable&lt;/code&gt; and &lt;code&gt;maxSurge&lt;/code&gt; to control the process.&lt;/p&gt;

&lt;p&gt;While these &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy"&gt;deployment strategies&lt;/a&gt; can serve many use cases, they also have limitations. For example, &lt;code&gt;Recreate&lt;/code&gt; causes downtime while &lt;code&gt;RollingUpdate&lt;/code&gt; can make rollback harder. None of these methods allows rapid experimentation and feedback on new versions of your services.&lt;/p&gt;

&lt;p&gt;A blue/green deployment is a deployment model that creates copies of your service—the old version being &lt;em&gt;blue&lt;/em&gt; and the new version being &lt;em&gt;green&lt;/em&gt;—with both services running in parallel. Once you’re confident the new version (green) is ready for release, you can route all production traffic to the new version while keeping the old version (blue) up and running. If there are issues, you can quickly route the traffic back to the previous version, preventing user dissatisfaction or downtime. After some time, with everything running as expected, you can remove the old version of your service.&lt;/p&gt;

&lt;p&gt;Canary deployment is a technique that only routes the traffic to the new service for a subset of users. This pattern allows introducing a new version of your service in production while you closely monitor its behavior. If successful, you can expose the new version to more users, eventually migrating everyone to the new code version.&lt;/p&gt;

&lt;p&gt;Both techniques are essential in cloud-native environments since they increase service reliability and enable rapid experimentation and development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-not-using-circuit-breakers"&gt;
  &lt;/a&gt;
  3. Not using circuit breakers
&lt;/h3&gt;

&lt;p&gt;Services running on a Kubernetes cluster talk to one another by making remote calls. Because it’s not uncommon for these services to run on different machines, these remote calls are more prone to failures or unresponsiveness. This can lead to issues like cascading failures.&lt;/p&gt;

&lt;p&gt;In electronics, a circuit breaker is a switch designed to protect an electrical circuit from damage. An excess of electric current through the circuit breaker will cause the circuit to break, preventing an overload or short circuit. The goal of the circuit breaker is to prevent failure after identifying a fault. Similarly, in software, a circuit breaker monitors services for failures and, once identified, prevents further calls to it. This allows systems to deal with the failure and route requests to healthy instances of the same service.&lt;/p&gt;

&lt;p&gt;Without such mechanisms in place, a Kubernetes cluster running a distributed, service-based application will be prone to failures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-not-collecting-enough-metrics"&gt;
  &lt;/a&gt;
  4. Not collecting enough metrics
&lt;/h3&gt;

&lt;p&gt;Observability is key to understanding system behavior, and effective observability depends on the proper collection of metrics. Metrics provide the pieces of information when you want to know: what your services are doing, how well they are performing, why something went wrong, and, possibly, how to debug the issue. In complex distributed systems, metrics coupled with other forms of observability (such as traces) allow you to understand your systems holistically through a single pane of glass.&lt;/p&gt;

&lt;p&gt;A lack of key metrics will severely limit your ability to understand how your services are performing and if they're performing at the desired level. As the complexity of your system increases, it’s necessary to collect more data points from more endpoints.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-kong-ingress-controller-kic"&gt;
  &lt;/a&gt;
  Introducing the Kong Ingress Controller (KIC)
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/"&gt;Kong Ingress Controller (KIC)&lt;/a&gt; is an &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;Ingress&lt;/a&gt; implementation for Kubernetes. It enables configuration of routing, health checks, and load balancing, and it supports a variety of &lt;a href="https://docs.konghq.com/hub/"&gt;plugins&lt;/a&gt; that provide advanced functionality.&lt;/p&gt;

&lt;p&gt;KIC can help address the anti-patterns we’ve discussed above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#health-checks"&gt;
  &lt;/a&gt;
  Health checks
&lt;/h4&gt;

&lt;p&gt;The KIC can be configured for &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configuring-health-checks/#setup-passive-health-checking"&gt;passive health checks&lt;/a&gt; and &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configuring-health-checks/#setup-active-health-checking"&gt;active health checks&lt;/a&gt;. Passive health checks will monitor your services on each request and, upon a certain number of failures, will short-circuit requests to the failing Pods. Active health checks will periodically monitor services at predefined intervals, marking failing Pods as unavailable.&lt;/p&gt;

&lt;p&gt;Passive and active health checks will increase the reliability of your system by running regular health checks and taking proactive measures. KIC will use the information from the health checks to efficiently route requests to healthy replicas of the service.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bluegreen-or-canary-deployments"&gt;
  &lt;/a&gt;
  Blue/green or canary deployments
&lt;/h4&gt;

&lt;p&gt;Code reviews and testing can only give you confidence that your services will work correctly. However, you can’t test every use case or boundary condition. Furthermore, many bugs are only found when the code is in the wild, and your application starts accepting actual user traffic. &lt;/p&gt;

&lt;p&gt;Blue/green and canary deployments reduce deployment risk by enabling fast rollbacks and reducing the impact of undesired results.&lt;/p&gt;

&lt;p&gt;By deploying both the old and new versions of your service behind the KIC, you can easily route traffic to the new version and roll back to the previous version if necessary. Similarly, using the &lt;a href="https://docs.konghq.com/hub/kong-inc/canary/"&gt;Canary Release plugin&lt;/a&gt; enables you to roll out new changes in a phased manner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#circuit-breakers"&gt;
  &lt;/a&gt;
  Circuit Breakers
&lt;/h4&gt;

&lt;p&gt;You can configure KIC &lt;a href="https://docs.konghq.com/enterprise/2.6.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers"&gt;with checks&lt;/a&gt; that will monitor service performance. Based on the results, it can mark unhealthy or unresponsive service replicas as unavailable, preventing any further requests from being routed to those service replicas. Instead, subsequent requests will be routed to healthy copies of the service. Once fixed, the original service replica can be brought back online.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h4&gt;

&lt;p&gt;The KIC &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/prometheus-grafana/"&gt;easily integrates&lt;/a&gt; with &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; and &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;—two industry-standard monitoring solutions—giving you visibility into how your services respond to traffic. Moreover, access to these metrics doesn't require any service instrumentation. &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/references/prometheus/#main"&gt;Prometheus metrics&lt;/a&gt; can be exposed for service requests and configuration updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Re-architecting entire Kubernetes solutions is time-consuming and not always a viable option. By leveraging &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt;, you'll be able to undo the effects of previously-adopted anti-patterns by replacing them with an implementation that adheres to Kubernetes best-practice design patterns. &lt;/p&gt;

&lt;p&gt;In addition, you can benefit from features like authentication, authorization, or request transformations. KIC &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/"&gt;documentation&lt;/a&gt; provides detailed information about its core concepts, production deployment scenarios, references, as well as an excellent &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/overview/"&gt;guide&lt;/a&gt; on common and useful scenarios like &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/configure-acl-plugin/"&gt;configuring ACL&lt;/a&gt; or &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/2.0.x/guides/redis-rate-limiting/"&gt;rate limiting&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Debugging JavaScript code - Day 20 of 100</title>
      <author>Arif Iqbal</author>
      <pubDate>Tue, 21 Dec 2021 14:29:16 +0000</pubDate>
      <link>https://dev.to/arifiqbal/debugging-javascript-code-day-20-of-100-30ol</link>
      <guid>https://dev.to/arifiqbal/debugging-javascript-code-day-20-of-100-30ol</guid>
      <description>&lt;p&gt;This post is a part of the &lt;a href="https://dev.to/arifiqbal/series/15795"&gt;Week X of 100DaysOfCode JavaScript Challenge&lt;/a&gt; series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-debugging"&gt;
  &lt;/a&gt;
  What is debugging?
&lt;/h3&gt;

&lt;p&gt;Debugging is the process of going through your code, finding any issues, and fixing them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-errors"&gt;
  &lt;/a&gt;
  Types of Errors
&lt;/h3&gt;

&lt;p&gt;Issues in code can come in three forms:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Syntax errors&lt;/strong&gt; come when your code is written against the language rules. These errors will prevent your code from running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Runtime errors&lt;/strong&gt; are those when your code behaves unexpectedly when you run it. These errors may stop the program execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Logical errors&lt;/strong&gt; are those when you get a result from your code that was not supposed to be.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this module we will learn how to use JavaScript console to debug JavaScript code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use the JavaScript Console to Check the Value of a Variable:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;console.log()&lt;/code&gt; method will write the result of whatever is in the parenthesis to the browser console. Both &lt;em&gt;Chrome&lt;/em&gt; and &lt;em&gt;FireFox&lt;/em&gt; have very powerful browser consoles, also called DevTools. Both Chrome and FireFox, you can press the &lt;code&gt;F12&lt;/code&gt; key to open the DevTools then go the &lt;code&gt;console&lt;/code&gt; tab. &lt;code&gt;console.log("Hello World!")&lt;/code&gt; will write &lt;code&gt;Hello World!&lt;/code&gt; to the browser console.&lt;/p&gt;

&lt;p&gt;You can put this method in your code to see the output of a variable while debugging your program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understanding the Differences between the freeCodeCamp and Browser Console:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Friends who follow along with me know that I am following the FreeCodeCamp JavaScript course for this 100DaysOfCode challenge. FreeCodeCamp provides an online code editor that also shows the console window for some JavaScript lessons. This console window works slightly differently than a browser console window.&lt;/p&gt;

&lt;p&gt;Browser console windows will output all JavaScript log methods like &lt;code&gt;log()&lt;/code&gt;, &lt;code&gt;warn()&lt;/code&gt;, and &lt;code&gt;clear()&lt;/code&gt; etc. while the FreeCodeCamp console supports only the &lt;code&gt;log()&lt;/code&gt; method. FreeCodeCamp editor logs to the console in real-time as you change the code. Also, FreeCodeCamp console is cleared every time your code runs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use typeof to Check the Type of a Variable:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This could be useful in debugging, particularly when you work with different data types. It returns the datastructure or type of the following variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ntring&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ntring&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript recognizes six immutable types (&lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Undefined&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt;(added in ES6) ) and one mutable type (Object). In JavaScript arrays are considered to be a type of Object.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How to observe your web page for scrolls with little calculations</title>
      <author>Ay oh</author>
      <pubDate>Tue, 21 Dec 2021 13:51:13 +0000</pubDate>
      <link>https://dev.to/ayomide_bajo/how-to-observe-your-web-page-for-scrolls-with-little-calculations-3dg5</link>
      <guid>https://dev.to/ayomide_bajo/how-to-observe-your-web-page-for-scrolls-with-little-calculations-3dg5</guid>
      <description>&lt;p&gt;Hi people, it's been over a year since I posted my first blog post. I was going through a lot of personal issues, so I had to take a long break from social media. I'm here now, thank God. Hopefully,this post helps you (the person reading this). Alright, back to the main topic of this post.&lt;/p&gt;

&lt;p&gt;A lot of devs struggle with observing the web page on scrolls and stuff. There are solutions, either by calculating the offset of the element or some other solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisities"&gt;
  &lt;/a&gt;
  Prerequisities
&lt;/h3&gt;

&lt;p&gt;you need to know HTML, CSS and JS. I'm not going to over that in this post.&lt;/p&gt;

&lt;p&gt;If you already know HTML, CSS and JS, you can continue reading this post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-intersection-observer-api"&gt;
  &lt;/a&gt;
  The Intersection Observer API
&lt;/h2&gt;

&lt;p&gt;According to mdn's definition, "The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's view port".&lt;/p&gt;

&lt;p&gt;Many years ago, web developers had to do lots of calculations on observing the page's view port using tools like offset and the likes, which could get messy, as the user's experience starts to be unpleasant. The intersection Observer API can be used for the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lazy-loading images or page content&lt;/li&gt;
&lt;li&gt;CSS animations&lt;/li&gt;
&lt;li&gt;Infinite scrolling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can basically be used for observing the elements in the page or when the elements will be in view. Which can be handy because you don't really need much calculations, you just need the Intersection observer!.&lt;/p&gt;

&lt;p&gt;To demonstrate how to use the Intersection Observer API, We are going to build a simple web page with contents to observe and then we make our page react when elements are in view and also when they are not.&lt;/p&gt;

&lt;p&gt;Alright, let's write some code!&lt;/p&gt;

&lt;p&gt;Firstly, Create a folder named intersection-observe or &lt;em&gt;any name you like&lt;/em&gt;. In this directory, create a HTML file, a CSS file and a JS file.&lt;/p&gt;

&lt;p&gt;Like I said earlier, I'm not going to go over the tags and stuff, I assume you already have knowledge of that.&lt;/p&gt;

&lt;p&gt;Next, Copy the following code below to the html file, We are just going to display a list of post, with a navbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;title&amp;gt;Intersection Observer!&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="styles.css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="main--container"&amp;gt;
      &amp;lt;div class="nav--wrapper"&amp;gt;
        &amp;lt;nav class="navbar--container nav-intersect"&amp;gt;
          &amp;lt;ul class="links--container"&amp;gt;
            &amp;lt;li class="navlink logo"&amp;gt;Logo&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;Home&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;About&amp;lt;/li&amp;gt;
            &amp;lt;li class="navlink"&amp;gt;Contact&amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/nav&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="posts--container"&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="card"&amp;gt;
          &amp;lt;div class="card-title"&amp;gt;Card title&amp;lt;/div&amp;gt;
          &amp;lt;div class="card-body"&amp;gt;
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique
            laudantium assumenda soluta unde tenetur impedit possimus, iure
            nobis illum eaque? Consequuntur nisi modi nesciunt vero placeat sit,
            reiciendis ratione deleniti.
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you replace the style and script file names to your the custom names you created, so that you can see the changes.&lt;/p&gt;

&lt;p&gt;Currently the page will look like this:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tI7p08iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ongfdwnub3b0aggt1e8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tI7p08iQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ongfdwnub3b0aggt1e8i.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to your css file and copy the following code into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
}

.navbar--container {
  height: 7vh;
  background-color: white;

  position: fixed;
  width: 100%;
}

.nav--wrapper {
  height: 7.5vh;
  width: 100%;
}

.nav-intersect {
  position: fixed;
  z-index: 10;
  /* -webkit-box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79);
  -moz-box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79); */
  box-shadow: 0px 1px 3px -1px rgba(105, 105, 105, 0.79);
}

.links--container {
  padding-top: 20px;
  display: flex;
  list-style: none;
}

li:nth-child(2) {
  margin-left: auto;
}

.navlink {
  padding: 0 5px 0 5px;
  cursor: pointer;
}

.navlink:hover {
  color: brown;
}

.posts--container {
  position: relative;
  display: grid;
  max-width: 800px;
  margin: auto;
  padding-top: 100px;
  gap: 4em;
}

.card {
  height: 100%;
  -webkit-box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  -moz-box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  box-shadow: 0px 1px 5px 0px rgba(183, 192, 206, 0.4);
  width: 100%;
  border-radius: 5px;
  padding: 20px;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the classname &lt;strong&gt;nav-intersect&lt;/strong&gt; I added an extra rule for old browsers that have issues with the box-shadow rule, but I commented it out, because my browser was fine the css rule, you can uncomment it of you like.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-we-going-to-do-in-this-example"&gt;
  &lt;/a&gt;
  what we going to do in this example.
&lt;/h4&gt;

&lt;p&gt;When a user enters the page, the navbar doesn't have a box-shadow, but when the user starts scrolling, the navbar is fixed and the box-shadows shows up and remains visible. We are going to implement this using the Intersection Observer API.&lt;br&gt;
P.S the layout isn't mobile responsive. &lt;/p&gt;

&lt;p&gt;The page is going to look like this:- &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L2eKtFaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duv6b0rxc3ejo513htf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2eKtFaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duv6b0rxc3ejo513htf5.png" alt="Image description" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, moving on the main part of this tutorial. For you to be able to observe an element properly, you'll need to simply wrap it with another element that is just slightly bigger than the child element, because the wrapper and the child can't be of the same height or width or even size. From the name wrapper means it has to be wrapped or contained. This is why in the classname &lt;code&gt;nav-wrapper&lt;/code&gt; the element height is slightly bigger than the child's height &lt;code&gt;navbar--container&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's go to the html file and scroll to &lt;strong&gt;main--container&lt;/strong&gt; in the next &lt;code&gt;div&lt;/code&gt; it's classname is empty, add this name &lt;code&gt;nav--wrapper&lt;/code&gt; to it. Nothing changes, this is the wrapper for the element we are going to observe, which is &lt;code&gt;navbar--container&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's go into the js file. &lt;br&gt;
We are going to create variables for saving parent wrapper and the child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const parent = document.querySelector(".nav--wrapper");
const navbar = document.querySelector(".navbar--container");

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You call the Intersection Oberver by calling it's contructor,  &lt;code&gt;new IntersectionObserver()&lt;/code&gt; it takes in two arguments, a callback and options. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-callback"&gt;
  &lt;/a&gt;
  The callback
&lt;/h4&gt;

&lt;p&gt;This is the function executed whenever the target element is in view or not, it is influenced by the options object.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#options"&gt;
  &lt;/a&gt;
  options
&lt;/h4&gt;

&lt;p&gt;This is an object with properties for configuring when/where you want to react to the changes in the target element. it has the following properties:- &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;root&lt;br&gt;
The element that is used as the view port for observing the visibility of the target. Defaults to the view port if null.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rootMargin&lt;br&gt;
This is the margin around the root, it's usually in px or percentages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;threshold&lt;br&gt;
Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed.  If you only want to detect when visibility of the element is 50%, i.e you can pass a a value of 0.5. if you want the callback to run every time the visibility passes another 10%, you would specify the array to be [0, 0.10, 0.20, 0.30, ... 1]. A value of 1.0 means that threshold isn't considered passed until every pixel is visible, this is why the parent wrapper has to be slightly bigger to that it can show the element accurately.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's create an &lt;code&gt;options&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let options = {
  root: null,
  rootMargin: "0px",
  threshold: [0.0, 1.0],
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the callback, the takes in an a list of entries as an argument, I'm just going to call an arrow function, add this to your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let navbarObserver = new IntersectionObserver((entries) =&amp;gt; {
  entries.forEach((entry) =&amp;gt; {
    if (!entry.isIntersecting) {
      navbar.classList.add("nav-intersect");
      return;
    }
    navbar.classList.remove("nav-intersect");
  });
}, options);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we created an instance of the IntersectionObserver then put the callback and options as arguments in the instance we just created. Then in the callback, we have access to entries (it describes the intersection between the target element and its root container at a specific moment of transition) using properties to check for those description, for example when the target element is intersecting, we use the &lt;code&gt;isIntersecting&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Next, we loop through those entries and we make an condition, since we are trying to show the navbar when it's no longer in view. we an negate the &lt;code&gt;isIntersecting&lt;/code&gt; property. This will check, if the navbar element is going to be no longer in view, simply add it back. &lt;/p&gt;

&lt;p&gt;Now we need to observe this element by calling the &lt;code&gt;observe&lt;/code&gt; property on the Intersection Observer instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;navbarObserver.observe(document.querySelector(".nav--wrapper"));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is all the code in js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const parent = document.querySelector(".nav--wrapper");
const navbar = document.querySelector(".navbar--container");

let options = {
  root: null,
  rootMargin: "0px",
  threshold: [0.0, 1.0],
};

let navbarObserver = new IntersectionObserver((entries) =&amp;gt; {
  entries.forEach((entry) =&amp;gt; {
    if (!entry.isIntersecting) {
      navbar.classList.add("nav-intersect");
      return;
    }
    navbar.classList.remove("nav-intersect");
  });
}, options);

navbarObserver.observe(document.querySelector(".nav--wrapper"));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a box-shadow added to the navbar whenever you scroll through the page.&lt;/p&gt;

&lt;p&gt;I couldn't have done this post without mdn's docs on the Intersection Observer API, you should check it out too!, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;click here&lt;/a&gt;, it's pretty long but with the basic example we did here, you should be able to catch up.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
