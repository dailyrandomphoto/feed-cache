<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create HTML, CSS &amp; Javascript Folder üìÅ Structure </title>
      <author>Pratik</author>
      <pubDate>Fri, 03 Dec 2021 08:13:26 +0000</pubDate>
      <link>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</link>
      <guid>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. You need to have node.js installed in your computer&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" alt="node.js" width="739" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;Download the Windows installer from Nodejs.org.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;em&gt;Run the installer (the . msi file you downloaded in the previous step.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;3.&lt;em&gt;Follow the prompts in the installer (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;em&gt;Restart your computer.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Open Terminal&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" alt="Terminal" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Open Terminal wherever you want to create project&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Write Command &lt;code&gt;npx touch-5&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Final Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" alt="CSS and JavaScript Files linked to HTML" width="640" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see Folder üìÅ and Files linked together&lt;/li&gt;
&lt;li&gt;HTML boiler-plate code in HTML file&lt;/li&gt;
&lt;li&gt;You can see css and javascript files linked to the html file&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HTML tags | img</title>
      <author>Carlos Espada</author>
      <pubDate>Fri, 03 Dec 2021 08:11:29 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-img-44p1</link>
      <guid>https://dev.to/carlosespada/html-tags-img-44p1</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;embed an image into the document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The HTML standard doesn't list what image formats to support, so user agents &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types"&gt;may support different formats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The image file formats that are most commonly used on the web are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;APNG&lt;/strong&gt; (&lt;em&gt;Animated Portable Network Graphics&lt;/em&gt;): good choice for lossless animation sequences (GIF is less performant).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AVIF&lt;/strong&gt; (&lt;em&gt;AV1 Image File Format&lt;/em&gt;): good choice for both images and animated images due to high performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIF&lt;/strong&gt; (&lt;em&gt;Graphics Interchange Format&lt;/em&gt;): good choice for simple images and animations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JPEG&lt;/strong&gt; (&lt;em&gt;Joint Photographic Expert Group&lt;/em&gt;): good choice for lossy compression of still images (currently the most popular).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PNG&lt;/strong&gt; (&lt;em&gt;Portable Network Graphics&lt;/em&gt;): good choice for lossy compression of still images (slightly better quality than JPEG).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SVG&lt;/strong&gt; (&lt;em&gt;Scalable Vector Graphics&lt;/em&gt;): vector image format. Use for images that must be drawn accurately at different sizes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WebP&lt;/strong&gt; (&lt;em&gt;Web Picture&lt;/em&gt;): excellent choice for both images and animated images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Formats like WebP and AVIF are highly recommended as they are now broadly (and somewhat deeply) supported by web browsers, and perform much better than PNG, JPEG, GIF for both still and animated images. SVG remains the recommended format for images that must be drawn accurately at different sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-loading-errors"&gt;
  &lt;/a&gt;
  Image loading errors
&lt;/h2&gt;

&lt;p&gt;If an error occurs while loading or rendering an image, and an &lt;code&gt;onerror&lt;/code&gt; event handler has been set on the &lt;code&gt;error&lt;/code&gt; event, that event handler will get called. This can happen in a number of situations, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;src&lt;/code&gt; attribute is empty (&lt;code&gt;""&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;src&lt;/code&gt; URL is the same as the URL of the page the user is currently on.&lt;/li&gt;
&lt;li&gt;The image is corrupted in some way that prevents it from being loaded.&lt;/li&gt;
&lt;li&gt;The image's metadata is corrupted in such a way that it's impossible to retrieve its dimensions, and no dimensions were specified in the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element's attributes.&lt;/li&gt;
&lt;li&gt;The image is in a format not supported by the user agent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#alt"&gt;
  &lt;/a&gt;
  alt
&lt;/h3&gt;

&lt;p&gt;Defines an alternative text description of the image. It isn't mandatory but is &lt;strong&gt;incredibly useful for accessibility&lt;/strong&gt; ‚Äî screen readers read this description out to their users so they know what the image means. &lt;/p&gt;

&lt;p&gt;Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non-visual browsers (such as those used by people with visual impairments).&lt;/li&gt;
&lt;li&gt;The user chooses not to display images (saving bandwidth, privacy reasons)&lt;/li&gt;
&lt;li&gt;The image is invalid or an unsupported type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these cases, the browser may replace the image with the text in the element's &lt;code&gt;alt&lt;/code&gt; attribute. For these reasons and others, provide a useful value for &lt;code&gt;alt&lt;/code&gt; whenever possible.&lt;/p&gt;

&lt;p&gt;Omitting &lt;code&gt;alt&lt;/code&gt; altogether indicates that the image is a key part of the content and no textual equivalent is available. &lt;strong&gt;Setting this attribute to an empty string&lt;/strong&gt; (&lt;code&gt;alt=""&lt;/code&gt;) indicates that this image is not a key part of the content (it‚Äôs decoration or a tracking pixel), and that &lt;strong&gt;non-visual browsers may omit it from rendering&lt;/strong&gt;. Visual browsers will also hide the broken image icon if the alt is empty and the image failed to display.&lt;/p&gt;

&lt;p&gt;This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossorigin"&gt;
  &lt;/a&gt;
  crossorigin
&lt;/h3&gt;

&lt;p&gt;Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element without being marked "tainted".&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;crossorigin&lt;/code&gt; attribute is not specified, then a non-CORS request is sent (without the &lt;code&gt;Origin&lt;/code&gt; request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;crossorigin&lt;/code&gt; attribute is specified, then a CORS request is sent (with the &lt;code&gt;Origin&lt;/code&gt; request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header, or by not including the site's origin in any &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.&lt;/p&gt;

&lt;p&gt;Allowed values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;anonymous&lt;/code&gt;: a CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or &lt;code&gt;Authorization&lt;/code&gt; request header).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;use-credentials&lt;/code&gt;: the CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the &lt;code&gt;Authorization&lt;/code&gt; request header). If the server does not opt into sharing credentials with the origin site (by sending back the &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; response header), then the browser marks the image as tainted and restricts access to its image data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the attribute has an invalid value, browsers handle it as if the &lt;code&gt;anonymous&lt;/code&gt; value was used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decoding"&gt;
  &lt;/a&gt;
  decoding
&lt;/h3&gt;

&lt;p&gt;Provides an image decoding hint to the browser. Allowed values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sync&lt;/code&gt;: decode the image synchronously, for atomic presentation with other content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt;: decode the image asynchronously, to reduce delay in presenting other content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;auto&lt;/code&gt; (default): no preference for the decoding mode. The browser decides what is best for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#height"&gt;
  &lt;/a&gt;
  height
&lt;/h3&gt;

&lt;p&gt;The intrinsic height of the image, in pixels. Must be an integer without a unit. Allows image to take up space before it loads, to mitigate content layout shifts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intrinsicsize"&gt;
  &lt;/a&gt;
  intrinsicsize
&lt;/h3&gt;

&lt;p&gt;This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it‚Äôs the size specified in the attribute. Specifically, the image would raster at these dimensions and &lt;code&gt;naturalWidth/naturalHeight&lt;/code&gt; on images would return the values specified in this attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ismap"&gt;
  &lt;/a&gt;
  ismap
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute indicates that the image is part of a server-side map. If so, the coordinates where the user clicked on the image are sent to the server.&lt;/p&gt;

&lt;p&gt;This attribute is allowed only if the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element is a descendant of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a valid &lt;code&gt;href&lt;/code&gt; attribute. This gives users without pointing devices a fallback destination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading"&gt;
  &lt;/a&gt;
  loading
&lt;/h3&gt;

&lt;p&gt;Indicates how the browser should load the image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eager&lt;/code&gt; (default): loads the image immediately, regardless of whether or not the image is currently within the visible viewport.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lazy&lt;/code&gt;: defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Loading is only deferred when JavaScript is enabled&lt;/strong&gt;. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;A string indicating which referrer to use when fetching the resource:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS‚ÜíHTTPS), but don't send it to a less secure destination (HTTPS‚ÜíHTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (default): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS‚ÜíHTTPS), and send no header to a less secure destination (HTTPS‚ÜíHTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sizes"&gt;
  &lt;/a&gt;
  sizes
&lt;/h3&gt;

&lt;p&gt;One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A media condition. This must be omitted for the last item in the list.&lt;/li&gt;
&lt;li&gt;A source size value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Media Conditions describe properties of the viewport, not of the image. For example, &lt;code&gt;(max-height: 500px) 1000px&lt;/code&gt; proposes to use a source of 1000px width, if the viewport is not higher than 500px.&lt;/p&gt;

&lt;p&gt;Source size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the &lt;code&gt;srcset&lt;/code&gt; attribute, when those sources are described using width (&lt;code&gt;w&lt;/code&gt;) descriptors. The selected source size affects the intrinsic size of the image (the image‚Äôs display size if no CSS styling is applied). If the &lt;code&gt;srcset&lt;/code&gt; attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;The image URL. &lt;strong&gt;Mandatory&lt;/strong&gt; for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. On browsers supporting &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; is treated like a candidate image with a pixel density descriptor &lt;code&gt;1x&lt;/code&gt;, unless an image with this pixel density descriptor is already defined in &lt;code&gt;srcset&lt;/code&gt;, or unless &lt;code&gt;srcset&lt;/code&gt; contains &lt;code&gt;w&lt;/code&gt; descriptors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcset"&gt;
  &lt;/a&gt;
  srcset
&lt;/h3&gt;

&lt;p&gt;One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A URL to an image&lt;/li&gt;
&lt;li&gt;Optionally, whitespace followed by one of:

&lt;ul&gt;
&lt;li&gt;A width descriptor (a positive integer directly followed by &lt;code&gt;w&lt;/code&gt;). The width descriptor is divided by the source size given in the &lt;code&gt;sizes&lt;/code&gt; attribute to calculate the effective pixel density.&lt;/li&gt;
&lt;li&gt;A pixel density descriptor (a positive floating point number directly followed by &lt;code&gt;x&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If no descriptor is specified, the source is assigned the default descriptor of &lt;code&gt;1x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is incorrect to mix width descriptors and pixel density descriptors in the same &lt;code&gt;srcset&lt;/code&gt; attribute. Duplicate descriptors (for instance, two sources in the same &lt;code&gt;srcset&lt;/code&gt; which are both described with &lt;code&gt;2x&lt;/code&gt;) are also invalid.&lt;/p&gt;

&lt;p&gt;The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width"&gt;
  &lt;/a&gt;
  width
&lt;/h3&gt;

&lt;p&gt;The intrinsic width of the image in pixels. Must be an integer without a unit. Allows image to take up space before it loads, to mitigate content layout shifts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usemap"&gt;
  &lt;/a&gt;
  usemap
&lt;/h3&gt;

&lt;p&gt;The partial URL (starting with &lt;code&gt;#&lt;/code&gt;) of an image map associated with the element.&lt;/p&gt;

&lt;p&gt;You cannot use this attribute if the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element is inside an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; is a replaced element; it has a display value of &lt;code&gt;inline&lt;/code&gt; by default, but its default dimensions are defined by the embedded image's intrinsic values, like it were &lt;code&gt;inline-block&lt;/code&gt;. You can set properties like &lt;code&gt;border&lt;/code&gt;/&lt;code&gt;border-radius&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;/&lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, etc. on an image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; has no baseline, so when images are used in an inline formatting context with &lt;code&gt;vertical-align: baseline&lt;/code&gt;, the bottom of the image will be placed on the text baseline.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;object-position&lt;/code&gt; property to position the image within the element's box, and the &lt;code&gt;object-fit&lt;/code&gt; property to adjust the sizing of the image within the box (for example, whether the image should fit the box or fill it even if clipping is required).&lt;/p&gt;

&lt;p&gt;Depending on its type, an image may have an intrinsic width and height. For some image types, however, intrinsic dimensions are unnecessary. SVG images, for instance, have no intrinsic dimensions if their root &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; set on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;An &lt;code&gt;alt&lt;/code&gt; attribute's value &lt;strong&gt;should clearly and concisely describe the image's content&lt;/strong&gt;. It should not describe the presence of the image itself or the file name of the image. If the &lt;code&gt;alt&lt;/code&gt; attribute is purposefully left off because the image has no textual equivalent, consider alternate methods to present what the image is trying to communicate.&lt;/p&gt;

&lt;p&gt;Don't&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img alt="image" src="penguin.jpg"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img alt="A Rockhopper Penguin standing on a beach." src="penguin.jpg"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When an &lt;code&gt;alt&lt;/code&gt; attribute &lt;strong&gt;is not present&lt;/strong&gt; on an image, some screen readers &lt;strong&gt;may announce the image's file name instead&lt;/strong&gt;. This can be a confusing experience if the file name isn't representative of the image's contents.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; attribute is not an acceptable substitute for the &lt;code&gt;alt&lt;/code&gt; attribute. Additionally, avoid duplicating the &lt;code&gt;alt&lt;/code&gt; attribute's value in a &lt;code&gt;title&lt;/code&gt; attribute declared on the same image. Doing so may cause some screen readers to announce the description twice, creating a confusing experience.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; attribute should also not be used as supplemental captioning information to accompany an image's &lt;code&gt;alt&lt;/code&gt; description. If an image needs a caption, use the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;The value of the &lt;code&gt;title&lt;/code&gt; attribute is usually presented to the user as a tooltip, which appears shortly after the cursor stops moving over the image. While this can provide additional information to the user, you should not assume that the user will ever see it: the user may only have keyboard or touchscreen. &lt;strong&gt;If you have information that's particularly important or valuable for the user, present it inline using one of the methods mentioned above&lt;/strong&gt; instead of using &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It has an &lt;strong&gt;implicit ARIA role&lt;/strong&gt; &lt;code&gt;img&lt;/code&gt; (with non-empty &lt;code&gt;alt&lt;/code&gt; attribute or no &lt;code&gt;alt&lt;/code&gt; attribute) or no corresponding role (with empty &lt;code&gt;alt&lt;/code&gt; attribute).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;Yes&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_img.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_image_test"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_img"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>img</category>
    </item>
    <item>
      <title>Cloud Technology News of the Month: November 2021</title>
      <author>CAST AI</author>
      <pubDate>Fri, 03 Dec 2021 08:10:29 +0000</pubDate>
      <link>https://dev.to/castai/cloud-technology-news-of-the-month-november-2021-464g</link>
      <guid>https://dev.to/castai/cloud-technology-news-of-the-month-november-2021-464g</guid>
      <description>&lt;p&gt;Already feeling the vibe of this year‚Äôs festive season? Here‚Äôs some fresh cloud technology news to keep you on the right track.¬†&lt;/p&gt;

&lt;p&gt;This series brings you up to speed with the latest releases, acquisitions, research, and hidden gems in the world of cloud computing ‚Äì the stuff actually worth reading.&lt;/p&gt;

&lt;p&gt;What happened in the cloud world this November? Keep on reading to find out!&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Story of the month: All the new things at AWS, re:Invent style&lt;/h2&gt;

&lt;p&gt;Our team is at &lt;strong&gt;AWS re:Invent&lt;/strong&gt; right now and shared some blazingly hot news with us, including the big news from AWS CEO Adam Selipsky‚Äôs keynote.&lt;/p&gt;

&lt;p&gt;Here are the top things that stood out to us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;More speed for less money! &lt;/strong&gt;AWS announced &lt;strong&gt;Graviton 3&lt;/strong&gt;, the freshest generation of its Arm-based Graviton processors. The new chip will be 25% faster and use 60% less power, powering some new instance types AWS is rolling out as well (C7g).&lt;/li&gt;
&lt;li&gt;AWS released its open-source &lt;strong&gt;autoscaling tool Karpenter&lt;/strong&gt; to production. We hope that it helps people save money on their cloud bills because back when we tried an earlier version a year ago it wasn‚Äôt all that different from a vanilla Kubernetes cluster autoscaler.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Machine learning &lt;/strong&gt;made easy with a new service called &lt;strong&gt;Amazon SageMaker Canvas&lt;/strong&gt; made for non-specialized engineers or business users. The promise? Anyone can build machine learning prediction models using a point-and-click interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" alt="" width="870" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;_____&lt;/h2&gt;

&lt;h2&gt;The Business of Cloud&lt;/h2&gt;

&lt;p&gt;The top cloud vendors have a hard time breaking our CAPEX on their IaaS and SaaS offerings, but they manage to make it overall. Take a look at the recent public cloud growth rates, and you‚Äôll see a &lt;strong&gt;correlation between capital expenditure and revenue&lt;/strong&gt;. The top cloud vendor, &lt;strong&gt;AWS grew 10% faster&lt;/strong&gt; in the last quarter than it did a year ago. Scale matters a lot in the cloud and CAPEX helps to secure it.¬†&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.infoworld.com/article/3639017/cloud-costs-a-lot-of-money.html"&gt;InfoWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/charlesfitz/status/1453828546040721416"&gt;Charles Fitzgerald on Twitter&lt;/a&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dell&lt;/strong&gt; is setting up one of the largest corporate spin-offs ever by shedding its 81% stake in &lt;strong&gt;VMware&lt;/strong&gt; to create a software company with a stock market value of &lt;strong&gt;almost $64 billion&lt;/strong&gt;. This is the epilogue to Dell‚Äôs 8-year-long commitment to transforming his interest in the slightly forgotten PC maker into a data center hardware and software company worth $40 billion.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://arstechnica.com/information-technology/2021/11/dell-spins-off-64-billion-vmware-as-it-battles-debt-hangover/"&gt;Arstechnica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an interesting turn of events, the &lt;strong&gt;UK‚Äôs spy agencies&lt;/strong&gt; - MI5, MI6, and GCHQ - are going to use AWS for cloud storage and computing.¬†&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.ft.com/content/74782def-1046-4ea5-b796-0802cfb90260"&gt;Financial Times&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nvidia‚Äôs acquisition of Arm&lt;/strong&gt; saga just released another chapter. The deal is now under scrutiny by the FTC, and the EU won‚Äôt hesitate to shut it either. The global chip shortage is probably one of the reasons why.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://arstechnica.com/tech-policy/2021/11/nvidia-acquisition-of-arm-now-under-scrutiny-by-ftc/"&gt;Arstechnica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cloud data service vendor partly owned by an Indonesian tycoon - DCI Indonesia - just became &lt;strong&gt;the world‚Äôs top IPO of 2021&lt;/strong&gt;, noting a 10,852% increase since its share float in January. This makes the company the second-biggest contributor to this year‚Äôs 12% gain of the Jakarta Composite Index.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.bloomberg.com/news/articles/2021-11-26/a-10-000-jump-makes-indonesia-data-firm-world-s-top-gaining-ipo"&gt;Bloomberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Food for thought&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Single and private clouds are out of the door&lt;/strong&gt;. IBM released a study where it shows how this trend dropped from 29% in 2019 to only 2% in 2021. Who won the race instead? Hybrid cloud and multi cloud! Yet another piece of research showing us that multi cloud is set to become the dominant architecture for cloud service delivery.¬†&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.ibm.com/downloads/cas/K0ZGR6BW"&gt;IBM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;Google Cloud went down&lt;/strong&gt; in the middle of the month and &lt;strong&gt;took down services like Home Depot, Snap, and Spotify&lt;/strong&gt;. What caused the outage? A glitch in a network configuration. It‚Äôs yet another scenario demonstrating the risk of betting on a single cloud provider to handle all your applications.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://status.cloud.google.com/incidents/6PM5mNd43NbMqjCZ5REh"&gt;Google Cloud Status Dashboard&lt;/a&gt;¬†&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Meanwhile in CAST AI&lt;/h2&gt;

&lt;p&gt;Here are some new product features hot off the press:¬†¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have ever worked with manual cost management tools, you know how time-consuming that can be. We built a feature that brings you from zero to an optimized state in a few minutes - &lt;strong&gt;Instant Rebalancing&lt;/strong&gt;. Learn more about it &lt;a href="https://cast.ai/blog/introducing-instant-rebalancing-for-a-fully-autonomous-kubernetes-optimization-platform/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also, we are &lt;a href="https://cast.ai/blog/cast-ai-is-officially-soc-2-type-ii-compliant/"&gt;&lt;strong&gt;officially SOC 2 Type II compliant!&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We also added the &lt;strong&gt;Spot Fallback&lt;/strong&gt; feature that guarantees capacity by temporarily moving your workloads to other nodes until there are new spot instances available.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Available savings report&lt;/strong&gt; is now enhanced with a graph that displays point in time actual and optimal cluster costs as well as other dimensions (i.e. CPU, Memory, node count).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scrapable cluster metrics&lt;/strong&gt; are now available, here‚Äôs a handy &lt;a href="https://github.com/castai/examples/tree/main/metrics"&gt;guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;AWS/Kops clusters&lt;/strong&gt; we previously deployed a &lt;strong&gt;Lambda function&lt;/strong&gt; per cluster, it‚Äôs no longer the case. From now on a single Lambda function is deployed per account.&lt;/li&gt;
&lt;li&gt;Added support for &lt;strong&gt;Kops version 1.20&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;p&gt;Why not get the next portion of cloud technology news directly to your inbox?&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>news</category>
      <category>kubernetes</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Free Bootstrap 5 Admin Template - Dash UI
</title>
      <author>Jitu Chauhan</author>
      <pubDate>Fri, 03 Dec 2021 08:08:09 +0000</pubDate>
      <link>https://dev.to/imjituchauhan/free-bootstrap-5-admin-template-dash-ui-19j2</link>
      <guid>https://dev.to/imjituchauhan/free-bootstrap-5-admin-template-dash-ui-19j2</guid>
      <description>&lt;p&gt;Dash-UI is a Bootstrap 5 Admin &amp;amp; Dashboard Theme. Dash UI Kit a free and open source components and templates kit fully coded with Bootstrap 5.&lt;/p&gt;

&lt;p&gt;Download - &lt;a href="https://codescandy.gumroad.com/l/dashui"&gt;Dash UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo - &lt;a href="https://codescandy.com/dashui/index.html"&gt;Dash UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Support - &lt;a href="https://github.com/codescandy/Dash-UI/discussions"&gt;Join the Community&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-package"&gt;
  &lt;/a&gt;
  What's in the package
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;50+ Components&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap 5.1.3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HTML5 &amp;amp; SCSS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gulp Based Workflow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;100% Responsive&lt;/li&gt;
&lt;li&gt;Authentication Pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collapsible Sidebar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Font Icons&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;li&gt;Developer &lt;a href="https://codescandy.com/dashui/docs/index.html"&gt;Docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/index.html"&gt;Project Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/profile.html"&gt;Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/settings.html"&gt;Account Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/billing.html"&gt;Billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/pricing.html"&gt;Pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication Pages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/sign-in.html"&gt;Sign In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/sign-up.html"&gt;Sign Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/forget-password.html"&gt;Forgot Password&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;404 Error&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Menu Level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Layout&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading.&lt;/strong&gt;&lt;br&gt;
If you like this product, please support us by sharing our GitHub repository! &lt;a href="https://github.com/codescandy/Dash-UI"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Stop pushing your React API Key on GitHub üò™</title>
      <author>Mansour Mahamat</author>
      <pubDate>Fri, 03 Dec 2021 07:48:07 +0000</pubDate>
      <link>https://dev.to/mahamatmans/stop-pushing-your-react-api-key-on-github-b2j</link>
      <guid>https://dev.to/mahamatmans/stop-pushing-your-react-api-key-on-github-b2j</guid>
      <description>&lt;p&gt;Have you ever create an application with React, in this application you use external API‚Äôs and you pushed these API keys on GitHub ? &lt;/p&gt;

&lt;p&gt;Oh no bad practice now everybody can use your API key.&lt;/p&gt;

&lt;p&gt;We will see how we can avoid this and hide your API‚Äôs keys on Github, you need .env file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-setup-env-file-inside-react-app-"&gt;
  &lt;/a&gt;
  How to setup .env file inside React app ?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You don‚Äôt need to install env package, this feature is available with &lt;a href="mailto:react-scripts@0.2.3"&gt;react-scripts@0.2.3&lt;/a&gt; and higher.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make a file called .env in your project root&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the env file, add your variables and API keys value like this :&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_GITHUB_API_KEY=Hello world 12345
REACT_APP_MOOVIE_API=0123456789
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You should prefix all your variables name by REACT_APP if not it will be ignored&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now you need to restart your React server with npm start to access these variables &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside your React application, you can now access these variables in using this syntax :&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{process.env.REACT_APP_GITHUB_API_KEY}
{process.env.REACT_APP_MOOVIE_API}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BKbZ975F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nntrz8tnubutirqppv9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKbZ975F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nntrz8tnubutirqppv9.png" alt="API Usage" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have zero excuse to push your API key in your React application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/adding-custom-environment-variables/"&gt;Here you have the React documentation about using environment variables &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Efeito Scroll Suave (Scroll smooth)</title>
      <author>jeft97</author>
      <pubDate>Fri, 03 Dec 2021 07:45:30 +0000</pubDate>
      <link>https://dev.to/jeft_97/efeito-scroll-suave-scroll-smooth-33b3</link>
      <guid>https://dev.to/jeft_97/efeito-scroll-suave-scroll-smooth-33b3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrbQLUdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxo5jf7idorsue0sqo46.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrbQLUdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxo5jf7idorsue0sqo46.gif" alt="Image description" width="880" height="478"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Premissa:&lt;/strong&gt;&lt;br&gt;
Antes mesmo de navegarmos nesse grande mar de c√≥digos e explica√ß√µes, gostaria de ser seguro que voc√™ esteje completamente ciente que o nosso foco principal ser√° explicar os conceitos de JavaScript, portanto se tiveres problemas em entender html e alguns conceitos b√°sicos de JavaScript, por favor este tutorial n√£o ser√° muito √∫til para voc√™, ao contr√°rio, ser√° provavelmente uma frustra√ß√£o. &lt;/p&gt;

&lt;p&gt;dito isso, gostaria de listar aqui o nosso c√≥digo html, compreende-o fortemente antes mesmo que eu o explique e assim ajudar√° voc√™ tamb√©m a ter uma melhor compreens√£o do conteudo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4-8SzB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2h52rcje993n4i0567d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4-8SzB9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2h52rcje993n4i0567d.png" alt="Image description" width="880" height="236"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-1&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a imagem acima apresenta o nosso bot√£o que servir√° como elemento a ser clicado e posteriormente nos levar√° at√© a sec√ß√£o desejada.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y71Z1vew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1qrdmata7tep3mhpr18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y71Z1vew--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1qrdmata7tep3mhpr18.png" alt="Image description" width="880" height="526"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-2&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a imagem acima refere-se a sec√ß√£o na qual queremos chegar com o nosso scroll suave uma vez clicado ao nosso bot√£o descrito na imagem-1.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tendo o nosso c√≥digo html efeito, agora √© necess√°rio selecionarmos estes dois elementos, o bot√£o (descrito na imagem-1) e a sec√ß√£o (section descrito na imagem-2) no nosso javascript, para isso devemos usar seguir os seguintes passos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUGEWEpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eif6rdbz8tvmbltwgez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUGEWEpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eif6rdbz8tvmbltwgez.png" alt="Image description" width="880" height="288"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-3&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;como voc√™ v√™, a ideia √© selecionar os dois elementos no qual precisaremos, o bot√£o, que servir√° para aplicarmos o evento, a sec√ß√£o (section), que ouvir√° e executar√° esse evento atrav√©s de uma fun√ß√£o contendo as instru√ß√µes necess√°rias&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Agora que estamos prontos com as ideias fundamentais que giram em torno do nosso desafio de hoje, por favor entre no barco e vamos navegar por mais de 3000 mil milhas da costa.&lt;/p&gt;

&lt;p&gt;Para a aplica√ß√£o do nosso efeito scroll suave (scroll smooth) existe duas t√©cnicas bastante usadas que s√£o:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usando coordenadas explicitas (scrollTo(object))&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Usando coordenadas impl√≠citas (scrollIntoView(object))&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#usando-coordenadas-explicitas-scrolltoobject"&gt;
  &lt;/a&gt;
  Usando coordenadas explicitas (scrollTo(object))
&lt;/h4&gt;

&lt;p&gt;A primeira ideia sobre essa t√©cnica √© obtermos coordenadas do nosso elemento no qual queremos que a nossa barra de rolagem tenha como destino, Em nosso caso ser√° a nossa &lt;strong&gt;section1&lt;/strong&gt;.√â importante real√ßar que est√° t√©cnica √© bastante antiga e ela comporta um custo computacional alto, mas para fins did√°ticos e tamb√©m por compatibilidade com alguns browsers antigos que n√£o suportam a nova t√©cnica que veremos posteriormente, decidi trazer ela para um estudo.&lt;br&gt;
Sendo que a ideia √© ter as coordenadas X e Y da nossa &lt;strong&gt;section1&lt;/strong&gt;, existe um m√©todo do nosso pr√≥prio elemento que se chama &lt;strong&gt;getBluidingClientReact()&lt;/strong&gt; que obt√©m os valor das coordenadas desejada, este m√©todo nos retorna um objeto &lt;strong&gt;DOMRect&lt;/strong&gt;  que cont√©m v√°rias propriedades, mas para o nosso estudo estaremos interessados em utilizar as propriedades Left e Top. Left representa a coordenada no eixo X, ou seja ela representa a dist√¢ncia no eixo X entre o elemento clicado(bot√£o) at√© ao elemento na qual queremos rolar (section1) no eixo X do plano cartesiano, e o Top representa a coordenada do eixo Y, ou seja ela representa a dist√¢ncia no eixo Y entre o elemento clicado (Bot√£o) at√© ao elemento na qual queremos rolar (section1) no eixo Y do plano cartesiano.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiDuzoeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijm2t33pyvg2rlu2lpzg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiDuzoeW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijm2t33pyvg2rlu2lpzg.jpg" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-4&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Como um m√≠nimo de matem√°tica b√°sica conseguimos perceber e ter uma ideia sobre os nossos dois eixos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Se notarmos com aten√ß√£o o nosso eixo X representado por Left, o seu valor ser√° zero porque o elemento ocupa toda p√°gina e esse valor permanece inalter√°vel, J√° o eixo  Y representado por Top o seu valor vai mudando  em fun√ß√£o da nossa barra de rolagem, quando o scroll(barra de rolagem) chega at√© a section1 o Top (eixo Y) assume valor 0 simbolizando assim que chegamos da nossa barra de rolagem. Tendo em posse esses dois valores preciosos, nos √© hora de aplicar esses valores em nosso objeto &lt;strong&gt;windows&lt;/strong&gt; porque √© este objeto que controla a nossa barra de rolagem. para isso, basta usarmos um m√©todo do nosso objeto windows chamado scrollTo() passando um objecto que recebe as nossas coordenadas e uma propriedade especial chamada &lt;strong&gt;behavior&lt;/strong&gt; que ter√° como valor &lt;strong&gt;smooth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;obs:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A propriedade &lt;strong&gt;behavior&lt;/strong&gt; recebe dois valores, um √© o &lt;strong&gt;auto&lt;/strong&gt;, que representa o comportamento padr√£o das barraras de rolagem de um navegador, j√° o &lt;strong&gt;smooth&lt;/strong&gt; torna a rolagem da barra suave. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQCjvJb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdpmo799lhwytd4mpgc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQCjvJb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdpmo799lhwytd4mpgc5.png" alt="Image description" width="880" height="668"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-5&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aplicando o evento click ao bot√£o e executado a fun√ß√£o callback para realiza√ß√£o do nosso efeito.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, agora parece que chegamos ao fim do nosso trabalho, mas n√£o, infelizmente n√£o, com um pouco mais de aten√ß√£o percebemos que temos que resolver ainda mais um pequeno problema, que problema? Se eu quando fa√ßo click ao bot√£o me leva a sec√ß√£o deseja e com efeito do scroll suave. Realmente s√≥ com essas linhas de c√≥digos o nosso efeito j√° funciona, mas se redimensionarmos o nosso browser no eixo Y perceber√°s que n√£o teremos o resultado esperado. Mas qual √© o motivo deste comportamento?&lt;br&gt;
Bem, o nosso problema existe pelo facto que as nossas viewport dos browsers t√™m dimens√µes relativas e n√£o fixas, e cada vez que eu altero a dimens√£o do nosso browser a nossa viewport muda as suas dimens√µes. Uma outra causa clara sobre isso, √© a exist√™ncia de v√°rios dispositivos que executar√£o o nosso programa, visto que elas possuem dimens√µes diferentes em base ao dispositivo que estamos usando, ent√£o tamb√©m nos pode gerar esse problema.&lt;br&gt;
&lt;em&gt;Exemplo:&lt;/em&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;uma viewport de um smartphone Galaxy n√£o √© igual a de um computador ou iPhone.&lt;/p&gt;

&lt;p&gt;Agora que identificamos o nosso problema, a nossa solu√ß√£o passa por ter mais outras duas coordenadas que representam a nossa viewport com valores relativos, para isso temos  duas propriedades do objeto windows  que retornam os valores das coordenadas X e Y da nossa viewport e posteriormente esses valores devem ser somando com as coordenadas vinda do nosso elemento (section1), ou seja, a coordenada Y retornada do objeto window deve somar com a coordenada Y do nosso elemento, e a coordenada X  retornada do objeto window deve somar com a coordenada X do nosso elemento.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQiHtu-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5actm3t2egpt5vn5fcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQiHtu-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5actm3t2egpt5vn5fcu.png" alt="Image description" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;descri√ß√£o:imagem-6&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Window.pageXOffset = coordenada X da janela (Windows = viewport) &lt;br&gt;
Window.pageYOffset = coordenada Y da janela (Windows = viewport)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#usando-coordenadas-impl%C3%ADcitas-scrollintoviewobject"&gt;
  &lt;/a&gt;
  Usando coordenadas impl√≠citas (scrollIntoView(object))
&lt;/h4&gt;

&lt;p&gt;Antes de explicar o uso da segunda t√©cnica gostaria de fazer uma premissa muito importante, O uso deste m√©todo √© recente, e para browsers antigos possivelmente n√£o funcionar√° por n√£o terem suporte ao mesmo, por isso antes do uso do mesmo √© necess√°ria uma verifica√ß√£o onde o seu servi√ßo poder√° ser consumido, assim poder√°s evitar qualquer problema de funcionamento, voc√™ pode der essa informa√ß√£o visitando o &lt;strong&gt;can I use&lt;/strong&gt; para ter ideia do suporte na data atual em que voc√™ l√™ este artigo, mas contudo deixarei aqui tamb√©m uma imagem da visita feita no can I use com o suporte da data atual. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZDXIyGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lple2iz0sa04pp66vgtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZDXIyGp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lple2iz0sa04pp66vgtz.png" alt="Image description" width="880" height="451"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-7&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Consulta no &lt;strong&gt;can I use&lt;/strong&gt; para verificar o suporte do m√©todo scrollIntoView nos browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Depois dessa pequena observa√ß√£o gostaria de dizer que este m√©todo √© ainda mais f√°cil do que o primeiro, porque com este m√©todo n√£o nos preocupamos em ter essas coordenadas que parecem extremamente tediosa de entender, a ideia primaria √© ter a refer√™ncia do elemento no qual queremos que o nosso scroll v√° suavemente depois do click, Posteriormente devemos pegar esse elemento e executar simplesmente um seu m√©todo  chamado scrollIntoView passando como par√¢metro do m√©todo um objeto com a propriedade behavior tendo o valor smooth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuGS0hDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf30psq7lrh4zyqe65zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuGS0hDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf30psq7lrh4zyqe65zg.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;descri√ß√£o:imagem-8&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Executando o nosso efeito s√≥ com uma linha de c√≥digo &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simplesmente f√°cil e satisfat√≥rio, neste tutorial n√£o mexemos com o delay na qual o scroll poderia ter para chegar ao elemento desejado, mais nos pr√≥ximos artigos espero trazer isso pra voc√™s de uma maneira mais simples de se implementar, mas sem esquecer os fundamentos por tr√°s. Sei que n√£o nos conv√©m refazer a roda, mas √© necess√°rio saber com que material √© feito e como √© feito para que saibamos escolher uma boa roda e distinguir ela no meio de qualquer coisa circular com a mesma cor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;author: Jeft F. Matamba&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What Are the Common Misconceptions About Machine Learning?</title>
      <author>Abid</author>
      <pubDate>Fri, 03 Dec 2021 07:16:29 +0000</pubDate>
      <link>https://dev.to/kingabzpro/what-are-the-common-misconceptions-about-machine-learning-4937</link>
      <guid>https://dev.to/kingabzpro/what-are-the-common-misconceptions-about-machine-learning-4937</guid>
      <description>&lt;p&gt;There is a hype train going on about ML (Machine Learning) and most of the beginners are getting victims of this hype as they are getting in for the wrong reasons. Your professor will explain how getting a Ph.D. is necessary if you want to get better at machine learning or your peers are telling you how to get better GPU and IDE (Integrated Development Environment) will help you get better results. As you start to learning from the online course you realize that you need a bigger dataset and expertise in Python. After learning the required skills when you apply for a job you realize that you need more than a few courses or certifications to make it. In the end, after getting the job, you realize that it is demanding work and sometimes these jobs don't pay well at the initial stages.&lt;/p&gt;




&lt;p&gt;This article will help you get through those disappointments and prepare you to face these problems. We will be learning a lot about the real-life problem faced by a beginner getting into the machine learning field.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is clear empirical evidence that you don‚Äôt need lots of math, you don‚Äôt need lots of data, and you don‚Äôt need lots of expensive computers. ‚Äî Jeremy Howard (Practical Deep Learning for Coders)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Continue reading: &lt;a href="https://pub.towardsai.net/what-are-the-common-misconceptions-about-machine-learning-2f43bfd40002"&gt;What Are the Common Misconceptions About Machine Learning?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Create a Loader!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Fri, 03 Dec 2021 07:03:08 +0000</pubDate>
      <link>https://dev.to/ziratsu/how-to-create-a-loader-2f7h</link>
      <guid>https://dev.to/ziratsu/how-to-create-a-loader-2f7h</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;You want to add a &lt;em&gt;loader&lt;/em&gt; to your app, but don't know where to start? Look no further!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fnv9lifum1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the &lt;a href="https://codepen.io/Enzo-Ustariz/pen/LYygJEK"&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create a &lt;em&gt;loader-container&lt;/em&gt; with three dots inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-the-loader"&gt;
  &lt;/a&gt;
  2. Style the loader.
&lt;/h2&gt;

&lt;p&gt;Style the loader with a &lt;em&gt;position: absolute&lt;/em&gt; and make it take the full width and height of the viewport. Then, make sure the three dots are centered in the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loader-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-animate-the-loader"&gt;
  &lt;/a&gt;
  3. Animate the loader.
&lt;/h2&gt;

&lt;p&gt;Now, style the dots so that they can be easily seen (make it 25px wide and 25px high) and color them black. Finally, add an animation that you'll create right after this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key to the animation is to add a delay to the second and third dots' animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.d2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.05s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.d3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create the animation with a keyframe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've created a simple but effective &lt;em&gt;loader in CSS&lt;/em&gt;, well done!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Do they know it's C in PHP üéÑ</title>
      <author>Anders Bj√∂rkland</author>
      <pubDate>Fri, 03 Dec 2021 06:55:17 +0000</pubDate>
      <link>https://dev.to/andersbjorkland/do-they-know-its-c-in-php-4ojh</link>
      <guid>https://dev.to/andersbjorkland/do-they-know-its-c-in-php-4ojh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Just the Gist&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Behind the scenes, PHP uses the C programming language to do its magic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#its-c-in-a-nice-wrapper"&gt;
  &lt;/a&gt;
  It's C in a nice wrapper üéÅ
&lt;/h2&gt;

&lt;p&gt;While we write PHP, behind the scene it is all being interpreted as C. When we write &lt;code&gt;pi()&lt;/code&gt;, what's going on? Behind the scenes it's mapped to this code in the C programming language:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="nf"&gt;PHP_FUNCTION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;ZEND_PARSE_PARAMETERS_NONE&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nf"&gt;RETURN_DOUBLE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;M_PI&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;M_PI&lt;/code&gt; is a constant defined in the &lt;code&gt;php_math.h&lt;/code&gt; header file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;ifndef&lt;/span&gt; &lt;span class="n"&gt;M_PI&lt;/span&gt;
&lt;span class="cp"&gt;#define M_PI           3.14159265358979323846  /* pi */
#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And guess what? We can also call the constant &lt;code&gt;M_PI&lt;/code&gt; from PHP and get the same result. This is really not a surprise, as we can see that the function just returns that constant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interpretation-skills"&gt;
  &lt;/a&gt;
  Interpretation skills
&lt;/h2&gt;

&lt;p&gt;So how is &lt;code&gt;&amp;lt;?php echo pi() ?&amp;gt;&lt;/code&gt; able to use the C language to return to us the value of &lt;code&gt;M_PI&lt;/code&gt;? It's because of the Zend Engine. This interpreter has been a part of PHP since version 4, but how does it work? It's a bit like a compiler and a runtime environment rolled up into one:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It analyzes the code.&lt;/li&gt;
&lt;li&gt;Then it translates it into C.&lt;/li&gt;
&lt;li&gt;And finally it executes the translated code.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è The Zend Engine is a C extension that is part of PHP. You don't have to go chasing after it on the Web if you've already got PHP for your machine. You will have all you need to run your scripts!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h2&gt;

&lt;p&gt;What are your thoughts on the C programming language? Would you be willing to try it out, maybe even becoming a core contributor? Leave a comment below! ‚úç&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PHP Internals Book -  &lt;a href="https://www.phpinternalsbook.com/"&gt;https://www.phpinternalsbook.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;PHP 8.1 Source Code: &lt;a href="https://github.com/php/php-src/tree/PHP-8.1.0"&gt;https://github.com/php/php-src/tree/PHP-8.1.0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;PHP's PI implementation in C:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/math.c#L474"&gt;The Math library for PHP: PI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/php_math.h#L51"&gt;The Math header for PHP: PI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Compiled vs interpreted languages: &lt;a href="https://www.freecodecamp.org/news/compiled-versus-interpreted-languages/"&gt;&lt;/a&gt;&lt;a href="https://www.freecodecamp.org/news/compiled-versus-interpreted-languages/"&gt;https://www.freecodecamp.org/news/compiled-versus-interpreted-languages/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>c</category>
    </item>
    <item>
      <title>Glassmorphism for Firefox</title>
      <author>Masa Kudamatsu</author>
      <pubDate>Fri, 03 Dec 2021 06:50:16 +0000</pubDate>
      <link>https://dev.to/masakudamatsu/glassmorphism-for-firefox-3285</link>
      <guid>https://dev.to/masakudamatsu/glassmorphism-for-firefox-3285</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;To create a frosted glass look (known as &lt;em&gt;glassmorphism&lt;/em&gt;) on the web, using &lt;code&gt;backdrop-filter: blur()&lt;/code&gt; in CSS is the simplest approach if you can ignore Firefox users (Section 1).&lt;/p&gt;

&lt;p&gt;For Firefox users, however, there is a trick quite straightforward to implement glassmorphism: using the &lt;code&gt;-moz-element()&lt;/code&gt; CSS function. (Section 2)&lt;/p&gt;

&lt;p&gt;If the background graphic is set with &lt;code&gt;background-image&lt;/code&gt;, there is another way of creating glassmorphism effects that is compatible with all modern browsers: applying &lt;code&gt;filter: blur()&lt;/code&gt; to the duplicated background image (Section 3).&lt;/p&gt;

&lt;p&gt;And all these techniques can be used not just for glassmorphism but also for any graphical effects created with the &lt;code&gt;filter&lt;/code&gt; CSS property. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Belatedly, I just learned about a recent UI design trend known as &lt;em&gt;glassmorphism&lt;/em&gt;, popularized by Microsoft's ‚ÄúAcrylic Material‚Äù of Fluent design system and, more recently, by macOS Big Sur.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FStQczF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo9uegcehgk3z5jj23ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FStQczF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo9uegcehgk3z5jj23ue.png" alt="A photo of the sunset in the sea overlaid with a white translucent glass-like rectangle" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acrylic Material of the Fluent design system by Microsoft&lt;/strong&gt; (image source: &lt;a href="https://docs.microsoft.com/en-us/windows/apps/design/style/acrylic"&gt;Microsoft Docs&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nY3UX3O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kct04tff6h0zjwccxs97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nY3UX3O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kct04tff6h0zjwccxs97.png" alt='An alert box with text "Are you sure you want to permanently erase the items in the Trash?" is shown with the background graphic seen through in a blurry manner' width="672" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An example alert in macOS Big Sur&lt;/strong&gt; (image source: &lt;a href="https://developer.apple.com/design/human-interface-guidelines/macos/overview/whats-new-in-macos/"&gt;Apple Developer&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I googled how to implement this frosted glass look with CSS. Most articles suggest using the &lt;code&gt;backdrop-filter&lt;/code&gt; CSS property, and they all mention that it's not supported by Firefox, without explaining what can be done for Firefox users.&lt;/p&gt;

&lt;p&gt;Frustrated, I further explored the topic and learned the following:&lt;/p&gt;

&lt;p&gt;(1) If the background graphic is set with &lt;code&gt;background-image&lt;/code&gt;, using &lt;code&gt;filter: blur()&lt;/code&gt; can achieve glassmorphism for all modern browsers, including Firefox;&lt;/p&gt;

&lt;p&gt;(2) There is also a Firefox-specific implementation that can work with any background graphic (e.g., the image drawn with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt;): using &lt;code&gt;-moz-element()&lt;/code&gt; to copy the background and blur it with &lt;code&gt;filter: blur()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second method appears to be lesser-known among web developers interested in glassmorphism. But it's definitely a great approach to complement &lt;code&gt;backdrop-filter&lt;/code&gt;. The first method can be used to support the legacy browsers that don't support &lt;code&gt;backdrop-filter&lt;/code&gt; but do support the &lt;code&gt;filter&lt;/code&gt; CSS property (which excludes IE, by the way).&lt;/p&gt;

&lt;p&gt;This article elaborates on these two approaches to implement glassmorphism for Firefox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-raw-backdropfilter-endraw-approach"&gt;
  &lt;/a&gt;
  1. The &lt;code&gt;backdrop-filter&lt;/code&gt; approach
&lt;/h2&gt;

&lt;p&gt;Before getting into Firefox, let's recap how to use &lt;code&gt;backdrop-filter&lt;/code&gt; to create a glassmorphism look. The benefit of this approach is its simplicity. The limitation is that it doesn't work for Firefox, even for its latest version (as of December 2021).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-basic-syntax"&gt;
  &lt;/a&gt;
  1.1 Basic syntax
&lt;/h3&gt;

&lt;p&gt;The core of this approach is to apply the following pair of CSS declarations to the element floated over the background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hsla&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;97&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* translucent off-white */&lt;/span&gt;
  &lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The exact values of lightness and opacity for the background color and of the &lt;code&gt;blur()&lt;/code&gt; function's parameter need to be adjusted for each case. The color doesn't have to be neutral: for a tinted glass look, change the hue and saturation values of the &lt;code&gt;hsla()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The above pair of CSS declarations creates a frosted-glass rectangle like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zxHjk5g2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6uq0zgg23p7u83c9v1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxHjk5g2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6uq0zgg23p7u83c9v1c.png" alt="A frost-glass rectangle placed over the photo of a fruit cake" width="799" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic glassmorphism effect&lt;/strong&gt; (image source: &lt;a href="https://css-tricks.com/icon-glassmorphism-effect-in-css/#getting-to-the-root-of-the-problem"&gt;Tudor 2021&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It's important to create translucency with the alpha value of color code (the &lt;code&gt;rgba()&lt;/code&gt; function will work, too). If you set a solid color as the background and use the &lt;code&gt;opacity&lt;/code&gt; property, it won't work. See &lt;a href="https://css-tricks.com/icon-glassmorphism-effect-in-css/#getting-to-the-root-of-the-problem"&gt;Tudor (2021)&lt;/a&gt; for detail. &lt;/p&gt;

&lt;p&gt;You may want to add more filters, to achieve the desired effect. According to Microsoft Design's blog article (&lt;a href="https://medium.com/microsoft-design/diy-a-web-version-the-fluent-design-systems-acrylic-material-fe2eac2a40bb"&gt;Day 2018&lt;/a&gt;), the Acrylic Material of the Fluent design system can be replicated with the following value of &lt;code&gt;backdrop-filter&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;30&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;saturate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#12-with-glassedge-border"&gt;
  &lt;/a&gt;
  1.2 With glass-edge border
&lt;/h3&gt;

&lt;p&gt;To enforce the appearance of a frosted glass plate, &lt;a href="https://uxdesign.cc/glassmorphism-in-user-interfaces-1f39bb1308c9"&gt;Malewicz (2020)&lt;/a&gt; recommends adding a 1px-thick border in translucent white as an imitation of the edge of glass. &lt;a href="https://www.albertwalicki.com/blog/glassmorphism-how-to-create"&gt;Walicki (2020a)&lt;/a&gt; presents an example of this approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* translucent white */&lt;/span&gt;
  &lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="nt"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which produces a UI like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWY3kn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze4ax5rlcg2t006lm50n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjWY3kn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze4ax5rlcg2t006lm50n.png" alt='A bold and white string of uppercase letters that read "Glassmorphism" is partly overlaid with a frost-glass rectangle' width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Glassmorphism effect with 1px-thick translucent white border&lt;/strong&gt; (image source: a Chrome screenshot of &lt;a href="https://codepen.io/walickialbert/pen/xxOvPmb"&gt;Walicki 2020b&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For more examples of the &lt;code&gt;backdrop-filter&lt;/code&gt; approach to achieve glassmorphism, see the CodePen by &lt;a href="https://codepen.io/georgedoescode/pen/bGBzGKZ"&gt;Francis (2021)&lt;/a&gt; and by &lt;a href="https://codepen.io/opeala/pen/yLaMBvN"&gt;Ellis (2020)&lt;/a&gt;. For the latter, uncomment &lt;code&gt;backdrop-filter: blur(15px)&lt;/code&gt; in the &lt;code&gt;.container&lt;/code&gt; class, to see the glassmorphic calculator(!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-support-for-safari"&gt;
  &lt;/a&gt;
  1.3 Support for Safari
&lt;/h3&gt;

&lt;p&gt;Safari doesn't support &lt;code&gt;backdrop-filter&lt;/code&gt; unless it's prefixed with &lt;code&gt;-webkit-&lt;/code&gt; (&lt;a href="https://caniuse.com/css-backdrop-filter"&gt;Can I Use 2021b&lt;/a&gt;). So write CSS code like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* translucent white */&lt;/span&gt;
&lt;span class="nt"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
&lt;span class="nt"&gt;backdrop-filter&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;blur&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt; &lt;span class="nt"&gt;rgba&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;255&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, use a tool like &lt;a href="https://github.com/postcss/autoprefixer"&gt;Autoprefixer&lt;/a&gt;. CSS-in-JS libraries may also do it for you (for &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt;, it's a default feature).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-limitation"&gt;
  &lt;/a&gt;
  1.4 Limitation
&lt;/h3&gt;

&lt;p&gt;However, Firefox doesn't support &lt;code&gt;backdrop-filter&lt;/code&gt; unless the user changes the browser's settings (&lt;a href="https://caniuse.com/css-backdrop-filter"&gt;Can I Use 2021b&lt;/a&gt;). And it's unlikely that an average Firefox user changes the settings specifically to enable &lt;code&gt;backdrop-filter&lt;/code&gt;. So the above example will be shown in Firefox like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9d00OpBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8y1i4fm7hz9b5zwfen1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9d00OpBV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8y1i4fm7hz9b5zwfen1.png" alt='A bold and white string of uppercase letters that read "Glassmorphism" is partly overlaid with a translucent white rectangle' width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Glassmorphism effect disabled in Firefox&lt;/strong&gt; (image source: a Firefox screenshot of &lt;a href="https://codepen.io/walickialbert/pen/xxOvPmb"&gt;Walicki 2020b&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Somehow, most recent articles on glassmorphism stop discussions here, as if it were fine to ignore Firefox users.&lt;/p&gt;

&lt;p&gt;But Firefox accounts for 3.61% of global page views in October 2021 (&lt;a href="https://caniuse.com/usage-table"&gt;Can I Use 2021a&lt;/a&gt;). That's not an ignorable number of users. &lt;/p&gt;

&lt;p&gt;And I'm one of them. :-) Using Firefox, I was reading &lt;a href="https://speckyboy.com/css-glassmorphism/"&gt;Karkovack (2021)&lt;/a&gt;, an article showcasing ‚Äú8 stunning examples of CSS glassmorphism effects‚Äù with links to CodePen for each example. Some of these examples rely on &lt;code&gt;backdrop-filter&lt;/code&gt;. So I actually couldn't see any glassmorphism effects at all. That wasn't a pleasant user experience. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-fallback-for-firefox-and-legacy-browsers"&gt;
  &lt;/a&gt;
  1.5 Fallback for Firefox (and legacy browsers)
&lt;/h3&gt;

&lt;p&gt;There is a way to achieve glassmorphism for Firefox (see Section 2 below). But if you're in a hurry, you should at least provide a fallback UI for Firefox users (as suggested by &lt;a href="https://css-tricks.com/backdrop-filter-effect-with-css/"&gt;Graham 2020&lt;/a&gt;). The translucent white without being blurred with the background may not create a sufficient level of contrast between text and background. If so, change the background color to ensure the legibility of text for Firefox users. If we use &lt;a href="https://css-tricks.com/a-complete-guide-to-custom-properties/"&gt;CSS custom properties&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Fallback for Firefox and legacy browsers */&lt;/span&gt;
&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--background-for-firefox&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;/* Glassmorphism for other modern browsers */&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--background-for-glassmorphism&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As Firefox doesn't support &lt;code&gt;backdrop-filter: blur(5px)&lt;/code&gt;, the glassmorphism part of CSS will be ignored. For other modern browsers, the &lt;code&gt;background&lt;/code&gt; property will be overridden with &lt;code&gt;var(--background-for-glassmorphism)&lt;/code&gt;. (In case the &lt;code&gt;@supports&lt;/code&gt; query is new to you, I recommend reading &lt;a href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/"&gt;Simmons 2016&lt;/a&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-raw-mozelement-endraw-approach"&gt;
  &lt;/a&gt;
  2. The &lt;code&gt;-moz-element()&lt;/code&gt; approach
&lt;/h2&gt;

&lt;p&gt;To implement glassmorphism for Firefox users,  &lt;a href="https://css-tricks.com/icon-glassmorphism-effect-in-css/#getting-to-a-firefox-solution"&gt;Tudor (2021)&lt;/a&gt; proposes the use of &lt;code&gt;-moz-element()&lt;/code&gt;, a Firefox-only CSS function, for applying a glassmorphism effect on emoji text.&lt;/p&gt;

&lt;p&gt;The technique appeared to me equally applicable to any other cases of glassmorphism. So I spent a lot of time to figure out how to achieve the frosted-glass look with  &lt;code&gt;-moz-element()&lt;/code&gt;. But I couldn't really figure it out.&lt;/p&gt;

&lt;p&gt;Then, I googled the phrase ‚Äúelement() css function‚Äù, an idea that somehow slipped from my mind. I found an article written 6 years ago by &lt;a href="https://iamvdo.me/en/blog/css-element-function#faking-backdrop-filter"&gt;De Oliveira (2015)&lt;/a&gt;, which showcases how to use &lt;code&gt;-moz-element()&lt;/code&gt; as a fallback for &lt;code&gt;backdrop-filter&lt;/code&gt;(!). &lt;/p&gt;

&lt;p&gt;The article doesn't refer to glassmorphism or a frosted-glass look, which is probably why this technique is unnoticed by those web developers interested in glassmorphism in the past couple of years.&lt;/p&gt;

&lt;p&gt;Below I'll explain how this method works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-initial-ui"&gt;
  &lt;/a&gt;
  2.1 Initial UI
&lt;/h3&gt;

&lt;p&gt;Let's start by using the Firefox logo on a gradient background, taken from &lt;a href="https://blog.mozilla.org/en/products/firefox/the-fox-is-still-in-the-firefox-logo/"&gt;Mozilla (2021)&lt;/a&gt;, as our background graphic with a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"full-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with the following CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://blog.mozilla.org/wp-content/blogs.dir/278/files/2021/02/ff_blog_header_ff_1400x770.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.full-screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will later need to refer to the element that contains the background graphic for using the &lt;code&gt;-moz-element()&lt;/code&gt; CSS function. So I add &lt;code&gt;id="background"&lt;/code&gt; to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element that contains the background graphic. We can instead use &lt;code&gt;&amp;lt;body id="background"&amp;gt;&lt;/code&gt; to embed the full-screen background graphic. But I use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to demonstrate that the background graphic can be any HTML element.&lt;/p&gt;

&lt;p&gt;Also, the background graphic doesn't need to be set with the &lt;code&gt;background-image&lt;/code&gt; property. This &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element can instead be, for example, a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element in which JavaScript draws a raster image (see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial"&gt;MDN Contributors 2021b&lt;/a&gt; for how), or an embedded Google Maps (with the use of &lt;a href="https://developers.google.com/maps/documentation/javascript/overview"&gt;Google Maps JavaScript API&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then, we render a card to be glassmorphed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background full-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- ADDED FROM HERE --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  glassmorphism for Firefox
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;at the center of the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://blog.mozilla.org/wp-content/blogs.dir/278/files/2021/02/ff_blog_header_ff_1400x770.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.full-screen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* ADDED FROM HERE */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need &lt;code&gt;z-index: -1&lt;/code&gt; for the background image element so it goes underneath the card to be glassmorphed. This is because an absolutely-positioned element, without &lt;code&gt;z-index&lt;/code&gt; specified, will be rendered above other normally positioned elements (&lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;Walson 2013&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Note that the card's background and border is in translucent white (as in Section 1.2 above). It can be any color, though, as long as it's translucent.&lt;/p&gt;

&lt;p&gt;And I style the text by adding the &lt;code&gt;font&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"background full-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card font"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- REVISED --&amp;gt;&lt;/span&gt;
  glassmorphism for Firefox
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the following additional CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Styling font */&lt;/span&gt;
&lt;span class="nc"&gt;.font&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* center-align text */&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* style text */&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Glass Antiqua'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.font&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I use an elegant, art nouveau font called &lt;a href="https://fonts.google.com/specimen/Glass+Antiqua"&gt;Glass Antiqua&lt;/a&gt; from Google Fonts. &lt;a href="https://en.wikipedia.org/wiki/Art_Nouveau_glass"&gt;The early 20th century design style of &lt;em&gt;art nouveau&lt;/em&gt; is well-known for glass works&lt;/a&gt;, often in translucent milky white. So it's very fitting. :-) &lt;/p&gt;

&lt;p&gt;The above HTML/CSS code gives you this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wORVU5G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko4igq23qjyoy4vbsikp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wORVU5G5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ko4igq23qjyoy4vbsikp.png" alt='A translucent white card with the center-aligned text of "glassmorphism for Firefox" is shown over the logo of Firefox' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Firefox screenshot of &lt;a href="https://codepen.io/masakudamatsu/pen/bGoNXVJ"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;p&gt;From now on, I recommend reading this article with Firefox. Otherwise you won't be able to see the demo of each step as intended.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-using-raw-mozelement-endraw-to-copy-the-background"&gt;
  &lt;/a&gt;
  2.2 Using &lt;code&gt;-moz-element()&lt;/code&gt; to copy the background
&lt;/h3&gt;

&lt;p&gt;The first thing to do for a glassmorphism effect for Firefox is to create a pseudo element for the element to be glassmorphed. Let's add a new class called &lt;code&gt;glassmorphism&lt;/code&gt; to the card so that we can group all the CSS declarations for glassmorphism together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"background"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"full-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"glassmorphism card font"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- REVISED --&amp;gt;&lt;/span&gt;
  glassmorphism for Firefox
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And create a pseudo element that fully overlaps behind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a standard technique used for various purposes of styling (see &lt;a href="https://css-tricks.com/7-practical-uses-for-the-before-and-after-pseudo-elements-in-css/"&gt;Hazeez 2021&lt;/a&gt;, for example). &lt;/p&gt;

&lt;p&gt;Now we duplicate the background graphic as the one for this pseudo element, with &lt;code&gt;-moz-element()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the &lt;code&gt;-moz-element()&lt;/code&gt; function takes &lt;code&gt;#background&lt;/code&gt; as its argument. This way, it refers to the graphic contained by &lt;code&gt;&amp;lt;div id="background"&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Also notice that we add &lt;code&gt;background-attachment: fixed&lt;/code&gt;. Without this declaration, we would get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fzlBszcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/782c9cgvz60qb7t6df27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fzlBszcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/782c9cgvz60qb7t6df27.png" alt="The logo of Firefox shown as a background inside the white-rimmed rectangle is misaligned with the one outside it" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Firefox screenshot of &lt;a href="https://codepen.io/masakudamatsu/pen/QWqweGW"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo with Firefox!)&lt;/p&gt;

&lt;p&gt;Without &lt;code&gt;background-attachment: fixed&lt;/code&gt;, the top left corner of the background graphic would be set at the top left corner of the card. Unless the card is positioned at the top left corner of the screen, this means that the two background graphics would get misaligned.&lt;/p&gt;

&lt;p&gt;Before discovering an article by &lt;a href="https://iamvdo.me/en/blog/css-element-function#faking-backdrop-filter"&gt;De Oliveira (2015)&lt;/a&gt;, as mentioned at the beginning of Section 2 above, I worked on my own to achieve glassmorphism with &lt;code&gt;-moz-element()&lt;/code&gt; in Firefox. But I couldn't achieve it as simple as &lt;a href="https://iamvdo.me/en/blog/css-element-function#faking-backdrop-filter"&gt;De Oliveira (2015)&lt;/a&gt; does, because I didn't notice that &lt;code&gt;background-attachment: fixed&lt;/code&gt; could easily align the two background graphics.&lt;/p&gt;

&lt;p&gt;Incidentally, Safari doesn't support &lt;code&gt;background-attachment: fixed&lt;/code&gt; (&lt;a href="https://caniuse.com/background-attachment"&gt;Can I Use 2021d&lt;/a&gt;). But that's fine because we're dealing with Firefox only.&lt;/p&gt;

&lt;p&gt;Now we are only one step away from the glassmorphism look for Firefox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-blurring-the-background-with-raw-filter-blur-endraw-"&gt;
  &lt;/a&gt;
  2.3 Blurring the background with &lt;code&gt;filter: blur()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The last step for glassmorphism in Firefox is very simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;filter: blur()&lt;/code&gt; makes the entire element blurred. Adjust the pixel value in parentheses to achieve the desired degree of blurriness.&lt;/p&gt;

&lt;p&gt;Here's what the above code achieves with Firefox:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmUK3V3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fp7uepqqyo09a4mc5sl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmUK3V3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fp7uepqqyo09a4mc5sl.png" alt='The logo of Firefox in the background gets blurred only within the area occupied by a transparent, white-rimmed card with the center-aligned text of "glassmorphism for Firefox"' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Firefox screenshot of &lt;a href="https://codepen.io/masakudamatsu/pen/VwMYoQG"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo with Firefox!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-dealing-with-other-modern-browsers"&gt;
  &lt;/a&gt;
  2.4 Dealing with other modern browsers
&lt;/h3&gt;

&lt;p&gt;The above code only works for Firefox. For other modern browsers, we can use the &lt;code&gt;backdrop-filter&lt;/code&gt; approach described in Section 1 above. We can simply add it to the card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's no harm for Firefox, as it will ignore the line containing &lt;code&gt;backdrop-filter&lt;/code&gt;. That's how CSS works. Let me cite the following passage from &lt;em&gt;Resilient Web Design&lt;/em&gt; by &lt;a href="https://resilientwebdesign.com/chapter4/"&gt;Keith (n.d.)&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The loose error‚Äêhandling of HTML and CSS means that many authoring mistakes or browser support issues are handled  gracefully; the browser simply ignores what it doesn‚Äôt understand and  carries on. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But other modern browsers will create the pseudo element for no purpose. To avoid this unnecessary browser rendering, we can wrap all the CSS declarations specific to this Firefox trick with the &lt;code&gt;@supports&lt;/code&gt; query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c"&gt;/* MOVED */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;                       &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Furthermore, maybe one day, Firefox will start supporting &lt;code&gt;backdrop-filter&lt;/code&gt; in which case we no longer need the &lt;code&gt;-moz-element()&lt;/code&gt; trick. Since it does support &lt;code&gt;-moz-element()&lt;/code&gt;, the above code lets Firefox create a pseudo element. So, to be future-proof, we can revise the &lt;code&gt;@support&lt;/code&gt; query as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;/* REVISED */&lt;/span&gt;
  &lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;        
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#bac&lt;/span&gt;&lt;span class="n"&gt;kground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For how the &lt;code&gt;not&lt;/code&gt; operator works for the &lt;code&gt;@supports&lt;/code&gt; query, see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports#the_not_operator"&gt;MDN Contributors (2021a)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By the way, KaiOS Browser doesn't support &lt;code&gt;backdrop-filter&lt;/code&gt; (&lt;a href="https://caniuse.com/css-backdrop-filter"&gt;Can I Use 2021b&lt;/a&gt;), but it does support &lt;code&gt;-moz-element()&lt;/code&gt; (&lt;a href="https://caniuse.com/css-element-function"&gt;Can I Use 2021c&lt;/a&gt;). So the above query applies to KaiOS Browser as well as Firefox.&lt;/p&gt;

&lt;p&gt;Here's &lt;a href="https://codepen.io/masakudamatsu/pen/MWEYNMo"&gt;the CodePen demo of the above code&lt;/a&gt;, achieving glassmorphism for all modern browsers. Hooray!&lt;/p&gt;

&lt;p&gt;And don't forget to prepare a fallback UI, as in Section 1.5 above, for those browsers supporting neither &lt;code&gt;backdrop-filter&lt;/code&gt; nor &lt;code&gt;-moz-element()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-raw-filter-blur-endraw-approach"&gt;
  &lt;/a&gt;
  3. The &lt;code&gt;filter: blur()&lt;/code&gt; approach
&lt;/h2&gt;

&lt;p&gt;There is another way to achieve glassmorphism across all modern browsers, including those not supporting &lt;code&gt;backdrop-filter&lt;/code&gt;, as long as the background graphic is set with the &lt;code&gt;background-image&lt;/code&gt; CSS property.&lt;/p&gt;

&lt;p&gt;It is an "old-school" technique, dating back to 2014 (&lt;a href="https://css-tricks.com/frosting-glass-css-filters/#new-school-frosted-glass-with-filters"&gt;Travis 2014&lt;/a&gt;). There are several variants of this approach. Examples include &lt;a href="https://codepen.io/kylewetton/pen/bGbaazX"&gt;Wetton (2019)&lt;/a&gt; and &lt;a href="https://codesandbox.io/s/qztm2"&gt;Feed-the-Cats (n.d.)&lt;/a&gt;. The latter's CodeSandbox demo uses this technique explicitly for implementing a glassmorphism effect for Firefox. &lt;/p&gt;

&lt;p&gt;Another example is &lt;a href="https://codepen.io/AmJustSam/pen/ModORY"&gt;Tahir (2018)&lt;/a&gt;, which I find the most elegant implementation. It builds on the technique proposed by &lt;a href="https://stackoverflow.com/a/44611674"&gt;shramee (2017)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But no one appears to explain this approach in detail. Below let me build up the CSS code for it, step by step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-initial-ui"&gt;
  &lt;/a&gt;
  3.1 Initial UI
&lt;/h3&gt;

&lt;p&gt;Let's start with a full-screen background image of Firefox logo, the same one as used in Section 2 above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://blog.mozilla.org/wp-content/blogs.dir/278/files/2021/02/ff_blog_header_ff_1400x770.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, I use the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element to show the background graphic. But it can be any HTML element as long as you use &lt;code&gt;background-image&lt;/code&gt; to embed the graphic.&lt;/p&gt;

&lt;p&gt;Then overlay a translucent white card at the center, with the following HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card font"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    glassmorphism for Firefox
  &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the following additional CSS code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* center-align the card */&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* translucent white card */&lt;/span&gt;
&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Other styling */&lt;/span&gt;
&lt;span class="nc"&gt;.font&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* center-align text */&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* style text */&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Glass Antiqua'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;420px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.font&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The styling is exactly the same as in Section 2 above.&lt;/p&gt;

&lt;p&gt;The above HTML/CSS code will produce this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0L8cHDs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0je0h9kxohj1lzz3y8hr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0L8cHDs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0je0h9kxohj1lzz3y8hr.png" alt='A translucent white card with the center-aligned text of "glassmorphism for Firefox" is shown over the logo of Firefox' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A screenshot of &lt;a href="https://codepen.io/masakudamatsu/pen/MWEYjqo"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-copying-the-background-image-to-the-cards-pseudo-element"&gt;
  &lt;/a&gt;
  3.2 Copying the background image to the card's pseudo element
&lt;/h3&gt;

&lt;p&gt;Let's add a new class called &lt;code&gt;glassmorphism&lt;/code&gt; to the card so that we can group all the relevant CSS code for glassmorphism together. And wrap the text with &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card font glassmorphism"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="c"&gt;&amp;lt;!-- REVISED --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;glassmorphism for Firefox&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- REVISED --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these, create a pseudo element that duplicates the card at the same position and place it beneath the text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time I use &lt;code&gt;height: 100%; width: 100%&lt;/code&gt; to make the pseudo element spread across its parent element, instead of using &lt;code&gt;top: 0; bottom: 0; left: 0; right: 0;&lt;/code&gt; as in Section 2. We will see why in Section 3.5 below. (In case you don't know, the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo selectors always create child elements of the element referred to by the preceding selector‚Äîa piece of knowledge I didn't know when I first learned about pseudo elements).&lt;/p&gt;

&lt;p&gt;Note also that I wrap text with &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; so that it can be absolutely positioned. Otherwise, the text will be hidden behind the pseudo element. Unlike in Section 2.1 above, adding &lt;code&gt;z-index: -1&lt;/code&gt; doesn't work here, because we will &lt;code&gt;inherit&lt;/code&gt; the &lt;code&gt;background&lt;/code&gt; property all the way down from &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; to the pseudo element. This means that the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; element itself is not transparent, and that the negative z-index will hide the pseudo element behind its parent. This is not convenient because we're going to blur the background of the pseudo element.&lt;/p&gt;

&lt;p&gt;Now, copy the background image with &lt;code&gt;background: inherit&lt;/code&gt;, with one additional CSS declaration on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://blog.mozilla.org/wp-content/blogs.dir/278/files/2021/02/ff_blog_header_ff_1400x770.jpg')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* NOW OVERRIDDEN */&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;66%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all, it's critical to have &lt;code&gt;background-attachment: fixed&lt;/code&gt; for the background image. Otherwise, the duplicated background images for the card and its pseudo element will get misaligned against the original one (&lt;a href="https://stackoverflow.com/a/44611674"&gt;shramee 2017&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;To duplicate the background image and its settings (including the &lt;code&gt;background-attachment&lt;/code&gt; property), the use of &lt;code&gt;background: inherit&lt;/code&gt;‚Äîrather than repeating the same set of CSS declarations for the background image‚Äîis a smart, concise way used by &lt;a href="https://codepen.io/AmJustSam/pen/ModORY"&gt;Tahir (2018)&lt;/a&gt;, although this requires the container element to be the direct child of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element. This is why I set the background graphic for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, rather than a sibling element of the card as in Section 2.&lt;/p&gt;

&lt;p&gt;With the above HTML/CSS code, we have the following UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzdPWbLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yxl9g9h6jehtj6pqmpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzdPWbLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yxl9g9h6jehtj6pqmpn.png" alt='A transparent, white-rimmed card with the center-aligned text of "glassmorphism for Firefox" is shown over the logo of Firefox' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A screenshot of &lt;a href="https://codepen.io/masakudamatsu/full/dyVPOXx"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;p&gt;Notice that the white translucency is gone, because &lt;code&gt;background-color: hsla(0, 0%, 97%, 0.2)&lt;/code&gt; is now overridden with &lt;code&gt;background: inherit&lt;/code&gt;. We will need to figure out an alternative way of adding a translucent whitewash to create the frosted-glass appearance (wait until Section 3.4 below). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-blurring-the-background-image"&gt;
  &lt;/a&gt;
  3.3 Blurring the background image
&lt;/h3&gt;

&lt;p&gt;Now it's time to blur the background image, only for the area covered with the card, by applying &lt;code&gt;filter: blur(10px)&lt;/code&gt; to the pseudo element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might wonder why we need to blur the background of the pseudo element, not the background of the card itself. Wait until Section 3.5 below.&lt;/p&gt;

&lt;p&gt;The above CSS code creates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lx7Pybll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kze7wd3o2xc66ri4weo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lx7Pybll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kze7wd3o2xc66ri4weo.png" alt='The logo of Firefox in the background gets blurred only within the area occupied by a transparent, white-rimmed card with the center-aligned text of "glassmorphism for Firefox"' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A screenshot of &lt;a href="https://codepen.io/masakudamatsu/full/mdByONm"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;p&gt;Notice that, in this screenshot, the Firefox logo is not blurred at the top and at the bottom, the area outside the card. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-applying-translucent-white"&gt;
  &lt;/a&gt;
  3.4 Applying translucent white
&lt;/h3&gt;

&lt;p&gt;Now we need to figure out how to add translucent white for creating a frosted-glass appearance, without using &lt;code&gt;background-color&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;One approach, proposed by &lt;a href="https://stackoverflow.com/a/44611674"&gt;shramee (2017)&lt;/a&gt;, is to add another pseudo element (&lt;code&gt;::after&lt;/code&gt;) of the card and use a translucent white image as its background.&lt;/p&gt;

&lt;p&gt;But there is a simpler way, as proposed by &lt;a href="https://codepen.io/AmJustSam/pen/ModORY"&gt;Tahir (2018)&lt;/a&gt;: use the inset box-shadow!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;97%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* ADDED */&lt;/span&gt; 
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While &lt;a href="https://codepen.io/AmJustSam/pen/ModORY"&gt;Tahir (2018)&lt;/a&gt; uses a pixel value to set the spread radius of the inset box-shadow, I use &lt;code&gt;50vw&lt;/code&gt; to make it responsive to the screen width. Ideally, I want to use &lt;code&gt;50%&lt;/code&gt; so the inset shadow is cast from each side to the middle, to cover the entire card. But the &lt;code&gt;box-shadow&lt;/code&gt; property doesn't allow the use of percentages to set shadow parameters. To keep it responsive, a work around that I've found is to use the viewport width unit, &lt;code&gt;vw&lt;/code&gt;. The value of &lt;code&gt;50vw&lt;/code&gt; is larger than necessary, but it ensures the entire card to be whitewashed irrespective of the screen width.&lt;/p&gt;

&lt;p&gt;The above CSS code produces the following appearance:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xc1NVd9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bjyask53is0hpkjw4ln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xc1NVd9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bjyask53is0hpkjw4ln.png" alt='The logo of Firefox in the background gets blurred only within the area occupied by a translucent white card with the center-aligned text of "glassmorphism for Firefox"' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A screenshot of &lt;a href="https://codepen.io/masakudamatsu/full/poWvRvq"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;p&gt;Seems like we've managed to create a glassmorphism effect on all modern browsers including Firefox... Well, not quite yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-finetuning-the-edges"&gt;
  &lt;/a&gt;
  3.5 Fine-tuning the edges
&lt;/h3&gt;

&lt;p&gt;There's a problem. If you carefully look at the above screenshot, the Firefox logo is not fully blurred near the top and bottom edges of the card.&lt;/p&gt;

&lt;p&gt;This is because, since the &lt;code&gt;blur()&lt;/code&gt; function's parameter is set to be &lt;code&gt;10px&lt;/code&gt;, the background image isn't fully blurred within 10px from the edges. &lt;/p&gt;

&lt;p&gt;(For your information, this wasn't an issue in Section 2 above, because the &lt;code&gt;blur()&lt;/code&gt; function applies to the entire background image, not just to the area cut out by the card. That was the beauty of &lt;code&gt;-moz-element()&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;To remove these 10px-wide bands of imperfectly blurred background,  &lt;a href="https://stackoverflow.com/a/44611674"&gt;shramee (2017)&lt;/a&gt; proposes the following technique: expand the pseudo element by 10px for each of the four sides. To do so, increase its &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; and move its top-left corner by 10px both vertically and horizontally. Finally, cut these expanded 10px edges by hiding the overflowing parts of the card with &lt;code&gt;overflow: hidden&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c"&gt;/* ADDED */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50vw&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c"&gt;/* REVISED */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* REVISED */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* REVISED */&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* REVISED */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.glassmorphism&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might want to use CSS variables to refer to &lt;code&gt;10px&lt;/code&gt; in the above code so that the blur radius can quickly be adjusted.&lt;/p&gt;

&lt;p&gt;The necessity of this fine-tuning is the reason why we need a pseudo element to blur the background, rather than blurring its parent directly. It is also why we created a pseudo element by specifying &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;, rather than &lt;code&gt;top: 0; bottom: 0; left: 0; right: 0;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--468BE_SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06z0puyg7tvwreq4ghuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--468BE_SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06z0puyg7tvwreq4ghuf.png" alt='The logo of Firefox in the background gets blurred only within the entire area occupied by a transparent, white-rimmed card with the center-aligned text of "glassmorphism for Firefox"' width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A screenshot of &lt;a href="https://codepen.io/masakudamatsu/pen/VwMYPaP"&gt;the CodePen by the author&lt;/a&gt;&lt;/strong&gt; (click this link for a demo)&lt;/p&gt;

&lt;p&gt;This is it! The same code produces exactly the same look for all modern browsers, including those supporting neither &lt;code&gt;backdrop-filter&lt;/code&gt; nor &lt;code&gt;-moz-element()&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-limitations"&gt;
  &lt;/a&gt;
  3.6 Limitations
&lt;/h3&gt;

&lt;p&gt;As this approach relies on &lt;code&gt;background: inherit&lt;/code&gt;, it cannot be used if the background graphics is set with other means than the &lt;code&gt;background&lt;/code&gt; CSS property. One such example is the background created with the  &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element. Another is an embedded Google Maps (with the use of &lt;a href="https://developers.google.com/maps/documentation/javascript/overview"&gt;Google Maps JavaScript API&lt;/a&gt;). In these cases, we need to use the &lt;code&gt;-moz-element()&lt;/code&gt; approach described in Section 2 above.&lt;/p&gt;

&lt;p&gt;Also, it relies on &lt;code&gt;filter: blur()&lt;/code&gt;. For those legacy browsers not supporting the &lt;code&gt;filter&lt;/code&gt; CSS property (e.g., IE), we need a fallback UI as described in Section 1.5 above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-other-filter-effects"&gt;
  &lt;/a&gt;
  4. Other filter effects
&lt;/h2&gt;

&lt;p&gt;All the methods described in this article can also be applied for other graphic effects than glassmorphism, as long as the &lt;code&gt;filter&lt;/code&gt; CSS property can achieve such effects. For example,  &lt;a href="https://iamvdo.me/en/blog/css-element-function#faking-backdrop-filter"&gt;De Oliveira (2015)&lt;/a&gt; produces a back-and-white, blurred version of the background:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQWl71XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao1mepvmk4vxdprr9l2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQWl71XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ao1mepvmk4vxdprr9l2e.png" alt="A photo of motorways leading to a tunnel in the mountainous area is overlaid with a black translucent square box under which the background photo is desaturated and blurred" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A non-glassmorphic example of the &lt;code&gt;-moz-element()&lt;/code&gt; technique&lt;/strong&gt; (image source: &lt;a href="https://iamvdo.me/en/blog/css-element-function#faking-backdrop-filter"&gt;De Oliveira 2015&lt;/a&gt;)&lt;/p&gt;




&lt;p&gt;Thank you for reading this far. Hopefully, this article will help you implement glassmorphism (and other similar visual effects) in a cross-browser compatible way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;Can I Use (2021a) ‚Äú&lt;a href="https://caniuse.com/usage-table"&gt;Browser Usage Table&lt;/a&gt;‚Äù, &lt;em&gt;Can I Use?&lt;/em&gt;, Nov 21, 2021 (last accessed).&lt;/p&gt;

&lt;p&gt;Can I Use (2021b) ‚Äú&lt;a href="https://caniuse.com/css-backdrop-filter"&gt;CSS Backdrop Filter&lt;/a&gt;‚Äù, &lt;em&gt;Can I Use?&lt;/em&gt;, Nov 25, 2021 (last accessed).&lt;/p&gt;

&lt;p&gt;Can I Use (2021c) ‚Äú&lt;a href="https://caniuse.com/css-element-function"&gt;CSS element() function&lt;/a&gt;‚Äù, &lt;em&gt;Can I Use?&lt;/em&gt;, Nov 25, 2021 (last accessed).&lt;/p&gt;

&lt;p&gt;Can I Use (2021d) ‚Äú&lt;a href="https://caniuse.com/background-attachment"&gt;CSS background-attachment&lt;/a&gt;‚Äù, &lt;em&gt;Can I Use?&lt;/em&gt;, Dec 2, 2021 (last accessed). &lt;/p&gt;

&lt;p&gt;Day, Joe (2018) ‚Äú&lt;a href="https://medium.com/microsoft-design/diy-a-web-version-the-fluent-design-systems-acrylic-material-fe2eac2a40bb"&gt;DIY: A Web Version of the Fluent Design System‚Äôs Acrylic Material&lt;/a&gt;‚Äù, &lt;em&gt;Microsoft Design&lt;/em&gt;, Jun 16, 2018.&lt;/p&gt;

&lt;p&gt;De Oliveira, Vincent (2015) ‚Äú&lt;a href="https://iamvdo.me/en/blog/css-element-function"&gt;CSS element() function&lt;/a&gt;‚Äù, &lt;em&gt;iamvdo.me&lt;/em&gt;, Aug 2015.&lt;/p&gt;

&lt;p&gt;Ellis, Jack (2020) ‚Äú&lt;a href="https://codepen.io/opeala/pen/yLaMBvN"&gt;Glassmorph JS Calculator&lt;/a&gt;‚Äù, &lt;em&gt;CodePen&lt;/em&gt;, Dec 14, 2020.&lt;/p&gt;

&lt;p&gt;Feed-the-Cats (n.d.) ‚Äú&lt;a href="https://codesandbox.io/s/qztm2"&gt;CSS Firefox Glassmorphism&lt;/a&gt;‚Äù, &lt;em&gt;CodeSandbox&lt;/em&gt;, undated.&lt;/p&gt;

&lt;p&gt;Francis, George (2021) ‚Äú&lt;a href="https://codepen.io/georgedoescode/pen/bGBzGKZ"&gt;Generative macOS Big Sur Waves [SVG]&lt;/a&gt;‚Äù, &lt;em&gt;CodePen&lt;/em&gt;, Mar 12, 2021.&lt;/p&gt;

&lt;p&gt;Graham, Geoff (2020) ‚Äú&lt;a href="https://css-tricks.com/backdrop-filter-effect-with-css/"&gt;Backdrop Filter effect with CSS&lt;/a&gt;‚Äù, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Jul 16, 2020.&lt;/p&gt;

&lt;p&gt;Hazeez, Habdul (2021) ‚Äú&lt;a href="https://css-tricks.com/7-practical-uses-for-the-before-and-after-pseudo-elements-in-css/"&gt;7 Practical Uses for the ::before and ::after Pseudo-Elements in CSS&lt;/a&gt;‚Äù, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Sep 21, 2021. &lt;/p&gt;

&lt;p&gt;Karkovack, Eric (2021) ‚Äú&lt;a href="https://speckyboy.com/css-glassmorphism/"&gt;8 Stunning Examples of CSS Glassmorphism Effects&lt;/a&gt;‚Äù, &lt;em&gt;Speckyboy&lt;/em&gt;, Apr 26, 2021.&lt;/p&gt;

&lt;p&gt;Keith, Jeremy (n.d.) &lt;a href="https://resilientwebdesign.com/"&gt;&lt;em&gt;Resilient Web Design&lt;/em&gt;&lt;/a&gt;, resilientwebdesign.com.&lt;/p&gt;

&lt;p&gt;Malewicz, Michal (2020) ‚Äú&lt;a href="https://uxdesign.cc/glassmorphism-in-user-interfaces-1f39bb1308c9"&gt;Glassmorphism in User Interfaces&lt;/a&gt;‚Äù, &lt;em&gt;UX Collective&lt;/em&gt;, Nov 23, 2020.&lt;/p&gt;

&lt;p&gt;MDN Contributors (2021a) ‚Äú&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports"&gt;@supports&lt;/a&gt;‚Äù, &lt;em&gt;MDN Web Docs&lt;/em&gt;, Sep 9, 2021 (last updated).&lt;/p&gt;

&lt;p&gt;MDN Contributors (2021b) ‚Äú&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial"&gt;Canvas tutorial&lt;/a&gt;‚Äù, &lt;em&gt;MDN Web Docs&lt;/em&gt;, Sep 15, 2021 (last updated).&lt;/p&gt;

&lt;p&gt;Mozilla (2021) ‚Äú&lt;a href="https://blog.mozilla.org/en/products/firefox/the-fox-is-still-in-the-firefox-logo/"&gt;Remain calm. The fox is still in the Firefox logo&lt;/a&gt;‚Äù, &lt;em&gt;dist://ed&lt;/em&gt;, Feb 26, 2021.&lt;/p&gt;

&lt;p&gt;shramee (2017) ‚Äú&lt;a href="https://stackoverflow.com/a/44611674"&gt;There are two ways to do this...&lt;/a&gt;‚Äù, &lt;em&gt;StackOverflow&lt;/em&gt;, Jun 18, 2017.&lt;/p&gt;

&lt;p&gt;Simmons, Jen (2016) ‚Äú&lt;a href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/"&gt;Using Feature Queries in CSS&lt;/a&gt;‚Äù, &lt;em&gt;moz://a HACKS&lt;/em&gt;, Aug 17, 2016.&lt;/p&gt;

&lt;p&gt;Tahir, Usama (2018) ‚Äú&lt;a href="https://codepen.io/AmJustSam/pen/ModORY"&gt;Frosted Glass Effect - Form&lt;/a&gt;‚Äù, &lt;em&gt;CodePen&lt;/em&gt;, Apr 13, 2018 (last updated).&lt;/p&gt;

&lt;p&gt;Travis, Bear (2014) ‚Äú&lt;a href="https://css-tricks.com/frosting-glass-css-filters/"&gt;Frosting Glass with CSS Filters&lt;/a&gt;‚Äù, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Apr 7, 2014.&lt;/p&gt;

&lt;p&gt;Tudor, Anna (2021) ‚Äú&lt;a href="https://css-tricks.com/icon-glassmorphism-effect-in-css/"&gt;Icon Glassmorphism Effect in CSS&lt;/a&gt;‚Äù, &lt;em&gt;CSS-Tricks&lt;/em&gt;, Nov 8, 2021.&lt;/p&gt;

&lt;p&gt;Walicki, Albert (2020a) ‚Äú&lt;a href="https://www.albertwalicki.com/blog/glassmorphism-how-to-create"&gt;Glassmorphism - how to create in pure CSS&lt;/a&gt;‚Äù, &lt;em&gt;albertwalicki.com&lt;/em&gt;, Nov 24, 2020.&lt;/p&gt;

&lt;p&gt;Walicki, Albert (2020b) ‚Äú&lt;a href="https://codepen.io/walickialbert/pen/xxOvPmb"&gt;Glassmorphism&lt;/a&gt;‚Äù, &lt;em&gt;CodePen&lt;/em&gt;, Nov 24, 2020.&lt;/p&gt;

&lt;p&gt;Walson, Philip (2013) ‚Äú&lt;a href="https://philipwalton.com/articles/what-no-one-told-you-about-z-index/"&gt;What No One Told You About Z-Index&lt;/a&gt;‚Äù, &lt;em&gt;philipwalton.com&lt;/em&gt;, Jan 15, 2013.&lt;/p&gt;

&lt;p&gt;Wetton, Kyle (2019) "&lt;a href="https://codepen.io/kylewetton/pen/bGbaazX"&gt;CSS - Frosted Glass&lt;/a&gt;", &lt;em&gt;CodePen&lt;/em&gt;, Sep 17, 2019.&lt;/p&gt;

</description>
      <category>glassmorphism</category>
      <category>css</category>
      <category>firefox</category>
    </item>
    <item>
      <title>How Web Scraping is Used to Extract Toast Delivery Data?</title>
      <author>foodspark</author>
      <pubDate>Fri, 03 Dec 2021 06:42:00 +0000</pubDate>
      <link>https://dev.to/foodspark/how-web-scraping-is-used-to-extract-toast-delivery-data-208p</link>
      <guid>https://dev.to/foodspark/how-web-scraping-is-used-to-extract-toast-delivery-data-208p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_fR49yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieuvr6et0ohi9y1559kt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_fR49yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieuvr6et0ohi9y1559kt.jpg" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;br&gt;
Grocery buying online has become a critical component of household efficiency. People do not have time to visit a supermarket and sample new products. They don't have time to carry bags back and forth from the store to their car and kitchen! The demand for online grocery stores will expand faster due to rising consumer demand. Nearly 10% of all grocery sales are predicted to be done online by 2022. If we examine the case's value, we're looking at a massive $133.8 billion! This figure has the potential to disrupt all grocery and food stakeholders since it alters the retail and distribution dynamics.&lt;/p&gt;

&lt;p&gt;Amazon Pantry, BigBasket, Buy Me A Pie, Cellfire, DMart Online Grocery Shopping, Favado, Flipkart Supermarket, Grocery iQ, Grocery Pal, Grofers, Kroger, Nature's Basket, Our Groceries Shopping List, Out of Milk, Reliance Smart, Spencer's Online Grocery, Target, Walmart, and ZopNow are among the major players in the online grocery market. We at Foodspark offer the best grocery app scraping services in the United States and the UK.&lt;/p&gt;

&lt;p&gt;What is Toast?&lt;br&gt;
what-is-toast&lt;br&gt;
Toast is the most popular online grocery and food store (Innovative Retail Concepts Private Limited). Our catalog, which includes over 18,000 products from over 1000 companies, will provide you with everything you require. Fresh fruits and vegetables, rice and dals, spices and seasonings, packaged goods, beverages, personal care items, and meats are just a few of the items we have.&lt;/p&gt;

&lt;p&gt;Choose from a variety of options in each category, all of which have been hand-picked to ensure that you receive the most value for your money. Choose a delivery time slot and your order will be brought at your doorstep across UK and NI.&lt;/p&gt;

&lt;p&gt;Reasons Behind Scraping Toast Grocery Delivery Data&lt;br&gt;
The goals of each food delivery service that uses a supermarket data scraping service may differ. You can choose to target all of the data fields available to meet certain business goals. A few instances are given below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Customer‚Äôs Buying Patterns&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;customers-buying-patterns&lt;br&gt;
Customers now can order stuff online and have them delivered to their homes thanks to improved delivery processes. Popular services' user-friendly interfaces, many payment choices, and significant savings are all fueling this sector's growth. E-Commerce alternatives will expand, and retailers will gain a better understanding of their customers' purchasing habits.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enhancing Pricing&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;enhancing-pricing&lt;br&gt;
If you're selling a product on a grocery delivery platform, you'll need to focus on developing a compelling pricing plan. Similarly, if you operate a grocery delivery business, competitive offers and discounts will help you better define your marketing strategy.&lt;/p&gt;

&lt;p&gt;Which Data Fields are Scraped from Scraping Toast Grocery Delivery Data?&lt;br&gt;
Several fields can be scraped from Toast grocery delivery services. Among the most common are:&lt;/p&gt;

&lt;p&gt;Store Name&lt;br&gt;
Address&lt;br&gt;
Product Name&lt;br&gt;
Product Description&lt;br&gt;
Product Image&lt;br&gt;
Product SKU&lt;br&gt;
Offer And Discounts&lt;br&gt;
Reviews/Ratings&lt;br&gt;
Product Price&lt;br&gt;
Product Category&lt;br&gt;
Before being supplied, critical information is acquired, processed, and put through a series of quality checks. This data is continuously given, allowing associated firms to gain significant information.&lt;/p&gt;

&lt;p&gt;Uses of Scraping Toast Delivery Data&lt;br&gt;
Any company that sells or delivers food can benefit from web scraping services. Given the current state of the industry, it may be an opportune time for a company to employ trustworthy web scraping services to get a competitive advantage.&lt;/p&gt;

&lt;p&gt;Here's a rundown of how several businesses might exploit food delivery data gleaned from the internet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grocery Retailers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;grocery-retailers&lt;br&gt;
If you currently have a physical grocery store, you can expand your business to include virtual comfort for your clients. It's a good idea to look into the services of local merchants in your region before registering with a supermarket delivery company.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Online Merchants&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;online-merchants&lt;br&gt;
If you have a large online store with a range of products, you should consider adding grocers to capitalize on this growing industry. Because groceries are so necessary, this could be a wonderful method to increase sales and profits. Additionally, specialized retailers with strong brand values may attract more customers, resulting in increased sales of other things you sell.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grocery Wholesalers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;grocery-wholesalers&lt;br&gt;
If you're a wholesaler supplying supermarket items to retailers, knowing what products are popular with customers might help you optimize your profits. Scraped reviews and ratings assist you in collecting specific information on well-known product categories across areas and locales, allowing you attract retailers to your business and give a growth to your business.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Competitors in the Grocery Platform&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;competitors-in-the-grocery-platform&lt;br&gt;
Web scraping is an effective strategy for strengthening your company plan because new companies enter the market regularly. If you want to create your own food delivery service, you should know that gathering supermarket delivery data is a must. It might give you vital information about the entire market, as well as top buyers, pricing, and other elements that might help you obtain a competitive edge.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Business Development&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;business-development&lt;br&gt;
If you want to start a grocery delivery service, you'll need a comprehensive scraped list of existing food delivery companies and merchants. You can leverage geographical data to assist you to reach your expectations and requirements by using a specific web scraping engine like Foodspark.&lt;/p&gt;

&lt;p&gt;Customized Solution to Fetch Toast Grocery Delivery Data&lt;br&gt;
Because of its simplicity and convenience of use, the grocery delivery industry has been steadily expanding. To evaluate grocery delivery data, you'll need a web scraping service provider who can gather data on your schedule on a regular basis.&lt;/p&gt;

&lt;p&gt;Foodspark, a scraping software program, can help you get started by providing custom solutions to extract the data points you require. For organizations who don't have access to one, Foodspark can create custom web scraping APIs.&lt;/p&gt;

&lt;p&gt;Foodspark, which scrapes public material from the internet, has grown to be one of the world's largest online extraction companies. Data harvesting from major websites is straightforward and economical for small businesses, researchers, and professionals thanks to Foodspark's pre-built scrapers and other online scraping courses.&lt;/p&gt;

&lt;p&gt;Are you trying to scrape Toast‚Äôs grocery delivery data? Foodspark is offering a free quote right now!!&lt;/p&gt;

&lt;p&gt;Know more : &lt;a href="https://www.foodspark.io/how-web-scraping-is-used-to-extract-toast-delivery-data.php"&gt;https://www.foodspark.io/how-web-scraping-is-used-to-extract-toast-delivery-data.php&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascrapingservice</category>
      <category>extracttoastdeliverydata</category>
      <category>groceryappscrapingservices</category>
      <category>scrapingtoastdeliverydata</category>
    </item>
    <item>
      <title>Java/ Convert PDF to Excel</title>
      <author>carlwils</author>
      <pubDate>Fri, 03 Dec 2021 06:39:19 +0000</pubDate>
      <link>https://dev.to/carlwils/java-convert-pdf-to-excel-4be8</link>
      <guid>https://dev.to/carlwils/java-convert-pdf-to-excel-4be8</guid>
      <description>&lt;p&gt;When a PDF file contains table, you may need to convert it to Excel for further processing. In this article, you will learn how to &lt;strong&gt;convert each PDF page to a single Excel worksheet&lt;/strong&gt; as well as how to &lt;strong&gt;convert multiple PDF pages to one Excel worksheet&lt;/strong&gt; by using Free Spire.PDF for Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#two-methods-to-import-the-jar-dependency"&gt;
  &lt;/a&gt;
  Two Methods to Import the JAR Dependency
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; You can download the &lt;a href="https://www.e-iceblue.com/Download/pdf-for-java-free.html"&gt;free library&lt;/a&gt; and unzip it. Then add the Spire.Pdf.jar file to your project as dependency.&lt;br&gt;
&lt;strong&gt;Method 2:&lt;/strong&gt; Or you can directly add the jar dependency to maven project by adding the following configurations to the pom.xml.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;com.e-iceblue&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo.e-iceblue.com/nexus/content/groups/public/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spire.pdf.free&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.4.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#convert-a-pdf-file-containing-three-pages-to-three-excel-worksheets"&gt;
  &lt;/a&gt;
  Convert a PDF File Containing Three Pages to Three Excel Worksheets
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create a &lt;strong&gt;PdfDocument&lt;/strong&gt; object.&lt;br&gt;
&lt;strong&gt;Step 2:&lt;/strong&gt; Load a sample PDF file using &lt;strong&gt;PdfDocument.loadFromFile()&lt;/strong&gt; method.&lt;br&gt;
&lt;strong&gt;Step 3:&lt;/strong&gt; Save the PDF file to Excel using &lt;strong&gt;PdfDocument.saveToFile()&lt;/strong&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.pdf.FileFormat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.pdf.PdfDocument&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ToXLS&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//Create a PdfDocument object&lt;/span&gt;
        &lt;span class="nc"&gt;PdfDocument&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PdfDocument&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//Load a sample PDF file&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFromFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C:\\Users\\Administrator\\Desktop\\Members.pdf"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;//Save to Excel&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveToFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"output/ToExcel.xlsx"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FileFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;XLSX&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NcT9nzIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30yo11uy5vwpiyst5p97.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NcT9nzIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30yo11uy5vwpiyst5p97.jpg" alt="ToExcel" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convert-a-pdf-file-containing-three-pages-to-one-excel-worksheets"&gt;
  &lt;/a&gt;
  Convert a PDF File Containing Three Pages to One Excel Worksheets
&lt;/h3&gt;

&lt;p&gt;Free Spire.XLS for Java offers the &lt;strong&gt;PdfDocument.getConvertOptions().setConvertToOneSheet(true)&lt;/strong&gt; method to convert multiple PDF pages to one Excel worksheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.pdf.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManyPagesToOneSheet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Create a PdfDocument object&lt;/span&gt;
        &lt;span class="nc"&gt;PdfDocument&lt;/span&gt; &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PdfDocument&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Load a sample PDF file&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFromFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C:\\Users\\Administrator\\Desktop\\Members.pdf"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Convert multiple PDF pages to one Excel worksheet&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getConvertOptions&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setConvertToOneSheet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Save to Excel&lt;/span&gt;
        &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveToFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"output/ToOneSheet.xlsx"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FileFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;XLSX&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5L3gevg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c69ycznnw60u1j4vo6ia.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5L3gevg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c69ycznnw60u1j4vo6ia.jpg" alt="ToOneSheet" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>pdf</category>
      <category>excel</category>
    </item>
  </channel>
</rss>
