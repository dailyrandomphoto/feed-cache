<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>An Honest Comparison of VS Code vs JetBrains - 5 Points</title>
      <author>Jeremy Liu</author>
      <pubDate>Sun, 09 Jan 2022 22:01:06 +0000</pubDate>
      <link>https://dev.to/blankly/an-honest-comparison-of-vs-code-vs-jetbrains-5-points-1mbd</link>
      <guid>https://dev.to/blankly/an-honest-comparison-of-vs-code-vs-jetbrains-5-points-1mbd</guid>
      <description>&lt;p&gt;Call me crazy if you have to. You’d think that after five years of coding in one IDE, I would be out of my mind to leave &lt;em&gt;the&lt;/em&gt; &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. And sure, before I tried out the &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt; ecosystem, I would’ve completely agreed. I would’ve even offered up my left kidney, fighting for the fact that VS Code was superior (just like M1 Pro Macs are) to any other IDE on the market. Now just a bit of background, I work at &lt;a href="https://blankly.finance/"&gt;Blankly&lt;/a&gt; where we enable people to build trading algorithms on hedge-fund level cloud infrastructure in minutes instead of months. During one of our daily stand-up meetings, my co-worker, Emerson, was adamant about the JetBrains ecosystem and extended the meeting trying to convince one of us to give it a whirl. And… I begrudgingly agreed, thinking it’d be a one and done thing (and so that the &lt;em&gt;finally&lt;/em&gt; meeting could end). But wouldn’t you know it, I’m here now, writing this article about what finally convinced me to abandon the IDE that has been by my side since day one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8oBrhFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fvscodetojetbrains.png%3Falt%3Dmedia%26token%3D377f55d6-c042-4904-b8eb-b2fafbbd7993" class="article-body-image-wrapper"&gt;&lt;img alt="vscode-vs-jetbrains" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8oBrhFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fvscodetojetbrains.png%3Falt%3Dmedia%26token%3D377f55d6-c042-4904-b8eb-b2fafbbd7993" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re looking for a change of an editor, but are hesitant on even giving JetBrains a try (because, I mean VS Code is free and JetBrains for non-students isn’t) or if you’re just interested in the reasons as to why I committed such a betrayal, read on! &lt;strong&gt;This article is an honest comparison between VS Code and JetBrains and why the switch to JetBrains might be great for some.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-code-inspection-amp-refactoring"&gt;
  &lt;/a&gt;
  1. Code Inspection &amp;amp; Refactoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-quick-easy-multilanguage-support"&gt;
  &lt;/a&gt;
  VS Code - Quick, Easy, Multilanguage Support
&lt;/h3&gt;

&lt;p&gt;VS Code can be considered as an “editor” for a reason. It’s quick and easy to get up and running with just about any programming language. And, for any full stack developers like me, this is big. Whether you’re switching between python for an API or javascript for a frontend, or adding a NextJS react app, or setting up a ruby on rails system, VS Code can support these languages, provide linting, and much more—entirely out of the box. And, on the off-chance it cant? Well, simply just find an extension!&lt;/p&gt;

&lt;p&gt;Also, VS Code has great linting thanks to its many new extensions such as Github Copilot, AI-based linting, auto imports, and much more. It’s now easier than ever to get what you want, when you want it. All you have to do is add a period and &lt;em&gt;most of the time&lt;/em&gt;, things just pop up. But sometimes, it gets super frustrating when it suddenly doesn’t. In fact, more often than not, I’ve been bogged down, trying to figure out why a specific linter would &lt;strong&gt;NOT&lt;/strong&gt; work. Whether it’s because of my multiple python environments installed via Anaconda or missing package that aren’t installed—most of the time—I simply have no idea. Moreover, linting JavaScript is also kind of a doozy. VS Code just doesn’t even try to infer Javascript type. But, luckily for me (and if you’re developing in an enterprise context too), TypeScript solves these issues, making this concern not really come up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRNbRns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.20.23_PM.png%3Falt%3Dmedia%26token%3D9a825795-40b0-4498-9edf-05e8b4c55c5f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRNbRns1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.20.23_PM.png%3Falt%3Dmedia%26token%3D9a825795-40b0-4498-9edf-05e8b4c55c5f" alt="vscode-broken-linting" width="880" height="522"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Here we have broken linting as our packages are not being recognized as existing even with a &lt;code&gt;pip install&lt;/code&gt;. Turns out it was because we forgot to change our python environment.&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;Finally, let’s talk about refactoring. I think VS Code does a phenomenal job of refactoring as an editor—key word being editor here. Being able to refactor a variable name change or moving a file and refactoring imports is great. But, say that I want to say move a function, change a set of named parameters, or abstract code out, VS Code is limited in its abilities. Luckily, the base refactoring does satisfy many use cases, and it fulfilled most of my use cases as a student for the past five years, albeit minimally at times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains-specialized-specific-and-powerful-support"&gt;
  &lt;/a&gt;
  JetBrains - Specialized, Specific, and Powerful Support
&lt;/h3&gt;

&lt;p&gt;For JetBrains, man is this a powerful IDE with unreasonable amounts of settings. My first time opening this IDE, I spent over an hour messing around with my settings, getting my code to display &lt;em&gt;just&lt;/em&gt; right. But, what took a bit of time to get use to was having to switch between different IDEs for different use cases. If suddenly my POST request stopped working, I would have to open up PyCharm to see if the problem was on my backend or, if I suddenly thought of a better optimization for my OPTTSP traveling salesmen class project, I would have to load CLion as well. But, with Intellesense, opening the different IDEs was simply learning a couple other scrips like &lt;code&gt;webstorm .&lt;/code&gt; and &lt;code&gt;pycharm .&lt;/code&gt; instead of &lt;code&gt;code .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Secondly, the capability of the JetBrains engine was surprisingly noticeable once I had switched over. Gone were the days where linting would randomly appear and I would try spamming &lt;strong&gt;&lt;code&gt;command+p -&amp;gt; reload windows&lt;/code&gt;&lt;/strong&gt; hoping some of the OCD triggering red lines would go away or actually tell me something useful. Instead, simply having consistent and fast-responding linting has been a complete breath of fresh air.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tIwcOGJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.33.23_PM.png%3Falt%3Dmedia%26token%3Db4eb639a-f3b9-46e4-9998-b0d06ffe182c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tIwcOGJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.33.23_PM.png%3Falt%3Dmedia%26token%3Db4eb639a-f3b9-46e4-9998-b0d06ffe182c" width="880" height="334"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    One keyboard shortcut to see every use&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;Finally, what really stood out to me in JetBrains was its refactoring refactoring capabilities. Just last week, I was working on finalizing the private beta platform for release. In the process, I reorganized and generated new components to make it more scalable for future development. I think in total I moved and broke apart over 200 components and not once did I run into a single compile error caused by important statements or invalid/undefined components. For contrast, just reorganizing two files in one of my projects for my data structures class broke my entire cpp code, requiring me to manually change some imports and functions. Moreover, JetBrains extensive refactoring tools like safe delete, global renames, and more has ensured that I have had more tools than I could ever use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ajx9_neR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.34.38_PM.png%3Falt%3Dmedia%26token%3Dc2096e05-8f15-44de-93f8-47d0dde53f9c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ajx9_neR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.34.38_PM.png%3Falt%3Dmedia%26token%3Dc2096e05-8f15-44de-93f8-47d0dde53f9c" width="880" height="273"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Now easily view context of all usages and be confident about refactoring &amp;amp; renaming&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBPe_yQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.41.01_PM.png%3Falt%3Dmedia%26token%3D6830d51b-bd6f-4a8f-bad8-c2b9a15840f0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBPe_yQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.41.01_PM.png%3Falt%3Dmedia%26token%3D6830d51b-bd6f-4a8f-bad8-c2b9a15840f0" width="880" height="145"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    JetBrains IDEs read the headers for you&lt;br&gt;
  
  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;p&gt;Overall, I would say that both of these environments come close to in terms of features and functionality. Both have solid auto-linting and formatting functionality and add a variety of customizable colors and swiggles to help you debug and better visualize your code. However, with JetBrains perfectly consistent linting engine coupled with its unbreakable refactoring process, I must say that if code factoring and refactoring is important to you and your workflow, I would definitely recommend JetBrains.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-debugging"&gt;
  &lt;/a&gt;
  2. Debugging
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-debug-almost-anything"&gt;
  &lt;/a&gt;
  VS Code - Debug Almost Anything
&lt;/h3&gt;

&lt;p&gt;The beauty about VS Code debugging is that it’s super extensible. Every time you hit the run button on the left bar, VS code generates a &lt;code&gt;.vscode&lt;/code&gt; directory that houses your &lt;code&gt;settings.json&lt;/code&gt; that houses your debugging properties. For most languages, such as debugging python or JavaScript, this is really easy since VS Code handles the debugging all for you, and assuming you have your environment set up correctly, debugging is as easy as clicking that button. It’s also super easy to change what you’re debugging by simply going to the &lt;code&gt;settings.json&lt;/code&gt; file. Now it gets more complicated when you’re using build specific or even platform specific languages such as C++ or C where setting up &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;clang&lt;/code&gt; ups the complexity. Setting up the ability to debug these files becomes such an annoyance and and takes endless amounts of time. I’ve spent many a days just copying over previous &lt;code&gt;settings.json&lt;/code&gt; to try to get my current project to work. At my uni—The University of Michigan, Ann Arbor—they’ve defaulted to simply give everyone the same &lt;code&gt;settings.json&lt;/code&gt; to use in order to hours of office hour frustrations. But, the fact that we even need to touch this &lt;code&gt;settings.json&lt;/code&gt; to handle debugging is in itself a little bit frustrating. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NrGoiA75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FUntitled.png%3Falt%3Dmedia%26token%3Dd9bcc4df-0652-411a-bd32-0d7307bf5384" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NrGoiA75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FUntitled.png%3Falt%3Dmedia%26token%3Dd9bcc4df-0652-411a-bd32-0d7307bf5384" alt="config" width="880" height="622"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    A simple settings.json needed to run the debugger C/C++ on MacOS&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;Now as for the actual debugging, placing breakpoints, identifying variables, adding watchers, VS Code handles beautifully in their debug console. However, it would be nice to see the variable values directly on the code overlay rather than in the side panel.&lt;/p&gt;

&lt;p&gt;Luckily, what’s beautiful about VS Code is that the extensions, and support for a wide variety of languages enables everyone to set up debugging in typically seconds, and if not minutes. The debugging does a great job for minor debugging and smaller cases but when it comes to specific languages, VS Code debugging breaks down. However, I’ve also tended to notice that require larger heap sizes (i.e. recursion or simply large function calls), the debugger seems to struggle and crash further into its runtime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains-a-debugging-monster"&gt;
  &lt;/a&gt;
  JetBrains - A Debugging Monster
&lt;/h3&gt;

&lt;p&gt;On the other hand, because all of Jetbrain’s IDEs are built on configuration based runs, you can begin a debug session at the push of the &lt;code&gt;debug&lt;/code&gt; button. Breakpoints can be set globally in the IDE just by pressing the blank space by the line number. This instant setup for any debugging process makes the setup experience alone amazing. The IDE also shines during actual debugging. When in a debugging session, all variables defined in the scope are visible by their definitions. This allows an extremely easy way to see the values just by clicking. I was impressed a few days ago when I was running a debug in Pycharm and attempting to view the values of a dataframe. Just by clicking the dataframe variable and pressing &lt;code&gt;view as dataframe&lt;/code&gt;, Pycharm opened the Dataframe in SciView and showed all Dataframe values as well as the column headers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Oom27xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_2.45.09_PM.png%3Falt%3Dmedia%26token%3D3ada6280-4ac0-4280-80a9-7a34e48b5a6d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Oom27xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_2.45.09_PM.png%3Falt%3Dmedia%26token%3D3ada6280-4ac0-4280-80a9-7a34e48b5a6d" alt="debug natively" width="880" height="327"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Insight achieved by setting a breakpoint natively and hitting debug&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;In the screenshot above, all local values in the scope are viewable in the bottom window. The dropdown next to &lt;code&gt;history_and_returns&lt;/code&gt; shows all attribute values of the dictionary and the dataframe nested in that dictionary. On the right, Pycharm is showing the same Dataframe that is already nested in a dictionary as a &lt;code&gt;SciView&lt;/code&gt;. Achieving this level of insight into your code without setting up any print statements or stack traces is extraordinary useful. You imagine how easy it is to find flawed logic in a loop, fix indexing errors, or any other traditionally abstract reasoning when all values are projected right into your editor next to their assignments.&lt;/p&gt;

&lt;p&gt;Like many other debuggers, JetBrains also offers the ability to step through your code. This includes the classic step over which goes to the next line or step into which goes into any function you want to examine further. An extremely useful one is &lt;code&gt;Run to Cursor&lt;/code&gt; which allows you to set what feels like another breakpoint just by placing your cursor on a line you want to examine further. The ability for the JetBrains debugger to be instantly setup and then provide such an integrated experience has completely changed how I code and accelerated my development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;p&gt;As debugging is one of the most common (and rage-inducing) things we do as developers on a day to day basis, I must say this is an important, if not essential feature for many developers to have. Both IDE environments provide a very solid debugging environment but, I must say that JetBrains edges out VS Code again here by just a little bit. Specifically, with JetBrains displaying variable data right next to the declared variable makes tracking the values inside variables much more manageable where there are numerous variables live. Moreover, JetBrains stronger and more stable debugger that does not require complex set-up like the &lt;code&gt;settings.json&lt;/code&gt; (which also, at times led me to use &lt;code&gt;cout&lt;/code&gt; or &lt;code&gt;printf&lt;/code&gt; statements instead) in VS Code was the cherry on top. These factors just come together help save me that tiny bit of extra time in my day and makes the JetBrains more attractive to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-git-integration"&gt;
  &lt;/a&gt;
  3. Git Integration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-a-powerful-source-control-built-in"&gt;
  &lt;/a&gt;
  VS Code - A Powerful Source Control Built In
&lt;/h3&gt;

&lt;p&gt;Anyone that’s working in teams or even cares about storing their code somewhere safe (in case you throw your computer out the window when your code isn’t running) knows how important git is in their workflow. Git version control is almost imperative now for any modern code editor. And VS Code does this well. VS Code will automatically detect an initial git repository and immediately offer many inherent git commands available including push, pull, commit, etc.&lt;/p&gt;

&lt;p&gt;From VS Code’s git panel, I’m able to easily sync changes that I have and also see what changes have been made. I’m also able to create branches and clone repos (though some of these are hidden in the more). What I love the most about VS Code is that it sort of tells you what to do. It immediately tells you to commit changes and detects all files that have changed and allows you to commit a message. It also checks and syncs changes as you go. It detects local branches vs remote branches, and has solid rebasing capabilities. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwMuFsOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252F9Yz5D.jpeg%3Falt%3Dmedia%26token%3D11e5c260-dd4b-448c-adfc-b8a06b69c57f" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwMuFsOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252F9Yz5D.jpeg%3Falt%3Dmedia%26token%3D11e5c260-dd4b-448c-adfc-b8a06b69c57f" alt="Merge Conflict" width="880" height="213"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Easily see where the merge conflict is inline&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;One of the things that makes VS Code stand out too is the ability to handle merge conflicts. With merge conflict resolution built into the VS Code editor, I’m able to press a button to keep a current change, or handle the incoming changes that come in. And trust me, this has saved me so, so much time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jetbrains-never-touch-the-command-line-again"&gt;
  &lt;/a&gt;
  JetBrains - Never Touch the Command Line Again
&lt;/h2&gt;

&lt;p&gt;I have barely touched my terminal in the entire time since I’ve switched over. With JetBrains providing full integration of merging pull requests, resolving conflicts, and switching and comparing branches, the source control is unreasonably better than my experience in VS Code. Take a look at the experience doing some of these common actions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXwKFwvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.01.28_PM.png%3Falt%3Dmedia%26token%3D26f3a3fa-f89e-44c5-a15b-e0fd7937d463" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXwKFwvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.01.28_PM.png%3Falt%3Dmedia%26token%3D26f3a3fa-f89e-44c5-a15b-e0fd7937d463" alt="Merge Conflict JetBrains" width="880" height="318"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Comparison of a particular file between branches&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nUB6cyOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.05.17_PM.png%3Falt%3Dmedia%26token%3Db681e421-3ab8-4d8f-8657-98db60abc1c6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nUB6cyOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.05.17_PM.png%3Falt%3Dmedia%26token%3Db681e421-3ab8-4d8f-8657-98db60abc1c6" alt="Branch details JetBrains" width="880" height="349"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Branch details built in&lt;br&gt;
  
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDubsH0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.07.18_PM.png%3Falt%3Dmedia%26token%3Dbe517911-89c7-4a2a-ba03-20e93ba33540" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDubsH0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252Fjetbrains-vs-vscode%252FScreen_Shot_2022-01-09_at_3.07.18_PM.png%3Falt%3Dmedia%26token%3Dbe517911-89c7-4a2a-ba03-20e93ba33540" alt="Detailed git log with deltas" width="880" height="179"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    Details git log with deltas&lt;br&gt;
  
  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;p&gt;In terms of features for Git integration, these environments are basically identical in terms of features. I found that they provide basically the same functionalities and you could not go wrong with either one. I would say that this just come down to personal preference. For example, I found myself preferring the JetBrains method with how merge conflicts are resolved as the interfaces laid side to side instead of stacked on top of each other. Not really a determining factor in the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-extensibility"&gt;
  &lt;/a&gt;
  4. Extensibility
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-extensions-galore"&gt;
  &lt;/a&gt;
  VS Code - Extensions Galore
&lt;/h3&gt;

&lt;p&gt;Visual Studio Code is one of the most extensible editors out there. Integrations and extensions are at the heart of the VS Code editor. Top picks include the Python Extension, Remote Development Extension, and many other IntelliSense driven extensions. VS Code also has some cool ones including code formatting via Prettier, theming via icons and code editor themes. Just about every single item / feature that VS Code offers is fully extensible and there probably many of  extension out there that can empower your process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDU7SQnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252FVSCODE-Extension.png%3Falt%3Dmedia%26token%3D79bdb4d4-9fa1-43b5-8bc9-062f6adc4cff" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDU7SQnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252FVSCODE-Extension.png%3Falt%3Dmedia%26token%3D79bdb4d4-9fa1-43b5-8bc9-062f6adc4cff" alt="vscode-extension" width="880" height="570"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of my all-time favorites is the remote docker container support. This allows users to use VS Code to remotely program in a docker container itself. If you have docker installed locally or remotely, you’re able to easily run your code and do all that you need to do in docker, simply from your vscode. Want some more interesting stuff? Check out remote development via SSH. Microsoft allows you to remotely SSH into your server’s development environment and program just like you would normally. All of these features here, makes VS Code arguably one of the best editors out there, as these are simply one click away from being fully operational. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains-a-deep-ecosystem-of-integrations"&gt;
  &lt;/a&gt;
  JetBrains - A Deep Ecosystem of Integrations
&lt;/h3&gt;

&lt;p&gt;Extensibility is an area where a JetBrains IDE doesn’t necessarily shine. This is largely because you will find that everything that you need often ships with the IDE. With the benefit of being able to install a specific IDE with superpowers for your language, I’ve found that the integrations that I might be used to installing on VS Code shipped with the software.&lt;/p&gt;

&lt;p&gt;For example, JetBrains powerful built-in integrations with docker. By only specifying a configuration type such as a &lt;code&gt;Dockerfile&lt;/code&gt;, all JetBrains IDEs give complete control of all arguments, names, tags, ports, environment variables in an easy-to-use configuration GUI. When run, the IDE integrates with docker integration to bring you the build log, the run log, environment variables, and easy-to-read and integrated configuration settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1SomaWck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252FExtensions.png%3Falt%3Dmedia%26token%3D4bd3c9f2-3d19-4181-a06e-c2149f11c657" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SomaWck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/blankly-6ada5.appspot.com/o/blog%252Fimages%252FExtensions.png%3Falt%3Dmedia%26token%3D4bd3c9f2-3d19-4181-a06e-c2149f11c657" alt="jetbrains-extension" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same is true for many other common services such as FastAPI, Flask, shell scripts and a ton more.&lt;/p&gt;

&lt;p&gt;JetBrains IDEs also have a rich plugin ecosystem. For example, I was able to install a plugin that offered full language support for Verilog and another that gave full support for Matlab. Ironically these lightweight JetBrains plugins gave a better coding experience than the native Matlab or Quartus (Verilog) environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;p&gt;Indubitably, both have an extensive community and marketplace to be able to get a variety of stable and custom built extensions/plugins. Any feature that each respective IDE might not be able to handle, you will most likely be able to add it to their core functionality. However, with a slightly larger community base on VS Code (and the support of Microsoft), having more extensions and the life-changing Remote-Containers extension (for me, at least) allowed me to iterate so much faster. Here, if you are working with very custom code that might require custom extensions like Docker, VS Code is definitely the IDE for you.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-collaboration"&gt;
  &lt;/a&gt;
  5. Collaboration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-code-live-share-by-extension"&gt;
  &lt;/a&gt;
  VS Code - Live Share by Extension
&lt;/h3&gt;

&lt;p&gt;Though VS Code itself does not have live sharing built in. Microsoft has created a live share extension that allows almost instant live sharing. What makes this so great is that all anyone needs is VS Code, in fact now you can even live share directly from your browser using vscode.dev. The actual live share process itself is really good...as long as you have a good internet connection. Users can follow each other and edit code alongside each other. VS Code also keeps track of who helped author the commit for source control. With all of this in mind, and how simple live share is to set up. VS Code arguably outshines almost any other IDE and editor in this space. &lt;/p&gt;

&lt;p&gt;There are some caveats. One example is live sharing Vue.js. When live sharing vue, some of the extensions don’t propagate including Vetur, which is critical to Vue visualization. This sometimes makes it extremely difficult and arguably annoying, but I think this is very specific to a specific audience (so Vue users out there beware). Also, I really hate how the undo functionality is tied to the machine, not the user. I just gets in the way and causes confusion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains-secure-amp-distributed"&gt;
  &lt;/a&gt;
  JetBrains - Secure &amp;amp; Distributed
&lt;/h3&gt;

&lt;p&gt;All JetBrains IDEs offer a huge number of options to share your code with others and collaborate live. These options vary by the degree of security they offer. An impressive ability I recently discovered was running any JetBrains IDE inside a docker container using projector. This allows me to connect to a JetBrains IDE hosted on a server such as the cloud and then code with full JetBrains features inside my web browser. Now with just a password I can securely code anywhere from a headless server. This is just one of the many sharing options.&lt;/p&gt;

&lt;p&gt;A more mainstream way to share JetBrains IDEs is using Code With Me. This allows you to view other people’s projects directly in your IDE and and use their dev environment as if it was native on your computer. One thing I was impressed with is that a teammate was having a python issue and easily started a Code With Me Session. I was able to natively run their configurations, use the debugger with the same insights I showed above and and then easily fix their issue.&lt;/p&gt;

&lt;p&gt;The many different and well integrated ways to share IDEs are amazing for people trying to optimize their security, collaboration or how they work with distributed teams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;p&gt;If it was two years ago, I would've deemed this feature pretty irrelevant. In fact, before two years ago, I never even know collaboration features existed in IDEs. We could've simply walked over to our colleague(s) and started working together on the same machine. But now, with COVID still going strong, it has become much harder to be able to have this luxury. Because of this, both of these IDEs do a very solid job, enabling such functionality. However, the sole reason that the undo function i synced across users instantly make me recommend JetBrains a hundred times over VS Code. And, the video and audio call support alongside the ability to record Git blame across users is just the frosting on top.&lt;/p&gt;




&lt;p&gt;Now, beyond these factors here, I also know that VS Code is a free IDE while JetBrains comes with a decently hefty price tag which I understand might turn some of you away (it is free for students though). However, for me, its been a blast joining a part of the JetBrains ecosystem for this past month and I cannot wait to continue working with it more. I hope you might consider giving it a shot, even when there is a bit of a price to entry.&lt;/p&gt;

&lt;p&gt;A converted full-stack developer,&lt;/p&gt;

&lt;p&gt;Jeremy, Lead Engineer at &lt;a href="https://blankly.finance/"&gt;Blankly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Create a Style Guide as a Technical Writer</title>
      <author>Segun Olumide</author>
      <pubDate>Sun, 09 Jan 2022 21:29:56 +0000</pubDate>
      <link>https://dev.to/wonexo/how-to-create-a-style-guide-as-a-technical-writer-317b</link>
      <guid>https://dev.to/wonexo/how-to-create-a-style-guide-as-a-technical-writer-317b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Having a style guide is a very useful way of having a clear and consistent form of writing that can be improved over time. This guide is mostly useful for technical writers. I'll be sharing a few things I learned so far, writing for an open-source community (&lt;a href="http://fastify.io"&gt;Fastify&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are a few things you need to know and consider when writing your style guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-why-am-i-writing-this"&gt;
  &lt;/a&gt;
  1. Why am I writing this?
&lt;/h2&gt;

&lt;p&gt;Even though it is necessary to have a style guide, knowing &lt;em&gt;why&lt;/em&gt; can help you figure what needs documenting. Speaking with your community members, developers, or a lead (Could be a program/project manager or a developer advocate if there is one), can help you identify your organisation needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-who-am-i-writing-this-for"&gt;
  &lt;/a&gt;
  2. Who am I writing this for?
&lt;/h2&gt;

&lt;p&gt;Perhaps, you want a style guide for open-source community members who contribute to existing documentations or intended for developers who write API documentation and requirements. Describing what the Guide focuses on helps the reader identify which style guide to follow. You can save them the time of reading through the whole thing before they realise it, even some may not figure it out eventually. Do make sure you include a clear description of the guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-what-should-i-consider-when-writing-one"&gt;
  &lt;/a&gt;
  3. What should I consider when writing one?
&lt;/h2&gt;

&lt;p&gt;There is a lot to consider when writing a style guide, here are lists of things you may need to include in yours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#guide-requirements"&gt;
  &lt;/a&gt;
  Guide requirements
&lt;/h3&gt;

&lt;p&gt;A guide requirement tells the reader what they need to know before writing specific documentations. Take this example. A user finds an open-source project built with React Javascript framework they want to contribute to on Github but does not know the requirements needed. In this case, you can provide a requirement in a style guide that notes their need to understand specific tools and programming languages like Javascript, HTML, CSS and may also need to be familiar with Markdown.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h3&gt;

&lt;p&gt;Your fonts determine the quality and standards of your documentation.&lt;br&gt;
According to &lt;a href="https://cs.anu.edu.au/courses/comp2300/assets/manuals/zimmer-technical-writing.pdf"&gt;Uwe R. Zimmer&lt;/a&gt;,  good typesetting is the technical skill that enables your reader to take in your material smoothly, fast, and efficiently.&lt;br&gt;
Knowing when to use bold and emphasis, what font size to use and how much line space is needed, encourages better readability for your readers and improve the content design in general. If you want to know more about font selection, check out the &lt;em&gt;&lt;a href="https://ugurakinci.medium.com/4-basic-rules-of-using-fonts-properly-in-a-technical-document-fdab154c1008"&gt;4 Basic Rules of Using Fonts Properly in a Technical Document by Ugur Akinci&lt;/a&gt;&lt;/em&gt; on medium.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-content"&gt;
  &lt;/a&gt;
  Visual content
&lt;/h3&gt;

&lt;p&gt;Some documentation doesn't require images. Most documentation tends to avoid Images to optimise storage and avoid the need to keep changing them when updates come up. It's okay to include them in product guides or documents that depend upon Images for a better description. You can also refer to an Image/Video linked separately (Youtube, Cloudinary, Vimeo.), which you can update without directly altering the docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-style"&gt;
  &lt;/a&gt;
  Writing style
&lt;/h3&gt;

&lt;p&gt;Including a writing style can help your reader know what type of document should be formal or informal. In my case, I find docs like references, terms &amp;amp; conditions in a formal tone, while guides, tutorials, and articles use a more friendly approach. Identify what writing style is needed before you conclude on which to employ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#condescending-terms"&gt;
  &lt;/a&gt;
  Condescending terms
&lt;/h3&gt;

&lt;p&gt;Condescending words give off a feeling of superiority to your readers. Using condescending tones are very sensitive. Words like "obviously", "him/he", "simply", or "master" are forms of condescending terms that can affect users who are not so confident or knowledgable about a particular topic. You might tend to lose them along the way. It's not a good reputation to let any of your readers feel like they are too dumb to understand or feel it's not for them. You can include a list of words to avoid in your guide (example: Use Primary ✅ not Master ❌, Use They ✅ not Him❌).&lt;/p&gt;

&lt;p&gt;To get more insight, you can read an article by &lt;a href="https://dev.to/unmock/setting-up-the-alex-js-language-linter-in-your-project-3bpl"&gt;Carolyn Stransky - How to remove condescending language from the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-of-verbs"&gt;
  &lt;/a&gt;
  Use of verbs
&lt;/h3&gt;

&lt;p&gt;Verbs play a vital role in making the reader take action, and to take action, I mean to start your sentence with a verb. Highlighting when and how these verbs are applied can help improve the documentation, especially when it requires the user to take action. This approach is widely adopted in how-to guides because it requires the user to follow specific instructions.&lt;br&gt;
Here's an example of where this can be used and compared to a less effective one:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plain: To install all dependencies, you need to type in "npm install" in your terminal.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use of verb: Open your terminal and type in "npm install" to install all dependencies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plain: There is a need to delete the folder called "Back up" so that the hard drive space can be saved.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use of verb: Delete the folder name "Back up" to save hard drive space.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-indentation"&gt;
  &lt;/a&gt;
  Code indentation
&lt;/h3&gt;

&lt;p&gt;If your documentation might entail some form of code examples, providing a standard indentation style is essential to keep your code structured, neat and consistent. There are three indentation styles I know of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two spaces&lt;/li&gt;
&lt;li&gt;Four spaces&lt;/li&gt;
&lt;li&gt;Tabs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Developers have been debating on which indentation is best. "Spaces" always take the win due to &lt;a href="https://www.php-fig.org/psr/psr-2/#24-indenting"&gt;PSR-2 standards.&lt;/a&gt; If your team already have a standard they follow, then you can include that in your guide.&lt;/p&gt;

&lt;p&gt;There are many more things to consider. This guide will put you on the right track. I hope this gives you some direction to making the most effective style guide for your team.&lt;/p&gt;

&lt;p&gt;Here are also some pointers that can help:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gatsbyjs.com/contributing/gatsby-style-guide/"&gt;Gatsby style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/style"&gt;Google developer documentation style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.writethedocs.org/guide/writing/style-guides/"&gt;Write the docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.apple.com/applestyleguide/#/"&gt;Apple style guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-gb/style-guide/welcome/"&gt;Microsoft writing style guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find this article helpful, a like from you will be awesome. It'll help push this article forward to those who might need this.&lt;/p&gt;

&lt;p&gt;Happy writing and cheers.&lt;/p&gt;

</description>
      <category>technicalwriting</category>
      <category>productivity</category>
      <category>styleguide</category>
    </item>
    <item>
      <title>Extract colors from a website URL and generate a CSS/Sass code palette</title>
      <author>Arbaoui Mehdi</author>
      <pubDate>Sun, 09 Jan 2022 20:44:08 +0000</pubDate>
      <link>https://dev.to/arbaoui_mehdi/extract-colors-from-a-website-url-and-generate-a-csssass-code-palette-2jid</link>
      <guid>https://dev.to/arbaoui_mehdi/extract-colors-from-a-website-url-and-generate-a-csssass-code-palette-2jid</guid>
      <description>&lt;p&gt;We made &lt;a href="//alwane.io"&gt;alwane.io&lt;/a&gt; a web-based tool giving you the ability to extract colors from a website URL or an existing CSS code, regroup/order colors, then generate a palette including a CSS/Sass file. A simple and handy tool to build your next project's colors, get inspiration, and examine your website's color palette.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xrq7LRLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jnx6i5pglxxaqptfs44.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xrq7LRLm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jnx6i5pglxxaqptfs44.gif" alt="Spotify Code Color Palette" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-description"&gt;
  &lt;/a&gt;
  Tool Description
&lt;/h2&gt;

&lt;p&gt;It's a simple web application to help you generate palettes for your projects. It uses a color sorting algorithm to gather colors from a website's CSS or any other existing CSS code and regroup them into color classes. &lt;/p&gt;

&lt;p&gt;You can then order these colors, generate a CSS or SASS code, and start using it in your project. The tool also offers some other useful features: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Colors can be extracted from an existing CSS code (the one used by the website) or from any other CSS code. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colors can be sorted and regrouped from a list of Hexadecimal codes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Colors can be saved in sets: you can therefore create multiple lists of colors so that you can easily manage them. &lt;br&gt;
This is incredibly convenient when each set contains colors from a different website or project, and you want to keep track of everything separately.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have complete control of the pallet, where you can remove one color or a group of colors. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I hope you like the tool. I’d be happy to answer any questions, and I welcome your feedback.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>sass</category>
      <category>webdev</category>
      <category>uidesign</category>
    </item>
    <item>
      <title>How To Create a Pricing Table with TAILWIND CSS</title>
      <author>Learn Together</author>
      <pubDate>Sun, 09 Jan 2022 20:11:37 +0000</pubDate>
      <link>https://dev.to/itlearntogether/how-to-create-a-pricing-table-with-tailwind-css-3gia</link>
      <guid>https://dev.to/itlearntogether/how-to-create-a-pricing-table-with-tailwind-css-3gia</guid>
      <description>&lt;p&gt;In this coding video tutorial, I will show you how to create a Pricing Table with Tailwind CSS. You can follow along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to implement&lt;/li&gt;
&lt;li&gt;FREE SOURCE CODE&lt;/li&gt;
&lt;li&gt;FOLLOW ALONG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subscribe please! :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Youtube video&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4UMQcQgSzNo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNTo4Jyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FIr3dzKWYAAFsLs.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fijSw9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1472690436649144321/97EgbNGa_normal.jpg" alt="learntogether profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        learntogether
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/itlearntogether"&gt;@itlearntogether&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How to create a Pricing Table with TAILWINDCSS 😋&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/LkAYygY0SN"&gt;youtube.com/watch?v=4UMQcQ…&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/tailwindcss"&gt;#tailwindcss&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/html"&gt;#html&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/code"&gt;#code&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/programming"&gt;#programming&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tutorial"&gt;#tutorial&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/tutorial"&gt;#tutorial&lt;/a&gt;s &lt;a href="https://twitter.com/hashtag/YouTube"&gt;#YouTube&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/subscribe"&gt;#subscribe&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/youtubesubscibe"&gt;#youtubesubscibe&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:57 PM - 09 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1480267557668102150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1480267557668102150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1480267557668102150" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating Custom Pipe in Angular</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 09 Jan 2022 20:01:43 +0000</pubDate>
      <link>https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam</link>
      <guid>https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam</guid>
      <description>&lt;p&gt;Today we will learn how to create our own Pipe or the Custom Pipe. If you are unaware about what a Pipe is in Angular then I would recommend you to go through the previous articles I wrote on Pipe. You can start from &lt;a href="https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec"&gt;here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The need of custom pipe comes when the built in pipe does not meet our requirement.&lt;/p&gt;

&lt;p&gt;✩ So now lets see how can we create our first Pipe ✩&lt;/p&gt;

&lt;p&gt;The CLI command to create a Pipe is -&lt;br&gt;
&lt;code&gt;ng generate pipe &amp;lt;pipe-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;the shorthand&lt;/em&gt; -&lt;br&gt;
&lt;code&gt;ng g p &amp;lt;pipe-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets open the command prompt in the project root and type in the below command -&lt;br&gt;
&lt;code&gt;ng g p custom-pipe-demo&lt;/code&gt;&lt;br&gt;
So here we are saying Angular to create a pipe with the name &lt;br&gt;
&lt;code&gt;custom-pipe-demo&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WzNGUHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22kromc05e2ncezpd0rq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WzNGUHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22kromc05e2ncezpd0rq.PNG" alt="Image description" width="721" height="85"&gt;&lt;/a&gt;&lt;br&gt;
and you will see 2 files getting created in the project -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiJ7Fyj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vzx99bd0fqg391s34cm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiJ7Fyj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vzx99bd0fqg391s34cm.PNG" alt="Image description" width="486" height="394"&gt;&lt;/a&gt;&lt;br&gt;
The file pointed with the red arrow is the spec file (for writing unit test). We will not talk about it right now.&lt;br&gt;
We are more interested in writing our first pipe and will work with the file pointed with yellow arrow (the second one).&lt;/p&gt;

&lt;p&gt;One more line we can see in the command prompt which tells that the &lt;code&gt;app.module.ts&lt;/code&gt; has been updated. &lt;br&gt;
If you open the app.module.ts file you will see a new line got added and its the name of our pipe.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7fVcsIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73hchtbli3u7bhw4uuqp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7fVcsIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73hchtbli3u7bhw4uuqp.PNG" alt="Image description" width="880" height="313"&gt;&lt;/a&gt;&lt;br&gt;
I will talk about modules in very details in the very next post.&lt;/p&gt;

&lt;p&gt;So lets see how the pipe looks like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'customPipeDemo'
})
export class CustomPipeDemoPipe implements PipeTransform {
  transform(value: unknown, ...args: unknown[]): unknown {
    return null;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets note our observation points -&lt;br&gt;
1️⃣ There is a normal typescript class &lt;code&gt;CustomPipeDemoPipe&lt;/code&gt; &lt;br&gt;
2️⃣ The class implements an interface &lt;code&gt;PipeTransform&lt;/code&gt;&lt;br&gt;
3️⃣ The Class is marked with a &lt;code&gt;@Pipe&lt;/code&gt; decorator&lt;br&gt;
4️⃣ The Pipe Decorator takes an object, which has the name of the pipe&lt;br&gt;
5️⃣ The &lt;code&gt;PipeTransform&lt;/code&gt; interface has a method called &lt;code&gt;transform&lt;/code&gt; which we need to implement (🔴 its mandatory 🔴)&lt;br&gt;
6️⃣ The &lt;code&gt;transform&lt;/code&gt; method has few arguments. The signature is already provided but we need to tweak it as per our need. The first argument is the value which we need to transform and the remaining args is an array of all the pipe parameters. Remember when we used the date pipe we passed 'short'/ 'medium' etc as parameters.&lt;br&gt;
7️⃣ The type is unknown by default but we can change it.&lt;/p&gt;

&lt;p&gt;So now the next question what we are trying to build using the pipe. &lt;/p&gt;

&lt;p&gt;Say our project has a file picker. Once it picks a file from the system we need to show the file size in Mb by default and if we pass a unit like GB it will convert that accordingly.&lt;/p&gt;

&lt;p&gt;So lets paste the below code and modify the transform function -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  transform(fileSize: number, ...args: string[]): string {
    if (!args.length || args[0] === 'MB') {
      return (fileSize / (1024 * 1024)).toFixed(2) + 'MB';
    } else if (args[0] === 'KB') {
      return (fileSize / 1024).toFixed(2) + 'KB';
    } else {
      return (fileSize / (1024 * 1024 * 1024)).toFixed(2) + 'GB';
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the &lt;code&gt;app.component.html file&lt;/code&gt; -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zD0E3xa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3r0wnibo14bihc3x0ou.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zD0E3xa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3r0wnibo14bihc3x0ou.PNG" alt="Image description" width="478" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h3&amp;gt;Custom Pipe Demo&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ 2000405677 | customPipeDemo : 'KB' }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets understand the code on a high level.&lt;br&gt;
The first parameter which will come to the transform function is the value that we need to transform/ alter. In this case &lt;code&gt;2000405677&lt;/code&gt;&lt;br&gt;
Then we are using the pipe operator (|) and then the name of the pipe &lt;code&gt;customPipeDemo&lt;/code&gt;&lt;br&gt;
Then we can pass an argument in this case the unit where we need to convert to in this case &lt;code&gt;KB&lt;/code&gt;&lt;br&gt;
You can pass multiple arguments also and will be received by the args array, in the transform function.&lt;/p&gt;

&lt;p&gt;In the output we will see -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJQ3NqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws0fzkiqdzi6j8nl3e2t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRJQ3NqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws0fzkiqdzi6j8nl3e2t.PNG" alt="Image description" width="295" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets see what debugger tells us -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C84jYwRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3nbpwcu5tf4ggksgl9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C84jYwRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3nbpwcu5tf4ggksgl9.PNG" alt="Image description" width="702" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the argument &lt;code&gt;fileSize&lt;/code&gt; receives the value &lt;br&gt;
&lt;strong&gt;2000405677&lt;/strong&gt;&lt;br&gt;
The &lt;code&gt;args[]&lt;/code&gt; receives &lt;strong&gt;KB&lt;/strong&gt; as the first item in the array which we were passing in the argument.&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
The most important thing is the return keyword.&lt;br&gt;
After we did the transformation you can see we need to return the transformed value else nothing will be displayed in the template/ browser.&lt;/p&gt;

&lt;p&gt;That's all for now my friend 👋🏼 &lt;/p&gt;

&lt;p&gt;Hope you enjoyed the reading the post.&lt;br&gt;
If yes do like comment and share.&lt;br&gt;
Coming up next is the Module in Angular. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorials</category>
      <category>pipe</category>
    </item>
    <item>
      <title>Simple Movie rec sys</title>
      <author>Lukas</author>
      <pubDate>Sun, 09 Jan 2022 19:56:02 +0000</pubDate>
      <link>https://dev.to/lukas_f/simple-movie-rec-sys-5203</link>
      <guid>https://dev.to/lukas_f/simple-movie-rec-sys-5203</guid>
      <description>&lt;p&gt;I want to improve my Algorithm and Data structure Knowledge.&lt;br&gt;
In the following blog post, I will guide you through a sample project you can create for your portfolio or as an Idea of how to use Data structures like a Tree, Hashmap, etc...&lt;br&gt;
The key intention behind this blog post is to create simple projects that can be used in your portfolio to highlight your skills. &lt;br&gt;
The main focus in this post is to use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;API for data &lt;/li&gt;
&lt;li&gt;Data structures like TreeNodes&lt;/li&gt;
&lt;li&gt;Command prompt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The project uses &lt;a href="https://developers.themoviedb.org/3/movies/get-movie-details"&gt;themoviedb&lt;/a&gt; API to fetch the movie data of 20 movies belonging to a certain genre. The API key can get generated after you created an account under &lt;a href="https://www.themoviedb.org/"&gt;themoviedb&lt;/a&gt;. &lt;br&gt;
In the next step I use the json and requests library.&lt;br&gt;
&lt;code&gt;genres = requests.get(f"https://api.themoviedb.org/3/genre/movie/list?api_key={api_key}&amp;amp;language=en-US")&lt;br&gt;
genre_data = genres.json()&lt;/code&gt;&lt;br&gt;
The api data looks like the following:&lt;br&gt;
{'genres': [{'id': 28, 'name': 'Action'},&lt;br&gt;
  {'id': 12, 'name': 'Adventure'},&lt;br&gt;
  {'id': 16, 'name': 'Animation'},&lt;br&gt;
  {'id': 35, 'name': 'Comedy'},&lt;br&gt;
  {'id': 80, 'name': 'Crime'},&lt;br&gt;
  {'id': 99, 'name': 'Documentary'},&lt;br&gt;
  {'id': 18, 'name': 'Drama'},&lt;br&gt;
  {'id': 10751, 'name': 'Family'},&lt;br&gt;
  {'id': 14, 'name': 'Fantasy'},&lt;br&gt;
  {'id': 36, 'name': 'History'},&lt;br&gt;
  {'id': 27, 'name': 'Horror'},&lt;br&gt;
  {'id': 10402, 'name': 'Music'},&lt;br&gt;
  {'id': 9648, 'name': 'Mystery'},&lt;br&gt;
  {'id': 10749, 'name': 'Romance'},&lt;br&gt;
  {'id': 878, 'name': 'Science Fiction'},&lt;br&gt;
  {'id': 10770, 'name': 'TV Movie'},&lt;br&gt;
  {'id': 53, 'name': 'Thriller'},&lt;br&gt;
  {'id': 10752, 'name': 'War'},&lt;br&gt;
  {'id': 37, 'name': 'Western'}]}&lt;/p&gt;

&lt;p&gt;Through the API we got all available genres in the next step we use the genres to collect 20 movies from each genre.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data = []
for genre in genre_name:
    r = requests.get(f"https://api.themoviedb.org/3/discover/movie?api_key={api_key}&amp;amp;language=en-US&amp;amp;sort_by=popularity.desc&amp;amp;include_adult=false&amp;amp;include_video=false&amp;amp;page=1&amp;amp;with_genres={genre}&amp;amp;with_watch_monetization_types=flatrate")
    movie_data = r.json()

    for i in movie_data['results']:
        movie_temp = []
        movie = [i['title'],i['vote_average'],i['release_date'],i['popularity'],i['overview'], genre]
        movie_temp.append(movie)
        data += movie_temp 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;genre_name is a list containing all genres. We iterate over each genre and change the API key according to that. In the next step, we iterate over the API result and place it in a list of lists that get appended to data. The resulting list of list looks like the following:&lt;/p&gt;

&lt;p&gt;[['Spider-Man: No Way Home', 8.6, '2021-12-15', 20686.826, 'Peter Parker is unmasked and no longer able to separate...', 'Action'],&lt;br&gt;
['Venom: Let There Be Carnage', 7.2, '2021-09-30', 7992.617, 'After finding a host body in investigative reporter Eddie Brock,...', 'Action']]&lt;/p&gt;

&lt;p&gt;After getting the data and saving it in video_data.py we create a simple TreeNode class that will be used as a data structure for the project. The tree is simple and contains a start node and a node for each genre. Each genre node contains 20 movies which add up to 380 Nodes from the 19 genres.&lt;/p&gt;

&lt;p&gt;The next step is to get the user input and the information of what genre he wants to watch. The user has several methods to select the movie. The first way is using a number from 1-19 or writing the genre into the command line. &lt;br&gt;
The user gets asked after that if he wants to see movies from the selected genre. After that, he gets prompted again to get the amount of recommended movies. In the end, the user can get another recommendation or quit the recommendation sys.&lt;/p&gt;

&lt;p&gt;The following is a gif that highlights the working of the rec sys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apfjJF5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrd59snfpok039c0ycaq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apfjJF5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrd59snfpok039c0ycaq.gif" alt="Working recsys" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you very much for your time and have fun exploring my &lt;a href="https://github.com/Lukas-Forst/Movie_rec_sys"&gt;github&lt;/a&gt; repository and feedback of any sort is welcomed.&lt;/p&gt;

&lt;p&gt;cover image from &lt;a href="https://unsplash.com/photos/evlkOfkQ5rE?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>portfolio</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>SpringBoot and Rest APIs in Java</title>
      <author>Bhagya Indimagedara</author>
      <pubDate>Sun, 09 Jan 2022 19:48:49 +0000</pubDate>
      <link>https://dev.to/kithminiii/springboot-and-rest-apis-in-java-5dpn</link>
      <guid>https://dev.to/kithminiii/springboot-and-rest-apis-in-java-5dpn</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is SpringBoot?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot is an open source Java-based framework used to create a micro Service.&lt;/p&gt;

&lt;p&gt;It is developed by Pivotal Team and is used to build stand-alone and production ready spring applications. This chapter will give you an introduction to Spring Boot and familiarizes you with its basic concepts.&lt;/p&gt;

&lt;p&gt;Spring Boot enables developers to build applications that are ready to use right away. By embedding a web server like as Tomcat or Netty into your program during the initialization phase, you may create independent applications that function without the need for an external web server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g43ejMup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3gn4t842x16i5kudu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g43ejMup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3gn4t842x16i5kudu9.png" alt="Image description" width="716" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reasons to Use Spring for making restful web services in Java&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spring Integration's HTTP support allows for the running of HTTP requests and the processing of inbound HTTP requests. The HTTP support consists of the following gateway implementations: HttpInboundEndpoint and HttpRequestExecutingMessageHandler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the case of REST, the illustration of information is incredibly necessary, and that's why Spring MVC permits you to bypass View-based rendering altogether by victimization the @ResponseBody annotation and numerous HttpMessageConverter implementations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring 4.0 unleashes more fervent annotation @RestController to create the event of restful web services even easier.&lt;br&gt;
If you annotate your controller class using @RestController rather than @Controller then Spring applies message conversations to all or any handler strategies within the controller.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of the most distinctions between REST web services and a standard web application is that REST passes resource symbol information in URI.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you remember, we use @RequestParam to induce the worth of these query parameters however to not worry, Spring MVC additionally provides a @PathVariable annotation which might extract data from the URL. It permits the controller to handle requests for parameterized URLs.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Another key facet of restful web services is the illustration, for instance, a similar resource may be diagrammatic in numerous formats e.g. JSON, XML, HTML, and so on fortunately Spring provides several read implementations and views resolvers to render information as JSON, XML, and HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similar to @ResponseBody annotation, which is used for changing the response to the format consumer needs (by victimization HttpMessageConverts), Spring MVC additionally provides @RequestBody annotation, which uses HTtpMethodConverter implementations to convert incoming HTTP information into Java objects passed into a controller's handler method.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Spring framework also provides a template class, RestTemplatewhich is similar to JdbcTemplate, and, JmsTemplate, can consume REST resources. You can use this class to test your RESTful web service or develop REST clients.&lt;br&gt;
Restful web service in JAVA&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;REST has now become a standard way to develop web services, and there are many frameworks and libraries available for Java, such as Jersey, RESTEasy, JAX-RS, Restlet, Apache CFX, and others. Still, I recommend that Java developers use Spring Model-View-Controller to create RESTful web services.&lt;/p&gt;

&lt;p&gt;Some may wonder why the Spring Model-View-Controller Framework is used to create RESTful web services in Java. What are the benefits, and why is it superior to other frameworks and libraries available?&lt;/p&gt;

&lt;p&gt;The most important reason, in my opinion, to use Spring for developing RESTful web services is that you can use your Spring Model-View-Controller experience to develop RESTful web services without having to learn a new framework or library, allowing you to quickly roll out your REST API.&lt;/p&gt;

&lt;p&gt;This is one of the most significant benefits, I mean leveraging your years of experience with Spring Model-View-Controller to expose your code.&lt;/p&gt;

&lt;p&gt;Another reason is that Spring has wonderful support for developing restful web services. within the last number of versions, ranging from Spring version 3.0, It's provided a lot of enhancements to Spring MVC to supply fantabulous REST support. It's provided dedicated annotations, like @RestController and @ResponseStatus, to form the event of quiet resources even easier in Spring 4.0. It's additionally not solely helps you to form quiet web services however also provides categories to consume REST resources such as you will use the RestTemplate class to consume quiet resources. There are more utility classes and annotations that build the event of quiet net services in Spring easier and a lot of seamless, and I'll share a handful of them during this article to prove my purpose that victimization Spring to develop restful net service is that the right decision.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUX4lFjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekadbnktyg7enuub16md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUX4lFjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekadbnktyg7enuub16md.png" alt="Image description" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages and Disadvantages of SpringBoot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simplified &amp;amp; version conflict free dependency management through the starter POMs.&lt;/p&gt;

&lt;p&gt;We can quickly setup and run standalone, web applications and micro services at very less time.&lt;/p&gt;

&lt;p&gt;You can just assemble the jar artifact which comes with an embedded Tomact, Jetty or Undertow application server and you are ready to go.&lt;/p&gt;

&lt;p&gt;Spring Boot provides HTTP endpoints to access application internals like detailed metrics, application inner working, health status, etc.&lt;/p&gt;

&lt;p&gt;No XML based configurations at all. Very much simplified properties. The beans are initialized, configured and wired automatically.&lt;/p&gt;

&lt;p&gt;The Spring Initializer provides a project generator to make you productive with the certain technology stack from the beginning. You can create a skeleton project with web, data access (relational and NoSQL datastores), cloud, or messaging support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring boot may unnecessarily increase the deployment binary size with unused dependencies.&lt;/p&gt;

&lt;p&gt;If you are a control freak, I doubt Spring Boot would fit your needs.&lt;/p&gt;

&lt;p&gt;Spring Boot sticks good with micro services. The Spring Boot artifacts can be deployed directly into Docker containers. In a large and monolithic based applications, I would not encourage you to use Spring Boot.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Easiest way to deploy your Ethereum Smart Contract</title>
      <author>Lara Parvinsmith</author>
      <pubDate>Sun, 09 Jan 2022 19:29:08 +0000</pubDate>
      <link>https://dev.to/lparvinsmith/easiest-way-to-deploy-your-ethereum-smart-contract-2825</link>
      <guid>https://dev.to/lparvinsmith/easiest-way-to-deploy-your-ethereum-smart-contract-2825</guid>
      <description>&lt;p&gt;So you've written your Ethereum smart contract, and now you may be wondering how to deploy it. I recommend first deploying the contract to a Test Network (testnet), such as Rinkeby, before deploying it to Ethereum Main Network (mainnet). You can deploy to both testnet and mainnet by using the Remix web app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-deploy-to-a-testnet"&gt;
  &lt;/a&gt;
  Why deploy to a testnet
&lt;/h2&gt;

&lt;p&gt;Testnets behave similarly to the Ethereum Main Network, but the ETH required to transact with them is free to get from a "faucet." Faucets are apps where you can input your testnet wallet address and receive testnet assets like ETH. (I like &lt;a href="https://faucets.chain.link"&gt;Chainlink's Faucet&lt;/a&gt; and refer to it in the instructions below.) Testnet ETH enables you to pay the gas to deploy your smart contract to testnet and make test transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-easiest-way"&gt;
  &lt;/a&gt;
  Deploy the easiest way
&lt;/h2&gt;

&lt;p&gt;Paste your contract code into the &lt;a href="http://remix.ethereum.org"&gt;Remix IDE&lt;/a&gt; and deploy it from the Remix web app. Step by step instructions below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up a test account on your crypto wallet&lt;/strong&gt;, such as MetaMask. Make sure to select the Testnet of your choice from the Networks dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oEwZASf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awerukuaeq90dtuw6sxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oEwZASf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awerukuaeq90dtuw6sxi.png" alt="MetaMask test account with Rinkeby network selected" width="718" height="678"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get ETH on Testnet from a &lt;a href="https://faucets.chain.link/rinkeby"&gt;faucet&lt;/a&gt;&lt;/strong&gt; by entering the address from your test account above. You will need this in the next step to pay the gas fee for deploying your contract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7LenpfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji7jf7kvqei9acdugx0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7LenpfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji7jf7kvqei9acdugx0p.png" alt="Chainlink Faucet with Rinkeby network and 0.1 ETH selected" width="880" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load &lt;a href="http://remix.ethereum.org"&gt;Remix&lt;/a&gt;&lt;/strong&gt; with http rather than https to allow interaction with the wallet. Create a file in the &lt;code&gt;contracts&lt;/code&gt; folder and paste in your smart contract.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTNIoVFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki7ttlygex5i2jhqgpa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTNIoVFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki7ttlygex5i2jhqgpa8.png" alt="Ballot contract file in Remix IDE" width="880" height="448"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then compile the contract in the Compile tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emlT9gBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcatmv7ytartlpilgxm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emlT9gBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcatmv7ytartlpilgxm4.png" alt="Compile Ballot contract in Remix" width="740" height="968"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: for more information on the Compiler configuration options, please read the &lt;a href="https://remix-ide.readthedocs.io/en/latest/compile.html"&gt;Remix documentation&lt;/a&gt;. The default configuration is fine for testing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then go to the Deploy tab when it's compiled. In the Deploy tab, use the Environment selector to select "Injected Web3." Confirm the correct Network, account and contract are selected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E36tk7dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o209r8rvxnrdqcencolx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E36tk7dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o209r8rvxnrdqcencolx.png" alt="Deploy Ballot contract on Rinkeby Network in Remix" width="742" height="948"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: if your &lt;code&gt;constructor&lt;/code&gt; function requires any parameters, specify them in the input next to the "Deploy" button. For more on deploy configuration, see the &lt;a href="https://remix-ide.readthedocs.io/en/latest/run.html"&gt;Remix documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your wallet will confirm the transaction in a pop-up window, including a gas fee. You should still have plenty left for testing transactions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eC-o_16y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39kyy26nmtiobokqn1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eC-o_16y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p39kyy26nmtiobokqn1q.png" alt="MetaMask transaction" width="716" height="1228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: if you load Remix with https, you may get this message "You are using an &lt;code&gt;https&lt;/code&gt; connection. Please switch to &lt;code&gt;http&lt;/code&gt; if you are using Remix against an &lt;code&gt;http Web3 provider&lt;/code&gt; or allow Mixed Content in your browser." This will prevent you from connecting to your wallet, so make sure to use "http" in the URL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optionally deploy to mainnet in the same Deploy tab&lt;/strong&gt; by selecting "Ethereum Mainnet" from the MetaMask Network selector. This will also prompt the wallet to confirm the transaction, including a gas fee.&lt;/p&gt;

&lt;p&gt;Congrats, you've deployed your contract! Now you can interact with it on Etherscan (on &lt;a href="https://rinkeby.etherscan.io"&gt;Rinkeby&lt;/a&gt; or &lt;a href="https://etherscan.io"&gt;Mainnet&lt;/a&gt;) or in your very own Web3 app.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>solidity</category>
      <category>ethereum</category>
      <category>smartcontract</category>
    </item>
    <item>
      <title>Code Splitting with dynamic imports</title>
      <author>Reza Lavarian</author>
      <pubDate>Sun, 09 Jan 2022 19:28:50 +0000</pubDate>
      <link>https://dev.to/lavary/code-splitting-with-dynamic-imports-kjg</link>
      <guid>https://dev.to/lavary/code-splitting-with-dynamic-imports-kjg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Defer non-critical resources and boost your page load time.&lt;br&gt;
Over time, as the codebase grows in complexity, the final bundle (the main JavaScript file) would also increase in size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you probably know, the web browser, for the most part, is single-threaded, which means all the heavy lifting is done in a single thread, a.k.a the main thread.&lt;/p&gt;

&lt;p&gt;That said, the web browser executes JavaScript code in the main thread, the same thread where parsing, layout, and paint happen.&lt;/p&gt;

&lt;p&gt;This means if you have a large JavaScript file, the main thread will be busy evaluating your code before the user will be able to interact with the page.&lt;/p&gt;

&lt;p&gt;She would have to wait, even though she won't need every single functionality in that bundle right at the beginning.&lt;/p&gt;

&lt;p&gt;So, a large JS file = &lt;strong&gt;slower page load&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Imagine you have a newsletter subscription form, which pops up once the user clicks on the &lt;strong&gt;Subscribe&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;This feature isn't required to load the page, and we don't even know if the user wants to subscribe or not. &lt;/p&gt;

&lt;p&gt;That being said, why would want the user to wait for a piece of code she might not use.&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;Code Splitting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code Splitting is the process of splitting the code into multiple smaller bundles.&lt;/p&gt;

&lt;p&gt;The main benefit of code splitting (among other things) is to have better control over &lt;em&gt;resource load prioritisation&lt;/em&gt; - loading the critical ones at load time and loading the others later on.&lt;/p&gt;

&lt;p&gt;With code splitting, you'll be able to define what modules should be loaded initially, what modules should be loaded on demand (like when the user clicks on a button), or prefetched when the browser is idle.&lt;/p&gt;

&lt;p&gt;If you’re new to modules, a module is a piece of code stored in a file, which you can import into your file to use the functionality it provides — so you won’t have to make everything from scratch.&lt;/p&gt;

&lt;p&gt;One approach to code splitting is using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports"&gt;dynamic imports&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Modern JavaScript-based apps, we normally import modules statically.&lt;/p&gt;

&lt;p&gt;Let's make it clear with an example.&lt;/p&gt;

&lt;p&gt;Imagine we have a piece of code to track the source of the traffic when the user clicks on a button on a landing page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tracker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.cta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;utmParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUtmParams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// Do some cool stuff&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JavaScript snippet above attaches a click event listener to a button with class &lt;code&gt;cta&lt;/code&gt;. The handler uses a module named &lt;code&gt;tracker&lt;/code&gt; located in the &lt;code&gt;utils&lt;/code&gt; file (statically imported) to track the source of the traffic.&lt;/p&gt;

&lt;p&gt;A statically imported module such as &lt;code&gt;tracker&lt;/code&gt; is included in the main bundle (by your module bundler).&lt;/p&gt;

&lt;p&gt;The problem with the above code is that even if the user never clicks on the button, the code is downloaded and executed in the main thread.&lt;/p&gt;

&lt;p&gt;That's not very optimal, though.&lt;/p&gt;

&lt;p&gt;Let’s rewrite the code with a dynamic approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tracker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUtmParams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, the module is dynamically imported as part of the event handler, when the user actually clicks on the button.&lt;/p&gt;

&lt;p&gt;When your module bundler (I'm using  &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;  for this example) encounters a dynamic import, it bundles the module as a separate file.&lt;/p&gt;

&lt;p&gt;It also generates the necessary code (in the main bundle) to load that file dynamically (and asynchronously) later on - through separate &lt;a href="https://www.decodingweb.dev/books/decoding-web-development/http"&gt;HTTP&lt;/a&gt; requests.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Import() uses promises internally, so you need to make sure the target browser supports JavaScript promises. To support the older web browsers, you can use a promise polyfill as part of the build process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there's still a small problem.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;tracker&lt;/code&gt; is downloaded in response to an interactive event (mouse click in this case), the user might experience a small lag while the module is being downloaded.&lt;/p&gt;

&lt;p&gt;To tackle this issue and make the experience smooth for the user, we can use a  &lt;a href="https://www.smashingmagazine.com/2019/04/optimization-performance-resource-hints/"&gt;resource hint link&lt;/a&gt;, to instruct the web browser to prefetch the module at idle time.&lt;/p&gt;

&lt;p&gt;Again, if you’re using Webpack (directly or indirectly), you can use an &lt;a href="https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules"&gt;inline directive&lt;/a&gt; while declaring your imports, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackPrefetch: true */&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tracker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUtmParams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This instructs Webpack to inject a resource hint link into your document at run time, to prefetch the module at idle time.&lt;/p&gt;

&lt;p&gt;This can be tested in the DevTools:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsBvLzAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5ty1p52gtxg6ra6e202.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsBvLzAF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5ty1p52gtxg6ra6e202.png" alt="Screenshot of webpack preloading the JavaScript file" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This simple trick, when used correctly, can significantly improve your page's performance metrics, such as Time to Interactive (TTI).&lt;/p&gt;

&lt;p&gt;Hope you find this simple trick handy and help you save some time for you and your users.&lt;/p&gt;

&lt;p&gt;If you have comments or questions, or if there's something I've gotten wrong, please let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>performance</category>
      <category>webdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>¿Los mejores sitio web para conseguir trabajo en tecnología?</title>
      <author>Sebastian Daza</author>
      <pubDate>Sun, 09 Jan 2022 19:23:51 +0000</pubDate>
      <link>https://dev.to/sebasttiandaza/los-mejores-sitio-web-para-conseguir-trabajo-en-tecnologia-31lm</link>
      <guid>https://dev.to/sebasttiandaza/los-mejores-sitio-web-para-conseguir-trabajo-en-tecnologia-31lm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#gt-totalmente-remotos"&gt;
  &lt;/a&gt;
  &amp;gt; &lt;strong&gt;Totalmente remotos&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Todos sabemos que para nada es fácil conseguir el puesto soñado que tanto deseamos y más si estamos iniciando o no tienes experiencia, porque todos pasamos por ahí.&lt;/p&gt;

&lt;p&gt;Por eso te quiero recomendar estos grandiosos sitios web con muy buenas ofertas de trabajo, y que realmente me han funcionado. Los destaco por su simple interfaz y por su fácil acceso, con muy buenas ofertas para poder trabajar con empresas extranjeras y proyectos muy ambiciosos, además de que la mayoría son vacantes remotos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lv82hgoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/una-taza-de-javascript.png%3Falt%3Dmedia%26token%3Dba16f12b-b9f0-423a-ac9c-2ba7ff0bb3b6" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lv82hgoO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/una-taza-de-javascript.png%3Falt%3Dmedia%26token%3Dba16f12b-b9f0-423a-ac9c-2ba7ff0bb3b6" alt="Imagen Destacada" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Destaco este sitio web por encima de los demás por la sencilla razón de que recopila muchos sitios web de muchas ofertas para programadores, diseñadores y personas con habilidades en Marketing Digital, UX|UI, etc. Tiene ofertas chulísimas.&lt;/p&gt;

&lt;p&gt;Y es:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-getonboard"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://getonboard.com/"&gt;GetonBoard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99ai_UJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/getonboard.jpg%3Falt%3Dmedia%26token%3Df6ea63fc-a4ef-4e25-9e16-58cb7279b90e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99ai_UJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/getonboard.jpg%3Falt%3Dmedia%26token%3Df6ea63fc-a4ef-4e25-9e16-58cb7279b90e" alt="Imagen de GetonBoard" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Trataré de poner una pequeña descripción para no hacer muy largo el artículo 👌👌:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-we-work-remotely"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://weworkremotely.com/"&gt;We work remotely&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Es una comunidad de trabajo remoto muy grande, es un muy destino para encontrar muy buenas oportunidades con grandes empresas desde Junior hasta Senior alrededor del mundo.&lt;/p&gt;

&lt;p&gt;Otra que me parece bastante buena por simplicidad en el manejo de la plataforma y al momento de llenar el perfil es :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-angellist"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://angel.co/jobs"&gt;AngelList&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDZTNmI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/angel.jpg%3Falt%3Dmedia%26token%3D0c205920-5692-44aa-9f59-aefb320fe6cd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDZTNmI5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/angel.jpg%3Falt%3Dmedia%26token%3D0c205920-5692-44aa-9f59-aefb320fe6cd" alt="Imagend de AngelList" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Principalmente trabajos para Startups de EE.UU, más que necesario el Inglés.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-4day-week"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://4dayweek.io/"&gt;4/day week&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Una plataforma muy interesante, y que no tiene la atención merecida, esta plataforma tiene la peculiaridad de que solo publican ofertas de trabajo que trabajan solamente 4 días a la semana es decir 32 horas, con muy buen sueldo y muy buenas empresas. 😎😎&lt;/p&gt;

&lt;p&gt;Por supuesto muy recomendable saber Inglés. 💯🌐&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlE-z61O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/dayweek.jpg%3Falt%3Dmedia%26token%3Dd229872a-8b29-46b6-a1a3-2e58f7477d5c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlE-z61O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/dayweek.jpg%3Falt%3Dmedia%26token%3Dd229872a-8b29-46b6-a1a3-2e58f7477d5c" alt="Imagen de la plataforma" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La siguiente que viene todo casi la conocemos por además de ayudarnos a encontrar trabajo es una red social, un CV online.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-linkedin"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://linkedin.com/"&gt;LinkedIn&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pienso que esta no hay que hablar mucho, pero es una red social que si o si tienes que estar para conseguir trabajo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gt-workifit"&gt;
  &lt;/a&gt;
  =&amp;gt; &lt;a href="https://workifit.com/"&gt;workifit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Casi finalizando este plataforma me parece  que debes tenerla en cuenta, tiene muy buenas ofertas de Startups y empresas Uruagayas con solamente trabajo remoto, además de tener una aplicación para Android y iOS. 🖥️🖥️💻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtSyrnOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/workifit.jpg%3Falt%3Dmedia%26token%3Da57ad3c5-56b8-4ed1-aa03-f986d358859e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtSyrnOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/emprendeyourlifestyle.appspot.com/o/workifit.jpg%3Falt%3Dmedia%26token%3Da57ad3c5-56b8-4ed1-aa03-f986d358859e" alt="Imagen de la plataforma workifit" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De pronto me dejo algunos que son increíbles. Pero igual dejo aquí unos últimos por si te interesan.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.builtinla.com/"&gt;Builtinla&lt;/a&gt;, trabajo únicamente para empresas de EE.UU.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trabajosentecnologia.com/"&gt;Trabajos en Tecnología&lt;/a&gt;, plataforma que recopila varios sitios web de trabajo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.indeed.com/"&gt;Indeed&lt;/a&gt;, trabajo para empresas en EE,UU y otros países.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Igual realizó otro post de otras plataformas, si crees que falto alguna muy bueno, dejalo en los comentarios.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>career</category>
      <category>spanish</category>
    </item>
    <item>
      <title>30 HTML Interview Question</title>
      <author>Kumar Nitesh</author>
      <pubDate>Sun, 09 Jan 2022 18:56:03 +0000</pubDate>
      <link>https://dev.to/knitesh/30-html-interview-question-3m81</link>
      <guid>https://dev.to/knitesh/30-html-interview-question-3m81</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: All 30 questions are taken from tweet of &lt;a href="https://twitter.com/eugZolotarenko"&gt;@eugZolotarenko&lt;/a&gt;, if you are not following, the please follow him. You can also follow me &lt;a href="https://twitter.com/imknitesh"&gt;@imknitesh&lt;/a&gt;. I really liked all this questions and wanted to have a single place where I can also look up for the answer for the same.&lt;/p&gt;

&lt;p&gt;Question Tweet link: &lt;a href="https://twitter.com/eugZolotarenko/status/1472555078246711301"&gt;https://twitter.com/eugZolotarenko/status/1472555078246711301&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. What is HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML is the standard markup language for creating Web pages. It stands for Hyper Text Markup Language. It describes the structure of a Web page. It tells the browser how to display the content. HTML consist of a series of elements, which you use to enclose, or wrap, different parts of the content to make it appear a certain way, or act a certain way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. What is the purpose of using HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML is the language for describing the structure of Web pages. HTML gives authors the means to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publish online documents with headings, text, tables, lists, photos, etc.&lt;/li&gt;
&lt;li&gt;Retrieve online information via hypertext links, at the click of a button.&lt;/li&gt;
&lt;li&gt;Design forms for conducting transactions with remote services, for use in searching for information, making reservations, ordering products, etc.&lt;/li&gt;
&lt;li&gt;Include spread-sheets, video clips, sound clips, and other applications directly in their documents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With HTML, authors describe the structure of pages using markup. The elements of the language label pieces of content such as “paragraph,” “list,” “table,” and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. What are the advantages and limitations of HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML is widely used.&lt;/li&gt;
&lt;li&gt;Every browser supports HTML Language.&lt;/li&gt;
&lt;li&gt;Easy to learn and use.&lt;/li&gt;
&lt;li&gt;HTML is light weighted and fast to load.&lt;/li&gt;
&lt;li&gt;Do not get to purchase any extra software because it’s by default in every window.&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Loose syntax (although, being too flexible won’t suit standards).&lt;/li&gt;
&lt;li&gt;HTML is easy enough to write&lt;/li&gt;
&lt;li&gt;HTML is that it is easy to code even for novice programmers.&lt;/li&gt;
&lt;li&gt;HTML also allows the utilization of templates, which makes designing a webpage easy.&lt;/li&gt;
&lt;li&gt;Very useful for beginners in the web designing field.&lt;/li&gt;
&lt;li&gt;HTML can be supported to each and every browser, if not supported to all the browsers.&lt;/li&gt;
&lt;li&gt;HTML is built on almost every website, if not all websites.&lt;/li&gt;
&lt;li&gt;HTML is increasingly used for data storage as like XML syntax.&lt;/li&gt;
&lt;li&gt;Free – You need not buy any software.&lt;/li&gt;
&lt;li&gt;HTML is present in every window by default so you not need to buy the software which cost too much.&lt;/li&gt;
&lt;li&gt;HTML has many tag and attributes which can short your line of code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It cannot produce dynamic output alone, since it’s a static language.&lt;/li&gt;
&lt;li&gt;Making the structure of HTML documents becomes tough to understand.&lt;/li&gt;
&lt;li&gt;Errors can be costly.&lt;/li&gt;
&lt;li&gt;It is the time consuming as the time it consume to maintain on the colour scheme of a page and to make lists, tables and forms.&lt;/li&gt;
&lt;li&gt;It can create only static and plain pages so if we’d like dynamic pages then HTML isn’t useful.&lt;/li&gt;
&lt;li&gt;Required to write a lot of code for just creating a simple webpage.&lt;/li&gt;
&lt;li&gt;Security features offered by HTML are limited.&lt;/li&gt;
&lt;li&gt;If we need to write down long code for creating a webpage then it produces some complexity.&lt;/li&gt;
&lt;li&gt;HTML can create only static and plain pages so if we’d like dynamic pages then HTML isn’t useful.&lt;/li&gt;
&lt;li&gt;Security features are not good at HTML.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/advantages-and-disadvanatges-of-html/"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. How can we integrate JS into an HTML document?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can add JavaScript code in an HTML document by employing the dedicated HTML tag &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; that wraps around JavaScript code.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag can be placed in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML or in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section, depending on when you want the JavaScript to load.&lt;/p&gt;

&lt;p&gt;Generally, JavaScript code can go inside of the document &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section in order to keep them contained and out of the main content of your HTML document. However, if your script needs to run at a certain point within a page’s layout — like when using document.write to generate content — you should put it at the point where it should be called, usually within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en-US"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1"&amp;gt;
    &amp;lt;title&amp;gt;Today's Date&amp;lt;/title&amp;gt;
    &amp;lt;script&amp;gt;
        let d = new Date();
        alert("Today's date is " + d);
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. How can we integrate CSS into an HTML document?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can add CSS to an HTML document in three ways&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Inline CSS&lt;/em&gt;: Requires the style attribute placed inside an HTML element.
&lt;code&gt;&amp;lt;element style="CSS property: value"&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Internal CSS&lt;/em&gt;: Requires the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; element placed inside the head section of an HTML file.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;External CSS&lt;/em&gt;: Requires the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element placed inside the head section of an HTML file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. What is a Tag in HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An HTML tag is a piece of markup language used to indicate the beginning and end of an HTML element in an HTML document.&lt;/p&gt;

&lt;p&gt;As part of an HTML element, HTML tags help web browsers convert HTML documents into web pages. For example, the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag is used to organize text content into paragraph elements and the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is used to embed image elements.&lt;/p&gt;

&lt;p&gt;Many tags, though not all, use an opening tag and closing tag to wrap around the content that they are used to modify. Closing tags are denoted with a backslash like this: &lt;code&gt;&amp;lt;/tag_name&amp;gt;&lt;/code&gt;. HTML tags are not visible in the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. What is the difference between HTML Elements and Tags?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Technically, an HTML element is the collection of start tag, its attributes, an end tag and everything in between. On the other hand an HTML tag (either opening or closing) is used to mark the start or end of an element, as you can see in the above illustration.&lt;/p&gt;

&lt;p&gt;However, in common usage the terms HTML element and HTML tag are interchangeable i.e. a tag is an element is a tag. For simplicity's sake of this website, the terms "tag" and "element" are used to mean the same thing — as it will define something on your web page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. What are Attributes and how do you use them?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Attributes are used to provide additional information about a specific element on an HTML page.&lt;/p&gt;

&lt;p&gt;Attributes are specified in the opening tag of an HTML document and are usually specified in a name/value pair. For instance, an attribute called name with the value value would appear like this: name=value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. What semantic elements do you know?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Listed below are few semantic elements&lt;/p&gt;

&lt;p&gt;Header tags &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; defines a header for the document or a section&lt;br&gt;
&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; defines a footer for the document or a section&lt;br&gt;
&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; defines navigation links in the document&lt;br&gt;
&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; defines the main content of a document&lt;br&gt;
&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; defines a section in the document—the spec defines this as “a thematic grouping of content, typically with a heading," so you can think of it as being like a chapter&lt;br&gt;
&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; defines an article in the document&lt;br&gt;
&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; defines content aside from the page content&lt;br&gt;
&lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt; defines the contact information for the author/owner of a document or an article&lt;br&gt;
&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; defines self-contained content, like illustrations, diagrams, photos, code blocks, etc.&lt;/p&gt;

&lt;p&gt;There are many more semantic HTML tags to use as you build a standards-compliant website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Why should we use semantic elements?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Semantic HTML is the correct use of HTML to reinforce the meaning of content on a web page, rather than merely define its appearance. Semantically correct HTML helps search engines, screen readers, and other user devices determine the significance and context of web content.&lt;br&gt;
Perhaps the greatest advantage that semantic markup offers is that it allows search engines and crawlers to better understand the content they're scraping. While there is no evidence that the use of this markup directly affect page rank, it can make your results stand out more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. What do you know about HTML Entities?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity"&gt;From MDN&lt;/a&gt;&lt;br&gt;
An HTML entity is a piece of text ("string") that begins with an ampersand (&amp;amp;) and ends with a semicolon (;) . Entities are frequently used to display reserved characters (which would otherwise be interpreted as HTML code), and invisible characters (like non-breaking spaces). You can also use them in place of other characters that are difficult to type with a standard keyboard.&lt;/p&gt;

&lt;p&gt;For e.g., &lt;code&gt;&amp;amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;amp;&lt;/code&gt;&lt;br&gt;
&lt;a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references"&gt;Official Character List&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. What HTML formatting tags do you know?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt; - Bold text
&amp;lt;strong&amp;gt; - Important text
&amp;lt;i&amp;gt; - Italic text
&amp;lt;em&amp;gt; - Emphasized text
&amp;lt;mark&amp;gt; - Marked text
&amp;lt;small&amp;gt; - Smaller text
&amp;lt;del&amp;gt; - Deleted text
&amp;lt;ins&amp;gt; - Inserted text
&amp;lt;s&amp;gt; - Incorrect text
&amp;lt;sub&amp;gt; - Subscript text
&amp;lt;sup&amp;gt; - Superscript text
&amp;lt;h1...h6&amp;gt; - Header

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.w3docs.com/learn-html/html-tags-for-text-formatting.html"&gt;More html formatting tags&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. When to include JS code in the head and when in the body?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags are run when the browser encounters them when loading the page. The &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; can't contain content for the page, it can only contain meta-information (titles, descriptions, etc), styles and scripts. Therefore if you place a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, you are ensuring that it is run before the browser has started loading the content of the page (which must go in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you want to manipulate the content of the page, you need to make sure your script appears after the content you are manipulating. This is why put scripts at the end of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The best practice is to put JavaScript &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags just before the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag rather than in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your HTML. The reason for this is that HTML loads from top to bottom. The head loads first, then the body, and then everything inside the body.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;tag usually makes the html page loading slower. This is because the html parser is loaded first and as soon as it encounters &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; it has to load the JavaScript interpreter first and then after the script is loaded it has to return back to the html parsing. This wastes some time.&lt;/p&gt;

&lt;p&gt;Instead putting it after the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag first lets the parser to load the html content first and then start loading the script. Thus here there is only one switching b/w the parser and interpreter. Thus, this approach is better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. What Inline elements in HTML do you know?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements#list_of_inline_elements"&gt;List of inline element&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a&amp;gt;
&amp;lt;img&amp;gt;
&amp;lt;span&amp;gt;
&amp;lt;button&amp;gt;
&amp;lt;img&amp;gt;
&amp;lt;input&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;15. What block elements in HTML do you know?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#elements"&gt;List of block elements&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
&amp;lt;article&amp;gt;
&amp;lt;aside&amp;gt;
&amp;lt;footer&amp;gt;
&amp;lt;form&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;16. What is the difference between block and inline elements?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements"&gt;From MDN&lt;/a&gt;: The basic conceptual differences between inline and block-level elements:&lt;/p&gt;

&lt;p&gt;Content model&lt;br&gt;
Generally, inline elements may contain only data and other inline elements. You can't put block elements inside inline elements.&lt;/p&gt;

&lt;p&gt;Formatting&lt;br&gt;
By default, inline elements do not force a new line to begin in the document flow. Block elements, on the other hand, typically cause a line break to occur (although, as usual, this can be changed using CSS).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout"&gt;Further Reading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;17. What is the difference between figure tag and img tag?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.&lt;/p&gt;

&lt;p&gt;While the content of the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element is related to the main flow, its position is independent of the main flow, and if removed it should not affect the flow of the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"pic_trulli.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Trulli"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width:100%"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Fig.1 - Trulli, Puglia, Italy.&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag is used to embed an image in an HTML page.&lt;/p&gt;

&lt;p&gt;Images are not technically inserted into a web page; images are linked to web pages. The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag creates a holding space for the referenced image.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag has two required attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;src - Specifies the path to the image&lt;/li&gt;
&lt;li&gt;alt - Specifies an alternate text for the image, if the image for some reason cannot be displayed
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img_girl.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Girl in a jacket"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"500"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.pluralsight.com/blog/creative-professional/whats-difference-image-figure-tags-html5"&gt;Read Pluralsight blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/difference-between-figure-img-tags-in-html/#:~:text=1.-,The%20figure%20tag%20is%20used%20to%20semantically%20organize%20the%20content,tag%20can%20only%20insert%20image."&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18. Why do we need “alt” in the img tag?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The alt attribute specifies an alternate text for an image, if the image cannot be displayed. The alt attribute provides alternative information for an image if a user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img src="img_girl.jpg" alt="Girl in a jacket"&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;19. What input types do you know?&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input type="button"&amp;gt;
&amp;lt;input type="checkbox"&amp;gt;
&amp;lt;input type="color"&amp;gt;
&amp;lt;input type="date"&amp;gt;
&amp;lt;input type="datetime-local"&amp;gt;
&amp;lt;input type="email"&amp;gt;
&amp;lt;input type="file"&amp;gt;
&amp;lt;input type="hidden"&amp;gt;
&amp;lt;input type="image"&amp;gt;
&amp;lt;input type="month"&amp;gt;
&amp;lt;input type="number"&amp;gt;
&amp;lt;input type="password"&amp;gt;
&amp;lt;input type="radio"&amp;gt;
&amp;lt;input type="range"&amp;gt;
&amp;lt;input type="reset"&amp;gt;
&amp;lt;input type="search"&amp;gt;
&amp;lt;input type="submit"&amp;gt;
&amp;lt;input type="tel"&amp;gt;
&amp;lt;input type="text"&amp;gt;
&amp;lt;input type="time"&amp;gt;
&amp;lt;input type="url"&amp;gt;
&amp;lt;input type="week"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; default input type is text&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_form_input_types.asp"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20. What ways of optimizing website assets loading do you know?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make fewer HTTP requests&lt;/li&gt;
&lt;li&gt;Use a Content Delivery Network&lt;/li&gt;
&lt;li&gt;Add an Expires header&lt;/li&gt;
&lt;li&gt;Gzip components&lt;/li&gt;
&lt;li&gt;Put CSS at the top&lt;/li&gt;
&lt;li&gt;Move scripts to the bottom&lt;/li&gt;
&lt;li&gt;Avoid CSS expressions&lt;/li&gt;
&lt;li&gt;Make JavaScript and CSS external&lt;/li&gt;
&lt;li&gt;Reduce DNS lookups&lt;/li&gt;
&lt;li&gt;Minify JavaScript&lt;/li&gt;
&lt;li&gt;Avoid redirects&lt;/li&gt;
&lt;li&gt;Remove duplicate scripts&lt;/li&gt;
&lt;li&gt;Configure ETags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;21. What is the difference between “class” and “id”?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/the-difference-between-id-and-class/"&gt;Read on CSS-Tricks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;22. What type of lists do you know?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ordered lists &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Unordered lists &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Description lists &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_lists.asp"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;23. How to create a nested webpage in HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nested webpages cane be created using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; tag&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/how-to-create-a-nested-webpage-in-html/"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;24. What is an image map?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_images_imagemap.asp"&gt;From W3School&lt;/a&gt;&lt;br&gt;
The HTML &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more &lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"workplace.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Workplace"&lt;/span&gt; &lt;span class="na"&gt;usemap=&lt;/span&gt;&lt;span class="s"&gt;"#workmap"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;map&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"workmap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;area&lt;/span&gt;
    &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;"rect"&lt;/span&gt;
    &lt;span class="na"&gt;coords=&lt;/span&gt;&lt;span class="s"&gt;"34,44,270,350"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Computer"&lt;/span&gt;
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"computer.htm"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;area&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;"rect"&lt;/span&gt; &lt;span class="na"&gt;coords=&lt;/span&gt;&lt;span class="s"&gt;"290,172,333,250"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Phone"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"phone.htm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;area&lt;/span&gt; &lt;span class="na"&gt;shape=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt; &lt;span class="na"&gt;coords=&lt;/span&gt;&lt;span class="s"&gt;"337,300,44"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Coffee"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"coffee.htm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/map&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;25. What is the use of a span tag?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span"&gt;From MDN&lt;/a&gt; The &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; is very much like a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element, but &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is a block-level element whereas a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; is an inline element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;26. What is the difference between HTML and XHTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML is short for Hypertext Markup Language. It is used to create websites and web applications. Let’s break it down, so we understand the name better:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hypertext:&lt;/strong&gt; Hypertext refers to the “text wrapped within a text.” It is very similar to hyperlinks and contains an underlying text that, when clicked, redirects to a new webpage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Markup language:&lt;/strong&gt; A markup language is not necessarily a programming language. Instead, it is used to apply formatting and layout to a simple text document. This leads to more interactive and dynamic text content.&lt;/p&gt;

&lt;p&gt;What is XHTML?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XHTML stands for Extensible Hypertext Markup Language&lt;/li&gt;
&lt;li&gt;XHTML is almost similar to HTML but it is stricter than HTML&lt;/li&gt;
&lt;li&gt;It is swift, accurate, easily maintained, convertible, and formatted&lt;/li&gt;
&lt;li&gt;All major browsers support XHTML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_xhtml.asp"&gt;Read on W3School&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;27. What are logical and physical tags in HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Physical tags:&lt;/strong&gt; Physical tags are used to indicate that how specific characters are to be formatted or indicated using HTML tags&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;sup&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;Superscript&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;usually&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;showing&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;subscript&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;alternate&lt;/span&gt; &lt;span class="nx"&gt;baseline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;Italic&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;define&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="nx"&gt;meaning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Big&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;increase&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;big&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;HTML&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;small&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;defines&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;writing&lt;/span&gt; &lt;span class="nx"&gt;copyright&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Bold&lt;/span&gt; &lt;span class="nx"&gt;increases&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;importance&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;because&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="nx"&gt;covert&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;bold&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;underline&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Teletype&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;gives&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strike&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;editing&lt;/span&gt; &lt;span class="nx"&gt;markup&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;tells&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;ignore&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="nx"&gt;passage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Logical Tags:&lt;/strong&gt; Logical tags are used to tell the browser what kind of text is written inside the tags. Logical tags are also known as Structural tags because they specify the structure of the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;abbr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Defines&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;abbreviation&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;acronym&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Defines&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;acronym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Contact&lt;/span&gt; &lt;span class="nx"&gt;information&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Defines&lt;/span&gt; &lt;span class="nx"&gt;citation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;displays&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;italic&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Defines&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;piece&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;computer&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;blockquote&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Defines&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="nx"&gt;quotation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/difference-between-physical-and-logical-tags/"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;28. What are forms and how to create forms in HTML?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML Form is a document which stores information of a user on a web server using interactive controls. An HTML form contains different kind of information such as username, password, contact number, email id etc.&lt;br&gt;
The elements used in an HTML form are check box, input box, radio buttons, submit buttons etc. Using these elements the information of an user is submitted on a web server.&lt;br&gt;
The form tag is used to create an HTML form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  Username:&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  Email id:&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email_id"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;29. What is the usage of a novalidate attribute for the form tag?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The novalidate attribute in HTML is used to signify that the form won’t get validated on submit. It is a Boolean attribute and useful if you want the user to save the progress of form filing. If the form validation is disabled, the user can easily save the form and continue &amp;amp; submit the form later. While continuing, the user does not have to first validate all the entries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/action_page.php"&lt;/span&gt; &lt;span class="na"&gt;novalidate&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Enter your email:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;30. What is SVG? Can we use it inside an HTML document?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-svg"&gt;
  &lt;/a&gt;
  What is SVG?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SVG stands for Scalable Vector Graphics&lt;/li&gt;
&lt;li&gt;SVG is used to define vector-based graphics for the Web&lt;/li&gt;
&lt;li&gt;SVG defines the graphics in XML format&lt;/li&gt;
&lt;li&gt;Every element and every attribute in SVG files can be animated&lt;/li&gt;
&lt;li&gt;SVG is a W3C recommendation&lt;/li&gt;
&lt;li&gt;SVG integrates with other W3C standards such as the DOM and XSL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes SVG can be use inside HTML documents. e.g.,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My first SVG&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;circle&lt;/span&gt;
        &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;
        &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;
        &lt;span class="na"&gt;r=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt;
        &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;
        &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt;
        &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;
      &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#svg-code-explanation"&gt;
  &lt;/a&gt;
  SVG Code explanation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;An SVG image begins with an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;The width and height attributes of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element define the width and height of the SVG image&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; element is used to draw a circle&lt;/li&gt;
&lt;li&gt;The cx and cy attributes define the x and y coordinates of the center of the circle. If cx and cy are not set, the circle's center is set to (0, 0)&lt;/li&gt;
&lt;li&gt;The r attribute defines the radius of the circle&lt;/li&gt;
&lt;li&gt;The stroke and stroke-width attributes control how the outline of a shape appears. We set the outline of the circle to a 4px green "border"
The fill attribute refers to the color inside the circle. We set the fill color to yellow&lt;/li&gt;
&lt;li&gt;The closing &lt;code&gt;&amp;lt;/svg&amp;gt;&lt;/code&gt; tag closes the SVG image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Since SVG is written in XML, all elements must be properly closed!&lt;/p&gt;

&lt;p&gt;Huge thanks to Eugene, for creating this questions. Answers has been sourced from well known websites like &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN&lt;/a&gt;, &lt;a href="https://www.w3schools.com/"&gt;w3schools&lt;/a&gt; &amp;amp; &lt;a href="https://www.geeksforgeeks.org/"&gt;GeeksForGeeks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CoverPhoto by &lt;a href="https://unsplash.com/@jacksonsophat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jackson So&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/html?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>What Scope says about Variable in JavaScript?</title>
      <author>Lawanu Borthakur</author>
      <pubDate>Sun, 09 Jan 2022 18:33:19 +0000</pubDate>
      <link>https://dev.to/lawanu/what-scope-says-about-variable-in-javascript-1jo6</link>
      <guid>https://dev.to/lawanu/what-scope-says-about-variable-in-javascript-1jo6</guid>
      <description>&lt;p&gt;Scope is one of the fundamental concept that every JavaScript developer should know to become a better JavaScript Developer. &lt;br&gt;
So, in the article I will explain about it and how it work in JavaScript.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-scope"&gt;
  &lt;/a&gt;
  What is Scope?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Scope determines where a variable is visible in JavaScript .In JavaScript functions and objects are also variable.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-many-types-of-scopes-are-there"&gt;
  &lt;/a&gt;
  How many types of scopes are there?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Local Scope&lt;/li&gt;
&lt;li&gt;Global Scope&lt;/li&gt;
&lt;li&gt;Block Scope&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Three main points to keep in mind&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A variable is said to be in local scope when it is defined inside a function.&lt;/li&gt;
&lt;li&gt;A variable is said to be in global scope when it is defined outside a function.&lt;/li&gt;
&lt;li&gt;A new scope is created each time a function is invoked.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#global-scope"&gt;
  &lt;/a&gt;
  Global Scope
&lt;/h2&gt;

&lt;p&gt;When we first write JavaScript on a JavaScript file, you are already in Global scope. There is only one global scope in the entire JavaScript document. Variables are in the Global scope when defined outside of a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of the variables within the Global scope can be accessed and changed in any other scopes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inside Function before change -&amp;gt; name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inside Function after change-&amp;gt; name: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Outside function-&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;Inside Function before change -&amp;gt; name: Mike&lt;br&gt;
Inside Function after change-&amp;gt; name:  Harry&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#local-scope"&gt;
  &lt;/a&gt;
  Local Scope
&lt;/h2&gt;

&lt;p&gt;Local Scope is also known as Function scope. Variables defined within a function is in local scope. This means that variables with the same name can be used for different functions. This is because those variables are bound to their respective functions, each with different scope, and is not accessible to the other functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inside Function Teacher()-&amp;gt; name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Output: John&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Inside Function Student()-&amp;gt; name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: Harry&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Outside Function-&amp;gt; name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Output: Mike&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;Inside Function Teacher()-&amp;gt; name:  John&lt;br&gt;
Inside Function Student()-&amp;gt; name: Harry&lt;br&gt;
Outside Function-&amp;gt; name:  Mike&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#block-scope"&gt;
  &lt;/a&gt;
  Block Scope
&lt;/h2&gt;

&lt;p&gt;Block Scope determines the visibility of variables in a block of code. If a variable is declared inside a block can only be accessed inside the block and not outside the block then that variable is said to be block scope.&lt;/p&gt;

&lt;p&gt;Think of the "block" of code as if statement, loop, while loop, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;var&lt;/strong&gt; keyword does not support block scope. In the year 2015 , ES6 introduced two important keyword &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; which support block scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Harry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;===Inside Block===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: Mike&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: John&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: Harry&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;===Outside Block===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: Mike&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: ReferenceError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Output: ReferenceError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;code&gt;===Inside Block===&lt;br&gt;
Mike&lt;br&gt;
John&lt;br&gt;
Harry&lt;br&gt;
===Outside Block===&lt;br&gt;
Mike&lt;br&gt;
Reference error&lt;br&gt;
Reference error&lt;br&gt;
&lt;/code&gt;&lt;br&gt;
In the above example you can see all the variable are accessible inside the block but only the variable with &lt;strong&gt;var&lt;/strong&gt; keyword is accessible outside the block and the variables with keyword &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; shows error.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
