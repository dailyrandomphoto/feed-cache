<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EHS software to shelter workplace from COVID-19 pandemic</title>
      <author>ASK EHS</author>
      <pubDate>Mon, 12 Jul 2021 09:59:30 +0000</pubDate>
      <link>https://dev.to/askehs/ehs-software-to-shelter-workplace-from-covid-19-pandemic-2d3b</link>
      <guid>https://dev.to/askehs/ehs-software-to-shelter-workplace-from-covid-19-pandemic-2d3b</guid>
      <description>&lt;p&gt;If asked, how we measure safety commitment, visibility would be an appropriate answer, and it becomes real when everyone develops an intense focus on critical safety processes. That take planning, questions increase when the intensity is aroused – which prompts a response.&lt;/p&gt;

&lt;p&gt;As health and safety professionals, one can have vast health and safety programs spanning multiple divisions, locations and work functions across hundreds, if not thousands, of employees. Tailoring the requirements to the situation and needs of each employee enables to shrink the situational requirements to each worker in a ‘just in time’ and ‘just as needed’ scenario.&lt;/p&gt;

&lt;p&gt;EHS software &lt;/p&gt;

&lt;p&gt;Talking about &lt;a href="https://www.ask-ehs.com/software/safety.html"&gt;EHS software&lt;/a&gt; is putting safety in the palm of the team’s hands that enhances employee engagement, consistency and accountability for paperless real-time EHS program.&lt;/p&gt;

&lt;p&gt;Plus, with the spread of &lt;a href="https://www.ask-ehs.com/blog/covid-safety-implementation-support/"&gt;COVID-19&lt;/a&gt;, pandemic and contingency planning has received renewed focus. Leveraging EHS software keeps the business continuity planning and effort more streamlined and less daunting.&lt;/p&gt;

&lt;p&gt;Visible management and commitment is undoubtedly the necessary cornerstone to building a successful safety culture – is also the mark that distinguishes a culture. EHS software aids in erasing the smudge that lies in the workforce health and safety planning and strengthen the response to the COVID-19 pandemic.&lt;/p&gt;

&lt;p&gt;Detecting exposures and their control&lt;br&gt;
For many companies, letting employees work remotely is an option – but not for all.&lt;/p&gt;

&lt;p&gt;For those who lie in the latter category, tracking and monitoring their workforce health is critical to maintain operations in the pandemic.&lt;/p&gt;

&lt;p&gt;EHS software is an automated solution to this challenge – software setup can send in health check assessments directly to the employees so that they complete their questionnaires quickly and easily.  Automatically capturing the response by the software and high-risk employees can be directed to self-isolate, identified for frequent monitoring and directed to receive testing. Further, the patterns related to the spread and the transmission rates can be traced – that can be further used to control the spread of COVID-19.&lt;/p&gt;

&lt;p&gt;Necessary sanitization and hygiene processes&lt;br&gt;
It becomes important for industries to review their existing cleaning processes.&lt;/p&gt;

&lt;p&gt;Understand things such as – how frequently are surfaces disinfected and sanitized? Answering those things help limit the spread of COVID-19 in the workplace.&lt;/p&gt;

&lt;p&gt;EHS software automates the tracking and reoccurring of cleaning and maintenance tasks – that allows companies to easily monitor those processes. Offering the analytic and reporting features helps increase the accountability of the necessary tasks, such as the PPE use, which lessens the spread of COVID-19.&lt;/p&gt;

&lt;p&gt;Further corrections help reduce the exposure of COVID-19 in the workplace – this is the flexibility provided by a software solution as it identifies, analyzes and takes corrective actions.&lt;/p&gt;

&lt;p&gt;Managing employee absences&lt;br&gt;
Absence tracking becomes important for individuals who show symptoms of COVID-19 or the ones who have been exposed to the virus – EHS software tracks the employee absences and enable them to return to their work. That associates employee absences to potential workplace exposure that becomes necessary to manage costs related to worker compensation claims.&lt;/p&gt;

&lt;p&gt;It helps in reduction of the time companies spend managing work-related illnesses as it auto-populates the forms required by federal or local government agencies. And quickly helps to ensure compliance with appropriate regulations—leaving more time to focus on managing the impact of COVID-19.&lt;/p&gt;

&lt;p&gt;EHS software &lt;/p&gt;

&lt;p&gt;Managing contractors&lt;br&gt;
One can take in steps to limit the potential spread of COVID-19.&lt;/p&gt;

&lt;p&gt;It begins by evaluating the ways companies incorporate practical health screenings in the contractor pre-qualification process.&lt;/p&gt;

&lt;p&gt;EHSQ software can help automate the contractor pre-qualification process by leveraging digital solutions to communicate the necessary data to assess the risk posed by contractors before they begin work on a project. Companies use the software to assign questionnaires to contractors who complete the questionnaire using their mobile devices, and allow companies to conduct health status checks and identify higher-risk contractors.&lt;/p&gt;

&lt;p&gt;An EHS software solution allows contractors in using their mobile devices to “sign-in” when they arrive on the job. Companies then track and validate individuals on-site and act quickly if an individual isn’t on the list of cleared workers.&lt;/p&gt;

&lt;p&gt;While companies should be taking steps now to manage the impacts of COVID-19 on their employees and their operations, it’s also important to think beyond the immediate pandemic and consider a company’s long-term needs and future risks. Other virus outbreaks have spread throughout the world in the past and any future outbreak could present similar risks as COVID-19. Though vaccination is in continuation, one still needs to understand that present risks cannot be undermined.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Managing Psychological Health at the workplace – ISO 45003</title>
      <author>ASK EHS</author>
      <pubDate>Mon, 12 Jul 2021 09:48:51 +0000</pubDate>
      <link>https://dev.to/askehs/managing-psychological-health-at-the-workplace-iso-45003-a7e</link>
      <guid>https://dev.to/askehs/managing-psychological-health-at-the-workplace-iso-45003-a7e</guid>
      <description>&lt;p&gt;ISO 45003: A driving force for the effective management of Psychological Health &amp;amp; Safety within the workplace&lt;br&gt;
Data from International Labour Organization (ILO) indicates that:&lt;/p&gt;

&lt;p&gt;There are over 2.78 million deaths globally per year as a result of occupational accidents&lt;br&gt;
Over 374 million work-related non-fatal injuries/illnesses occur per year, leading to extended absence from work&lt;br&gt;
The economic burden of current OH&amp;amp;S (Occupational Health and Safety) performance is estimated to be 3.94% of global Gross Domestic Product (GDP)&lt;br&gt;
ISO 45003 is the first global standard giving practical guidance on managing psychological health within the workplace. It provides guidance on the management of psychosocial risk within the occupational health and safety (OH&amp;amp;S) management system to enable organizations to prevent work-related injury and ill health of their workers and other interested parties and to promote well-being and engagement.&lt;/p&gt;

&lt;p&gt;It is applicable to organizations of all sizes and in all sectors for the development, implementation, maintenance, and continual improvement of safe and healthy workplaces.&lt;/p&gt;

&lt;p&gt;It includes –&lt;/p&gt;

&lt;p&gt;Information on how to recognize the psychosocial hazards that can affect workers, such as those that arise from Working-from-home&lt;br&gt;
Offers examples of effective, often simple,  actions that can be taken to manage these and improve employees wellbeing&lt;br&gt;
ISO 45003 is written to help organizations using an occupational health and safety management system based on ISO 45001 Occupational Health and Safety standard and also  be useful for organizations that have not  implemented an OHS(Occupational Health and Safety) management system yet. Organizations can start using the standard now to help safeguard and assist workers from mental ill-health surfacing within the workplace.&lt;/p&gt;

&lt;p&gt;The Focus is on work-related stress: the response people may have when presented with work demands and pressures that are not matched to their knowledge and abilities and which challenge their ability to cope.&lt;/p&gt;

&lt;p&gt;Well-being at work is defined as an individual’s ability to work productively and creatively, to engage in strong and positive relationships, fulfillment of personal and social goals, contribution to the community, and a sense of purpose.&lt;/p&gt;

&lt;p&gt;WHO (World Health Organization) defines mental health as a state of well-being in which every individual realizes his or her potential, can address the normal stresses of life,  work productively and fruitfully, and contribute to her or his community.&lt;/p&gt;

&lt;p&gt;Home, Community &amp;amp; Societyworker well being &lt;br&gt;
Worker well-being is an integrative concept that characterizes the quality of life concerning an individual’s health and work-related environmental, organizational, and psychosocial factors.&lt;/p&gt;

&lt;p&gt;ISO 45003 provides guidance on:&lt;/p&gt;

&lt;p&gt;How to identify the conditions, circumstances, and workplace demands that have the potential to hinder the psychological health and well-being of workers&lt;br&gt;
How to identify primary risk factors and assess them to determine the changes required to improve the working environment and&lt;br&gt;
How to identify and control work-related hazards and manage psychosocial risk within an OH&amp;amp;S management system&lt;/p&gt;

&lt;p&gt;What is stress&lt;/p&gt;

&lt;p&gt;Psychological Health&lt;/p&gt;

&lt;p&gt;What is Psychological (mental) Health?&lt;/p&gt;

&lt;p&gt;Our mental health influences how we think and feel about ourselves and others and how we comprehend events.&lt;/p&gt;

&lt;p&gt;Managing Psychological Health&lt;/p&gt;

&lt;p&gt;What is Stress?&lt;/p&gt;

&lt;p&gt;It’s our body’s natural defense to keep us safe. All sorts of things can happen to our body, having a physical, emotional, and mental impact.&lt;/p&gt;

&lt;p&gt;Symptoms of too much stress (excess pressure)&lt;br&gt;
Why do organizations struggle to manage psychological health?&lt;/p&gt;

&lt;p&gt;Organizations don’t understand the issues&lt;br&gt;
Organizations don’t know what actions to take&lt;br&gt;
Organizations need to understand how to manage&lt;br&gt;
ISO 45003 recognizes that psychological health and safety are not always fully addressed within OH&amp;amp;S management.&lt;/p&gt;

&lt;p&gt;ISO 45003 Structure&lt;br&gt;
ISO 45003&lt;/p&gt;

&lt;p&gt;Key Psychosocial risks during the COVID-19 pandemicManaging Psychological Health &lt;br&gt;
Tips for Managing these RisksTips for Managing these Risks&lt;br&gt;
Importance of ISO 45003&lt;/p&gt;

&lt;p&gt;Workplace well-being – fulfillment of physical, mental, social, and cognitive needs and expectations associated with their work&lt;br&gt;
Promoting well-being by managing Psychosocial Risk&lt;br&gt;
Why ISO 45003 is good for your Organization?&lt;/p&gt;

&lt;p&gt;Besides helping you to build and promote a positive working environment, a framework for managing psychological health and safety can help to improve your organizational resilience and enhance performance and productivity.&lt;/p&gt;

&lt;p&gt;Managing Psychological Health Benefits of ISO 45003 for your organization&lt;/p&gt;

&lt;p&gt;Ask-ehs Psychological Health&lt;/p&gt;

&lt;p&gt;Our Training Program will provide guidance with respect to managing psychosocial risk within Occupational Health and Safety (OH&amp;amp;S) management system to enable organizations to prevent work-related injury and ill health of their workers and other interested parties, and to promote well-being and engagement (in line with ISO 45003).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ask-ehs.com/training/customize-on-site-training.html"&gt;Connect with&lt;/a&gt; us to provide you support in managing &lt;a href="https://www.ask-ehs.com/training/book-your-training.html"&gt;Psychological Health&lt;/a&gt; at your workplace and sensitize the employees for their well-being as they work from home during the pandemic or work at sites and from the office as well.&lt;/p&gt;

</description>
      <category>psychology</category>
      <category>workplace</category>
      <category>healthydebate</category>
      <category>healthsoftware</category>
    </item>
    <item>
      <title>C++ Learning Materials - Books</title>
      <author>Elvis Oric</author>
      <pubDate>Mon, 12 Jul 2021 09:28:06 +0000</pubDate>
      <link>https://dev.to/elvisoric/c-learning-materials-books-fpd</link>
      <guid>https://dev.to/elvisoric/c-learning-materials-books-fpd</guid>
      <description>&lt;p&gt;The books on the list are the ones I have read and would recommend to others. For some books, reviews from goodreads are included because I completely agree with them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-if-you-do-not-know-c-start-with-c-primer-5th-edition"&gt;
  &lt;/a&gt;
  1. If you do not know C++, start with &lt;a href="https://www.amazon.com/Primer-5th-Stanley-B-Lippman/dp/0321714113"&gt;C++ Primer&lt;/a&gt; (5th edition)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InZ7Zv6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41Gd9xIXrUL._SX381_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InZ7Zv6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41Gd9xIXrUL._SX381_BO1%2C204%2C203%2C200_.jpg" alt="C++ Primer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From one &lt;a href="https://www.goodreads.com/review/show/147787300?book_show_action=true&amp;amp;from_review_page=1"&gt;goodreads review&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“A really good C++ book for beginners. I mean, it probably won't work as the very first book on programming, but if you have some programming background and just want to learn C++, this should work really well. The whole thing is structured very nicely, and in the rare case when you have some questions, they are typically answered on the next page.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-if-you-are-familiar-with-c-but-want-to-refresh-your-knowledge-use-a-tour-of-c-written-by-bjarne-stroustrup-the-creator-of-c"&gt;
  &lt;/a&gt;
  2. If you are familiar with C++ but want to refresh your knowledge, use &lt;a href="https://www.amazon.com/Tour-2nd-Depth-Bjarne-Stroustrup/dp/0134997832"&gt;A Tour of C++&lt;/a&gt; written by Bjarne Stroustrup, the creator of C++.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLUoCuTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41k5ZZRFnPL._SX392_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLUoCuTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41k5ZZRFnPL._SX392_BO1%2C204%2C203%2C200_.jpg" alt="A Tour Of C++"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From one &lt;a href="https://www.goodreads.com/review/show/897905076?book_show_action=true&amp;amp;from_review_page=1"&gt;goodreads review&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;”Given that I've programmed in C++ before this book was perfect for me as a re-introduction.&lt;br&gt;
It doesn't really explain things in depths, but it is rather just a very quick tour of the features. Perfect for someone who's an experienced programmer and has done some low level programming, but not very useful for beginners I'm afraid. Still I'd recommend reading this, if nothing it servers as a good motivational text to keep learning more.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-if-you-want-to-learn-about-every-detail-of-c-with-c11-support-use-the-c-programming-language-book"&gt;
  &lt;/a&gt;
  3. If you want to learn about every detail of C++ with C++11 support, use &lt;a href="https://www.amazon.com/C-Programming-Language-4th/dp/0321563840"&gt;The C++ Programming Language&lt;/a&gt; book
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WslBctGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51Z-XJXiQnL._SX396_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WslBctGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51Z-XJXiQnL._SX396_BO1%2C204%2C203%2C200_.jpg" alt="C++ Programming Language"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-if-you-want-to-start-practicing-test-driven-development-tdd-with-c-start-with-modern-c-programming-with-testdriven-development-code-better-sleep-better"&gt;
  &lt;/a&gt;
  4. If you want to start practicing Test Driven Development (TDD) with C++, start with &lt;a href="https://www.amazon.com/Modern-Programming-Test-Driven-Development-Better/dp/1937785483/ref=sr_1_1?dchild=1&amp;amp;keywords=c%2B%2B+tdd&amp;amp;qid=1626029147&amp;amp;s=books&amp;amp;sr=1-1"&gt;Modern C++ Programming with Test-Driven Development: Code Better, Sleep Better&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SyZ029-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41ciWNq4jPL._SX415_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyZ029-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41ciWNq4jPL._SX415_BO1%2C204%2C203%2C200_.jpg" alt="Modern C++ Programming With TDD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-if-you-want-to-use-c11-and-c14-features-and-to-understand-them-start-with-effective-modern-c-42-specific-ways-to-improve-your-use-of-c11-and-c14"&gt;
  &lt;/a&gt;
  5. If you want to use C++11 and C++14 features and to understand them, start with &lt;a href="https://www.amazon.com/Effective-Modern-Specific-Ways-Improve/dp/1491903996/ref=sr_1_5?dchild=1&amp;amp;keywords=c%2B%2B+11+c%2B%2B14&amp;amp;qid=1626029291&amp;amp;s=books&amp;amp;sr=1-5"&gt;Effective Modern C++: 42 Specific Ways to Improve Your Use of C++11 and C++14&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqqBpBY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51qUGMia07L._SX379_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqqBpBY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/51qUGMia07L._SX379_BO1%2C204%2C203%2C200_.jpg" alt="Effective Modern C++"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-if-you-want-to-write-multithreaded-code-using-c-use-c-concurrency-in-action-practical-multithreading"&gt;
  &lt;/a&gt;
  6. If you want to write multithreaded code using C++, use &lt;a href="https://www.amazon.com/C-Concurrency-Action-Anthony-Williams/dp/1617294691/ref=sr_1_1?crid=3L4QJRR8X7N0K&amp;amp;dchild=1&amp;amp;keywords=c%2B%2B+concurrency+in+action&amp;amp;qid=1626029456&amp;amp;sprefix=c%2B%2B+concur%2Caps%2C285&amp;amp;sr=8-1"&gt;C++ Concurrency in Action: Practical Multithreading&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cdn_MlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41kA1avGCYL._SX397_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cdn_MlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41kA1avGCYL._SX397_BO1%2C204%2C203%2C200_.jpg" alt="C++ Concurrency in Action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-for-math-theory-and-generic-programming-use-elements-of-programming-and-from-mathematics-to-generic-programming"&gt;
  &lt;/a&gt;
  7. For Math theory and generic programming use &lt;a href="https://www.amazon.com/Elements-Programming-Alexander-Stepanov/dp/032163537X"&gt;Elements of programming&lt;/a&gt; and &lt;a href="https://www.amazon.com/Mathematics-Generic-Programming-Alexander-Stepanov/dp/0321942043/ref=sr_1_1?crid=3O1ALVEBYUTFB&amp;amp;dchild=1&amp;amp;keywords=from+mathematics+to+generic+programming&amp;amp;qid=1626029728&amp;amp;s=books&amp;amp;sprefix=from+mathe%2Cstripbooks-intl-ship%2C255&amp;amp;sr=1-1"&gt;From Mathematics to Generic Programming&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5i2NvHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/lrg/9780/3219/9780321942043.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5i2NvHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1w7fb2mkkr3kw.cloudfront.net/assets/images/book/lrg/9780/3219/9780321942043.jpg" alt="From Mathematics To Generic Programming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o97OtD2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41L34398I2L._SX373_BO1%2C204%2C203%2C200_.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o97OtD2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images-na.ssl-images-amazon.com/images/I/41L34398I2L._SX373_BO1%2C204%2C203%2C200_.jpg" alt="Elements Of Programming"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>books</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Started with SvelteKit: 10 Tips</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 12 Jul 2021 09:02:46 +0000</pubDate>
      <link>https://dev.to/askrodney/getting-started-with-sveltekit-10-tips-336m</link>
      <guid>https://dev.to/askrodney/getting-started-with-sveltekit-10-tips-336m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#svelte-and-sveltekit"&gt;
  &lt;/a&gt;
  ❤️ Svelte and SvelteKit
&lt;/h2&gt;

&lt;p&gt;It is pretty unlikely that you haven't heard of Svelte, with all the hype that has surrounded it for at least a year now! The Svelte philosophy is one of simplicity. That is clearer nowhere else than in the code for a Svelte site. Unlike for React and some other libraries, it compiles to plain Java Script. User browsers do not have to interpret Svelte code when they load a page; the page will already be in a language they understand: JavaScript. As a result, Svelte sites are fast by default! You will find this post useful if you are getting started with SvelteKit. Included are 10 tips to get you building fast apps quicker.&lt;/p&gt;

&lt;p&gt;Compilation to JavaScript aside, there are a lot of similarities between Svelte and React, flattening the learning curve for anyone coming from React. In fact, as it pulls some of the best developer experience forte's from Vue and Angular as well, the barrier to entry is quite low. Want to see what all the buzz is about? Read on to find out how to learn Svelte and also some key tips for getting started with SvelteKit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-get-started-with-svelte"&gt;
  &lt;/a&gt;
  👨🏽‍🎓 How do you get started with Svelte?
&lt;/h2&gt;

&lt;p&gt;Svelte have written an &lt;a href="https://svelte.dev/tutorial/basics"&gt;excellent set of tutorials&lt;/a&gt;. These cover quite a bit of ground and take some time to complete. Depending on how you like to learn, I would run with the tutorials and until you have covered the basics and then jump in to building your own toy apps and taking it from there. You will probably need to dip into the tutorials again to understand features such as &lt;a href="https://svelte.dev/tutorial/writable-stores"&gt;Stores&lt;/a&gt; and Special Elements, which come later on. However, by no means do you have to complete the tutorials to write your first app.&lt;/p&gt;

&lt;p&gt;There is also &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started"&gt;a very good MDN tutorial where you build a Svelte todo app&lt;/a&gt;. I did this tutorial in parallel with the official Svelte one so learning didn't become too dry. You probably already have React and HTML5/JavaScript todo apps (from when you were learning those... the todo app is a favourite of tutorial writers 😀), but you can always customise the tutorial to make an issue tracker or &lt;a href="https://bulletjournal.com/"&gt;Bullet Journal instead&lt;/a&gt;. If you want yet more ideas, &lt;a href="https://50reactprojects.com/"&gt;try Colby Fayock's e-book of 50 React Projects&lt;/a&gt; (using Svelte instead of React).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-create-a-skeleton-sveltekit-app"&gt;
  &lt;/a&gt;
  🧱 How do you create a Skeleton SvelteKit app?
&lt;/h2&gt;

&lt;p&gt;Before looking at how to create a SvelteKit app, let's quickly look at what SvelteKit is. Essentially SvelteKit is a tool for taking your Svelte code and converting it into a node app. Svelte is the underlying language and SvelteKit is a tool for building sites with it. SvelteKit brings server-side rendering (SSR) and code-splitting to your app. The Svelte/SvelteKit relationship is much like that between React and Gatsby or React and Next.js. With that out of the way, let's look at how to get stared with creating a SvelteKit app.&lt;/p&gt;

&lt;p&gt;To get going you will need to have node installed on your machine . If you are already running Next.js or Gatsby, you probably have everything you need. Now, run the following commands. For now use the @next version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init svelte@next my-sveltekit-app &amp;amp;&amp;amp; cd $_
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose the &lt;code&gt;Skeleton project&lt;/code&gt; option for a quick start. It literally only takes about 40 seconds to download everything you need and start up your local server. Next, open up your browser and go to &lt;a href="http://localhost:3000"&gt;&lt;/a&gt;&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. If you already have a process running on TCP port &lt;code&gt;3000&lt;/code&gt;, see the tip below on &lt;a href="#changingSvelteKitDevServerPort"&gt;changing the default SvelteKit dev server port&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="whatsInside"&gt;Getting Started with SvelteKit: What's Inside?&lt;/h3&gt;

&lt;p&gt;We'll have a quick run through what files and folders we have and some that it's worth creating. Skip onto the next section if you are already familiar with the structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── README.md
├── jsconfig.json
├── node_modules
│   ├── ...
│   └── ...
├── package-lock.json
├── package.json
├── src
│   ├── app.html
│   ├── global.d.ts
│   ├── lib
│   └── routes
│       └── index.svelte
├── static
│   └── favicon.ico
└── svelte.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;README.md&lt;/code&gt; file contains some tips on getting going, handy to keep while you are still getting used to SvelteKit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jsconfig.json&lt;/code&gt; defines some paths which the compiler needs. If this is your first SvelteKit project, I would keep files in their default locations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;: remember you will find the npm script definitions here so you can check back on the build, dev and preview commands if you have as bad a memory as I do. We'll look at some scripts you might want to modify in &lt;code&gt;package.json&lt;/code&gt; further down.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/app.html&lt;/code&gt; is an HTML template, which SvelteKit injects your code into. You can set some accessibility properties here, or alternatively hang on and you will see &lt;a href="#accessibility"&gt;a way to set meta tags programmatically&lt;/a&gt;, further down.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/global.d.ts&lt;/code&gt;: if you're a TypeScript person, you already know what this is for!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/lib&lt;/code&gt;: create this directory and use it to store your own components, utility functions etc. SvelteKit has a nice way of importing files from here, so you don't need to use &lt;code&gt;../../../../file-i-want.js&lt;/code&gt; notation, which can become burdensome when refactoring code. We go into this later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/routes&lt;/code&gt;: SvelteKit creates app pages based on the file and folder structure here. You will find this familiar is you are already have Next.js or Gatsby experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;static&lt;/code&gt;: by default this directory contains a Svelte favicon, replace that with your own favicon.  Also use this directory for logos and other assets which you do not need SvelteKit to generate at compile time (such as PGP public keys) in here.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;svelte.config.js&lt;/code&gt; does what is days on the tin! We will drill into a couple of options below.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="10SvleteKitTips"&gt;10 Tips for Getting Started with Svelte&lt;/h2&gt;

&lt;p&gt;Both SvelteKit dev and preview servers run on port &lt;code&gt;3000&lt;/code&gt; locally by default. There's a few different services and apps which also use that port so you might find you need to switch. To save having to remember command line switches, I would just update your &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        "name": "my-sveltekit-app",
        "version": "0.0.1",
        "scripts": {
                "dev": "svelte-kit dev --port 4000",
                "build": "svelte-kit build &amp;amp;&amp;amp; cp netlify/functions/backblaze.js functions/.",
                "preview": "svelte-kit preview --port 4000",
                "lint": "prettier --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore .",
                "format": "prettier --write --plugin-search-dir=. ."
        },
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we change the default port to &lt;code&gt;4000&lt;/code&gt; for both the dev server and the preview server.&lt;/p&gt;

&lt;h3 id="svelteKitTooling"&gt;2: Getting Started with SvelteKit: SvelteKit Tooling&lt;/h3&gt;

&lt;p&gt;If you are using VSCode, it is worth installing Svelte for VSCode. This will give you syntax highlighting and completion options (intellisense). This is something you can just set and forget. The extension is the official one, developed by Svelte.&lt;/p&gt;

&lt;h3 id="svelteKitTooling"&gt;3: SvelteKit Accessibility&lt;/h3&gt;

&lt;p&gt;To make your app accessible, it is important that the HTML document includes a title and the language. The &lt;code&gt;lang&lt;/code&gt; attribute is helpful for Screen Readers to choose the best pronunciation. Although you can set the &lt;code&gt;lang&lt;/code&gt; attribute in &lt;code&gt;app.html&lt;/code&gt; you might consider setting it programmatically (if you do this delete the lang attribute in &lt;code&gt;app.html&lt;/code&gt;). There are a few options, varying in complexity. Let's see the simplest below. You might, instead, choose to use a Svelte Layout (explained further down) in a more complex project. If your project will have more than a couple of pages, it is worth creating a Svelte SEO component in which you can include meta tags for search engines and social media sites to ingest, alongside these accessibility tags. However for a small site you can just do something like this on each page (changing the title to match the page):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  // omit script element if it is not needed on your page
&amp;lt;/script&amp;gt;
&amp;lt;svelte:head&amp;gt;
  &amp;lt;title&amp;gt;my-sveltekit-app | Home Page&amp;lt;/title&amp;gt;
        &amp;lt;html lang="en-GB" /&amp;gt;
&amp;lt;/svelte:head&amp;gt;
&amp;lt;h1&amp;gt;Welcome to my SvelteKit site&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;It is not too difficult to get started with SvelteKit...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&lt;code&gt;&amp;lt;svelte:head&amp;gt;&lt;/code&gt;&lt;/code&gt; element is one of the &lt;a href="https://svelte.dev/tutorial/svelte-self"&gt;special elements in Svelte, you can learn more about them in the Svelte tutorial&lt;/a&gt;. For more &lt;a href="https://www.w3.org/International/articles/language-tags/"&gt;language codes see the W3C Internationalisation Guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="svelteKitLayouts"&gt;4: Getting Started with SvelteKit: SvelteKit Layouts&lt;/h3&gt;

&lt;p&gt;You will probably already be familiar with layouts if you have previously built a Gatsby site. Basically they save you having manually to add repeated content, like headers and footers to every single page they need to appear on. In SvelteKit, if you create a file with the path &lt;code&gt;src/routes/__layout.svelte&lt;/code&gt;, this is automatically interpreted as the default layout for your app. In that file you define your layout (e.g. header and footer) and just need to include a &lt;code&gt;&amp;lt;slot /&amp;gt;&lt;/code&gt; element. This is where the content from whichever page is using the layout goes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;
        &amp;lt;nav&amp;gt;
                &amp;lt;a href="/."&amp;gt;Home&amp;lt;/a&amp;gt;
                &amp;lt;a href="/contact"&amp;gt;Contact&amp;lt;/a&amp;gt;
        &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
  &amp;lt;slot /&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;footer&amp;gt;
        &amp;lt;p&amp;gt;
                A project by
                &amp;lt;a aria-label="Open the Rodney Lab site" href="https://rodneylab.com/" target="_blank" rel="nofollow noopener noreferrer"
                        &amp;gt;RODNEY LAB&amp;lt;/a
                &amp;gt;.
        &amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all you need. Save the file and navigate to the home page. You will see you now have a header and footer. For clarity, you don't need to change code in any pages using the layout. They will pick it up automatically. It is easy to &lt;a href="https://kit.svelte.dev/docs#layouts-resets"&gt;tell SvelteKit not to use a Layout for particular pages&lt;/a&gt;, though we won't get into that here.&lt;/p&gt;

&lt;p&gt;Remember to use semantic HTML (e.g. &lt;code&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;&lt;/code&gt; etc.) where possible to keep the app accessible.&lt;/p&gt;

&lt;h3 id="sveltekit404"&gt;5: Getting Started with SvelteKit: SvelteKit 404 Page&lt;/h3&gt;

&lt;p&gt;Similar to the default layout, include a default 404 page but creating a file with the path &lt;code&gt;src/routes/__error.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script context="module"&amp;gt;
        export function load({ error, status }) {
                return {
                        props: {
                                title: \`\${status}: \${error.message}\`
                        }
                };
        }
&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
        export let title;
&amp;lt;/script&amp;gt;

&amp;lt;svelte:head&amp;gt;
        &amp;lt;title&amp;gt;{title}&amp;lt;/title&amp;gt;
&amp;lt;/svelte:head&amp;gt;
&amp;lt;h1&amp;gt;{title}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're half way through the tips now. Hope you have learned a couple of handy bits already. There's more on SEO and environment variables coming up.&lt;/p&gt;

&lt;h3 id="sveltekitPrivacy"&gt;6: Privacy in SvelteKit&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UggjjJdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o71j7pn80t10i41xve4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UggjjJdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o71j7pn80t10i41xve4.png" alt="Getting Started wth SvelteKit: Privacy - Disable FLoC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kudos to SvelteKit for switching off Google FLoC by default. It is admirable that they take this privacy protection step. If you need to switch on FLoC&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {`
/** @type {import('@sveltejs/kit').Config} */
const config = {
        kit: {
    floc: true, // override default if you need to
                // hydrate the &amp;lt;div id="svelte"&amp;gt; element in src/app.html
                target: '#svelte'
        }
};

export default config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3 id="sveltekitEnvironmentVariables"&gt;7: Environment Variables in SvelteKit&lt;/h3&gt;

&lt;p&gt;Environment variables provide a convenient way to store API keys and other private information which we do not want to keep in our repo.  There will be some environment variables which you want the user's browser (client-side) to have access to.  You might have an API site key which is needed on the client side to identify your site to a service.  Beyond client environment variables you will possibly have secret environment variables which only the server has access to.  API secret keys, used to authenticate your site to a service, are included in this category.   SvelteKit can handle both types easily.  For secret, server side API keys &lt;a href="https://scottspence.com/2021/03/06/22/sveltekit-env-secrets/" rel="nofollow noopener noreferrer"&gt;Scott Spence has written a fantastic article&lt;/a&gt; explaining the process.  We will focus on client side secrets here.&lt;/p&gt;

&lt;p&gt;SvelteKit has the easiest way for handling client side environment variables I have seen. There is no need to install any external packages. You have to be careful importing environment variable into files which have a style element though. If you do this you will probably get an error message in the terminal. There is a workaround which is not too much bother to code up.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In general to use environment variables in SvelteKit.  First define them in a &lt;code&gt;.env&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;VITE_SECRET_SAUCE_RECIPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"onions,tomatoes,oregano,specialIngredient"&lt;/span&gt;
&lt;span class="nv"&gt;VITE_SUPER_SECRET_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$ecret&lt;/span&gt;&lt;span class="s2"&gt;@p1Key
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;note the variables are prefixed &lt;code&gt;VITE_&lt;/code&gt; (you will omit this prefix for server side secrets).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use the variables in a file, just import them like so:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const secretSauceRecipe = import.meta.env.VITE_SECRET_SAUCE_RECIPE
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you needed to use an environment variable in the rendered content (for example a public email address stored as an environment variable), you can use and reference it in exactly the same way.  Be careful with what you output to the browser though!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you get cryptic errors in the terminal, read on for some solutions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="crypticErrorMessages"&gt;Cryptic Error Messages&lt;/h4&gt;

&lt;p&gt;There's a couple of error messages you might see in the terminal when using environment variables. I had this one several times, when ESLint was trying to be helpful and imported something which I did not need. This threw the error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Cannot &lt;span class="nb"&gt;split &lt;/span&gt;a chunk that has already been edited &lt;span class="o"&gt;(&lt;/span&gt;0:7 – &lt;span class="s2"&gt;"import.meta"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is one more cryptic error I got a few times. If you are using environment variables and get an error in the terminal, something like &lt;code&gt;[rollup-plugin-dynamic-import-variables] Unexpected token&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;rollup-plugin-dynamic-import-variables] Unexpected token &lt;span class="o"&gt;(&lt;/span&gt;6:627&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you possibly have a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag in a page which also uses environment variables.&lt;br&gt;
There is a workaround which involves a small refactor. Basically we will import all of the&lt;br&gt;
environment variables into a library file and reference them from there wherever we need them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;secretSauceRecipe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SECRET_SAUCE_RECIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;superSecretAPIKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SUPER_SECRET_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can import the environment variables and use them in pages with style tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        import environmentVariables from '$lib/constants/environmentVariables';
        const { superSecretAPIKey } = environmentVariables;

        async function handleClick() {
          const options = {
                        method: 'POST',
                        body: JSON.stringify({ secret: superSecretAPIKey })
                };
        await fetch('/.netlify/functions/secret-sauce-server', options);
        }
&amp;lt;/script&amp;gt;
&amp;lt;span&amp;gt;
        &amp;lt;button on:click={handleClick}&amp;gt;
                Order Secret Sauce
        &amp;lt;/button&amp;gt;
&amp;lt;/span&amp;gt;
&amp;lt;style&amp;gt;
        button {
                padding: 1em;
                font-size: 1em;
        }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the convenient notation in the second line above. We don't have to use a relative path back to the&lt;br&gt;
constants folder. More on this later.&lt;/p&gt;

&lt;h3 id="favicon"&gt;8: Where do you put your Favicon in SvelteKit?&lt;/h3&gt;

&lt;p&gt;By default, the assets folder for static files is &lt;code&gt;static/&lt;/code&gt; at the project root. Put any files which SvelteKit does not need to process in here (e.g. small logo files and public PGP keys). You will need to create the folder if you selected a skeleton project when you initialised the app.&lt;/p&gt;

&lt;h3 id="usingComponents"&gt;9: Getting Started with SvelteKit: Using your Components in Pages&lt;/h3&gt;

&lt;p&gt;For convenience, I create the &lt;code&gt;src/lib/components&lt;/code&gt; folder for SvelteKit for placing components in. As previously mentioned, another of the developer experience tweaks in SvelteKit saves you having to work out and then type out the relative path from the page you are editing to the components folder. The &lt;code&gt;src/lib&lt;/code&gt; folder is accessible throughout the project, just using &lt;code&gt;$lib&lt;/code&gt;. Here is an example for importing an &lt;code&gt;SEO&lt;/code&gt; component with path &lt;code&gt;src/lib/components/SEO.svelte&lt;/code&gt;, used on the home page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  import SEO from '$lib/components/SEO/index.svelte';

  let title = 'my-svelte-kit-app | Home';
  let metadescription = 'my-svelte-kit-app - my first ever SvelteKit app';
&amp;lt;/script&amp;gt;
&amp;lt;SEO {title} {metadescription} /&amp;gt;
&amp;lt;h1&amp;gt;Welcome to my SvelteKit site&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;It is not too difficult to get started with SvelteKit...&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note in line &lt;code&gt;7&lt;/code&gt; we use a shortcut syntax (another developer experience perk in Svelte). This is equivalent to writing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;SEO title={title} metadescription={metadescription} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3 id="svelteKitSEO"&gt;10: Getting Started with SvelteKit: SvelteKit SEO&lt;/h3&gt;

&lt;p&gt;Finally, our last tip on getting started with SvelteKit. Like for Gatsby, adding SEO meta tags in SvelteKit is quite easy. In the case of SvelteKit, following the Svelte philosophy of simplicity, we have already seen that you don't even need to install any extra packages to update the HTML head section. We'll look at some example code so exactly you can see how to do it.&lt;/p&gt;

&lt;p&gt;For a decent sized app, you would probably want to create separate SEO components for Twitter, &lt;a&gt;OpenGraph&lt;/a&gt; (used principally for Facebook but also for What's App and others) and Schema.org (used mainly by search engines to serve rich results). Here I have a principal SEO file which imports the other mentioned SEO components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        import OpenGraph from './OpenGraph.svelte';
        import SchemaOrg from './SchemaOrg.svelte';
        import Twitter from './Twitter.svelte';
        import website from '$lib/config/website.js';
        import { VERTICAL_LINE_ENTITY } from '$lib/constants/entities.js';
        export let title;
        export let metadescription;
        const { author, ogLanguage, siteLanguage, siteTitle, siteTitleAlt } = website;
        const siteUrl = import.meta.env.VITE_SITE_URL;
        const pageTitle = \`\${siteTitle} \${VERTICAL_LINE_ENTITY} \${title}\`;
        const openGraphProps = {
                facebookAppId: import.meta.env.VITE_FACEBOOK_APP_ID,
                image,
                metadescription,
                ogLanguage,
                pageTitle,
                siteTitle,
                siteUrl
        };
        const schemaOrgProps = {
                author,
                siteLanguage,
                siteTitle,
                siteTitleAlt,
                siteUrl
        };
        const twitterProps = {
                author,
                twitterUsername: import.meta.env.VITE_TWITTER_USERNAME,
                metadescription,
                pageTitle,
                siteUrl
        };
&amp;lt;/script&amp;gt;

&amp;lt;svelte:head&amp;gt;
        &amp;lt;title&amp;gt;{pageTitle}&amp;lt;/title&amp;gt;
        &amp;lt;meta name="description" content={metadescription} /&amp;gt;
        &amp;lt;meta
                name="robots"
                content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1"
        /&amp;gt;
        &amp;lt;html lang={siteLanguage} /&amp;gt;
        &amp;lt;SchemaOrg {...schemaOrgProps} /&amp;gt;
        &amp;lt;OpenGraph {...openGraphProps} /&amp;gt;
        &amp;lt;Twitter {...twitterProps} /&amp;gt;
&amp;lt;/svelte:head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As mentioned earlier, to add elements to the output HTML head, we just wrap them in a &lt;code&gt;&lt;code&gt;&amp;lt;svelte:head&amp;gt;&lt;/code&gt;&lt;/code&gt; tag. Here we have the accessibility &lt;code&gt;lang&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; elements defined within our SEO component. As well as those, we have a &lt;code&gt;robots&lt;/code&gt; tag which tells search engines we are happy for them to index the page. The Twitter and OpenGraph components work in a similar way so we won't look at those here. Let me know if you would like me to write a separate post on SEO for Social Media in SvelteKit, or more generally — it's a little too much detail to go into here. I could include a complete example, showing how to add and test social images and generate rich search engine results if you would find that helpful.&lt;/p&gt;

&lt;p&gt;For a &lt;a href="https://rodneylab.com/sveltekit-seo/"&gt;deeper dive into SvelteKit SEO, take a look at this post dedicated to Search Engine Optimisation in SvelteKit&lt;/a&gt;.&lt;/p&gt;


&lt;h4 id="schemaOrg"&gt;Schema.org

&lt;/h4&gt;
&lt;p&gt;Because of the way in which we need to define Schema.org in the HTML document, we need to tweak the code a little. This is partly so that Svelte compiles it as intended but also to stop ESLint breaking the code (albeit with good intentions). Schema.org metadata is included as a script of type &lt;code&gt;application/ld+json&lt;/code&gt;. We create this tag in a few stages. Take a look through the code then see the explanation below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
        import hash from 'object-hash';
        export let author;
        export let siteLanguage;
        export let siteTitle;
        export let siteTitleAlt;
        export let siteUrl;
        const entityHash = hash({ author }, { algorithm: 'md5' });
        const schemaOrgWebsite = {
                '@type': 'WebSite',
                '@id': \`\${siteUrl}/#website\`,
                url: siteUrl,
                name: siteTitle,
                description: siteTitleAlt,
                publisher: {
                        '@id': \`\${siteUrl}/#/schema/person/\${entityHash}\`
                },
                potentialAction: [
                        {
                                '@type': 'SearchAction',
                                target: \`\${siteUrl}/?s={query}\`,
                                query: 'required'
                        }
                ],
                inLanguage: siteLanguage
        };
        const schemaOrgArray = [schemaOrgWebsite];
        const schemaOrgObject = {
                '@context': 'https://schema.org',
                '@graph': schemaOrgArray
        };
        let jsonLdString = JSON.stringify(schemaOrgObject);
        let jsonLdScript = \`
                &amp;lt;script type="application/ld+json"&amp;gt;
                        \${jsonLdString}
                \${'&amp;lt;'}/script&amp;gt;
        \`;
&amp;lt;/script&amp;gt;

&amp;lt;svelte:head&amp;gt;
        {@html jsonLdScript}
&amp;lt;/svelte:head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start at the bottom and work our way up. In lines &lt;code&gt;40–42&lt;/code&gt; we add the script to the HTML head. The &lt;code&gt;@html&lt;/code&gt; in line &lt;code&gt;41&lt;/code&gt; is important for the correct compilation of our svelte code. In lines &lt;code&gt;33–37&lt;/code&gt; we define the script tag which we inject into the DOM at end of the file. The funkiness in line &lt;code&gt;36&lt;/code&gt;, is the workaround I mentioned to prevent ESLint messing up the code. What we need to output is simply &lt;code&gt;&lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/code&gt;, but to stop ESLint in its tracks, we wrap the opening angular bracket using the interpolated template variable syntax.&lt;/p&gt;

&lt;p&gt;The rest of the file defines the Schema.org data as a JSON object. I have trimmed this down, for simplicity. Normally you will include further fields in the object, such as a breadcrumb list and details on the publishing entity. Again let me know if you would value a post on this with a full example. SchemaOrg is quite good for SEO, as an example, if you include the right meta, your page will appear like this, above all other results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---31RVU6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s6pnzgt2rqtymlis18u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---31RVU6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s6pnzgt2rqtymlis18u.png" alt="Getting Started wth SvelteKit: SEO"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="allGoodThings"&gt;All Good Things Must Come to an End!&lt;/h3&gt;

&lt;p&gt;That's all for now on getting started with SvelteKit.  If you have found this post useful, you should also look at the follow-up post on using Netlify to host your SvelteKit site. Did you learn at least one thing here? Is there anything I should have added. Or, even anything that I did include but was so obvious that I shouldn't have bothered? Please let me know either way. I also want to know how you are finding SvelteKit. Which libraries or frameworks are you more used to? Do you use Netlify? Let me know if you would find a post on using Netlify with SvelteKit and the Netlify adapter. Finally, what have you built so far in SvelteKit?&lt;/p&gt;

&lt;h2 id="feedback"&gt;Feedback&lt;/h2&gt;

&lt;p&gt;How did you find this guide on getting started with SvelteKit? It's a little different to other posts I have written. Normally I like to work on a single project and build out a complete working example. The idea is to see how everything fits together. Once that is clear it is easier to take components out and use them in your own projects. How did you find this format? Would you like to see some complete examples using SvelteKit? Keen to hear your views and also learn where your pain points with learning SvelteKit are. If you have found this post useful and can afford even a small contribution, please consider supporting me through Buy me a Coffee.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. You can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see further ways to get in touch with Rodney Lab. I post regularly on Gatsby JS as well as SvelteKit. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TypeScript Interfaces: A Quick Guide to Help You Get Started</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 12 Jul 2021 08:22:24 +0000</pubDate>
      <link>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</link>
      <guid>https://dev.to/alexdevero/typescript-interfaces-a-quick-guide-to-help-you-get-started-55p6</guid>
      <description>&lt;p&gt;TypeScript brings many useful improvements to JavaScript language. One of them is static typing system that can help you write type safe code. Interfaces are part of this typing system. This tutorial will help you understand what TypeScript interfaces are and how to use them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-objects-and-black-swans"&gt;
  &lt;/a&gt;
  JavaScript, objects and black swans
&lt;/h2&gt;

&lt;p&gt;In JavaScript, and elsewhere as well, objects are one of the most popular ways to group related data together and pass them around. The problem is, there is no way in JavaScript to specify how certain object should look like. There is no way to say what properties should object have or what their values should be.&lt;/p&gt;

&lt;p&gt;This makes it easy to create code that is prone to errors. For example, to create an object and forget to add some property. Then, when it comes the time to finally use that object, you code will fail and program will crash. Reason? Your program expected specific property that is that is missing.&lt;/p&gt;

&lt;p&gt;The problem might not be a missing property. It might be that the type of a value of some property is different from what your program expected. The result is often the same. Code fails and program crashes. One may argue that this is not likely to happen. Well, earthquakes and floods are also not likely to happen.&lt;/p&gt;

&lt;p&gt;The thing is, nobody cares about probability when these events, these &lt;a href="https://en.wikipedia.org/wiki/Black_Swan_theory"&gt;black swans&lt;/a&gt;, occur. Your users will not care that wrong type or missing property is not likely to happen when the app they are using crashes. If only there was a way to avoid this. Maybe, TypeScript can help you here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-interfaces-made-simple"&gt;
  &lt;/a&gt;
  TypeScript interfaces made simple
&lt;/h2&gt;

&lt;p&gt;The main feature of TypeScript is its powerful type system. This type system allows you to quickly specify &lt;a href="https://blog.alexdevero.com/javascript-basics-data-types-pt1/"&gt;primitive data types&lt;/a&gt; for variables. These simple types are only one part of this type systems. TypeScript also allows you to do this with objects. With the help of TypeScript, you can define shape of any objects.&lt;/p&gt;

&lt;p&gt;Shape of an object specifies what properties a given object contains. This also includes their types, what types should values of these properties be. In TypeScript, you can specify this shape via interface. TypeScript interfaces are abstract types. Interfaces tell the compiler two important things.&lt;/p&gt;

&lt;p&gt;First, interfaces tell what properties a given object could have or must have. This means that when some property is optional, TypeScript will know that these properties are not required and will not require you to define them. Second, interfaces specify the types of these properties, types of their values.&lt;/p&gt;

&lt;p&gt;With this information, TypeScript can warn you when you accidentally define some object property and use a wrong type. TypeScript will know what type is expected to be used for each object property. If you use different type, TypeScript will tell you about the mismatch, where it happened and also how to fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-interface"&gt;
  &lt;/a&gt;
  Creating an interface
&lt;/h2&gt;

&lt;p&gt;When you want to create a new interface, you do it by using the &lt;code&gt;interface&lt;/code&gt; keyword. This keyword is followed by the name of the interface add curly brackets. These brackets contain the shape of an object, its properties and types. You specify these properties and types as key:value pairs.&lt;/p&gt;

&lt;p&gt;This is very similar to creating new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer"&gt;object literal&lt;/a&gt;. However, there are some differences. First, there is no equal sign between the name of the interface and curly brackets. Second, those key:value pairs are separated by semicolons. Below are examples of simple TypeScript interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an empty interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EmptyObject&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Cat:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;hairColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface Car:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;manufacturer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfWheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Cat&lt;/code&gt; interface defines an object that has five properties: &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;age&lt;/code&gt;, &lt;code&gt;hairColor&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. All these properties are required. Values of &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;hairColor&lt;/code&gt; must be strings. The rest must be numbers. The &lt;code&gt;Car&lt;/code&gt; interface defines an object that has four properties: &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;manufacturer&lt;/code&gt;, &lt;code&gt;numberOfWheels&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These properties are also all required. Value of &lt;code&gt;numberOfWheels&lt;/code&gt; must be a number. The rest must be strings. Lastly, the &lt;code&gt;User&lt;/code&gt; interface defines an object that has again five properties: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;isActive&lt;/code&gt; and &lt;code&gt;role&lt;/code&gt;. Values of the first three must be strings.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;isActive&lt;/code&gt; property must be a boolean, either true or false. The value of &lt;code&gt;role&lt;/code&gt; is more concrete. It says that the value must be one of these three strings: &lt;code&gt;'admin'&lt;/code&gt;, &lt;code&gt;'user'&lt;/code&gt; or &lt;code&gt;'guest'&lt;/code&gt;. If you use any other string, TypeScript will warn you that the value you use is wrong, even though the type is the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-interfaces"&gt;
  &lt;/a&gt;
  Implicit interfaces
&lt;/h3&gt;

&lt;p&gt;TypeScript interfaces don't have to be created only by you, explicitly. TypeScript will also create interfaces on its own when you define an object. TypeScript will look at the properties of that object and values of these properties. Then, it will infer specific types using type inference.&lt;/p&gt;

&lt;p&gt;The result will be implicit interface that matches the object you've just created. This also applies if you create empty object, without any properties. TypeScript will simply create an empty interface. This can later cause troubles when you try to add properties because TypeScript will expect the object to be, and remain, empty.&lt;/p&gt;

&lt;p&gt;A simple way to avoid this is by defining interfaces by yourself, explicitly. If you create an empty object also create an interface for it. This interface will not specify the current shape of the object, but the shape of it in the future. This will tell TypeScript which properties and types to expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-interfaces"&gt;
  &lt;/a&gt;
  Using interfaces
&lt;/h2&gt;

&lt;p&gt;When you create an interface you also have to tell TypeScript for which object you intend to use it. Doing so is easy. When you assign an object to a variable you can specify its interface by adding colons and the name of the interface between the variable name and equal sign.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use interface to annotate an object:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userJoe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some_secret_password123645&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe@user.co&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also applies elsewhere. If you want to use an interface for an object used as a function parameter you use the same approach. You specify the parameter, then add colons, and then you specify the interface.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;logUserData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a function with "user" parameter&lt;/span&gt;
&lt;span class="c1"&gt;// and annotate the "user" parameter with "User" interface.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-interfaces-with-classes"&gt;
  &lt;/a&gt;
  Implementing interfaces with classes
&lt;/h2&gt;

&lt;p&gt;TypeScript also allows you to use interface with &lt;a href="https://blog.alexdevero.com/get-started-with-javascript-classes/"&gt;JavaScript classes&lt;/a&gt;. With classes, though, the implementation is slightly different. You still specify the interface after the name, class name in this case. However, you don't put colons between the name of the class and the interface.&lt;/p&gt;

&lt;p&gt;What you do instead is basically replacing those colons with &lt;code&gt;implements&lt;/code&gt; keyword. This will tell TypeScript that a given class should use an interface that follows after this keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface Person:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define some class properties&lt;/span&gt;
  &lt;span class="c1"&gt;// of type string and number:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Define class method that returns a string:&lt;/span&gt;
  &lt;span class="nl"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate class "Female" with "Person" interface:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define required public properties:&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="c1"&gt;// Create constructor and assign existing properties:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Define required class method:&lt;/span&gt;
  &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-optional-properties"&gt;
  &lt;/a&gt;
  Specifying optional properties
&lt;/h2&gt;

&lt;p&gt;Until now, all examples we were using used only required properties. This will work for many cases. However, it can happen that you may not need some properties in a given object every time. One thing you can do is to create a new interface, without optional properties. Then, you can switch between these interfaces as you need.&lt;/p&gt;

&lt;p&gt;This will work, but it will also lead to duplicates and more code to maintain. There is another thing you can do. You can take the original interface and mark the optional properties as optional. You achieve this by placing a question mark (&lt;code&gt;?&lt;/code&gt;) between the property name and the colons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface with optional properties:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be optional&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bill&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doherty&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stevens&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work because "middleName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is not required:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;William&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work because "lastName"&lt;/span&gt;
&lt;span class="c1"&gt;// property is required but missing:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;O&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;Conor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Property 'lastName' is missing in type '{ firstName: string; middleName: string; }' but required in type 'Person'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#specifying-readonly-properties"&gt;
  &lt;/a&gt;
  Specifying read-only properties
&lt;/h2&gt;

&lt;p&gt;When you create an object you may want to prevent some properties from being changed. You can specify this intent also via TypeScript interfaces. You achieve this by placing the &lt;code&gt;readonly&lt;/code&gt; keyword before the property name. This will tell TypeScript that the property that follows is a read-only property.&lt;/p&gt;

&lt;p&gt;If you use the interface to annotate some object, you will be able to set the value for the read-only property only during initialization. If you try to change the property value later, TypeScript compiler will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface with read-only property:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= This property will be read-only&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate object "userFrank" with "User" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123456782&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankie@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "username" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Try to change value of "email" property:&lt;/span&gt;
&lt;span class="nx"&gt;userFrank&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;frankman@frank.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Cannot assign to 'email' because it is a read-only property.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interfaces-for-functions"&gt;
  &lt;/a&gt;
  Interfaces for functions
&lt;/h2&gt;

&lt;p&gt;Objects, including classes, are not the only things that can use interfaces. You can also use TypeScript interfaces to annotate functions. You can do this by giving the interface a call signature. This means that you will specify only the parameter list and return type of the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for multiply function:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MultiplyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Note:&lt;/span&gt;
&lt;span class="c1"&gt;// Thanks to MultiplyFunc interface TypeScript&lt;/span&gt;
&lt;span class="c1"&gt;// will know that "a" and "b" in "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// are numbers so you don't have to type them explicitly.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing about interfaces and functions. Name of parameters in an interface doesn't have to match the name of parameters in the actual function. You can use one name for interface parameter and another for the function declaration. TypeScript will connect parameters with their types correctly using their order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Specify only parameters and return type:&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate the "multiply" function&lt;/span&gt;
&lt;span class="c1"&gt;// with "MultiplyFunc" interface:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`a is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, b is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, c is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TypeScript will correctly infer "a" to be number,&lt;/span&gt;
&lt;span class="c1"&gt;// "b" to be string and "c" to be boolean.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extending-interfaces"&gt;
  &lt;/a&gt;
  Extending interfaces
&lt;/h2&gt;

&lt;p&gt;One useful thing is that interfaces allow extending, just like JavaScript classes. Let's say you have an existing interface. You also have an object, but this object contains more properties than the interface specifies. One thing you can do is to change the interface to fit this object.&lt;/p&gt;

&lt;p&gt;The problem is that this will influence all objects using that interface. Another thing is creating new interface, duplicating the old one and adding new properties. This will bloat your code with duplicates. Luckily, there is the third option. You can create new interface and extend it with the original.&lt;/p&gt;

&lt;p&gt;This way, the new interface will inherit all properties defined in the original interface. Best part? You will not have to copy a single line of code. You can extend interface by using the &lt;code&gt;extends&lt;/code&gt; keyword. This keyword allows you to extend one interface with just one interface as well as with multiple.&lt;/p&gt;

&lt;p&gt;When you want to extend interface with multiple interfaces you separate them with commas. The &lt;code&gt;extends&lt;/code&gt; keyword goes between the first interface, the one you are extending, and the second, the one you are extending with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Male" interface that extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Male {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Female" interface that also extends "Person" interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Female {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Boy" interface that extends "Person" and "Male" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Boy {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Male';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create "Girl" interface that extends "Person" and "Female" interfaces:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Basically translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Girl {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gender: 'Female';&lt;/span&gt;
&lt;span class="c1"&gt;//   age: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stanley&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stanley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;david&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Female&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;andreas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Boy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Andreas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;victoria&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Girl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victoria&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-generic-interfaces"&gt;
  &lt;/a&gt;
  Creating generic interfaces
&lt;/h2&gt;

&lt;p&gt;One more thing. TypeScript also allows to create something called "generic interfaces". These interfaces allow you to specify type of a property based on one or more parameters you provide the interface with when you use it. You can specify these parameters using angle brackets (&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;) like in the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for UserData:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserData&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a generic interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create function to fetch API&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use ApiResponse "interface" and pass&lt;/span&gt;
  &lt;span class="c1"&gt;// the "UserData" interface as argument (for T argument):&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ApiResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserData&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/some_api_endpoint&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// The "ApiResponse&amp;lt;UserData&amp;gt;" basically translates to:&lt;/span&gt;
  &lt;span class="c1"&gt;// interface ApiResponse&amp;lt;T&amp;gt; {&lt;/span&gt;
  &lt;span class="c1"&gt;//   date: Date;&lt;/span&gt;
  &lt;span class="c1"&gt;//   code: number;&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: UserData[];&lt;/span&gt;

  &lt;span class="c1"&gt;//   Or:&lt;/span&gt;
  &lt;span class="c1"&gt;//   payload: [name: string; email: string;]&lt;/span&gt;
  &lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-typescript-interfaces"&gt;
  &lt;/a&gt;
  Conclusion: TypeScript interfaces
&lt;/h2&gt;

&lt;p&gt;TypeScript interfaces provide an easy way to annotate your objects, including classes, and also functions. This can help you write safer and more maintainable code. I hope that this tutorial helped you understand and learn about what interfaces are and how to use them in your code.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A quick introduction to Next.js</title>
      <author>Menard Maranan</author>
      <pubDate>Mon, 12 Jul 2021 08:22:20 +0000</pubDate>
      <link>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</link>
      <guid>https://dev.to/menard_codes/a-quick-introduction-to-next-js-k9c</guid>
      <description>&lt;p&gt;Next.js, a React framework that leveled up the game of React from just front-end to &lt;strong&gt;Fullstack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't developed with Next.js yet, lemme tell you that you should be. Why? Because you can do hella lot things here more than a plain 'ol React App (you'll later see why).&lt;/p&gt;

&lt;p&gt;But to give you a hint, Next.js allows you to build a website or webapp in different ways. You can: serve statically generated files like HTML in a CDN, in-demand or per-request server-side rendering of HTML, and heck, you can even build an API with Next.js! Can you imagine building an API within React?&lt;/p&gt;

&lt;p&gt;But anyways, let's take a quick look on Next.js as a Fullstack framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-as-a-fullstack-solution"&gt;
  &lt;/a&gt;
  Next.js as a FullStack solution
&lt;/h2&gt;

&lt;p&gt;Unlike React.js, which is pure front end, Next.js is fullstack.&lt;/p&gt;

&lt;p&gt;Just like what I said on the introduction, you can build websites using 3 different approaches in web development: serve static files, send server generated sites, or even build an API.&lt;/p&gt;

&lt;p&gt;But how do you know which approach to use at what scenario?&lt;/p&gt;

&lt;p&gt;My tip (and Next.js documentation tip):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static Site&lt;/strong&gt; - If a page on your site is not always changing. Meaning, it's the same regardless of who requested it or at what time (i.e. about page, or log in page, or sign up page, etc.). That also means the page can be generated on build time and cached on a CDN, which is the fastest way for our website to be served and the cheapest to host (you can even host it for free, like in GitHub pages).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server Side Rendering&lt;/strong&gt; - If a page often change, or always change, or if it depends the user requesting it, (i.e. user account, news feed, etc.), then that is when you use Server Side rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; - This is not actually specified by Next.js Documentation as alternative approach, but if you're client side app needs to query the database, then do that in the backend and expose this endpoint for the client. This might be used by client side rendered page. But you can also do other backend services like send POST request to save a data on the database and again, expose this endpoint. You can define your API with a syntax almost similar to an express API.&lt;/p&gt;

&lt;p&gt;Among the choices, Next.js Documentation stressed out to choose static site whenever possible, given it's speed and being low-cost. SSR is slower than static ones because it runs on a server and can be expensive.&lt;/p&gt;

&lt;p&gt;But whatever approach you want or need in your app, Next.js have a support for that.&lt;/p&gt;

&lt;p&gt;Before we move to the next part, let me point out that Next.js is not an 'end all be all' solution, because for example, Next.js have no native support to things like Real Time Video Chat. But no worries, Next.js is a JAMstack solution. The 'A' in JAMstack is API, and we can use a third-party API as a solution for such needs (an example would be Agora).&lt;/p&gt;

&lt;p&gt;Ok, but how do we compare Next.js with React besides Next being fullstack?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-vs-react"&gt;
  &lt;/a&gt;
  Next.js vs React
&lt;/h2&gt;

&lt;p&gt;A question I have when I started learning Next.js is "Is Next.js another wild javascript module released in the JavacSript Jungle?"&lt;/p&gt;

&lt;p&gt;Turns out the answer is both yes and no.&lt;/p&gt;

&lt;p&gt;In fact, Next.js is not actually different from React, because Next.js is a &lt;strong&gt;React framework&lt;/strong&gt; and yeah, it's like coming from the lineage of React.&lt;/p&gt;

&lt;p&gt;The additional features of Next.js to React are what makes it cool and popular among JavaScript folks.&lt;/p&gt;

&lt;p&gt;First off, Next.js deals with the common problems in a React App, like SEO and optimization. Additional to that are the in-built support for things like routing and css (including Sass).&lt;/p&gt;

&lt;p&gt;So yeah, those are just some things to mention about the pros of Next.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-next-app"&gt;
  &lt;/a&gt;
  Create Next App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpOhq06e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv76gtwsyaevk0zc4snu.png" alt="Next js folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before I forget to mention, starting a brand new Next.js app is quite similar to React which can be done by firing an &lt;code&gt;npx create-next-app &amp;lt;app-name&amp;gt;&lt;/code&gt; on your terminal, just like the good 'ol React. Again, instead of &lt;code&gt;create-react-app&lt;/code&gt;, you see it's &lt;code&gt;create-next-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So yeah, this will create a folder named after the one you specified and build the Next.js folder structure, install it's dependencies, and add some boilerplate code (again, just like React, but tailored in the needs of a Next App).&lt;/p&gt;

&lt;p&gt;You can try that out yourself and check the &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; if you're feeling lost.&lt;/p&gt;

&lt;p&gt;Next.js seems quite good right? But...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-ditch-react-for-nextjs"&gt;
  &lt;/a&gt;
  Should you ditch React for Next.js?
&lt;/h2&gt;

&lt;p&gt;Woah, that's a strong question!&lt;/p&gt;

&lt;p&gt;My takes on this would be bias, but I think, not completely (because hey, you're still using react). Before thinking about fully adopting Next.js, you have to consider that it's still a growing market, and if you're a typical dev, you hold a job (or wants to, like me, I'm available for a position if you want to reach out...😏), the job market is again on the side of React. The reasons are up to you, but Next.js is still a pretty darn choice for new and future projects.&lt;/p&gt;

&lt;p&gt;But personally, I believe Next.js is the future of React and Web Development itself. We're on the advent of yet another revolution in tech, the JAMstack, and Next.js is in perfect position for this event. And if you have an upcoming project, consider Next.js, and discover the advantages it will present you. Or maybe you're just starting out, take my word for it, try Next.js.&lt;/p&gt;

&lt;p&gt;To be honest, I myself adopted Next.js and I haven't used &lt;code&gt;create-react-app&lt;/code&gt; for a while now, and so far, I have no doubt with my choice.&lt;/p&gt;

&lt;p&gt;But whatever your condition was, your choice depends on you (but I still recommend Next.js, because come on! Why should I write this if that's not the point right? Just kidding...... Try Next.js)&lt;/p&gt;

&lt;p&gt;Hopefully this article helped you to get up to speed with 'What the heck is Next.js'.&lt;/p&gt;

&lt;p&gt;If you want further readings, you can check out their &lt;a href="https://nextjs.org/docs"&gt;Documentation&lt;/a&gt; or follow me up here where I'll be posting more Next.js blogs.&lt;/p&gt;

&lt;p&gt;Btw, Follow me on &lt;a href="https://twitter.com/menard_codes"&gt;Twitter!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Audio File Transcription, for Super-Efficient Recording</title>
      <author>ViviJiang-clevercoder</author>
      <pubDate>Mon, 12 Jul 2021 08:20:10 +0000</pubDate>
      <link>https://dev.to/vivijiangclevercoder/audio-file-transcription-for-super-efficient-recording-33f5</link>
      <guid>https://dev.to/vivijiangclevercoder/audio-file-transcription-for-super-efficient-recording-33f5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Converting audio into text has a wide range of applications: generating video subtitles, taking meeting minutes, and writing interview transcripts. HUAWEI ML Kit's service makes doing so easier than ever before, converting audio files into meticulously accurate text, with correct punctuation as well!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actual Effects&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Build and run an app with audio file transcription integrated. Then, select a local audio file and convert it into text.&lt;/p&gt;

&lt;p&gt;![Alt text of image]&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xQw9J1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s0ep7ao1axd08c80gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xQw9J1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6s0ep7ao1axd08c80gm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development Preparations&lt;/strong&gt; &lt;br&gt;
For details about configuring the Huawei Maven repository and integrating the audio file transcription SDK, please refer to the &lt;a href="https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides-V5/audio-sdk-0000001050038090-V5"&gt;Development Guide&lt;/a&gt; of ML Kit on HUAWEI Developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Declaring Permissions in the AndroidManifest.xml File&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Open the AndroidManifest.xml in the main folder. Add the network connection, network status access, and storage read permissions before 
Please note that these permissions need to be dynamically applied for. Otherwise, Permission Denied will be reported.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development Procedure&lt;/strong&gt;&lt;br&gt;
Creating and Initializing an Audio File Transcription Engine**&lt;br&gt;
Override onCreate in MainActivity to create an audio transcription engine.&lt;br&gt;
private MLRemoteAftEngine mAnalyzer;&lt;/p&gt;

&lt;p&gt;mAnalyzer = MLRemoteAftEngine.getInstance();&lt;br&gt;
mAnalyzer.init(getApplicationContext());&lt;br&gt;
mAnalyzer.setAftListener(mAsrListener);&lt;/p&gt;

&lt;p&gt;Use MLRemoteAftSetting to configure the engine. The service currently supports Mandarin Chinese and English, that is, the options of mLanguage are zh and en.&lt;br&gt;
MLRemoteAftSetting setting = new MLRemoteAftSetting.Factory()&lt;br&gt;
        .setLanguageCode(mLanguage)&lt;br&gt;
        .enablePunctuation(true)&lt;br&gt;
        .enableWordTimeOffset(true)&lt;br&gt;
        .enableSentenceTimeOffset(true)&lt;br&gt;
        .create();&lt;/p&gt;

&lt;p&gt;enablePunctuation indicates whether to automatically punctuate the converted text, with a default value of false.&lt;br&gt;
If this parameter is set to true, the converted text is automatically punctuated; false otherwise.&lt;/p&gt;

&lt;p&gt;enableWordTimeOffset indicates whether to generate the text transcription result of each audio segment with the corresponding offset. The default value is false. You need to set this parameter only when the audio duration is less than 1 minute.&lt;br&gt;
If this parameter is set to true, the offset information is returned along with the text transcription result. This applies to the transcription of short audio files with a duration of 1 minute or shorter.&lt;br&gt;
If this parameter is set to false, only the text transcription result of the audio file will be returned.&lt;/p&gt;

&lt;p&gt;enableSentenceTimeOffset indicates whether to output the offset of each sentence in the audio file. The default value is false.&lt;br&gt;
If this parameter is set to true, the offset information is returned along with the text transcription result.&lt;br&gt;
If this parameter is set to false, only the text transcription result of the audio file will be returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a Listener Callback to Process the Transcription Result&lt;/strong&gt;&lt;br&gt;
private MLRemoteAftListener mAsrListener = new MLRemoteAftListener() &lt;/p&gt;

&lt;p&gt;After the listener is initialized, call startTask in AftListener to start the transcription.&lt;/p&gt;

&lt;p&gt;(&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Override
public void onInitComplete(String taskId, Object ext) {
    Log.i(TAG, "MLRemoteAftListener onInitComplete" + taskId);
    mAnalyzer.startTask(taskId);
}

Override onUploadProgress, onEvent, and onResult in MLRemoteAftListener.

@Override
public void onUploadProgress(String taskId, double progress, Object ext) {
    Log.i(TAG, " MLRemoteAftListener onUploadProgress is " + taskId + " " + progress);
}

@Override
public void onEvent(String taskId, int eventId, Object ext) {
    Log.e(TAG, "MLAsrCallBack onEvent" + eventId);
    if (MLAftEvents.UPLOADED_EVENT == eventId) { // The file is uploaded successfully.
        showConvertingDialog();
        startQueryResult(); // Obtain the transcription result.
    }
}

@Override
public void onResult(String taskId, MLRemoteAftResult result, Object ext) {
    Log.i(TAG, "onResult get " + taskId);
    if (result != null) {
        Log.i(TAG, "onResult isComplete " + result.isComplete());
        if (!result.isComplete()) {
            return;
        }
        if (null != mTimerTask) {
            mTimerTask.cancel();
        }
        if (result.getText() != null) {
            Log.e(TAG, result.getText());
            dismissTransferringDialog();
            showCovertResult(result.getText());
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; segmentList = result.getSegments();
        if (segmentList != null &amp;amp;&amp;amp; segmentList.size() != 0) {
            for (MLRemoteAftResult.Segment segment : segmentList) {
                Log.e(TAG, "MLAsrCallBack segment  text is : " + segment.getText() + ", startTime is : " + segment.getStartTime() + ". endTime is : " + segment.getEndTime());
            }
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; words = result.getWords();
        if (words != null &amp;amp;&amp;amp; words.size() != 0) {
            for (MLRemoteAftResult.Segment word : words) {
                Log.e(TAG, "MLAsrCallBack word  text is : " + word.getText() + ", startTime is : " + word.getStartTime() + ". endTime is : " + word.getEndTime());
            }
        }

        List&amp;lt;MLRemoteAftResult.Segment&amp;gt; sentences = result.getSentences();
        if (sentences != null &amp;amp;&amp;amp; sentences.size() != 0) {
            for (MLRemoteAftResult.Segment sentence : sentences) {
                Log.e(TAG, "MLAsrCallBack sentence  text is : " + sentence.getText() + ", startTime is : " + sentence.getStartTime() + ". endTime is : " + sentence.getEndTime());
            }
        }
    }

}
(```

)


Processing the Transcription Result in Polling Mode
After the transcription is completed, call getLongAftResult to obtain the transcription result. Process the obtained result every 10 seconds.


(

```)
private void startQueryResult() {
    Timer mTimer = new Timer();
    mTimerTask = new TimerTask() {
        @Override
        public void run() {
            getResult();
        }
    };
    mTimer.schedule(mTimerTask, 5000, 10000); // Process the obtained long speech transcription result every 10s.
}

private void getResult() {
    Log.e(TAG, "getResult");
    mAnalyzer.setAftListener(mAsrListener);
    mAnalyzer.getLongAftResult(mLongTaskId);
}

(```

)


(https://stackoverflow.com/questions/tagged/huawei-mobile-services)

Follow our official account for the latest HMS Core-related news and updates.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Load, Store, and Protect LinuxBased NFS Workloads in AWS</title>
      <author>med_karim_amimi</author>
      <pubDate>Mon, 12 Jul 2021 08:05:40 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/load-store-and-protect-linuxbased-nfs-workloads-in-aws-1636</link>
      <guid>https://dev.to/awsmenacommunity/load-store-and-protect-linuxbased-nfs-workloads-in-aws-1636</guid>
      <description>&lt;p&gt;This article outlines the Linux-Based Network File Systems migration strategy from on-premise to AWS cloud.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h1&gt;

&lt;p&gt;Network File Systems (NFS) are widely used in on-premise applications in order to synchronously share the same content over multiple servers. This document describes the best practices for migrating Linux file-based applications to the cloud smoothly, efficiently and securely.&lt;br&gt;
AWS is offering the most suitable way for its customers to see their data transferred to the cloud taking advantage of managed services that were designed to jointly provide a smooth migration process. This process would leverage the capabilities offered by AWS DataSync, Amazon EFS &amp;amp; AWS Backup.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#service-overview"&gt;
  &lt;/a&gt;
  Service Overview:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#aws-datasync"&gt;
  &lt;/a&gt;
  AWS DataSync:
&lt;/h3&gt;

&lt;p&gt;It is used mainly to move large amount of data from on-premise to AWS. It can synchronize to: Amazon S3,Amazon EFS, Amazon FSx for Windows and it moves data from your NAS or file system via NFS or SMB. The data transfer via AWS Datasync can be secure, fast and cost-effective comparing to similar open source tools.&lt;br&gt;
In this document, we will be focusing on using Datasync in conjunction with on-premise NFS and Amazon EFS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazon-elastic-file-system"&gt;
  &lt;/a&gt;
  Amazon Elastic File System:
&lt;/h3&gt;

&lt;p&gt;EFS is Managed NFS that can be mounted on many EC2 in multi-AZ and provides highly available, scalable and and shareable storage. EFS is POSIX file system that scales automatically without capacity planning needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-backup"&gt;
  &lt;/a&gt;
  AWS Backup:
&lt;/h3&gt;

&lt;p&gt;AWS Backup is fully AWS managed service that enables you to centralize and automate data protection. In this document, It will be used at to backup the EFS file system that we are moving data to.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#migration-guide"&gt;
  &lt;/a&gt;
  Migration Guide:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An active AWS account.&lt;/li&gt;
&lt;li&gt;Required permissions to create new resources for each of the mentioned services. &lt;/li&gt;
&lt;li&gt;A virtualization system that is capable of running the DataSync agent: VMware ESXi, Microsoft Hyper-V Hypervisor or Linux Kernel-based Virtual Machine (KVM). &lt;/li&gt;
&lt;li&gt;Web browser to activate the DataSync agent.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#setup-and-configuration"&gt;
  &lt;/a&gt;
  Setup and Configuration:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Elastic File System:&lt;/strong&gt; &lt;br&gt;
EFS could be created either using AWS Console, CLI or SDK. As discussed earlier, No setup, provisioning or capacity management are needed. The high availability level that customer may require depends on different storage classes offered by AWS (Based on redundancy options and Access frequency). It is up to the customer to define the application needs and criticality. The clients (Usually EC2) are allowed to access the EFS via mount targets that should be separately created. Each set of EC2 instances tied to an AZ needs its new target mount to be created in that particular AZ. Like EC2 instances, the EFS security is managed by Security Groups. It could be accessed by its DNS name. The DNS resolution of cross AZ target mounts is automatically managed.&lt;br&gt;
High availability ,Durability, File system Life cycle among many other options could be set while creating the EFS. Encryption at rest is a recommended option for data protection purposes but can only be set during the file system creation while encryption in transit can be set later. &lt;br&gt;
EFS offers two performance related modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance modes: The default option ,General Purpose, and the Max I/O Mode. The latter option offers an unlimited number of file system operation per second has a slightly higher latency per each file system operation.&lt;/li&gt;
&lt;li&gt;Throughput modes:  In the Bursting mode, The throughput scales linearly with the file system size with a base of 2.1TB of burst credit when creating a new EFS. The throughput burst can go up to 100 MB/s of writing-only operation which will be the main activity during the migration while the provisioned mode offers a fixed throughput that can be set while creating the EFS and adjusted later based on customer needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the purposes of this document, we recommend selecting the General Purpose performance mode and to use provisioned throughput mode if your transfer rate should exceed 100MB/s.&lt;br&gt;
AWS provides four EFS storage classes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EFS Standard and EFS One Zone: Default setting used for frequently accessed files.&lt;/li&gt;
&lt;li&gt;EFS standard-Infrequent access(Standard-IA) and EFS One Zone-Infrequent access (One Zone- IA): Used for files that are not used in a daily basis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Choosing IA storage can reduce costs but increasing latency. The EFS lifecycle can automatically manage the file move based on already set custom policy. From operational point of view, EFS serves its clients transparently regardless the EFS storage class.&lt;br&gt;
In this article, we recommend enabling lifecycle management for cost effectiveness.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DataSync:&lt;/strong&gt; &lt;br&gt;
AWS Datasync is a AWS fully managed service useful for data migration and data synchronization between the on-premise and cloud environments. This document assumes that a Direct Connect is set for a better transfer rate(up to 10Gbps per Datasync Agent). AWS Datasync offers encryption in transit and data integrity checks. It performs some data processing for a more efficient bandwidth utilization.&lt;br&gt;
The needed steps to perform this operation are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download and activate the DataSync agent as a virtual machine in your on-premises environment. &lt;/li&gt;
&lt;li&gt;Create a ‘task’, which is the complete definition of a data transfer that will handle the transfer between two locations: an on-premises Network File System (NFS) server and Amazon EFS.&lt;/li&gt;
&lt;li&gt;Set the appropriate DataSync configuration options:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Enable NFS traffic (port 2049) in your on-premises firewall and AWS VPC.&lt;/li&gt;
&lt;li&gt;Set DataSync configuration to share at least one Security Group with the EFS mount targets.&lt;/li&gt;
&lt;li&gt;Configure VPC endpoints and enable additional on-premises firewall ports in case you want to avoid sending data over public internet.&lt;/li&gt;
&lt;li&gt;Make sure that default metadata settings are turned on to preserve files ownership, permissions and timestamp.&lt;/li&gt;
&lt;li&gt;Disable the automatic data verification step if you are sure that stop any activity against your on-premise file system before and during data transfer. The customer can turn off this option to reduce the transfer time.&lt;/li&gt;
&lt;li&gt;Set a bandwidth limit for the task to prevent DataSync process to consume too many network resources.&lt;/li&gt;
&lt;li&gt;Deploy and allocate as many as four DataSync agents to you task. This options allow to speed up the data transfer by overcoming the network limits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally,you need to run the DataSync task either on-demand or periodically via the DataSync API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Backup:&lt;/strong&gt;&lt;br&gt;
AWS backup offers an extra data protection layer. Automatic AWS backup feature could be turned on/off during the creation of the EFS or later depending on the EFS storage class.&lt;/p&gt;

&lt;p&gt;AWS Backup provides automated backup schedules, retention management, and lifecycle management,. It protects the data from any unintended events. AWS Backup is incremental which means that only the changes applied on the file system are recorded.&lt;br&gt;
The backup plan is the policy expression that defines when and how you want to back up your AWS resources. Predefined backup plan are already provided by AWS but customer can add it own plans.&lt;br&gt;&lt;br&gt;
You can optionally add rules handling the data migration conditions and the purge timeline. Moving data to ‘cold’ storage may cost you few extra hours during the restore process. After you create your backup plan, you can choose which of your EFS file systems are governed by it. Two options are available to select the target file systems: The tag-based mechanism which allow the AWS backup process to consider each file system with a particular tag or by simply selecting the files systems IDs.&lt;br&gt;&lt;br&gt;
Backups are encrypted with a KMS key for security purposes. This process is managed by backup vaults created with AWS backup service.&lt;br&gt;
The restore process can be triggered with the AWS console and the backup can be restored to an existing file system or to a newly created one. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#operations-and-monitoring"&gt;
  &lt;/a&gt;
  Operations and Monitoring:
&lt;/h1&gt;

&lt;p&gt;After setting all needed services for data migration to the cloud, we need to monitor the performance of each one of the services based on metrics provided by the service itself or the centralized monitoring service AWS CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS DataSync:&lt;/strong&gt;&lt;br&gt;
Basically, what we need is to make sure that the AWS DataSync is able to reach the data source and the data target all the time and to get status information about each task which helps to troubleshoot any issue that may occur. The information about every task phase is available as well to provide progress status.&lt;br&gt;
The DataSync API can provide operational health information to external monitoring systems . You can also leverage AWS CloudWatch log group to centralize logs in AWS.&lt;br&gt;
DataSync is well integrated also with Amazon CloudWatch to send events and metrics useful to set alarms for state change in an agent,location,task,or task execution. You can also get the real-time statistics about the transferred volume of data as a function of time.    &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon EFS:&lt;/strong&gt;&lt;br&gt;
The metrics provided by Amazon CloudWatch could be useful to decide which EFS performance mode to be used. You can set initially the EFS performance to be at General purpose mode and permanently monitor the PercentIOLimit metric. If the metrics consistently stands around 100%, you may want to set your EFS file system at the Max I/O mode. Alternatively, you can split the workload across multiple General Purpose mode EFS.&lt;br&gt;
AWS proposes two techniques to drive additional throughput while not reaching the I/O limit:&lt;br&gt;
    1. EFS recommends leveraging parallel I/O as much as possible taking advantage of the distributed design of EFS. A GitHub tutorial is available for more details regarding this technique.&lt;br&gt;&lt;br&gt;
    2. You can also determine if your throughput is being rate-limited based on your storage. The CloudWatch Throughput utilization metric can be useful for this purpose. The MeteredIOBytes metric (ratio of metered throughput you driving on your EFS to PermittedThroughput) could be useful as well. If the ratio is equal to one, the file system is consuming all available throughput. You can see the same behavior if your EFS is on Bursting Throughput mode with a small file system with no burst credit. If this is the case and you have deterministic application throughput requirements, you can consider the Provisioned Throughput mode.&lt;br&gt;
All discussed metrics are available on Amazon CloudWatch dashboards.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pricing-and-cost-considerations"&gt;
  &lt;/a&gt;
  Pricing and Cost Considerations:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#aws-datasync"&gt;
  &lt;/a&gt;
  AWS DataSync:
&lt;/h3&gt;

&lt;p&gt;The service pricing is $0.0125/GB or $12.80/TB transferred. This price is globally applicable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amazon-efs"&gt;
  &lt;/a&gt;
  Amazon EFS:
&lt;/h3&gt;

&lt;p&gt;EFS pricing depends on the file system storage class, infrequent access IO request and the provisioned throughput. This document focuses on US-EAST-1 prices:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Storage Class&lt;/th&gt;
&lt;th&gt;Price (per GB-month)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EFS Standard storage&lt;/td&gt;
&lt;td&gt;$0.30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Standard IA storage&lt;/td&gt;
&lt;td&gt;$0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EFS One Zone Storage&lt;/td&gt;
&lt;td&gt;$0.16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EFS One Zone IA&lt;/td&gt;
&lt;td&gt;$0.0133&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you choose the Infrequent Access storage classes, an extra fee is applied for retrieving data or moving data to the IA storage class. The fee is $0.01/GB transferred.&lt;br&gt;
You pay also for the provisioned throughput at the rate of $6/MB/s. You only pay if you provision more throughput than the what your EFS class storage/Size provides initially.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-backup"&gt;
  &lt;/a&gt;
  AWS Backup:
&lt;/h3&gt;

&lt;p&gt;The backup service costs you $0.05/GB-month for warm storage and $0.01/GBmonth for cold storage.&lt;br&gt;
Restores cost $0.02/GB from warm storage and $0.03/GB from cold storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migration-cost-example"&gt;
  &lt;/a&gt;
  Migration Cost Example:
&lt;/h3&gt;

&lt;p&gt;The following example is made based on simplifying assumptions satisfying the industry estimates:&lt;br&gt;
&lt;strong&gt;Assumptions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrated Data: 100TB&lt;/li&gt;
&lt;li&gt;Storage period: 1 year&lt;/li&gt;
&lt;li&gt;IA stored data: 80% of overall data (never read after being moved to IA EFS)&lt;/li&gt;
&lt;li&gt;Backup policy: Daily&lt;/li&gt;
&lt;li&gt;Availability: Multi-AZ&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS DataSync&lt;/td&gt;
&lt;td&gt;$0.0125/GB * 1000 GB/TB * 100 TB = $1,250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard Storage&lt;/td&gt;
&lt;td&gt;$0.30/GB-month * 1000 GB/TB * 100 TB * 20% frequently accessed * 12 months/year = $72,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA I/O&lt;/td&gt;
&lt;td&gt;$0.01/GB * 1000 GB / TB * 100 TB * 80% infrequently accessed = $800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA Storage&lt;/td&gt;
&lt;td&gt;$0.025/GB-month * 1000 GB/TB * 100 TB * 80% infrequently accessed * 12 months/year = $24,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Backup&lt;/td&gt;
&lt;td&gt;$0.05/GB-month * 1000 GB/TB * 100 TB * 12 months/year = $60,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total Cost&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$157,250&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Assumptions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrated Data: 100TB&lt;/li&gt;
&lt;li&gt;Storage period: 1 year&lt;/li&gt;
&lt;li&gt;IA stored data: 80% of overall data (never read after being moved to IA EFS)&lt;/li&gt;
&lt;li&gt;Backup policy: Daily&lt;/li&gt;
&lt;li&gt;Availability: One AZ&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Cost&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AWS DataSync&lt;/td&gt;
&lt;td&gt;$0.0125/GB * 1000 GB/TB * 100 TB = $1,250&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard Storage&lt;/td&gt;
&lt;td&gt;$0.16/GB-month * 1000 GB/TB * 100 TB * 20% frequently accessed * 12 months/year = $38,400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA I/O&lt;/td&gt;
&lt;td&gt;$0.01/GB * 1000 GB / TB * 100 TB * 80% infrequently accessed = $800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Amazon EFS Standard IA Storage&lt;/td&gt;
&lt;td&gt;$0.0133/GB-month * 1000 GB/TB * 100 TB * 80% infrequently accessed * 12 months/year = $12,768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AWS Backup&lt;/td&gt;
&lt;td&gt;$0.05/GB-month * 1000 GB/TB * 100 TB * 12 months/year = $60,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Total Cost&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;$112,418&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h1&gt;

&lt;p&gt;This document explains how to set up,tune and monitor your migrating applications to the AWS cloud. The provided solution is based on AWS DataSync for migrating data, Elastic File System for storing the data and AWS Backup for data protection. The above detailed examples show how much it will cost you approximately to migrate 100TB of data from your on-premise data center to AWS Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>migration</category>
      <category>linux</category>
      <category>storage</category>
    </item>
    <item>
      <title>Lớp học làm nhân bánh mì mở quán kinh doanh mùa dịch

</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:48:31 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-lam-nhan-banh-mi-m-quan-kinh-doanh-mua-d-ch-4kgh</guid>
      <description>&lt;p&gt;Lớp học mở cửa hàng bánh mì bí quyết kinh doanh, học làm nhân bánh mì kinh doanh ở Hà Nội. Mở quán bánh mì kinh doanh với khóa học làm các loại nhân bánh mì và nước sốt như nhân Pate, xá xíu, chả nướng, bò sốt tiêu đen….. Bán hàng online trong mùa dịch siêu lợi nhuận Tư vấn mở quán  học viên được lựa chọn đăng ký học 1 thầy 1 trò hoặc lớp ghép lớp khóa học làm nhân bánh mì và nước sốt =&amp;gt; Bạn xem ngay Khóa học làm nhân bánh mì mở cửa hàng của trung tâm Học Món việt. Liên hệ/Zalo: 0989 434 130. lớp học làm nhân bánh mì, học làm nhân bánh mì, khóa học làm nhân bánh mì, &lt;br&gt;
Mở tiệm bánh mì bí quyết kinh doanh thành công&lt;br&gt;
=&amp;gt; Xem ngay &lt;a href="http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/"&gt;http://tuyensinhdongdo24h.edu.vn/lop-hoc-lam-nhan-banh-mi-de-mo-tiem-banh-mi-kinh-doanh/&lt;/a&gt;&lt;br&gt;
Bạn Hà Huy Thắng (Bắc giang) và bạn Nguyễn Ngọc Thịnh (Đông anh) tìm đến trung tâm Học Món Việt để học làm các loại nhân và nước sốt bánh mì. Do cửa hàng của 2 bạn đều gần chỗ đông học sinh, sinh viên, sẵn kinh doanh cafe và trà sữa nên 2 bạn định mở rộng mô hình kinh doanh của mình.&lt;br&gt;
“Tôi rất hài lòng về chương trình học làm nhân bánh mì và các loại nước sốt tại trường. Ở đây, thầy Tuyên đã hướng dẫn cho tôi tận tình và chu đáo. Cũng biết được thêm các loại nhân bánh để kinh doanh hiệu quả” Đó là chia sẻ của Bạn Thắng và bạn Thịnh.&lt;br&gt;
Việc kinh doanh mô hình trà sữa, café kết hợp với bánh mỳ đang rất thịnh hành và hút khách hiện nay. Bởi nhu cầu thưởng thức bánh mì với nước sốt đa dạng, đậm đà các loại nhân bánh mì có hương vị đặc trưng đang được thực khách rất ưa chuộng.&lt;br&gt;
Với khóa học nhân bánh mỳ học viên sẽ được hướng dẫn đầy đủ từ khâu chọn nguyên vật liệu, sơ chế nguyên vật liệu đến cách tẩm ướp điều chỉnh sao cho miếng thịt thơm ngon mang hương vị đặc trưng riêng.&lt;br&gt;
=&amp;gt; Xem thêm Khóa học nhân bánh mì để biết thông tin lớp học, học phí, thời gian học&lt;br&gt;
Lớp học làm nhân bánh mì ở Hà Nội&lt;br&gt;&lt;br&gt;
Với chương trình học theo hình thức kinh doanh truyền nghề  các bạn sẽ được chọn các loại nhân đăng ký học bao gồm: &lt;br&gt;
• Trứng ốp la&lt;br&gt;
• Patê&lt;br&gt;
• Heo nướng&lt;br&gt;
• Bò nướng&lt;br&gt;
• Heo quay&lt;br&gt;
• Bò nướng phômai&lt;br&gt;
• Thịt nướng • Gà xé&lt;br&gt;
• Xíu mại&lt;br&gt;
• Xá xíu&lt;br&gt;
• Chả cá&lt;br&gt;
• Thịt viên&lt;br&gt;
• Bò Kho&lt;br&gt;
• Bò bít tết&lt;/p&gt;

&lt;p&gt;Để học hết tất cả các loại nhân này phải mất 5-7 buổi học. Nhưng đối với các lớp kinh doanh mở quán thì sẽ hướng dẫn các bạn chọn các loại nhân phù hợp với từng bạn. Thường 1 khóa học 3 buổi các bạn sẽ học được 4-5 loại nhân kèm với các loại sốt tương ứng, và không thể thiếu được là các loại dưa góp làm cho món bành mì kẹp thêm phần hấp dẫn.&lt;br&gt;
Ngoài ra, bạn cũng có thể chọn thêm các món mà các bạn trẻ hiện nay hay ăn như bánh mì chảo, Burger Bò, gà, heo, hải sản… Nếu bạn lựa chọn kinh doanh các món này cũng là những món thu lợi nhuận cao nhưng phải đầu tư nhiều hơn từ dụng cụ, đến bàn ghế…&lt;br&gt;
Nắm bắt được điều đó Trung tâm Học Món việt đã mở lớp học làm nhân bánh mì dành cho:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mọi đối tượng có nhu cầu học để biết làm các loại nước sốt cũng như nhân bánh mì&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn học để kinh doanh hay để mở quán bánh mì.&lt;/li&gt;
&lt;li&gt;Mọi đối tượng muốn nâng cao tay nghề.
=&amp;gt; Xem thêm Học trung cấp nấu ăn tại Hà Nội để biết thêm chương trình trung cấp của trường.
Trung tâm Học Món Việt với khóa học nhân bánh mì và các loại sốt
Trung tâm Học Món Việt mở khóa học nhân bánh mì ở Hà Nội cho mọi đối tượng từ mở quán kinh doanh , đến nâng cao tay nghề trong kinh doanh.&lt;/li&gt;
&lt;li&gt;Giảng viên đứng lớp là những người đã có nhiều năm kinh nghiệm trong việc giảng dạy cũng như am hiểu về bánh mì, các loại nhân bánh mì, các loại nước sốt bánh mì. Không chỉ học lý thuyết, các học viên được thực hành ngay trên lớp cùng giảng viên của trường.&lt;/li&gt;
&lt;li&gt;Trang thiết bị cơ sở vật chất đầy đủ, tạo điều kiện cho học viên khóa học tốt nhất. &lt;/li&gt;
&lt;li&gt;Tư vấn hỗ trợ giải đáp thắc mắc của học viên, cũng như hỗ trợ học viên trong việc lên menu mở quán kinh doanh.
Hy vọng với những chia sẻ trên đã giúp bạn sơ lược hình dung về chương trình học của trường, để biết thêm thông tin và tư vấn thêm về chương trình học các bạn liên hệ:
  TRƯỜNG TC CN VÀ QT ĐÔNG ĐÔ- TRUNG TÂM HỌC MÓN VIỆT
ĐỊA CHỈ:  Nhà E21, ngõ 68, phố Trung Kính, Yên Hòa, Cầu Giấy, Hà Nội.
LIÊN HỆ:  Ms Hồng: 0989 434 130 – 0948 079 040
Zalo: 0989 434 130 
Đăng ký tư vấn các khóa học chứng chỉ của trường tại &lt;a href="http://tinyurl.com/dk-chungchi"&gt;http://tinyurl.com/dk-chungchi&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>lophoclamnhanbanh</category>
      <category>khoahocnhanbanh</category>
    </item>
    <item>
      <title>
Lớp học trung cấp Thư viện thiết bị trường học cấp tốc
</title>
      <author>TuyensinhDongdo24h</author>
      <pubDate>Mon, 12 Jul 2021 07:42:23 +0000</pubDate>
      <link>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</link>
      <guid>https://dev.to/tuyensinhdongdo24h/l-p-h-c-trung-c-p-th-vi-n-thi-t-b-tr-ng-h-c-c-p-t-c-3ej9</guid>
      <description>&lt;p&gt;Đào tạo và cấp nhanh bằng THÔNG TIN THƯ VIỆN – THIẾT BỊ TRƯỜNG HỌC tại Hà Nội. Cấp nhanh CHỨNG CHỈ THÔNG TIN THƯ VIỆN Liên hệ/Zalo: 0989 434 130 (cô Hồng). Dùng để thi công chức xét biên chế ngành quản lý thông tin thư viện, thiết bị trường học =&amp;gt; Xem ngay Trung cấp THƯ VIỆN - THIẾT BỊ học cấp tốc tại Hà Nội  Sinh viên ở xa có chỗ ở ký túc xá miễn phí cuối tuần. Học trung cấp thư viện, học trung cấp thiết bị, học thiết bị trường học, học thư viện tại hà nội&lt;br&gt;
Bạn đang tìm lớp trung cấp thông tin thư viện thiết bị học nhanh thi công chức, bạn cần biết:&lt;br&gt;
– Hiện tại  nhu cầu tuyển dụng cán bộ thư viện thiết bị tại các trường là rất cao, vì hầu hết thường là các cán bộ ngành khác kiêm nhiệm làm công tác quản lý thư viện, quản lý thiết bị trường học.&lt;br&gt;
– Sở nội vụ quy định với mỗi cán bộ thư viện thiết bị ở trường học trình độ tổi thiểu là tốt nghiệp trung cấp trở lên, ở một số tỉnh thành thì chỉ yêu cầu có chứng chỉ thư viện , thiết bị thí nghiệm.&lt;br&gt;
– Có nhiều trưởng tuyển sinh trung cấp thông tin thư viện – thiết bị trường học nhưng để tìm trường học vừa đào tạo nhanh vừa đảm bảo chất lượng, sinh viên có thể vừa đi học vừa đi làm thì rất ít trường đáp ứng được.&lt;br&gt;
=&amp;gt; Đọc thêm bài viết Thông tin tuyển sinh lớp thư viện thiết bị cấp tốc 7 tháng để biết được lịch học và thời gian học&lt;br&gt;
Trường TC CN &amp;amp; QT Đông Đô là nơi đào tạo trung cấp thư viện thiết bị trường học có tiếng tại HN.&lt;br&gt;
– Là 1 trong các trường trực thuộc Sở giáo dục và đào tạo Hà Nội, đào tạo chất lượng, uy tín được xếp hạng tốt trong các trường trung cấp chuyên nghiệp&lt;br&gt;
– Trường thường xuyên mở các lớp chuyên đề thực tế cho sinh viên, để sinh viên không những được học lý thuyết còn được thực hành, khi ra trường không còn bỡ ngỡ.&lt;br&gt;
=&amp;gt;  Xem thêm bài viết Thông tin ngành học trung cấp thư viện  thiết bị để biết thêm môn học ngành học &lt;a href="http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/"&gt;http://tuyensinhdongdo24h.edu.vn/trung-cap-thong-tin-thu-vien-thiet-bi/&lt;/a&gt;&lt;br&gt;
Trường tuyển sinh đối tượng học trung cấp thư viện thiết bị đáp ứng các yêu cầu sau:&lt;br&gt;
– Học sinh có bằng TC, CĐ,ĐH hoặc sơ cấp nghề của 1 ngành khác thì học hệ 1 năm (học 8-10 tháng)&lt;br&gt;
– Học sinh học hết THPT, hoặc có bằng bổ túc THPT học hệ 2 năm (15 tháng)&lt;br&gt;
– Học sinh tốt nghiệp THCS học hệ 3 năm (25 tháng).&lt;br&gt;
Link đăng ký học, tìm hiểu thông tin: &lt;a href="http://tinyurl.com/dang-ky-online68"&gt;http://tinyurl.com/dang-ky-online68&lt;/a&gt;&lt;br&gt;
Hồ sơ xét vào lớp học trung cấp thư viện thiết bị cần phải chuẩn bị:&lt;br&gt;
– Bản sao Bằng tốt nghiệp Phổ thông hoặc Bằng TC, CĐ, ĐH (nếu có)&lt;br&gt;
– Bản sao Bảng điểm hoặc Học bạ phổ thông (có công chứng)&lt;br&gt;
–  Bản sao Giấy khai sinh&lt;br&gt;
–  Ảnh 3×4: 3 chiếc&lt;br&gt;
–  Bản sao CMTND&lt;br&gt;
Địa chỉ tiếp nhận hồ sơ và học tập trường Trung Cấp Công nghệ và Quản Trị Đông Đô:&lt;br&gt;
Số 6 (ngõ 97), Phạm Ngọc Thạch, Kim Liên, Đống Đa, HN&lt;br&gt;
Mọi chi tiết liên hệ: 0989 434 130 -0948 079 040 (cô Hồng)&lt;br&gt;
Zalo: 0989 434 130/ Mail: &lt;a href="mailto:hongbt79@gmail.com"&gt;hongbt79@gmail.com&lt;/a&gt;&lt;br&gt;
 CẢM ƠN CÁC BẠN ĐÃ ĐỌC THÔNG TIN!&lt;/p&gt;

</description>
      <category>trungcathuwuvien</category>
      <category>thongtinthuvien</category>
      <category>thietbitruonghoc</category>
    </item>
    <item>
      <title>Jira Zendesk Integration: Sync Jira Issues and Zendesk Tickets</title>
      <author>Teja Bhutada</author>
      <pubDate>Mon, 12 Jul 2021 07:20:46 +0000</pubDate>
      <link>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</link>
      <guid>https://dev.to/bhutadateja/jira-zendesk-integration-sync-jira-issues-and-zendesk-tickets-1cjn</guid>
      <description>&lt;p&gt;Choosing the right software is one of those critical decisions that impacts your business. Now getting the software to interact and automating workflows can increase that impact and ensure your organization is headed the right way.&lt;/p&gt;

&lt;p&gt;Today, I’ll discuss integrating Jira and Zendesk, showing you how tickets and issues can be shared between your teams seamlessly, letting information propagate from team to team and helping everyone work effectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-integrate-jira-and-zendesk"&gt;
  &lt;/a&gt;
  Why Integrate Jira and Zendesk
&lt;/h2&gt;

&lt;p&gt;It’s common for teams to store data on different systems. There’s often a large amount of overlap between the data, so syncing it benefits the teams and their collaboration.&lt;/p&gt;

&lt;p&gt;Sharing data manually is slow and error prone. An automated system will do it regularly and quickly. It can also log what it does and record any errors.&lt;/p&gt;

&lt;p&gt;A common use case for a Jira Zendesk sync is where a company uses Jira for development and Zendesk for customer service. Many of the issues raised by users will end up as tickets for developers.&lt;/p&gt;

&lt;p&gt;Such integration lets these Zendesk tickets move to Jira automatically. With the right software integration solution, you can decide how you want to send them while allowing users to flag some of them or to set specific conditions for transfer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-a-jira-zendesk-integration-in-6-steps"&gt;
  &lt;/a&gt;
  How to Set up a Jira Zendesk Integration in 6 Steps
&lt;/h2&gt;

&lt;p&gt;I am going to use a software integration solution called &lt;a href="https://exalate.com"&gt;Exalate&lt;/a&gt;. Here’s how to set the integration up in a few simple steps. &lt;/p&gt;

&lt;p&gt;First, you’ll install Exalate on both sides and then connect them. After that, there are a couple of optional steps to get things working exactly how you want. Then you’re ready to go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-exalate-on-jira"&gt;
  &lt;/a&gt;
  Step 1 - Install Exalate on Jira
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4PjGRT4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o82xpw5vj1febj67o8l0.png" alt="exalate for jira"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Jira, click the top right user icon and select ‘Atlassian Marketplace’. Enter ‘Exalate’ in the search field and press return. ‘Exalate Jira Issue Sync &amp;amp; More’ will appear as the top entry.&lt;/p&gt;

&lt;p&gt;Click the blue button to choose a plan and install Exalate. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-install-exalate-on-zendesk"&gt;
  &lt;/a&gt;
  Step 2 - Install Exalate on Zendesk
&lt;/h3&gt;

&lt;p&gt;Now you’ll install Exalate on Zendesk. You can read more about it in the documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nww9e25f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dotuq72sx02t6o98lhi2.png" alt="exalate for zendesk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Zendesk, click the cog in the left hand menu, then click ‘Marketplace’ in the ‘Apps’ section. Type ‘Exalate’ in the search field, then click ‘Exalate’ when its icon appears.&lt;/p&gt;

&lt;p&gt;Click the install button, then select your account on the popup. Click ‘install’ again. A config screen will appear. You can change the details if you like, before clicking ‘Install’ again.&lt;/p&gt;

&lt;p&gt;Exalate will appear in Zendesk’s left-hand menu. Click it, then click ‘Allow’ to give it access to your data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-connection-between-your-instances"&gt;
  &lt;/a&gt;
  Step 3 - Create a Connection Between Your Instances
&lt;/h3&gt;

&lt;p&gt;You can do the next steps from either side. I’ll use Zendesk here. Click the Exalate icon in the left side menu, then click ‘Connections’. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CeRlBtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oowgvk7o922e95zxj3wk.png" alt="jira zendesk integration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the connections screen, click the ‘Initiate Connection’ button. Paste the address of your Jira instance into the ‘Destination instance URL’ field. Exalate will now check your Jira instance to make sure it is installed there too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeetikAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au13bskq5c2ddq0vuj2h.png" alt="initiate a jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then it will present you with several options.&lt;/p&gt;

&lt;p&gt;The basic more (Free Plan) lets you create connections with everything configured automatically. That’s a great way to test Exalate out. The more advanced plans offer a visual and a scripting mode. These let you choose what is shared, and the conditions under which sharing takes place. &lt;/p&gt;

&lt;p&gt;In visual mode, you can do this using an intuitive, easy-to-use interface. And in scripting mode, you use code. Visual mode is easier, but scripting mode lets you add more advanced rules.&lt;/p&gt;

&lt;p&gt;I’ll use the basic mode for now, but will discuss the others briefly in the next steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCMz8awx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2xhxrd922vijfw6b8c2.png" alt="exalate free plan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you choose ‘basic’ and click next, Exalate will ask if you have admin access to the other side of the connection. If so, you’ll be sent there to activate it. You need to pick a project for the connection to work with. Exalate will use that project’s data.&lt;/p&gt;

&lt;p&gt;If not, you’ll generate a code, which you can paste into Jira manually. You do that by going to the connection screen in Jira, clicking ‘Accept Invitation’ and following the steps that appear on-screen.&lt;/p&gt;

&lt;p&gt;You can also optionally enter an issue to sync to test the connection is working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-configure-your-connection-to-share-the-right-data"&gt;
  &lt;/a&gt;
  Step 4 - Configure Your Connection to Share the Right Data
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oPOBPNEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn9gnip8vdx429m6ferj.png" alt="configure jira zendesk sync"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click the ‘edit connection’ button in the connections list, then the rules tab on the next screen, you can see how fields are synced. In visual mode, you can change these mappings, remove what you don’t want and add any others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdYnGX4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppn2i16tgf54d47ihqw3.png" alt="jira zendesk sync rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In script mode, you can create more complex rules. Programmers will appreciate the additional power this provides. &lt;/p&gt;

&lt;p&gt;If you look at the existing rules, you’ll get an idea of how it works. Lines of code assign attributes from one side of the connection to the other.&lt;/p&gt;

&lt;p&gt;If you don’t want an attribute synced, you can comment that line out. You can also match different attributes. Perhaps you want to add the priority to the notes, and set it yourself on the other side. &lt;/p&gt;

&lt;p&gt;The outgoing rules essentially provide the other side of the connection with equivalent attributes. The incoming sync picks out a few attributes to use when creating new issues, based on the information it receives.&lt;/p&gt;

&lt;p&gt;You can add items here, and, again, change anything you like. You could set the assignee to a specific person by adding this line:&lt;/p&gt;

&lt;p&gt;Issue.assignee = “Peter”&lt;/p&gt;

&lt;p&gt;You could also combine items, or use more advanced code to make decisions based on other attributes. The assignee could depend on the priority for example.&lt;/p&gt;

&lt;p&gt;With script rules, you can get very specific and get the connection to do exactly what you want. So don’t be afraid to experiment! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-automated-synchronization-triggers"&gt;
  &lt;/a&gt;
  Step 5 - Create Automated Synchronization Triggers
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9nUhsqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5rxu42up08db6jteyth.png" alt="sync triggers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the ‘Create Trigger’ button on the ‘Triggers’ page and you can set a rule for syncing items. You can select the type of entity and the connection the trigger applies to. In the ‘if’ section you enter rules in Zendesk search syntax to pick out the tickets you want to share. &lt;/p&gt;

&lt;p&gt;Set the ‘Active’ switch, then click ‘Create’ and your trigger will be ready. You can also add notes to help you keep track of things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-start-syncing-issues-and-tickets"&gt;
  &lt;/a&gt;
  Step 6 - Start Syncing Issues and Tickets
&lt;/h3&gt;

&lt;p&gt;Now that your instances are connected and sharing data, feel free to revisit the previous steps to refine your connection’s behaviour. You can add further connections, rules, and triggers and get Exalate doing more and more work for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Integrating platforms can multiply the benefits you get from them, and level up your business. And as you’ve learned today, it is very easy to do. A little work setting things up can save you a lot of time.&lt;/p&gt;

&lt;p&gt;Exalate lets you share data reliably, while maintaining your teams’ autonomy. It is flexible enough to make changes and share the data you want, when you want. &lt;/p&gt;

&lt;p&gt;As well as Jira and Zendesk, it works with several other platforms such as Azure DevOps, Github, and ServiceNow. &lt;a href="https://exalate.com/integrations"&gt;Take a look&lt;/a&gt; and see how it will work for you.&lt;/p&gt;

</description>
      <category>jira</category>
      <category>zendesk</category>
      <category>integration</category>
    </item>
    <item>
      <title>I made a WhatsApp bot to solve Math problems</title>
      <author>Amey Bhavsar</author>
      <pubDate>Mon, 12 Jul 2021 07:20:32 +0000</pubDate>
      <link>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</link>
      <guid>https://dev.to/ameybhavsar/i-made-a-whatsapp-bot-to-solve-math-problems-6ab</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzddc83R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytpl9th2h7uae77fhho.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am fascinated by chatbots. They can carry out any task automatically for you and can be invoked at a single command. I found bots on Discord and was intrigued to make one for WhatsApp. But, WhatsApp doesn't share its official API with everyone. Fortunately, many workarounds exist using WhatsApp Web. I used &lt;a href="https://github.com/pedroslopez/whatsapp-web.js"&gt;&lt;code&gt;whatsapp-web.js&lt;/code&gt;&lt;/a&gt; to ease authentication and messaging controls. It provides a simple WhatsApp Web client built using Node &amp;amp; Puppeteer.&lt;/p&gt;

&lt;p&gt;Using this bot, you can add more functionality and automate anything you'd like. Maybe you want to monitor your servers or get random memes. I found WolframAlpha's computational intelligence fascinating and hence decided to integrate its API with WhatsApp messaging.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#heres-the-github-code-repository-you-can-get-setup-the-bot-and-start-playing-with-it-directly"&gt;
  &lt;/a&gt;
  Here's the Github code repository. You can get setup the bot and start playing with it directly.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;And if like creating things from scratch, let's not waste any time and get started building the bot! 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-a-new-npm-project-in-your-favourite-project-directory"&gt;
  &lt;/a&gt;
  Start a new NPM project in your favourite project directory
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#install-whatsapp-web-packages"&gt;
  &lt;/a&gt;
  Install Whatsapp Web packages.
&lt;/h3&gt;

&lt;p&gt;We need &lt;code&gt;whatsapp-web.js&lt;/code&gt; for WhatsApp client and &lt;code&gt;qrcode-terminal&lt;/code&gt; to parse the auth information into visible QR code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i whatsapp-web.js qrcode-terminal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#boilerplate-code-to-get-started"&gt;
  &lt;/a&gt;
  Boilerplate code to get started.
&lt;/h3&gt;

&lt;p&gt;Create a new file &lt;code&gt;index.js&lt;/code&gt; and add the following code.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode-terminal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// open whatsapp web in a headless browser (no gui)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--no-sandbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// initialize client object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// prints QR code to console when received&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;small&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Client is ready!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// listen for new messages&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will initialize a client instance. We pass &lt;code&gt;puppeteerOptions&lt;/code&gt; to &lt;code&gt;client&lt;/code&gt; to disable a GUI. &lt;br&gt;
Notice the &lt;code&gt;message_create&lt;/code&gt; event. The client listens for any new messages. Right now, we will listen to only &lt;code&gt;!ping&lt;/code&gt; and respond with &lt;code&gt;pong&lt;/code&gt;.&lt;br&gt;
Add the following start script to &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Start the node app with&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esa49oeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9g4boi8ktwumv4m2m43.png" alt="Screenshot from 2021-07-12 12-47-45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see a QR code displayed in the terminal. Scan this QR code with the WhatsApp Web option in the WhatsApp menu.&lt;br&gt;
Once scanned successfully, you should see a message &lt;strong&gt;Client is ready!&lt;/strong&gt; in the console. &lt;br&gt;
If you send &lt;em&gt;!ping&lt;/em&gt; in any direct or group chat, the bot should reply with &lt;em&gt;pong&lt;/em&gt;. If the bot is running with the same account as yours, it will reply as you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: WhatsApp only allows web use from a single session. If already web sessions are active (for e.g.: on a browser), they will automatically become inactive.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWmmyd2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsw6rg59z9sixus7tgl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#responding-to-math-problems"&gt;
  &lt;/a&gt;
  Responding to Math problems
&lt;/h3&gt;

&lt;p&gt;To solve Math problems, we are going to use the &lt;a href="https://products.wolframalpha.com/api/"&gt;Wolfram|Alpha API&lt;/a&gt;.&lt;br&gt;
Sign up for a free account and create a new app on the &lt;a href="https://developer.wolframalpha.com/portal/myapps/"&gt;Developer Portal&lt;/a&gt; by clicking on &lt;strong&gt;Get an App ID&lt;/strong&gt; button.&lt;br&gt;
Give your app a cool name and description.&lt;br&gt;
Remember to note the App ID. You can always check it again by clicking the &lt;strong&gt;Edit&lt;/strong&gt; link on the app card.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqIXM6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rc7e4sjb8gpcnmh6ihyq.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Create a new file called &lt;code&gt;.env&lt;/code&gt; and paste the &lt;code&gt;APPID&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;APPID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;App ID from Wolfram|Alpha API here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To use this variable in our code, we can use the dotenv package. To install &lt;code&gt;dotenv&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, initialize dotenv by adding this line at the top of &lt;code&gt;index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wolfram|Alpha provides official modules to call its functions. Download &lt;a href="https://products.wolframalpha.com/api/libraries/javascript/WolframAlphaAPI.js.html"&gt;WolframAlphaAPI.js&lt;/a&gt; to your project directory. We can then require it and initialize the instance as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APPID&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./WolframAlphaAPI.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;WolframAlphaAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invokeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppeteerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are getting the &lt;code&gt;appid&lt;/code&gt; from process and then initializing WolframAlphaAPI instance &lt;code&gt;wraAPI&lt;/code&gt; which will later handle all functions.&lt;br&gt;
Also, it's a good idea to have invoke keys (basically strings with which messages are prefixed) so the bot can differentiate between normal messages and commands.&lt;/p&gt;

&lt;p&gt;Try running &lt;code&gt;npm start&lt;/code&gt; to make sure no errors are present. You should still see a QR code and after authenticating any new messages should be logged.&lt;/p&gt;

&lt;p&gt;If you find any errors and need help, feel free to comment them and I'll definately take a look!&lt;/p&gt;

&lt;p&gt;Ok, it's been a long way and we are almost done.&lt;/p&gt;

&lt;p&gt;Let's handle bot commands and add reply functionality.&lt;br&gt;
Edit &lt;code&gt;index.js&lt;/code&gt; to handle message.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message_create&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;messageHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// receive all bot commands and reply accordingly&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get message body and trim invokeKey&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invokeKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Querying result for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;handleImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Before you run &lt;code&gt;npm start&lt;/code&gt; again, wait a sec! We also need to define the logic for handling image responses in &lt;code&gt;handleImage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here's how we can do that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i parse-data-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, add the following to &lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;parse-data-url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatsapp-web.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wraAPI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Image request&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// send the rest of the message to Wolfram|Alpha API&lt;/span&gt;
    &lt;span class="nx"&gt;wraAPI&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSimple&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseDataUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MessageMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parsed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#and-were-done"&gt;
  &lt;/a&gt;
  And ... we're done!
&lt;/h4&gt;

&lt;p&gt;Yep, really. That was it. &lt;br&gt;
Start the node app again with &lt;code&gt;npm start&lt;/code&gt;. Once you have authenticated, try this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJQg90Pw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azm1fjo4qi6p18hzeomi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the bot should reply with the correct image output.&lt;br&gt;
Give yourself a pat on the back for finishing this project!&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#find-the-complete-code-for-this-project-on-github-if-you-find-it-interesting-do-star-the-repository"&gt;
  &lt;/a&gt;
  Find the complete code for this project on Github. If you find it interesting, do star the repository.
&lt;/h5&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ameybhavsar24"&gt;
        ameybhavsar24
      &lt;/a&gt; / &lt;a href="https://github.com/ameybhavsar24/ww-wra"&gt;
        ww-wra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Whatsapp Web bot to query and get results to and from WolframAlpha API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I created another WhatsApp bot with Google search, random jokes, compliments and anime quotes! Check out &lt;a href="https://github.com/ameybhavsar24/ww-wra-goog"&gt;ameybhavsar24/ww-wra-goog&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h3&gt;

&lt;p&gt;Now you have a way to programmatically reply to Whatsapp messages. What you can create with it is limitless. I recommend you to check out following ideas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of &lt;a href="https://products.wolframalpha.com/api/"&gt;prebuilt WolframAlpha APIs&lt;/a&gt;. You can get text &amp;amp; audio responses as well as steps for a problem. You can even use their Conversational API to build a bot with back-and-forth dialog.&lt;/li&gt;
&lt;li&gt;Google search responses &lt;/li&gt;
&lt;li&gt;Random joke or roast (remember when you need the perfect comeback on a group debate, you're covered now xD)&lt;/li&gt;
&lt;li&gt;Or anything else you find cool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Right now, you need to scan the QR code for every run but the session can be stored in a JSON file to resume it again. Read more on &lt;a href="https://waguide.pedroslopez.me/features/resuming-sessions"&gt;Resuming Sessions - whatsapp-web.js guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading this tutorial to the very end! I'm happy you were able to build your own WhatsApp bot. &lt;br&gt;
If you faced any errors, feel free to comment on them. Also, your feedback on improving this post is welcome.&lt;/p&gt;

&lt;p&gt;Author: &lt;a class="mentioned-user" href="https://dev.to/ameybhavsar"&gt;@ameybhavsar&lt;/a&gt;
&lt;br&gt;
Github: &lt;a href="https://github.com/ameybhavsar24"&gt;https://github.com/ameybhavsar24&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bot</category>
      <category>node</category>
      <category>api</category>
      <category>wolframalpha</category>
    </item>
  </channel>
</rss>
