<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Working with the RedshiftToS3Transfer operator and Amazon Managed Workflows for Apache Airflow</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Sat, 15 May 2021 18:40:31 +0000</pubDate>
      <link>https://dev.to/aws/working-with-the-redshifttos3transfer-operator-and-amazon-managed-workflows-for-apache-airflow-56n9</link>
      <guid>https://dev.to/aws/working-with-the-redshifttos3transfer-operator-and-amazon-managed-workflows-for-apache-airflow-56n9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this post I am going to take a look at in more detail the launch post of Amazon Managed Workflows for Apache Airflow (MWAA). In the post, a workflow was created to take some source files (in this case, my old friends the Movielens data set) and then move them into Amazon Athena where they were transformed and then uploaded into Amazon Redshift. In this post I am going to add an additional step of taking the tables from that Amazon Redshift database and exporting them to Amazon S3, a common use case that data engineers are asked to do.&lt;/p&gt;

&lt;p&gt;So, we will use Apache Airflow to take a file, transform it, store it in our data warehouse and then export it to our data lake. Let's get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What will you need&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS account with the right level of privileges&lt;/li&gt;
&lt;li&gt;The latest/up to date aws cli - at least version 1.19.73 / 2.24&lt;/li&gt;
&lt;li&gt;A MWAA environment up and running - may I suggest you check out some of my earlier blogs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will find source code for this post at the usual place, &lt;a href="https://github.com/094459/blog-mwaa-redshift"&gt;my residence over on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I ran this and took a look at my AWS bill, it was around $50 for the 5-6 hours I was playing around putting this blog post together. Make sure you cleanup/delete all the resources after you have finished!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is setup the Amazon Redshift cluster. To make this easy, I have created a CDK app that builds everything you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── app.py
├── files
│   └── readme.txt
├── mwaa_redshift
│   ├── mwaa_redshift_stack.py
│   └── mwaa_redshift_vpc.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at the &lt;strong&gt;app.py&lt;/strong&gt; file, it contains the following configuration options you will need to change for your own environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="eu-west-1", account="XXXXXXXXXX")
props = {
    'redshifts3location': 'mwaa-redshift-blog',
    'mwaadag' : 'airflow-094459',
    'mwaa-sg':'sg-01f25764ea72db0f2',
    'mwaa-vpc-id':'vpc-001c3b06c3e39c278',
    'redshiftclustername':'mwaa-redshift-clusterxxx'
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have commented the code, but the first parameter (redshifts3location) is the name of the NEW S3 bucket you will create. This should not exist or the deployment will fail. The next one (mwaadag) is the location of the MWAA Dags folder, the (mwaa-sg) is the name of the security group for your MWAA environment, which the deployment will amend to add an additional ingress rule for Redshift, and finally (mwaa-vpc-id) the VPC id which is used to populate the Redshift subnet group to enable connectivity. Finally, make sure you adjust your environment details (region/account) to reflect your own environment.&lt;/p&gt;

&lt;p&gt;Once you have changed this values for your own environment, you can deploy the stack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deploy MWAA-Redshift-VPC
$ cdk deploy MWAA-Redshift-Cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the deployment has been successful, you should see output which you will use later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ✅  MWAA-RedShift-Cluster

Outputs:
MWAA-RedShift-Cluster.MWAAVPCESG = mwaa-redshift-cluster-mwaavperedshiftxxx-1n5aroq4bokge
MWAA-RedShift-Cluster.RedshiftClusterEndpoint = mwaa-redshift-clusterxxx.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com
MWAA-RedShift-Cluster.RedshiftIAMARN = arn:aws:iam::XXXXXXXXXX:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole2nd63-1HKOCE7NNXXXX
MWAA-RedShift-Cluster.RedshiftSecretARN = arn:aws:secretsmanager:eu-west-1: XXXXXXXXXX:secret:MWAARedshiftClusterSecret9B-SBoNAJOCWZFN-xXxXxX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can have a look at the Amazon Redshift console if you want and you should see the new cluster ready to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update permissions for your MWAA environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that the Amazon Redshift cluster has been setup, we have a new Amazon S3 bucket (in my demo, it is called "mwaa-redshift-blog" - it should have a folder called "files") that will be used to download data from the web, transform it and then ingest into Amazon Redshift.&lt;/p&gt;

&lt;p&gt;We need to add some additional permissions to the MWAA Execution policy so that it can read/write files in the new S3 bucket we are going to be using to download the files (and then later exporting them back). In my MWAA environment, I amend my policy as follows, by adding "mwaa-redshift-blog" to the resources MWAA can access ():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        {
            "Effect": "Allow",
            "Action": [
                "s3:*"
            ],
            "Resource": [
                "arn:aws:s3:::airflow-094459",
                "arn:aws:s3:::airflow-094459/*",
                "arn:aws:s3:::mwaa-redshift-094459",
                "arn:aws:s3:::mwaa-redshift-094459/*",
                "arn:aws:s3:::mwaa-redshift-blog",
                "arn:aws:s3:::mwaa-redshift-blog/*"
            ]
        },    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whist we are talking about permissions, as part of the Redshift cluster deployment, a new IAM Role is created (you can see the name in the outputs once the CDK app has completed). If you take a look at the permissions, you will see it looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::mwaa-redshift-blog/*",
                "arn:aws:s3:::mwaa-redshift-blog",
                "arn:aws:s3:::airflow-094459/*",
                "arn:aws:s3:::airflow-094459"
            ],
            "Effect": "Allow"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have only given it access to our new folder as well as the MWAA Dags folder. We could tighten this up further by removing the specific S3 actions needed, so experiment removing those until you get something that works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-and-running-the-movielens-dag"&gt;
  &lt;/a&gt;
  Uploading and running the movielens DAG
&lt;/h3&gt;

&lt;p&gt;Now that we have all the infrastructure ready to go, it is time to create our workflow/DAG. I have modified the original DAG from the blog post slightly, and you will need to do a few things before we are ready to go.&lt;/p&gt;

&lt;p&gt;You can find the DAG here, &lt;strong&gt;movielens-redshift.py&lt;/strong&gt;. If we take a look at the DAG, we can see the following section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test_http = Variable.get("test_http", default_var="undefined")
download_http = Variable.get("download_http", default_var="undefined")
s3_bucket_name = Variable.get("s3_bucket_name", default_var="undefined")
s3_key = Variable.get("s3_key", default_var="undefined")

redshift_cluster = Variable.get("redshift_cluster", default_var="undefined")
redshift_db = Variable.get("redshift_db", default_var="undefined") 
redshift_dbuser = Variable.get("redshift_dbuser", default_var="undefined")
redshift_table_name = Variable.get("redshift_table_name", default_var="undefined")
redshift_iam_arn = Variable.get("redshift_iam_arn", default_var="undefined")
redshift_secret_arn = Variable.get("redshift_secret_arn", default_var="undefined")

athena_db = Variable.get("demo_athena_db", default_var="undefined")
athena_results = Variable.get("athena_results", default_var="undefined")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we do not have to hard code references, we use Apache Airflow variables to store the configuration details. This makes this workflow much easier to re-purpose.&lt;/p&gt;

&lt;p&gt;In the GitHub repo you will find a file called &lt;strong&gt;variables.json&lt;/strong&gt; which when you look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "athena_results": "athena-results/",
    "download_http": "http://files.grouplens.org/datasets/movielens/ml-latest-small.zip",
    "s3_key": "files/",
    "test_http": "https://grouplens.org/datasets/movielens/latest/",
    "aws_connection": "aws_redshift",
    "demo_athena_db": "demo_athena_db",
    "redshift_airflow_connection": "redshift_default",
    "redshift_cluster": "mwaa-redshift",
    "redshift_db": "mwaa",
    "redshift_dbuser": "awsuser",
    "redshift_table_name": "movie_demo",
    "redshift_iam_arn": "arn:aws:iam::XXXXXXXXXXX:role/RedShift-MWAA-Role",
    "redshift_secret_arn": "arn:aws:secretsmanager:eu-west-1:XXXXXXXXXX:secret:mwaa-redshift-cluster-XXXXX",
    "s3_bucket_name": "mwaa-redshift-blog"

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You &lt;strong&gt;WILL&lt;/strong&gt; need to modify the last three variables (redshift_iam_arn, redshift_secret_arn and s3_bucket_name) using the values that were output as part of the Redshift cluster build. Once amended you can then import these into MWAA via the Apache Airflow UI. Once you have done this, you should have a list of the variables with the values listed. MWAA stores these securely in the MWAA metstore database. If you prefer, you could change the configuration of MWAA to look for variables in AWS Secrets Manager, and then manage these values via CDK perhaps - for this post I am keeping it simple and just using standard variables through the Apache Airflow UI.&lt;/p&gt;

&lt;p&gt;The rest of the DAG is the same as the blog post, and you should deploy this to your DAGS folder via your preferred method (I use a very simple CI/CD system which you can replicate for yourself in my blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/4t"&gt;A simple CI/CD system for your Amazon Managed Workflows for Apache Airflow development workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have uploaded it you should see it in the main Apache Airflow UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triggering the DAG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We should be ready to go now. From the UI you can turn on/enable and then trigger the DAG called &lt;strong&gt;movielens-refshift&lt;/strong&gt; and the workflow should take around 5-10 minutes to complete. If the workflow looks all dark green, then you should be good. &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;If you look at the logs you should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-14 23:01:41,762] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift.transfer_to_redshift 2021-05-14T23:00:03.351510+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-14 23:01:41,873] {{logging_mixin.py:112}} INFO - b8535f99-89a3-4036-9cb3-502a19397f8d
[2021-05-14 23:01:41,898] {{logging_mixin.py:112}} INFO - s3://mwaa-redshift-blog/athena-results/join_athena_tables/b8535f99-89a3-4036-9cb3-502a19397f8d_clean.csv
[2021-05-14 23:01:41,921] {{logging_mixin.py:112}} INFO - copy movie_demo from 's3://mwaa-redshift-blog/athena-results/join_athena_tables/b8535f99-89a3-4036-9cb3-502a19397f8d_clean.csv' iam_role 'arn:aws:iam::704533066374:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole2nd63-1WNFQCTTKXXXX' CSV IGNOREHEADER 1;
[2021-05-14 23:01:42,144] {{logging_mixin.py:112}} INFO - {'ClusterIdentifier': 'mwaa-redshift-clusterxxx', 'CreatedAt': datetime.datetime(2021, 5, 14, 23, 1, 42, 24000, tzinfo=tzlocal()), 'Database': 'mwaa', 'Id': 'cf455937-21ab-4399-95fa-cf3c60703688', 'SecretArn': 'arn:aws:secretsmanager:eu-west-1:xxxxxxxxx:secret:MWAARedshiftClusterSecret9B-687wkB7p4hID-xxxxx', 'ResponseMetadata': {'RequestId': '3c1c47c5-a3b4-4e4f-91a6-a15dd33610b7', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': '3c1c47c5-a3b4-4e4f-91a6-a15dd33610b7', 'content-type': 'application/x-amz-json-1.1', 'content-length': '254', 'date': 'Fri, 14 May 2021 23:01:42 GMT'}, 'RetryAttempts': 0}}
[2021-05-14 23:01:42,173] {{python_operator.py:114}} INFO - Done. Returned value was: OK
[2021-05-14 23:01:42,216] {{taskinstance.py:1070}} INFO - Marking task as SUCCESS.dag_id=movielens-redshift, task_id=transfer_to_redshift, execution_date=20210514T230003, start_date=20210514T230140, end_date=20210514T230142
[2021-05-14 23:01:45,644] {{logging_mixin.py:112}} INFO - [2021-05-14 23:01:45,644] {{local_task_job.py:102}} INFO - Task exited with return code 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at your Amazon S3&lt;/p&gt;

&lt;p&gt;Finally, if you look at Queries from the Redshift console, you should see a successful query appear:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The part of the DAG that does the move of the data to Redshift is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def s3_to_redshift(**kwargs):    
    ti = kwargs['task_instance']
    queryId = ti.xcom_pull(key='return_value', task_ids='join_athena_tables' )
    print(queryId)
    athenaKey='s3://'+s3_bucket_name+"/"+athena_results+"join_athena_tables/"+queryId+"_clean.csv"
    print(athenaKey)
    sqlQuery="copy "+redshift_table_name+" from '"+athenaKey+"' iam_role '"+redshift_iam_arn+"' CSV IGNOREHEADER 1;"
    print(sqlQuery)
    rsd = boto3.client('redshift-data')
    resp = rsd.execute_statement(
        ClusterIdentifier=redshift_cluster,
        Database=redshift_db,
        #DbUser=redshift_dbuser,
        SecretArn=redshift_secret_arn,
        Sql=sqlQuery,
    )
    print(resp)
    return "OK"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In essence, we are not using an Apache Airflow operator but some Python code and boto3 and the redshift-data apis.&lt;/p&gt;

&lt;p&gt;Congratulations, you have now replicated the original launch blog post for MWAA. Now lets take a look at how we move that data to S3.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-and-running-the-movielenss3-dag"&gt;
  &lt;/a&gt;
  Uploading and running the movielens-s3 DAG
&lt;/h3&gt;

&lt;p&gt;You can find the DAG here, &lt;strong&gt;movielens-redshift-s3.py&lt;/strong&gt;. If we take a look at the DAG, we can see the following section looks familiar. We are using the same variables, so nothing new to create:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s3_bucket_name = Variable.get("s3_bucket_name", default_var="undefined")
s3_key = Variable.get("s3_key", default_var="undefined")
redshift_table_name = Variable.get("redshift_table_name", default_var="undefined")
redshift_airflow_connection = Variable.get("redshift_airflow_connection", default_var="undefined")
aws_connection = Variable.get("aws_connection", default_var="undefined")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we DO need to do however, is create an Apache Airflow connection, which will be used by this DAG to understand how to connect to the Redshift cluster we created. In the first DAG, we used boto3 and called the redshift-data apis (constructing the information that allowed us to run the unload task). &lt;/p&gt;

&lt;p&gt;In this DAG we are going to use an operator called &lt;strong&gt;RedshiftToS3Transfer&lt;/strong&gt; and we see in the very simple DAG,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    unload_to_S3 = RedshiftToS3Transfer(
    task_id='unload_to_S3',
    schema='public',
    table=redshift_table_name,
    s3_bucket=s3_bucket_name,
    s3_key=s3_key,
    redshift_conn_id=redshift_airflow_connection,
    unload_options = ['CSV'],
    aws_conn_id = aws_connection
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for this to work we need to create a new connection which contains the details of the Redshift cluster.&lt;/p&gt;

&lt;p&gt;When creating this we will give it a name (Conn ID) which is how we will refer to it in the code. If you look up at the variables, we configured this to be &lt;strong&gt;redshift_default&lt;/strong&gt; (from the variables.json entry "redshift_airflow_connection": "redshift_default"), so we will give it that name.&lt;/p&gt;

&lt;p&gt;For the Conn Type we select Amazon Web Services.&lt;/p&gt;

&lt;p&gt;For the Host, we use the Redshift cluster endpoint - again this was set in the variables above and is output as part of the CDK app deployment.&lt;/p&gt;

&lt;p&gt;For schema we set this to "mwaa" as this is the name of the database we created (so change if you have deviated from the above)&lt;/p&gt;

&lt;p&gt;For username and password, enter "awsuser" (change if you changed yours from the defaults) and then for password, you will need to retrieve the password from the AWS Secret Manager (it will be a randomised string).&lt;/p&gt;

&lt;p&gt;Finally, port should be set to 5439. It should look a little like this&lt;/p&gt;



&lt;p&gt;Save the connection, and it you are now ready to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triggering the DAG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the UI you can turn on/enable and then trigger the DAG called &lt;strong&gt;movielens-refshift-s3&lt;/strong&gt;. If we try and now run the export, what happens? It looks like it hangs, but after a few seconds we see the following in the logs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-12 16:53:23,303] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-12 16:53:23,333] {{logging_mixin.py:112}} INFO - [2021-05-12 16:53:23,333] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-clusterxxx.cq7hpqttXXXX.eu-west-1.redshift.amazonaws.com, Port: None, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-12 16:55:34,323] {{taskinstance.py:1150}} ERROR - could not connect to server: Connection timed out
    Is the server running on host "mwaa-redshift-clusterxxx.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com" (10.192.X.XXX) and accepting
    TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is to be expected. The MWAA and Amazon Redshift clusters are in two different VPCs, and by default there is no access. So what are our options? Well, we have a few..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we could create a VPC and then deploy both MWAA and our Amazon Redshift cluster in that VPC and use security groups to control access at the network level&lt;/li&gt;
&lt;li&gt;we could enable Amazon Redshift in Public mode, and then use security groups to control who can access at the network level&lt;/li&gt;
&lt;li&gt;you could configure your own networking solution to enable connectivity between the MWAA VPC and the Amazon Redshift VPC, for example setting up VPC Peering between the two VPCs&lt;/li&gt;
&lt;li&gt;we could configure Redshift-managed VPC endpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post I am going to look at the last option to addressing this, configuring Amazon Redshift-managed VPC endpoints. You can dive deeper into this topic by checking out this post, &lt;a href="https://aws-oss.beachgeek.co.uk/is"&gt;Enable private access to Amazon Redshift from your client applications in another VPC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring Amazon Redshift-managed VPC endpoints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing we need to do is enable a feature within our Redshift cluster called Cluster Relocation, which we can do through the aws cli - adjust for your cluster name and the aws region you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift modify-cluster --cluster-identifier {your-cluster-name} --availability-zone-relocation --region={your region}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should produce output like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Cluster": {
        "ClusterIdentifier": "mwaa-redshift-clusterxxx",
        "NodeType": "ra3.4xlarge",
        "ClusterStatus": "available",
        "ClusterAvailabilityStatus": "Available",
        "MasterUsername": "awsuser",
        "DBName": "mwaa",
        "Endpoint": {
            "Address": "mwaa-redshift-clusterxxx.cq7hpqttXXXX.eu-west-1.redshift.amazonaws.com",
            "Port": 5439
        },
        "ClusterCreateTime": "2021-05-12T15:45:57.316Z",
        "AutomatedSnapshotRetentionPeriod": 1,
        "ManualSnapshotRetentionPeriod": -1,
        "ClusterSecurityGroups": [],
        "VpcSecurityGroups": [
            {
                "VpcSecurityGroupId": "sg-0a3c2ec446bf3XXX",
                "Status": "active"
            }
        ],
        "ClusterParameterGroups": [
            {
                "ParameterGroupName": "default.redshift-1.0",
                "ParameterApplyStatus": "in-sync"
            }
        ],
        "ClusterSubnetGroupName": "mwaa-redshift-cluster-mwaaredshiftclustersubnets12b38881-18687maiqstqw",
        "VpcId": "vpc-009458f3af3d0XXXX",
        "AvailabilityZone": "eu-west-1b",
        "PreferredMaintenanceWindow": "fri:23:30-sat:00:00",
        "PendingModifiedValues": {},
        "ClusterVersion": "1.0",
        "AllowVersionUpgrade": true,
        "NumberOfNodes": 2,
        "PubliclyAccessible": false,
        "Encrypted": true,
        "Tags": [],
        "KmsKeyId": "arn:aws:kms:eu-west-1:XXXXXXXXXX:key/3644d5bf-b7c1-489b-95d1-e4ebb9816982",
        "EnhancedVpcRouting": false,
        "IamRoles": [
            {
                "IamRoleArn": "arn:aws:iam:: XXXXXXXXXX:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole26FEF-IJCNHR9TMXBN",
                "ApplyStatus": "in-sync"
            }
        ],
        "MaintenanceTrackName": "current",
        "DeferredMaintenanceWindows": [],
        "NextMaintenanceWindowStartTime": "2021-05-14T23:30:00Z"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check that this change has taken effect with the following command (if you do not use jq, then look for the "AvailabilityZoneRelocationStatus" parameter set to "enabled"):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift describe-clusters --cluster-identifier {your-cluster-name} --region={your region} | jq -r '.Clusters[] | .AvailabilityZoneRelocationStatus'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should get "enabled" if it is working ok.&lt;/p&gt;

&lt;p&gt;The CDK app will have created a new Subnet group, the name of which you can see in the outputs. This Subnet group contains the subnet ids for the MWAA VPC, so grab that info as you will need it in the next step when creating the VPC Endpoint itself.&lt;/p&gt;

&lt;p&gt;We can setup the VPC Endpoint connection. Replace the parameters below with:&lt;/p&gt;

&lt;p&gt;{your-cluster-name} - the name of your Redshift cluster&lt;br&gt;
{your-aws-account} - the name of your aws account&lt;br&gt;
{your-subnet-group} - the name of the Redshift subnet group that was mentioned above&lt;br&gt;
{your-vpc-sg} - this is the MWAA security group&lt;/p&gt;

&lt;p&gt;If you want you can change the endpoint-name, when running this it will create one called "mwaa-redshift-endpoint".&lt;/p&gt;

&lt;p&gt;To make this easier, if you check the outputs you should see the command line you need to execute as part of the outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift create-endpoint-access --cluster-identifier {your-cluster-name} --resource-owner {your-aws-account} --endpoint-name mwaa-redshift-endpoint --subnet-group-name {your-subnet-group} --vpc-security-group-ids {your-vpc-sg} --region={your region}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should output the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ClusterIdentifier": "mwaa-redshift-clusterxxx",
    "ResourceOwner": "704533066374",
    "SubnetGroupName": "mwaa-redshift-cluster-mwaavperedshiftcsg-1n5aroq4bokge",
    "EndpointStatus": "creating",
    "EndpointName": "mwaa-redshift-endpoint",
    "Port": 5439,
    "VpcSecurityGroups": [
        {
            "VpcSecurityGroupId": "sg-01f25764ea72db0f2",
            "Status": "active"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will take around 5 minutes to create this and when finished, the output of this will be to create a new VPC Endpoint, which our MWAA environment will have access to. &lt;/p&gt;

&lt;p&gt;This will create a new Redshift endpoint which we will need to use to replace the Apache Airflow connection we created earlier on. To find this endpoint, we use the following command (change the "mwaa-redshift-endpoint" if you used a different name):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift describe-endpoint-access --endpoint-name mwaa-redshift-endpoint | jq '.EndpointAccessList[] | .Address'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should display something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can now update the Connection value in the Apache Airflow UI with this updated Redshift connection value.&lt;/p&gt;

&lt;p&gt;When we try again, we can now see that it works...progress! Alas, we get a different error. You will see something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 18:15:15,428] {{logging_mixin.py:112}} INFO - [2021-05-15 18:15:15,428] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 18:15:16,273] {{logging_mixin.py:112}} INFO - [2021-05-15 18:15:16,273] {{dbapi_hook.py:174}} INFO - 
                    UNLOAD ('SELECT * FROM public.movie_demo')
                    TO 's3://mwaa-redshift-blog/files//movie_demo_'
                    with credentials
                    'aws_access_key_id=ASIA2ICLROKDMYHWTXM3;aws_secret_access_key=QSC6FHRvEIy/I5Vgw+a4aGxatJHdEhUEtXAGYs35'
                    CSV;

[2021-05-15 18:15:16,419] {{taskinstance.py:1150}} ERROR - S3ServiceException:The AWS Access Key Id you provided does not exist in our records.,Status 403,Error InvalidAccessKeyId,Rid DXZAZJB2A16RSAHZ,ExtRid 5rTDV6AnoE8pM8fsx3PTyeJozEUtdPHaxxwsKKJ3ODd5hgb3HvEf9EGoMcge8gKsEhBYqqAMar0=,CanRetry 1
DETAIL:  
  -----------------------------------------------
  error:  S3ServiceException:The AWS Access Key Id you provided does not exist in our records.,Status 403,Error InvalidAccessKeyId,Rid DXZAZJB2A16RSAHZ,ExtRid 5rTDV6AnoE8pM8fsx3PTyeJozEUtdPHaxxwsKKJ3ODd5hgb3HvEf9EGoMcge8gKsEhBYqqAMar0=,CanRetry 1
  code:      8001
  context:   Listing bucket=mwaa-redshift-blog prefix=files//movie_demo_
  query:     0
  location:  s3_utility.cpp:840
  process:   padbmaster [pid=19490]
  -----------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out we need to do one more thing to get this working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring AWS credentials for RedshiftToS3Transfer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now need to configure credentials that the Amazon Redshift cluster will use when running the unload operation. We have a couple of options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can store the aws credentials as a json tuple in the Apache Airflow Connections&lt;/li&gt;
&lt;li&gt;we can store the same credentials but use the native integration with AWS Secrets Manager to do the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep things simple, I am going to use the Apache Airflow (but will create a follow on post that shows how to do the other)&lt;/p&gt;

&lt;p&gt;You will need to create or use an existing IAM user that will be configured to connect to the Redshift cluster to perform the unload transaction. You should create a user with the minimal permissions. You will need to have to hand the "aws_access_key_id" and the "aws_secret_access_key" as you are going to add these to the Apache Airflow connection document.&lt;/p&gt;

&lt;p&gt;From the Connections in the Apache Airflow UI, find the connection document you have configured (if you are following along in this example, I have used one called "aws_redshift" and configured the DAGs to use this too. This is currently empty, so all I need to do is add your keys in the following format in the extras field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"aws_access_key_id" : "XASDASDSADSAFDFDSF", "aws_secret_access_key": "7DSFDSFDSFDSdsfdsfdskfjklsdjfkldsjf"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving this, we can try again.&lt;/p&gt;

&lt;p&gt;Success, the workflow should show dark green, and when we look at the logs we can see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 18:23:26,049] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-15 18:23:26,080] {{logging_mixin.py:112}} INFO - [2021-05-15 18:23:26,079] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 18:23:26,953] {{logging_mixin.py:112}} INFO - [2021-05-15 18:23:26,953] {{dbapi_hook.py:174}} INFO - 
                    UNLOAD ('SELECT * FROM public.movie_demo')
                    TO 's3://mwaa-redshift-blog/files//movie_demo_'
                    with credentials
                    'aws_access_key_id=AKIA2ICLROKDLG3XWX47;aws_secret_access_key=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'
                    CSV;

[2021-05-15 18:23:27,446] {{redshift_to_s3_operator.py:126}} INFO - UNLOAD command complete...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we look at the S3 bucket, we can see the files, in parque format, that have been exported from Redshift.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h3&gt;

&lt;p&gt;As I was testing this out, I came across a couple of errors that you may see so thought I would document what the errors were and how I resolved the issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS cli version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I was running the "aws redshift create-endpoint-access" I got errors and looking at the available options, the "create-endpoint-access" was not available. I was using 1.18.209, so upgraded and the problem was resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S3 Folder issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CDK application creates the bucket and a folder called files, which is used as part of the first DAG. I got the following errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 15:20:24,340] {{standard_task_runner.py:78}} INFO - Job 117232: Subtask check_s3_for_key
[2021-05-15 15:20:24,434] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift.check_s3_for_key 2021-05-15T15:20:19.064158+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-15 15:20:24,581] {{s3_key_sensor.py:88}} INFO - Poking for key : s3://mwaa-redshift-blog/files/
[2021-05-15 15:20:45,206] {{s3_key_sensor.py:88}} INFO - Poking for key : s3://mwaa-redshift-blog/files/
..
..
[2021-05-15 15:20:45,333] {{taskinstance.py:1150}} ERROR - Snap. Time is OUT.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though the folder was their, MWAA and specifically this operator could not see it. In the end I realised that I had forgotten to add the trailing "/" in the destination_key_prefix= part of CDK application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;destination_key_prefix="files/",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I did that, it worked fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Redshift username password error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When triggering the Amazon Redshift to S3 DAG, I got the following error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 11:03:44,466] {{standard_task_runner.py:78}} INFO - Job 117231: Subtask unload_to_S3
[2021-05-15 11:03:44,569] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift-s3.unload_to_S3 2021-05-15T11:03:39.979947+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-15 11:03:44,693] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-15 11:03:44,722] {{logging_mixin.py:112}} INFO - [2021-05-15 11:03:44,722] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: www-endpoint-smz89t0ahk5ieuxze2yq.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 11:03:45,493] {{taskinstance.py:1150}} ERROR - FATAL:  password authentication failed for user "awsuser"
FATAL:  password authentication failed for user "awsuser"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resolution was simple, I had forgotten to add the password to the connection document in MWAA, so all I had to do was obtain the password from AWS Secrets Manager, and then store that in the password field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Redshift connection times out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While I was getting the Redshift-managed VPC endpoint setup, when I triggered the Amazon Redshift to S3 DAG, the task stayed green (running) for a while, and eventually failed with the following error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-14 23:40:34,440] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift-s3.unload_to_S3 2021-05-14T23:40:29.106506+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-14 23:40:34,602] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-14 23:40:34,636] {{logging_mixin.py:112}} INFO - [2021-05-14 23:40:34,635] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: aaa-endpoint-bg5whiw3h4rvuimskvn2.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-14 23:42:44,915] {{taskinstance.py:1150}} ERROR - could not connect to server: Connection timed out
    Is the server running on host "aaa-endpoint-bg5whiw3h4rvuimskvn2.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com" (10.192.21.140) and accepting
    TCP/IP connections on port 5439?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It took me a while to figure this out, but the solution involved a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup a Redshift Subnet Group with the subnets from the MWAA environment&lt;/li&gt;
&lt;li&gt;enable the MWAA security group to allow inbound Redshift traffic (port 5439)&lt;/li&gt;
&lt;li&gt;setup the Redshift-managed VPC endpoint setup with the correct environment - you need to do this AFTER the subnet group has been setup, otherwise only the existing Redshift VPC will appear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this post I have shown you how you can use and integrate Apache Airflow to orchestrate data engineering tasks across a number of AWS services, importing data from origin to Amazon S3, transforming it via Amazon Athena, creating tables in Amazon Redshift before exporting it to an Amazon S3 bucket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean up
&lt;/h3&gt;

&lt;p&gt;Make sure you delete all the resources, which you can do quickly by running these commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
$ cdk destroy MWAA-Redshift-Cluster
$ cdk destroy MWAA-Redshift-VPC

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then emptying/deleting the Amazon S3 bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Survey&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://eventbox.dev/survey/7RROR4Q"&gt;complete this very short survey&lt;/a&gt; to let me know if you found this useful and how I can make them even better. &lt;/p&gt;

&lt;p&gt;Many thanks!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>opensource</category>
    </item>
    <item>
      <title>VimGore : an interactive game to learn vim </title>
      <author>Pratham Sharma</author>
      <pubDate>Sat, 15 May 2021 18:13:44 +0000</pubDate>
      <link>https://dev.to/ps173/vimgore-an-interactive-game-to-learn-vim-10kn</link>
      <guid>https://dev.to/ps173/vimgore-an-interactive-game-to-learn-vim-10kn</guid>
      <description>&lt;p&gt;So I wanted to try MERN stack and thus started out with this idea of creating a game that will provide you with snippets of code which will be corrected by the user using vim mode. So this idea was enough to give me motivation to jump into the project state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQB62dbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfd54mffjm6ondg69lzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQB62dbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfd54mffjm6ondg69lzk.png" alt="VimGore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So below is the link to the app. It is not fully featured and I think that it is missing lot of stuff but will be happy to get a overall feedback. &lt;/p&gt;

&lt;p&gt;If you have any issues then report in repo :)&lt;/p&gt;

&lt;p&gt;For now this is vimgore&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ps173/VimGore"&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimgore.netlify.app/"&gt;live site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(also this was my first proper full-stack project)&lt;br&gt;
Thanks For Reading 😁️&lt;br&gt;
and keep up the hardwork 💪&lt;/p&gt;

</description>
      <category>vim</category>
      <category>react</category>
      <category>node</category>
      <category>showdev</category>
    </item>
    <item>
      <title>10 Storybook Best Practices</title>
      <author>Rafael Rozon</author>
      <pubDate>Sat, 15 May 2021 17:55:25 +0000</pubDate>
      <link>https://dev.to/rafaelrozon/10-storybook-best-practices-5a97</link>
      <guid>https://dev.to/rafaelrozon/10-storybook-best-practices-5a97</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGmG0J4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lrouk11aqd8t768cv1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGmG0J4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lrouk11aqd8t768cv1j.png" alt="Storybook Best Practices Cover Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a post about Storybook and conventions. It is based on my experience using Storybook over several years and from the experiences of other developers. The best practices I define here aren't silver bullets that will fix and improve every project. They're a baseline of ideas and conventions that I think are worth trying. Hopefully, they can help you and your team have a better developer experience and ultimately deliver better software to the world.&lt;br&gt;
I assume you know what Storybook is and that you have some experience with it. The ideas here can be applied to apps of any size and are not particular to any specific framework (e.g. React or Vue), but I wrote them with a large app in mind with a large team and multiple contributors.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#1-one-storybook-file-per-component"&gt;
  &lt;/a&gt;
  1. One Storybook File Per Component
&lt;/h2&gt;

&lt;p&gt;The story file should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one Default story&lt;/li&gt;
&lt;li&gt;a Playground story&lt;/li&gt;
&lt;li&gt;and other stories that reflect a specific state or API of the component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default story displays the component with only its required props defined. It creates a visual baseline representation for everyone. So, ideally, when people think about a specific component, they will remember what's reproduced by the default story.&lt;br&gt;
The playground story is used to help consumers of the component try different combinations of props and see how the component responds. This can be implemented in Storybook version 5 and below using &lt;a href="https://www.npmjs.com/package/@storybook/addon-knobs"&gt;the knobs add-on&lt;/a&gt;. You provide knobs for all props of the component:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For the latest version of Storybook (version 6), the playground story can be written using the new &lt;a href="https://storybook.js.org/docs/react/writing-stories/args"&gt;Args feature&lt;/a&gt;. It looks something like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, the other stories should reflect a specific state or API of the component. For example, if we have a button component with a type property that accepts the values &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;secondary&lt;/code&gt;, &lt;code&gt;tertiary&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;. Then, we would have four stories: &lt;code&gt;Button/Primary&lt;/code&gt;, &lt;code&gt;Button/Secondary&lt;/code&gt;, &lt;code&gt;Button/Tertiary&lt;/code&gt;, and &lt;code&gt;Button/Error&lt;/code&gt;. There are a few reasons to follow this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is easier to share a link of a component that precisely defines a state that you want to reference, which is useful when communicating with QA and designers.&lt;/li&gt;
&lt;li&gt;If Storybook is combined with testing tools, like snapshot testing or visual regression testing, each story becomes a unit testing. If one of them fails, you know exactly which one.&lt;/li&gt;
&lt;li&gt;By making the stories explicit, we avoid hiding components states under the knobs.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2-colocation-a-storybook-file-should-stay-with-its-component"&gt;
  &lt;/a&gt;
  2. Co-location: A Storybook File Should Stay With Its Component
&lt;/h2&gt;

&lt;p&gt;Code that changes for the same reasons should be kept together. In that sense, the Storybook file for a given component will very likely change when that component changes — so keep them together. Also, if the component folder is moved to another place in the project or even to another project, it will be easier to move the Storybook file along.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-naming-convention"&gt;
  &lt;/a&gt;
  3. Naming Convention
&lt;/h2&gt;

&lt;p&gt;Name the storybook files &lt;code&gt;[ComponentName].stories.[js|jsx|tsx]&lt;/code&gt;. Honestly, the important thing is that you and your team agree on a naming convention, and everyone follows it. I like to include the name of the component in the file name because it makes it easier to find in the code editor. Otherwise, I could end up with five files called &lt;code&gt;index.stories.tsx,&lt;/code&gt; and then I'd have to open each one or perform a search to find the right one.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-new-components-must-have-a-storybook"&gt;
  &lt;/a&gt;
  4. New Components Must Have a Storybook
&lt;/h2&gt;

&lt;p&gt;It helps to create a library of components and gain the benefits of having one. If your team has a PR checklist, Storybook could be one of the items to check before merging the code into master.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-prefer-the-component-story-format"&gt;
  &lt;/a&gt;
  5. Prefer the Component Story Format
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/api/csf"&gt;Component Story Format or CSF&lt;/a&gt; is the recommended way to write stories according to the Storybook maintainers. It's basically a set of conventions to be used in the story files. Instead of using the &lt;code&gt;storiesOf&lt;/code&gt; API, you write regular JavaScript functions and export them. Storybook converts the named and the default exports to stories. One big advantage of the CSF format is that the code looks cleaner and is easier to read. Instead of the Storybook boilerplate, you can focus on what your code is actually doing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-architect-stories-as-you-architect-your-codebase"&gt;
  &lt;/a&gt;
  6. Architect Stories as You Architect Your Codebase
&lt;/h2&gt;

&lt;p&gt;When you use Storybook, you should have a clear idea of how your app is organized. I got this from &lt;a href="https://dev.to/loicgoyet"&gt;Loïc Goyet&lt;/a&gt; in the awesome post &lt;a href="https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o"&gt;How I manage to make my Storybook project the most efficient possible&lt;/a&gt;. His idea is to make the stories menu reflect the location of the stories in the app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jLINmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8tei1a4qb168dr1uqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jLINmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8tei1a4qb168dr1uqv.png" alt="Storybook Menu Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see how the menu in Storybook above aligns with the app folder structure?&lt;br&gt;
This structure will help you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find stories more easily&lt;/li&gt;
&lt;li&gt;Understand how the code is organized.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If co-location is used in your app, keeping related items together, the folder structure gives you an idea of how the app is structured. But do not confuse folder structure with architecture. They're not the same thing.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#7-consistent-environment"&gt;
  &lt;/a&gt;
  7. Consistent Environment
&lt;/h2&gt;

&lt;p&gt;When we develop in Storybook, we want isolation, but it is very likely that we still use some resources shared with the app, such as images, data, CSS, icons, translations, etc. And, this is good because we want to make sure that our components will behave in the same way when used in the context of the app. For example, if a localization library is used in the app, it can probably be reused with the same configuration inside Storybook. Another example: If third-party CSS is used, it should be included inside Storybook because we want to determine if that CSS will conflict with our CSS. The objective is to avoid surprises when using the component in the app.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#8-keep-data-under-control"&gt;
  &lt;/a&gt;
  8. Keep Data Under Control
&lt;/h2&gt;

&lt;p&gt;If you notice that you need the same data in many different stories, it may be good to create a mocks folder and add JavaScript files that export factory functions that will create reusable data. Let us suppose that we have an avatar component that displays the user image, name, anchor, and this component is used in multiple places. We could have a file named mocks/user.js which has something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overrides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@someuser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://webapp/static/images/someuser.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the factory function? To make sure we are getting a new object every time. If we imported an object, we could accidentally modify it and cause wrong results. I have seen it. Also, here I'm using &lt;code&gt;Object.assign&lt;/code&gt; as an example, but you may need something more sophisticated that handles the merging of arrays and objects. &lt;a href="https://lodash.com/docs/4.17.15#mergeWith"&gt;Lodash&lt;/a&gt; and &lt;a href="https://ramdajs.com/docs/#merge"&gt;RamdaJS&lt;/a&gt; have functions for that — RamdaJS is awesome!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-create-your-own-decorators-and-addons-when-it-makes-sense"&gt;
  &lt;/a&gt;
  9. Create Your Own Decorators and Add-ons ( When it Makes Sense)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/writing-stories/decorators"&gt;Decorators&lt;/a&gt; are basically functions that wrap another piece of code and give it extra functionality. In Storybook decorators can be applied to individual stories (called Story decorators), all stories of a component (called Component Decorators), or to all stories in the project (called Global Decorators). The baseline is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is common in React apps to have providers wrapping the app or portions of the app. If you need, for example, to wrap your components in a provider, a decorator is the way to go. Or, if you want to add a margin to some component so that it does not touch the borders of the canvas, you could have a decorator like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withMargin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/api/addons"&gt;Add-ons&lt;/a&gt; are extensions to Storybook that can help you to configure and extend Storybook in many fancy ways. It's more involving to develop add-ons, but it's not hard, and you have more power and flexibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-take-storybook-use-and-maintenance-seriously"&gt;
  &lt;/a&gt;
  10. Take Storybook Use and Maintenance Seriously
&lt;/h2&gt;

&lt;p&gt;Storybook can be of huge help in developing a UI because it encourages you to focus on the interface of your components, which will help you have more generic and lean components. Generic and lean components are flexible and can be used in different contexts. In the end, you may need fewer components if you have some flexible components. Fewer components mean less code; less code means less chance of bugs; less chance of bugs means happier users and happier developers. So, maintain and keep Storybook running and well oiled, don't let broken stories stick around, and refactor and rearrange things when they get messy.&lt;br&gt;
In my experience, things only are improved when people take ownership. If there's no group of people responsible for taking care of Storybook, it won't be easy to keep it evolving and benefit from using it. Everyone is responsible for contributing and following the team's conventions, but it may be helpful to assign someone, or a group of people, as a Storybook maintainer. The Storybook maintainer can hold others accountable for following the conventions — they can improve the use of Storybook in your team.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I collected some ideas after using Storybook for five years and from the experience of other developers smarter than me. I truly hope you learned something new and are excited to try Storybook or make it better for you and your team. If you have any questions or suggestions to make this article better, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/"&gt;https://storybook.js.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnstorybook.com/"&gt;https://www.learnstorybook.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o"&gt;https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hichroma.com/the-delightful-storybook-workflow-b322b76fd07?gi=48bcfdd9231b"&gt;https://blog.hichroma.com/the-delightful-storybook-workflow-b322b76fd07?gi=48bcfdd9231b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnstorybook.com/design-systems-for-developers/react/en/distribute/"&gt;https://www.learnstorybook.com/design-systems-for-developers/react/en/distribute/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.richsoni.com/posts/2019-01-29-storybook-architecture-audit/"&gt;https://www.richsoni.com/posts/2019-01-29-storybook-architecture-audit/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lauthieb/awesome-storybook"&gt;https://github.com/lauthieb/awesome-storybook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>storybook</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introduction to the Jamstack - the New Frontier in Web Development</title>
      <author>darrendube</author>
      <pubDate>Sat, 15 May 2021 17:33:49 +0000</pubDate>
      <link>https://dev.to/darrendube/introduction-to-the-jamstack-the-new-frontier-in-web-development-e07</link>
      <guid>https://dev.to/darrendube/introduction-to-the-jamstack-the-new-frontier-in-web-development-e07</guid>
      <description>&lt;p&gt;As a Web Developer, you've probably heard of the Jamstack. It's the buzzword in web development. But what exactly is it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jamstack is an abbreviation that stands for JavaScript, APIs, and Mark-up. It is an architecture that promises, among other things, faster, cheaper, and more secure sites. And, increasingly, more and more websites are switching over.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To be clear, JAMstack is not a specific technology, nor is it driven or controlled by any single entity. It's a community-led movement, an architecture with a collection of standards and best practices that gives faster and more secure websites. &lt;/p&gt;

&lt;p&gt;But to understand why it's so revolutionary, we have to understand what stacks are, what technologies traditional websites use, and why they are becoming more and more obsolete. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://darrendube.com/blog/web-development/jamstack#ddfl"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcaVQ6dQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6pah5cy2ff857d1g7j7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legacy-websites"&gt;
  &lt;/a&gt;
  Legacy websites
&lt;/h2&gt;

&lt;p&gt;There are many Web Development stacks out there: &lt;a href="https://www.liquidweb.com/kb/what-is-a-lamp-stack/"&gt;LAMPstack&lt;/a&gt;, &lt;a href="https://www.mongodb.com/mean-stack"&gt;MEANstack&lt;/a&gt;, &lt;a href="https://www.hostinger.com/tutorials/what-is-wamp"&gt;WAMPstack&lt;/a&gt;, among others. These refer to the technologies used such as Linux, MySQL, and PHP. While they have their different technologies and applications, they all pretty much work in the same way: legacy websites are programs that run on a server, and query data from a database, building each page every time a user loads a page. WordPress websites follow this architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auC3B902--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/s5rRv51/legacy-websites-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auC3B902--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/s5rRv51/legacy-websites-diagram.png" alt="Legacy-architecture-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach has its advantages - they tend to be &lt;b&gt;easier&lt;/b&gt; for the average person to run, they can be &lt;b&gt;highly dynamic&lt;/b&gt; because the page is only built at load time, and they are &lt;b&gt;less reliant&lt;/b&gt; on third-party providers for dynamic functionality - since they run on a literal server!&lt;/p&gt;

&lt;p&gt;However, legacy websites tend to be slow (especially for those on unstable internet connections), harder and more expensive to scale, and less secure. So, in 2015, Mathias Biilmann, the CEO of Netlify, coined the term &lt;em&gt;JAMstack&lt;/em&gt;, which was later renamed &lt;em&gt;Jamstack&lt;/em&gt;, referring to a new Web architecture that he and Chris Bach, a co-founder, were working on at Netlify, and that other Web developers were starting to explore. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-jamstack"&gt;
  &lt;/a&gt;
  The Jamstack
&lt;/h2&gt;

&lt;p&gt;Instead of a server processing a request, a pre-built HTML page is served from a Content Delivery Network (CDN) and delivered to the user. No server involved. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGUDwRS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YZT5vw2/jamstack-websites-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGUDwRS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YZT5vw2/jamstack-websites-diagram.png" alt="Jamstack-architecture-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, just because no server is involved in the serving of webpages doesn't mean no servers are involved in the process at all. To understand why this is, we have to delve into the three component parts of Jamstack:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#j-is-for-javascript"&gt;
  &lt;/a&gt;
  J is for &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Introduced to the world in 1995 by Netscape, JavaScript has become synonymous with the web. It provides a way to code logic into websites, allowing them to respond to users actions (for example: checkboxes, form submissions, calls to action) - every time a websites does something more than just display static information, you have JavaScript to thank for it!&lt;/p&gt;

&lt;p&gt;Jamstack uses client-side JavaScript, with libraries like React and Vue, to design and make web apps that feel and act like mobile apps. &lt;/p&gt;

&lt;p&gt;You might already be familiar with popular JavaScript UI libraries like &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;, and &lt;a href="https://angular.io"&gt;Angular&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-is-for-apis"&gt;
  &lt;/a&gt;
  A is for &lt;strong&gt;APIs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Application Programming Interfaces (APIs)&lt;/strong&gt; are what allow two or more programs to talk to each other. They are how things like cryptocurrency trading bots can communicate with cryptocurrency exchanges without a human in the mix.&lt;/p&gt;

&lt;p&gt;Just because we've decoupled the website's frontend from its backend doesn't mean we can't make use of any server functionality. Third-party services can provide dynamic functionality like database access, payments, and authentication. Jamstack takes the &lt;b&gt;microservices&lt;/b&gt; approach, which is different from the monolithic approach (I go through this in more detail below).&lt;/p&gt;

&lt;p&gt;Headless CMSs are another example of APIs. Normal &lt;b&gt;&lt;a href="https://kinsta.com/knowledgebase/content-management-system/"&gt;Content Management Services&lt;/a&gt; (CMSs)&lt;/b&gt; (like WordPress) deal with both the website content and the frontend. Jamstack decouples this, meaning Headless CMSs deal only with the content, leaving the frontend to &lt;a href="http://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;Static Site Generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The decoupling of these services from the actual websites gives greater portability, increased speed, and a lower risk of attack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#m-is-for-markup"&gt;
  &lt;/a&gt;
  M is for &lt;strong&gt;Mark-up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The M part of Jamstack is probably its most important part. It stands for &lt;strong&gt;Mark-up&lt;/strong&gt;. This means that Static HTML files are served to the user. &lt;/p&gt;

&lt;p&gt;But this not only includes how the website is served to the user - almost all websites have JavaScript, APIs, and Mark-up in some form - M also includes how the pages are made in the first place. There are generally two approaches to generating Static HTML files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Hand typing:&lt;/strong&gt; You can type out the HTML files yourself. This is more suited to small, simple websites.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static Site Generators:&lt;/strong&gt; This is the most popular approach for Jamstack websites. An SSG generates Static HTML files from raw data (usually written in a lightweight mark-up language like Markdown) and templates. I go into this in more detail &lt;a href="http://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;in another article&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of the functionality and advantages that dynamic websites have over conventional static ones, static websites often get a bad rap for being too basic. While Jamstack sites are static in the sense that Static HTML files are served to the end user, &lt;strong&gt;APIs&lt;/strong&gt; and &lt;strong&gt;Mark-up&lt;/strong&gt; also make Jamstack websites comparably dynamic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdns"&gt;
  &lt;/a&gt;
  CDNs
&lt;/h2&gt;

&lt;p&gt;Unlike traditional web servers, which are usually in one place and serve dynamic, server-generated pages, &lt;strong&gt;Content Delivery Networks (CDNs)&lt;/strong&gt; are geographically distributed, storing website data on several servers around the world so requests can be serviced from the server geographically closest to the user. CDNs are still servers, but because they are distributed, you can't really pinpoint the exact physical server your website is hosted on.&lt;/p&gt;

&lt;p&gt;CDNs themselves can't generate web pages, but since Jamstack web pages are pre-built, they can be served from CDNs. &lt;/p&gt;

&lt;p&gt;Because CDNs host static sites, they don't have bandwidth and processing limitations, so this lowers the risk of your website going down. It also makes CDNs cheaper - in fact, most provide free hosting!&lt;/p&gt;

&lt;p&gt;Examples of serverless hosting providers are &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; and &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-microservices-vs-monolithic-architecture"&gt;
  &lt;/a&gt;
  The Microservices vs. Monolithic Architecture
&lt;/h2&gt;

&lt;p&gt;Traditional websites are, simply put, built as a unit. They have all their functionality - comments, contact forms, authentication - built in. This functionality can still be in the form of plugins (like in the case of WordPress) but they are still a part of the overall website structure, and not external. This model is called a &lt;strong&gt;monolithic architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Jamstack takes the &lt;strong&gt;microservices&lt;/strong&gt; approach where parts of a website are broken up and outsourced to third parties through APIs. Examples can be using a payments provider like Square or Paypal to process payments, or using Auth0 for authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNk0X5ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BGQD2W5/monolithic-vs-microservices.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNk0X5ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BGQD2W5/monolithic-vs-microservices.png" alt="microservices-vs-monolithic-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A useful analogy created by &lt;a href="https://thenewstack.io/microservices-vs-monoliths-an-operational-comparison/"&gt;The New Stack&lt;/a&gt; is that of an air ticket booking website. The process of booking a ticket contains many sub-steps which, in this scenario, are &lt;em&gt;reserving the ticket&lt;/em&gt;, &lt;em&gt;billing the customer&lt;/em&gt;, and sending a &lt;em&gt;confirmation email&lt;/em&gt; that the ticket is booked. In a monolithic architecture, all three processes would be built into a single application. In a microservices architecture, however, each stage works independently of the other and can be outsourced to third parties. The core function of the website might be to book the ticket, but billing could be outsourced to a payments company like Stripe, and emailing could be outsourced to an email company like Mailchimp, all through APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jamstack websites are usually called Static Sites because of how they are served to the user, but this sometimes gives the misconception that they can't have dynamic functionality when in fact they &lt;strong&gt;can&lt;/strong&gt; through the use of APIs and Headless CMSs.&lt;/p&gt;

&lt;p&gt;The Jamstack is a movement that's spreading across the web development world. Many established Web Developers &lt;a href="https://www.prnewswire.com/news-releases/modern-websites-are-built-on-the-jamstack-architecture-due-to-performance-reliability-and-speed-of-developer-workflows-according-to-industry-survey-by-netlify-301065730.html"&gt;are switching over&lt;/a&gt;. Maybe it's time you switched over too, don't you think?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;Static Site Generators - A WordPress alternative&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://jamstack.wtf"&gt;WTF is Jamstack?&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://netlify.com/blog"&gt;Netlify's Blog&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="#ddfl"&gt;INFOGRAPHIC - The Jamstack, in a nutshell&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>react</category>
    </item>
    <item>
      <title>React Tailwind - Free Dashboards</title>
      <author>Sm0ke</author>
      <pubDate>Sat, 15 May 2021 17:25:03 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-tailwind-free-dashboards-3mkn</link>
      <guid>https://dev.to/sm0ke/react-tailwind-free-dashboards-3mkn</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents a curated list with open-source &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; styled with &lt;strong&gt;Tailwind CSS&lt;/strong&gt;. For newcomers, &lt;strong&gt;React&lt;/strong&gt; is a popular library for coding UI interfaces from Facebook. All products can be downloaded from Github and used without a registration lock for unlimited hobby &amp;amp; commercial products. This is an open list, feel free to suggest more dashboards in the comments. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;(Free) &lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React&lt;/a&gt; - blazing-fast Tailwind Dashboard&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://windmillui.com/dashboard-react"&gt;Windmill&lt;/a&gt; - a PWA ready React dashboard&lt;/li&gt;
&lt;li&gt;(Free) &lt;a href="https://github.com/cruip/tailwind-dashboard-template"&gt;Mosaic Lite&lt;/a&gt; - open-source dashboard template&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published here on Dev.to&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notus-react"&gt;
  &lt;/a&gt;
  Notus React
&lt;/h2&gt;

&lt;p&gt;This open-source product is provided by Creative-Tim, a well-known agency and UI Kits provider. Notus React is built with over frontend 100 individual components, giving you the freedom to choose and combine.&lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/notus-react"&gt;Notus React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/32JqufV"&gt;Notus React&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V2uEvNyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptahgeip3c1njfajxqbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V2uEvNyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptahgeip3c1njfajxqbh.png" alt="React Tailwind Dashboard - Notus."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You will save a lot of time going from prototyping to full-functional code because all elements are implemented. This Free Tailwind CSS and React Template is coming with prebuilt examples, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgCTplld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60zfhv4p4f7kjiftm316.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgCTplld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60zfhv4p4f7kjiftm316.png" alt="Notus Components - Styled with Tailwind CSS."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW38C0-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxlzz9s7lvgpuvf49d25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZW38C0-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxlzz9s7lvgpuvf49d25.png" alt="Notus - User Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#windmill"&gt;
  &lt;/a&gt;
  Windmill
&lt;/h2&gt;

&lt;p&gt;Windmill Dashboard comes with a blazing fast UI styled with Tailwind, PWA support, and integrations for Charts.js and Heroicons.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🦮 Throughly accessible (developed using screen readers)&lt;/li&gt;
&lt;li&gt;🌗 Dark theme enabled (load even different images based on theme)&lt;/li&gt;
&lt;li&gt;🧩 Multiple (custom) components&lt;/li&gt;
&lt;li&gt;⚡ Code splitting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q87X1pdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csr9cous84462wzozmww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q87X1pdi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csr9cous84462wzozmww.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;UI Kit&lt;/em&gt; - Windmill Dashboard React is built on top of Windmill React UI - open-source component library based on Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Accessibility-first&lt;/em&gt; - the product was developed listening to real screen readers, focus traps and keyboard navigation are available everywhere.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9kGdrTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvyxfj6cmr33orswnl85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9kGdrTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvyxfj6cmr33orswnl85.png" alt="Tailwind Cards - Windmill Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mosaic-lite"&gt;
  &lt;/a&gt;
  Mosaic Lite
&lt;/h2&gt;

&lt;p&gt;Responsive dashboard template built on top of Tailwind CSS and fully coded in React. It comes with several pre-coded charts (built with Chart.js 3) and widgets, and it's a great starting for anyone who wants to create a user interface for SaaS products, administrator dashboards, modern web apps, and more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cruip/tailwind-dashboard-template"&gt;Mosaic Lite&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mosaic.cruip.com/"&gt;Mosaic Lite&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ4jO6K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x53moon2oue7379b62b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ4jO6K7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x53moon2oue7379b62b.png" alt="Mosaic Lite - Open-source React Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4PNL4SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u1ueghk5dftl8cdjf9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4PNL4SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u1ueghk5dftl8cdjf9m.png" alt="Mosaic Lite - Widgets styled with Tailwind."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; - official website&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Weather forecast card design using Jetpack Compose</title>
      <author>Mahendran</author>
      <pubDate>Sat, 15 May 2021 17:13:02 +0000</pubDate>
      <link>https://dev.to/mahendranv/weather-forecast-card-design-using-jetpack-compose-2m1h</link>
      <guid>https://dev.to/mahendranv/weather-forecast-card-design-using-jetpack-compose-2m1h</guid>
      <description>&lt;p&gt;Cross posting from my &lt;a href="https://mahendranv.github.io/android/2021-05-15-weather-card-compose/"&gt;blog&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#weather-forecast-card-design-using-jetpack-compose"&gt;
  &lt;/a&gt;
  Weather forecast card design using Jetpack Compose
&lt;/h1&gt;

&lt;p&gt;Horizontal weather cards are the second portion in my forecast screen. It contains a message, relative timestamp and an image depicting the weather. Since I don't have images in handy, I picked one and used for all the cards. I got creative with messages though.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eldisYLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5niaz21lg6kw8cyel06.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eldisYLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5niaz21lg6kw8cyel06.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-box-layout"&gt;
  &lt;/a&gt;
  Why box layout?
&lt;/h2&gt;

&lt;p&gt;We have card and an image stacked in z order and they overlap. A constraint layout can be used to build this card, but I wanted to try box. It's like FrameLayout to me. Also using constraint layout for simple layout is an overkill. Be it android native UI or Compose.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#designing-a-weather-card"&gt;
  &lt;/a&gt;
  Designing a Weather Card
&lt;/h2&gt;

&lt;p&gt;The overall composable blueprint looks like in below image. To understand better, let's build this layout bottom-up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77rGPrN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2KDwWXj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77rGPrN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2KDwWXj.png" alt="image-20210515164325569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-content"&gt;
  &lt;/a&gt;
  Card content
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// card content&lt;/span&gt;
&lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nc"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;// Time&lt;/span&gt;
    &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// "20 minutes ago",&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MaterialTheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caption&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nc"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;// Message&lt;/span&gt;
    &lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// "If you don't want to get wet today, don't forget your umbrella.",&lt;/span&gt;
        &lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MaterialTheme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;typography&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nc"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Two labels wrapped in a &lt;code&gt;Column&lt;/code&gt; with spacer makes our card content. Spacers are added in between the elements to make up required spacing between the labels and the parent (&lt;code&gt;Column&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4SCuqa6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JYZ6UAQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4SCuqa6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JYZ6UAQ.png" alt="image-20210515165656824"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#card-design"&gt;
  &lt;/a&gt;
  Card design
&lt;/h3&gt;

&lt;p&gt;Now put a card around it and apply few modifiers to it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a shape —  &lt;code&gt;RoundedCornerShape&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;top padding — to make space for weather icon on top right
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RoundedCornerShape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtySHXtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/krP8dvl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtySHXtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/krP8dvl.png" alt="image-20210515171455191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#putting-all-in-a-box"&gt;
  &lt;/a&gt;
  Putting all in a Box
&lt;/h3&gt;

&lt;p&gt;Box layout stacks all the elements in given z order. Most recent one will be on the top. So, let's put the Card first then the Image.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;
    &lt;span class="nc"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;painter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;painterResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cloudy&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;contentDescription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"weather overlap image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TiIwaXu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nT9nSFd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TiIwaXu1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nT9nSFd.png" alt="image-20210515172249253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm... The rain wasn't supposed to shower there. Let's pull it to the right and shift a bit to the left. Children of Box has access to few properties to help with alignment inside the container.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alignment — &lt;code&gt;Alignment.TopEnd&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;offset         — &lt;code&gt;x = (-40).dp&lt;/code&gt; negative translation in horizontal direction
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;painter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;painterResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cloudy&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;contentDescription&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"weather overlap image"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;align&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TopEnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_QgncR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZZxXMPJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJ_QgncR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ZZxXMPJ.png" alt="image-20210515180739796"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#horizontal-pager-implementation"&gt;
  &lt;/a&gt;
  Horizontal pager implementation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://google.github.io/accompanist/"&gt;Google accompanist&lt;/a&gt; has an incredibly good set of extension for compose. To implement the pager &amp;amp; indicator, we need corresponding dependencies added to our codebase.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"com.google.accompanist:accompanist-pager:0.9.0"&lt;/span&gt;
&lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"com.google.accompanist:accompanist-pager-indicators:0.9.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next step is to wrap the pager and indicator inside a Column and provide a list of mock objects to the render in WeatherCard that we built in above section.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;WeatherCardCarousal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WeatherCard&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pagerState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rememberPagerState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageCount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;Column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;HorizontalPager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pagerState&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nc"&gt;WeatherUpdateCard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cards&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;HorizontalPagerIndicator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;pagerState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pagerState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;align&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Alignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CenterHorizontally&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pagerState&lt;/code&gt; provides the current index of element for the &lt;code&gt;HorizontalPager&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WeatherUpdateCard(cards[page])&lt;/code&gt; with the given index, corresponding element picked from mock data and rendered in WeatherCard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;HorizontalPagerIndicator&lt;/code&gt; placed below the pager to react with page swipes in Pager. If it needs to be overlapped on the Pager. We'll wrap them inside a Box and align it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is again an example for &lt;a href="https://developer.android.com/jetpack/compose/mental-model"&gt;thinking in compose&lt;/a&gt;. Pager updates the &lt;code&gt;pagerState&lt;/code&gt;, and &lt;code&gt;PagerIndicator&lt;/code&gt; reads the same. Both of 'em doesn't know other component exist. Decoupled and yet communicating. &lt;/p&gt;



&lt;p&gt;Here, the complete gist.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Happy composing!!&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>compose</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Open Source Best Practices</title>
      <author>Pragati Verma</author>
      <pubDate>Sat, 15 May 2021 17:10:04 +0000</pubDate>
      <link>https://dev.to/pragativerma18/open-source-best-practices-902</link>
      <guid>https://dev.to/pragativerma18/open-source-best-practices-902</guid>
      <description>&lt;p&gt;Open source has always been an amazing place to learn, collaborate, contribute and build new stuff. Having been a part of many open source communities, events, and organizations, I have realized that people are slowly and steadily understanding the potential of open source as the future of technology. However, they often get confused regarding the workflow in open source projects and communities and end up doing mistakes that lead to not-so-good contributions and thus, often get stuck in a loop of code reviews and changes before they ever make a meaningful or effective contribution to a project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This article can only be helpful if you are familiar with the basic git terminology and have an understanding of the initial workflow of using git and GitHub.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Read here for more info: &lt;a href="https://opensource.guide/how-to-contribute/"&gt;How to Contribute to Open Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some of the best practices that you can take up for your next contribution!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#culture-and-communication"&gt;
  &lt;/a&gt;
  Culture and Communication
&lt;/h3&gt;

&lt;p&gt;Open source communities are a big pool of people from different social and ethnic backgrounds, races, religions, and languages. Thus, the best way to walk along with everyone would be to practice empathy. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always ensure that your tone stays friendly and respectful in a discussion. &lt;/li&gt;
&lt;li&gt;Try to adapt your language to non-native English speakers as they might find the environment challenging or intimidating at times.&lt;/li&gt;
&lt;li&gt;Stay humble and modest. None of us know everything, we are all learning. Some developers might need help with something that is very basic, be kind, and extend a helping hand whenever you can.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3sVuHmE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620929342550/vBKmgHn93.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3sVuHmE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620929342550/vBKmgHn93.jpeg" alt="Remote-Work-Culture.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to learn yourself as much as possible, devote time to explore the codebase, and attempt to understand things before you ask a question on a public channel or open an issue. Even though, if you seem to be stuck with anything, do not hesitate to ask questions to fellow developers. Likewise, do respect the space and the questions put up by others.&lt;/li&gt;
&lt;li&gt;Be nice and welcoming. Appreciate your fellow developers and contributors of they did a good job. Extend a &lt;strong&gt;" please "&lt;/strong&gt; or &lt;strong&gt;" thank you "&lt;/strong&gt; in a discussion to express politeness and generosity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg9Xxe4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/03/d55b8b7e-e6ba-11e5-9b31-59a8db92e456.gif%3Ffit%3D917%252C359" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg9Xxe4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/03/d55b8b7e-e6ba-11e5-9b31-59a8db92e456.gif%3Ffit%3D917%252C359" alt="Emojis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#communication-channels"&gt;
  &lt;/a&gt;
  Communication Channels
&lt;/h4&gt;

&lt;p&gt;Most of the open-source communities have their private or public communication channels like Slack, Discord, Gitter, etc as chat is a great way to connect with other contributors and maintainers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5F7HFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620929791597/WxvGy_4Ys.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5F7HFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620929791597/WxvGy_4Ys.gif" alt="Discussions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use these channels effectively, contributors should try to follow the below points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not switch to private communication with a maintainer or fellow contributor until and unless very necessary, as this shuts out other contributors who might be facing the same issues and can get help straight away by reading the earlier conversation.&lt;/li&gt;
&lt;li&gt;Do not discuss feature requests and bug reports over chat, as they are best handled over GitHub or Issue Trackers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#feature-requests-and-bug-reports"&gt;
  &lt;/a&gt;
  Feature Requests and Bug Reports
&lt;/h3&gt;

&lt;p&gt;Feature Requests and bug reports are best handled over GitHub, but one must follow certain steps to use them constructively:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrq1x2xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620928822105/PNfx55FDh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrq1x2xh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620928822105/PNfx55FDh.png" alt="68747470733a2f2f68656c702e6769746875622e636f6d2f6173736574732f696d616765732f68656c702f6973737565732f6e65772d69737375652d706167652d776974682d6d756c7469706c652d74656d706c617465732e706e67.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For any bug or feature, no matter how small or big, open an issue with all the necessary details, and don't forget to indicate if you're interested in working on it.&lt;/li&gt;
&lt;li&gt;Try to include all relevant information when you submit an issue so as to help others understand it easily. Include links, information about the code that has to be changed, and screenshots wherever necessary.&lt;/li&gt;
&lt;li&gt;Break down a big feature request into smaller issues, so that more than one contributor can simultaneously work on it.&lt;/li&gt;
&lt;li&gt;Always remember to add steps to reproduce the bug that you are reporting while submitting a bug report. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Most open source projects use &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/about-issue-and-pull-request-templates"&gt;Issue templates&lt;/a&gt; for Feature Requests and Bug Reports. These can be used as a reference to the details that should be mentioned while submitting an issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHR-oj8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/877585/64684565-3c595a00-d47d-11e9-8ea4-589cffa16375.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHR-oj8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/877585/64684565-3c595a00-d47d-11e9-8ea4-589cffa16375.png" alt="Issue Templates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E9C0ymWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vgpena.github.io/images/github-templates/good-issue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E9C0ymWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vgpena.github.io/images/github-templates/good-issue.png" alt="Details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;Once you have decided on the open-source project that you want to contribute to, the first step, to begin with, would be to set up the project on your local machine and run it. The steps are usually defined in the &lt;code&gt;README.md&lt;/code&gt; file. The next step would be to go through the branch policies and &lt;a href="https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/accessing-a-projects-community-profile"&gt;contributing guidelines&lt;/a&gt; of that project, these can be easily found inside the &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; file. Once, you are done, you can begin with the changes in the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-uW6ZRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620930564126/Jfng7D8_I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-uW6ZRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620930564126/Jfng7D8_I.png" alt="setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even meanwhile development, if you have any doubts or come across any challenges, feel free to ask questions from the maintainers or the fellow contributors. (You can use either the communication channel or keep the conversation over GitHub.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commits-and-pull-requests"&gt;
  &lt;/a&gt;
  Commits and Pull Requests
&lt;/h3&gt;

&lt;p&gt;Most first-time contributors are hesitant or fearful of making a PR, although, there's no need to be afraid, just keep a few things in mind while making your PR to get a quick code review and feedback:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write meaningful commit messages, that convey what changes have been done. For example -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ukyZexQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://neighbourhood.ie/assets/blog-images/semrel-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ukyZexQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://neighbourhood.ie/assets/blog-images/semrel-1.png" alt="commit message"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that you use the minimum number of commits for a change. In case, you have a lot of commits for a small fix, &lt;a href="https://levelup.gitconnected.com/how-to-squash-git-commits-9a095c1bc1fc"&gt;squash&lt;/a&gt; them before making a PR.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mn16xs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2996465/57393418-a8068000-7188-11e9-9167-2471a634a47c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mn16xs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/2996465/57393418-a8068000-7188-11e9-9167-2471a634a47c.gif" alt="Squash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do only the changes in the PR that were mentioned in the issue. Do not change anything else that is not relevant to that particular issue.&lt;/li&gt;
&lt;li&gt;Always link your PR to the issue that it fixes. Learn how to do it &lt;a href="https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#:~:text=On%20GitHub%2C%20navigate%20to%20the,to%20link%20to%20an%20issue."&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZUovQpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620930949750/78DUGiXhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZUovQpq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620930949750/78DUGiXhd.png" alt="Linking PR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make PRs from your own forks (even if you have the rights to the repo, do not create new branches, develop on your own branches).&lt;/li&gt;
&lt;li&gt;State the actual enhancements or changes done in the PR rather than just mentioning &lt;code&gt;Fixes #1&lt;/code&gt;. Refer to the PR template for details to be mentioned, if the project has one.&lt;/li&gt;
&lt;li&gt;Remember to add a screenshot or video if you have made any UI changes. This boosts up the review process exponentially.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9GZ_4RgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://www.kianyang.co/wp-content/uploads/2018/01/blog_git_commit_v2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9GZ_4RgE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://www.kianyang.co/wp-content/uploads/2018/01/blog_git_commit_v2.gif" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help the reviewers solve merge conflicts if any. Read more about merge conflicts &lt;a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/addressing-merge-conflicts"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GeUHsCGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/12/fd64b010-c06b-11e6-9dd3-a827e299c5bf.gif%3Ffit%3D1360%252C426" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GeUHsCGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.blog/wp-content/uploads/2016/12/fd64b010-c06b-11e6-9dd3-a827e299c5bf.gif%3Ffit%3D1360%252C426" alt="Merge Conflicts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;Everything in open-source happens through an exchange of words. Thus, documentation stands as a crucial step to provide information about your contribution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentation is a continuous effort at every step of software development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Add information on the new technologies, frameworks, libraries, and the code into the code itself via comments and into documentation files e.g. into the &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;/docs&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Always help to keep documentation up to date and make it easy for new contributors to join the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not the least, open-source is a collaboration between many different people with many different priorities, and sometimes, you got to wait until the right time. The other people working on a project likely have very different lives than you do, and their priorities may not match up with yours. Work projects, vacations, and family are some of the most common things that can push back a response to your needs and patience is the best way to deal with it. Since great things are worth the wait, never mind the delay.&lt;/p&gt;

&lt;p&gt;This is all that I learned along my journey in open-source. I hope that the practices mentioned above take you closer to your next &lt;strong&gt;(effective)&lt;/strong&gt; open-source contribution and help you fulfill your chance to give back to the community, one commit at a time!&lt;/p&gt;

&lt;p&gt;If you find this insightful, do let me know your views in the comments. Also, any kind of feedback is welcome. In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/pragativerma18/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/PragatiVerma18/"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/pragati_verma18"&gt;Twitter&lt;/a&gt; | &lt;a href="https://stackoverflow.com/users/10364459/pragati-verma"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Functional Programming: Composition of Functions</title>
      <author>Pratik sharma</author>
      <pubDate>Sat, 15 May 2021 17:03:03 +0000</pubDate>
      <link>https://dev.to/pratiksharm/composition-of-functions-178g</link>
      <guid>https://dev.to/pratiksharm/composition-of-functions-178g</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Input of one function comes from the output of another function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;👆 simple defination of function composition that i could find. &lt;/p&gt;

&lt;p&gt;In functiona Programming, Composition takes the place of inheritance in OOP. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#composition-gt-inheritance"&gt;
  &lt;/a&gt;
  composition &amp;gt; inheritance.
&lt;/h3&gt;

&lt;p&gt;it's just better to use composition from the start. It's more flexible, it's more powerful, and it's really easy to do. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-compose-function"&gt;
  &lt;/a&gt;
  Creating a Compose Function
&lt;/h1&gt;

&lt;p&gt;A lot of Javascript FP libraries like ramda,  provide &lt;code&gt;pipe()&lt;/code&gt; and   &lt;code&gt;compose()&lt;/code&gt; , which  help us in creating composition of functions. Before moving to those,let's create our own example functions. &lt;/p&gt;

&lt;p&gt;Here is an example of compose function which take two functions as argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//or&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#compose-vs-curry"&gt;
  &lt;/a&gt;
  Compose Vs Curry
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Curry functions are always unary functions which take one argument per application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currying functions looks a lot similar pattern to composition, which often causes them to be mistaken for each other. &lt;/p&gt;

&lt;p&gt;example of a curry function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#are-currying-and-composition-the-same-concept-in-javascript"&gt;
  &lt;/a&gt;
  Are 'Currying' and 'Composition' the same concept in javascript?
&lt;/h2&gt;

&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;First, currying is translating a function that takes multiple arguments into a sequence of functions, each accepting one argument.&lt;/p&gt;

&lt;p&gt;here, Notice the distinct way in which a curried function is applied, one argument at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// not curried&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 5&lt;/span&gt;

&lt;span class="c1"&gt;// curried&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, function composition is the combination of two functions into one, that when applied, returns the result of the chained functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// (2 + 3) * 4&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The two concepts are closely related as they play well with one another. Generic function composition works with unary functions (functions that take one argument) and curried functions also only accept one argument (per application).&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#function-composition"&gt;
  &lt;/a&gt;
  Function Composition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Function composition is a way of combining pure functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of one function is passed as the argument of the next, and the result of last one is the result of the whole.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Composition is a fancy term which means "combining". &lt;/p&gt;

&lt;p&gt;In other words, we can often "combine" multiple steps either into one line of code, or into a new function to contain them&lt;/p&gt;

&lt;p&gt;For example, if we want to find the sine of 30 degrees (remember sine uses radians) we could "compose" these two items into the single line: result = sin( degrees_to_radians( 30 ) ). This is the same as in math where we often see f(g(x)).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-a-compose-function-which-take-more-than-two-functions-and-applies-from-left-to-right-manner"&gt;
  &lt;/a&gt;
  Example of a compose function which take more than two functions, and applies from left to right manner
&lt;/h3&gt;

&lt;p&gt;We can write a function to compose as many functions as you like. In other words, compose() creates a pipeline of functions with the output of one function connected to the input of the next.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This version takes any number of functions and returns a function which takes the initial value, and then uses reduceRight() to iterate right-to-left over each function, f, in fns, and apply it in turn to the accumulated value, y. What we're accumulating with the accumulator, y in this function is the return value for the function returned by compose().&lt;/p&gt;

&lt;p&gt;Now we can write our composition like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// replace `x =&amp;gt; f(g(x))` with `compose(f, g)`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//=&amp;gt; 42 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#composition-in-react"&gt;
  &lt;/a&gt;
  Composition in React
&lt;/h1&gt;

&lt;p&gt;Creating a composition for Different buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SubmitButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#pass-methods-as-props"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pass methods as props&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;A component can focus on tracking a click event, for example, and what actually happens when the click event happens is up to the container component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoginButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Login"&lt;/span&gt; &lt;span class="na"&gt;onClickHandler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoginButton&lt;/span&gt; &lt;span class="na"&gt;onClickHandler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-children"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using children&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;props.children&lt;/code&gt; property allows you to inject components inside other components.&lt;/p&gt;

&lt;p&gt;The component needs to output &lt;code&gt;props.children&lt;/code&gt; in its JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Sidebar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you embed more components into it in a transparent way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Sidebar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First link"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Second link"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Sidebar&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how the &lt;code&gt;App&lt;/code&gt; component doesn't expose the structure of the data. &lt;code&gt;TodoList&lt;/code&gt; has no idea that there is &lt;code&gt;label&lt;/code&gt; or &lt;code&gt;status&lt;/code&gt; properties.&lt;/p&gt;

&lt;p&gt;The so called &lt;em&gt;render prop&lt;/em&gt; pattern is almost the same except that we use the &lt;code&gt;render&lt;/code&gt; prop and not &lt;code&gt;children&lt;/code&gt; for rendering the todo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'main-section'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'todo-list'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Write tests&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sent report&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;progress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Answer emails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
      &lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>functional</category>
    </item>
    <item>
      <title>I Built this Dark UI</title>
      <author>Himanshu</author>
      <pubDate>Sat, 15 May 2021 16:34:09 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-built-this-dark-ui-25ej</link>
      <guid>https://dev.to/hima_khaitan/i-built-this-dark-ui-25ej</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-idea-amp-inspiration"&gt;
  &lt;/a&gt;
  The Idea &amp;amp; Inspiration
&lt;/h3&gt;

&lt;p&gt;Researching a bit on UI, I came across several unknown facts. One such fact being the demand for Dark themes and UIs. The undeniable fact that Dark Themes reduce eye strain thus increasing Users' ease.&lt;/p&gt;

&lt;p&gt;I came across so many dark UIs in search and then finally decided to make one. 4-6 sites made me inspirations for different sections of the website and hence I came up with this design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-dark-ui"&gt;
  &lt;/a&gt;
  The Dark UI
&lt;/h3&gt;

&lt;p&gt;The color combination and design really gave me an aesthetic feel and was really impressed after trying out several designs! I kept in mind not to use pure black along with saturated colors.&lt;br&gt;
I also tried maintaining the emotion of the page and let the user communicate the depth.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/Tech-Particle"&gt;
        Tech-Particle
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Tech Particle&lt;/h2&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/Tech-Particle/blob/main/public/img/a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s5o38GR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/Tech-Particle/raw/main/public/img/a.png" alt="Project Profile"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
Introduction&lt;/h4&gt;

&lt;p&gt;Made during a task for Tech Particle&lt;/p&gt;
&lt;h4&gt;
Tech Stack&lt;/h4&gt;

&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/dd2b3c7a38881ac6bb7a14e5720793e06ffa08365342cf67ededb41185138db3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4e6f64656a732d3333393933333f7374796c653d666c61742d737175617265266c6f676f3d4e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/dd2b3c7a38881ac6bb7a14e5720793e06ffa08365342cf67ededb41185138db3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d4e6f64656a732d3333393933333f7374796c653d666c61742d737175617265266c6f676f3d4e6f64652e6a73266c6f676f436f6c6f723d7768697465" height="20"&gt;&lt;/a&gt; 
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cf392c4915ac247942ce57d8691e3cb17ed7531eaa92c3dcafb6185b86a38e11/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d457870726573732d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d65787072657373266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/cf392c4915ac247942ce57d8691e3cb17ed7531eaa92c3dcafb6185b86a38e11/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d457870726573732d626c61636b3f7374796c653d666c61742d737175617265266c6f676f3d65787072657373266c6f676f436f6c6f723d7768697465" height="20"&gt;&lt;/a&gt; 
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0c3a16a22ae058cfe38a06dc9ea16404cf006409262f547c9ccfa3ec8b30f71e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d48544d4c352d4533344632363f7374796c653d666c61742d737175617265266c6f676f3d68746d6c35266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/0c3a16a22ae058cfe38a06dc9ea16404cf006409262f547c9ccfa3ec8b30f71e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d48544d4c352d4533344632363f7374796c653d666c61742d737175617265266c6f676f3d68746d6c35266c6f676f436f6c6f723d7768697465" height="20"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2435c2a64789b8a71c701a1a593b4a6e6869789bfb0626e515dc2a6b6dffa6c5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d435353332d3135373242363f7374796c653d666c61742d737175617265266c6f676f3d63737333"&gt;&lt;img src="https://camo.githubusercontent.com/2435c2a64789b8a71c701a1a593b4a6e6869789bfb0626e515dc2a6b6dffa6c5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2d435353332d3135373242363f7374796c653d666c61742d737175617265266c6f676f3d63737333" height="20"&gt;&lt;/a&gt; 
&lt;/p&gt;

&lt;h4&gt;
Installation&lt;/h4&gt;




&lt;p&gt;Node Version Required: v12.18.3 or more
NPM Version Required: 6.14.6 or more&lt;/p&gt;
&lt;h4&gt;
Run&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Run &lt;code&gt;npm install&lt;/code&gt; in the root folder i.e Tech-Particle/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;
To Run&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;npm run start&lt;/code&gt;&lt;/p&gt;
&lt;h6&gt;
To Run Dev&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Happily turning COFFEE into CODE!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/Tech-Particle"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Running the Project: &lt;br&gt;
After cloning the repo i.e. &lt;code&gt;git clone https://github.com/himakhaitan/Tech-Particle.git&lt;/code&gt; run&lt;code&gt;cd Tech-Particle&lt;/code&gt; and run &lt;code&gt;npm install&lt;/code&gt; to download all the dependencies for the project. Run &lt;code&gt;npm start&lt;/code&gt; to start the Server and &lt;code&gt;npm dev&lt;/code&gt; to start the Dev Server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-help-me"&gt;
  &lt;/a&gt;
  Can You Help me?
&lt;/h3&gt;

&lt;p&gt;As you might have noticed the project is not at all Mobile Responsive. I can't figure out the design idea to do so! I would highly appreciate if you leave a feedback, criticism or suggestion of any kind. &lt;/p&gt;

&lt;p&gt;Project Link: &lt;a href="https://github.com/himakhaitan/Tech-Particle"&gt;Tech_partricle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will also be appreciated if you fork the repo and help me out with Mobile Design!&lt;/p&gt;

&lt;p&gt;If you're interested in contributing, the project is open-source and I would appreciate any sort of help. Otherwise, you can share it or star the repo, if you want to of course.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily turning Coffee into Code ☕&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>uiweekly</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top Facebook Behavioral Interview Questions (Part 1)</title>
      <author>The Interview Sage</author>
      <pubDate>Sat, 15 May 2021 16:06:05 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o</link>
      <guid>https://dev.to/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ObFGBUF-TuQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Have you ever wondered which questions do usually come in Behavioral Interviews at Facebook?&lt;/p&gt;

&lt;p&gt;Before we discuss the top questions, let us understand what the Behavioral Interview Round is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" alt="What is a Behavioral Interview Round at Facebook?" title="What is a Behavioral Interview Round at Facebook?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/li&gt;
&lt;li&gt;It is about you and your history, your résumé, and your motivation.&lt;/li&gt;
&lt;li&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Know yourself! Take the time to review your résumé, as the interviewer will almost certainly ask about key events in your work history.&lt;/li&gt;
&lt;li&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/li&gt;
&lt;li&gt;Familiarize yourself with &lt;a href="https://investor.fb.com/resources/"&gt;Facebook's mission statement&lt;/a&gt; and its &lt;a href="https://www.facebook.com/careers/facebook-life/"&gt;five core values&lt;/a&gt;:

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be yourself! Be open and honest about your successes and failures.&lt;/li&gt;
&lt;li&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let us review the top behavioral questions which are usually asked at Facebook.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-1-tell-me-about-a-time-you-disagreed-with-someone"&gt;
  &lt;/a&gt;
  Question 1: Tell me about a time you disagreed with someone
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BS0bYvm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqlku8nom418n094q01j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BS0bYvm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqlku8nom418n094q01j.png" alt="Tell me about a time you disagreed with someone" title="Tell me about a time you disagreed with someone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=155s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and a Special Case of "Never Had a Conflict".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tell me about a time you disagreed with someone is one of the most frequent questions asked in behavioral interviews.&lt;/p&gt;

&lt;p&gt;Interviewers also tend to ask this famous question in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tell me about a time you had a conflict with your manager.&lt;/li&gt;
&lt;li&gt;Share a situation where you faced a conflict at work.&lt;/li&gt;
&lt;li&gt;Have you ever worked with a difficult person?&lt;/li&gt;
&lt;li&gt;Describe a situation where two teams disagreed on a path forward.&lt;/li&gt;
&lt;li&gt;Tell me about a time you had a communication problem with a coworker.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kjtz2k6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26p5tqepf9puh81mk634.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kjtz2k6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26p5tqepf9puh81mk634.png" alt="Evaluation Criteria for Tell me about a time you disagreed with someone" title="Evaluation Criteria for 'Tell me about a time you disagreed with someone'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having conflicts is a part of everyone's career journey. By this question, the interviewer is trying to evaluate you on the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assess how you work in difficult situations or unstructured environments.&lt;/li&gt;
&lt;li&gt;Judge your maturity level, communication skills, and willingness to speak up irrespective of your coworker's seniority.&lt;/li&gt;
&lt;li&gt;Evaluate whether you are empathetic and respectful towards your colleagues while trying to understand your coworker's motivations and viewpoints behind the conflict.&lt;/li&gt;
&lt;li&gt;A crucial element to this question is that the interviewer is looking for a positive resolution of the conflict that benefits the company and not just an individual.&lt;/li&gt;
&lt;li&gt;Interviewers are trying to see if you are flexible to compromise.&lt;/li&gt;
&lt;li&gt;And open to learning from challenging experiences.&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#question-2-tell-me-about-a-time-you-showed-leadership"&gt;
  &lt;/a&gt;
  Question 2: Tell me about a time you showed leadership
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXkaqQws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tllyifujm3xsc3u1vxai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXkaqQws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tllyifujm3xsc3u1vxai.png" alt="Tell me about a time you showed leadership" title="Tell me about a time you showed leadership"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=457s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and a Special Case of "No Leadership Experience".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Candidates often get asked in the behavior interviews to tell about a time when they showed leadership in their workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlXQMqsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dej0h50mcjo1v36zen4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlXQMqsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dej0h50mcjo1v36zen4.png" alt="Evaluation Criteria for Tell me about a time you showed leadership" title="Evaluation Criteria for 'Tell me about a time you showed leadership'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By this question, the interviewers are looking to evaluate you on various attributes like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Taking responsibility&lt;/li&gt;
&lt;li&gt;Having confidence&lt;/li&gt;
&lt;li&gt;Strong communication skills&lt;/li&gt;
&lt;li&gt;Relationship-building skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They want to understand what leadership means to you and see if you have ever taken the initiative to lead something at your current or past workplaces. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Heading up an entire project&lt;/li&gt;
&lt;li&gt;Mentoring a junior engineer&lt;/li&gt;
&lt;li&gt;Proposing an alternate design to an existing problem&lt;/li&gt;
&lt;li&gt;Onboarding a new engineer&lt;/li&gt;
&lt;li&gt;Stepping up to fix an unexpected issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They want to know that you can lead with good judgment at times when leadership is required within the team or company.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-3-tell-me-about-a-time-you-failed-or-made-a-mistake"&gt;
  &lt;/a&gt;
  Question 3: Tell me about a time you failed or made a mistake
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bMW_FV0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8epaz7zu43h5qnd4a9eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bMW_FV0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8epaz7zu43h5qnd4a9eu.png" alt="Tell me about a time you failed or made a mistake" title="Tell me about a time you failed or made a mistake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=712s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tell me about a time you failed or made a mistake is one of the most challenging and tricky questions asked by the interviewers.&lt;/p&gt;

&lt;p&gt;Don't be afraid of this question. Mistakes and failures are inevitable, and everyone makes them at some point during their job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKG7QGbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aghs5ey0nhvln6qp5xm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKG7QGbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9aghs5ey0nhvln6qp5xm.png" alt="Evaluation Criteria for Tell me about a time you failed or made a mistake" title="Evaluation Criteria for 'Tell me about a time you failed or made a mistake'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By this question, the interviewer is trying to understand your level of maturity and personal accountability.&lt;/p&gt;

&lt;p&gt;They want to see how do you handle the situation when you experience a setback. &lt;/p&gt;

&lt;p&gt;They are looking for candidates who:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can take ownership of their actions,&lt;/li&gt;
&lt;li&gt;Are self-aware, and&lt;/li&gt;
&lt;li&gt;Strive to improve themselves from the learnings of their past experiences.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#question-4-tell-me-about-the-project-that-you-are-most-proud-of"&gt;
  &lt;/a&gt;
  Question 4: Tell me about the project that you are most proud of
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oH57e-hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cnpy81eimj38yqnotus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oH57e-hX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cnpy81eimj38yqnotus.png" alt="Tell me about the project that you are most proud of" title="Tell me about the project that you are most proud of"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=873s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another popular behavioral interview question is, Tell me about the project that you are most proud of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWygYD7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oes0ymfafu61u42q1w2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWygYD7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oes0ymfafu61u42q1w2i.png" alt="Evaluation Criteria for Tell me about the project that you are most proud of" title="Evaluation Criteria for 'Tell me about the project that you are most proud of'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this question, the interviewer is trying to assess whether your core skills and work ethics align with the company's culture or not.&lt;/p&gt;

&lt;p&gt;They are also trying to get a reading on how you define professional success.&lt;/p&gt;

&lt;p&gt;Your answer should focus on the project's impact and outcomes, as this will demonstrate to the interviewer what you consider important and how you get things done.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-5-tell-me-about-a-time-you-had-to-manage-conflicting-priorities"&gt;
  &lt;/a&gt;
  Question 5: Tell me about a time you had to manage conflicting priorities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eHelyj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7n47zkssroaqlfcimge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eHelyj3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7n47zkssroaqlfcimge.png" alt="Tell me about a time you had to manage conflicting priorities" title="Tell me about a time you had to manage conflicting priorities"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1032s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and a Special Case of "Never Had Conflicting Priorities".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Time management is a crucial part of everyone's career. Interviewers often ask candidates to tell about a time when they had to manage conflicting or shifting priorities at their workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHPdurfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n8fhyj1cmct6ld7hgr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHPdurfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7n8fhyj1cmct6ld7hgr5.png" alt="Evaluation Criteria for Tell me about a time you had to manage conflicting priorities" title="Evaluation Criteria for 'Tell me about a time you had to manage conflicting priorities'"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E6CGLkdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgzfo514ghbly8pqgoaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E6CGLkdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgzfo514ghbly8pqgoaw.png" alt="Evaluation Criteria for Tell me about a time you had to manage conflicting priorities" title="Evaluation Criteria for 'Tell me about a time you had to manage conflicting priorities'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone deals with conflicting priorities and shifting deadlines in their jobs.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;By this question, the interviewer's goal is to evaluate:

&lt;ul&gt;
&lt;li&gt;How you manage your time,&lt;/li&gt;
&lt;li&gt;Exercise judgment,&lt;/li&gt;
&lt;li&gt;Communicate, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;They want to know if you can handle competing priorities and understand the implications of missing deadlines.&lt;/li&gt;
&lt;li&gt;The interviewers are trying to assess whether you can work under challenging situations or unstructured environments and distinguish between the urgent and the important.&lt;/li&gt;
&lt;li&gt;They are also looking to see if your coworkers can rely on you to get the work done.&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;
  &lt;a href="#question-6-tell-me-about-yourself"&gt;
  &lt;/a&gt;
  Question 6: Tell me about yourself?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8RAbw1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8ob8tjoldnkf5h1vyn6.png" alt="Tell me about yourself?" title="Tell me about yourself?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1320s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common question asked by the interviewers at the start of the behavioral interviews is, Tell me about yourself?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9j-flCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07t1k8wdeca02ziqcjop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9j-flCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07t1k8wdeca02ziqcjop.png" alt="Evaluation Criteria for Tell me about yourself?" title="Evaluation Criteria for 'Tell me about yourself?'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This introductory question helps the interviewers in one of their primary goals, which is to get to know you. &lt;/li&gt;
&lt;li&gt;Interviewers try to learn various aspects about you from:

&lt;ul&gt;
&lt;li&gt;Your current and past experiences,&lt;/li&gt;
&lt;li&gt;Your core strengths,&lt;/li&gt;
&lt;li&gt;Your personality, and&lt;/li&gt;
&lt;li&gt;Your ability to respond to an unstructured question.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;They also notice how well you can connect with your colleagues and communicate your ideas clearly and effectively.&lt;/li&gt;
&lt;/ol&gt;


&lt;h1&gt;
  &lt;a href="#question-7-why-do-you-want-to-leave-your-current-role"&gt;
  &lt;/a&gt;
  Question 7: Why do you want to leave your current role?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwubFkiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uayy0m3ler5t7vvwrt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwubFkiB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uayy0m3ler5t7vvwrt3.png" alt="Why do you want to leave your current role?" title="Why do you want to leave your current role?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1478s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interviewers often ask the question in behavioral interviews, why are you leaving your current role?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFE41fKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkqwbe17joemqtw2kqzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFE41fKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkqwbe17joemqtw2kqzu.png" alt="Evaluation Criteria for Why do you want to leave your current role?" title="Evaluation Criteria for 'Why do you want to leave your current role?'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this question, the interviewer is trying to understand your intrinsic motivation to check whether you are running away from something or running towards something.&lt;/p&gt;

&lt;p&gt;It is an excellent opportunity to demonstrate to the interviewer that you are someone who looks forward with a positive attitude in general.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#question-8-do-you-have-any-questions-for-me"&gt;
  &lt;/a&gt;
  Question 8: Do you have any questions for me?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LRm4c4D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6a5u4a4t9gyz20kif70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LRm4c4D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6a5u4a4t9gyz20kif70.png" alt="Do you have any questions for me?" title="Do you have any questions for me?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ObFGBUF-TuQ&amp;amp;t=1632s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Questions that you can ask, and Tips &amp;amp; Tricks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The interviewers often asked a critical question towards the end of the behavioral interviews: "Do you have any questions for me?"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TP-1CeZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv726aw34n6136lbwbib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TP-1CeZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv726aw34n6136lbwbib.png" alt="Evaluation Criteria for Do you have any questions for me?" title="Evaluation Criteria for 'Do you have any questions for me?'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This question helps the interviewer to gauge your passion and interest in the current role you are applying for.&lt;/p&gt;

&lt;p&gt;It would be best to frame your questions specific to the role and the company you are interviewing for. This will help demonstrate to the interviewer that you have done your homework about their company and culture.&lt;/p&gt;

&lt;p&gt;It also gives you an opportunity to end the interview on a strong note.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, and Tips &amp;amp; Tricks to effectively prepare and answer the above questions in the interview. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;⬇️ &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Detailed Written Notes on Top Facebook Behavioral Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ObFGBUF-TuQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1)&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage ・ Jan 4 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;💰 &lt;a href="https://educative.io/TheInterviewSage"&gt;Exclusive 10% off on Educative Unlimited for first 100 users&lt;/a&gt;&lt;br&gt;
👩‍💻 &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
💻 &lt;a href="https://www.educative.io/courses/grokking-the-coding-interview?aff=KQZl"&gt;Grokking the Coding Interview&lt;/a&gt;&lt;br&gt;
🤖 &lt;a href="https://www.educative.io/courses/grokking-the-machine-learning-interview?aff=KQZl"&gt;Best Machine Learning Interview Course&lt;/a&gt;&lt;br&gt;
📚 &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#resources-published-by-facebook"&gt;
  &lt;/a&gt;
  Resources published by Facebook
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook"&gt;Preparing for your Software Engineering Interview at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/careers/swe-prep-onsite"&gt;Preparing for Facebook SWE Onsite Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;☕️ Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;
&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part one of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;📸 Some images used in this article are designed by Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp - &lt;a href="http://www.freepik.com"&gt;http://www.freepik.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Difference between SQL and NoSQL| Pros and Cons</title>
      <author>Starmanaman</author>
      <pubDate>Sat, 15 May 2021 15:46:04 +0000</pubDate>
      <link>https://dev.to/starmanaman/difference-between-sql-and-nosql-pros-and-cons-j5k</link>
      <guid>https://dev.to/starmanaman/difference-between-sql-and-nosql-pros-and-cons-j5k</guid>
      <description>&lt;p&gt;My website -&amp;gt; &lt;a href="http://www.BuggyProgrammer.com"&gt;www.BuggyProgrammer.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HLProjaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/916y9pu74yg44dz31x9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLProjaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/916y9pu74yg44dz31x9r.png" alt="2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y9jEnWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffl0e13tm3ekwi7ik61l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y9jEnWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffl0e13tm3ekwi7ik61l.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Create a Portfolio/Blog/Website using Devlopr</title>
      <author>Sujay Kundu</author>
      <pubDate>Sat, 15 May 2021 15:21:41 +0000</pubDate>
      <link>https://dev.to/sujaykundu777/create-a-portfolio-blog-website-using-devlopr-1pm0</link>
      <guid>https://dev.to/sujaykundu777/create-a-portfolio-blog-website-using-devlopr-1pm0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone-"&gt;
  &lt;/a&gt;
  Hello everyone ! 🤠
&lt;/h2&gt;

&lt;p&gt;In this article, I would like to share on how you can create a website easily using Devlopr-  A Jekyll built for Developers - &lt;a href="https://github.com/sujaykundu777/devlopr-jekyll"&gt;devlopr-jekyll&lt;/a&gt; (built by me !), and you can  host it for free using Github Pages or Netlify by using only 5 simple steps. Since devlopr is Open Source. One can easily contribute in improving it too :) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UBhiQrIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600535313492/YjhzLHTsb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UBhiQrIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600535313492/YjhzLHTsb.png" alt="screenshot (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devlopr Jekyll Theme (Demo) - &lt;a href="https://devlopr.netlify.com"&gt;https://devlopr.netlify.com&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt;  Fork the repo - &lt;a href="https://github.com/sujaykundu777/devlopr-jekyll/fork"&gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbn_qLCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600536537474/7cJt9WfsG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbn_qLCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600536537474/7cJt9WfsG.png" alt="fork1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Use &lt;strong&gt;your-github-username.github.io&lt;/strong&gt; as the new repo  ( Replace your-github-username with yours). Remember if you use the name other than your-github-username.github.io , your blog will be built using gh-pages branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PYVTdRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600536607280/FMHH-9z_-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PYVTdRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600536607280/FMHH-9z_-.png" alt="fork2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Clone the repo Locally  :&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using browser, go to your repo and copy the clone url :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lN38hwna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600537069159/u2pXyRgkT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lN38hwna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600537069159/u2pXyRgkT.png" alt="fork32.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/yourusername/yourusername.github.io
 &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;yourusername.github.io
 &lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 4.&lt;/strong&gt; Edit _config.yml file (Configuration Settings)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#updating-config-settings-"&gt;
  &lt;/a&gt;
  Updating Config Settings :
&lt;/h2&gt;

&lt;p&gt;This is a sample config settings, replace the values for your Blog (accordingly):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;My Blog&lt;/span&gt;  &lt;span class="c1"&gt;# Title of the Blog goes here&lt;/span&gt;
&lt;span class="na"&gt;subtitle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Blog built using devlopr&lt;/span&gt;  &lt;span class="c1"&gt;# Sub-title of the Blog goes here&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;-&lt;/span&gt; &lt;span class="c1"&gt;# Description goes here &lt;/span&gt;

&lt;span class="err"&gt;u&lt;/span&gt;&lt;span class="s"&gt;rl: "" # the base hostname &amp;amp; protocol for your site, e.g. https://example.github.io or https://example.com&lt;/span&gt;
&lt;span class="err"&gt;b&lt;/span&gt;&lt;span class="s"&gt;aseurl: "" # the subpath of your site, e.g. /blog &lt;/span&gt;

&lt;span class="err"&gt;u&lt;/span&gt;&lt;span class="s"&gt;rls:     # Navigation Links&lt;/span&gt;
    &lt;span class="s"&gt;- text: About&lt;/span&gt;
      &lt;span class="s"&gt;url: /about&lt;/span&gt;
    &lt;span class="s"&gt;- text: Blog&lt;/span&gt;
      &lt;span class="s"&gt;url: /blog&lt;/span&gt;
    &lt;span class="s"&gt;- text: Gallery&lt;/span&gt;
      &lt;span class="s"&gt;url: /gallery&lt;/span&gt;
    &lt;span class="s"&gt;- text: Shop&lt;/span&gt;
      &lt;span class="s"&gt;url: /shop&lt;/span&gt;
    &lt;span class="s"&gt;- text: Contact&lt;/span&gt;
      &lt;span class="s"&gt;url : /contact&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Author Details&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_logo: profile.png  # Author Logo&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor: John Doe # Author Name&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_bio: Hi, my name is John Doe. # Author Bio&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_email: "mail@johndoe.com"  # Author Email&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_location: India # Author Location&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_website_url: "https://johndoe.com" # Author Website URL&lt;/span&gt;
&lt;span class="err"&gt;t&lt;/span&gt;&lt;span class="s"&gt;ypewrite-text: Hi, Welcome to my Blog # Homepage Type Text &lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_work_experiences: # Experiences  (Companies you have worked with)&lt;/span&gt;
            &lt;span class="s"&gt;- company_name: Google&lt;/span&gt;
              &lt;span class="s"&gt;company_logo: google.png&lt;/span&gt;
              &lt;span class="s"&gt;company_url: https://google.com&lt;/span&gt;
              &lt;span class="s"&gt;designation: Software Engineer&lt;/span&gt;
              &lt;span class="s"&gt;description: Worked on various Google Products&lt;/span&gt;
              &lt;span class="s"&gt;visibility: true&lt;/span&gt;
            &lt;span class="s"&gt;- company_name: Microsoft&lt;/span&gt;
              &lt;span class="s"&gt;company_logo: microsoft.png&lt;/span&gt;
              &lt;span class="s"&gt;company_url: https://microsoft.com&lt;/span&gt;
              &lt;span class="s"&gt;designation: Azure Developer&lt;/span&gt;
              &lt;span class="s"&gt;description: Worked on various Azure Cloud Products&lt;/span&gt;
              &lt;span class="s"&gt;visibility: true&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_education_details: # Education Details Goes here &lt;/span&gt;
              &lt;span class="s"&gt;- college_logo: mit.png&lt;/span&gt;
                &lt;span class="s"&gt;college_name: MIT&lt;/span&gt;
                &lt;span class="s"&gt;college_url: https://mit.org&lt;/span&gt;
                &lt;span class="s"&gt;college_degree: CS Engineer&lt;/span&gt;
                &lt;span class="s"&gt;description: Bachelor of Technology&lt;/span&gt;
                &lt;span class="s"&gt;visibility: true&lt;/span&gt;
&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="s"&gt;uthor_project_details: # Project Details Goes Here&lt;/span&gt;
              &lt;span class="s"&gt;- project_thumbnail: gamershub.png&lt;/span&gt;
                &lt;span class="s"&gt;project_title: Gamers Hub&lt;/span&gt;
                &lt;span class="s"&gt;project_description: A Platform built for Gamers and Game Devs&lt;/span&gt;
                &lt;span class="s"&gt;project_url: https://gamershub.in&lt;/span&gt;
                &lt;span class="s"&gt;visibility: true&lt;/span&gt;
              &lt;span class="s"&gt;- project_thumbnail: hack4r.PNG&lt;/span&gt;
                &lt;span class="s"&gt;project_title: Hack4r&lt;/span&gt;
                &lt;span class="s"&gt;project_description: A Platform built for Hackers and Penetration Testers&lt;/span&gt;
                &lt;span class="s"&gt;project_url: https://hack4r.com&lt;/span&gt;
                &lt;span class="s"&gt;visibility: true&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; social links&lt;/span&gt;
&lt;span class="err"&gt;t&lt;/span&gt;&lt;span class="s"&gt;witter_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;g&lt;/span&gt;&lt;span class="s"&gt;ithub_username:  johndoe &lt;/span&gt;
&lt;span class="err"&gt;f&lt;/span&gt;&lt;span class="s"&gt;acebook_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;l&lt;/span&gt;&lt;span class="s"&gt;inkedin_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;b&lt;/span&gt;&lt;span class="s"&gt;ehance_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;i&lt;/span&gt;&lt;span class="s"&gt;nstagram_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;m&lt;/span&gt;&lt;span class="s"&gt;edium_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;t&lt;/span&gt;&lt;span class="s"&gt;elegram_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;d&lt;/span&gt;&lt;span class="s"&gt;ribbble_username: johndoe&lt;/span&gt;
&lt;span class="err"&gt;f&lt;/span&gt;&lt;span class="s"&gt;lickr_username: johndoe&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;for comments ( we got Disqus and Hyvor Commenting, uncomment the one you want to use )&lt;/span&gt;
&lt;span class="err"&gt;d&lt;/span&gt;&lt;span class="s"&gt;isqus_shortname: john-doe &lt;/span&gt;
&lt;span class="err"&gt;h&lt;/span&gt;&lt;span class="s"&gt;yvor_talk_website_id: 244 &lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; wakatime username (for coding activity tracking)&lt;/span&gt;
&lt;span class="err"&gt;w&lt;/span&gt;&lt;span class="s"&gt;akatime_username: johndoe&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; mailchimp embedded form url (newsletter):&lt;/span&gt;
&lt;span class="err"&gt;m&lt;/span&gt;&lt;span class="s"&gt;ailchimp_form_url: https://johndoe.us10.list-manage.com/subscribe/post?u=asfsaagd&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; formspree (contact form)&lt;/span&gt;
&lt;span class="err"&gt;f&lt;/span&gt;&lt;span class="s"&gt;ormspree_email: johndoe@gmail.com&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; syntax highlighter&lt;/span&gt;
&lt;span class="err"&gt;m&lt;/span&gt;&lt;span class="s"&gt;arkdown: kramdown&lt;/span&gt;
&lt;span class="err"&gt;h&lt;/span&gt;&lt;span class="s"&gt;ighlighter: rouge&lt;/span&gt;
&lt;span class="err"&gt;p&lt;/span&gt;&lt;span class="s"&gt;ermalink: pretty&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Choose what to show ( can be true or false)&lt;/span&gt;
&lt;span class="err"&gt;s&lt;/span&gt;&lt;span class="s"&gt;how_author_work_experiences: true&lt;/span&gt;
&lt;span class="err"&gt;s&lt;/span&gt;&lt;span class="s"&gt;how_author_education_details: true&lt;/span&gt;
&lt;span class="err"&gt;s&lt;/span&gt;&lt;span class="s"&gt;how_author_project_details: true&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; pagination of posts&lt;/span&gt;
&lt;span class="err"&gt;p&lt;/span&gt;&lt;span class="s"&gt;aginate: 4&lt;/span&gt;
&lt;span class="err"&gt;p&lt;/span&gt;&lt;span class="s"&gt;er_page: 4&lt;/span&gt;
&lt;span class="err"&gt;p&lt;/span&gt;&lt;span class="s"&gt;aginate_path: "/blog/page/:num/"&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; minify&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; compress_html:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   clippings: all&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   comments: ["&amp;lt;!-- ", " --&amp;gt;"]&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   endings: all&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   ignore:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;     envs: ['development']&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Archives&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; jekyll-archives:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   enabled:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;     - categories&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   layout: archive&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;   permalinks:&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;     category: '/category/:name/'&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Shop   (Snipcart settings)&lt;/span&gt;
&lt;span class="err"&gt;c&lt;/span&gt;&lt;span class="s"&gt;ollections: &lt;/span&gt;
 &lt;span class="s"&gt;- products&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Gallery&lt;/span&gt;
&lt;span class="err"&gt;d&lt;/span&gt;&lt;span class="s"&gt;efaults:&lt;/span&gt;
  &lt;span class="s"&gt;-&lt;/span&gt;
    &lt;span class="s"&gt;scope:&lt;/span&gt;
      &lt;span class="s"&gt;path: "gallery"&lt;/span&gt;
    &lt;span class="s"&gt;values:&lt;/span&gt;
      &lt;span class="s"&gt;permalink: /:path/:basename:output_ext&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Build settings&lt;/span&gt;
&lt;span class="err"&gt;p&lt;/span&gt;&lt;span class="s"&gt;lugins:&lt;/span&gt;
  &lt;span class="s"&gt;- jekyll-paginate&lt;/span&gt;
  &lt;span class="s"&gt;- jekyll-gist&lt;/span&gt;
  &lt;span class="s"&gt;- jekyll-seo-tag&lt;/span&gt;
  &lt;span class="s"&gt;- jekyll-sitemap&lt;/span&gt;
  &lt;span class="s"&gt;- jekyll-menus&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Exclude from processing.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; The following items will not be processed, by default.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Any item listed under the `exclude:` key here will be automatically added to&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; the internal "default list".&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; Excluded items can be processed by explicitly listing the directories or&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt; their entries' file path in the `include:` list.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="err"&gt;e&lt;/span&gt;&lt;span class="s"&gt;xclude:&lt;/span&gt;
  &lt;span class="s"&gt;- .sass-cache/&lt;/span&gt;
  &lt;span class="s"&gt;- .jekyll-cache/&lt;/span&gt;
  &lt;span class="s"&gt;- gemfiles/&lt;/span&gt;
  &lt;span class="s"&gt;- Gemfile&lt;/span&gt;
  &lt;span class="s"&gt;- Gemfile.lock&lt;/span&gt;
  &lt;span class="s"&gt;- node_modules/&lt;/span&gt;
  &lt;span class="s"&gt;- vendor/bundle/&lt;/span&gt;
  &lt;span class="s"&gt;- vendor/cache/&lt;/span&gt;
  &lt;span class="s"&gt;- vendor/gems/&lt;/span&gt;
  &lt;span class="s"&gt;- vendor/ruby/&lt;/span&gt;

&lt;span class="err"&gt;d&lt;/span&gt;&lt;span class="s"&gt;estination: ./build  # setting build as default &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have done all the changes, its time to push the changes - commit to Github with config setting changes :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
 &lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"my new blog using devlopr-jekyll"&lt;/span&gt;
 &lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;  - Enable Github Pages for Deployment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visit your Github Repo settings ! Enable master branch as Github Pages Branch :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDZcWkXX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600539030844/cGjxe8Tx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDZcWkXX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600539030844/cGjxe8Tx0.png" alt="fork6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your new blog will be ready in few minutes ! You can visit your site using [&lt;a href="https://yourusername.github.io"&gt;https://yourusername.github.io&lt;/a&gt;]. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDuwdUbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600539388519/GxeyDgDY0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDuwdUbR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600539388519/GxeyDgDY0.png" alt="fork7.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Guide&lt;/strong&gt; - Managing Website Locally - Install the development requirements:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#set-up-local-development-environment"&gt;
  &lt;/a&gt;
  Set up local development environment
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt; and &lt;a href="https://bundler.io/"&gt;Bundler&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need ruby and bundler to build our site locally. After installation check if its working:&lt;/p&gt;

&lt;p&gt;For ruby :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ruby &lt;span class="nt"&gt;-v&lt;/span&gt;
ruby 2.5.1p57 &lt;span class="o"&gt;(&lt;/span&gt;2018-03-29 revision 63029&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-linux-gnu]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For bundler :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gem &lt;span class="nb"&gt;install &lt;/span&gt;bundler
&lt;span class="nv"&gt;$ &lt;/span&gt;bundler &lt;span class="nt"&gt;-v&lt;/span&gt;
Bundler version 2.1.4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add jekyll :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle add jekyll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder.&lt;/p&gt;

&lt;p&gt;You can check the jekyll version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bundle exec jekyll -v
jekyll 4.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 6.&lt;/strong&gt; Install the gem dependencies by running the following command&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle update
&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 7.&lt;/strong&gt; Serve the site locally by running the following command below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;jekyll serve &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can also serve using :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; for development server&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GrR2_YvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600538625078/Yd5C4w-f-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GrR2_YvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600538625078/Yd5C4w-f-.png" alt="fork4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9jFdTPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600538652676/_nmiae4ED.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9jFdTPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1600538652676/_nmiae4ED.png" alt="fork41.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-blog-posts"&gt;
  &lt;/a&gt;
  Creating Blog Posts
&lt;/h3&gt;

&lt;p&gt;Start populating your blog by adding your .md files in _posts. devlopr-jekyll already has a few examples.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#yaml-post-example"&gt;
  &lt;/a&gt;
  YAML Post Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Sample&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Post"&lt;/span&gt;
&lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sujay Kundu&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2019-05-21&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;14:35:23&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;+0530'&lt;/span&gt;
&lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;jekyll&lt;/span&gt;
&lt;span class="na"&gt;summary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;This is the summary for the sample post&lt;/span&gt;
&lt;span class="na"&gt;thumbnail&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sample.png&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;

&lt;span class="s"&gt;Hi ! This is sample post.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#yaml-page-example"&gt;
  &lt;/a&gt;
  YAML Page Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;--------&lt;/span&gt;
&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;page&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sample Page&lt;/span&gt;
&lt;span class="na"&gt;menus&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;header&lt;/span&gt;
&lt;span class="na"&gt;permalink&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/sample-page/&lt;/span&gt;
&lt;span class="s"&gt;--------&lt;/span&gt;

&lt;span class="s"&gt;Hi ! This is sample page.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#editing-stylesheet-customizations"&gt;
  &lt;/a&gt;
  Editing stylesheet - Customizations
&lt;/h4&gt;

&lt;p&gt;You’ll only work with a single file to edit/add theme style: assets/css/main.scss.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-your-changes"&gt;
  &lt;/a&gt;
  Deploy your Changes
&lt;/h3&gt;

&lt;p&gt;Once happy with your blog changes. Push your changes to master branch and in few minutes your Blog is up and running ! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>portfolio</category>
      <category>jekyll</category>
    </item>
  </channel>
</rss>
